{
  "ID": "8ae58f4a-ef66-4eb3-bf4a-d4de2ac557e8",
  "Root": {
    "alive": true,
    "content": [
      "c9194c01-80a6-4562-9cce-96e186e1df88",
      "da2af49f-2d92-4177-bc15-7de0672da262",
      "820317e0-794b-49a4-af93-c999345d2f65",
      "0a1236ba-4272-4076-ae5a-23489c2e29c7",
      "0793759e-205f-4f0e-acd8-a70d2a735206",
      "15f4f9d4-13fd-41c5-a89c-bf43f3c71e79",
      "489d9d4d-aa18-4282-a5f8-976d368f1602",
      "89da9e86-5846-4c65-b6d4-f147f1dfc704",
      "d5f250f7-e56c-40dd-aa62-e567f547667e",
      "f5b934aa-5df4-49a6-ae78-307b336747e3",
      "481c7a48-0557-43d1-9e56-4459331aaae0"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550458570073,
    "id": "8ae58f4a-ef66-4eb3-bf4a-d4de2ac557e8",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550458570073,
    "parent_id": "81d7eb85-93b6-4e05-b0ec-e5fa7d1ba7db",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "010 CROSS APPLY and OUTER APPLY basics"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550458570069,
        "id": "c9194c01-80a6-4562-9cce-96e186e1df88",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550458570069,
        "parent_id": "8ae58f4a-ef66-4eb3-bf4a-d4de2ac557e8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Apply will be used when when table valued function in the right expression."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Apply will be used when when table valued function in the right expression."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550458570071,
        "id": "da2af49f-2d92-4177-bc15-7de0672da262",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550458570071,
        "parent_id": "8ae58f4a-ef66-4eb3-bf4a-d4de2ac557e8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "create a Department table to hold information about departments. Then create an Employee table which hold information about the employees. Please note, each employee belongs to a department, hence the Employee table has referential integrity with the Department table."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "create a Department table to hold information about departments. Then create an Employee table which hold information about the employees. Please note, each employee belongs to a department, hence the Employee table has referential integrity with the Department table."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550458570072,
        "id": "820317e0-794b-49a4-af93-c999345d2f65",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550458570072,
        "parent_id": "8ae58f4a-ef66-4eb3-bf4a-d4de2ac557e8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "First query selects data from Department table and uses CROSS APPLY to evaluate the Employee table for each record of the Department table. Second query simply joins the Department table with the Employee table and all the matching records are produced."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "First query selects data from Department table and uses CROSS APPLY to evaluate the Employee table for each record of the Department table. Second query simply joins the Department table with the Employee table and all the matching records are produced."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550458570072,
        "id": "0a1236ba-4272-4076-ae5a-23489c2e29c7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550458570072,
        "parent_id": "8ae58f4a-ef66-4eb3-bf4a-d4de2ac557e8",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "SELECT *\nFROM Department D\nCROSS APPLY (\n    SELECT *\n    FROM Employee E\n    WHERE E.DepartmentID = D.DepartmentID\n) A\nGO\nSELECT *\nFROM Department D\nINNER JOIN Employee E\n  ON D.DepartmentID = E.DepartmentID"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "SELECT *\nFROM Department D\nCROSS APPLY (\n    SELECT *\n    FROM Employee E\n    WHERE E.DepartmentID = D.DepartmentID\n) A\nGO\nSELECT *\nFROM Department D\nINNER JOIN Employee E\n  ON D.DepartmentID = E.DepartmentID",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550458570072,
        "id": "0793759e-205f-4f0e-acd8-a70d2a735206",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550458570072,
        "parent_id": "8ae58f4a-ef66-4eb3-bf4a-d4de2ac557e8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If you look at the results they produced, it is the exact same result-set; How does it differ from a JOIN and how does it help in writing more efficient queries."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If you look at the results they produced, it is the exact same result-set; How does it differ from a JOIN and how does it help in writing more efficient queries."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550458570072,
        "id": "15f4f9d4-13fd-41c5-a89c-bf43f3c71e79",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550458570072,
        "parent_id": "8ae58f4a-ef66-4eb3-bf4a-d4de2ac557e8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The first query in Script #2 selects data from Department table and uses OUTER APPLY to evaluate the Employee table for each record of the Department table. For those rows for which there is not a match in Employee table, those rows contains NULL values as you can see in case of row 5 and 6. The second query simply uses a LEFT OUTER JOIN between the Department table and the Employee table. As expected the query returns all rows from Department table; even for those rows for which there is no match in the Employee table."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The first query in Script #2 selects data from Department table and uses OUTER APPLY to evaluate the Employee table for each record of the Department table. For those rows for which there is not a match in Employee table, those rows contains NULL values as you can see in case of row 5 and 6. The second query simply uses a LEFT OUTER JOIN between the Department table and the Employee table. As expected the query returns all rows from Department table; even for those rows for which there is no match in the Employee table."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550458570072,
        "id": "489d9d4d-aa18-4282-a5f8-976d368f1602",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550458570072,
        "parent_id": "8ae58f4a-ef66-4eb3-bf4a-d4de2ac557e8",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "SELECT *\nFROM Department D\nOUTER APPLY (\n    SELECT *\n    FROM Employee E\n    WHERE E.DepartmentID = D.DepartmentID\n) A\nGO\nSELECT *\nFROM Department D\nLEFT OUTER JOIN Employee E\n  ON D.DepartmentID = E.DepartmentID\nGO"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "SELECT *\nFROM Department D\nOUTER APPLY (\n    SELECT *\n    FROM Employee E\n    WHERE E.DepartmentID = D.DepartmentID\n) A\nGO\nSELECT *\nFROM Department D\nLEFT OUTER JOIN Employee E\n  ON D.DepartmentID = E.DepartmentID\nGO",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550458570072,
        "id": "89da9e86-5846-4c65-b6d4-f147f1dfc704",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550458570072,
        "parent_id": "8ae58f4a-ef66-4eb3-bf4a-d4de2ac557e8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Even though the above two queries return the same information, the execution plan will be bit different. But cost wise there will be not much difference."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Even though the above two queries return the same information, the execution plan will be bit different. But cost wise there will be not much difference."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550458570072,
        "id": "d5f250f7-e56c-40dd-aa62-e567f547667e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550458570072,
        "parent_id": "8ae58f4a-ef66-4eb3-bf4a-d4de2ac557e8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Now comes the time to see where the APPLY operator is really required. In Script #3, I am creating a table-valued function which accepts DepartmentID as its parameter and returns all the employees who belong to this department. The next query selects data from Department table and uses CROSS APPLY to join with the function we created. It passes the DepartmentID for each row from the outer table expression (in our case Department table) and evaluates the function for each row similar to a correlated subquery. The next query uses the OUTER APPLY in place of CROSS APPLY and hence unlike CROSS APPLY which returned only correlated data, the OUTER APPLY returns non-correlated data as well, placing NULLs into the missing columns."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Now comes the time to see where the APPLY operator is really required. In Script #3, I am creating a table-valued function which accepts DepartmentID as its parameter and returns all the employees who belong to this department. The next query selects data from Department table and uses CROSS APPLY to join with the function we created. It passes the DepartmentID for each row from the outer table expression (in our case Department table) and evaluates the function for each row similar to a correlated subquery. The next query uses the OUTER APPLY in place of CROSS APPLY and hence unlike CROSS APPLY which returned only correlated data, the OUTER APPLY returns non-correlated data as well, placing NULLs into the missing columns."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550458570073,
        "id": "f5b934aa-5df4-49a6-ae78-307b336747e3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550458570073,
        "parent_id": "8ae58f4a-ef66-4eb3-bf4a-d4de2ac557e8",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "CREATE FUNCTION dbo.fn_GetAllEmployeeOfADepartment (@DeptID AS int)\nRETURNS TABLE\nAS\n  RETURN\n  (\n  SELECT\n    *\n  FROM Employee E\n  WHERE E.DepartmentID = @DeptID\n  )\nGO\nSELECT\n  *\nFROM Department D\nCROSS APPLY dbo.fn_GetAllEmployeeOfADepartment(D.DepartmentID)\nGO\nSELECT\n  *\nFROM Department D\nOUTER APPLY dbo.fn_GetAllEmployeeOfADepartment(D.DepartmentID)\nGO"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "CREATE FUNCTION dbo.fn_GetAllEmployeeOfADepartment (@DeptID AS int)\nRETURNS TABLE\nAS\n  RETURN\n  (\n  SELECT\n    *\n  FROM Employee E\n  WHERE E.DepartmentID = @DeptID\n  )\nGO\nSELECT\n  *\nFROM Department D\nCROSS APPLY dbo.fn_GetAllEmployeeOfADepartment(D.DepartmentID)\nGO\nSELECT\n  *\nFROM Department D\nOUTER APPLY dbo.fn_GetAllEmployeeOfADepartment(D.DepartmentID)\nGO",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550458570073,
        "id": "481c7a48-0557-43d1-9e56-4459331aaae0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550458570073,
        "parent_id": "8ae58f4a-ef66-4eb3-bf4a-d4de2ac557e8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "So now if you are wondering, can we use a simple join in place of the above queries? Then the answer is NO, if you replace CROSS/OUTER APPLY in the above queries with INNER JOIN/LEFT OUTER JOIN, specify ON clause (something as 1=1) and run the query, you will get “The multi-part identifier “D.DepartmentID” could not be bound.” error. This is because with JOINs the execution context of outer query is different from the execution context of the function (or a derived table), and you can not bind a value/variable from the outer query to the function as a parameter. Hence the APPLY operator is required for such queries."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "So now if you are wondering, can we use a simple join in place of the above queries? Then the answer is NO, if you replace CROSS/OUTER APPLY in the above queries with INNER JOIN/LEFT OUTER JOIN, specify ON clause (something as 1=1) and run the query, you will get “The multi-part identifier “D.DepartmentID” could not be bound.” error. This is because with JOINs the execution context of outer query is different from the execution context of the function (or a derived table), and you can not bind a value/variable from the outer query to the function as a parameter. Hence the APPLY operator is required for such queries."
          }
        ]
      }
    ],
    "title": "010 CROSS APPLY and OUTER APPLY basics"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}