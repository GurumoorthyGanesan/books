{
  "ID": "81f9cce7-f9de-4977-8e98-ebbc485591c6",
  "Root": {
    "alive": true,
    "content": [
      "7084aefe-884f-4049-821e-686bc89b47d3",
      "a44d27b2-3361-46fe-9f4f-d3c93f875d24",
      "bbd89f32-79a5-431f-9aa3-79c680f7fec2",
      "31511e15-b3cb-4383-b612-1fc06570bb7b",
      "691586ba-605f-4208-beac-5eeba1a892a0",
      "0760ef08-44e8-4b14-89dc-a4b3641699b7",
      "a0672433-4e8c-4626-9756-39b4c91da477"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552101219949,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "81f9cce7-f9de-4977-8e98-ebbc485591c6",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552101219949,
    "parent_id": "5d7c03e8-234e-44ac-99c0-de7bac145d55",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Lambdas"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101219947,
        "id": "7084aefe-884f-4049-821e-686bc89b47d3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101219947,
        "parent_id": "81f9cce7-f9de-4977-8e98-ebbc485591c6",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "# lambda using the arrow syntax\nhello_world = -\u003e { 'Hello World!' }\nhello_world[]\n# 'Hello World!'\n\n# lambda using the arrow syntax accepting 1 argument\nhello_world = -\u003e(name) { \"Hello #{name}!\" }\nhello_world['Sven']\n# \"Hello Sven!\"\n\nthe_thing = lambda do |magic, ohai, dere|\n  puts \"magic! #{magic}\"\n  puts \"ohai #{dere}\"\n  puts \"#{ohai} means hello\"\nend\n\nthe_thing.call(1, 2, 3)\n# magic! 1\n# ohai 3\n# 2 means hello\n\nthe_thing.call(1, 2)\n# ArgumentError: wrong number of arguments (2 for 3)\n\nthe_thing[1, 2, 3, 4]\n# ArgumentError: wrong number of arguments (4 for 3)"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "# lambda using the arrow syntax\nhello_world = -\u003e { 'Hello World!' }\nhello_world[]\n# 'Hello World!'\n\n# lambda using the arrow syntax accepting 1 argument\nhello_world = -\u003e(name) { \"Hello #{name}!\" }\nhello_world['Sven']\n# \"Hello Sven!\"\n\nthe_thing = lambda do |magic, ohai, dere|\n  puts \"magic! #{magic}\"\n  puts \"ohai #{dere}\"\n  puts \"#{ohai} means hello\"\nend\n\nthe_thing.call(1, 2, 3)\n# magic! 1\n# ohai 3\n# 2 means hello\n\nthe_thing.call(1, 2)\n# ArgumentError: wrong number of arguments (2 for 3)\n\nthe_thing[1, 2, 3, 4]\n# ArgumentError: wrong number of arguments (4 for 3)",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101219948,
        "id": "a44d27b2-3361-46fe-9f4f-d3c93f875d24",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101219948,
        "parent_id": "81f9cce7-f9de-4977-8e98-ebbc485591c6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You can also use "
            ],
            [
              "-\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to create and "
            ],
            [
              ".()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to call lambda"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You can also use "
          },
          {
            "Text": "-\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " to create and "
          },
          {
            "Text": ".()",
            "AttrFlags": 2
          },
          {
            "Text": " to call lambda"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101219948,
        "id": "bbd89f32-79a5-431f-9aa3-79c680f7fec2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101219948,
        "parent_id": "81f9cce7-f9de-4977-8e98-ebbc485591c6",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "the_thing = -\u003e(magic, ohai, dere) {\n  puts \"magic! #{magic}\"\n  puts \"ohai #{dere}\"\n  puts \"#{ohai} means hello\"\n}\n\nthe_thing.(1, 2, 3)\n# =\u003e magic! 1\n# =\u003e ohai 3\n# =\u003e 2 means hello"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "the_thing = -\u003e(magic, ohai, dere) {\n  puts \"magic! #{magic}\"\n  puts \"ohai #{dere}\"\n  puts \"#{ohai} means hello\"\n}\n\nthe_thing.(1, 2, 3)\n# =\u003e magic! 1\n# =\u003e ohai 3\n# =\u003e 2 means hello",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101219948,
        "id": "31511e15-b3cb-4383-b612-1fc06570bb7b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101219948,
        "parent_id": "81f9cce7-f9de-4977-8e98-ebbc485591c6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Here you can see that a lambda is almost the same as a proc. However, there are several caveats:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Here you can see that a lambda is almost the same as a proc. However, there are several caveats:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101219949,
        "id": "691586ba-605f-4208-beac-5eeba1a892a0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101219949,
        "parent_id": "81f9cce7-f9de-4977-8e98-ebbc485591c6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The arity of a lambda’s arguments are enforced; passing the wrong number of arguments to a lambda, will raise an "
            ],
            [
              "ArgumentError",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". They can still have default parameters, splat parameters, etc."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "The arity of a lambda’s arguments are enforced; passing the wrong number of arguments to a lambda, will raise an "
          },
          {
            "Text": "ArgumentError",
            "AttrFlags": 2
          },
          {
            "Text": ". They can still have default parameters, splat parameters, etc."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101219949,
        "id": "0760ef08-44e8-4b14-89dc-a4b3641699b7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101219949,
        "parent_id": "81f9cce7-f9de-4977-8e98-ebbc485591c6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "return",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "ing from within a lambda returns from the lambda, while "
            ],
            [
              "return",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "ing from a proc returns out of the enclosing scope:"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "return",
            "AttrFlags": 2
          },
          {
            "Text": "ing from within a lambda returns from the lambda, while "
          },
          {
            "Text": "return",
            "AttrFlags": 2
          },
          {
            "Text": "ing from a proc returns out of the enclosing scope:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101219949,
        "id": "a0672433-4e8c-4626-9756-39b4c91da477",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101219949,
        "parent_id": "81f9cce7-f9de-4977-8e98-ebbc485591c6",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "def try_proc\n  x = Proc.new {\n    return # Return from try_proc\n  }\n  x.call\n  puts \"After x.call\" # this line is never reached\nend\n\ndef try_lambda\n  y = -\u003e {\n    return # return from y\n  }\n  y.call\n  puts \"After y.call\" # this line is not skipped\nend\n\ntry_proc # No output\ntry_lambda # Outputs \"After y.call\""
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "def try_proc\n  x = Proc.new {\n    return # Return from try_proc\n  }\n  x.call\n  puts \"After x.call\" # this line is never reached\nend\n\ndef try_lambda\n  y = -\u003e {\n    return # return from y\n  }\n  y.call\n  puts \"After y.call\" # this line is not skipped\nend\n\ntry_proc # No output\ntry_lambda # Outputs \"After y.call\"",
        "code_language": "Plain Text"
      }
    ],
    "title": "Lambdas",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}