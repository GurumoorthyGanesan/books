{
  "ID": "e576c7ad-0c57-472f-a8aa-0a68f6a6fa0e",
  "Root": {
    "alive": true,
    "content": [
      "4bbac5c9-72ad-49e7-848b-b7f7130e82fc",
      "2764e909-898e-4b92-bf01-f380f2ed9756",
      "dca0c688-86f5-4340-ac5e-3d2c001dd6f5",
      "315ee52f-51a9-4c1c-a546-46cf5e6d1feb",
      "5e5b4e75-bd79-4f53-8b06-0ac626f4f1a7",
      "76290cb1-5c15-431f-a0cc-50630148649c",
      "fff3cac4-97be-4245-b22d-8b2682cefb7b",
      "447c6813-ce0b-4dbd-999f-5f6167efe50c",
      "23a3cb90-4e3c-49e1-885e-e17c8699ec36",
      "403fd616-0e70-4a3e-a0b2-441c3ddb7404",
      "efe1dc50-dc44-44d5-8879-d65b6eccda63",
      "d0bee3a2-efd4-4531-bec2-2ab7706a60cd",
      "68de4cdd-2e0a-4a0b-9e48-41bd7415e09b",
      "b49746cf-2ccd-4d07-aaa3-97e0cfb41eb6"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552101673830,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "e576c7ad-0c57-472f-a8aa-0a68f6a6fa0e",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552101673830,
    "parent_id": "e9481ae9-ca5e-4b9f-b722-d570649c2cfe",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Operator Precedence and Methods"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101673825,
        "id": "4bbac5c9-72ad-49e7-848b-b7f7130e82fc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101673825,
        "parent_id": "e576c7ad-0c57-472f-a8aa-0a68f6a6fa0e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "From highest to lowest, this is the precedence table for Ruby. High precedence operations happen before low precedence operations."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "From highest to lowest, this is the precedence table for Ruby. High precedence operations happen before low precedence operations."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101673826,
        "id": "2764e909-898e-4b92-bf01-f380f2ed9756",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101673826,
        "parent_id": "e576c7ad-0c57-472f-a8aa-0a68f6a6fa0e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "╔═══════════════════════╦════════════════════════════════════════╦═════════╗\n║ Operators             ║                 Operations             ║ Method? ║\n╠═══════════════════════╬════════════════════════════════════════╬═════════╣\n║ .                     ║ Method call (e.g. foo.bar)             ║         ║\n║ []  []=               ║ Bracket Lookup, Bracket Set            ║    ✓¹   ║\n║ ! ~ +                 ║ Boolean NOT, complement, unary plus    ║    ✓²   ║\n║ **                    ║ Exponentiation                         ║    ✓    ║\n║ -                     ║ Unary minus                            ║    ✓²   ║\n║ * / %                 ║ Multiplication, division, modulo       ║    ✓    ║\n║ + -                   ║ Addition, subtraction                  ║    ✓    ║\n║ \u003c\u003c \u003e\u003e                 ║ Bitwise shift                          ║    ✓    ║\n║ \u0026                     ║ Bitwise AND                            ║    ✓    ║\n║ | ^                   ║ Bitwise OR, Bitwise XOR                ║    ✓    ║\n║ \u003c \u003c= \u003e= \u003e             ║ Comparison                             ║    ✓    ║\n║ \u003c=\u003e == != === =~ !~   ║ Equality, pattern matching, comparison ║    ✓³   ║\n║ \u0026\u0026                    ║ Boolean AND                            ║         ║\n║ ||                    ║ Boolean OR                             ║         ║\n║ .. ...                ║ Inclusive range, Exclusive range       ║         ║\n║ ? :                   ║ Ternary operator                       ║         ║\n║ rescue                ║ Modifier rescue                        ║         ║\n║ = += -=               ║ Assignments                            ║         ║\n║ defined?              ║ Defined operator                       ║         ║\n║ not                   ║ Boolean NOT                            ║         ║\n║ or and                ║ Boolean OR, Boolean AND                ║         ║\n║ if unless while until ║ Modifier if, unless, while, until      ║         ║\n║ { }                   ║ Block with braces                      ║         ║\n║ do end                ║ Block with do end                      ║         ║\n╚═══════════════════════╩════════════════════════════════════════╩═════════╝"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "╔═══════════════════════╦════════════════════════════════════════╦═════════╗\n║ Operators             ║                 Operations             ║ Method? ║\n╠═══════════════════════╬════════════════════════════════════════╬═════════╣\n║ .                     ║ Method call (e.g. foo.bar)             ║         ║\n║ []  []=               ║ Bracket Lookup, Bracket Set            ║    ✓¹   ║\n║ ! ~ +                 ║ Boolean NOT, complement, unary plus    ║    ✓²   ║\n║ **                    ║ Exponentiation                         ║    ✓    ║\n║ -                     ║ Unary minus                            ║    ✓²   ║\n║ * / %                 ║ Multiplication, division, modulo       ║    ✓    ║\n║ + -                   ║ Addition, subtraction                  ║    ✓    ║\n║ \u003c\u003c \u003e\u003e                 ║ Bitwise shift                          ║    ✓    ║\n║ \u0026                     ║ Bitwise AND                            ║    ✓    ║\n║ | ^                   ║ Bitwise OR, Bitwise XOR                ║    ✓    ║\n║ \u003c \u003c= \u003e= \u003e             ║ Comparison                             ║    ✓    ║\n║ \u003c=\u003e == != === =~ !~   ║ Equality, pattern matching, comparison ║    ✓³   ║\n║ \u0026\u0026                    ║ Boolean AND                            ║         ║\n║ ||                    ║ Boolean OR                             ║         ║\n║ .. ...                ║ Inclusive range, Exclusive range       ║         ║\n║ ? :                   ║ Ternary operator                       ║         ║\n║ rescue                ║ Modifier rescue                        ║         ║\n║ = += -=               ║ Assignments                            ║         ║\n║ defined?              ║ Defined operator                       ║         ║\n║ not                   ║ Boolean NOT                            ║         ║\n║ or and                ║ Boolean OR, Boolean AND                ║         ║\n║ if unless while until ║ Modifier if, unless, while, until      ║         ║\n║ { }                   ║ Block with braces                      ║         ║\n║ do end                ║ Block with do end                      ║         ║\n╚═══════════════════════╩════════════════════════════════════════╩═════════╝",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101673826,
        "id": "dca0c688-86f5-4340-ac5e-3d2c001dd6f5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101673826,
        "parent_id": "e576c7ad-0c57-472f-a8aa-0a68f6a6fa0e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Unary + and unary - are for "
            ],
            [
              "+obj",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "-obj",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "-(some_expression)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Unary + and unary - are for "
          },
          {
            "Text": "+obj",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "-obj",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "-(some_expression)",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101673826,
        "id": "315ee52f-51a9-4c1c-a546-46cf5e6d1feb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101673826,
        "parent_id": "e576c7ad-0c57-472f-a8aa-0a68f6a6fa0e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Modifier-if, modifier-unless, etc. are for the modifier versions of those keywords. For example, this is a modifier-unless expression:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Modifier-if, modifier-unless, etc. are for the modifier versions of those keywords. For example, this is a modifier-unless expression:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101673828,
        "id": "5e5b4e75-bd79-4f53-8b06-0ac626f4f1a7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101673828,
        "parent_id": "e576c7ad-0c57-472f-a8aa-0a68f6a6fa0e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "a += 1 unless a.zero?"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "a += 1 unless a.zero?",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101673828,
        "id": "76290cb1-5c15-431f-a0cc-50630148649c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101673828,
        "parent_id": "e576c7ad-0c57-472f-a8aa-0a68f6a6fa0e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Operators with a ✓ may be defined as methods. Most methods are named exactly as the operator is named, for example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Operators with a ✓ may be defined as methods. Most methods are named exactly as the operator is named, for example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101673828,
        "id": "fff3cac4-97be-4245-b22d-8b2682cefb7b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101673828,
        "parent_id": "e576c7ad-0c57-472f-a8aa-0a68f6a6fa0e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class Foo\n  def **(x)\n    puts \"Raising to the power of #{x}\"\n  end\n  def \u003c\u003c(y)\n    puts \"Shifting left by #{y}\"\n  end\n  def !\n    puts \"Boolean negation\"\n  end\nend\n\nFoo.new ** 2     #=\u003e \"Raising to the power of 2\"\nFoo.new \u003c\u003c 3     #=\u003e \"Shifting left by 3\"\n!Foo.new         #=\u003e \"Boolean negation\""
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class Foo\n  def **(x)\n    puts \"Raising to the power of #{x}\"\n  end\n  def \u003c\u003c(y)\n    puts \"Shifting left by #{y}\"\n  end\n  def !\n    puts \"Boolean negation\"\n  end\nend\n\nFoo.new ** 2     #=\u003e \"Raising to the power of 2\"\nFoo.new \u003c\u003c 3     #=\u003e \"Shifting left by 3\"\n!Foo.new         #=\u003e \"Boolean negation\"",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101673828,
        "id": "447c6813-ce0b-4dbd-999f-5f6167efe50c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101673828,
        "parent_id": "e576c7ad-0c57-472f-a8aa-0a68f6a6fa0e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "¹ The Bracket Lookup and Bracket Set methods ("
            ],
            [
              "[]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "[]=",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") have their arguments defined after the name, for example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "¹ The Bracket Lookup and Bracket Set methods ("
          },
          {
            "Text": "[]",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "[]=",
            "AttrFlags": 2
          },
          {
            "Text": ") have their arguments defined after the name, for example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101673829,
        "id": "23a3cb90-4e3c-49e1-885e-e17c8699ec36",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101673829,
        "parent_id": "e576c7ad-0c57-472f-a8aa-0a68f6a6fa0e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class Foo\n  def [](x)\n    puts \"Looking up item #{x}\"\n  end\n  def []=(x,y)\n    puts \"Setting item #{x} to #{y}\"\n  end\nend\n\nf = Foo.new\nf[:cats] = 42    #=\u003e \"Setting item cats to 42\"\nf[17]            #=\u003e \"Looking up item 17\""
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class Foo\n  def [](x)\n    puts \"Looking up item #{x}\"\n  end\n  def []=(x,y)\n    puts \"Setting item #{x} to #{y}\"\n  end\nend\n\nf = Foo.new\nf[:cats] = 42    #=\u003e \"Setting item cats to 42\"\nf[17]            #=\u003e \"Looking up item 17\"",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101673829,
        "id": "403fd616-0e70-4a3e-a0b2-441c3ddb7404",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101673829,
        "parent_id": "e576c7ad-0c57-472f-a8aa-0a68f6a6fa0e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "² The “unary plus” and “unary minus” operators are defined as methods named "
            ],
            [
              "+@",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "-@",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", for example"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "² The “unary plus” and “unary minus” operators are defined as methods named "
          },
          {
            "Text": "+@",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "-@",
            "AttrFlags": 2
          },
          {
            "Text": ", for example"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101673829,
        "id": "efe1dc50-dc44-44d5-8879-d65b6eccda63",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101673829,
        "parent_id": "e576c7ad-0c57-472f-a8aa-0a68f6a6fa0e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class Foo\n  def -@\n    puts \"unary minus\"\n  end\n  def +@\n    puts \"unary plus\"\n  end\nend\n\nf = Foo.new\n+f               #=\u003e \"unary plus\"\n-f               #=\u003e \"unary minus\""
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class Foo\n  def -@\n    puts \"unary minus\"\n  end\n  def +@\n    puts \"unary plus\"\n  end\nend\n\nf = Foo.new\n+f               #=\u003e \"unary plus\"\n-f               #=\u003e \"unary minus\"",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101673829,
        "id": "d0bee3a2-efd4-4531-bec2-2ab7706a60cd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101673829,
        "parent_id": "e576c7ad-0c57-472f-a8aa-0a68f6a6fa0e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "³ In early versions of Ruby the inequality operator "
            ],
            [
              "!=",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and the non-matching operator "
            ],
            [
              "!~",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " could not be defined as methods. Instead, the method for the corresponding equality operator "
            ],
            [
              "==",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or matching operator "
            ],
            [
              "=~",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " was invoked, and the result of that method was boolean inverted by Ruby."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "³ In early versions of Ruby the inequality operator "
          },
          {
            "Text": "!=",
            "AttrFlags": 2
          },
          {
            "Text": " and the non-matching operator "
          },
          {
            "Text": "!~",
            "AttrFlags": 2
          },
          {
            "Text": " could not be defined as methods. Instead, the method for the corresponding equality operator "
          },
          {
            "Text": "==",
            "AttrFlags": 2
          },
          {
            "Text": " or matching operator "
          },
          {
            "Text": "=~",
            "AttrFlags": 2
          },
          {
            "Text": " was invoked, and the result of that method was boolean inverted by Ruby."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101673829,
        "id": "68de4cdd-2e0a-4a0b-9e48-41bd7415e09b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101673829,
        "parent_id": "e576c7ad-0c57-472f-a8aa-0a68f6a6fa0e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If you do not define your own "
            ],
            [
              "!=",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "!~",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " operators the above behavior is still true. However, as of Ruby 1.9.1, those two operators may also be defined as methods:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If you do not define your own "
          },
          {
            "Text": "!=",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "!~",
            "AttrFlags": 2
          },
          {
            "Text": " operators the above behavior is still true. However, as of Ruby 1.9.1, those two operators may also be defined as methods:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101673830,
        "id": "b49746cf-2ccd-4d07-aaa3-97e0cfb41eb6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101673830,
        "parent_id": "e576c7ad-0c57-472f-a8aa-0a68f6a6fa0e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class Foo\n  def ==(x)\n    puts \"checking for EQUALITY with #{x}, returning false\"\n    false\n  end\nend\n\nf = Foo.new\nx = (f == 42)    #=\u003e \"checking for EQUALITY with 42, returning false\"\nputs x           #=\u003e \"false\"\nx = (f != 42)    #=\u003e \"checking for EQUALITY with 42, returning false\"\nputs x           #=\u003e \"true\"\n\nclass Foo\n  def !=(x)\n    puts \"Checking for INequality with #{x}\"\n  end\nend\n\nf != 42          #=\u003e \"checking for INequality with 42\""
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class Foo\n  def ==(x)\n    puts \"checking for EQUALITY with #{x}, returning false\"\n    false\n  end\nend\n\nf = Foo.new\nx = (f == 42)    #=\u003e \"checking for EQUALITY with 42, returning false\"\nputs x           #=\u003e \"false\"\nx = (f != 42)    #=\u003e \"checking for EQUALITY with 42, returning false\"\nputs x           #=\u003e \"true\"\n\nclass Foo\n  def !=(x)\n    puts \"Checking for INequality with #{x}\"\n  end\nend\n\nf != 42          #=\u003e \"checking for INequality with 42\"",
        "code_language": "Plain Text"
      }
    ],
    "title": "Operator Precedence and Methods",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}