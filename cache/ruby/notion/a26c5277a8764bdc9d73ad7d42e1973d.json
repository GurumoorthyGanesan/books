{
  "ID": "a26c5277-a876-4bdc-9d73-ad7d42e1973d",
  "Root": {
    "alive": true,
    "content": [
      "33fb7c38-db9b-4537-8e03-cd60d81da25c",
      "c083a075-5e7d-4e88-8f81-9cc0d684b939",
      "8d40807c-bb90-46bf-8d03-cd8ba1aab4ab",
      "ff344181-14ec-4fb5-9044-20e3b464ef0d",
      "8bb9f671-1927-4594-aa6d-a13373a2f1aa",
      "13b7d004-5749-4d04-b8b9-2953201d03eb",
      "47e1b0f8-b19c-4f57-9d63-71008445cd38",
      "786faeb0-0bc2-40fe-ae29-746072d63104",
      "fed20586-624f-48ff-9898-77c5f3deaaeb",
      "db3c659b-9a7f-46ef-b308-3fd487881fb1",
      "9477f598-825a-4115-9254-ce942fa647e9",
      "0ad7fefb-a641-4329-a008-d639f67b459b",
      "86ab4206-71eb-4b16-827d-4a29075933e7",
      "642b290f-091d-41db-ae6c-d02faad3872c",
      "18ae743e-ee73-49f5-ba65-d38387ce0478",
      "274bc86b-c546-4fd3-bd50-895052338be1",
      "d20d0048-4fe5-42d4-88f3-1051523561a0"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552101318160,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "a26c5277-a876-4bdc-9d73-ad7d42e1973d",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552101318160,
    "parent_id": "d879941a-3f7c-4970-b09f-cbd77cb932d2",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Each"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101318154,
        "id": "33fb7c38-db9b-4537-8e03-cd60d81da25c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101318154,
        "parent_id": "a26c5277-a876-4bdc-9d73-ad7d42e1973d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Ruby has many types of enumerators but the first and most simple type of enumerator to start with is "
            ],
            [
              "each",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". We will print out "
            ],
            [
              "even",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "odd",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " for each number between "
            ],
            [
              "1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "10",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to show how "
            ],
            [
              "each",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " works."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Ruby has many types of enumerators but the first and most simple type of enumerator to start with is "
          },
          {
            "Text": "each",
            "AttrFlags": 2
          },
          {
            "Text": ". We will print out "
          },
          {
            "Text": "even",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "odd",
            "AttrFlags": 2
          },
          {
            "Text": " for each number between "
          },
          {
            "Text": "1",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "10",
            "AttrFlags": 2
          },
          {
            "Text": " to show how "
          },
          {
            "Text": "each",
            "AttrFlags": 2
          },
          {
            "Text": " works."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101318157,
        "id": "c083a075-5e7d-4e88-8f81-9cc0d684b939",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101318157,
        "parent_id": "a26c5277-a876-4bdc-9d73-ad7d42e1973d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Basically there are two ways to pass so called "
            ],
            [
              "blocks",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". A "
            ],
            [
              "block",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is a piece of code being passed which will be executed by the method which is called. The "
            ],
            [
              "each",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method takes a "
            ],
            [
              "block",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " which it calls for every element of the collection of objects it was called on."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Basically there are two ways to pass so called "
          },
          {
            "Text": "blocks",
            "AttrFlags": 2
          },
          {
            "Text": ". A "
          },
          {
            "Text": "block",
            "AttrFlags": 2
          },
          {
            "Text": " is a piece of code being passed which will be executed by the method which is called. The "
          },
          {
            "Text": "each",
            "AttrFlags": 2
          },
          {
            "Text": " method takes a "
          },
          {
            "Text": "block",
            "AttrFlags": 2
          },
          {
            "Text": " which it calls for every element of the collection of objects it was called on."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101318157,
        "id": "8d40807c-bb90-46bf-8d03-cd8ba1aab4ab",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101318157,
        "parent_id": "a26c5277-a876-4bdc-9d73-ad7d42e1973d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "There are two ways to pass a block to a method:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "There are two ways to pass a block to a method:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101318157,
        "id": "ff344181-14ec-4fb5-9044-20e3b464ef0d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101318157,
        "parent_id": "a26c5277-a876-4bdc-9d73-ad7d42e1973d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Method 1: Inline"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Method 1: Inline"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101318158,
        "id": "8bb9f671-1927-4594-aa6d-a13373a2f1aa",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101318158,
        "parent_id": "a26c5277-a876-4bdc-9d73-ad7d42e1973d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "(1..10).each { |i| puts i.even? ? 'even' : 'odd' }"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "(1..10).each { |i| puts i.even? ? 'even' : 'odd' }",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101318158,
        "id": "13b7d004-5749-4d04-b8b9-2953201d03eb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101318158,
        "parent_id": "a26c5277-a876-4bdc-9d73-ad7d42e1973d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This is a very compressed and "
            ],
            [
              "ruby",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " way to solve this. Letâ€™s break this down piece by piece."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This is a very compressed and "
          },
          {
            "Text": "ruby",
            "AttrFlags": 4
          },
          {
            "Text": " way to solve this. Letâ€™s break this down piece by piece."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101318158,
        "id": "47e1b0f8-b19c-4f57-9d63-71008445cd38",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101318158,
        "parent_id": "a26c5277-a876-4bdc-9d73-ad7d42e1973d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "(1..10)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is a range from "
            ],
            [
              "1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to "
            ],
            [
              "10",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " inclusive. If we wanted it to be "
            ],
            [
              "1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to "
            ],
            [
              "10",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " exclusive, we would write "
            ],
            [
              "(1...10)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "(1..10)",
            "AttrFlags": 2
          },
          {
            "Text": " is a range from "
          },
          {
            "Text": "1",
            "AttrFlags": 2
          },
          {
            "Text": " to "
          },
          {
            "Text": "10",
            "AttrFlags": 2
          },
          {
            "Text": " inclusive. If we wanted it to be "
          },
          {
            "Text": "1",
            "AttrFlags": 2
          },
          {
            "Text": " to "
          },
          {
            "Text": "10",
            "AttrFlags": 2
          },
          {
            "Text": " exclusive, we would write "
          },
          {
            "Text": "(1...10)",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101318159,
        "id": "786faeb0-0bc2-40fe-ae29-746072d63104",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101318159,
        "parent_id": "a26c5277-a876-4bdc-9d73-ad7d42e1973d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              ".each",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is an enumerator that enumerates over "
            ],
            [
              "each",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " element in the object it is acting on. In this case, it acts on "
            ],
            [
              "each",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " number in the range."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": ".each",
            "AttrFlags": 2
          },
          {
            "Text": " is an enumerator that enumerates over "
          },
          {
            "Text": "each",
            "AttrFlags": 2
          },
          {
            "Text": " element in the object it is acting on. In this case, it acts on "
          },
          {
            "Text": "each",
            "AttrFlags": 2
          },
          {
            "Text": " number in the range."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101318159,
        "id": "fed20586-624f-48ff-9898-77c5f3deaaeb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101318159,
        "parent_id": "a26c5277-a876-4bdc-9d73-ad7d42e1973d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "{ |i| puts i.even? ? 'even' : 'odd' }",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is the block for the "
            ],
            [
              "each",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " statement, which itself can be broken down further."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "{ |i| puts i.even? ? 'even' : 'odd' }",
            "AttrFlags": 2
          },
          {
            "Text": " is the block for the "
          },
          {
            "Text": "each",
            "AttrFlags": 2
          },
          {
            "Text": " statement, which itself can be broken down further."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101318159,
        "id": "db3c659b-9a7f-46ef-b308-3fd487881fb1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101318159,
        "parent_id": "a26c5277-a876-4bdc-9d73-ad7d42e1973d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "1. `|i|` this means that each element in the range is represented within the block by the identifier `i`. 2. `puts` is an output method in Ruby that has an automatic line break after each time it prints. (We can use `print` if we don't want the automatic line break) 3. `i.even?` checks if `i` is even. We could have also used `i % 2 == 0`; however, it is preferable to use built in methods. 4. ` ? \"even\" : \"odd\" ` this is ruby's ternary operator. The way a ternary operator is constructed is `expression ? a : b`. This is short for",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "ruby if expression a else b end"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "1. `|i|` this means that each element in the range is represented within the block by the identifier `i`. 2. `puts` is an output method in Ruby that has an automatic line break after each time it prints. (We can use `print` if we don't want the automatic line break) 3. `i.even?` checks if `i` is even. We could have also used `i % 2 == 0`; however, it is preferable to use built in methods. 4. ` ? \"even\" : \"odd\" ` this is ruby's ternary operator. The way a ternary operator is constructed is `expression ? a : b`. This is short for",
            "AttrFlags": 2
          },
          {
            "Text": "ruby if expression a else b end"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101318159,
        "id": "9477f598-825a-4115-9254-ce942fa647e9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101318159,
        "parent_id": "a26c5277-a876-4bdc-9d73-ad7d42e1973d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101318159,
        "id": "0ad7fefb-a641-4329-a008-d639f67b459b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101318159,
        "parent_id": "a26c5277-a876-4bdc-9d73-ad7d42e1973d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For code longer than one line the "
            ],
            [
              "block",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " should be passed as a "
            ],
            [
              "multiline block",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". ## Method 2: Multiline"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For code longer than one line the "
          },
          {
            "Text": "block",
            "AttrFlags": 2
          },
          {
            "Text": " should be passed as a "
          },
          {
            "Text": "multiline block",
            "AttrFlags": 2
          },
          {
            "Text": ". ## Method 2: Multiline"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101318160,
        "id": "86ab4206-71eb-4b16-827d-4a29075933e7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101318160,
        "parent_id": "a26c5277-a876-4bdc-9d73-ad7d42e1973d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "(1..10).each do |i|if i.even?puts 'even'elseputs 'odd'endend"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "(1..10).each do |i|if i.even?puts 'even'elseputs 'odd'endend",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101318160,
        "id": "642b290f-091d-41db-ae6c-d02faad3872c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101318160,
        "parent_id": "a26c5277-a876-4bdc-9d73-ad7d42e1973d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In a "
            ],
            [
              "multiline block",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " the "
            ],
            [
              "do",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " replaces the opening bracket and "
            ],
            [
              "end",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " replaces the closing bracket from the "
            ],
            [
              "inline",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " style."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In a "
          },
          {
            "Text": "multiline block",
            "AttrFlags": 2
          },
          {
            "Text": " the "
          },
          {
            "Text": "do",
            "AttrFlags": 2
          },
          {
            "Text": " replaces the opening bracket and "
          },
          {
            "Text": "end",
            "AttrFlags": 2
          },
          {
            "Text": " replaces the closing bracket from the "
          },
          {
            "Text": "inline",
            "AttrFlags": 2
          },
          {
            "Text": " style."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101318160,
        "id": "18ae743e-ee73-49f5-ba65-d38387ce0478",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101318160,
        "parent_id": "a26c5277-a876-4bdc-9d73-ad7d42e1973d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Ruby supports reverse_each as well. It will iterate the array backwards."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Ruby supports reverse_each as well. It will iterate the array backwards."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101318160,
        "id": "274bc86b-c546-4fd3-bd50-895052338be1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101318160,
        "parent_id": "a26c5277-a876-4bdc-9d73-ad7d42e1973d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "@arr = [1,2,3,4]\nputs @arr.inspect # output is [1,2,3,4]\n\nprint \"Reversed array elements[\"\n@arr.reverse_each do |val|\n        print \" #{val} \" # output is 4 3 2 1\nend\nprint \"]\\n\""
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "@arr = [1,2,3,4]\nputs @arr.inspect # output is [1,2,3,4]\n\nprint \"Reversed array elements[\"\n@arr.reverse_each do |val|\n        print \" #{val} \" # output is 4 3 2 1\nend\nprint \"]\\n\"",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101318160,
        "id": "d20d0048-4fe5-42d4-88f3-1051523561a0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101318160,
        "parent_id": "a26c5277-a876-4bdc-9d73-ad7d42e1973d",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      }
    ],
    "title": "Each",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}