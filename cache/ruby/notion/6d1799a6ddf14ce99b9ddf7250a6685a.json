{
  "ID": "6d1799a6-ddf1-4ce9-9b9d-df7250a6685a",
  "Root": {
    "alive": true,
    "content": [
      "5c5ab5db-2ae6-4072-aa65-98cd30c31532",
      "887bd6f7-333f-408b-ab76-3d55c267af71",
      "cdf12ba6-ab51-4c93-9068-90cf8bedeb5c",
      "0678179f-2318-43b1-932e-31e9f165c34b",
      "7a7cc305-bd94-4093-a693-da5f1c3d4c4a"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552101326000,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "6d1799a6-ddf1-4ce9-9b9d-df7250a6685a",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552101326000,
    "parent_id": "04e23c6b-c2cd-4606-81d6-13cc2dce5d78",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "operator"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101325992,
        "id": "5c5ab5db-2ae6-4072-aa65-98cd30c31532",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101325992,
        "parent_id": "6d1799a6-ddf1-4ce9-9b9d-df7250a6685a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "if /hay/ =~ 'haystack'\n  puts \"There is hay in the word haystack\"\nend"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "if /hay/ =~ 'haystack'\n  puts \"There is hay in the word haystack\"\nend",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101325995,
        "id": "887bd6f7-333f-408b-ab76-3d55c267af71",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101325995,
        "parent_id": "6d1799a6-ddf1-4ce9-9b9d-df7250a6685a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note:",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " The order "
            ],
            [
              "is significant",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". Though "
            ],
            [
              "'haystack' =~ /hay/",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is in most cases an equivalent, side effects might differ:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note:",
            "AttrFlags": 4
          },
          {
            "Text": " The order "
          },
          {
            "Text": "is significant",
            "AttrFlags": 1
          },
          {
            "Text": ". Though "
          },
          {
            "Text": "'haystack' =~ /hay/",
            "AttrFlags": 2
          },
          {
            "Text": " is in most cases an equivalent, side effects might differ:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101325997,
        "id": "cdf12ba6-ab51-4c93-9068-90cf8bedeb5c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101325997,
        "parent_id": "6d1799a6-ddf1-4ce9-9b9d-df7250a6685a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Strings captured from named capture groups are assigned to local variables only when "
            ],
            [
              "Regexp#=~",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is called ("
            ],
            [
              "regexp =~ str",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://ruby-doc.org/core-2.3.1/String.html#method-i-3D-7E"
                ]
              ]
            ],
            [
              ");"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Strings captured from named capture groups are assigned to local variables only when "
          },
          {
            "Text": "Regexp#=~",
            "AttrFlags": 2
          },
          {
            "Text": " is called ("
          },
          {
            "Text": "regexp =~ str",
            "AttrFlags": 2,
            "Link": "http://ruby-doc.org/core-2.3.1/String.html#method-i-3D-7E"
          },
          {
            "Text": ");"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101325999,
        "id": "0678179f-2318-43b1-932e-31e9f165c34b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101325999,
        "parent_id": "6d1799a6-ddf1-4ce9-9b9d-df7250a6685a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Since the right operand might be is an arbitrary object, for "
            ],
            [
              "regexp =~ str",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " there will be called either "
            ],
            [
              "Regexp#=~",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "String#=~",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Since the right operand might be is an arbitrary object, for "
          },
          {
            "Text": "regexp =~ str",
            "AttrFlags": 2
          },
          {
            "Text": " there will be called either "
          },
          {
            "Text": "Regexp#=~",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "String#=~",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101326000,
        "id": "7a7cc305-bd94-4093-a693-da5f1c3d4c4a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101326000,
        "parent_id": "6d1799a6-ddf1-4ce9-9b9d-df7250a6685a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note that this does not return a true/false value, it instead returns either the index of the match if found, or nil if not found. Because all integers in ruby are truthy (including 0) and nil is falsy, this works. If you want a boolean value, use "
            ],
            [
              "#===",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " as shown in "
            ],
            [
              "another example",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/ruby/1357/regular-expressions-and-regex-based-operations/4424/simple-regex-match#t=201607221936139047493"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note that this does not return a true/false value, it instead returns either the index of the match if found, or nil if not found. Because all integers in ruby are truthy (including 0) and nil is falsy, this works. If you want a boolean value, use "
          },
          {
            "Text": "#===",
            "AttrFlags": 2
          },
          {
            "Text": " as shown in "
          },
          {
            "Text": "another example",
            "Link": "http://stackoverflow.com/documentation/ruby/1357/regular-expressions-and-regex-based-operations/4424/simple-regex-match#t=201607221936139047493"
          },
          {
            "Text": "."
          }
        ]
      }
    ],
    "title": "operator",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}