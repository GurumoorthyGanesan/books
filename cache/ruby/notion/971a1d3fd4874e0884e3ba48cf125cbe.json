{
  "ID": "971a1d3f-d487-4e08-84e3-ba48cf125cbe",
  "Root": {
    "alive": true,
    "content": [
      "e92523a0-68ab-4cfb-937f-9d5a5a6e0475",
      "8a816cde-e2dd-42de-805e-920c8e6992e5",
      "754123e1-53ca-4530-9b74-ed191e9dd29e",
      "b4c4b347-7c40-4c78-8b6f-7fa78bddce6d",
      "f97980bf-330c-45b7-b4f3-fe2a1be691ec",
      "ad8ee40d-5aa4-44f0-ac91-25aabb920935",
      "815a07d6-098a-4292-ace7-ec6f46d4fca3",
      "a371fda4-a554-4ba8-afff-7c5a8e9b27df",
      "f6a8d90e-86b7-4801-a9c2-aed0a46ee4b5",
      "f6993b63-955e-4e8a-b563-e6699ea90717",
      "968c71e3-4cde-4a60-9217-141e939899a7"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552102177865,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "971a1d3f-d487-4e08-84e3-ba48cf125cbe",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552102177865,
    "parent_id": "7eb3d215-c3b9-459b-91a2-50b351cb9a27",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Using keyword arguments"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552102177860,
        "id": "e92523a0-68ab-4cfb-937f-9d5a5a6e0475",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552102177860,
        "parent_id": "971a1d3f-d487-4e08-84e3-ba48cf125cbe",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You define a keyword argument in a method by specifying the name in the method definition:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You define a keyword argument in a method by specifying the name in the method definition:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552102177862,
        "id": "8a816cde-e2dd-42de-805e-920c8e6992e5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552102177862,
        "parent_id": "971a1d3f-d487-4e08-84e3-ba48cf125cbe",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "def say(message: \"Hello World\")\n  puts message\nend\n\nsay\n# =\u003e \"Hello World\"\n\nsay message: \"Today is Monday\"\n# =\u003e \"Today is Monday\""
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "def say(message: \"Hello World\")\n  puts message\nend\n\nsay\n# =\u003e \"Hello World\"\n\nsay message: \"Today is Monday\"\n# =\u003e \"Today is Monday\"",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552102177863,
        "id": "754123e1-53ca-4530-9b74-ed191e9dd29e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552102177863,
        "parent_id": "971a1d3f-d487-4e08-84e3-ba48cf125cbe",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You can define multiple keyword arguments, the definition order is irrelevant:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You can define multiple keyword arguments, the definition order is irrelevant:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552102177863,
        "id": "b4c4b347-7c40-4c78-8b6f-7fa78bddce6d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552102177863,
        "parent_id": "971a1d3f-d487-4e08-84e3-ba48cf125cbe",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "def say(message: \"Hello World\", before: \"\u003cp\u003e\", after: \"\u003c/p\u003e\")\n  puts \"#{before}#{message}#{after}\"\nend\n\nsay\n# =\u003e \"\u003cp\u003eHello World\u003c/p\u003e\"\n\nsay message: \"Today is Monday\"\n# =\u003e \"\u003cp\u003eToday is Monday\u003c/p\u003e\"\n\nsay after: \"\u003c/p\u003e\u003chr\u003e\", message: \"Today is Monday\"\n# =\u003e \"\u003cp\u003eToday is Monday\u003c/p\u003e\u003chr\u003e\""
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "def say(message: \"Hello World\", before: \"\u003cp\u003e\", after: \"\u003c/p\u003e\")\n  puts \"#{before}#{message}#{after}\"\nend\n\nsay\n# =\u003e \"\u003cp\u003eHello World\u003c/p\u003e\"\n\nsay message: \"Today is Monday\"\n# =\u003e \"\u003cp\u003eToday is Monday\u003c/p\u003e\"\n\nsay after: \"\u003c/p\u003e\u003chr\u003e\", message: \"Today is Monday\"\n# =\u003e \"\u003cp\u003eToday is Monday\u003c/p\u003e\u003chr\u003e\"",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552102177863,
        "id": "f97980bf-330c-45b7-b4f3-fe2a1be691ec",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552102177863,
        "parent_id": "971a1d3f-d487-4e08-84e3-ba48cf125cbe",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Keyword arguments can be mixed with positional arguments:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Keyword arguments can be mixed with positional arguments:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552102177863,
        "id": "ad8ee40d-5aa4-44f0-ac91-25aabb920935",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552102177863,
        "parent_id": "971a1d3f-d487-4e08-84e3-ba48cf125cbe",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "def say(message, before: \"\u003cp\u003e\", after: \"\u003c/p\u003e\")\n  puts \"#{before}#{message}#{after}\"\nend\n\nsay \"Hello World\", before: \"\u003cspan\u003e\", after: \"\u003c/span\u003e\"\n# =\u003e \"\u003cspan\u003eHello World\u003c/span\u003e\""
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "def say(message, before: \"\u003cp\u003e\", after: \"\u003c/p\u003e\")\n  puts \"#{before}#{message}#{after}\"\nend\n\nsay \"Hello World\", before: \"\u003cspan\u003e\", after: \"\u003c/span\u003e\"\n# =\u003e \"\u003cspan\u003eHello World\u003c/span\u003e\"",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552102177865,
        "id": "815a07d6-098a-4292-ace7-ec6f46d4fca3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552102177865,
        "parent_id": "971a1d3f-d487-4e08-84e3-ba48cf125cbe",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Mixing keyword argument with positional argument was a very common approach before Ruby 2.1, because it was not possible to define "
            ],
            [
              "required keyword arguments",
              [
                [
                  "a",
                  "https://stackoverflow.com/documentation/ruby/5253/keyword-arguments/18679/required-keyword-arguments#t=201608060918529843522"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Mixing keyword argument with positional argument was a very common approach before Ruby 2.1, because it was not possible to define "
          },
          {
            "Text": "required keyword arguments",
            "Link": "https://stackoverflow.com/documentation/ruby/5253/keyword-arguments/18679/required-keyword-arguments#t=201608060918529843522"
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552102177865,
        "id": "a371fda4-a554-4ba8-afff-7c5a8e9b27df",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552102177865,
        "parent_id": "971a1d3f-d487-4e08-84e3-ba48cf125cbe",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Moreover, in Ruby \u003c 2.0, it was very common to add an "
            ],
            [
              "Hash",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " at the end of a method definition to use for optional arguments. The syntax is very similar to keyword arguments, to the point where optional arguments via "
            ],
            [
              "Hash",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " are compatible with Ruby 2 keyword arguments."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Moreover, in Ruby \u003c 2.0, it was very common to add an "
          },
          {
            "Text": "Hash",
            "AttrFlags": 2
          },
          {
            "Text": " at the end of a method definition to use for optional arguments. The syntax is very similar to keyword arguments, to the point where optional arguments via "
          },
          {
            "Text": "Hash",
            "AttrFlags": 2
          },
          {
            "Text": " are compatible with Ruby 2 keyword arguments."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552102177865,
        "id": "f6a8d90e-86b7-4801-a9c2-aed0a46ee4b5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552102177865,
        "parent_id": "971a1d3f-d487-4e08-84e3-ba48cf125cbe",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "def say(message, options = {})\n  before = option.fetch(:before, \"\u003cp\u003e\")\n  after  = option.fetch(:after, \"\u003c/p\u003e\")\n  puts \"#{before}#{message}#{after}\"\nend\n\n# The method call is syntactically equivalent to the keyword argument one\nsay \"Hello World\", before: \"\u003cspan\u003e\", after: \"\u003c/span\u003e\"\n# =\u003e \"\u003cspan\u003eHello World\u003c/span\u003e\""
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "def say(message, options = {})\n  before = option.fetch(:before, \"\u003cp\u003e\")\n  after  = option.fetch(:after, \"\u003c/p\u003e\")\n  puts \"#{before}#{message}#{after}\"\nend\n\n# The method call is syntactically equivalent to the keyword argument one\nsay \"Hello World\", before: \"\u003cspan\u003e\", after: \"\u003c/span\u003e\"\n# =\u003e \"\u003cspan\u003eHello World\u003c/span\u003e\"",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552102177865,
        "id": "f6993b63-955e-4e8a-b563-e6699ea90717",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552102177865,
        "parent_id": "971a1d3f-d487-4e08-84e3-ba48cf125cbe",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note that trying to pass a not-defined keyword argument will result in an error:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note that trying to pass a not-defined keyword argument will result in an error:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552102177865,
        "id": "968c71e3-4cde-4a60-9217-141e939899a7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552102177865,
        "parent_id": "971a1d3f-d487-4e08-84e3-ba48cf125cbe",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "def say(message: \"Hello World\")\n  puts message\nend\n\nsay foo: \"Hello\"\n# =\u003e ArgumentError: unknown keyword: foo"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "def say(message: \"Hello World\")\n  puts message\nend\n\nsay foo: \"Hello\"\n# =\u003e ArgumentError: unknown keyword: foo",
        "code_language": "Plain Text"
      }
    ],
    "title": "Using keyword arguments",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}