{
  "ID": "006fb48b-2c97-4ad2-8099-3de2fbde7fb3",
  "Root": {
    "alive": true,
    "content": [
      "53a3cf61-3dc6-4752-b89c-f21dfaa9c74a",
      "2f28a314-862f-439d-a95a-1fb69e75679c",
      "0fd59db3-e8e9-4075-a9f0-ec081e3a581f",
      "dfc8a22a-e5bd-45f5-96bf-44a814d2bf87",
      "b3b1c63c-a0d6-4176-89c4-f3af36cc2593",
      "4036a34e-33e2-4ba2-a5e1-1d2e449642f4"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552102696271,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "006fb48b-2c97-4ad2-8099-3de2fbde7fb3",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552102696271,
    "parent_id": "ff17ee6e-cf45-4e7e-9f1f-2d198c0da86f",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Recursive function"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552102696267,
        "id": "53a3cf61-3dc6-4752-b89c-f21dfaa9c74a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552102696267,
        "parent_id": "006fb48b-2c97-4ad2-8099-3de2fbde7fb3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Let’s start with a simple algorithm to see how recursion could be implemented in Ruby."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Let’s start with a simple algorithm to see how recursion could be implemented in Ruby."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552102696270,
        "id": "2f28a314-862f-439d-a95a-1fb69e75679c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552102696270,
        "parent_id": "006fb48b-2c97-4ad2-8099-3de2fbde7fb3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A bakery has products to sell. Products are in packs. It services orders in packs only. Packaging starts from the largest pack size and then the remaining quantities are filled by next pack sizes available."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A bakery has products to sell. Products are in packs. It services orders in packs only. Packaging starts from the largest pack size and then the remaining quantities are filled by next pack sizes available."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552102696270,
        "id": "0fd59db3-e8e9-4075-a9f0-ec081e3a581f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552102696270,
        "parent_id": "006fb48b-2c97-4ad2-8099-3de2fbde7fb3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For e.g. If an order of 16 is received, bakery allocates 2 from 5 pack and 2 from 3 pack. 2"
            ],
            [
              "5+2",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              "3 = 16. Let’s see how this is implemented in recursion. “allocate” is the recursive function here."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For e.g. If an order of 16 is received, bakery allocates 2 from 5 pack and 2 from 3 pack. 2"
          },
          {
            "Text": "5+2",
            "AttrFlags": 4
          },
          {
            "Text": "3 = 16. Let’s see how this is implemented in recursion. “allocate” is the recursive function here."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552102696271,
        "id": "dfc8a22a-e5bd-45f5-96bf-44a814d2bf87",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552102696271,
        "parent_id": "006fb48b-2c97-4ad2-8099-3de2fbde7fb3",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#!/usr/bin/ruby\n\nclass Bakery\n  attr_accessor :selected_packs\n\n  def initialize\n    @packs = [5,3] # pack sizes 5 and 3\n    @selected_packs = []\n  end\n\n  def allocate(qty)\n    remaining_qty = nil\n\n    # ==============================================\n    # packs are allocated in large packs first order\n    # to minimize the packaging space\n    # ==============================================\n    @packs.each do |pack|\n      remaining_qty = qty - pack\n\n      if remaining_qty \u003e 0\n        ret_val = allocate(remaining_qty)\n        if ret_val == 0\n          @selected_packs \u003c\u003c pack\n          remaining_qty = 0\n          break\n        end\n      elsif remaining_qty == 0\n        @selected_packs \u003c\u003c pack\n        break\n      end\n    end\n\n    remaining_qty\n  end\nend\n\nbakery = Bakery.new\nbakery.allocate(16)\nputs \"Pack combination is: #{bakery.selected_packs.inspect}\""
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#!/usr/bin/ruby\n\nclass Bakery\n  attr_accessor :selected_packs\n\n  def initialize\n    @packs = [5,3] # pack sizes 5 and 3\n    @selected_packs = []\n  end\n\n  def allocate(qty)\n    remaining_qty = nil\n\n    # ==============================================\n    # packs are allocated in large packs first order\n    # to minimize the packaging space\n    # ==============================================\n    @packs.each do |pack|\n      remaining_qty = qty - pack\n\n      if remaining_qty \u003e 0\n        ret_val = allocate(remaining_qty)\n        if ret_val == 0\n          @selected_packs \u003c\u003c pack\n          remaining_qty = 0\n          break\n        end\n      elsif remaining_qty == 0\n        @selected_packs \u003c\u003c pack\n        break\n      end\n    end\n\n    remaining_qty\n  end\nend\n\nbakery = Bakery.new\nbakery.allocate(16)\nputs \"Pack combination is: #{bakery.selected_packs.inspect}\"",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552102696271,
        "id": "b3b1c63c-a0d6-4176-89c4-f3af36cc2593",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552102696271,
        "parent_id": "006fb48b-2c97-4ad2-8099-3de2fbde7fb3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Output is:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Output is:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552102696271,
        "id": "4036a34e-33e2-4ba2-a5e1-1d2e449642f4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552102696271,
        "parent_id": "006fb48b-2c97-4ad2-8099-3de2fbde7fb3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Pack combination is: [3, 3, 5, 5]"
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "Pack combination is: [3, 3, 5, 5]"
          }
        ]
      }
    ],
    "title": "Recursive function",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}