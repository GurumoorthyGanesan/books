{
  "ID": "571232ad-523e-498c-9155-04cb8efc4859",
  "Root": {
    "alive": true,
    "content": [
      "316a7320-9980-4d1b-967f-44d75910f704",
      "b67afe26-735c-411a-88cc-2f197864a8f0",
      "ef1be444-66fa-42f7-aaf7-8eaa6f2ef626",
      "7baabb16-4df6-43fb-9550-52b6f7303299",
      "28804473-5ebc-4499-b16b-edfe5deb1758",
      "bb6aede0-9945-4c3c-b9b4-8c2eadadc57e"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552101196990,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "571232ad-523e-498c-9155-04cb8efc4859",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552101196990,
    "parent_id": "d02a2bbf-2a24-4c97-802e-aa220f4dbe24",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "New allocate and initialize"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101196986,
        "id": "316a7320-9980-4d1b-967f-44d75910f704",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101196986,
        "parent_id": "571232ad-523e-498c-9155-04cb8efc4859",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In many languages, new instances of a class are created using a special "
            ],
            [
              "new",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " keyword. In Ruby, "
            ],
            [
              "new",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is also used to create instances of a class, but it isn’t a keyword; instead, it’s a static/class method, no different from any other static/class method. The definition is roughly this:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In many languages, new instances of a class are created using a special "
          },
          {
            "Text": "new",
            "AttrFlags": 2
          },
          {
            "Text": " keyword. In Ruby, "
          },
          {
            "Text": "new",
            "AttrFlags": 2
          },
          {
            "Text": " is also used to create instances of a class, but it isn’t a keyword; instead, it’s a static/class method, no different from any other static/class method. The definition is roughly this:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101196989,
        "id": "b67afe26-735c-411a-88cc-2f197864a8f0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101196989,
        "parent_id": "571232ad-523e-498c-9155-04cb8efc4859",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class MyClass\n   def self.new(*args)\n     obj = allocate\n     obj.initialize(*args) # oversimplied; initialize is actually private\n     obj\n   end\nend"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class MyClass\n   def self.new(*args)\n     obj = allocate\n     obj.initialize(*args) # oversimplied; initialize is actually private\n     obj\n   end\nend",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101196989,
        "id": "ef1be444-66fa-42f7-aaf7-8eaa6f2ef626",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101196989,
        "parent_id": "571232ad-523e-498c-9155-04cb8efc4859",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "allocate",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " performs the real ‘magic’ of creating an uninitialized instance of the class"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "allocate",
            "AttrFlags": 2
          },
          {
            "Text": " performs the real ‘magic’ of creating an uninitialized instance of the class"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101196989,
        "id": "7baabb16-4df6-43fb-9550-52b6f7303299",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101196989,
        "parent_id": "571232ad-523e-498c-9155-04cb8efc4859",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note also that the return value of "
            ],
            [
              "initialize",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is discarded, and obj is returned instead. This makes it immediately clear why you can code your initialize method without worrying about returning "
            ],
            [
              "self",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " at the end."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note also that the return value of "
          },
          {
            "Text": "initialize",
            "AttrFlags": 2
          },
          {
            "Text": " is discarded, and obj is returned instead. This makes it immediately clear why you can code your initialize method without worrying about returning "
          },
          {
            "Text": "self",
            "AttrFlags": 2
          },
          {
            "Text": " at the end."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101196990,
        "id": "28804473-5ebc-4499-b16b-edfe5deb1758",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101196990,
        "parent_id": "571232ad-523e-498c-9155-04cb8efc4859",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The ‘normal’ "
            ],
            [
              "new",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method that all classes get from "
            ],
            [
              "Class",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " works as above, but it’s possible to redefine it however you like, or to define alternatives that work differently. For example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The ‘normal’ "
          },
          {
            "Text": "new",
            "AttrFlags": 2
          },
          {
            "Text": " method that all classes get from "
          },
          {
            "Text": "Class",
            "AttrFlags": 2
          },
          {
            "Text": " works as above, but it’s possible to redefine it however you like, or to define alternatives that work differently. For example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101196990,
        "id": "bb6aede0-9945-4c3c-b9b4-8c2eadadc57e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101196990,
        "parent_id": "571232ad-523e-498c-9155-04cb8efc4859",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class MyClass\n  def self.extraNew(*args)\n    obj = allocate\n    obj.pre_initialize(:foo)\n    obj.initialize(*args)\n    obj.post_initialize(:bar)\n    obj\n  end\nend"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class MyClass\n  def self.extraNew(*args)\n    obj = allocate\n    obj.pre_initialize(:foo)\n    obj.initialize(*args)\n    obj.post_initialize(:bar)\n    obj\n  end\nend",
        "code_language": "Plain Text"
      }
    ],
    "title": "New allocate and initialize",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}