{
  "ID": "8c723085-c644-4711-a4e8-1dc043ada0a5",
  "Root": {
    "alive": true,
    "content": [
      "5d77c513-09e4-414a-8ee0-d31ad60f0743",
      "3764d2fb-9a70-4b49-8f2a-b377ca550eb3",
      "7fe120a5-975f-45d3-b7c9-15476857b34f",
      "6976e4d2-9de1-4138-9733-67e8050f2532",
      "c01053d3-cf57-43f8-8b6e-a8d342f1a882",
      "2e92028b-d607-4095-af6b-e1e2416aaf73",
      "0c01a0e3-9ba2-4820-88f8-afe48bf9aba1",
      "c6839112-18c9-4398-b1a8-c997fbf1a792",
      "dfc26485-112a-4e62-a323-7f0ccf919ccc",
      "2e5510b0-9a23-4d07-b5b7-d61d359e742f",
      "a5b09a8c-78be-4f44-a25d-883f18bfe94e",
      "5f60e027-71f0-478b-9d7d-dccda4c42031",
      "ac6b9ab1-5df1-453e-9b22-bb9e7f27498f"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552102281941,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "8c723085-c644-4711-a4e8-1dc043ada0a5",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552102281941,
    "parent_id": "ef09b0ce-fe8b-4767-8f8b-16cf766bcf5b",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Testing Serializer object and introducing it to Controller"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552102281926,
        "id": "5d77c513-09e4-414a-8ee0-d31ad60f0743",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552102281926,
        "parent_id": "8c723085-c644-4711-a4e8-1dc043ada0a5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Let say you want to build your API to comply "
            ],
            [
              "jsonapi.org specification",
              [
                [
                  "a",
                  "http://jsonapi.org/"
                ]
              ]
            ],
            [
              " and the result should look like:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Let say you want to build your API to comply "
          },
          {
            "Text": "jsonapi.org specification",
            "Link": "http://jsonapi.org/"
          },
          {
            "Text": " and the result should look like:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552102281927,
        "id": "3764d2fb-9a70-4b49-8f2a-b377ca550eb3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552102281927,
        "parent_id": "8c723085-c644-4711-a4e8-1dc043ada0a5",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "{\"article\": {\"id\": \"305\",\"type\": \"articles\",\"attributes\": {\"title\": \"Asking Alexandria\"}}}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "{\"article\": {\"id\": \"305\",\"type\": \"articles\",\"attributes\": {\"title\": \"Asking Alexandria\"}}}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552102281927,
        "id": "7fe120a5-975f-45d3-b7c9-15476857b34f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552102281927,
        "parent_id": "8c723085-c644-4711-a4e8-1dc043ada0a5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Test for Serializer object may look like this:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Test for Serializer object may look like this:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552102281928,
        "id": "6976e4d2-9de1-4138-9733-67e8050f2532",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552102281928,
        "parent_id": "8c723085-c644-4711-a4e8-1dc043ada0a5",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "# spec/serializers/article_serializer_spec.rbrequire 'rails_helper'RSpec.describe ArticleSerializer dosubject { described_class.new(article) }let(:article) { instance_double(Article, id: 678, title: \"Bring Me The Horizon\") }describe \"#as_json\" dolet(:result) { subject.as_json }it 'root should be article Hash' doexpect(result).to match({article: be_kind_of(Hash)})endcontext 'article hash' dolet(:article_hash) { result.fetch(:article) }it 'should contain type and id' doexpect(article_hash).to match({id: article.id.to_s,type: 'articles',attributes: be_kind_of(Hash)})endcontext 'attributes' dolet(:article_hash_attributes) { article_hash.fetch(:attributes) }it doexpect(article_hash_attributes).to match({title: /[Hh]orizon/,})endendendendend"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "# spec/serializers/article_serializer_spec.rbrequire 'rails_helper'RSpec.describe ArticleSerializer dosubject { described_class.new(article) }let(:article) { instance_double(Article, id: 678, title: \"Bring Me The Horizon\") }describe \"#as_json\" dolet(:result) { subject.as_json }it 'root should be article Hash' doexpect(result).to match({article: be_kind_of(Hash)})endcontext 'article hash' dolet(:article_hash) { result.fetch(:article) }it 'should contain type and id' doexpect(article_hash).to match({id: article.id.to_s,type: 'articles',attributes: be_kind_of(Hash)})endcontext 'attributes' dolet(:article_hash_attributes) { article_hash.fetch(:attributes) }it doexpect(article_hash_attributes).to match({title: /[Hh]orizon/,})endendendendend",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552102281928,
        "id": "c01053d3-cf57-43f8-8b6e-a8d342f1a882",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552102281928,
        "parent_id": "8c723085-c644-4711-a4e8-1dc043ada0a5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Serializer object may look like this:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Serializer object may look like this:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552102281928,
        "id": "2e92028b-d607-4095-af6b-e1e2416aaf73",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552102281928,
        "parent_id": "8c723085-c644-4711-a4e8-1dc043ada0a5",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "# app/serializers/article_serializer.rbclass ArticleSerializerattr_reader :articledef initialize(article)@article = articleenddef as_json{article: {id: article.id.to_s,type: 'articles',attributes: {title: article.title}}}endend"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "# app/serializers/article_serializer.rbclass ArticleSerializerattr_reader :articledef initialize(article)@article = articleenddef as_json{article: {id: article.id.to_s,type: 'articles',attributes: {title: article.title}}}endend",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552102281929,
        "id": "0c01a0e3-9ba2-4820-88f8-afe48bf9aba1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552102281929,
        "parent_id": "8c723085-c644-4711-a4e8-1dc043ada0a5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When we run our “serializers” specs everything passes."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When we run our “serializers” specs everything passes."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552102281929,
        "id": "c6839112-18c9-4398-b1a8-c997fbf1a792",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552102281929,
        "parent_id": "8c723085-c644-4711-a4e8-1dc043ada0a5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "That’s pretty boring. Let’s introduce a typo to our Article Serializer: Instead of "
            ],
            [
              "type: \"articles\"",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " let’s return "
            ],
            [
              "type: \"events\"",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and rerun our tests."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "That’s pretty boring. Let’s introduce a typo to our Article Serializer: Instead of "
          },
          {
            "Text": "type: \"articles\"",
            "AttrFlags": 2
          },
          {
            "Text": " let’s return "
          },
          {
            "Text": "type: \"events\"",
            "AttrFlags": 2
          },
          {
            "Text": " and rerun our tests."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552102281940,
        "id": "dfc26485-112a-4e62-a323-7f0ccf919ccc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552102281940,
        "parent_id": "8c723085-c644-4711-a4e8-1dc043ada0a5",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "rspec spec/serializers/article_serializer_spec.rb.F.Failures:1) ArticleSerializer#as_json article hash should contain type and idFailure/Error:expect(article_hash).to match({id: article.id.to_s,type: 'articles',attributes: be_kind_of(Hash)})expected {:id=\u003e\"678\", :type=\u003e\"event\",:attributes=\u003e{:title=\u003e\"Bring Me The Horizon\"}} to match {:id=\u003e\"678\",:type=\u003e\"articles\", :attributes=\u003e(be a kind of Hash)}Diff:@@ -1,4 +1,4 @@-:attributes =\u003e (be a kind of Hash),+:attributes =\u003e {:title=\u003e\"Bring Me The Horizon\"},:id =\u003e \"678\",-:type =\u003e \"articles\",+:type =\u003e \"events\",# ./spec/serializers/article_serializer_spec.rb:20:in `block (4levels) in \u003ctop (required)\u003e'"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "rspec spec/serializers/article_serializer_spec.rb.F.Failures:1) ArticleSerializer#as_json article hash should contain type and idFailure/Error:expect(article_hash).to match({id: article.id.to_s,type: 'articles',attributes: be_kind_of(Hash)})expected {:id=\u003e\"678\", :type=\u003e\"event\",:attributes=\u003e{:title=\u003e\"Bring Me The Horizon\"}} to match {:id=\u003e\"678\",:type=\u003e\"articles\", :attributes=\u003e(be a kind of Hash)}Diff:@@ -1,4 +1,4 @@-:attributes =\u003e (be a kind of Hash),+:attributes =\u003e {:title=\u003e\"Bring Me The Horizon\"},:id =\u003e \"678\",-:type =\u003e \"articles\",+:type =\u003e \"events\",# ./spec/serializers/article_serializer_spec.rb:20:in `block (4levels) in \u003ctop (required)\u003e'",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552102281940,
        "id": "2e5510b0-9a23-4d07-b5b7-d61d359e742f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552102281940,
        "parent_id": "8c723085-c644-4711-a4e8-1dc043ada0a5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Once you’ve run the test it’s pretty easy to spot the error."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Once you’ve run the test it’s pretty easy to spot the error."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552102281940,
        "id": "a5b09a8c-78be-4f44-a25d-883f18bfe94e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552102281940,
        "parent_id": "8c723085-c644-4711-a4e8-1dc043ada0a5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Once you fix the error (correct the type to be "
            ],
            [
              "article",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") you can introduce it to Controller like this:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Once you fix the error (correct the type to be "
          },
          {
            "Text": "article",
            "AttrFlags": 2
          },
          {
            "Text": ") you can introduce it to Controller like this:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552102281941,
        "id": "5f60e027-71f0-478b-9d7d-dccda4c42031",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552102281941,
        "parent_id": "8c723085-c644-4711-a4e8-1dc043ada0a5",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "# app/controllers/v2/articles_controller.rbmodule V2class ArticlesController \u003c ApplicationControllerdef showrender json: serializer.as_jsonendprivatedef article@article ||= Article.find(params[:id])enddef serializer@serializer ||= ArticleSerializer.new(article)endendend"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "# app/controllers/v2/articles_controller.rbmodule V2class ArticlesController \u003c ApplicationControllerdef showrender json: serializer.as_jsonendprivatedef article@article ||= Article.find(params[:id])enddef serializer@serializer ||= ArticleSerializer.new(article)endendend",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552102281941,
        "id": "ac6b9ab1-5df1-453e-9b22-bb9e7f27498f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552102281941,
        "parent_id": "8c723085-c644-4711-a4e8-1dc043ada0a5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This example is based on article: http://www.eq8.eu/blogs/30-pure-rspec-json-api-testing"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This example is based on article: http://www.eq8.eu/blogs/30-pure-rspec-json-api-testing"
          }
        ]
      }
    ],
    "title": "Testing Serializer object and introducing it to Controller",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}