{
  "ID": "0a5a2678-1734-4149-a039-8896dfe12757",
  "Root": {
    "alive": true,
    "content": [
      "b0a6e341-88d7-4070-a719-1137da8f8164",
      "d18425f5-fd64-42e0-beeb-0af77eefb0c2",
      "03ddfa7a-319e-4e31-8ff1-caf88242119d",
      "8d6e7dce-4d43-4af1-8240-d5c481dcc4ed",
      "8a8cbdd4-729e-43db-9efa-df485fdbd607",
      "8859e8b8-114d-4695-8385-d7faf7e08d92",
      "a0edd282-33f6-4d62-b64e-46f30bc1c12a",
      "2cf20cbb-a047-4ee2-81c0-ca31533f6a68",
      "2d351e11-50c8-42af-a877-6738407011dd",
      "2f9eafc3-c13f-44f6-bd79-35febe017009",
      "142faae1-e57a-4a6b-9a98-22d2c3b86237",
      "da6cede4-306e-4243-a42a-556dc670200e",
      "4b4f1735-8431-4cbc-899e-35d2260190f3"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552101673103,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "0a5a2678-1734-4149-a039-8896dfe12757",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552101673103,
    "parent_id": "e9481ae9-ca5e-4b9f-b722-d570649c2cfe",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Operators"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101673098,
        "id": "b0a6e341-88d7-4070-a719-1137da8f8164",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101673098,
        "parent_id": "0a5a2678-1734-4149-a039-8896dfe12757",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Remarks"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Remarks"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101673101,
        "id": "d18425f5-fd64-42e0-beeb-0af77eefb0c2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101673101,
        "parent_id": "0a5a2678-1734-4149-a039-8896dfe12757",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Operators are methods"
            ]
          ]
        },
        "type": "sub_sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Operators are methods"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101673101,
        "id": "03ddfa7a-319e-4e31-8ff1-caf88242119d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101673101,
        "parent_id": "0a5a2678-1734-4149-a039-8896dfe12757",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Most operators are actually just methods, so "
            ],
            [
              "x + y",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is calling the "
            ],
            [
              "\\+",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method of "
            ],
            [
              "x",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " with argument "
            ],
            [
              "y",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", which would be written "
            ],
            [
              "x.+(y)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". If you write a method of your own having semantic meaning of a given operator, you can implement your variant in the class."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Most operators are actually just methods, so "
          },
          {
            "Text": "x + y",
            "AttrFlags": 2
          },
          {
            "Text": " is calling the "
          },
          {
            "Text": "\\+",
            "AttrFlags": 2
          },
          {
            "Text": " method of "
          },
          {
            "Text": "x",
            "AttrFlags": 2
          },
          {
            "Text": " with argument "
          },
          {
            "Text": "y",
            "AttrFlags": 2
          },
          {
            "Text": ", which would be written "
          },
          {
            "Text": "x.+(y)",
            "AttrFlags": 2
          },
          {
            "Text": ". If you write a method of your own having semantic meaning of a given operator, you can implement your variant in the class."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101673101,
        "id": "8d6e7dce-4d43-4af1-8240-d5c481dcc4ed",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101673101,
        "parent_id": "0a5a2678-1734-4149-a039-8896dfe12757",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As a silly example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "As a silly example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101673102,
        "id": "8a8cbdd4-729e-43db-9efa-df485fdbd607",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101673102,
        "parent_id": "0a5a2678-1734-4149-a039-8896dfe12757",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "# A class that lets you operate on numbers by name.\nclass NamedInteger\n  name_to_value = { 'one' =\u003e 1, 'two' =\u003e 2, ... }\n\n  # define the plus method\n  def + (left_addend, right_addend)\n    name_to_value(left_addend) + name_to_value(right_addend)\n  end\n\n  ...\nend"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "# A class that lets you operate on numbers by name.\nclass NamedInteger\n  name_to_value = { 'one' =\u003e 1, 'two' =\u003e 2, ... }\n\n  # define the plus method\n  def + (left_addend, right_addend)\n    name_to_value(left_addend) + name_to_value(right_addend)\n  end\n\n  ...\nend",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101673102,
        "id": "8859e8b8-114d-4695-8385-d7faf7e08d92",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101673102,
        "parent_id": "0a5a2678-1734-4149-a039-8896dfe12757",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When to use "
            ],
            [
              "\u0026\u0026",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " vs. "
            ],
            [
              "and",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "||",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " vs. "
            ],
            [
              "or",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "sub_sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "When to use "
          },
          {
            "Text": "\u0026\u0026",
            "AttrFlags": 2
          },
          {
            "Text": " vs. "
          },
          {
            "Text": "and",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "||",
            "AttrFlags": 2
          },
          {
            "Text": " vs. "
          },
          {
            "Text": "or",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101673102,
        "id": "a0edd282-33f6-4d62-b64e-46f30bc1c12a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101673102,
        "parent_id": "0a5a2678-1734-4149-a039-8896dfe12757",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note that there are two ways to express booleans, either "
            ],
            [
              "\u0026\u0026",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "and",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", and "
            ],
            [
              "||",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "or",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " – they are often interchangeable, but not always. We’ll refer to these as “character” and “word” variants."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note that there are two ways to express booleans, either "
          },
          {
            "Text": "\u0026\u0026",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "and",
            "AttrFlags": 2
          },
          {
            "Text": ", and "
          },
          {
            "Text": "||",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "or",
            "AttrFlags": 2
          },
          {
            "Text": " – they are often interchangeable, but not always. We’ll refer to these as “character” and “word” variants."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101673102,
        "id": "2cf20cbb-a047-4ee2-81c0-ca31533f6a68",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101673102,
        "parent_id": "0a5a2678-1734-4149-a039-8896dfe12757",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The character variants have higher "
            ],
            [
              "precedence",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " so reduce the need for parentheses in more complex statements helps avoid unexpected errors."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The character variants have higher "
          },
          {
            "Text": "precedence",
            "AttrFlags": 4
          },
          {
            "Text": " so reduce the need for parentheses in more complex statements helps avoid unexpected errors."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101673103,
        "id": "2d351e11-50c8-42af-a877-6738407011dd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101673103,
        "parent_id": "0a5a2678-1734-4149-a039-8896dfe12757",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The word variants were originally intended as "
            ],
            [
              "control flow operators",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " rather than boolean operators. That is, they were designed to be used in chained method statements:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The word variants were originally intended as "
          },
          {
            "Text": "control flow operators",
            "AttrFlags": 4
          },
          {
            "Text": " rather than boolean operators. That is, they were designed to be used in chained method statements:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101673103,
        "id": "2f9eafc3-c13f-44f6-bd79-35febe017009",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101673103,
        "parent_id": "0a5a2678-1734-4149-a039-8896dfe12757",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "raise 'an error' and return"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "raise 'an error' and return",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101673103,
        "id": "142faae1-e57a-4a6b-9a98-22d2c3b86237",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101673103,
        "parent_id": "0a5a2678-1734-4149-a039-8896dfe12757",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "While they "
            ],
            [
              "can",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " be used as boolean operators, their lower precedence makes them unpredictable."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "While they "
          },
          {
            "Text": "can",
            "AttrFlags": 4
          },
          {
            "Text": " be used as boolean operators, their lower precedence makes them unpredictable."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101673103,
        "id": "da6cede4-306e-4243-a42a-556dc670200e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101673103,
        "parent_id": "0a5a2678-1734-4149-a039-8896dfe12757",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Secondly, many rubyists prefer the character variant when creating a boolean expression (one that evaluates to "
            ],
            [
              "true",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "false",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") such as "
            ],
            [
              "x.nil? || x.empty?",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". On the other hand, the word variants are preferred in cases where a "
            ],
            [
              "series of methods",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " are being evaluated, and one may fail. For example a common idiom using the word variant for methods that return "
            ],
            [
              "nil",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " on failure might look like:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Secondly, many rubyists prefer the character variant when creating a boolean expression (one that evaluates to "
          },
          {
            "Text": "true",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "false",
            "AttrFlags": 2
          },
          {
            "Text": ") such as "
          },
          {
            "Text": "x.nil? || x.empty?",
            "AttrFlags": 2
          },
          {
            "Text": ". On the other hand, the word variants are preferred in cases where a "
          },
          {
            "Text": "series of methods",
            "AttrFlags": 4
          },
          {
            "Text": " are being evaluated, and one may fail. For example a common idiom using the word variant for methods that return "
          },
          {
            "Text": "nil",
            "AttrFlags": 2
          },
          {
            "Text": " on failure might look like:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101673103,
        "id": "4b4f1735-8431-4cbc-899e-35d2260190f3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101673103,
        "parent_id": "0a5a2678-1734-4149-a039-8896dfe12757",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "def deliver_email\n  # If the first fails, try the backup, and if that works, all good\n  deliver_by_primary or deliver_by_backup and return\n  # error handling code\nend"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "def deliver_email\n  # If the first fails, try the backup, and if that works, all good\n  deliver_by_primary or deliver_by_backup and return\n  # error handling code\nend",
        "code_language": "Plain Text"
      }
    ],
    "title": "Operators",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}