{
  "ID": "7be0a50e-1ced-4211-8acf-2b70215f6356",
  "Root": {
    "alive": true,
    "content": [
      "dab61de4-567a-4ea3-80f9-3200627e06fc",
      "a53c0111-33d5-479b-a510-3e070f00884b",
      "39f6aa17-d75a-415b-8410-b361b0117fe5",
      "bc9600e0-40bc-494c-ae1e-390f385db01c",
      "40aac2d5-bdff-41ee-8854-80d431110fae",
      "f341c70e-6fc6-4f24-b754-46c5c5935511",
      "f67bec9c-bec8-4fb7-ad1f-af2428582948",
      "e6f777aa-ff8f-46a9-91d3-2755c8da6026",
      "5a953812-ee33-418b-bcc1-df3536e286be",
      "d432ee5c-a56a-491d-b5b8-4d4d873ee8e2",
      "69f17f8f-3ab6-4c27-9f9a-a58e91771d5b"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552102170868,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "7be0a50e-1ced-4211-8acf-2b70215f6356",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552102170868,
    "parent_id": "56ead039-5a17-41ac-aabb-8b32453caa32",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Message Passing Through Inheritance Chain"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552102170862,
        "id": "dab61de4-567a-4ea3-80f9-3200627e06fc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552102170862,
        "parent_id": "7be0a50e-1ced-4211-8acf-2b70215f6356",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class Example\n  def example_method\n    :example\n  end\n\n  def subexample_method\n    :example\n  end\n\n  def not_missed_method\n    :example\n  end\n\n  def method_missing name\n    return :example if name == :missing_example_method\n    return :example if name == :missing_subexample_method\n    return :subexample if name == :not_missed_method\n    super\n  end\nend\n\nclass SubExample \u003c Example\n  def subexample_method\n    :subexample\n  end\n\n  def method_missing name\n    return :subexample if name == :missing_subexample_method\n    return :subexample if name == :not_missed_method\n    super\n  end\nend\n\ns = Subexample.new"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class Example\n  def example_method\n    :example\n  end\n\n  def subexample_method\n    :example\n  end\n\n  def not_missed_method\n    :example\n  end\n\n  def method_missing name\n    return :example if name == :missing_example_method\n    return :example if name == :missing_subexample_method\n    return :subexample if name == :not_missed_method\n    super\n  end\nend\n\nclass SubExample \u003c Example\n  def subexample_method\n    :subexample\n  end\n\n  def method_missing name\n    return :subexample if name == :missing_subexample_method\n    return :subexample if name == :not_missed_method\n    super\n  end\nend\n\ns = Subexample.new",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552102170865,
        "id": "a53c0111-33d5-479b-a510-3e070f00884b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552102170865,
        "parent_id": "7be0a50e-1ced-4211-8acf-2b70215f6356",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To find a suitable method for "
            ],
            [
              "SubExample#subexample_method",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " Ruby first looks at ancestors chain of "
            ],
            [
              "SubExample",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To find a suitable method for "
          },
          {
            "Text": "SubExample#subexample_method",
            "AttrFlags": 2
          },
          {
            "Text": " Ruby first looks at ancestors chain of "
          },
          {
            "Text": "SubExample",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552102170866,
        "id": "39f6aa17-d75a-415b-8410-b361b0117fe5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552102170866,
        "parent_id": "7be0a50e-1ced-4211-8acf-2b70215f6356",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "SubExample.ancestors # =\u003e [SubExample, Example, Object, Kernel, BasicObject]"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "SubExample.ancestors # =\u003e [SubExample, Example, Object, Kernel, BasicObject]",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552102170866,
        "id": "bc9600e0-40bc-494c-ae1e-390f385db01c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552102170866,
        "parent_id": "7be0a50e-1ced-4211-8acf-2b70215f6356",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It starts from "
            ],
            [
              "SubExample",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". If we send "
            ],
            [
              "subexample_method",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " message Ruby chooses the one available one SubExample and ignores "
            ],
            [
              "Example#subexample_method",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It starts from "
          },
          {
            "Text": "SubExample",
            "AttrFlags": 2
          },
          {
            "Text": ". If we send "
          },
          {
            "Text": "subexample_method",
            "AttrFlags": 2
          },
          {
            "Text": " message Ruby chooses the one available one SubExample and ignores "
          },
          {
            "Text": "Example#subexample_method",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552102170866,
        "id": "40aac2d5-bdff-41ee-8854-80d431110fae",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552102170866,
        "parent_id": "7be0a50e-1ced-4211-8acf-2b70215f6356",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "s.subexample_method # =\u003e :subexample"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "s.subexample_method # =\u003e :subexample",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552102170866,
        "id": "f341c70e-6fc6-4f24-b754-46c5c5935511",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552102170866,
        "parent_id": "7be0a50e-1ced-4211-8acf-2b70215f6356",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "After "
            ],
            [
              "SubExample",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " it checks "
            ],
            [
              "Example",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". If we send "
            ],
            [
              "example_method",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " Ruby checks if "
            ],
            [
              "SubExample",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can reply to it or not and since it canâ€™t Ruby goes up the chain and looks into "
            ],
            [
              "Example",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "After "
          },
          {
            "Text": "SubExample",
            "AttrFlags": 2
          },
          {
            "Text": " it checks "
          },
          {
            "Text": "Example",
            "AttrFlags": 2
          },
          {
            "Text": ". If we send "
          },
          {
            "Text": "example_method",
            "AttrFlags": 2
          },
          {
            "Text": " Ruby checks if "
          },
          {
            "Text": "SubExample",
            "AttrFlags": 2
          },
          {
            "Text": " can reply to it or not and since it canâ€™t Ruby goes up the chain and looks into "
          },
          {
            "Text": "Example",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552102170867,
        "id": "f67bec9c-bec8-4fb7-ad1f-af2428582948",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552102170867,
        "parent_id": "7be0a50e-1ced-4211-8acf-2b70215f6356",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "s.example_method # =\u003e :example"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "s.example_method # =\u003e :example",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552102170867,
        "id": "e6f777aa-ff8f-46a9-91d3-2755c8da6026",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552102170867,
        "parent_id": "7be0a50e-1ced-4211-8acf-2b70215f6356",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "After Ruby checks all defined methods then it runs "
            ],
            [
              "method_missing",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to see if it can reply or not. If we send "
            ],
            [
              "missing_subexample_method",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " Ruby wonâ€™t be able to find a defined method on "
            ],
            [
              "SubExample",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " so it moves up to "
            ],
            [
              "Example",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". It canâ€™t find a defined method on "
            ],
            [
              "Example",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or any other class higher in chain either. Ruby starts over and runs "
            ],
            [
              "method_missing",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". "
            ],
            [
              "method_missing",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " of "
            ],
            [
              "SubExample",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can reply to "
            ],
            [
              "missing_subexample_method",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "After Ruby checks all defined methods then it runs "
          },
          {
            "Text": "method_missing",
            "AttrFlags": 2
          },
          {
            "Text": " to see if it can reply or not. If we send "
          },
          {
            "Text": "missing_subexample_method",
            "AttrFlags": 2
          },
          {
            "Text": " Ruby wonâ€™t be able to find a defined method on "
          },
          {
            "Text": "SubExample",
            "AttrFlags": 2
          },
          {
            "Text": " so it moves up to "
          },
          {
            "Text": "Example",
            "AttrFlags": 2
          },
          {
            "Text": ". It canâ€™t find a defined method on "
          },
          {
            "Text": "Example",
            "AttrFlags": 2
          },
          {
            "Text": " or any other class higher in chain either. Ruby starts over and runs "
          },
          {
            "Text": "method_missing",
            "AttrFlags": 2
          },
          {
            "Text": ". "
          },
          {
            "Text": "method_missing",
            "AttrFlags": 2
          },
          {
            "Text": " of "
          },
          {
            "Text": "SubExample",
            "AttrFlags": 2
          },
          {
            "Text": " can reply to "
          },
          {
            "Text": "missing_subexample_method",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552102170867,
        "id": "5a953812-ee33-418b-bcc1-df3536e286be",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552102170867,
        "parent_id": "7be0a50e-1ced-4211-8acf-2b70215f6356",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "s.missing_subexample_method # =\u003e :subexample"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "s.missing_subexample_method # =\u003e :subexample",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552102170868,
        "id": "d432ee5c-a56a-491d-b5b8-4d4d873ee8e2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552102170868,
        "parent_id": "7be0a50e-1ced-4211-8acf-2b70215f6356",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "However if a method is defined Ruby uses defined version even if it is higher in the chain. For example if we send "
            ],
            [
              "not_missed_method",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " even though "
            ],
            [
              "method_missing",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " of "
            ],
            [
              "SubExample",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can reply to it Ruby walks up on "
            ],
            [
              "SubExample",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " because it doesnâ€™t have a defined method with that name and looks into "
            ],
            [
              "Example",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " which has one."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "However if a method is defined Ruby uses defined version even if it is higher in the chain. For example if we send "
          },
          {
            "Text": "not_missed_method",
            "AttrFlags": 2
          },
          {
            "Text": " even though "
          },
          {
            "Text": "method_missing",
            "AttrFlags": 2
          },
          {
            "Text": " of "
          },
          {
            "Text": "SubExample",
            "AttrFlags": 2
          },
          {
            "Text": " can reply to it Ruby walks up on "
          },
          {
            "Text": "SubExample",
            "AttrFlags": 2
          },
          {
            "Text": " because it doesnâ€™t have a defined method with that name and looks into "
          },
          {
            "Text": "Example",
            "AttrFlags": 2
          },
          {
            "Text": " which has one."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552102170868,
        "id": "69f17f8f-3ab6-4c27-9f9a-a58e91771d5b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552102170868,
        "parent_id": "7be0a50e-1ced-4211-8acf-2b70215f6356",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "s.not_missed_method # =\u003e :example"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "s.not_missed_method # =\u003e :example",
        "code_language": "Plain Text"
      }
    ],
    "title": "Message Passing Through Inheritance Chain",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}