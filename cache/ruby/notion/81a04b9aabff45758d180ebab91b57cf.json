{
  "ID": "81a04b9a-abff-4575-8d18-0ebab91b57cf",
  "Root": {
    "alive": true,
    "content": [
      "4ace516e-66e9-4780-b95a-aafcb9f1f4df",
      "d8ac8202-a185-4650-94df-1982127b8ae6",
      "bec7d929-44de-4303-8fca-6e203229fe3c",
      "da178cbe-f29b-4622-95f7-c7ed23bbadbe"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552101216891,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "81a04b9a-abff-4575-8d18-0ebab91b57cf",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552101216891,
    "parent_id": "526b98b2-3732-4941-ae3c-1e34440107c3",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Overriding hash function"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101216889,
        "id": "4ace516e-66e9-4780-b95a-aafcb9f1f4df",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101216889,
        "parent_id": "81a04b9a-abff-4575-8d18-0ebab91b57cf",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Ruby hashes use the methods "
            ],
            [
              "hash",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "eql?",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to perform the hash operation and assign objects stored in the hash to internal hash bins. The default implementation of "
            ],
            [
              "hash",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in Ruby is the "
            ],
            [
              "murmur hash function",
              [
                [
                  "a",
                  "https://en.wikipedia.org/wiki/MurmurHash"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "over all member fields of the hashed object",
              [
                [
                  "a",
                  "https://github.com/ruby/ruby/blob/1b5acebef2d447a3dbed6cf5e146fda74b81f10d/st.c"
                ]
              ]
            ],
            [
              ". To override this behavior it is possible to override "
            ],
            [
              "hash",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "eql?",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " methods."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Ruby hashes use the methods "
          },
          {
            "Text": "hash",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "eql?",
            "AttrFlags": 2
          },
          {
            "Text": " to perform the hash operation and assign objects stored in the hash to internal hash bins. The default implementation of "
          },
          {
            "Text": "hash",
            "AttrFlags": 2
          },
          {
            "Text": " in Ruby is the "
          },
          {
            "Text": "murmur hash function",
            "Link": "https://en.wikipedia.org/wiki/MurmurHash"
          },
          {
            "Text": " "
          },
          {
            "Text": "over all member fields of the hashed object",
            "Link": "https://github.com/ruby/ruby/blob/1b5acebef2d447a3dbed6cf5e146fda74b81f10d/st.c"
          },
          {
            "Text": ". To override this behavior it is possible to override "
          },
          {
            "Text": "hash",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "eql?",
            "AttrFlags": 2
          },
          {
            "Text": " methods."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101216890,
        "id": "d8ac8202-a185-4650-94df-1982127b8ae6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101216890,
        "parent_id": "81a04b9a-abff-4575-8d18-0ebab91b57cf",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As with other hash implementations, two objects a and b, will be hashed to the same bucket if "
            ],
            [
              "a.hash == b.hash",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and will be deemed identical if "
            ],
            [
              "a.eql?(b)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Thus, when reimplementing "
            ],
            [
              "hash",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "eql?",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " one should take care to ensure that if "
            ],
            [
              "a",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "b",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " are equal under "
            ],
            [
              "eql?",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " they must return the same "
            ],
            [
              "hash",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " value. Otherwise this might result in duplicate entries in a hash. Conversely, a poor choice in "
            ],
            [
              "hash",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " implementation might lead many objects to share the same hash bucket, effectively destroying the O(1) look-up time and causing O(n) for calling "
            ],
            [
              "eql?",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " on all objects."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "As with other hash implementations, two objects a and b, will be hashed to the same bucket if "
          },
          {
            "Text": "a.hash == b.hash",
            "AttrFlags": 2
          },
          {
            "Text": " and will be deemed identical if "
          },
          {
            "Text": "a.eql?(b)",
            "AttrFlags": 2
          },
          {
            "Text": ". Thus, when reimplementing "
          },
          {
            "Text": "hash",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "eql?",
            "AttrFlags": 2
          },
          {
            "Text": " one should take care to ensure that if "
          },
          {
            "Text": "a",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "b",
            "AttrFlags": 2
          },
          {
            "Text": " are equal under "
          },
          {
            "Text": "eql?",
            "AttrFlags": 2
          },
          {
            "Text": " they must return the same "
          },
          {
            "Text": "hash",
            "AttrFlags": 2
          },
          {
            "Text": " value. Otherwise this might result in duplicate entries in a hash. Conversely, a poor choice in "
          },
          {
            "Text": "hash",
            "AttrFlags": 2
          },
          {
            "Text": " implementation might lead many objects to share the same hash bucket, effectively destroying the O(1) look-up time and causing O(n) for calling "
          },
          {
            "Text": "eql?",
            "AttrFlags": 2
          },
          {
            "Text": " on all objects."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101216890,
        "id": "bec7d929-44de-4303-8fca-6e203229fe3c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101216890,
        "parent_id": "81a04b9a-abff-4575-8d18-0ebab91b57cf",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In the example below only the instance of class "
            ],
            [
              "A",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is stored as a key, as it was added first:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In the example below only the instance of class "
          },
          {
            "Text": "A",
            "AttrFlags": 2
          },
          {
            "Text": " is stored as a key, as it was added first:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101216890,
        "id": "da178cbe-f29b-4622-95f7-c7ed23bbadbe",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101216890,
        "parent_id": "81a04b9a-abff-4575-8d18-0ebab91b57cf",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class A\n  def initialize(hash_value)\n    @hash_value = hash_value\n  end\n  def hash\n    @hash_value # Return the value given externally\n  end\n  def eql?(b)\n    self.hash == b.hash\n  end\nend\n\nclass B \u003c A\nend\n\na = A.new(1)\nb = B.new(1)\n\nh = {}\nh[a] = 1\nh[b] = 2\n\nraise \"error\" unless h.size == 1\nraise \"error\" unless h.include? b\nraise \"error\" unless h.include? a"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class A\n  def initialize(hash_value)\n    @hash_value = hash_value\n  end\n  def hash\n    @hash_value # Return the value given externally\n  end\n  def eql?(b)\n    self.hash == b.hash\n  end\nend\n\nclass B \u003c A\nend\n\na = A.new(1)\nb = B.new(1)\n\nh = {}\nh[a] = 1\nh[b] = 2\n\nraise \"error\" unless h.size == 1\nraise \"error\" unless h.include? b\nraise \"error\" unless h.include? a",
        "code_language": "Plain Text"
      }
    ],
    "title": "Overriding hash function",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}