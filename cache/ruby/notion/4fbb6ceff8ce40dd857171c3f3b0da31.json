{
  "ID": "4fbb6cef-f8ce-40dd-8571-71c3f3b0da31",
  "Root": {
    "alive": true,
    "content": [
      "aba982bd-4af0-4aa8-9e9b-e569f7590750",
      "20e9d532-42ea-41a0-98fc-0bb3f85c9790",
      "68fe28be-3b29-4f9e-b7e6-972e2835c0a9",
      "37571179-0807-4344-a612-13b9ae76abf4",
      "ec1ae4c1-8235-4b4a-8d60-86ac3c425055",
      "6fb51cf6-99bb-420d-b589-0b4c10541644",
      "706bb109-1ff7-46bd-ab94-6af526f29ba1",
      "a9548195-8e4c-4464-8a64-02a84aedcc94"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552102134282,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "4fbb6cef-f8ce-40dd-8571-71c3f3b0da31",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552102134282,
    "parent_id": "35eddfe7-54d2-4a0e-a602-87477eb8d3bc",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Working with C Structs"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552102134278,
        "id": "aba982bd-4af0-4aa8-9e9b-e569f7590750",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552102134278,
        "parent_id": "4fbb6cef-f8ce-40dd-8571-71c3f3b0da31",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In order to be able to work with C structs as Ruby objects, you need to wrap them with calls to "
            ],
            [
              "Data_Wrap_Struct",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "Data_Get_Struct",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In order to be able to work with C structs as Ruby objects, you need to wrap them with calls to "
          },
          {
            "Text": "Data_Wrap_Struct",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "Data_Get_Struct",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552102134281,
        "id": "20e9d532-42ea-41a0-98fc-0bb3f85c9790",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552102134281,
        "parent_id": "4fbb6cef-f8ce-40dd-8571-71c3f3b0da31",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Data_Wrap_Struct",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " wraps a C data structure in a Ruby object. It takes a pointer to your data structure, along with a few pointers to callback functions, and returns a VALUE. The "
            ],
            [
              "Data_Get_Struct",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " macro takes that VALUE and gives you back a pointer to your C data structure."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Data_Wrap_Struct",
            "AttrFlags": 2
          },
          {
            "Text": " wraps a C data structure in a Ruby object. It takes a pointer to your data structure, along with a few pointers to callback functions, and returns a VALUE. The "
          },
          {
            "Text": "Data_Get_Struct",
            "AttrFlags": 2
          },
          {
            "Text": " macro takes that VALUE and gives you back a pointer to your C data structure."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552102134281,
        "id": "68fe28be-3b29-4f9e-b7e6-972e2835c0a9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552102134281,
        "parent_id": "4fbb6cef-f8ce-40dd-8571-71c3f3b0da31",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Here’s a simple example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Here’s a simple example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552102134281,
        "id": "37571179-0807-4344-a612-13b9ae76abf4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552102134281,
        "parent_id": "4fbb6cef-f8ce-40dd-8571-71c3f3b0da31",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cstdio.h\u003e\n#include \u003cruby.h\u003e\n\ntypedef struct example_struct {\n  char *name;\n} example_struct;\n\nvoid example_struct_free(example_struct * self) {\n  if (self-\u003ename != NULL) {\n    free(self-\u003ename);\n  }\n  ruby_xfree(self);\n}\n\nstatic VALUE rb_example_struct_alloc(VALUE klass) {\n  return Data_Wrap_Struct(klass, NULL, example_struct_free, ruby_xmalloc(sizeof(example_struct)));\n}\n\nstatic VALUE rb_example_struct_init(VALUE self, VALUE name) {\n  example_struct* p;\n\n  Check_Type(name, T_STRING);\n\n  Data_Get_Struct(self, example_struct, p);\n  p-\u003ename = (char *)malloc(RSTRING_LEN(name) + 1);\n  memcpy(p-\u003ename, StringValuePtr(name), RSTRING_LEN(name) + 1);\n\n  return self;\n}\n\nstatic VALUE rb_example_struct_name(VALUE self) {\n  example_struct* p;\n  Data_Get_Struct(self, example_struct, p);\n\n  printf(\"%s\\n\", p-\u003ename);\n\n  return Qnil;\n}\n\nvoid Init_example()\n{\n  VALUE mExample = rb_define_module(\"Example\");\n  VALUE cStruct = rb_define_class_under(mExample, \"Struct\", rb_cObject);\n\n  rb_define_alloc_func(cStruct, rb_example_struct_alloc);\n  rb_define_method(cStruct, \"initialize\", rb_example_struct_init, 1);\n  rb_define_method(cStruct, \"name\", rb_example_struct_name, 0);\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cstdio.h\u003e\n#include \u003cruby.h\u003e\n\ntypedef struct example_struct {\n  char *name;\n} example_struct;\n\nvoid example_struct_free(example_struct * self) {\n  if (self-\u003ename != NULL) {\n    free(self-\u003ename);\n  }\n  ruby_xfree(self);\n}\n\nstatic VALUE rb_example_struct_alloc(VALUE klass) {\n  return Data_Wrap_Struct(klass, NULL, example_struct_free, ruby_xmalloc(sizeof(example_struct)));\n}\n\nstatic VALUE rb_example_struct_init(VALUE self, VALUE name) {\n  example_struct* p;\n\n  Check_Type(name, T_STRING);\n\n  Data_Get_Struct(self, example_struct, p);\n  p-\u003ename = (char *)malloc(RSTRING_LEN(name) + 1);\n  memcpy(p-\u003ename, StringValuePtr(name), RSTRING_LEN(name) + 1);\n\n  return self;\n}\n\nstatic VALUE rb_example_struct_name(VALUE self) {\n  example_struct* p;\n  Data_Get_Struct(self, example_struct, p);\n\n  printf(\"%s\\n\", p-\u003ename);\n\n  return Qnil;\n}\n\nvoid Init_example()\n{\n  VALUE mExample = rb_define_module(\"Example\");\n  VALUE cStruct = rb_define_class_under(mExample, \"Struct\", rb_cObject);\n\n  rb_define_alloc_func(cStruct, rb_example_struct_alloc);\n  rb_define_method(cStruct, \"initialize\", rb_example_struct_init, 1);\n  rb_define_method(cStruct, \"name\", rb_example_struct_name, 0);\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552102134281,
        "id": "ec1ae4c1-8235-4b4a-8d60-86ac3c425055",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552102134281,
        "parent_id": "4fbb6cef-f8ce-40dd-8571-71c3f3b0da31",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "And the "
            ],
            [
              "extconf.rb",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "And the "
          },
          {
            "Text": "extconf.rb",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552102134282,
        "id": "6fb51cf6-99bb-420d-b589-0b4c10541644",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552102134282,
        "parent_id": "4fbb6cef-f8ce-40dd-8571-71c3f3b0da31",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "require 'mkmf'\n\ncreate_makefile('example')"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "require 'mkmf'\n\ncreate_makefile('example')",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552102134282,
        "id": "706bb109-1ff7-46bd-ab94-6af526f29ba1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552102134282,
        "parent_id": "4fbb6cef-f8ce-40dd-8571-71c3f3b0da31",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "After compiling the extension:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "After compiling the extension:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552102134282,
        "id": "a9548195-8e4c-4464-8a64-02a84aedcc94",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552102134282,
        "parent_id": "4fbb6cef-f8ce-40dd-8571-71c3f3b0da31",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "irb(main):001:0\u003e require './example'\n=\u003e true\nirb(main):002:0\u003e test_struct = Example::Struct.new(\"Test Struct\")\n=\u003e #\u003cExample::Struct:0x007fc741965068\u003e\nirb(main):003:0\u003e test_struct.name\nTest Struct\n=\u003e nil"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "irb(main):001:0\u003e require './example'\n=\u003e true\nirb(main):002:0\u003e test_struct = Example::Struct.new(\"Test Struct\")\n=\u003e #\u003cExample::Struct:0x007fc741965068\u003e\nirb(main):003:0\u003e test_struct.name\nTest Struct\n=\u003e nil",
        "code_language": "Plain Text"
      }
    ],
    "title": "Working with C Structs",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}