{
  "ID": "c2c32da2-8e7b-4b60-a40c-650f3876e084",
  "Root": {
    "alive": true,
    "content": [
      "79a2d7e5-7dcf-4f53-a119-8897cb4d3410",
      "3b13a266-a6dd-4b12-82e9-2daecae2e1d9",
      "fdc80e0b-8f82-40c8-98c6-15caff5ef106",
      "a4524a44-e75f-4aef-bf0d-b3212ebe7984"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552101327934,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "c2c32da2-8e7b-4b60-a40c-650f3876e084",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552101327934,
    "parent_id": "04e23c6b-c2cd-4606-81d6-13cc2dce5d78",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Groups named and otherwise."
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101327930,
        "id": "79a2d7e5-7dcf-4f53-a119-8897cb4d3410",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101327930,
        "parent_id": "c2c32da2-8e7b-4b60-a40c-650f3876e084",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Ruby extends the standard group syntax "
            ],
            [
              "(...)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " with a named group, "
            ],
            [
              "(?\u003cname\u003e...)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". This allows for extraction by name instead of having to count how many groups you have."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Ruby extends the standard group syntax "
          },
          {
            "Text": "(...)",
            "AttrFlags": 2
          },
          {
            "Text": " with a named group, "
          },
          {
            "Text": "(?\u003cname\u003e...)",
            "AttrFlags": 2
          },
          {
            "Text": ". This allows for extraction by name instead of having to count how many groups you have."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101327933,
        "id": "3b13a266-a6dd-4b12-82e9-2daecae2e1d9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101327933,
        "parent_id": "c2c32da2-8e7b-4b60-a40c-650f3876e084",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "name_reg = /h(i|ello), my name is (?\u003cname\u003e.*)/i #i means case insensitive\n\nname_input = \"Hi, my name is Zaphod Beeblebrox\"\n\nmatch_data = name_reg.match(name_input) #returns either a MatchData object or nil\nmatch_data = name_input.match(name_reg) #works either way\n\nif match_data.nil? #Always check for nil! Common error.\n  puts \"No match\"\nelse\n  match[0] #=\u003e \"Hi, my name is Zaphod Beeblebrox\"\n  match[1] #=\u003e \"i\" #the first group, (i|ello)\n  match[2] #=\u003e \"Zaphod Beeblebrox\"\n  #Because it was a named group, we can get it by name\n  match[:name]  #=\u003e \"Zaphod Beeblebrox\"\n  match[\"name\"] #=\u003e \"Zaphod Beeblebrox\"\n  puts \"Hello #{match[:name]}!\"\nend"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "name_reg = /h(i|ello), my name is (?\u003cname\u003e.*)/i #i means case insensitive\n\nname_input = \"Hi, my name is Zaphod Beeblebrox\"\n\nmatch_data = name_reg.match(name_input) #returns either a MatchData object or nil\nmatch_data = name_input.match(name_reg) #works either way\n\nif match_data.nil? #Always check for nil! Common error.\n  puts \"No match\"\nelse\n  match[0] #=\u003e \"Hi, my name is Zaphod Beeblebrox\"\n  match[1] #=\u003e \"i\" #the first group, (i|ello)\n  match[2] #=\u003e \"Zaphod Beeblebrox\"\n  #Because it was a named group, we can get it by name\n  match[:name]  #=\u003e \"Zaphod Beeblebrox\"\n  match[\"name\"] #=\u003e \"Zaphod Beeblebrox\"\n  puts \"Hello #{match[:name]}!\"\nend",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101327934,
        "id": "fdc80e0b-8f82-40c8-98c6-15caff5ef106",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101327934,
        "parent_id": "c2c32da2-8e7b-4b60-a40c-650f3876e084",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The index of the match is counted based on the order of the left parentheses (with the entire regex being the first group at index 0)"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The index of the match is counted based on the order of the left parentheses (with the entire regex being the first group at index 0)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101327934,
        "id": "a4524a44-e75f-4aef-bf0d-b3212ebe7984",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101327934,
        "parent_id": "c2c32da2-8e7b-4b60-a40c-650f3876e084",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "reg = /(((a)b)c)(d)/\nmatch = reg.match 'abcd'\nmatch[0] #=\u003e \"abcd\"\nmatch[1] #=\u003e \"abc\"\nmatch[2] #=\u003e \"ab\"\nmatch[3] #=\u003e \"a\"\nmatch[4] #=\u003e \"d\""
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "reg = /(((a)b)c)(d)/\nmatch = reg.match 'abcd'\nmatch[0] #=\u003e \"abcd\"\nmatch[1] #=\u003e \"abc\"\nmatch[2] #=\u003e \"ab\"\nmatch[3] #=\u003e \"a\"\nmatch[4] #=\u003e \"d\"",
        "code_language": "Plain Text"
      }
    ],
    "title": "Groups named and otherwise.",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}