{
  "ID": "7ecae243-4d85-4082-8989-be26cd508493",
  "Root": {
    "alive": true,
    "content": [
      "e34c1a6d-9ca1-4f75-a330-d07c2214899a",
      "ad36ce7f-cf29-41c9-be62-a9615d3061ea",
      "0427451d-6c73-47c8-b96c-8ba410f9e0ef",
      "a527fb4c-fe83-43e5-9436-9d13df9d7d7c",
      "912eed33-cc85-446d-b8e1-9f97a64181b1",
      "75783a14-5a25-458a-b99e-5462fd286cd5",
      "f6ec6398-b7bd-4d27-aafd-31a1869dd069",
      "b146f856-a6ba-4231-8842-f0569429cf3c",
      "c121b661-1bbf-474e-963c-1f63bb16f079"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552101217932,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "7ecae243-4d85-4082-8989-be26cd508493",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552101217932,
    "parent_id": "526b98b2-3732-4941-ae3c-1e34440107c3",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Modifying keys and values"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101217929,
        "id": "e34c1a6d-9ca1-4f75-a330-d07c2214899a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101217929,
        "parent_id": "7ecae243-4d85-4082-8989-be26cd508493",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You can create a new hash with the keys or values modified, indeed you can also add or delete keys, using "
            ],
            [
              "inject",
              [
                [
                  "a",
                  "http://ruby-doc.org/core-2.3.1/Enumerable.html#method-i-inject"
                ]
              ]
            ],
            [
              " (AKA, "
            ],
            [
              "reduce",
              [
                [
                  "a",
                  "https://ruby-doc.org/core-2.4.1/Enumerable.html#method-i-reduce"
                ]
              ]
            ],
            [
              "). For example to produce a hash with stringified keys and upper case values:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You can create a new hash with the keys or values modified, indeed you can also add or delete keys, using "
          },
          {
            "Text": "inject",
            "Link": "http://ruby-doc.org/core-2.3.1/Enumerable.html#method-i-inject"
          },
          {
            "Text": " (AKA, "
          },
          {
            "Text": "reduce",
            "Link": "https://ruby-doc.org/core-2.4.1/Enumerable.html#method-i-reduce"
          },
          {
            "Text": "). For example to produce a hash with stringified keys and upper case values:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101217929,
        "id": "ad36ce7f-cf29-41c9-be62-a9615d3061ea",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101217929,
        "parent_id": "7ecae243-4d85-4082-8989-be26cd508493",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "fruit = { name: 'apple', color: 'green', shape: 'round' }\n# =\u003e {:name=\u003e\"apple\", :color=\u003e\"green\", :shape=\u003e\"round\"}\n\nnew_fruit = fruit.inject({}) { |memo, (k,v)| memo[k.to_s] = v.upcase; memo }\n\n# =\u003e new_fruit is {\"name\"=\u003e\"APPLE\", \"color\"=\u003e\"GREEN\", \"shape\"=\u003e\"ROUND\"}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "fruit = { name: 'apple', color: 'green', shape: 'round' }\n# =\u003e {:name=\u003e\"apple\", :color=\u003e\"green\", :shape=\u003e\"round\"}\n\nnew_fruit = fruit.inject({}) { |memo, (k,v)| memo[k.to_s] = v.upcase; memo }\n\n# =\u003e new_fruit is {\"name\"=\u003e\"APPLE\", \"color\"=\u003e\"GREEN\", \"shape\"=\u003e\"ROUND\"}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101217930,
        "id": "0427451d-6c73-47c8-b96c-8ba410f9e0ef",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101217930,
        "parent_id": "7ecae243-4d85-4082-8989-be26cd508493",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Hash is an "
            ],
            [
              "enumerable",
              [
                [
                  "a",
                  "ruby-doc.org/core-2.3.1/Enumerable.html"
                ]
              ]
            ],
            [
              ", in essence a collection of key/value pairs. Therefore is has methods such as "
            ],
            [
              "each",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "map",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "inject",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Hash is an "
          },
          {
            "Text": "enumerable",
            "Link": "ruby-doc.org/core-2.3.1/Enumerable.html"
          },
          {
            "Text": ", in essence a collection of key/value pairs. Therefore is has methods such as "
          },
          {
            "Text": "each",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "map",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "inject",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101217930,
        "id": "a527fb4c-fe83-43e5-9436-9d13df9d7d7c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101217930,
        "parent_id": "7ecae243-4d85-4082-8989-be26cd508493",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For every key/value pair in the hash the given block is evaluated, the value of memo on the first run is the seed value passed to "
            ],
            [
              "inject",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", in our case an empty hash, "
            ],
            [
              "{}",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". The value of "
            ],
            [
              "memo",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " for subsequent evaluations is the returned value of the previous blocks evaluation, this is why we modify "
            ],
            [
              "memo",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " by setting a key with a value and then return "
            ],
            [
              "memo",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " at the end. The return value of the final blocks evaluation is the return value of "
            ],
            [
              "inject",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", in our case "
            ],
            [
              "memo",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For every key/value pair in the hash the given block is evaluated, the value of memo on the first run is the seed value passed to "
          },
          {
            "Text": "inject",
            "AttrFlags": 2
          },
          {
            "Text": ", in our case an empty hash, "
          },
          {
            "Text": "{}",
            "AttrFlags": 2
          },
          {
            "Text": ". The value of "
          },
          {
            "Text": "memo",
            "AttrFlags": 2
          },
          {
            "Text": " for subsequent evaluations is the returned value of the previous blocks evaluation, this is why we modify "
          },
          {
            "Text": "memo",
            "AttrFlags": 2
          },
          {
            "Text": " by setting a key with a value and then return "
          },
          {
            "Text": "memo",
            "AttrFlags": 2
          },
          {
            "Text": " at the end. The return value of the final blocks evaluation is the return value of "
          },
          {
            "Text": "inject",
            "AttrFlags": 2
          },
          {
            "Text": ", in our case "
          },
          {
            "Text": "memo",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101217931,
        "id": "912eed33-cc85-446d-b8e1-9f97a64181b1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101217931,
        "parent_id": "7ecae243-4d85-4082-8989-be26cd508493",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To avoid the having to provide the final value, you could use "
            ],
            [
              "each_with_object",
              [
                [
                  "a",
                  "http://ruby-doc.org/core-2.3.1/Enumerable.html#method-i-each_with_object"
                ]
              ]
            ],
            [
              " instead:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To avoid the having to provide the final value, you could use "
          },
          {
            "Text": "each_with_object",
            "Link": "http://ruby-doc.org/core-2.3.1/Enumerable.html#method-i-each_with_object"
          },
          {
            "Text": " instead:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101217931,
        "id": "75783a14-5a25-458a-b99e-5462fd286cd5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101217931,
        "parent_id": "7ecae243-4d85-4082-8989-be26cd508493",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "new_fruit = fruit.each_with_object({}) { |(k,v), memo| memo[k.to_s] = v.upcase }"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "new_fruit = fruit.each_with_object({}) { |(k,v), memo| memo[k.to_s] = v.upcase }",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101217931,
        "id": "f6ec6398-b7bd-4d27-aafd-31a1869dd069",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101217931,
        "parent_id": "7ecae243-4d85-4082-8989-be26cd508493",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Or even "
            ],
            [
              "map",
              [
                [
                  "a",
                  "https://ruby-doc.org/core-2.4.1/Enumerable.html#method-i-map"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Or even "
          },
          {
            "Text": "map",
            "Link": "https://ruby-doc.org/core-2.4.1/Enumerable.html#method-i-map"
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101217931,
        "id": "b146f856-a6ba-4231-8842-f0569429cf3c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101217931,
        "parent_id": "7ecae243-4d85-4082-8989-be26cd508493",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "\u003c!-- if version [gte 1.8] --\u003e\nnew_fruit = Hash[fruit.map{ |k,v| [k.to_s, v.upcase] }]\n\u003c!-- end version if --\u003e"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "\u003c!-- if version [gte 1.8] --\u003e\nnew_fruit = Hash[fruit.map{ |k,v| [k.to_s, v.upcase] }]\n\u003c!-- end version if --\u003e",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101217932,
        "id": "c121b661-1bbf-474e-963c-1f63bb16f079",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101217932,
        "parent_id": "7ecae243-4d85-4082-8989-be26cd508493",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "(See "
            ],
            [
              "this answer",
              [
                [
                  "a",
                  "http://stackoverflow.com/a/5189259/7948068"
                ]
              ]
            ],
            [
              " for more details, including how to manipulate hashes in place.)"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "(See "
          },
          {
            "Text": "this answer",
            "Link": "http://stackoverflow.com/a/5189259/7948068"
          },
          {
            "Text": " for more details, including how to manipulate hashes in place.)"
          }
        ]
      }
    ],
    "title": "Modifying keys and values",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}