{
  "ID": "731eb4dc-b326-4290-9e6f-d07642222bde",
  "Root": {
    "alive": true,
    "content": [
      "a8809ffd-df33-4c34-88d3-73d275e4421a",
      "47baf6dc-b813-4798-91b6-17200909e3a9"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552101224829,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "731eb4dc-b326-4290-9e6f-d07642222bde",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552101224829,
    "parent_id": "5d7c03e8-234e-44ac-99c0-de7bac145d55",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Proc"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101224825,
        "id": "a8809ffd-df33-4c34-88d3-73d275e4421a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101224825,
        "parent_id": "731eb4dc-b326-4290-9e6f-d07642222bde",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "def call_the_block(\u0026calling); calling.call; end\n\nits_a = proc do |*args|\n  puts \"It's a...\" unless args.empty?\n  \"beautiful day\"\nend\n\nputs its_a       #=\u003e \"beautiful day\"\nputs its_a.call  #=\u003e \"beautiful day\"\nputs its_a[1, 2] #=\u003e \"It's a...\" \"beautiful day\""
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "def call_the_block(\u0026calling); calling.call; end\n\nits_a = proc do |*args|\n  puts \"It's a...\" unless args.empty?\n  \"beautiful day\"\nend\n\nputs its_a       #=\u003e \"beautiful day\"\nputs its_a.call  #=\u003e \"beautiful day\"\nputs its_a[1, 2] #=\u003e \"It's a...\" \"beautiful day\"",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101224828,
        "id": "47baf6dc-b813-4798-91b6-17200909e3a9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101224828,
        "parent_id": "731eb4dc-b326-4290-9e6f-d07642222bde",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We’ve copied the method "
            ],
            [
              "call_the_block",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " from the last example. Here, you can see that a proc is made by calling the "
            ],
            [
              "proc",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method with a block. You can also see that blocks, like methods, have implicit returns, which means that procs (and lambdas) do too. In the definition of "
            ],
            [
              "its_a",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", you can see that blocks can take splat arguments as well as normal ones; they’re also capable of taking default arguments, but I couldn’t think of a way to work that in. Lastly, you can see that it’s possible to use multiple syntaxes to call a method – either the "
            ],
            [
              "call",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method, or the "
            ],
            [
              "[]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " operator."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "We’ve copied the method "
          },
          {
            "Text": "call_the_block",
            "AttrFlags": 2
          },
          {
            "Text": " from the last example. Here, you can see that a proc is made by calling the "
          },
          {
            "Text": "proc",
            "AttrFlags": 2
          },
          {
            "Text": " method with a block. You can also see that blocks, like methods, have implicit returns, which means that procs (and lambdas) do too. In the definition of "
          },
          {
            "Text": "its_a",
            "AttrFlags": 2
          },
          {
            "Text": ", you can see that blocks can take splat arguments as well as normal ones; they’re also capable of taking default arguments, but I couldn’t think of a way to work that in. Lastly, you can see that it’s possible to use multiple syntaxes to call a method – either the "
          },
          {
            "Text": "call",
            "AttrFlags": 2
          },
          {
            "Text": " method, or the "
          },
          {
            "Text": "[]",
            "AttrFlags": 2
          },
          {
            "Text": " operator."
          }
        ]
      }
    ],
    "title": "Proc",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}