{
  "ID": "0a3baec5-fff2-45ce-b213-9514397f117c",
  "Root": {
    "alive": true,
    "content": [
      "c78b35f5-9c9a-4051-bf52-01b56ff2c895",
      "b072f1f3-72f2-4e78-ab19-c0ef56adcdfc",
      "e9b1a110-5a51-4185-be06-628466fc7bb1",
      "81c07d27-ad58-4f7c-affa-310dcf48fdd9",
      "457f9bb7-fa5b-4520-9d81-ac1a9b0ee4af",
      "b30d5812-f5c1-4159-b1fa-2b210ffd8fc7",
      "0ece1cca-c898-486c-9657-b4e34d835374",
      "f7686318-8092-46f1-b35a-a4ad71a170dd",
      "65a1702f-5af1-4c94-bd83-6a2260d9827b"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552102176166,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "0a3baec5-fff2-45ce-b213-9514397f117c",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552102176166,
    "parent_id": "7eb3d215-c3b9-459b-91a2-50b351cb9a27",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Using arbitrary keyword arguments with splat operator"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552102176164,
        "id": "c78b35f5-9c9a-4051-bf52-01b56ff2c895",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552102176164,
        "parent_id": "0a3baec5-fff2-45ce-b213-9514397f117c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You can define a method to accept an arbitrary number of keyword arguments using the "
            ],
            [
              "double splat",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " ("
            ],
            [
              "**",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") operator:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You can define a method to accept an arbitrary number of keyword arguments using the "
          },
          {
            "Text": "double splat",
            "AttrFlags": 4
          },
          {
            "Text": " ("
          },
          {
            "Text": "**",
            "AttrFlags": 2
          },
          {
            "Text": ") operator:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552102176165,
        "id": "b072f1f3-72f2-4e78-ab19-c0ef56adcdfc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552102176165,
        "parent_id": "0a3baec5-fff2-45ce-b213-9514397f117c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "def say(**args)\n  puts args\nend\n\nsay foo: \"1\", bar: \"2\"\n# {:foo=\u003e\"1\", :bar=\u003e\"2\"}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "def say(**args)\n  puts args\nend\n\nsay foo: \"1\", bar: \"2\"\n# {:foo=\u003e\"1\", :bar=\u003e\"2\"}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552102176165,
        "id": "e9b1a110-5a51-4185-be06-628466fc7bb1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552102176165,
        "parent_id": "0a3baec5-fff2-45ce-b213-9514397f117c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The arguments are captured in a "
            ],
            [
              "Hash",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". You can manipulate the "
            ],
            [
              "Hash",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", for example to extract the desired arguments."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The arguments are captured in a "
          },
          {
            "Text": "Hash",
            "AttrFlags": 2
          },
          {
            "Text": ". You can manipulate the "
          },
          {
            "Text": "Hash",
            "AttrFlags": 2
          },
          {
            "Text": ", for example to extract the desired arguments."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552102176165,
        "id": "81c07d27-ad58-4f7c-affa-310dcf48fdd9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552102176165,
        "parent_id": "0a3baec5-fff2-45ce-b213-9514397f117c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "def say(**args)\n  puts args[:message] || \"Message not found\"\nend\n\nsay foo: \"1\", bar: \"2\", message: \"Hello World\"\n# Hello World\n\nsay foo: \"1\", bar: \"2\"\n# Message not found"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "def say(**args)\n  puts args[:message] || \"Message not found\"\nend\n\nsay foo: \"1\", bar: \"2\", message: \"Hello World\"\n# Hello World\n\nsay foo: \"1\", bar: \"2\"\n# Message not found",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552102176166,
        "id": "457f9bb7-fa5b-4520-9d81-ac1a9b0ee4af",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552102176166,
        "parent_id": "0a3baec5-fff2-45ce-b213-9514397f117c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Using a the splat operator with keyword arguments will prevent keyword argument validation, the method will never raise an "
            ],
            [
              "ArgumentError",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in case of unknown keyword."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Using a the splat operator with keyword arguments will prevent keyword argument validation, the method will never raise an "
          },
          {
            "Text": "ArgumentError",
            "AttrFlags": 2
          },
          {
            "Text": " in case of unknown keyword."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552102176166,
        "id": "b30d5812-f5c1-4159-b1fa-2b210ffd8fc7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552102176166,
        "parent_id": "0a3baec5-fff2-45ce-b213-9514397f117c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As for the standard splat operator, you can re-convert a "
            ],
            [
              "Hash",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " into keyword arguments for a method:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "As for the standard splat operator, you can re-convert a "
          },
          {
            "Text": "Hash",
            "AttrFlags": 2
          },
          {
            "Text": " into keyword arguments for a method:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552102176166,
        "id": "0ece1cca-c898-486c-9657-b4e34d835374",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552102176166,
        "parent_id": "0a3baec5-fff2-45ce-b213-9514397f117c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "def say(message: nil, before: \"\u003cp\u003e\", after: \"\u003c/p\u003e\")\n  puts \"#{before}#{message}#{after}\"\nend\n\nargs = { message: \"Hello World\", after: \"\u003c/p\u003e\u003chr\u003e\" }\nsay(**args)\n# \u003cp\u003eHello World\u003c/p\u003e\u003chr\u003e\n\nargs = { message: \"Hello World\", foo: \"1\" }\nsay(**args)\n# =\u003e ArgumentError: unknown keyword: foo"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "def say(message: nil, before: \"\u003cp\u003e\", after: \"\u003c/p\u003e\")\n  puts \"#{before}#{message}#{after}\"\nend\n\nargs = { message: \"Hello World\", after: \"\u003c/p\u003e\u003chr\u003e\" }\nsay(**args)\n# \u003cp\u003eHello World\u003c/p\u003e\u003chr\u003e\n\nargs = { message: \"Hello World\", foo: \"1\" }\nsay(**args)\n# =\u003e ArgumentError: unknown keyword: foo",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552102176166,
        "id": "f7686318-8092-46f1-b35a-a4ad71a170dd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552102176166,
        "parent_id": "0a3baec5-fff2-45ce-b213-9514397f117c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This is generally used when you need to manipulate incoming arguments, and pass them to an underlying method:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This is generally used when you need to manipulate incoming arguments, and pass them to an underlying method:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552102176166,
        "id": "65a1702f-5af1-4c94-bd83-6a2260d9827b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552102176166,
        "parent_id": "0a3baec5-fff2-45ce-b213-9514397f117c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "def inner(foo:, bar:)\n  puts foo, bar\nend\n\ndef outer(something, foo: nil, bar: nil, baz: nil)\n  puts something\n  params = {}\n  params[:foo] = foo || \"Default foo\"\n  params[:bar] = bar || \"Default bar\"\n  inner(**params)\nend\n\nouter \"Hello:\", foo: \"Custom foo\"\n# Hello:\n# Custom foo\n# Default bar"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "def inner(foo:, bar:)\n  puts foo, bar\nend\n\ndef outer(something, foo: nil, bar: nil, baz: nil)\n  puts something\n  params = {}\n  params[:foo] = foo || \"Default foo\"\n  params[:bar] = bar || \"Default bar\"\n  inner(**params)\nend\n\nouter \"Hello:\", foo: \"Custom foo\"\n# Hello:\n# Custom foo\n# Default bar",
        "code_language": "Plain Text"
      }
    ],
    "title": "Using arbitrary keyword arguments with splat operator",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}