{
  "ID": "9afb533a-ac91-45b9-b5b6-16160eeb14c0",
  "Root": {
    "alive": true,
    "content": [
      "665b3411-e7bf-4ae4-a631-bde59a6b2bf5",
      "c11ea2f5-639c-4ae7-8be5-180107b55241",
      "12b8eef1-029d-4f11-b77e-792899a81fe5",
      "82c83f0c-0459-4028-9bcd-2855d52212f5",
      "f7ec625f-0f4e-4780-9d4c-bcb9aa862f79",
      "263f0adf-2d60-4c11-b243-c36b42c89719",
      "e18cb44c-326d-4ddc-a24a-14216ad2bffd",
      "f4762f01-5d05-43f5-ab40-ebfc73f785d5",
      "8fd23d84-a873-438b-8a2e-abf6a3296c47",
      "44fc5214-39e9-49ca-8f5f-ae052cdb5732"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552101300831,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "9afb533a-ac91-45b9-b5b6-16160eeb14c0",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552101300831,
    "parent_id": "c257caf4-7140-4773-b69e-7886cfebc866",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "method missing"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101300827,
        "id": "665b3411-e7bf-4ae4-a631-bde59a6b2bf5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101300827,
        "parent_id": "9afb533a-ac91-45b9-b5b6-16160eeb14c0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Parameters"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Parameters"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101300829,
        "id": "c11ea2f5-639c-4ae7-8be5-180107b55241",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101300829,
        "parent_id": "9afb533a-ac91-45b9-b5b6-16160eeb14c0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Parameter | Details |"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Parameter | Details |"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101300830,
        "id": "12b8eef1-029d-4f11-b77e-792899a81fe5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101300830,
        "parent_id": "9afb533a-ac91-45b9-b5b6-16160eeb14c0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "|———–|———| | method | The name of the method that has been called (in the above example this is "
            ],
            [
              ":say_moo",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", note that this is a symbol. | | *args | The arguments passed in to this method. Can be any number, or none | | \u0026block | The block of the method called, this can either be a "
            ],
            [
              "do",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " block, or a "
            ],
            [
              "{ }",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " enclosed block |"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "|———–|———| | method | The name of the method that has been called (in the above example this is "
          },
          {
            "Text": ":say_moo",
            "AttrFlags": 2
          },
          {
            "Text": ", note that this is a symbol. | | *args | The arguments passed in to this method. Can be any number, or none | | \u0026block | The block of the method called, this can either be a "
          },
          {
            "Text": "do",
            "AttrFlags": 2
          },
          {
            "Text": " block, or a "
          },
          {
            "Text": "{ }",
            "AttrFlags": 2
          },
          {
            "Text": " enclosed block |"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101300830,
        "id": "82c83f0c-0459-4028-9bcd-2855d52212f5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101300830,
        "parent_id": "9afb533a-ac91-45b9-b5b6-16160eeb14c0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Remarks"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Remarks"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101300830,
        "id": "f7ec625f-0f4e-4780-9d4c-bcb9aa862f79",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101300830,
        "parent_id": "9afb533a-ac91-45b9-b5b6-16160eeb14c0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Always call super, at the bottom of this function. This saves silent failure when something is called and you don’t get an error."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Always call super, at the bottom of this function. This saves silent failure when something is called and you don’t get an error."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101300830,
        "id": "263f0adf-2d60-4c11-b243-c36b42c89719",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101300830,
        "parent_id": "9afb533a-ac91-45b9-b5b6-16160eeb14c0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For example, this method_missing is going to cause problems:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For example, this method_missing is going to cause problems:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101300830,
        "id": "e18cb44c-326d-4ddc-a24a-14216ad2bffd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101300830,
        "parent_id": "9afb533a-ac91-45b9-b5b6-16160eeb14c0",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class Animal\n  def method_missing(method, *args, \u0026block)\n    say, speak = method.to_s.split(\"_\")\n    if say == \"say\"\n      speak\n    end\n  end\nend\n\n=\u003e Animal.new.foobar\n=\u003e nil # This should really be raising an error"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class Animal\n  def method_missing(method, *args, \u0026block)\n    say, speak = method.to_s.split(\"_\")\n    if say == \"say\"\n      speak\n    end\n  end\nend\n\n=\u003e Animal.new.foobar\n=\u003e nil # This should really be raising an error",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101300830,
        "id": "f4762f01-5d05-43f5-ab40-ebfc73f785d5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101300830,
        "parent_id": "9afb533a-ac91-45b9-b5b6-16160eeb14c0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "method_missing",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is a good tool to use when appropriate, but has two costs you should consider. First, "
            ],
            [
              "method_missing",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is less efficient – ruby must search the class and all of its ancestors before it can fall back on this approach; this performance penalty may be trivial in a simple case, but can add up. Second and more broadly, this is a form of meta-programming that has great power that comes with responsibility to ensure that the implementation is secure, properly handles malicious inputs, unexpected inputs, and so on."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "method_missing",
            "AttrFlags": 2
          },
          {
            "Text": " is a good tool to use when appropriate, but has two costs you should consider. First, "
          },
          {
            "Text": "method_missing",
            "AttrFlags": 2
          },
          {
            "Text": " is less efficient – ruby must search the class and all of its ancestors before it can fall back on this approach; this performance penalty may be trivial in a simple case, but can add up. Second and more broadly, this is a form of meta-programming that has great power that comes with responsibility to ensure that the implementation is secure, properly handles malicious inputs, unexpected inputs, and so on."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101300831,
        "id": "8fd23d84-a873-438b-8a2e-abf6a3296c47",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101300831,
        "parent_id": "9afb533a-ac91-45b9-b5b6-16160eeb14c0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You should also override "
            ],
            [
              "respond_to_missing?",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " like so:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You should also override "
          },
          {
            "Text": "respond_to_missing?",
            "AttrFlags": 2
          },
          {
            "Text": " like so:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101300831,
        "id": "44fc5214-39e9-49ca-8f5f-ae052cdb5732",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101300831,
        "parent_id": "9afb533a-ac91-45b9-b5b6-16160eeb14c0",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class Animal\n  def respond_to_missing?(method, include_private = false)\n    method.to_s.start_with?(\"say_\") || super\n  end\nend\n\n=\u003e Animal.new.respond_to?(:say_moo) # =\u003e true"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class Animal\n  def respond_to_missing?(method, include_private = false)\n    method.to_s.start_with?(\"say_\") || super\n  end\nend\n\n=\u003e Animal.new.respond_to?(:say_moo) # =\u003e true",
        "code_language": "Plain Text"
      }
    ],
    "title": "method missing",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}