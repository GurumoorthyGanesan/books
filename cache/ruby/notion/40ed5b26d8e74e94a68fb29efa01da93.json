{
  "ID": "40ed5b26-d8e7-4e94-a68f-b29efa01da93",
  "Root": {
    "alive": true,
    "content": [
      "bb768ebb-5110-47df-a5ea-2dac8a9a3e07",
      "a3706d34-bb7f-4146-83a1-4eb46dc20dc1",
      "324f9aae-d3e9-4b3f-8bfc-5b7b83f5f32a",
      "1f334796-9701-43f5-af61-41aa1e5a82eb",
      "993973f9-1b82-441d-add6-cc26f9b04ef7",
      "6ef8d393-f911-41d0-b649-64038a4e1660",
      "1adb53f9-f961-4cf0-b4f9-c0707fcad642",
      "d9d9fc18-b573-46ac-9499-50ca0aa46c1c",
      "46e9c037-dc31-4bda-a2ef-21e27acc0a5f",
      "4132b128-8940-4609-b3b2-b0590f587044",
      "0d147213-18e6-4909-a6df-7a627d2ad263",
      "bcbf8b48-1d6f-433f-a9a2-6caa5fbbef12",
      "5fe2c01b-19f5-492b-b011-0ba08dd4567a",
      "4a97bad3-aaad-4b6d-9f57-62d5b0e2b27a",
      "39d5c8cc-7618-4e4c-8aca-5496d8668842"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552101260092,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "40ed5b26-d8e7-4e94-a68f-b29efa01da93",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552101260092,
    "parent_id": "bd841f16-9559-465f-bd31-488dd383c486",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Control flow with logic statements"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101260087,
        "id": "bb768ebb-5110-47df-a5ea-2dac8a9a3e07",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101260087,
        "parent_id": "40ed5b26-d8e7-4e94-a68f-b29efa01da93",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "While it might seem counterintuitive, you can use logical operators to determine whether or not a statement is run. For instance:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "While it might seem counterintuitive, you can use logical operators to determine whether or not a statement is run. For instance:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101260088,
        "id": "a3706d34-bb7f-4146-83a1-4eb46dc20dc1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101260088,
        "parent_id": "40ed5b26-d8e7-4e94-a68f-b29efa01da93",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "File.exist?(filename) or STDERR.puts \"#{filename} does not exist!\""
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "File.exist?(filename) or STDERR.puts \"#{filename} does not exist!\"",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101260088,
        "id": "324f9aae-d3e9-4b3f-8bfc-5b7b83f5f32a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101260088,
        "parent_id": "40ed5b26-d8e7-4e94-a68f-b29efa01da93",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This will check to see if the file exists and only print the error message if it doesn’t. The "
            ],
            [
              "or",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " statement is lazy, which means it’ll stop executing once it’s sure which whether it’s value is true or false. As soon as the first term is found to be true, there’s no need to check the value of the other term. But if the first term is false, it must check the second term."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This will check to see if the file exists and only print the error message if it doesn’t. The "
          },
          {
            "Text": "or",
            "AttrFlags": 2
          },
          {
            "Text": " statement is lazy, which means it’ll stop executing once it’s sure which whether it’s value is true or false. As soon as the first term is found to be true, there’s no need to check the value of the other term. But if the first term is false, it must check the second term."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101260088,
        "id": "1f334796-9701-43f5-af61-41aa1e5a82eb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101260088,
        "parent_id": "40ed5b26-d8e7-4e94-a68f-b29efa01da93",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A common use is to set a default value:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A common use is to set a default value:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101260088,
        "id": "993973f9-1b82-441d-add6-cc26f9b04ef7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101260088,
        "parent_id": "40ed5b26-d8e7-4e94-a68f-b29efa01da93",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "glass = glass or 'full' # Optimist!"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "glass = glass or 'full' # Optimist!",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101260088,
        "id": "6ef8d393-f911-41d0-b649-64038a4e1660",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101260088,
        "parent_id": "40ed5b26-d8e7-4e94-a68f-b29efa01da93",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "That sets the value of "
            ],
            [
              "glass",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to ‘full’ if it’s not already set. More concisely, you can use the symbolic version of "
            ],
            [
              "or",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "That sets the value of "
          },
          {
            "Text": "glass",
            "AttrFlags": 2
          },
          {
            "Text": " to ‘full’ if it’s not already set. More concisely, you can use the symbolic version of "
          },
          {
            "Text": "or",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101260088,
        "id": "1adb53f9-f961-4cf0-b4f9-c0707fcad642",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101260088,
        "parent_id": "40ed5b26-d8e7-4e94-a68f-b29efa01da93",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "glass ||= 'empty' # Pessimist."
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "glass ||= 'empty' # Pessimist.",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101260089,
        "id": "d9d9fc18-b573-46ac-9499-50ca0aa46c1c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101260089,
        "parent_id": "40ed5b26-d8e7-4e94-a68f-b29efa01da93",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It’s also possible to run the second statement only if the first one is false:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It’s also possible to run the second statement only if the first one is false:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101260089,
        "id": "46e9c037-dc31-4bda-a2ef-21e27acc0a5f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101260089,
        "parent_id": "40ed5b26-d8e7-4e94-a68f-b29efa01da93",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "File.exist?(filename) and puts \"#{filename} found!\""
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "File.exist?(filename) and puts \"#{filename} found!\"",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101260089,
        "id": "4132b128-8940-4609-b3b2-b0590f587044",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101260089,
        "parent_id": "40ed5b26-d8e7-4e94-a68f-b29efa01da93",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Again, "
            ],
            [
              "and",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is lazy so it will only execute the second statement if necessary to arrive at a value."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Again, "
          },
          {
            "Text": "and",
            "AttrFlags": 2
          },
          {
            "Text": " is lazy so it will only execute the second statement if necessary to arrive at a value."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101260089,
        "id": "0d147213-18e6-4909-a6df-7a627d2ad263",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101260089,
        "parent_id": "40ed5b26-d8e7-4e94-a68f-b29efa01da93",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "or",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " operator has lower precedence than "
            ],
            [
              "and",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Similarly, "
            ],
            [
              "||",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " has lower precedence than "
            ],
            [
              "\u0026\u0026",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". The symbol forms have higher precedence than the word forms. This is handy to know when you want to mix this technique with assignment:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "or",
            "AttrFlags": 2
          },
          {
            "Text": " operator has lower precedence than "
          },
          {
            "Text": "and",
            "AttrFlags": 2
          },
          {
            "Text": ". Similarly, "
          },
          {
            "Text": "||",
            "AttrFlags": 2
          },
          {
            "Text": " has lower precedence than "
          },
          {
            "Text": "\u0026\u0026",
            "AttrFlags": 2
          },
          {
            "Text": ". The symbol forms have higher precedence than the word forms. This is handy to know when you want to mix this technique with assignment:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101260089,
        "id": "bcbf8b48-1d6f-433f-a9a2-6caa5fbbef12",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101260089,
        "parent_id": "40ed5b26-d8e7-4e94-a68f-b29efa01da93",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "a = 1 and b = 2\n#=\u003e a==1\n#=\u003e b==2"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "a = 1 and b = 2\n#=\u003e a==1\n#=\u003e b==2",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101260090,
        "id": "5fe2c01b-19f5-492b-b011-0ba08dd4567a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101260090,
        "parent_id": "40ed5b26-d8e7-4e94-a68f-b29efa01da93",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "a = 1 \u0026\u0026 b = 2; puts a, b\n#=\u003e a==2\n#=\u003e b==2"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "a = 1 \u0026\u0026 b = 2; puts a, b\n#=\u003e a==2\n#=\u003e b==2",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101260091,
        "id": "4a97bad3-aaad-4b6d-9f57-62d5b0e2b27a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101260091,
        "parent_id": "40ed5b26-d8e7-4e94-a68f-b29efa01da93",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note that the Ruby Style Guide "
            ],
            [
              "recommends",
              [
                [
                  "a",
                  "https://github.com/bbatsov/ruby-style-guide#no-and-or-or"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note that the Ruby Style Guide "
          },
          {
            "Text": "recommends",
            "Link": "https://github.com/bbatsov/ruby-style-guide#no-and-or-or"
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552101260091,
        "id": "39d5c8cc-7618-4e4c-8aca-5496d8668842",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552101260091,
        "parent_id": "40ed5b26-d8e7-4e94-a68f-b29efa01da93",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The and and or keywords are banned. The minimal added readability is just not worth the high probability of introducing subtle bugs. For boolean expressions, always use \u0026\u0026 and || instead. For flow control, use if and unless; \u0026\u0026 and || are also acceptable but less clear."
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "The and and or keywords are banned. The minimal added readability is just not worth the high probability of introducing subtle bugs. For boolean expressions, always use \u0026\u0026 and || instead. For flow control, use if and unless; \u0026\u0026 and || are also acceptable but less clear."
          }
        ]
      }
    ],
    "title": "Control flow with logic statements",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}