{
  "ID": "7a0afb44-b154-4a41-9f35-1a0d3c0ba719",
  "Root": {
    "alive": true,
    "content": [
      "6ff0ede4-1b96-403d-84a0-87d4e1a4a995",
      "363d749a-e78b-4ac3-9049-f70d409d33ba",
      "b6255382-32ae-4a1d-a5b9-adc4c8ffe5e5",
      "54e53739-f18f-43c8-80ac-5b444d92069f",
      "dc4528d0-906e-474e-844b-23662800142b",
      "93b6667a-a7b9-4adf-965b-0dcbf3847e49",
      "e79abd4a-15a5-4e60-8053-ad190e1046b8",
      "23b0b340-eb3d-4848-8f51-1307cf787dfc",
      "0f08c0b0-affa-476c-a114-9db478e3123f",
      "36028d52-0216-4b31-ad07-a9166bf7c722",
      "3d6a095e-1029-4be3-af3c-fe535fbc0d03",
      "2d6b2b42-8f59-44a7-baf9-0fd55cf2932a",
      "7afcca54-851a-4e9c-a450-6adf9b53f594"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1532156163325,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "7a0afb44-b154-4a41-9f35-1a0d3c0ba719",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552277100000,
    "parent_id": "c7fea6b1-76b7-4c54-ab35-f2d8fdd56f13",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Structs"
        ]
      ]
    },
    "type": "page",
    "version": 58,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532210773772,
        "id": "6ff0ede4-1b96-403d-84a0-87d4e1a4a995",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532210775911,
        "parent_id": "7a0afb44-b154-4a41-9f35-1a0d3c0ba719",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "$Id: 227"
            ]
          ]
        },
        "type": "text",
        "version": 12,
        "inline_content": [
          {
            "Text": "$Id: 227"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532210775911,
        "id": "363d749a-e78b-4ac3-9049-f70d409d33ba",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532210778649,
        "parent_id": "7a0afb44-b154-4a41-9f35-1a0d3c0ba719",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "$SOId: 6071"
            ]
          ]
        },
        "type": "text",
        "version": 12,
        "inline_content": [
          {
            "Text": "$SOId: 6071"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156163321,
        "id": "b6255382-32ae-4a1d-a5b9-adc4c8ffe5e5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532156163321,
        "parent_id": "7a0afb44-b154-4a41-9f35-1a0d3c0ba719",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "List fields of a struct"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "List fields of a struct"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156163322,
        "id": "54e53739-f18f-43c8-80ac-5b444d92069f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1538798167533,
        "parent_id": "7a0afb44-b154-4a41-9f35-1a0d3c0ba719",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Using reflection we can list all fields of a struct."
            ]
          ]
        },
        "type": "text",
        "version": 3,
        "inline_content": [
          {
            "Text": "Using reflection we can list all fields of a struct."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552277097364,
        "id": "dc4528d0-906e-474e-844b-23662800142b",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552277100000,
        "parent_id": "7a0afb44-b154-4a41-9f35-1a0d3c0ba719",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Go"
            ]
          ],
          "title": [
            [
              "// :glot\npackage main\n\nimport (\n\t\"fmt\"\n\t\"reflect\"\n)\n\n// :show start\n\ntype S struct {\n\tFirstName string `my_tag:\"first-name\"`\n\tlastName  string\n\tAge       int `json:\"age\",xml:\"AgeXml`\n}\n\nfunc describeStructSimple(rv reflect.Value) {\n\tstructType := rv.Type()\n\tfor i := 0; i \u003c rv.NumField(); i++ {\n\t\tv := rv.Field(i)\n\t\tstructField := structType.Field(i)\n\t\tname := structField.Name\n\t\ttyp := structField.Type\n\t\ttag := structField.Tag\n\t\tjsonTag := tag.Get(\"json\")\n\t\tisExported := structField.PkgPath == \"\"\n\t\tif isExported {\n\t\t\tfmt.Printf(\"name: '%s',\\ttype: '%s', value: %v,\\ttag: '%s',\\tjson tag: '%s'\\n\", name, typ, v.Interface(), tag, jsonTag)\n\t\t} else {\n\t\t\tfmt.Printf(\"name: '%s',\\ttype: '%s',\\tvalue: not accessible\\n\", name, v.Type().Name())\n\t\t}\n\t}\n}\n\nfunc main() {\n\ts := S{\n\t\tFirstName: \"John\",\n\t\tlastName:  \"Doe\",\n\t\tAge:       27,\n\t}\n\tdescribeStructSimple(reflect.ValueOf(s))\n}\n\n// :show end"
            ]
          ]
        },
        "type": "code",
        "version": 15,
        "code": "// :glot\npackage main\n\nimport (\n\t\"fmt\"\n\t\"reflect\"\n)\n\n// :show start\n\ntype S struct {\n\tFirstName string `my_tag:\"first-name\"`\n\tlastName  string\n\tAge       int `json:\"age\",xml:\"AgeXml`\n}\n\nfunc describeStructSimple(rv reflect.Value) {\n\tstructType := rv.Type()\n\tfor i := 0; i \u003c rv.NumField(); i++ {\n\t\tv := rv.Field(i)\n\t\tstructField := structType.Field(i)\n\t\tname := structField.Name\n\t\ttyp := structField.Type\n\t\ttag := structField.Tag\n\t\tjsonTag := tag.Get(\"json\")\n\t\tisExported := structField.PkgPath == \"\"\n\t\tif isExported {\n\t\t\tfmt.Printf(\"name: '%s',\\ttype: '%s', value: %v,\\ttag: '%s',\\tjson tag: '%s'\\n\", name, typ, v.Interface(), tag, jsonTag)\n\t\t} else {\n\t\t\tfmt.Printf(\"name: '%s',\\ttype: '%s',\\tvalue: not accessible\\n\", name, v.Type().Name())\n\t\t}\n\t}\n}\n\nfunc main() {\n\ts := S{\n\t\tFirstName: \"John\",\n\t\tlastName:  \"Doe\",\n\t\tAge:       27,\n\t}\n\tdescribeStructSimple(reflect.ValueOf(s))\n}\n\n// :show end",
        "code_language": "Go"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156163323,
        "id": "93b6667a-a7b9-4adf-965b-0dcbf3847e49",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532156163323,
        "parent_id": "7a0afb44-b154-4a41-9f35-1a0d3c0ba719",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Using reflection we can only access values ("
            ],
            [
              "v.Interface{}",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") of exported fields."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Using reflection we can only access values ("
          },
          {
            "Text": "v.Interface{}",
            "AttrFlags": 2
          },
          {
            "Text": ") of exported fields."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156163323,
        "id": "e79abd4a-15a5-4e60-8053-ad190e1046b8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532156163323,
        "parent_id": "7a0afb44-b154-4a41-9f35-1a0d3c0ba719",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Exported fields are fields with names starting with upper case ("
            ],
            [
              "FirstName",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "Age",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " are exported, "
            ],
            [
              "lastName",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is not)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Exported fields are fields with names starting with upper case ("
          },
          {
            "Text": "FirstName",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "Age",
            "AttrFlags": 2
          },
          {
            "Text": " are exported, "
          },
          {
            "Text": "lastName",
            "AttrFlags": 2
          },
          {
            "Text": " is not)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156163323,
        "id": "23b0b340-eb3d-4848-8f51-1307cf787dfc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532156163323,
        "parent_id": "7a0afb44-b154-4a41-9f35-1a0d3c0ba719",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Field is exported if "
            ],
            [
              "reflect.StructField.PkgPath == \"\"",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Field is exported if "
          },
          {
            "Text": "reflect.StructField.PkgPath == \"\"",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156163324,
        "id": "0f08c0b0-affa-476c-a114-9db478e3123f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532156163324,
        "parent_id": "7a0afb44-b154-4a41-9f35-1a0d3c0ba719",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "List fields of a struct recursively"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "List fields of a struct recursively"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156163324,
        "id": "36028d52-0216-4b31-ad07-a9166bf7c722",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532156163324,
        "parent_id": "7a0afb44-b154-4a41-9f35-1a0d3c0ba719",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Inspecting a struct is inherently recursive process."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Inspecting a struct is inherently recursive process."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156163325,
        "id": "3d6a095e-1029-4be3-af3c-fe535fbc0d03",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532156163325,
        "parent_id": "7a0afb44-b154-4a41-9f35-1a0d3c0ba719",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You have to chase pointers and recurse into embedded structures."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You have to chase pointers and recurse into embedded structures."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156163325,
        "id": "2d6b2b42-8f59-44a7-baf9-0fd55cf2932a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1538798182180,
        "parent_id": "7a0afb44-b154-4a41-9f35-1a0d3c0ba719",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In real programs inspecting structures using reflections would be recursive."
            ]
          ]
        },
        "type": "text",
        "version": 3,
        "inline_content": [
          {
            "Text": "In real programs inspecting structures using reflections would be recursive."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552277110044,
        "id": "7afcca54-851a-4e9c-a450-6adf9b53f594",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552277100000,
        "parent_id": "7a0afb44-b154-4a41-9f35-1a0d3c0ba719",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Go"
            ]
          ],
          "title": [
            [
              "// :glot\npackage main\n\nimport (\n\t\"fmt\"\n\t\"reflect\"\n\t\"strings\"\n)\n\n// :show start\ntype Inner struct {\n\tN int\n}\n\ntype S struct {\n\tInner\n\tNamedInner Inner\n\tPtrInner   *Inner\n\tunexported int\n\tN          int8\n}\n\nfunc indentStr(level int) string {\n\treturn strings.Repeat(\"  \", level)\n}\n\n// if sf is not nil, this is a field of a struct\nfunc describeStruct(level int, rv reflect.Value, sf *reflect.StructField) {\n\tstructType := rv.Type()\n\tnFields := rv.NumField()\n\ttyp := rv.Type()\n\tif sf == nil {\n\t\tfmt.Printf(\"%sstruct %s, %d field(s), size: %d bytes\\n\", indentStr(level), structType.Name(), nFields, typ.Size())\n\t} else {\n\t\tfmt.Printf(\"%sname: '%s' type: 'struct %s', offset: %d, %d field(s), size: %d bytes, embedded: %v\\n\", indentStr(level), sf.Name, structType.Name(), sf.Offset, nFields, typ.Size(), sf.Anonymous)\n\t}\n\n\tfor i := 0; i \u003c nFields; i++ {\n\t\tfv := rv.Field(i)\n\t\tsf := structType.Field(i)\n\t\tdescribeType(level+1, fv, \u0026sf)\n\t}\n}\n\n// if sf is not nil, this is a field of a struct\nfunc describeType(level int, rv reflect.Value, sf *reflect.StructField) {\n\tswitch rv.Kind() {\n\n\tcase reflect.Int, reflect.Int8:\n\t\t// in real code we would handle more primitive types\n\t\ti := rv.Int()\n\t\ttyp := rv.Type()\n\t\tif sf == nil {\n\t\t\tfmt.Printf(\"%stype: '%s', value: '%d'\\n\", indentStr(level), typ.Name(), i)\n\t\t} else {\n\t\t\tfmt.Printf(\"%s name: '%s' type: '%s', value: '%d', offset: %d, size: %d\\n\", indentStr(level), sf.Name, typ.Name(), i, sf.Offset, typ.Size())\n\t\t}\n\n\tcase reflect.Ptr:\n\t\tfmt.Printf(\"%spointer\\n\", indentStr(level))\n\t\tdescribeType(level+1, rv.Elem(), nil)\n\n\tcase reflect.Struct:\n\t\tdescribeStruct(level, rv, sf)\n\t}\n}\n\nfunc main() {\n\tvar s S\n\tdescribeType(0, reflect.ValueOf(s), nil)\n}\n\n// :show end"
            ]
          ]
        },
        "type": "code",
        "version": 16,
        "code": "// :glot\npackage main\n\nimport (\n\t\"fmt\"\n\t\"reflect\"\n\t\"strings\"\n)\n\n// :show start\ntype Inner struct {\n\tN int\n}\n\ntype S struct {\n\tInner\n\tNamedInner Inner\n\tPtrInner   *Inner\n\tunexported int\n\tN          int8\n}\n\nfunc indentStr(level int) string {\n\treturn strings.Repeat(\"  \", level)\n}\n\n// if sf is not nil, this is a field of a struct\nfunc describeStruct(level int, rv reflect.Value, sf *reflect.StructField) {\n\tstructType := rv.Type()\n\tnFields := rv.NumField()\n\ttyp := rv.Type()\n\tif sf == nil {\n\t\tfmt.Printf(\"%sstruct %s, %d field(s), size: %d bytes\\n\", indentStr(level), structType.Name(), nFields, typ.Size())\n\t} else {\n\t\tfmt.Printf(\"%sname: '%s' type: 'struct %s', offset: %d, %d field(s), size: %d bytes, embedded: %v\\n\", indentStr(level), sf.Name, structType.Name(), sf.Offset, nFields, typ.Size(), sf.Anonymous)\n\t}\n\n\tfor i := 0; i \u003c nFields; i++ {\n\t\tfv := rv.Field(i)\n\t\tsf := structType.Field(i)\n\t\tdescribeType(level+1, fv, \u0026sf)\n\t}\n}\n\n// if sf is not nil, this is a field of a struct\nfunc describeType(level int, rv reflect.Value, sf *reflect.StructField) {\n\tswitch rv.Kind() {\n\n\tcase reflect.Int, reflect.Int8:\n\t\t// in real code we would handle more primitive types\n\t\ti := rv.Int()\n\t\ttyp := rv.Type()\n\t\tif sf == nil {\n\t\t\tfmt.Printf(\"%stype: '%s', value: '%d'\\n\", indentStr(level), typ.Name(), i)\n\t\t} else {\n\t\t\tfmt.Printf(\"%s name: '%s' type: '%s', value: '%d', offset: %d, size: %d\\n\", indentStr(level), sf.Name, typ.Name(), i, sf.Offset, typ.Size())\n\t\t}\n\n\tcase reflect.Ptr:\n\t\tfmt.Printf(\"%spointer\\n\", indentStr(level))\n\t\tdescribeType(level+1, rv.Elem(), nil)\n\n\tcase reflect.Struct:\n\t\tdescribeStruct(level, rv, sf)\n\t}\n}\n\nfunc main() {\n\tvar s S\n\tdescribeType(0, reflect.ValueOf(s), nil)\n}\n\n// :show end",
        "code_language": "Go"
      }
    ],
    "title": "Structs",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}