{
  "ID": "a33c8902-27b8-4da4-9e67-9b6b7563c9ec",
  "Root": {
    "id": "a33c8902-27b8-4da4-9e67-9b6b7563c9ec",
    "alive": true,
    "content": [
      "e4deea03-3036-4f8b-b244-7486c76456f2",
      "1531e660-3a0f-4e06-a7ad-dee833f424fc",
      "14ebc0ab-bd0b-486d-85bf-0d3886d4bb66",
      "d624fcd7-1c37-4693-a5af-05d6064dbc0e",
      "4a4ca236-93a3-45c7-bf87-3d0b3c5896f9",
      "6ac6919f-a078-45d7-a948-e6a873271b83",
      "10b5f9e6-4631-4977-bd9b-163861e543b3",
      "4879761f-66a4-44fe-a05a-4045eef78b77",
      "086c425d-9f1f-4195-9e9c-6ff0d41fa747",
      "5a30f410-2dc3-4a5c-9781-84656027ca5e",
      "032fc847-5821-4da1-b588-d350fb027935",
      "3ff34eb5-63c0-40f9-ab18-4de6cd57bdb4",
      "24366523-3fdb-412b-a51c-cccfc11b383a",
      "720bdae2-7f30-4c7f-920d-e7a50ce369c5",
      "b3f0780b-7bd8-41d5-b35d-db3c8c207123",
      "2c599161-c255-440f-a3d4-f65de6514f93",
      "e8617b28-9ff3-474c-ad31-ca6d5fd8dd70",
      "703a4945-d90b-44ef-af1f-2cd1df79f121"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1532155987219,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1555607460000,
    "parent_id": "f4005538-90d3-4185-ba79-5870807c2615",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Remove elements from slice"
        ]
      ]
    },
    "type": "page",
    "version": 94,
    "content_resolved": [
      {
        "id": "e4deea03-3036-4f8b-b244-7486c76456f2",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532196267662,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532234816042,
        "parent_id": "a33c8902-27b8-4da4-9e67-9b6b7563c9ec",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "$Id: 66"
            ]
          ]
        },
        "type": "text",
        "version": 12,
        "inline_content": [
          {
            "Text": "$Id: 66"
          }
        ]
      },
      {
        "id": "1531e660-3a0f-4e06-a7ad-dee833f424fc",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532196269373,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532234816810,
        "parent_id": "a33c8902-27b8-4da4-9e67-9b6b7563c9ec",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "$SOId: 3420"
            ]
          ]
        },
        "type": "text",
        "version": 12,
        "inline_content": [
          {
            "Text": "$SOId: 3420"
          }
        ]
      },
      {
        "id": "14ebc0ab-bd0b-486d-85bf-0d3886d4bb66",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1555606200000,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1555607460000,
        "parent_id": "a33c8902-27b8-4da4-9e67-9b6b7563c9ec",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We use "
            ],
            [
              "[]int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in our examples but the code works for slices of all types."
            ]
          ]
        },
        "type": "text",
        "version": 141,
        "inline_content": [
          {
            "Text": "We use "
          },
          {
            "Text": "[]int",
            "AttrFlags": 2
          },
          {
            "Text": " in our examples but the code works for slices of all types."
          }
        ]
      },
      {
        "id": "d624fcd7-1c37-4693-a5af-05d6064dbc0e",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1555606200000,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1555606920000,
        "parent_id": "a33c8902-27b8-4da4-9e67-9b6b7563c9ec",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Remove a single element at a given index"
            ]
          ]
        },
        "type": "sub_header",
        "version": 62,
        "inline_content": [
          {
            "Text": "Remove a single element at a given index"
          }
        ]
      },
      {
        "id": "4a4ca236-93a3-45c7-bf87-3d0b3c5896f9",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1555606259110,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1555607460000,
        "parent_id": "a33c8902-27b8-4da4-9e67-9b6b7563c9ec",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Go"
            ]
          ],
          "title": [
            [
              "// :glot, no output\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\t// :show start\n\ts := []int{10, 11, 12, 13}\n\n\ti := 2 // index of 12\n\ts = append(s[:i], s[i+1:]...)\n\n\tfmt.Printf(\"s: %#v\\n\", s)\n\t// :show end\n}"
            ]
          ]
        },
        "type": "code",
        "version": 8,
        "code": "// :glot, no output\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\t// :show start\n\ts := []int{10, 11, 12, 13}\n\n\ti := 2 // index of 12\n\ts = append(s[:i], s[i+1:]...)\n\n\tfmt.Printf(\"s: %#v\\n\", s)\n\t// :show end\n}",
        "code_language": "Go"
      },
      {
        "id": "6ac6919f-a078-45d7-a948-e6a873271b83",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1555606200000,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1555606920000,
        "parent_id": "a33c8902-27b8-4da4-9e67-9b6b7563c9ec",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Remove multiple elements"
            ]
          ]
        },
        "type": "sub_header",
        "version": 45,
        "inline_content": [
          {
            "Text": "Remove multiple elements"
          }
        ]
      },
      {
        "id": "10b5f9e6-4631-4977-bd9b-163861e543b3",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1555606319046,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1555607460000,
        "parent_id": "a33c8902-27b8-4da4-9e67-9b6b7563c9ec",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Go"
            ]
          ],
          "title": [
            [
              "// :glot, no output\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\t// :show start\n\ts := []int{10, 11, 12, 13}\n\n\ti := 1 // index of 11\n\tn := 2 // remove 2 elements\n\n\ts = append(s[:i], s[i+n:]...)\n\n\tfmt.Printf(\"s: %#v\\n\", s)\n\t// :show end\n}"
            ]
          ]
        },
        "type": "code",
        "version": 8,
        "code": "// :glot, no output\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\t// :show start\n\ts := []int{10, 11, 12, 13}\n\n\ti := 1 // index of 11\n\tn := 2 // remove 2 elements\n\n\ts = append(s[:i], s[i+n:]...)\n\n\tfmt.Printf(\"s: %#v\\n\", s)\n\t// :show end\n}",
        "code_language": "Go"
      },
      {
        "id": "4879761f-66a4-44fe-a05a-4045eef78b77",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1555606380000,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1555606980000,
        "parent_id": "a33c8902-27b8-4da4-9e67-9b6b7563c9ec",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Efficiency of removal"
            ]
          ]
        },
        "type": "sub_header",
        "version": 34,
        "inline_content": [
          {
            "Text": "Efficiency of removal"
          }
        ]
      },
      {
        "id": "086c425d-9f1f-4195-9e9c-6ff0d41fa747",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1555606380000,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1555606620000,
        "parent_id": "a33c8902-27b8-4da4-9e67-9b6b7563c9ec",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note on efficiency: Go compiler is smart enough to re-use the space in the original slice, so this method is quite efficient. It doesn't allocate new space and merely copies the elements within the slice. We can verify this:"
            ]
          ]
        },
        "type": "text",
        "version": 304,
        "inline_content": [
          {
            "Text": "Note on efficiency: Go compiler is smart enough to re-use the space in the original slice, so this method is quite efficient. It doesn't allocate new space and merely copies the elements within the slice. We can verify this:"
          }
        ]
      },
      {
        "id": "5a30f410-2dc3-4a5c-9781-84656027ca5e",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1555606639490,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1555606860000,
        "parent_id": "a33c8902-27b8-4da4-9e67-9b6b7563c9ec",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Go"
            ]
          ],
          "title": [
            [
              "// :glot, no output\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\t// :show start\n\ts := []int{10, 11, 12, 13}\n\tfmt.Printf(\"\u0026s[0]: %p, cap(s): %d\\n\", \u0026s[0], cap(s))\n\tfmt.Printf(\"s: %#v\\n\", s)\n\n\ti := 1 // index of 11\n\tn := 2 // remove 2 elements\n\n\ts = append(s[:i], s[i+n:]...)\n\n\tfmt.Print(\"\\nAfter removal:\\n\")\n\tfmt.Printf(\"\u0026s[0]: %p, cap(s): %d\\n\", \u0026s[0], cap(s))\n\tfmt.Printf(\"s: %#v\\n\", s)\n\n\ts = append(s, 1, 2, 3, 4)\n\tfmt.Printf(\"\\nAfter appending beyond remaining capacity:\\n\")\n\tfmt.Printf(\"\u0026s[0]: %p, cap(s): %d\\n\", \u0026s[0], cap(s))\n\tfmt.Printf(\"s: %#v\\n\", s)\n\n\t// :show end\n}"
            ]
          ]
        },
        "type": "code",
        "version": 12,
        "code": "// :glot, no output\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\t// :show start\n\ts := []int{10, 11, 12, 13}\n\tfmt.Printf(\"\u0026s[0]: %p, cap(s): %d\\n\", \u0026s[0], cap(s))\n\tfmt.Printf(\"s: %#v\\n\", s)\n\n\ti := 1 // index of 11\n\tn := 2 // remove 2 elements\n\n\ts = append(s[:i], s[i+n:]...)\n\n\tfmt.Print(\"\\nAfter removal:\\n\")\n\tfmt.Printf(\"\u0026s[0]: %p, cap(s): %d\\n\", \u0026s[0], cap(s))\n\tfmt.Printf(\"s: %#v\\n\", s)\n\n\ts = append(s, 1, 2, 3, 4)\n\tfmt.Printf(\"\\nAfter appending beyond remaining capacity:\\n\")\n\tfmt.Printf(\"\u0026s[0]: %p, cap(s): %d\\n\", \u0026s[0], cap(s))\n\tfmt.Printf(\"s: %#v\\n\", s)\n\n\t// :show end\n}",
        "code_language": "Go"
      },
      {
        "id": "032fc847-5821-4da1-b588-d350fb027935",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1555606560000,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1555606800000,
        "parent_id": "a33c8902-27b8-4da4-9e67-9b6b7563c9ec",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "%p",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " formatting directive prints the physical address in memory of a variable. We can verify that "
            ],
            [
              "s",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " points to the same physical memory and has the same capacity before and after removal, so the underlying array."
            ]
          ]
        },
        "type": "text",
        "version": 390,
        "inline_content": [
          {
            "Text": "%p",
            "AttrFlags": 2
          },
          {
            "Text": " formatting directive prints the physical address in memory of a variable. We can verify that "
          },
          {
            "Text": "s",
            "AttrFlags": 2
          },
          {
            "Text": " points to the same physical memory and has the same capacity before and after removal, so the underlying array."
          }
        ]
      },
      {
        "id": "3ff34eb5-63c0-40f9-ab18-4de6cd57bdb4",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1555606860000,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1555607460000,
        "parent_id": "a33c8902-27b8-4da4-9e67-9b6b7563c9ec",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We can also see that appending 4 elements, which is beyond remaining capacity of 2, caused the array to be re-allocated."
            ]
          ]
        },
        "type": "text",
        "version": 150,
        "inline_content": [
          {
            "Text": "We can also see that appending 4 elements, which is beyond remaining capacity of 2, caused the array to be re-allocated."
          }
        ]
      },
      {
        "id": "24366523-3fdb-412b-a51c-cccfc11b383a",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1555606980000,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1555606980000,
        "parent_id": "a33c8902-27b8-4da4-9e67-9b6b7563c9ec",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Optimized, in-place removal"
            ]
          ]
        },
        "type": "sub_header",
        "version": 34,
        "inline_content": [
          {
            "Text": "Optimized, in-place removal"
          }
        ]
      },
      {
        "id": "720bdae2-7f30-4c7f-920d-e7a50ce369c5",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1555606980000,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1555606980000,
        "parent_id": "a33c8902-27b8-4da4-9e67-9b6b7563c9ec",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If we don't care to preserve the order of elements, we can optimize removal even further:"
            ]
          ]
        },
        "type": "text",
        "version": 131,
        "inline_content": [
          {
            "Text": "If we don't care to preserve the order of elements, we can optimize removal even further:"
          }
        ]
      },
      {
        "id": "b3f0780b-7bd8-41d5-b35d-db3c8c207123",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1555607135971,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1555607100000,
        "parent_id": "a33c8902-27b8-4da4-9e67-9b6b7563c9ec",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Go"
            ]
          ],
          "title": [
            [
              "// :glot, no output\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\t// :show start\n\ts := []int{10, 11, 12, 13}\n\n\ti := 1 // index of 11\n\tlastIdx := len(s) - 1\n\n\ts[i] = s[lastIdx]\n\ts = s[:lastIdx]\n\n\tfmt.Printf(\"s: %#v\\n\", s)\n\t// :show end\n}"
            ]
          ]
        },
        "type": "code",
        "version": 6,
        "code": "// :glot, no output\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\t// :show start\n\ts := []int{10, 11, 12, 13}\n\n\ti := 1 // index of 11\n\tlastIdx := len(s) - 1\n\n\ts[i] = s[lastIdx]\n\ts = s[:lastIdx]\n\n\tfmt.Printf(\"s: %#v\\n\", s)\n\t// :show end\n}",
        "code_language": "Go"
      },
      {
        "id": "2c599161-c255-440f-a3d4-f65de6514f93",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1555607100000,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1555607160000,
        "parent_id": "a33c8902-27b8-4da4-9e67-9b6b7563c9ec",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We overwrite the element we want to remove with the last element in the slice and shrink the slice by 1."
            ]
          ]
        },
        "type": "text",
        "version": 206,
        "inline_content": [
          {
            "Text": "We overwrite the element we want to remove with the last element in the slice and shrink the slice by 1."
          }
        ]
      },
      {
        "id": "e8617b28-9ff3-474c-ad31-ca6d5fd8dd70",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1555607160000,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1555607280000,
        "parent_id": "a33c8902-27b8-4da4-9e67-9b6b7563c9ec",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This copies a single elements compared to copying all elements from "
            ],
            [
              "i",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to end of slice. This doesn't matter in small slices but is much faster if you have slices with thousands of elements"
            ]
          ]
        },
        "type": "text",
        "version": 352,
        "inline_content": [
          {
            "Text": "This copies a single elements compared to copying all elements from "
          },
          {
            "Text": "i",
            "AttrFlags": 2
          },
          {
            "Text": " to end of slice. This doesn't matter in small slices but is much faster if you have slices with thousands of elements"
          }
        ]
      },
      {
        "id": "703a4945-d90b-44ef-af1f-2cd1df79f121",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1555607280000,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1555607280000,
        "parent_id": "a33c8902-27b8-4da4-9e67-9b6b7563c9ec",
        "parent_table": "block",
        "type": "text",
        "version": 4
      }
    ],
    "title": "Remove elements from slice",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "",
      "version": 103
    }
  ],
  "Tables": null
}