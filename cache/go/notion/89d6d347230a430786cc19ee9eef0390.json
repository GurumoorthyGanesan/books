{
  "ID": "89d6d347-230a-4307-86cc-19ee9eef0390",
  "Root": {
    "alive": true,
    "content": [
      "feeff45d-1d3f-42b8-a87f-1f397598ac1b",
      "1ee6e510-5a41-4078-83dc-b16ab52d25a7",
      "c6632532-154f-4511-a350-25694c71252c",
      "d72d4d20-94d8-4c2f-aabf-09f88cbcf13a",
      "348f90d2-180b-4bc2-95a8-3730797f4ad5",
      "5f862105-d375-45d9-9eae-46b1b4521f5f",
      "6bced4ae-5403-4738-9d2d-d644bfbed4fd",
      "3b080a99-d616-413b-b887-bc1df3e1aaab",
      "a2436966-e07c-464d-af18-76d2dbaf9098"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1532155975149,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "89d6d347-230a-4307-86cc-19ee9eef0390",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552255080000,
    "parent_id": "58db8c9a-5650-4dea-b2e6-1f1e0fa4a0a6",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Create array"
        ]
      ]
    },
    "type": "page",
    "version": 40,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532195932958,
        "id": "feeff45d-1d3f-42b8-a87f-1f397598ac1b",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532234675105,
        "parent_id": "89d6d347-230a-4307-86cc-19ee9eef0390",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "$Id: 56"
            ]
          ]
        },
        "type": "text",
        "version": 12,
        "inline_content": [
          {
            "Text": "$Id: 56"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532195934593,
        "id": "1ee6e510-5a41-4078-83dc-b16ab52d25a7",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532234676165,
        "parent_id": "89d6d347-230a-4307-86cc-19ee9eef0390",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "$SOId: 1295"
            ]
          ]
        },
        "type": "text",
        "version": 12,
        "inline_content": [
          {
            "Text": "$SOId: 1295"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532195937855,
        "id": "c6632532-154f-4511-a350-25694c71252c",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532195937855,
        "parent_id": "89d6d347-230a-4307-86cc-19ee9eef0390",
        "parent_table": "block",
        "type": "text",
        "version": 4
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532195936587,
        "id": "d72d4d20-94d8-4c2f-aabf-09f88cbcf13a",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532195937634,
        "parent_id": "89d6d347-230a-4307-86cc-19ee9eef0390",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "An array in Go is an ordered collection of same-type elements."
            ]
          ]
        },
        "type": "text",
        "version": 12,
        "inline_content": [
          {
            "Text": "An array in Go is an ordered collection of same-type elements."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532155975147,
        "id": "348f90d2-180b-4bc2-95a8-3730797f4ad5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532155975147,
        "parent_id": "89d6d347-230a-4307-86cc-19ee9eef0390",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The basic notation to represent arrays is to use "
            ],
            [
              "[]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " with the variable name."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The basic notation to represent arrays is to use "
          },
          {
            "Text": "[]",
            "AttrFlags": 2
          },
          {
            "Text": " with the variable name."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532155975149,
        "id": "5f862105-d375-45d9-9eae-46b1b4521f5f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532155975149,
        "parent_id": "89d6d347-230a-4307-86cc-19ee9eef0390",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Creating a new array looks like "
            ],
            [
              "var array = [size]Type",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", replacing "
            ],
            [
              "size",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " by a number (for example "
            ],
            [
              "42",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to specify it will be a list of 42 elements), and replacing "
            ],
            [
              "Type",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " by the type of the elements the array can contains (for example "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "string",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ")"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Creating a new array looks like "
          },
          {
            "Text": "var array = [size]Type",
            "AttrFlags": 2
          },
          {
            "Text": ", replacing "
          },
          {
            "Text": "size",
            "AttrFlags": 2
          },
          {
            "Text": " by a number (for example "
          },
          {
            "Text": "42",
            "AttrFlags": 2
          },
          {
            "Text": " to specify it will be a list of 42 elements), and replacing "
          },
          {
            "Text": "Type",
            "AttrFlags": 2
          },
          {
            "Text": " by the type of the elements the array can contains (for example "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "string",
            "AttrFlags": 2
          },
          {
            "Text": ")"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532155975149,
        "id": "6bced4ae-5403-4738-9d2d-d644bfbed4fd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532155975149,
        "parent_id": "89d6d347-230a-4307-86cc-19ee9eef0390",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Below is a code example showing different ways to create an array in Go."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Below is a code example showing different ways to create an array in Go."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552255101020,
        "id": "3b080a99-d616-413b-b887-bc1df3e1aaab",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552255080000,
        "parent_id": "89d6d347-230a-4307-86cc-19ee9eef0390",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Go"
            ]
          ],
          "title": [
            [
              "// :glot\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\t// :show start\n\t// Creating arrays of 6 elements of type int,\n\t// and put elements 1, 2, 3, 4, 5 and 6 inside it, in this exact order:\n\tvar array1 = [6]int{1, 2, 3, 4, 5, 6}   // classical way\n\tvar array2 = [6]int{1, 2, 3, 4, 5, 6}   // a less verbose way\n\tvar array3 = [...]int{1, 2, 3, 4, 5, 6} // the compiler will count the array elements by itself\n\n\tfmt.Println(\"array1:\", array1) // \u003e [1 2 3 4 5 6]\n\tfmt.Println(\"array2:\", array2) // \u003e [1 2 3 4 5 6]\n\tfmt.Println(\"array3:\", array3) // \u003e [1 2 3 4 5 6]\n\n\t// Creating arrays with default values inside:\n\tzeros := [8]int{}       // Create a list of 8 int filled with 0\n\tptrs := [8]*int{}       // a list of int pointers, filled with 8 nil references ( \u003cnil\u003e )\n\temptystr := [8]string{} // a list of string filled with 8 times \"\"\n\n\tfmt.Println(\"zeroes:\", zeros)      // \u003e [0 0 0 0 0 0 0 0]\n\tfmt.Println(\"ptrs:\", ptrs)         // \u003e [\u003cnil\u003e \u003cnil\u003e \u003cnil\u003e \u003cnil\u003e \u003cnil\u003e \u003cnil\u003e \u003cnil\u003e \u003cnil\u003e]\n\tfmt.Println(\"emptystr:\", emptystr) // \u003e [       ]\n\t// values are empty strings, separated by spaces,\n\t// so we can just see separating spaces\n\n\t// Arrays are also working with a personalized type\n\ttype Data struct {\n\t\tNumber int\n\t\tText   string\n\t}\n\n\t// Creating an array with 8 'Data' elements\n\t// All the 8 elements will be like {0, \"\"} (Number = 0, Text = \"\")\n\tstructs := [8]Data{}\n\n\tfmt.Println(\"structs:\", structs) // \u003e [{0 } {0 } {0 } {0 } {0 } {0 } {0 } {0 }]\n\t// prints {0 } because Number are 0 and Text are empty; separated by a space\n\t// :show end\n}"
            ]
          ]
        },
        "type": "code",
        "version": 15,
        "code": "// :glot\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\t// :show start\n\t// Creating arrays of 6 elements of type int,\n\t// and put elements 1, 2, 3, 4, 5 and 6 inside it, in this exact order:\n\tvar array1 = [6]int{1, 2, 3, 4, 5, 6}   // classical way\n\tvar array2 = [6]int{1, 2, 3, 4, 5, 6}   // a less verbose way\n\tvar array3 = [...]int{1, 2, 3, 4, 5, 6} // the compiler will count the array elements by itself\n\n\tfmt.Println(\"array1:\", array1) // \u003e [1 2 3 4 5 6]\n\tfmt.Println(\"array2:\", array2) // \u003e [1 2 3 4 5 6]\n\tfmt.Println(\"array3:\", array3) // \u003e [1 2 3 4 5 6]\n\n\t// Creating arrays with default values inside:\n\tzeros := [8]int{}       // Create a list of 8 int filled with 0\n\tptrs := [8]*int{}       // a list of int pointers, filled with 8 nil references ( \u003cnil\u003e )\n\temptystr := [8]string{} // a list of string filled with 8 times \"\"\n\n\tfmt.Println(\"zeroes:\", zeros)      // \u003e [0 0 0 0 0 0 0 0]\n\tfmt.Println(\"ptrs:\", ptrs)         // \u003e [\u003cnil\u003e \u003cnil\u003e \u003cnil\u003e \u003cnil\u003e \u003cnil\u003e \u003cnil\u003e \u003cnil\u003e \u003cnil\u003e]\n\tfmt.Println(\"emptystr:\", emptystr) // \u003e [       ]\n\t// values are empty strings, separated by spaces,\n\t// so we can just see separating spaces\n\n\t// Arrays are also working with a personalized type\n\ttype Data struct {\n\t\tNumber int\n\t\tText   string\n\t}\n\n\t// Creating an array with 8 'Data' elements\n\t// All the 8 elements will be like {0, \"\"} (Number = 0, Text = \"\")\n\tstructs := [8]Data{}\n\n\tfmt.Println(\"structs:\", structs) // \u003e [{0 } {0 } {0 } {0 } {0 } {0 } {0 } {0 }]\n\t// prints {0 } because Number are 0 and Text are empty; separated by a space\n\t// :show end\n}",
        "code_language": "Go"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532155975149,
        "id": "a2436966-e07c-464d-af18-76d2dbaf9098",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1538771978712,
        "parent_id": "89d6d347-230a-4307-86cc-19ee9eef0390",
        "parent_table": "block",
        "type": "text",
        "version": 3
      }
    ],
    "title": "Create array",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}