{
  "ID": "b343b332-2335-4280-b863-0a96bd11561b",
  "Root": {
    "alive": true,
    "content": [
      "2203ffcb-64e3-40b5-a612-d0353f147145",
      "3a0502a9-d909-438e-bf48-f50d61ac48b3",
      "7b6ca1bd-ab05-4de4-8262-83e267b43d40",
      "c2ad95a7-3beb-4761-a7f0-5d69459015db",
      "80e7cb83-63c8-4aeb-b9e2-c488f5ef49e5",
      "ea679a6b-7f16-4d3f-977c-d8e1e97b2d02"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1532156119194,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "b343b332-2335-4280-b863-0a96bd11561b",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552284840000,
    "parent_id": "6744c6d0-d620-448d-be66-e224f64b6f8b",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Hybrid XML parsing: combine pull and unmarshal"
        ]
      ]
    },
    "type": "page",
    "version": 105,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532207974916,
        "id": "2203ffcb-64e3-40b5-a612-d0353f147145",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532207979741,
        "parent_id": "b343b332-2335-4280-b863-0a96bd11561b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "$Id: 330"
            ]
          ]
        },
        "type": "text",
        "version": 12,
        "inline_content": [
          {
            "Text": "$Id: 330"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532207976898,
        "id": "3a0502a9-d909-438e-bf48-f50d61ac48b3",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532207977746,
        "parent_id": "b343b332-2335-4280-b863-0a96bd11561b",
        "parent_table": "block",
        "type": "text",
        "version": 10
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156119193,
        "id": "7b6ca1bd-ab05-4de4-8262-83e267b43d40",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532237186926,
        "parent_id": "b343b332-2335-4280-b863-0a96bd11561b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Pull parsing",
              [
                [
                  "a",
                  "https://www.notion.so/kjkpublic/Pull-streaming-XML-parsing-737850eefd45462e807a2c0dc7b83430"
                ]
              ]
            ],
            [
              " is efficient but tedious."
            ]
          ]
        },
        "type": "text",
        "version": 4,
        "inline_content": [
          {
            "Text": "Pull parsing",
            "Link": "https://www.notion.so/kjkpublic/Pull-streaming-XML-parsing-737850eefd45462e807a2c0dc7b83430"
          },
          {
            "Text": " is efficient but tedious."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156119194,
        "id": "c2ad95a7-3beb-4761-a7f0-5d69459015db",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1538795828684,
        "parent_id": "b343b332-2335-4280-b863-0a96bd11561b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We can combine pull parsing with decoding into a struct."
            ]
          ]
        },
        "type": "text",
        "version": 3,
        "inline_content": [
          {
            "Text": "We can combine pull parsing with decoding into a struct."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552284849664,
        "id": "80e7cb83-63c8-4aeb-b9e2-c488f5ef49e5",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552284840000,
        "parent_id": "b343b332-2335-4280-b863-0a96bd11561b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Go"
            ]
          ],
          "title": [
            [
              "// :glot\npackage main\n\nimport (\n\t\"bytes\"\n\t\"encoding/xml\"\n\t\"fmt\"\n\t\"io\"\n)\n\n// :show start\nvar xmlStr = `\n\u003cpeople\u003e\n\t\u003cperson age=\"34\"\u003e\n\t\t\u003cfirst-name\u003eJohn\u003c/first-name\u003e\n\t\t\u003caddress\u003e\n\t\t\t\u003ccity\u003eSan Francisco\u003c/city\u003e\n\t\t\t\u003cstate\u003eCA\u003c/state\u003e\n\t\t\u003c/address\u003e\n\t\u003c/person\u003e\n\t\u003cperson age=\"23\"\u003e\n\t\t\u003caddress\u003e\n\t\t\t\u003ccity\u003eAustin\u003c/city\u003e\n\t\t\t\u003cstate\u003eTX\u003c/state\u003e\n\t\t\u003c/address\u003e\n\t\u003c/person\u003e\n\u003c/people\u003e`\n\ntype Address struct {\n\tCity  string `xml:\"city\"`\n\tState string `xml:\"state\"`\n}\n\n// :show end\n\nfunc main() {\n\t// :show start\n\tr := bytes.NewBufferString(xmlStr)\n\tdecoder := xml.NewDecoder(r)\n\tfor {\n\t\tt, err := decoder.Token()\n\t\tif err == io.EOF {\n\t\t\t// io.EOF is a successful end\n\t\t\tbreak\n\t\t}\n\t\tif err != nil {\n\t\t\tfmt.Printf(\"decoder.Token() failed with '%s'\\n\", err)\n\t\t\tbreak\n\t\t}\n\n\t\tswitch v := t.(type) {\n\n\t\tcase xml.StartElement:\n\t\t\tif v.Name.Local == \"address\" {\n\t\t\t\tvar address Address\n\t\t\t\terr = decoder.DecodeElement(\u0026address, \u0026v)\n\t\t\t\tif err != nil {\n\t\t\t\t\tfmt.Printf(\"decoder.DecodeElement() failed with '%s'\\n\", err)\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tfmt.Printf(\"%+#v\\n\", address)\n\t\t\t}\n\t\t}\n\t}\n\t// :show end\n}"
            ]
          ]
        },
        "type": "code",
        "version": 15,
        "code": "// :glot\npackage main\n\nimport (\n\t\"bytes\"\n\t\"encoding/xml\"\n\t\"fmt\"\n\t\"io\"\n)\n\n// :show start\nvar xmlStr = `\n\u003cpeople\u003e\n\t\u003cperson age=\"34\"\u003e\n\t\t\u003cfirst-name\u003eJohn\u003c/first-name\u003e\n\t\t\u003caddress\u003e\n\t\t\t\u003ccity\u003eSan Francisco\u003c/city\u003e\n\t\t\t\u003cstate\u003eCA\u003c/state\u003e\n\t\t\u003c/address\u003e\n\t\u003c/person\u003e\n\t\u003cperson age=\"23\"\u003e\n\t\t\u003caddress\u003e\n\t\t\t\u003ccity\u003eAustin\u003c/city\u003e\n\t\t\t\u003cstate\u003eTX\u003c/state\u003e\n\t\t\u003c/address\u003e\n\t\u003c/person\u003e\n\u003c/people\u003e`\n\ntype Address struct {\n\tCity  string `xml:\"city\"`\n\tState string `xml:\"state\"`\n}\n\n// :show end\n\nfunc main() {\n\t// :show start\n\tr := bytes.NewBufferString(xmlStr)\n\tdecoder := xml.NewDecoder(r)\n\tfor {\n\t\tt, err := decoder.Token()\n\t\tif err == io.EOF {\n\t\t\t// io.EOF is a successful end\n\t\t\tbreak\n\t\t}\n\t\tif err != nil {\n\t\t\tfmt.Printf(\"decoder.Token() failed with '%s'\\n\", err)\n\t\t\tbreak\n\t\t}\n\n\t\tswitch v := t.(type) {\n\n\t\tcase xml.StartElement:\n\t\t\tif v.Name.Local == \"address\" {\n\t\t\t\tvar address Address\n\t\t\t\terr = decoder.DecodeElement(\u0026address, \u0026v)\n\t\t\t\tif err != nil {\n\t\t\t\t\tfmt.Printf(\"decoder.DecodeElement() failed with '%s'\\n\", err)\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tfmt.Printf(\"%+#v\\n\", address)\n\t\t\t}\n\t\t}\n\t}\n\t// :show end\n}",
        "code_language": "Go"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532208005939,
        "id": "ea679a6b-7f16-4d3f-977c-d8e1e97b2d02",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532208005939,
        "parent_id": "b343b332-2335-4280-b863-0a96bd11561b",
        "parent_table": "block",
        "type": "text",
        "version": 4
      }
    ],
    "title": "Hybrid XML parsing: combine pull and unmarshal",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 29
    }
  ],
  "Tables": null
}