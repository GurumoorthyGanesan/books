{
  "ID": "59e924ef-82eb-462a-86a3-fe905d13c2ce",
  "Root": {
    "alive": true,
    "content": [
      "c0aaf5cb-192c-4e52-9c64-fbd981bebcb9",
      "5a962b89-c481-4dd2-8891-4805e6b9c0e1",
      "1e4c5b8a-8c50-4145-ba34-1e84810e6de3",
      "c33eb3b3-374e-4f2b-8897-84cd53faae92",
      "c15e4f32-6937-4207-a830-3bd7befd0106",
      "c84a164c-0101-479c-925d-4a9993f85214"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1532156120171,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "59e924ef-82eb-462a-86a3-fe905d13c2ce",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552284840000,
    "parent_id": "6744c6d0-d620-448d-be66-e224f64b6f8b",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Parse XML from file"
        ]
      ]
    },
    "type": "page",
    "version": 44,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532208016287,
        "id": "c0aaf5cb-192c-4e52-9c64-fbd981bebcb9",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532208019820,
        "parent_id": "59e924ef-82eb-462a-86a3-fe905d13c2ce",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "$Id: 331"
            ]
          ]
        },
        "type": "text",
        "version": 12,
        "inline_content": [
          {
            "Text": "$Id: 331"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532208017985,
        "id": "5a962b89-c481-4dd2-8891-4805e6b9c0e1",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532208018681,
        "parent_id": "59e924ef-82eb-462a-86a3-fe905d13c2ce",
        "parent_table": "block",
        "type": "text",
        "version": 10
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156120171,
        "id": "1e4c5b8a-8c50-4145-ba34-1e84810e6de3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1538795849395,
        "parent_id": "59e924ef-82eb-462a-86a3-fe905d13c2ce",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We can decode XML data from a file on disk."
            ]
          ]
        },
        "type": "text",
        "version": 3,
        "inline_content": [
          {
            "Text": "We can decode XML data from a file on disk."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552284868374,
        "id": "c33eb3b3-374e-4f2b-8897-84cd53faae92",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552284840000,
        "parent_id": "59e924ef-82eb-462a-86a3-fe905d13c2ce",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Go"
            ]
          ],
          "title": [
            [
              "// :glot\npackage main\n\nimport (\n\t\"bytes\"\n\t\"encoding/xml\"\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"os\"\n)\n\nvar xmlStr = `\n\u003cpeople\u003e\n\t\u003cperson age=\"34\"\u003e\n\t\t\u003cfirst-name\u003eJohn\u003c/first-name\u003e\n\t\t\u003caddress\u003e\n\t\t\t\u003ccity\u003eSan Francisco\u003c/city\u003e\n\t\t\t\u003cstate\u003eCA\u003c/state\u003e\n\t\t\u003c/address\u003e\n\t\u003c/person\u003e\n\n\t\u003cperson age=\"23\"\u003e\n\t\t\u003cfirst-name\u003eJulia\u003c/first-name\u003e\n\t\u003c/person\u003e\n\u003c/people\u003e`\n\ntype People struct {\n\tPerson []Person `xml:\"person\"`\n}\n\ntype Person struct {\n\tAge       int     `xml:\"age,attr\"`\n\tFirstName string  `xml:\"first-name\"`\n\tAddress   Address `xml:\"address\"`\n}\n\ntype Address struct {\n\tCity  *string `xml:\"city\"`\n\tState string  `xml:\"state\"`\n}\n\n// :show start\nfunc decodeFromReader(r io.Reader) (*People, error) {\n\tvar people People\n\tdecoder := xml.NewDecoder(r)\n\terr := decoder.Decode(\u0026people)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn \u0026people, nil\n}\n\nfunc decodeFromString(s string) (*People, error) {\n\tr := bytes.NewBufferString(s)\n\treturn decodeFromReader(r)\n}\n\nfunc decodeFromFile(path string) (*People, error) {\n\tf, err := os.Open(path)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer f.Close()\n\treturn decodeFromReader(f)\n}\n\n// :show end\n\nfunc main() {\n\tpeople, err := decodeFromString(xmlStr)\n\tif err != nil {\n\t\tlog.Fatalf(\"decodeFromString failed with '%s'\\n\", err)\n\t}\n\tfmt.Printf(\"%#v\\n\\n\", people)\n}"
            ]
          ]
        },
        "type": "code",
        "version": 15,
        "code": "// :glot\npackage main\n\nimport (\n\t\"bytes\"\n\t\"encoding/xml\"\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"os\"\n)\n\nvar xmlStr = `\n\u003cpeople\u003e\n\t\u003cperson age=\"34\"\u003e\n\t\t\u003cfirst-name\u003eJohn\u003c/first-name\u003e\n\t\t\u003caddress\u003e\n\t\t\t\u003ccity\u003eSan Francisco\u003c/city\u003e\n\t\t\t\u003cstate\u003eCA\u003c/state\u003e\n\t\t\u003c/address\u003e\n\t\u003c/person\u003e\n\n\t\u003cperson age=\"23\"\u003e\n\t\t\u003cfirst-name\u003eJulia\u003c/first-name\u003e\n\t\u003c/person\u003e\n\u003c/people\u003e`\n\ntype People struct {\n\tPerson []Person `xml:\"person\"`\n}\n\ntype Person struct {\n\tAge       int     `xml:\"age,attr\"`\n\tFirstName string  `xml:\"first-name\"`\n\tAddress   Address `xml:\"address\"`\n}\n\ntype Address struct {\n\tCity  *string `xml:\"city\"`\n\tState string  `xml:\"state\"`\n}\n\n// :show start\nfunc decodeFromReader(r io.Reader) (*People, error) {\n\tvar people People\n\tdecoder := xml.NewDecoder(r)\n\terr := decoder.Decode(\u0026people)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn \u0026people, nil\n}\n\nfunc decodeFromString(s string) (*People, error) {\n\tr := bytes.NewBufferString(s)\n\treturn decodeFromReader(r)\n}\n\nfunc decodeFromFile(path string) (*People, error) {\n\tf, err := os.Open(path)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer f.Close()\n\treturn decodeFromReader(f)\n}\n\n// :show end\n\nfunc main() {\n\tpeople, err := decodeFromString(xmlStr)\n\tif err != nil {\n\t\tlog.Fatalf(\"decodeFromString failed with '%s'\\n\", err)\n\t}\n\tfmt.Printf(\"%#v\\n\\n\", people)\n}",
        "code_language": "Go"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156120171,
        "id": "c15e4f32-6937-4207-a830-3bd7befd0106",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532156120171,
        "parent_id": "59e924ef-82eb-462a-86a3-fe905d13c2ce",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "By writing a helper function "
            ],
            [
              "decodeFromReader",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", we can easily write wrappers that will work on files, strings or network connections."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "By writing a helper function "
          },
          {
            "Text": "decodeFromReader",
            "AttrFlags": 2
          },
          {
            "Text": ", we can easily write wrappers that will work on files, strings or network connections."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532208030060,
        "id": "c84a164c-0101-479c-925d-4a9993f85214",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532208030060,
        "parent_id": "59e924ef-82eb-462a-86a3-fe905d13c2ce",
        "parent_table": "block",
        "type": "text",
        "version": 4
      }
    ],
    "title": "Parse XML from file",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 29
    }
  ],
  "Tables": null
}