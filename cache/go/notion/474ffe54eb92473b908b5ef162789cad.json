{
  "ID": "474ffe54-eb92-473b-908b-5ef162789cad",
  "Root": {
    "alive": true,
    "content": [
      "68541e7e-bfa3-46eb-9997-3621bc89ae4c",
      "e242e6b0-5cb5-4853-b61c-72ea4956b86f",
      "2efd4b97-d407-4113-8716-dbe8a9416c60",
      "80c490dd-c17e-47a6-9994-4f6891116407",
      "eb6df0c9-c6a7-4aec-b557-49a3f0e39318",
      "98480fa8-a0a7-4d0a-8088-5a208a12768d",
      "9c301fa1-4161-4aa0-a6fd-7bccc9cb56a0",
      "49c16358-ed10-4c91-82a3-80ec710a1276",
      "104583a5-5bcf-493b-bb44-4256c616c670",
      "562b8349-d5bc-4e36-ae4f-e7267adbe871",
      "2e2ce789-1336-42d3-8dc0-4dde39ba1f19",
      "a0e44abe-ddff-4a0c-b9ef-679f2aa97350",
      "579dd2bc-ba5e-48cc-8d70-179de9866309",
      "ab7f9d8c-28e9-4e91-998b-692c33f233c8",
      "f8e314b4-bf75-4965-9c6d-587df18e0926",
      "9deff6f4-7bc7-490d-8454-45a835de5406",
      "5508c521-7985-46a1-a04f-852684235244",
      "b846da71-86b5-4093-9a8e-c4433e7a1ce5",
      "9f0cc24f-eac9-4a18-b280-77130c4bca11",
      "7c940fb9-e0e0-45cb-b65a-002529f77574"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1532156260263,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "474ffe54-eb92-473b-908b-5ef162789cad",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552287180000,
    "parent_id": "301bb328-156d-4206-94eb-f5489d2cb744",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Encryption and decryption with AES GCM"
        ]
      ]
    },
    "type": "page",
    "version": 185,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532214690977,
        "id": "68541e7e-bfa3-46eb-9997-3621bc89ae4c",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1539246336959,
        "parent_id": "474ffe54-eb92-473b-908b-5ef162789cad",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "$Id: 307"
            ]
          ]
        },
        "type": "text",
        "version": 14,
        "inline_content": [
          {
            "Text": "$Id: 307"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532214693737,
        "id": "e242e6b0-5cb5-4853-b61c-72ea4956b86f",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532214713554,
        "parent_id": "474ffe54-eb92-473b-908b-5ef162789cad",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "$SOId: 30884"
            ]
          ]
        },
        "type": "text",
        "version": 12,
        "inline_content": [
          {
            "Text": "$SOId: 30884"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1539240066028,
        "id": "2efd4b97-d407-4113-8716-dbe8a9416c60",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1539240066028,
        "parent_id": "474ffe54-eb92-473b-908b-5ef162789cad",
        "parent_table": "block",
        "type": "text",
        "version": 4
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1539240002633,
        "id": "80c490dd-c17e-47a6-9994-4f6891116407",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1539240888418,
        "parent_id": "474ffe54-eb92-473b-908b-5ef162789cad",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You have a file and a password and you want to encrypt the file with a password."
            ]
          ]
        },
        "type": "text",
        "version": 464,
        "inline_content": [
          {
            "Text": "You have a file and a password and you want to encrypt the file with a password."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1539240002273,
        "id": "eb6df0c9-c6a7-4aec-b557-49a3f0e39318",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1539240036502,
        "parent_id": "474ffe54-eb92-473b-908b-5ef162789cad",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "There are many encryption algorithms."
            ]
          ]
        },
        "type": "text",
        "version": 92,
        "inline_content": [
          {
            "Text": "There are many encryption algorithms."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1539240039005,
        "id": "98480fa8-a0a7-4d0a-8088-5a208a12768d",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1539242929312,
        "parent_id": "474ffe54-eb92-473b-908b-5ef162789cad",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This chapter describes how to use symmetric algorithm AES (Advanced Encryption Standard) in GCM mode."
            ]
          ]
        },
        "type": "text",
        "version": 282,
        "inline_content": [
          {
            "Text": "This chapter describes how to use symmetric algorithm AES (Advanced Encryption Standard) in GCM mode."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1539240183295,
        "id": "9c301fa1-4161-4aa0-a6fd-7bccc9cb56a0",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1539242791752,
        "parent_id": "474ffe54-eb92-473b-908b-5ef162789cad",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "GCM mode provides both encryption and authentication. "
            ]
          ]
        },
        "type": "text",
        "version": 439,
        "inline_content": [
          {
            "Text": "GCM mode provides both encryption and authentication. "
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1539242791752,
        "id": "49c16358-ed10-4c91-82a3-80ec710a1276",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1539242917349,
        "parent_id": "474ffe54-eb92-473b-908b-5ef162789cad",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Without authentication an attacker could change encrypted bytes which would result in successful decryption but corrupted data. By adding authentication, GCM mode detects that encrypted data were corrupted."
            ]
          ]
        },
        "type": "text",
        "version": 860,
        "inline_content": [
          {
            "Text": "Without authentication an attacker could change encrypted bytes which would result in successful decryption but corrupted data. By adding authentication, GCM mode detects that encrypted data were corrupted."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1539240211890,
        "id": "104583a5-5bcf-493b-bb44-4256c616c670",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1539242939209,
        "parent_id": "474ffe54-eb92-473b-908b-5ef162789cad",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Symmetric means that we can use the same password to both encrypt and decrypt the data."
            ]
          ]
        },
        "type": "text",
        "version": 242,
        "inline_content": [
          {
            "Text": "Symmetric means that we can use the same password to both encrypt and decrypt the data."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1539240237414,
        "id": "562b8349-d5bc-4e36-ae4f-e7267adbe871",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1539240506070,
        "parent_id": "474ffe54-eb92-473b-908b-5ef162789cad",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "AES uses 16 bytes key as a password. Humans prefer passwords of arbitrary length."
            ]
          ]
        },
        "type": "text",
        "version": 272,
        "inline_content": [
          {
            "Text": "AES uses 16 bytes key as a password. Humans prefer passwords of arbitrary length."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1539240506537,
        "id": "2e2ce789-1336-42d3-8dc0-4dde39ba1f19",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1539852608067,
        "parent_id": "474ffe54-eb92-473b-908b-5ef162789cad",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To support humans we need to derive AES key from a human password. This is harder than it looks so you should use one of the methods that are well researched and considered cryptographically secure. One of those methods is scrypt key derivation function."
            ]
          ]
        },
        "type": "text",
        "version": 856,
        "inline_content": [
          {
            "Text": "To support humans we need to derive AES key from a human password. This is harder than it looks so you should use one of the methods that are well researched and considered cryptographically secure. One of those methods is scrypt key derivation function."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552287189720,
        "id": "a0e44abe-ddff-4a0c-b9ef-679f2aa97350",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552287180000,
        "parent_id": "474ffe54-eb92-473b-908b-5ef162789cad",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Go"
            ]
          ],
          "title": [
            [
              "package main\n\nimport (\n\t\"bytes\"\n\t\"crypto/aes\"\n\t\"crypto/cipher\"\n\t\"crypto/rand\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"log\"\n\n\t\"golang.org/x/crypto/scrypt\"\n)\n\nfunc aesKeyFromPassword(password string) ([]byte, error) {\n\t// DO NOT use this salt value; generate your own random salt. 8 bytes is\n\t// a good length. Keep the salt secret.\n\tsecretSalt := []byte{0xbc, 0x1e, 0x07, 0xd7, 0xb2, 0xa2, 0x5e, 0x2c}\n\treturn scrypt.Key([]byte(password), secretSalt, 32768, 8, 1, 32)\n}\n\nfunc aesGcmEncrypt(unencrypted []byte, password string) ([]byte, error) {\n\tkey, err := aesKeyFromPassword(password)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tblock, err := aes.NewCipher(key)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tgcm, err := cipher.NewGCM(block)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// generate a random nonce (makes encryption stronger)\n\tnonce := make([]byte, gcm.NonceSize())\n\tif _, err := io.ReadFull(rand.Reader, nonce); err != nil {\n\t\treturn nil, err\n\t}\n\n\tencrypted := gcm.Seal(nil, nonce, unencrypted, nil)\n\t// we need nonce for decryption so we put it at the beginning\n\t// of encrypted text\n\treturn append(nonce, encrypted...), nil\n}\n\nfunc aesGcmDecrypt(encrypted []byte, password string) ([]byte, error) {\n\tkey, err := aesKeyFromPassword(password)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tblock, err := aes.NewCipher(key)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tgcm, err := cipher.NewGCM(block)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif len(encrypted) \u003c gcm.NonceSize() {\n\t\treturn nil, errors.New(\"Invalid data\")\n\t}\n\n\t// extract random nonce we added to the beginning of the file\n\tnonce := encrypted[:gcm.NonceSize()]\n\tencrypted = encrypted[gcm.NonceSize():]\n\n\treturn gcm.Open(nil, nonce, encrypted, nil)\n}\n\nfunc main() {\n\tpassword := \"my password\"\n\td, err := ioutil.ReadFile(\"main.go\")\n\tif err != nil {\n\t\tlog.Fatalf(\"ioutil.ReadFile() failed with %s\\n\", err)\n\t}\n\tencrypted, err := aesGcmEncrypt(d, password)\n\tif err != nil {\n\t\tlog.Fatalf(\"aesGcmEncrypt() failed with %s\\n\", err)\n\t}\n\tdecrypted, err := aesGcmDecrypt(encrypted, password)\n\tif err != nil {\n\t\tlog.Fatalf(\"aesGcmDecrypt() failed with %s\\n\", err)\n\t}\n\tif !bytes.Equal(d, decrypted) {\n\t\tlog.Fatalf(\"decryption created data different than original\\n\")\n\t} else {\n\t\tfmt.Printf(\"Encryption in decryption worked!\\n\")\n\t}\n}"
            ]
          ]
        },
        "type": "code",
        "version": 6,
        "code": "package main\n\nimport (\n\t\"bytes\"\n\t\"crypto/aes\"\n\t\"crypto/cipher\"\n\t\"crypto/rand\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"log\"\n\n\t\"golang.org/x/crypto/scrypt\"\n)\n\nfunc aesKeyFromPassword(password string) ([]byte, error) {\n\t// DO NOT use this salt value; generate your own random salt. 8 bytes is\n\t// a good length. Keep the salt secret.\n\tsecretSalt := []byte{0xbc, 0x1e, 0x07, 0xd7, 0xb2, 0xa2, 0x5e, 0x2c}\n\treturn scrypt.Key([]byte(password), secretSalt, 32768, 8, 1, 32)\n}\n\nfunc aesGcmEncrypt(unencrypted []byte, password string) ([]byte, error) {\n\tkey, err := aesKeyFromPassword(password)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tblock, err := aes.NewCipher(key)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tgcm, err := cipher.NewGCM(block)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// generate a random nonce (makes encryption stronger)\n\tnonce := make([]byte, gcm.NonceSize())\n\tif _, err := io.ReadFull(rand.Reader, nonce); err != nil {\n\t\treturn nil, err\n\t}\n\n\tencrypted := gcm.Seal(nil, nonce, unencrypted, nil)\n\t// we need nonce for decryption so we put it at the beginning\n\t// of encrypted text\n\treturn append(nonce, encrypted...), nil\n}\n\nfunc aesGcmDecrypt(encrypted []byte, password string) ([]byte, error) {\n\tkey, err := aesKeyFromPassword(password)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tblock, err := aes.NewCipher(key)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tgcm, err := cipher.NewGCM(block)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif len(encrypted) \u003c gcm.NonceSize() {\n\t\treturn nil, errors.New(\"Invalid data\")\n\t}\n\n\t// extract random nonce we added to the beginning of the file\n\tnonce := encrypted[:gcm.NonceSize()]\n\tencrypted = encrypted[gcm.NonceSize():]\n\n\treturn gcm.Open(nil, nonce, encrypted, nil)\n}\n\nfunc main() {\n\tpassword := \"my password\"\n\td, err := ioutil.ReadFile(\"main.go\")\n\tif err != nil {\n\t\tlog.Fatalf(\"ioutil.ReadFile() failed with %s\\n\", err)\n\t}\n\tencrypted, err := aesGcmEncrypt(d, password)\n\tif err != nil {\n\t\tlog.Fatalf(\"aesGcmEncrypt() failed with %s\\n\", err)\n\t}\n\tdecrypted, err := aesGcmDecrypt(encrypted, password)\n\tif err != nil {\n\t\tlog.Fatalf(\"aesGcmDecrypt() failed with %s\\n\", err)\n\t}\n\tif !bytes.Equal(d, decrypted) {\n\t\tlog.Fatalf(\"decryption created data different than original\\n\")\n\t} else {\n\t\tfmt.Printf(\"Encryption in decryption worked!\\n\")\n\t}\n}",
        "code_language": "Go"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1539241065624,
        "id": "579dd2bc-ba5e-48cc-8d70-179de9866309",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1539245564202,
        "parent_id": "474ffe54-eb92-473b-908b-5ef162789cad",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Encryption is a tricky subject and it's easy to make a mistake that would make it easy for the attacker to break encryption and decrypt the file."
            ]
          ]
        },
        "type": "text",
        "version": 504,
        "inline_content": [
          {
            "Text": "Encryption is a tricky subject and it's easy to make a mistake that would make it easy for the attacker to break encryption and decrypt the file."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1539245564460,
        "id": "ab7f9d8c-28e9-4e91-998b-692c33f233c8",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1539245621789,
        "parent_id": "474ffe54-eb92-473b-908b-5ef162789cad",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It's really important to convert a human-readable password to a random encryption key."
            ]
          ]
        },
        "type": "text",
        "version": 348,
        "inline_content": [
          {
            "Text": "It's really important to convert a human-readable password to a random encryption key."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1539245621986,
        "id": "f8e314b4-bf75-4965-9c6d-587df18e0926",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1539245702152,
        "parent_id": "474ffe54-eb92-473b-908b-5ef162789cad",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Humans tend to use only a subset of possible bytes for passwords which makes them much easier to break."
            ]
          ]
        },
        "type": "text",
        "version": 312,
        "inline_content": [
          {
            "Text": "Humans tend to use only a subset of possible bytes for passwords which makes them much easier to break."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1539245702648,
        "id": "9deff6f4-7bc7-490d-8454-45a835de5406",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1539245821690,
        "parent_id": "474ffe54-eb92-473b-908b-5ef162789cad",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Scrypt is considered a good algorithm for generating encryption key from a human password. As you can see it also uses a salt value which you should keep secret."
            ]
          ]
        },
        "type": "text",
        "version": 548,
        "inline_content": [
          {
            "Text": "Scrypt is considered a good algorithm for generating encryption key from a human password. As you can see it also uses a salt value which you should keep secret."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1539245823157,
        "id": "5508c521-7985-46a1-a04f-852684235244",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1539246097815,
        "parent_id": "474ffe54-eb92-473b-908b-5ef162789cad",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "There are several variants of AES algorithms. We chose GCM because it combines authentication with encryption. Authentication detects modification of encrypted data."
            ]
          ]
        },
        "type": "text",
        "version": 672,
        "inline_content": [
          {
            "Text": "There are several variants of AES algorithms. We chose GCM because it combines authentication with encryption. Authentication detects modification of encrypted data."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1539246098390,
        "id": "b846da71-86b5-4093-9a8e-c4433e7a1ce5",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1539246228882,
        "parent_id": "474ffe54-eb92-473b-908b-5ef162789cad",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To make encryption stronger GCM modes requires additional random bytes. We chose to generate unique nonce for each file and store it at the beginning of encrypted data (the nonce doesn't have to be secret)."
            ]
          ]
        },
        "type": "text",
        "version": 613,
        "inline_content": [
          {
            "Text": "To make encryption stronger GCM modes requires additional random bytes. We chose to generate unique nonce for each file and store it at the beginning of encrypted data (the nonce doesn't have to be secret)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1539246229325,
        "id": "9f0cc24f-eac9-4a18-b280-77130c4bca11",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1539246329312,
        "parent_id": "474ffe54-eb92-473b-908b-5ef162789cad",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "An alternative would be to generate only one nonce and use it for all files."
            ]
          ]
        },
        "type": "text",
        "version": 484,
        "inline_content": [
          {
            "Text": "An alternative would be to generate only one nonce and use it for all files."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1539246329596,
        "id": "7c940fb9-e0e0-45cb-b65a-002529f77574",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1539246329616,
        "parent_id": "474ffe54-eb92-473b-908b-5ef162789cad",
        "parent_table": "block",
        "type": "text",
        "version": 6
      }
    ],
    "title": "Encryption and decryption with AES GCM",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 29
    }
  ],
  "Tables": null
}