{
  "ID": "ce096b4e-b8ff-44d2-b6f0-cd8904174175",
  "Root": {
    "alive": true,
    "content": [
      "52784c50-24ec-4b02-b574-251eb8df3dbc",
      "85bfd786-f190-4a98-b2ce-9a989284b861",
      "f5c24812-0001-4dc8-9915-6b0e15471b20",
      "8f4b86d6-9465-4953-af9e-d1df3fc01658",
      "8194485f-8ee4-4fc5-a1a6-bff05a9fb17d",
      "86d6587e-d098-47f8-8128-fc4f68457eef",
      "cb8354ca-6432-48cf-8021-099552c0c060",
      "f90acc99-e0fa-4f7b-b558-d323f4d2b823",
      "17519b3f-353c-40b6-bb25-7d50e2d7e779",
      "89b2340d-b6b6-49d0-9b1c-d7289530959c",
      "e95853c2-6e34-4e40-b0a0-96c4622c70f0"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1532155971237,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "ce096b4e-b8ff-44d2-b6f0-cd8904174175",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552256400000,
    "parent_id": "1ef07599-dd82-47f4-93ba-6dcba8ae7dbf",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Basics of pointers"
        ]
      ]
    },
    "type": "page",
    "version": 62,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532195829362,
        "id": "52784c50-24ec-4b02-b574-251eb8df3dbc",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532234520698,
        "parent_id": "ce096b4e-b8ff-44d2-b6f0-cd8904174175",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "$Id: 52"
            ]
          ]
        },
        "type": "text",
        "version": 12,
        "inline_content": [
          {
            "Text": "$Id: 52"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532195831836,
        "id": "85bfd786-f190-4a98-b2ce-9a989284b861",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532234521899,
        "parent_id": "ce096b4e-b8ff-44d2-b6f0-cd8904174175",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "$SOId: 4054"
            ]
          ]
        },
        "type": "text",
        "version": 12,
        "inline_content": [
          {
            "Text": "$SOId: 4054"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532195835285,
        "id": "f5c24812-0001-4dc8-9915-6b0e15471b20",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532195835285,
        "parent_id": "ce096b4e-b8ff-44d2-b6f0-cd8904174175",
        "parent_table": "block",
        "type": "text",
        "version": 4
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532195833537,
        "id": "8f4b86d6-9465-4953-af9e-d1df3fc01658",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532195835040,
        "parent_id": "ce096b4e-b8ff-44d2-b6f0-cd8904174175",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A pointer to a variable is the address of that variable in memory."
            ]
          ]
        },
        "type": "text",
        "version": 12,
        "inline_content": [
          {
            "Text": "A pointer to a variable is the address of that variable in memory."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532155971234,
        "id": "8194485f-8ee4-4fc5-a1a6-bff05a9fb17d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532155971234,
        "parent_id": "ce096b4e-b8ff-44d2-b6f0-cd8904174175",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Unlike C++, Go doesn’t allow pointer arithmetic i.e. you can’t add or substract from pointers."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Unlike C++, Go doesn’t allow pointer arithmetic i.e. you can’t add or substract from pointers."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532155971236,
        "id": "86d6587e-d098-47f8-8128-fc4f68457eef",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1538807138055,
        "parent_id": "ce096b4e-b8ff-44d2-b6f0-cd8904174175",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Zero value",
              [
                [
                  "a",
                  "https://www.notion.so/kjkpublic/Zero-values-707edb6542fa4fc7a8d16639ee6a9746"
                ]
              ]
            ],
            [
              " of a pointer is "
            ],
            [
              "nil",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 14,
        "inline_content": [
          {
            "Text": "Zero value",
            "Link": "https://www.notion.so/kjkpublic/Zero-values-707edb6542fa4fc7a8d16639ee6a9746"
          },
          {
            "Text": " of a pointer is "
          },
          {
            "Text": "nil",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552254807324,
        "id": "cb8354ca-6432-48cf-8021-099552c0c060",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552254780000,
        "parent_id": "ce096b4e-b8ff-44d2-b6f0-cd8904174175",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Go"
            ]
          ],
          "title": [
            [
              "// :glot, no output\npackage main\n\n// :show start\n\n// We'll show how pointers work in contrast to values with\n// 2 functions: `zeroval` and `zeroptr`. `zeroval` has an\n// `int` parameter, so arguments will be passed to it by\n// value. `zeroval` will get a copy of `ival` distinct\n// from the one in the calling function.\nfunc zeroval(ival int) {\n\tival = 0\n}\n\n// `zeroptr` in contrast has an `*int` parameter, meaning\n// that it takes an `int` pointer. The `*iptr` code in the\n// function body then _dereferences_ the pointer from its\n// memory address to the current value at that address.\n// Assigning a value to a dereferenced pointer changes the\n// value at the referenced address.\nfunc zeroptr(iptr *int) {\n\t*iptr = 0\n}\n\n// :show end\n\nfunc main() {\n}"
            ]
          ]
        },
        "type": "code",
        "version": 13,
        "code": "// :glot, no output\npackage main\n\n// :show start\n\n// We'll show how pointers work in contrast to values with\n// 2 functions: `zeroval` and `zeroptr`. `zeroval` has an\n// `int` parameter, so arguments will be passed to it by\n// value. `zeroval` will get a copy of `ival` distinct\n// from the one in the calling function.\nfunc zeroval(ival int) {\n\tival = 0\n}\n\n// `zeroptr` in contrast has an `*int` parameter, meaning\n// that it takes an `int` pointer. The `*iptr` code in the\n// function body then _dereferences_ the pointer from its\n// memory address to the current value at that address.\n// Assigning a value to a dereferenced pointer changes the\n// value at the referenced address.\nfunc zeroptr(iptr *int) {\n\t*iptr = 0\n}\n\n// :show end\n\nfunc main() {\n}",
        "code_language": "Go"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532155971237,
        "id": "f90acc99-e0fa-4f7b-b558-d323f4d2b823",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532155971237,
        "parent_id": "ce096b4e-b8ff-44d2-b6f0-cd8904174175",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Once these functions are defined, you can do the following:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Once these functions are defined, you can do the following:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552254846185,
        "id": "17519b3f-353c-40b6-bb25-7d50e2d7e779",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552256400000,
        "parent_id": "ce096b4e-b8ff-44d2-b6f0-cd8904174175",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Go"
            ]
          ],
          "title": [
            [
              "// :glot\npackage main\n\nimport \"fmt\"\n\n// We'll show how pointers work in contrast to values with\n// 2 functions: `zeroval` and `zeroptr`. `zeroval` has an\n// `int` parameter, so arguments will be passed to it by\n// value. `zeroval` will get a copy of `ival` distinct\n// from the one in the calling function.\nfunc zeroval(ival int) {\n\tival = 0\n}\n\n// `zeroptr` in contrast has an `*int` parameter, meaning\n// that it takes an `int` pointer. The `*iptr` code in the\n// function body then _dereferences_ the pointer from its\n// memory address to the current value at that address.\n// Assigning a value to a dereferenced pointer changes the\n// value at the referenced address.\nfunc zeroptr(iptr *int) {\n\t*iptr = 0\n}\n\nfunc main() {\n\t// :show start\n\ti := 1\n\tfmt.Println(\"initial:\", i)\n\n\tzeroval(i)\n\tfmt.Println(\"zeroval:\", i)\n\t// `i` is still equal to 1 because `zeroval` edited\n\t// a \"copy\" of `i`, not the original.\n\n\t// The `\u0026i` syntax gives the memory address of `i`,\n\t// i.e. a pointer to `i`. When calling `zeroptr`,\n\t// it will edit the \"original\" `i`.\n\tzeroptr(\u0026i)\n\tfmt.Println(\"zeroptr:\", i)\n\n\t// Pointers can be printed too.\n\tfmt.Println(\"pointer:\", \u0026i)\n\t// :show end\n}"
            ]
          ]
        },
        "type": "code",
        "version": 29,
        "code": "// :glot\npackage main\n\nimport \"fmt\"\n\n// We'll show how pointers work in contrast to values with\n// 2 functions: `zeroval` and `zeroptr`. `zeroval` has an\n// `int` parameter, so arguments will be passed to it by\n// value. `zeroval` will get a copy of `ival` distinct\n// from the one in the calling function.\nfunc zeroval(ival int) {\n\tival = 0\n}\n\n// `zeroptr` in contrast has an `*int` parameter, meaning\n// that it takes an `int` pointer. The `*iptr` code in the\n// function body then _dereferences_ the pointer from its\n// memory address to the current value at that address.\n// Assigning a value to a dereferenced pointer changes the\n// value at the referenced address.\nfunc zeroptr(iptr *int) {\n\t*iptr = 0\n}\n\nfunc main() {\n\t// :show start\n\ti := 1\n\tfmt.Println(\"initial:\", i)\n\n\tzeroval(i)\n\tfmt.Println(\"zeroval:\", i)\n\t// `i` is still equal to 1 because `zeroval` edited\n\t// a \"copy\" of `i`, not the original.\n\n\t// The `\u0026i` syntax gives the memory address of `i`,\n\t// i.e. a pointer to `i`. When calling `zeroptr`,\n\t// it will edit the \"original\" `i`.\n\tzeroptr(\u0026i)\n\tfmt.Println(\"zeroptr:\", i)\n\n\t// Pointers can be printed too.\n\tfmt.Println(\"pointer:\", \u0026i)\n\t// :show end\n}",
        "code_language": "Go"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532155971237,
        "id": "89b2340d-b6b6-49d0-9b1c-d7289530959c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1538771662402,
        "parent_id": "ce096b4e-b8ff-44d2-b6f0-cd8904174175",
        "parent_table": "block",
        "type": "text",
        "version": 3
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1538771658203,
        "id": "e95853c2-6e34-4e40-b0a0-96c4622c70f0",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1538771658203,
        "parent_id": "ce096b4e-b8ff-44d2-b6f0-cd8904174175",
        "parent_table": "block",
        "type": "text",
        "version": 4
      }
    ],
    "title": "Basics of pointers",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}