{
  "ID": "d13d2160-5657-42f8-bc6a-1002f675c1e6",
  "Root": {
    "alive": true,
    "content": [
      "0423fb16-3a21-4318-b3f8-63d7c2c1aed6",
      "a95cc681-e98f-4ae6-ae70-bc783053f1cb",
      "5df3ff1d-9ee1-4558-bc33-2ea72a90ba12",
      "1bc0fa18-a2df-4c78-b37b-fb90237a7bb1",
      "7396876c-0968-4ac3-a17d-e27453b88640"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1532156136163,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "d13d2160-5657-42f8-bc6a-1002f675c1e6",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1553321460000,
    "parent_id": "710edf91-b0f1-4662-9abb-fcd96aba4d80",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "GET with URL parameters and a JSON response"
        ]
      ]
    },
    "type": "page",
    "version": 43,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532208681566,
        "id": "0423fb16-3a21-4318-b3f8-63d7c2c1aed6",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532208684474,
        "parent_id": "d13d2160-5657-42f8-bc6a-1002f675c1e6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "$Id: 203"
            ]
          ]
        },
        "type": "text",
        "version": 12,
        "inline_content": [
          {
            "Text": "$Id: 203"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532208684474,
        "id": "a95cc681-e98f-4ae6-ae70-bc783053f1cb",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532208686386,
        "parent_id": "d13d2160-5657-42f8-bc6a-1002f675c1e6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "$SOId: 4644"
            ]
          ]
        },
        "type": "text",
        "version": 12,
        "inline_content": [
          {
            "Text": "$SOId: 4644"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532208687641,
        "id": "5df3ff1d-9ee1-4558-bc33-2ea72a90ba12",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532208687641,
        "parent_id": "d13d2160-5657-42f8-bc6a-1002f675c1e6",
        "parent_table": "block",
        "type": "text",
        "version": 4
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532208686386,
        "id": "1bc0fa18-a2df-4c78-b37b-fb90237a7bb1",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1538797233153,
        "parent_id": "d13d2160-5657-42f8-bc6a-1002f675c1e6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This example shows how to properly encode URL parameters for GET request and parse JSON output returned by Stack Exchange API returning information about Stack Overflow posts."
            ]
          ]
        },
        "type": "text",
        "version": 14,
        "inline_content": [
          {
            "Text": "This example shows how to properly encode URL parameters for GET request and parse JSON output returned by Stack Exchange API returning information about Stack Overflow posts."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1553321457381,
        "id": "7396876c-0968-4ac3-a17d-e27453b88640",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1553321400000,
        "parent_id": "d13d2160-5657-42f8-bc6a-1002f675c1e6",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Go"
            ]
          ],
          "title": [
            [
              "// no playground\npackage main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"time\"\n)\n\n// :show start\ntype postItem struct {\n\tScore int    `json:\"score\"`\n\tLink  string `json:\"link\"`\n}\n\ntype postsType struct {\n\tItems []postItem `json:\"items\"`\n}\n\n// :show end\nfunc main() {\n\t// :show start\n\tvalues := url.Values{\n\t\t\"order\": []string{\"desc\"},\n\t\t\"sort\":  []string{\"activity\"},\n\t\t\"site\":  []string{\"stackoverflow\"},\n\t}\n\n\t// URL parameters can also be programmatically set\n\tvalues.Set(\"page\", \"1\")\n\tvalues.Set(\"pagesize\", \"10\")\n\n\turi := \"https://api.stackexchange.com/2.2/posts?\"\n\tclient := \u0026http.Client{\n\t\tTimeout: 15 * time.Second,\n\t}\n\tresp, err := client.Get(uri + values.Encode())\n\tif err != nil {\n\t\tlog.Fatalf(\"http.Get() failed with '%s'\\n\", err)\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode != http.StatusOK {\n\t\td, _ := ioutil.ReadAll(resp.Body)\n\t\tlog.Fatalf(\"Request was '%s' (%d) and not OK (200). Body:\\n%s\\n\", resp.Status, resp.StatusCode, string(d))\n\t}\n\n\tdec := json.NewDecoder(resp.Body)\n\tvar p postsType\n\terr = dec.Decode(\u0026p)\n\tif err != nil {\n\t\tlog.Fatalf(\"dec.Decode() failed with '%s'\\n\", err)\n\t}\n\n\tfmt.Println(\"Top 10 most recently active StackOverflow posts:\")\n\tfmt.Println(\"Score\", \"Link\")\n\tfor _, post := range p.Items {\n\t\tfmt.Println(post.Score, post.Link)\n\t}\n\t// :show end\n}"
            ]
          ]
        },
        "type": "code",
        "version": 6,
        "code": "// no playground\npackage main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"time\"\n)\n\n// :show start\ntype postItem struct {\n\tScore int    `json:\"score\"`\n\tLink  string `json:\"link\"`\n}\n\ntype postsType struct {\n\tItems []postItem `json:\"items\"`\n}\n\n// :show end\nfunc main() {\n\t// :show start\n\tvalues := url.Values{\n\t\t\"order\": []string{\"desc\"},\n\t\t\"sort\":  []string{\"activity\"},\n\t\t\"site\":  []string{\"stackoverflow\"},\n\t}\n\n\t// URL parameters can also be programmatically set\n\tvalues.Set(\"page\", \"1\")\n\tvalues.Set(\"pagesize\", \"10\")\n\n\turi := \"https://api.stackexchange.com/2.2/posts?\"\n\tclient := \u0026http.Client{\n\t\tTimeout: 15 * time.Second,\n\t}\n\tresp, err := client.Get(uri + values.Encode())\n\tif err != nil {\n\t\tlog.Fatalf(\"http.Get() failed with '%s'\\n\", err)\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode != http.StatusOK {\n\t\td, _ := ioutil.ReadAll(resp.Body)\n\t\tlog.Fatalf(\"Request was '%s' (%d) and not OK (200). Body:\\n%s\\n\", resp.Status, resp.StatusCode, string(d))\n\t}\n\n\tdec := json.NewDecoder(resp.Body)\n\tvar p postsType\n\terr = dec.Decode(\u0026p)\n\tif err != nil {\n\t\tlog.Fatalf(\"dec.Decode() failed with '%s'\\n\", err)\n\t}\n\n\tfmt.Println(\"Top 10 most recently active StackOverflow posts:\")\n\tfmt.Println(\"Score\", \"Link\")\n\tfor _, post := range p.Items {\n\t\tfmt.Println(post.Score, post.Link)\n\t}\n\t// :show end\n}",
        "code_language": "Go"
      }
    ],
    "title": "GET with URL parameters and a JSON response",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "",
      "version": 43
    }
  ],
  "Tables": null
}