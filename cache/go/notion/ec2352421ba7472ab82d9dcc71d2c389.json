{
  "ID": "ec235242-1ba7-472a-b82d-9dcc71d2c389",
  "Root": {
    "alive": true,
    "content": [
      "7eae3bd3-579d-4c80-89f4-0a15f5a4412e",
      "451389d0-15e8-4242-a149-a5d3bdba6271",
      "38fb53a1-92bd-4d24-bda4-7187e2113fcb",
      "68256516-af2d-4a44-b9f0-e5334f6e9040",
      "eeba89f1-4578-4663-a85b-775fd281fd1e",
      "cff30ab5-33a5-4fd2-93cc-b27c8f342305",
      "b78ffaf3-f879-43e8-a7c7-b33424aff389",
      "bdef65fe-4253-469c-b570-52050b18c40a",
      "700e0985-941f-4b81-b92e-9bfa0be60801"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1532156185143,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "ec235242-1ba7-472a-b82d-9dcc71d2c389",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552287000000,
    "parent_id": "2cab1ed2-b7a4-4584-b56b-0d3ca9b80185",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "sync.Pool for better performance"
        ]
      ]
    },
    "type": "page",
    "version": 116,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552286940000,
        "id": "7eae3bd3-579d-4c80-89f4-0a15f5a4412e",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552286940000,
        "parent_id": "ec235242-1ba7-472a-b82d-9dcc71d2c389",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "#note improve the description"
            ]
          ]
        },
        "type": "text",
        "version": 33,
        "inline_content": [
          {
            "Text": "#note improve the description"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532211317713,
        "id": "451389d0-15e8-4242-a149-a5d3bdba6271",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532211319584,
        "parent_id": "ec235242-1ba7-472a-b82d-9dcc71d2c389",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "$Id: 241"
            ]
          ]
        },
        "type": "text",
        "version": 12,
        "inline_content": [
          {
            "Text": "$Id: 241"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532211319584,
        "id": "38fb53a1-92bd-4d24-bda4-7187e2113fcb",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532211321471,
        "parent_id": "ec235242-1ba7-472a-b82d-9dcc71d2c389",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "$SOId: 4647"
            ]
          ]
        },
        "type": "text",
        "version": 12,
        "inline_content": [
          {
            "Text": "$SOId: 4647"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552286280000,
        "id": "68256516-af2d-4a44-b9f0-e5334f6e9040",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552286400000,
        "parent_id": "ec235242-1ba7-472a-b82d-9dcc71d2c389",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Allocating and freeing objects with high frequency can be relatively expensive."
            ]
          ]
        },
        "type": "text",
        "version": 248,
        "inline_content": [
          {
            "Text": "Allocating and freeing objects with high frequency can be relatively expensive."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552286460000,
        "id": "eeba89f1-4578-4663-a85b-775fd281fd1e",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552286580000,
        "parent_id": "ec235242-1ba7-472a-b82d-9dcc71d2c389",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A common technique for improving performance is re-using memory."
            ]
          ]
        },
        "type": "text",
        "version": 96,
        "inline_content": [
          {
            "Text": "A common technique for improving performance is re-using memory."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552286580000,
        "id": "cff30ab5-33a5-4fd2-93cc-b27c8f342305",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552286640000,
        "parent_id": "ec235242-1ba7-472a-b82d-9dcc71d2c389",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "sync.Pool",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is a thread-safe cache for re-using allocations."
            ]
          ]
        },
        "type": "text",
        "version": 137,
        "inline_content": [
          {
            "Text": "sync.Pool",
            "AttrFlags": 2
          },
          {
            "Text": " is a thread-safe cache for re-using allocations."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532211376350,
        "id": "b78ffaf3-f879-43e8-a7c7-b33424aff389",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552286640000,
        "parent_id": "ec235242-1ba7-472a-b82d-9dcc71d2c389",
        "parent_table": "block",
        "type": "text",
        "version": 16
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156186238,
        "id": "bdef65fe-4253-469c-b570-52050b18c40a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552286700000,
        "parent_id": "ec235242-1ba7-472a-b82d-9dcc71d2c389",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Go"
            ]
          ],
          "title": [
            [
              "// :glot\npackage main\n\nimport (\n    \"bytes\"\n    \"fmt\"\n    \"sync\"\n)\n\nvar pool = sync.Pool{\n    // New creates an object when the pool has nothing available to return.\n    // New must return an interface{} to make it flexible. You have to cast\n    // your type after getting it.\n    New: func() interface{} {\n        // Pools often contain things like *bytes.Buffer, which are\n        // temporary and re-usable.\n        return \u0026bytes.Buffer{}\n    },\n}\n\nfunc main() {\n    // When getting from a Pool, you need to cast\n    s := pool.Get().(*bytes.Buffer)\n    // We write to the object\n    s.Write([]byte(\"dirty\"))\n    // Then put it back\n    pool.Put(s)\n\n    // Pools can return dirty results\n\n    // Get 'another' buffer\n    s = pool.Get().(*bytes.Buffer)\n    // Write to it\n    s.Write([]byte(\"append\"))\n    // At this point, if GC ran, this buffer *might* exist already, in\n    // which case it will contain the bytes of the string \"dirtyappend\"\n    fmt.Println(s)\n    // So use pools wisely, and clean up after yourself\n    s.Reset()\n    pool.Put(s)\n\n    // When you clean up, your buffer should be empty\n    s = pool.Get().(*bytes.Buffer)\n    // Defer your Puts to make sure you don't leak!\n    defer pool.Put(s)\n    s.Write([]byte(\"reset!\"))\n    // This prints \"reset!\", and not \"dirtyappendreset!\"\n    fmt.Println(s)\n}"
            ]
          ]
        },
        "type": "code",
        "version": 19,
        "code": "// :glot\npackage main\n\nimport (\n    \"bytes\"\n    \"fmt\"\n    \"sync\"\n)\n\nvar pool = sync.Pool{\n    // New creates an object when the pool has nothing available to return.\n    // New must return an interface{} to make it flexible. You have to cast\n    // your type after getting it.\n    New: func() interface{} {\n        // Pools often contain things like *bytes.Buffer, which are\n        // temporary and re-usable.\n        return \u0026bytes.Buffer{}\n    },\n}\n\nfunc main() {\n    // When getting from a Pool, you need to cast\n    s := pool.Get().(*bytes.Buffer)\n    // We write to the object\n    s.Write([]byte(\"dirty\"))\n    // Then put it back\n    pool.Put(s)\n\n    // Pools can return dirty results\n\n    // Get 'another' buffer\n    s = pool.Get().(*bytes.Buffer)\n    // Write to it\n    s.Write([]byte(\"append\"))\n    // At this point, if GC ran, this buffer *might* exist already, in\n    // which case it will contain the bytes of the string \"dirtyappend\"\n    fmt.Println(s)\n    // So use pools wisely, and clean up after yourself\n    s.Reset()\n    pool.Put(s)\n\n    // When you clean up, your buffer should be empty\n    s = pool.Get().(*bytes.Buffer)\n    // Defer your Puts to make sure you don't leak!\n    defer pool.Put(s)\n    s.Write([]byte(\"reset!\"))\n    // This prints \"reset!\", and not \"dirtyappendreset!\"\n    fmt.Println(s)\n}",
        "code_language": "Go"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552286700000,
        "id": "700e0985-941f-4b81-b92e-9bfa0be60801",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552286940000,
        "parent_id": "ec235242-1ba7-472a-b82d-9dcc71d2c389",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As with all performance optimization techniques you should not over-use "
            ],
            [
              "sync.Pool",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 139,
        "inline_content": [
          {
            "Text": "As with all performance optimization techniques you should not over-use "
          },
          {
            "Text": "sync.Pool",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      }
    ],
    "title": "sync.Pool for better performance",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}