{
  "ID": "b6e9fbb3-165c-4bcb-907e-469d86783aab",
  "Root": {
    "alive": true,
    "content": [
      "f955b41e-0caf-4530-bb5a-8ade01c826eb",
      "13d0fd25-bd5d-4e5e-be61-c3998e9bb449",
      "124e9bcd-85a0-46f4-b94e-714b3d5217f5",
      "06bbb609-f846-419b-8dab-08988bfb1ca6",
      "c536f89b-4cf4-408e-a74c-dd61b74a057f",
      "c75627d4-f25b-492f-9fb3-3475043a6b02",
      "01fce964-40d1-4ae1-8da4-ec9ad529cea3",
      "494fa481-958d-4a83-af44-1b57baa0e387",
      "d686fdfc-3462-423a-bf41-8cc4cc5e54e8",
      "b4baf706-b911-4c31-8c71-0b7fc6be9c76",
      "7f0138ad-418a-4d33-b3c3-7d218f21711c",
      "496a1c02-d739-4c0c-826d-6f1f1834e5ca",
      "b23c5322-632e-4800-8382-05c2c7d3dc3e",
      "a155d6a5-d5c4-41f9-b70e-d6e0594c693c",
      "dff1dc5f-0810-4d1e-a018-27f0fe263561",
      "792f8e9c-3efe-4275-9722-c41137766448",
      "ffa9c0d2-a7af-4b3b-8537-a9c9a8c0adf3",
      "5cd33d20-a024-42db-835c-566558303bb2",
      "c6b6c5b2-03f1-4c49-9884-5d3e05d7b180",
      "e9f64972-2430-4302-a241-02a6207fc764",
      "c89cb770-81ba-4a4b-a215-70faedeb8df3",
      "80652fa5-940e-42c2-90e2-72b1976d17d5",
      "85c990a3-9032-49a4-bbae-90b0f68da092",
      "423e219a-9c1d-401a-8001-721c1416e8b9"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1532156106101,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "b6e9fbb3-165c-4bcb-907e-469d86783aab",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552284420000,
    "parent_id": "2cab1ed2-b7a4-4584-b56b-0d3ca9b80185",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "hex, base64 encoding"
        ]
      ]
    },
    "type": "page",
    "version": 69,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532207363334,
        "id": "f955b41e-0caf-4530-bb5a-8ade01c826eb",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532207365550,
        "parent_id": "b6e9fbb3-165c-4bcb-907e-469d86783aab",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "$Id: 179"
            ]
          ]
        },
        "type": "text",
        "version": 12,
        "inline_content": [
          {
            "Text": "$Id: 179"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532207365550,
        "id": "13d0fd25-bd5d-4e5e-be61-c3998e9bb449",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532207369160,
        "parent_id": "b6e9fbb3-165c-4bcb-907e-469d86783aab",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "$SOId: 4492"
            ]
          ]
        },
        "type": "text",
        "version": 16,
        "inline_content": [
          {
            "Text": "$SOId: 4492"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532207369160,
        "id": "124e9bcd-85a0-46f4-b94e-714b3d5217f5",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532207370407,
        "parent_id": "b6e9fbb3-165c-4bcb-907e-469d86783aab",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Sometimes you need to encode bytes into a text."
            ]
          ]
        },
        "type": "text",
        "version": 12,
        "inline_content": [
          {
            "Text": "Sometimes you need to encode bytes into a text."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156106101,
        "id": "06bbb609-f846-419b-8dab-08988bfb1ca6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552284360000,
        "parent_id": "b6e9fbb3-165c-4bcb-907e-469d86783aab",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Most popular encodings are hex, where each byte is represented by 2 characters and base64 where each 3 bytes are encoded as 4 characters."
            ]
          ]
        },
        "type": "text",
        "version": 3,
        "inline_content": [
          {
            "Text": "Most popular encodings are hex, where each byte is represented by 2 characters and base64 where each 3 bytes are encoded as 4 characters."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532207396997,
        "id": "c536f89b-4cf4-408e-a74c-dd61b74a057f",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552284360000,
        "parent_id": "b6e9fbb3-165c-4bcb-907e-469d86783aab",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Hex encode and decode"
            ]
          ]
        },
        "type": "sub_header",
        "version": 29,
        "inline_content": [
          {
            "Text": "Hex encode and decode"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156107234,
        "id": "c75627d4-f25b-492f-9fb3-3475043a6b02",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552284360000,
        "parent_id": "b6e9fbb3-165c-4bcb-907e-469d86783aab",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We can encode a "
            ],
            [
              "[]byte",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " into a "
            ],
            [
              "string",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and decode from "
            ],
            [
              "string",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " into "
            ],
            [
              "[]byte",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 5,
        "inline_content": [
          {
            "Text": "We can encode a "
          },
          {
            "Text": "[]byte",
            "AttrFlags": 2
          },
          {
            "Text": " into a "
          },
          {
            "Text": "string",
            "AttrFlags": 2
          },
          {
            "Text": " and decode from "
          },
          {
            "Text": "string",
            "AttrFlags": 2
          },
          {
            "Text": " into "
          },
          {
            "Text": "[]byte",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552284282980,
        "id": "01fce964-40d1-4ae1-8da4-ec9ad529cea3",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552284360000,
        "parent_id": "b6e9fbb3-165c-4bcb-907e-469d86783aab",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Go"
            ]
          ],
          "title": [
            [
              "// :glot\npackage main\n\nimport (\n\t\"bytes\"\n\t\"encoding/hex\"\n\t\"fmt\"\n\t\"log\"\n)\n\nfunc main() {\n\t// :show start\n\td := []byte{0x01, 0xff, 0x3a, 0xcd}\n\ts := hex.EncodeToString(d)\n\tfmt.Printf(\"Hex: %s\\n\", s)\n\n\td2, err := hex.DecodeString(s)\n\tif err != nil {\n\t\tlog.Fatalf(\"hex.DecodeString() failed with '%s'\\n\", err)\n\t}\n\tif !bytes.Equal(d, d2) {\n\t\tlog.Fatalf(\"decoded version is different than original\")\n\t}\n\t// :show end\n}"
            ]
          ]
        },
        "type": "code",
        "version": 17,
        "code": "// :glot\npackage main\n\nimport (\n\t\"bytes\"\n\t\"encoding/hex\"\n\t\"fmt\"\n\t\"log\"\n)\n\nfunc main() {\n\t// :show start\n\td := []byte{0x01, 0xff, 0x3a, 0xcd}\n\ts := hex.EncodeToString(d)\n\tfmt.Printf(\"Hex: %s\\n\", s)\n\n\td2, err := hex.DecodeString(s)\n\tif err != nil {\n\t\tlog.Fatalf(\"hex.DecodeString() failed with '%s'\\n\", err)\n\t}\n\tif !bytes.Equal(d, d2) {\n\t\tlog.Fatalf(\"decoded version is different than original\")\n\t}\n\t// :show end\n}",
        "code_language": "Go"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156107235,
        "id": "494fa481-958d-4a83-af44-1b57baa0e387",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552284360000,
        "parent_id": "b6e9fbb3-165c-4bcb-907e-469d86783aab",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Hex encoding with "
            ],
            [
              "fmt.Sprintf",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "sub_header",
        "version": 3,
        "inline_content": [
          {
            "Text": "Hex encoding with "
          },
          {
            "Text": "fmt.Sprintf",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156107235,
        "id": "d686fdfc-3462-423a-bf41-8cc4cc5e54e8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552284360000,
        "parent_id": "b6e9fbb3-165c-4bcb-907e-469d86783aab",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We can encode to string using "
            ],
            [
              "fmt.Sprintf",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "%x",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " directive. Similarly, we can decode using "
            ],
            [
              "fmt.Sscanf",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "%x",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 3,
        "inline_content": [
          {
            "Text": "We can encode to string using "
          },
          {
            "Text": "fmt.Sprintf",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "%x",
            "AttrFlags": 2
          },
          {
            "Text": " directive. Similarly, we can decode using "
          },
          {
            "Text": "fmt.Sscanf",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "%x",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156107235,
        "id": "b4baf706-b911-4c31-8c71-0b7fc6be9c76",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552284360000,
        "parent_id": "b6e9fbb3-165c-4bcb-907e-469d86783aab",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Directive "
            ],
            [
              "%x",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " supports integers in addtion to "
            ],
            [
              "[]byte",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 5,
        "inline_content": [
          {
            "Text": "Directive "
          },
          {
            "Text": "%x",
            "AttrFlags": 2
          },
          {
            "Text": " supports integers in addtion to "
          },
          {
            "Text": "[]byte",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552284294656,
        "id": "7f0138ad-418a-4d33-b3c3-7d218f21711c",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552284360000,
        "parent_id": "b6e9fbb3-165c-4bcb-907e-469d86783aab",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Go"
            ]
          ],
          "title": [
            [
              "// :glot\npackage main\n\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\t\"log\"\n)\n\nfunc main() {\n\t// :show start\n\td := []byte{0x01, 0xff, 0x3a, 0xcd}\n\ts := fmt.Sprintf(\"%x\", d)\n\tfmt.Printf(\"Hex: %s\\n\", s)\n\n\tvar decoded []byte\n\t_, err := fmt.Sscanf(s, \"%x\", \u0026decoded)\n\tif err != nil {\n\t\tlog.Fatalf(\"fmt.Sscanf() failed with '%s'\\n\", err)\n\t}\n\tif !bytes.Equal(d, decoded) {\n\t\tlog.Fatalf(\"decoded version is different than original\")\n\t}\n\n\tn := 3824\n\tfmt.Printf(\"%d in hex is 0x%x\\n\", n, n)\n\t// :show end\n}"
            ]
          ]
        },
        "type": "code",
        "version": 17,
        "code": "// :glot\npackage main\n\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\t\"log\"\n)\n\nfunc main() {\n\t// :show start\n\td := []byte{0x01, 0xff, 0x3a, 0xcd}\n\ts := fmt.Sprintf(\"%x\", d)\n\tfmt.Printf(\"Hex: %s\\n\", s)\n\n\tvar decoded []byte\n\t_, err := fmt.Sscanf(s, \"%x\", \u0026decoded)\n\tif err != nil {\n\t\tlog.Fatalf(\"fmt.Sscanf() failed with '%s'\\n\", err)\n\t}\n\tif !bytes.Equal(d, decoded) {\n\t\tlog.Fatalf(\"decoded version is different than original\")\n\t}\n\n\tn := 3824\n\tfmt.Printf(\"%d in hex is 0x%x\\n\", n, n)\n\t// :show end\n}",
        "code_language": "Go"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156107236,
        "id": "496a1c02-d739-4c0c-826d-6f1f1834e5ca",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552284360000,
        "parent_id": "b6e9fbb3-165c-4bcb-907e-469d86783aab",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Hex encoding to writer, decoding from reader"
            ]
          ]
        },
        "type": "sub_header",
        "version": 3,
        "inline_content": [
          {
            "Text": "Hex encoding to writer, decoding from reader"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156107236,
        "id": "b23c5322-632e-4800-8382-05c2c7d3dc3e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552284360000,
        "parent_id": "b6e9fbb3-165c-4bcb-907e-469d86783aab",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For encoding and decoding larger values in streaming mode, we can encode to a "
            ],
            [
              "io.Writer",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and decode from "
            ],
            [
              "io.Reader",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 5,
        "inline_content": [
          {
            "Text": "For encoding and decoding larger values in streaming mode, we can encode to a "
          },
          {
            "Text": "io.Writer",
            "AttrFlags": 2
          },
          {
            "Text": " and decode from "
          },
          {
            "Text": "io.Reader",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552284307117,
        "id": "a155d6a5-d5c4-41f9-b70e-d6e0594c693c",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552284360000,
        "parent_id": "b6e9fbb3-165c-4bcb-907e-469d86783aab",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Go"
            ]
          ],
          "title": [
            [
              "// :glot\npackage main\n\nimport (\n\t\"bytes\"\n\t\"encoding/hex\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n)\n\nfunc main() {\n\t// :show start\n\td := []byte{0x01, 0xff, 0x3a, 0xcd}\n\n\twriter := \u0026bytes.Buffer{}\n\thexWriter := hex.NewEncoder(writer)\n\n\t_, err := hexWriter.Write(d)\n\tif err != nil {\n\t\tlog.Fatalf(\"hexWriter.Write() failed with '%s'\\n\", err)\n\t}\n\n\tencoded := writer.Bytes()\n\tfmt.Printf(\"Hex: %s\\n\", string(encoded))\n\n\treader := bytes.NewBuffer(encoded)\n\thexReader := hex.NewDecoder(reader)\n\n\tdecoded, err := ioutil.ReadAll(hexReader)\n\tif err != nil {\n\t\tfmt.Printf(\"ioutil.ReadAll() failed with '%s'\\n\", err)\n\t}\n\n\tif !bytes.Equal(d, decoded) {\n\t\tlog.Fatalf(\"decoded version is different than original\")\n\t}\n\t// :show end\n}"
            ]
          ]
        },
        "type": "code",
        "version": 19,
        "code": "// :glot\npackage main\n\nimport (\n\t\"bytes\"\n\t\"encoding/hex\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n)\n\nfunc main() {\n\t// :show start\n\td := []byte{0x01, 0xff, 0x3a, 0xcd}\n\n\twriter := \u0026bytes.Buffer{}\n\thexWriter := hex.NewEncoder(writer)\n\n\t_, err := hexWriter.Write(d)\n\tif err != nil {\n\t\tlog.Fatalf(\"hexWriter.Write() failed with '%s'\\n\", err)\n\t}\n\n\tencoded := writer.Bytes()\n\tfmt.Printf(\"Hex: %s\\n\", string(encoded))\n\n\treader := bytes.NewBuffer(encoded)\n\thexReader := hex.NewDecoder(reader)\n\n\tdecoded, err := ioutil.ReadAll(hexReader)\n\tif err != nil {\n\t\tfmt.Printf(\"ioutil.ReadAll() failed with '%s'\\n\", err)\n\t}\n\n\tif !bytes.Equal(d, decoded) {\n\t\tlog.Fatalf(\"decoded version is different than original\")\n\t}\n\t// :show end\n}",
        "code_language": "Go"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532207432643,
        "id": "dff1dc5f-0810-4d1e-a018-27f0fe263561",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552284360000,
        "parent_id": "b6e9fbb3-165c-4bcb-907e-469d86783aab",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Base64 encode and decode"
            ]
          ]
        },
        "type": "sub_header",
        "version": 29,
        "inline_content": [
          {
            "Text": "Base64 encode and decode"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156108141,
        "id": "792f8e9c-3efe-4275-9722-c41137766448",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552284360000,
        "parent_id": "b6e9fbb3-165c-4bcb-907e-469d86783aab",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We can encode a "
            ],
            [
              "[]byte",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " into a "
            ],
            [
              "string",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and decode from "
            ],
            [
              "string",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " into "
            ],
            [
              "[]byte",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 5,
        "inline_content": [
          {
            "Text": "We can encode a "
          },
          {
            "Text": "[]byte",
            "AttrFlags": 2
          },
          {
            "Text": " into a "
          },
          {
            "Text": "string",
            "AttrFlags": 2
          },
          {
            "Text": " and decode from "
          },
          {
            "Text": "string",
            "AttrFlags": 2
          },
          {
            "Text": " into "
          },
          {
            "Text": "[]byte",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552284325661,
        "id": "ffa9c0d2-a7af-4b3b-8537-a9c9a8c0adf3",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552284360000,
        "parent_id": "b6e9fbb3-165c-4bcb-907e-469d86783aab",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Go"
            ]
          ],
          "title": [
            [
              "// :glot\npackage main\n\nimport (\n\t\"bytes\"\n\t\"encoding/base64\"\n\t\"fmt\"\n\t\"log\"\n)\n\nfunc main() {\n\t// :show start\n\td := []byte{0x01, 0xff, 0x3a, 0xcd}\n\ts := base64.StdEncoding.EncodeToString(d)\n\tfmt.Printf(\"base64: %s\\n\", s)\n\n\td2, err := base64.StdEncoding.DecodeString(s)\n\tif err != nil {\n\t\tlog.Fatalf(\"hex.DecodeString() failed with '%s'\\n\", err)\n\t}\n\tif !bytes.Equal(d, d2) {\n\t\tlog.Fatalf(\"decoded version is different than original\")\n\t}\n\t// :show end\n}"
            ]
          ]
        },
        "type": "code",
        "version": 17,
        "code": "// :glot\npackage main\n\nimport (\n\t\"bytes\"\n\t\"encoding/base64\"\n\t\"fmt\"\n\t\"log\"\n)\n\nfunc main() {\n\t// :show start\n\td := []byte{0x01, 0xff, 0x3a, 0xcd}\n\ts := base64.StdEncoding.EncodeToString(d)\n\tfmt.Printf(\"base64: %s\\n\", s)\n\n\td2, err := base64.StdEncoding.DecodeString(s)\n\tif err != nil {\n\t\tlog.Fatalf(\"hex.DecodeString() failed with '%s'\\n\", err)\n\t}\n\tif !bytes.Equal(d, d2) {\n\t\tlog.Fatalf(\"decoded version is different than original\")\n\t}\n\t// :show end\n}",
        "code_language": "Go"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156108142,
        "id": "5cd33d20-a024-42db-835c-566558303bb2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552284360000,
        "parent_id": "b6e9fbb3-165c-4bcb-907e-469d86783aab",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "URL-safe base64"
            ]
          ]
        },
        "type": "sub_header",
        "version": 3,
        "inline_content": [
          {
            "Text": "URL-safe base64"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156108142,
        "id": "c6b6c5b2-03f1-4c49-9884-5d3e05d7b180",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552284360000,
        "parent_id": "b6e9fbb3-165c-4bcb-907e-469d86783aab",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Original base64 encoding unfortunately might produce characters that are not valid in urls."
            ]
          ]
        },
        "type": "text",
        "version": 3,
        "inline_content": [
          {
            "Text": "Original base64 encoding unfortunately might produce characters that are not valid in urls."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156108142,
        "id": "e9f64972-2430-4302-a241-02a6207fc764",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552284360000,
        "parent_id": "b6e9fbb3-165c-4bcb-907e-469d86783aab",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Given that urls are important those days we have a variant of base64 encoding that doesn’t have that flaw:"
            ]
          ]
        },
        "type": "text",
        "version": 5,
        "inline_content": [
          {
            "Text": "Given that urls are important those days we have a variant of base64 encoding that doesn’t have that flaw:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552284340254,
        "id": "c89cb770-81ba-4a4b-a215-70faedeb8df3",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552284360000,
        "parent_id": "b6e9fbb3-165c-4bcb-907e-469d86783aab",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Go"
            ]
          ],
          "title": [
            [
              "// :glot\npackage main\n\nimport (\n\t\"bytes\"\n\t\"encoding/base64\"\n\t\"fmt\"\n\t\"log\"\n)\n\nfunc main() {\n\t// :show start\n\td := []byte{0x01, 0xff, 0x3a, 0xcd}\n\ts := base64.URLEncoding.EncodeToString(d)\n\tfmt.Printf(\"base64: %s\\n\", s)\n\n\td2, err := base64.URLEncoding.DecodeString(s)\n\tif err != nil {\n\t\tlog.Fatalf(\"hex.DecodeString() failed with '%s'\\n\", err)\n\t}\n\tif !bytes.Equal(d, d2) {\n\t\tlog.Fatalf(\"decoded version is different than original\")\n\t}\n\t// :show end\n}"
            ]
          ]
        },
        "type": "code",
        "version": 19,
        "code": "// :glot\npackage main\n\nimport (\n\t\"bytes\"\n\t\"encoding/base64\"\n\t\"fmt\"\n\t\"log\"\n)\n\nfunc main() {\n\t// :show start\n\td := []byte{0x01, 0xff, 0x3a, 0xcd}\n\ts := base64.URLEncoding.EncodeToString(d)\n\tfmt.Printf(\"base64: %s\\n\", s)\n\n\td2, err := base64.URLEncoding.DecodeString(s)\n\tif err != nil {\n\t\tlog.Fatalf(\"hex.DecodeString() failed with '%s'\\n\", err)\n\t}\n\tif !bytes.Equal(d, d2) {\n\t\tlog.Fatalf(\"decoded version is different than original\")\n\t}\n\t// :show end\n}",
        "code_language": "Go"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156108143,
        "id": "80652fa5-940e-42c2-90e2-72b1976d17d5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552284360000,
        "parent_id": "b6e9fbb3-165c-4bcb-907e-469d86783aab",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Base64 encoding to writer, decoding from reader"
            ]
          ]
        },
        "type": "sub_header",
        "version": 3,
        "inline_content": [
          {
            "Text": "Base64 encoding to writer, decoding from reader"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156108143,
        "id": "85c990a3-9032-49a4-bbae-90b0f68da092",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552284360000,
        "parent_id": "b6e9fbb3-165c-4bcb-907e-469d86783aab",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For encoding and decoding larger values in streaming mode, we can encode to an "
            ],
            [
              "io.Writer",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and decode from "
            ],
            [
              "io.Reader",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 5,
        "inline_content": [
          {
            "Text": "For encoding and decoding larger values in streaming mode, we can encode to an "
          },
          {
            "Text": "io.Writer",
            "AttrFlags": 2
          },
          {
            "Text": " and decode from "
          },
          {
            "Text": "io.Reader",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552284354158,
        "id": "423e219a-9c1d-401a-8001-721c1416e8b9",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552284360000,
        "parent_id": "b6e9fbb3-165c-4bcb-907e-469d86783aab",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Go"
            ]
          ],
          "title": [
            [
              "// :glot\npackage main\n\nimport (\n\t\"bytes\"\n\t\"encoding/base64\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n)\n\nfunc main() {\n\t// :show start\n\td := []byte{0x01, 0xff, 0x3a, 0xcd}\n\n\twriter := \u0026bytes.Buffer{}\n\tbase64Writer := base64.NewEncoder(base64.StdEncoding, writer)\n\n\t_, err := base64Writer.Write(d)\n\tif err != nil {\n\t\tlog.Fatalf(\"base64Writer.Write() failed with '%s'\\n\", err)\n\t}\n\terr = base64Writer.Close()\n\tif err != nil {\n\t\tlog.Fatalf(\"base64Writer.Close() failed with '%s'\\n\", err)\n\t}\n\n\tencoded := writer.Bytes()\n\tfmt.Printf(\"Base64: %s\\n\", string(encoded))\n\n\treader := bytes.NewBuffer(encoded)\n\tbase64Reader := base64.NewDecoder(base64.StdEncoding, reader)\n\n\tdecoded, err := ioutil.ReadAll(base64Reader)\n\tif err != nil {\n\t\tfmt.Printf(\"ioutil.ReadAll() failed with '%s'\\n\", err)\n\t}\n\n\tif !bytes.Equal(d, decoded) {\n\t\tlog.Fatalf(\"decoded version is different than original\")\n\t}\n\t// :show end\n}"
            ]
          ]
        },
        "type": "code",
        "version": 17,
        "code": "// :glot\npackage main\n\nimport (\n\t\"bytes\"\n\t\"encoding/base64\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n)\n\nfunc main() {\n\t// :show start\n\td := []byte{0x01, 0xff, 0x3a, 0xcd}\n\n\twriter := \u0026bytes.Buffer{}\n\tbase64Writer := base64.NewEncoder(base64.StdEncoding, writer)\n\n\t_, err := base64Writer.Write(d)\n\tif err != nil {\n\t\tlog.Fatalf(\"base64Writer.Write() failed with '%s'\\n\", err)\n\t}\n\terr = base64Writer.Close()\n\tif err != nil {\n\t\tlog.Fatalf(\"base64Writer.Close() failed with '%s'\\n\", err)\n\t}\n\n\tencoded := writer.Bytes()\n\tfmt.Printf(\"Base64: %s\\n\", string(encoded))\n\n\treader := bytes.NewBuffer(encoded)\n\tbase64Reader := base64.NewDecoder(base64.StdEncoding, reader)\n\n\tdecoded, err := ioutil.ReadAll(base64Reader)\n\tif err != nil {\n\t\tfmt.Printf(\"ioutil.ReadAll() failed with '%s'\\n\", err)\n\t}\n\n\tif !bytes.Equal(d, decoded) {\n\t\tlog.Fatalf(\"decoded version is different than original\")\n\t}\n\t// :show end\n}",
        "code_language": "Go"
      }
    ],
    "title": "hex, base64 encoding",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}