{
  "ID": "ee6501b5-96c9-446d-a8b8-2e4ed35454a6",
  "Root": {
    "alive": true,
    "content": [
      "dff2148e-a5b6-4253-bd5d-932f246bf227",
      "378befaf-e857-4130-ad5e-b0164b375cde",
      "f3a1ba39-2ad1-47b3-9696-aed5e6737ee8",
      "fa213334-c211-4049-9679-1a8d27ba74d3",
      "65635942-6e5a-4711-a553-b323876db905",
      "e3cd112d-61be-4cd6-9213-6205cebc0925",
      "fa9f035b-5db1-4bb1-ba47-07de43c3d4ef",
      "ae5f7071-5acb-4723-af85-eaa1758a37fa",
      "8435a560-833b-4af3-bd98-3746b17d8f96",
      "ee3156ea-9367-4211-aaec-c11c5b34235e",
      "32672498-2d5a-42a8-b177-81b940d87168",
      "1ae08772-8df7-4d1d-84da-fa917c27066c",
      "67c49e72-c0aa-4101-9364-36847cbf757b",
      "bf290cdf-7913-4692-b92b-34ba0925dfea",
      "fcb9c688-bf21-4b07-a5fc-490b879b1c96",
      "0d70d12d-1479-49be-9adc-2b0ec4c38a26",
      "b264fafa-512e-45fa-9725-cb9da8229ea0"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1553458224691,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "ee6501b5-96c9-446d-a8b8-2e4ed35454a6",
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1553459700000,
    "parent_id": "f4005538-90d3-4185-ba79-5870807c2615",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Optimize by pre-allocating slice"
        ]
      ]
    },
    "type": "page",
    "version": 118,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1553458740000,
        "id": "dff2148e-a5b6-4253-bd5d-932f246bf227",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1553458800000,
        "parent_id": "ee6501b5-96c9-446d-a8b8-2e4ed35454a6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Allocations are, relatively speaking, expensive."
            ]
          ]
        },
        "type": "text",
        "version": 129,
        "inline_content": [
          {
            "Text": "Allocations are, relatively speaking, expensive."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1553458800000,
        "id": "378befaf-e857-4130-ad5e-b0164b375cde",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1553458860000,
        "parent_id": "ee6501b5-96c9-446d-a8b8-2e4ed35454a6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Appending new data to slice requires re-allocating memory if new size goes over current capacity of the slice."
            ]
          ]
        },
        "type": "text",
        "version": 207,
        "inline_content": [
          {
            "Text": "Appending new data to slice requires re-allocating memory if new size goes over current capacity of the slice."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1553458320000,
        "id": "f3a1ba39-2ad1-47b3-9696-aed5e6737ee8",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1553459040000,
        "parent_id": "ee6501b5-96c9-446d-a8b8-2e4ed35454a6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Knowing that, if you know the final size of the slice, you can pre-allocate the required capacity and avoid re-allocations."
            ]
          ]
        },
        "type": "text",
        "version": 244,
        "inline_content": [
          {
            "Text": "Knowing that, if you know the final size of the slice, you can pre-allocate the required capacity and avoid re-allocations."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1553459040000,
        "id": "fa213334-c211-4049-9679-1a8d27ba74d3",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1553459100000,
        "parent_id": "ee6501b5-96c9-446d-a8b8-2e4ed35454a6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You don't even need to know the exact size: know the upper bounds is just as good. Guess-estimating is better than nothing."
            ]
          ]
        },
        "type": "text",
        "version": 206,
        "inline_content": [
          {
            "Text": "You don't even need to know the exact size: know the upper bounds is just as good. Guess-estimating is better than nothing."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1553458500000,
        "id": "65635942-6e5a-4711-a553-b323876db905",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1553458980000,
        "parent_id": "ee6501b5-96c9-446d-a8b8-2e4ed35454a6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Consider appending to an empty slice:"
            ]
          ]
        },
        "type": "text",
        "version": 248,
        "inline_content": [
          {
            "Text": "Consider appending to an empty slice:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1553458521039,
        "id": "e3cd112d-61be-4cd6-9213-6205cebc0925",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1553458980000,
        "parent_id": "ee6501b5-96c9-446d-a8b8-2e4ed35454a6",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Go"
            ]
          ],
          "title": [
            [
              "// :glot\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\t// :show start\n\ts := []byte(\"123456\")\n\tvar d []byte\n\tfmt.Printf(\"d: %p, len: %d, cap: %d\\n\", d, len(d), cap(d))\n\td = append(d, s...)\n\tfmt.Printf(\"d: %p, len: %d, cap: %d\\n\", d, len(d), cap(d))\n\td = append(d, s...)\n\tfmt.Printf(\"d: %p, len: %d, cap: %d\\n\", d, len(d), cap(d))\n\td = append(d, s...)\n\tfmt.Printf(\"d: %p, len: %d, cap: %d\\n\", d, len(d), cap(d))\n\t// :show end\n}"
            ]
          ]
        },
        "type": "code",
        "version": 10,
        "code": "// :glot\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\t// :show start\n\ts := []byte(\"123456\")\n\tvar d []byte\n\tfmt.Printf(\"d: %p, len: %d, cap: %d\\n\", d, len(d), cap(d))\n\td = append(d, s...)\n\tfmt.Printf(\"d: %p, len: %d, cap: %d\\n\", d, len(d), cap(d))\n\td = append(d, s...)\n\tfmt.Printf(\"d: %p, len: %d, cap: %d\\n\", d, len(d), cap(d))\n\td = append(d, s...)\n\tfmt.Printf(\"d: %p, len: %d, cap: %d\\n\", d, len(d), cap(d))\n\t// :show end\n}",
        "code_language": "Go"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1553458980000,
        "id": "fa9f035b-5db1-4bb1-ba47-07de43c3d4ef",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1553459160000,
        "parent_id": "ee6501b5-96c9-446d-a8b8-2e4ed35454a6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The results might vary depending on the the version of the compiler and runtime. In Go 1.12 appending 6 bytes to an empty slice 4 times required 32 allocation."
            ]
          ]
        },
        "type": "text",
        "version": 211,
        "inline_content": [
          {
            "Text": "The results might vary depending on the the version of the compiler and runtime. In Go 1.12 appending 6 bytes to an empty slice 4 times required 32 allocation."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1553459460000,
        "id": "ae5f7071-5acb-4723-af85-eaa1758a37fa",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1553459460000,
        "parent_id": "ee6501b5-96c9-446d-a8b8-2e4ed35454a6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "By printing the address of slice with "
            ],
            [
              "%p",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " we can see if it gets re-allocated."
            ]
          ]
        },
        "type": "text",
        "version": 105,
        "inline_content": [
          {
            "Text": "By printing the address of slice with "
          },
          {
            "Text": "%p",
            "AttrFlags": 2
          },
          {
            "Text": " we can see if it gets re-allocated."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1553459160000,
        "id": "8435a560-833b-4af3-bd98-3746b17d8f96",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1553459460000,
        "parent_id": "ee6501b5-96c9-446d-a8b8-2e4ed35454a6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As the "
            ],
            [
              "cap",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " shows, first allocation was for 8 bytes, it was then re-allocated to 16 bytes and finally to 32 bytes."
            ]
          ]
        },
        "type": "text",
        "version": 158,
        "inline_content": [
          {
            "Text": "As the "
          },
          {
            "Text": "cap",
            "AttrFlags": 2
          },
          {
            "Text": " shows, first allocation was for 8 bytes, it was then re-allocated to 16 bytes and finally to 32 bytes."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1553459220000,
        "id": "ee3156ea-9367-4211-aaec-c11c5b34235e",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1553459520000,
        "parent_id": "ee6501b5-96c9-446d-a8b8-2e4ed35454a6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "On each re-allocation, the content had to be copied, so we copied 6 + 6*2 + 6*3 bytes in total. To store 24 bytes, we wasted time copying 36 bytes."
            ]
          ]
        },
        "type": "text",
        "version": 208,
        "inline_content": [
          {
            "Text": "On each re-allocation, the content had to be copied, so we copied 6 + 6*2 + 6*3 bytes in total. To store 24 bytes, we wasted time copying 36 bytes."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1553459400000,
        "id": "32672498-2d5a-42a8-b177-81b940d87168",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1553459580000,
        "parent_id": "ee6501b5-96c9-446d-a8b8-2e4ed35454a6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Memory allocations and copying memory takes time. "
            ]
          ]
        },
        "type": "text",
        "version": 61,
        "inline_content": [
          {
            "Text": "Memory allocations and copying memory takes time. "
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1553459580000,
        "id": "1ae08772-8df7-4d1d-84da-fa917c27066c",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1553459580000,
        "parent_id": "ee6501b5-96c9-446d-a8b8-2e4ed35454a6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Go runtime is smart in that it doubles the the capacity, anticipating that we might need more space in the future."
            ]
          ]
        },
        "type": "text",
        "version": 4,
        "inline_content": [
          {
            "Text": "Go runtime is smart in that it doubles the the capacity, anticipating that we might need more space in the future."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1553459280000,
        "id": "67c49e72-c0aa-4101-9364-36847cbf757b",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1553459400000,
        "parent_id": "ee6501b5-96c9-446d-a8b8-2e4ed35454a6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We can be smarter than that and pre-allocate the slice:"
            ]
          ]
        },
        "type": "text",
        "version": 171,
        "inline_content": [
          {
            "Text": "We can be smarter than that and pre-allocate the slice:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1553458250282,
        "id": "bf290cdf-7913-4692-b92b-34ba0925dfea",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1553459340000,
        "parent_id": "ee6501b5-96c9-446d-a8b8-2e4ed35454a6",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Go"
            ]
          ],
          "title": [
            [
              "// :glot\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\t// :show start\n\ts := []byte(\"123456\")\n\td := make([]byte, 0, len(s)*4)\n\tfmt.Printf(\"d: %p, len: %d, cap: %d\\n\", d, len(d), cap(d))\n\td = append(d, s...)\n\tfmt.Printf(\"d: %p, len: %d, cap: %d\\n\", d, len(d), cap(d))\n\td = append(d, s...)\n\tfmt.Printf(\"d: %p, len: %d, cap: %d\\n\", d, len(d), cap(d))\n\td = append(d, s...)\n\td = append(d, s...)\n\tfmt.Printf(\"d: %p, len: %d, cap: %d\\n\", d, len(d), cap(d))\n\t// :show end\n}"
            ]
          ]
        },
        "type": "code",
        "version": 65,
        "code": "// :glot\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\t// :show start\n\ts := []byte(\"123456\")\n\td := make([]byte, 0, len(s)*4)\n\tfmt.Printf(\"d: %p, len: %d, cap: %d\\n\", d, len(d), cap(d))\n\td = append(d, s...)\n\tfmt.Printf(\"d: %p, len: %d, cap: %d\\n\", d, len(d), cap(d))\n\td = append(d, s...)\n\tfmt.Printf(\"d: %p, len: %d, cap: %d\\n\", d, len(d), cap(d))\n\td = append(d, s...)\n\td = append(d, s...)\n\tfmt.Printf(\"d: %p, len: %d, cap: %d\\n\", d, len(d), cap(d))\n\t// :show end\n}",
        "code_language": "Go"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1553459400000,
        "id": "fcb9c688-bf21-4b07-a5fc-490b879b1c96",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1553459700000,
        "parent_id": "ee6501b5-96c9-446d-a8b8-2e4ed35454a6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Here we can see that we start with the right capacity from the beginning and at no time the runtime had to make additional allocation or memory copy."
            ]
          ]
        },
        "type": "text",
        "version": 203,
        "inline_content": [
          {
            "Text": "Here we can see that we start with the right capacity from the beginning and at no time the runtime had to make additional allocation or memory copy."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1553459700000,
        "id": "0d70d12d-1479-49be-9adc-2b0ec4c38a26",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1553459700000,
        "parent_id": "ee6501b5-96c9-446d-a8b8-2e4ed35454a6",
        "parent_table": "block",
        "type": "text",
        "version": 4
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1553459400000,
        "id": "b264fafa-512e-45fa-9725-cb9da8229ea0",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1553459400000,
        "parent_id": "ee6501b5-96c9-446d-a8b8-2e4ed35454a6",
        "parent_table": "block",
        "type": "text",
        "version": 2
      }
    ],
    "title": "Optimize by pre-allocating slice",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "",
      "version": 49
    }
  ],
  "Tables": null
}