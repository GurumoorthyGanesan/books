{
  "ID": "90b9baa6-982e-4dc1-a8ea-21976757cae5",
  "Root": {
    "alive": true,
    "content": [
      "eadf2ba0-9d01-4946-9bf2-af7ad1c91936",
      "840ac34c-adbe-4e81-af33-fbc5a68e8a70",
      "3a106b1a-3882-40e2-b81a-415519298469",
      "e3b8e7c5-90e9-4855-9000-2232b4be6b8b",
      "f02c7ded-6b44-4eea-9c84-ae6ae41c8157",
      "e41ca9d5-ef5b-44f8-9ca9-85a883329900",
      "cf9cedbd-7e60-4f1e-ba29-441aa14837ed",
      "1990aa6f-7ced-4c9e-8329-6ee7a1bf3c85",
      "4a7c3208-7c16-4900-b664-0ce54b1b77b9"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1532156000114,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "90b9baa6-982e-4dc1-a8ea-21976757cae5",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552264620000,
    "parent_id": "80fb91dd-63d4-45e2-8010-b9f5e261da81",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Use map as a set"
        ]
      ]
    },
    "type": "page",
    "version": 47,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532196685863,
        "id": "eadf2ba0-9d01-4946-9bf2-af7ad1c91936",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532235250996,
        "parent_id": "90b9baa6-982e-4dc1-a8ea-21976757cae5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "$Id: 77"
            ]
          ]
        },
        "type": "text",
        "version": 12,
        "inline_content": [
          {
            "Text": "$Id: 77"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532196687901,
        "id": "840ac34c-adbe-4e81-af33-fbc5a68e8a70",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532235251708,
        "parent_id": "90b9baa6-982e-4dc1-a8ea-21976757cae5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "$SOId: 14398"
            ]
          ]
        },
        "type": "text",
        "version": 14,
        "inline_content": [
          {
            "Text": "$SOId: 14398"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532196691340,
        "id": "3a106b1a-3882-40e2-b81a-415519298469",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532196691352,
        "parent_id": "90b9baa6-982e-4dc1-a8ea-21976757cae5",
        "parent_table": "block",
        "type": "text",
        "version": 6
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156000114,
        "id": "e3b8e7c5-90e9-4855-9000-2232b4be6b8b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552263600000,
        "parent_id": "90b9baa6-982e-4dc1-a8ea-21976757cae5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Some languages have built-in types for sets."
            ]
          ]
        },
        "type": "text",
        "version": 38,
        "inline_content": [
          {
            "Text": "Some languages have built-in types for sets."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552263600000,
        "id": "f02c7ded-6b44-4eea-9c84-ae6ae41c8157",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552263660000,
        "parent_id": "90b9baa6-982e-4dc1-a8ea-21976757cae5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In Go a best practice is to use a "
            ],
            [
              "map",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " of a desired type with values of type "
            ],
            [
              "struct{}",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " because a map with values of empty struct is especially optimized."
            ]
          ]
        },
        "type": "text",
        "version": 227,
        "inline_content": [
          {
            "Text": "In Go a best practice is to use a "
          },
          {
            "Text": "map",
            "AttrFlags": 2
          },
          {
            "Text": " of a desired type with values of type "
          },
          {
            "Text": "struct{}",
            "AttrFlags": 2
          },
          {
            "Text": " because a map with values of empty struct is especially optimized."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552263660000,
        "id": "e41ca9d5-ef5b-44f8-9ca9-85a883329900",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552263720000,
        "parent_id": "90b9baa6-982e-4dc1-a8ea-21976757cae5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For example, a set of strings:"
            ]
          ]
        },
        "type": "text",
        "version": 65,
        "inline_content": [
          {
            "Text": "For example, a set of strings:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552261908925,
        "id": "cf9cedbd-7e60-4f1e-ba29-441aa14837ed",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552264620000,
        "parent_id": "90b9baa6-982e-4dc1-a8ea-21976757cae5",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Go"
            ]
          ],
          "title": [
            [
              "// :glot\npackage main\n\nimport \"fmt\"\n\n// StringSet is a set of unique strings\ntype StringSet struct {\n\tm map[string]struct{}\n}\n\nfunc NewStringSet(strings ...string) *StringSet {\n\tres := \u0026StringSet{\n\t\tm: map[string]struct{}{},\n\t}\n\tfor _, s := range strings {\n\t\tres.Add(s)\n\t}\n\treturn res\n}\n\n// Add adds a string to the set. If string is already in the set, it has no effect\nfunc (s *StringSet) Add(str string) {\n\ts.m[str] = struct{}{}\n}\n\n// Exists checks if string exists in the set\nfunc (s *StringSet) Exists(str string) bool {\n\t_, exists := s.m[str]\n\treturn exists\n}\n\n// Delete removes a string from the set\nfunc (s *StringSet) Delete(str string) {\n\tdelete(s.m, str)\n}\n\n// Strings returns strings in the set\nfunc (s *StringSet) Strings() []string {\n\tn := len(s.m)\n\tif n == 0 {\n\t\treturn nil\n\t}\n\t// for efficiency, pre-allocate the array with known, final capacity\n\t// this avoids re-allocating underlying array in append\n\tres := make([]string, 0, n)\n\tfor str := range s.m {\n\t\tres = append(res, str)\n\t}\n\treturn res\n}\n\nfunc printExists(set *StringSet, str string) {\n\tif set.Exists(str) {\n\t\tfmt.Printf(\"'%s' exists in set\\n\", str)\n\t} else {\n\t\tfmt.Printf(\"'%s' doesn't exist in set\\n\", str)\n\t}\n}\n\nfunc main() {\n\t// :show start\n\tset := NewStringSet(\"hi\", \"hello\")\n\tfmt.Printf(\"Original set: %#v\\n\", set.Strings())\n\n\tset.Delete(\"hi\")\n\tfmt.Printf(\"After delete: %#v\\n\", set.Strings())\n\n\tset.Add(\"hey\")\n\tfmt.Printf(\"After add   : %#v\\n\", set.Strings())\n\n\tprintExists(set, \"hello\")\n\tprintExists(set, \"ola\")\n\t// :show end\n}"
            ]
          ]
        },
        "type": "code",
        "version": 18,
        "code": "// :glot\npackage main\n\nimport \"fmt\"\n\n// StringSet is a set of unique strings\ntype StringSet struct {\n\tm map[string]struct{}\n}\n\nfunc NewStringSet(strings ...string) *StringSet {\n\tres := \u0026StringSet{\n\t\tm: map[string]struct{}{},\n\t}\n\tfor _, s := range strings {\n\t\tres.Add(s)\n\t}\n\treturn res\n}\n\n// Add adds a string to the set. If string is already in the set, it has no effect\nfunc (s *StringSet) Add(str string) {\n\ts.m[str] = struct{}{}\n}\n\n// Exists checks if string exists in the set\nfunc (s *StringSet) Exists(str string) bool {\n\t_, exists := s.m[str]\n\treturn exists\n}\n\n// Delete removes a string from the set\nfunc (s *StringSet) Delete(str string) {\n\tdelete(s.m, str)\n}\n\n// Strings returns strings in the set\nfunc (s *StringSet) Strings() []string {\n\tn := len(s.m)\n\tif n == 0 {\n\t\treturn nil\n\t}\n\t// for efficiency, pre-allocate the array with known, final capacity\n\t// this avoids re-allocating underlying array in append\n\tres := make([]string, 0, n)\n\tfor str := range s.m {\n\t\tres = append(res, str)\n\t}\n\treturn res\n}\n\nfunc printExists(set *StringSet, str string) {\n\tif set.Exists(str) {\n\t\tfmt.Printf(\"'%s' exists in set\\n\", str)\n\t} else {\n\t\tfmt.Printf(\"'%s' doesn't exist in set\\n\", str)\n\t}\n}\n\nfunc main() {\n\t// :show start\n\tset := NewStringSet(\"hi\", \"hello\")\n\tfmt.Printf(\"Original set: %#v\\n\", set.Strings())\n\n\tset.Delete(\"hi\")\n\tfmt.Printf(\"After delete: %#v\\n\", set.Strings())\n\n\tset.Add(\"hey\")\n\tfmt.Printf(\"After add   : %#v\\n\", set.Strings())\n\n\tprintExists(set, \"hello\")\n\tprintExists(set, \"ola\")\n\t// :show end\n}",
        "code_language": "Go"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156000114,
        "id": "1990aa6f-7ced-4c9e-8329-6ee7a1bf3c85",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1538773341387,
        "parent_id": "90b9baa6-982e-4dc1-a8ea-21976757cae5",
        "parent_table": "block",
        "type": "text",
        "version": 3
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1538773331990,
        "id": "4a7c3208-7c16-4900-b664-0ce54b1b77b9",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1538773331990,
        "parent_id": "90b9baa6-982e-4dc1-a8ea-21976757cae5",
        "parent_table": "block",
        "type": "text",
        "version": 4
      }
    ],
    "title": "Use map as a set",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}