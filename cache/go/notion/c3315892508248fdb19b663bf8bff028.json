{
  "ID": "c3315892-5082-48fd-b19b-663bf8bff028",
  "Root": {
    "alive": true,
    "content": [
      "3ce73fbe-2c81-401c-b1e3-2481fe67e54f",
      "a0ba0fcf-87ad-4b85-8fac-dd94cec28896",
      "b818040f-ed55-4486-95bb-f8f41e492ac1",
      "194a182c-2696-4c59-bdb9-58a819b10c61",
      "32e629e8-36af-46ed-987c-eba64ebc7301",
      "416dc184-b720-4d44-9c4a-be8b6a0f3e78",
      "1f081905-ff3e-44ff-9b58-1786b4bc183b",
      "f4566578-881b-4a65-afae-89a0755e0fb5",
      "95eb2360-199a-45bd-91de-ed5d67fa4e0f",
      "7faa69c3-1fbb-4c69-8ef2-5779ff0da09d",
      "03d18451-ca15-44a1-be17-cbace35df659",
      "1bc6e26c-fade-4a37-bba8-4442f523b81a",
      "ff0bd84f-02ce-43bc-8c7c-be28f69fb316",
      "39370983-fcb6-4a9e-9db7-658d32705079",
      "344753d2-47e9-4343-a02a-5e466cc59c6e",
      "4cc608e8-79b9-4e86-8bcb-cc16ec590ecf",
      "d81e24b9-5062-4a94-9932-0cacf461d804",
      "f647e12a-0853-47b9-986b-83234bd0629d",
      "d9c6cf80-18e3-4990-83d3-ea4bb825b314",
      "8fec9f4c-37b1-45f4-843d-0779e9719d17",
      "a2cc258e-960c-4001-bb1f-151358d32b55",
      "950b9d12-a0c0-4139-9598-5da8081eba7c",
      "e8502130-adc2-47d9-ab55-568cf15b06d8",
      "71691e7f-e230-44f6-a4c5-5d8df3c794ed",
      "0500145a-75da-4464-bca0-d25da19af112",
      "4b46d50a-5e22-43f1-af54-14efb903dec9",
      "bf5c8f07-5bfd-4494-ba0a-c1ea53ed9c2e",
      "9ed3cfc9-7510-44de-b0c1-927d0e6052ff",
      "df61a73d-6014-4025-91ac-24c74aebf20a"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1532156018155,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "c3315892-5082-48fd-b19b-663bf8bff028",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552269060000,
    "parent_id": "2cab1ed2-b7a4-4584-b56b-0d3ca9b80185",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Empty interface"
        ]
      ]
    },
    "type": "page",
    "version": 119,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532197361582,
        "id": "3ce73fbe-2c81-401c-b1e3-2481fe67e54f",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532233935994,
        "parent_id": "c3315892-5082-48fd-b19b-663bf8bff028",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "$Search: dynamic type"
            ]
          ]
        },
        "type": "text",
        "version": 12,
        "inline_content": [
          {
            "Text": "$Search: dynamic type"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532197363783,
        "id": "a0ba0fcf-87ad-4b85-8fac-dd94cec28896",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532233936785,
        "parent_id": "c3315892-5082-48fd-b19b-663bf8bff028",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "$Id: 94"
            ]
          ]
        },
        "type": "text",
        "version": 12,
        "inline_content": [
          {
            "Text": "$Id: 94"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532197366079,
        "id": "b818040f-ed55-4486-95bb-f8f41e492ac1",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532233937525,
        "parent_id": "c3315892-5082-48fd-b19b-663bf8bff028",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "$SOId: der300hf"
            ]
          ]
        },
        "type": "text",
        "version": 16,
        "inline_content": [
          {
            "Text": "$SOId: der300hf"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532197372059,
        "id": "194a182c-2696-4c59-bdb9-58a819b10c61",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532197372059,
        "parent_id": "c3315892-5082-48fd-b19b-663bf8bff028",
        "parent_table": "block",
        "type": "text",
        "version": 4
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532197369884,
        "id": "32e629e8-36af-46ed-987c-eba64ebc7301",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1533026362314,
        "parent_id": "c3315892-5082-48fd-b19b-663bf8bff028",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Technically speaking, an empty interface ("
            ],
            [
              "interface{}",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") is an "
            ],
            [
              "interface ",
              [
                [
                  "a",
                  "https://www.notion.so/kjkpublic/Interfaces-4f5f2959e72c431e995527b51ad7fd8e"
                ]
              ]
            ],
            [
              "with no methods."
            ]
          ]
        },
        "type": "text",
        "version": 11,
        "inline_content": [
          {
            "Text": "Technically speaking, an empty interface ("
          },
          {
            "Text": "interface{}",
            "AttrFlags": 2
          },
          {
            "Text": ") is an "
          },
          {
            "Text": "interface ",
            "Link": "https://www.notion.so/kjkpublic/Interfaces-4f5f2959e72c431e995527b51ad7fd8e"
          },
          {
            "Text": "with no methods."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156018152,
        "id": "416dc184-b720-4d44-9c4a-be8b6a0f3e78",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532156018152,
        "parent_id": "c3315892-5082-48fd-b19b-663bf8bff028",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "What follows from that is that every type conforms to "
            ],
            [
              "interface{}",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "What follows from that is that every type conforms to "
          },
          {
            "Text": "interface{}",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156018152,
        "id": "1f081905-ff3e-44ff-9b58-1786b4bc183b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532156018152,
        "parent_id": "c3315892-5082-48fd-b19b-663bf8bff028",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In practice, empty interface is Go’s version of "
            ],
            [
              "object",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " type in Java or C# in that it combines a type and its value."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In practice, empty interface is Go’s version of "
          },
          {
            "Text": "object",
            "AttrFlags": 2
          },
          {
            "Text": " type in Java or C# in that it combines a type and its value."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156018152,
        "id": "f4566578-881b-4a65-afae-89a0755e0fb5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532156018152,
        "parent_id": "c3315892-5082-48fd-b19b-663bf8bff028",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Empty interface is effectively a dynamic type in a static language."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Empty interface is effectively a dynamic type in a static language."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156018152,
        "id": "95eb2360-199a-45bd-91de-ed5d67fa4e0f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532156018152,
        "parent_id": "c3315892-5082-48fd-b19b-663bf8bff028",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Empty interface is also a way to implement union types in Go."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Empty interface is also a way to implement union types in Go."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156018153,
        "id": "7faa69c3-1fbb-4c69-8ef2-5779ff0da09d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532156018153,
        "parent_id": "c3315892-5082-48fd-b19b-663bf8bff028",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Since every type conforms to "
            ],
            [
              "interface{}",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", you can assign any value to a variable of "
            ],
            [
              "interface{}",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " type."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Since every type conforms to "
          },
          {
            "Text": "interface{}",
            "AttrFlags": 2
          },
          {
            "Text": ", you can assign any value to a variable of "
          },
          {
            "Text": "interface{}",
            "AttrFlags": 2
          },
          {
            "Text": " type."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156018153,
        "id": "03d18451-ca15-44a1-be17-cbace35df659",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532156018153,
        "parent_id": "c3315892-5082-48fd-b19b-663bf8bff028",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "At that point, you can no longer tell what is the real type at compile time."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "At that point, you can no longer tell what is the real type at compile time."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156018154,
        "id": "1bc6e26c-fade-4a37-bba8-4442f523b81a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532235579692,
        "parent_id": "c3315892-5082-48fd-b19b-663bf8bff028",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Zero value",
              [
                [
                  "a",
                  "https://www.notion.so/kjkpublic/Zero-values-707edb6542fa4fc7a8d16639ee6a9746"
                ]
              ]
            ],
            [
              " of empty interface is nil."
            ]
          ]
        },
        "type": "text",
        "version": 4,
        "inline_content": [
          {
            "Text": "Zero value",
            "Link": "https://www.notion.so/kjkpublic/Zero-values-707edb6542fa4fc7a8d16639ee6a9746"
          },
          {
            "Text": " of empty interface is nil."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156018154,
        "id": "ff0bd84f-02ce-43bc-8c7c-be28f69fb316",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1538781411108,
        "parent_id": "c3315892-5082-48fd-b19b-663bf8bff028",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Basic example:"
            ]
          ]
        },
        "type": "text",
        "version": 3,
        "inline_content": [
          {
            "Text": "Basic example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552265437635,
        "id": "39370983-fcb6-4a9e-9db7-658d32705079",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552265400000,
        "parent_id": "c3315892-5082-48fd-b19b-663bf8bff028",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Go"
            ]
          ],
          "title": [
            [
              "// :glot\npackage main\n\nimport (\n\t\"fmt\"\n)\n\n// :show start\nfunc printVariableType(v interface{}) {\n\tswitch v.(type) {\n\tcase string:\n\t\tfmt.Printf(\"v is of type 'string'\\n\")\n\tcase int:\n\t\tfmt.Printf(\"v is of type 'int'\\n\")\n\tdefault:\n\t\t// generic fallback\n\t\tfmt.Printf(\"v is of type '%T'\\n\", v)\n\t}\n}\n\nfunc main() {\n\tprintVariableType(\"string\") // string\n\tprintVariableType(5)        // int\n\tprintVariableType(int32(5)) // int32\n}\n\n// :show end"
            ]
          ]
        },
        "type": "code",
        "version": 17,
        "code": "// :glot\npackage main\n\nimport (\n\t\"fmt\"\n)\n\n// :show start\nfunc printVariableType(v interface{}) {\n\tswitch v.(type) {\n\tcase string:\n\t\tfmt.Printf(\"v is of type 'string'\\n\")\n\tcase int:\n\t\tfmt.Printf(\"v is of type 'int'\\n\")\n\tdefault:\n\t\t// generic fallback\n\t\tfmt.Printf(\"v is of type '%T'\\n\", v)\n\t}\n}\n\nfunc main() {\n\tprintVariableType(\"string\") // string\n\tprintVariableType(5)        // int\n\tprintVariableType(int32(5)) // int32\n}\n\n// :show end",
        "code_language": "Go"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532197354747,
        "id": "344753d2-47e9-4343-a02a-5e466cc59c6e",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532197354747,
        "parent_id": "c3315892-5082-48fd-b19b-663bf8bff028",
        "parent_table": "block",
        "type": "text",
        "version": 6
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532197391120,
        "id": "4cc608e8-79b9-4e86-8bcb-cc16ec590ecf",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552265460000,
        "parent_id": "c3315892-5082-48fd-b19b-663bf8bff028",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "At compile time, when you have a variable whose type is "
            ],
            [
              "interface",
              [
                [
                  "a",
                  "https://www.notion.so/kjkpublic/Interfaces-4f5f2959e72c431e995527b51ad7fd8e"
                ]
              ]
            ],
            [
              " (including "
            ],
            [
              "empty interface",
              [
                [
                  "a",
                  "https://www.notion.so/kjkpublic/Empty-interface-c3315892508248fdb19b663bf8bff028"
                ]
              ]
            ],
            [
              ") you don’t know what is the real, underlying type."
            ]
          ]
        },
        "type": "text",
        "version": 21,
        "inline_content": [
          {
            "Text": "At compile time, when you have a variable whose type is "
          },
          {
            "Text": "interface",
            "Link": "https://www.notion.so/kjkpublic/Interfaces-4f5f2959e72c431e995527b51ad7fd8e"
          },
          {
            "Text": " (including "
          },
          {
            "Text": "empty interface",
            "Link": "https://www.notion.so/kjkpublic/Empty-interface-c3315892508248fdb19b663bf8bff028"
          },
          {
            "Text": ") you don’t know what is the real, underlying type."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156019266,
        "id": "d81e24b9-5062-4a94-9932-0cacf461d804",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552265460000,
        "parent_id": "c3315892-5082-48fd-b19b-663bf8bff028",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You can access underlying type at runtime using type assertion."
            ]
          ]
        },
        "type": "text",
        "version": 4,
        "inline_content": [
          {
            "Text": "You can access underlying type at runtime using type assertion."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552265485003,
        "id": "f647e12a-0853-47b9-986b-83234bd0629d",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552269060000,
        "parent_id": "c3315892-5082-48fd-b19b-663bf8bff028",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Go"
            ]
          ],
          "title": [
            [
              "// :glot, allow error\npackage main\n\nimport (\n\t\"fmt\"\n)\n\n// :show start\nfunc printTypeAndValue(iv interface{}) {\n\tif v, ok := iv.(string); ok {\n\t\tfmt.Printf(\"iv is of type string and has value '%s'\\n\", v)\n\t\treturn\n\t}\n\tif v, ok := iv.(int); ok {\n\t\tfmt.Printf(\"iv is of type int and has value '%d'\\n\", v)\n\t\treturn\n\t}\n\tif v, ok := iv.(*int); ok {\n\t\tfmt.Printf(\"iv is of type *int and has value '%s'\\n\", v)\n\t\treturn\n\t}\n}\n\nfunc panicOnInvalidConversion() {\n\tvar iv interface{} = \"string\"\n\n\tv := iv.(int)\n\tfmt.Printf(\"v is int of value: %d\\n\", v)\n}\n\nfunc main() {\n\t// pass a string\n\tprintTypeAndValue(\"string\")\n\ti := 5\n\t// pass an int\n\tprintTypeAndValue(i)\n\t// pass a pointer to int i.e. *int\n\tprintTypeAndValue(\u0026i)\n\n\tpanicOnInvalidConversion()\n}\n\n// :show end"
            ]
          ]
        },
        "type": "code",
        "version": 24,
        "code": "// :glot, allow error\npackage main\n\nimport (\n\t\"fmt\"\n)\n\n// :show start\nfunc printTypeAndValue(iv interface{}) {\n\tif v, ok := iv.(string); ok {\n\t\tfmt.Printf(\"iv is of type string and has value '%s'\\n\", v)\n\t\treturn\n\t}\n\tif v, ok := iv.(int); ok {\n\t\tfmt.Printf(\"iv is of type int and has value '%d'\\n\", v)\n\t\treturn\n\t}\n\tif v, ok := iv.(*int); ok {\n\t\tfmt.Printf(\"iv is of type *int and has value '%s'\\n\", v)\n\t\treturn\n\t}\n}\n\nfunc panicOnInvalidConversion() {\n\tvar iv interface{} = \"string\"\n\n\tv := iv.(int)\n\tfmt.Printf(\"v is int of value: %d\\n\", v)\n}\n\nfunc main() {\n\t// pass a string\n\tprintTypeAndValue(\"string\")\n\ti := 5\n\t// pass an int\n\tprintTypeAndValue(i)\n\t// pass a pointer to int i.e. *int\n\tprintTypeAndValue(\u0026i)\n\n\tpanicOnInvalidConversion()\n}\n\n// :show end",
        "code_language": "Go"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156019266,
        "id": "d9c6cf80-18e3-4990-83d3-ea4bb825b314",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552267680000,
        "parent_id": "c3315892-5082-48fd-b19b-663bf8bff028",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Type assertion"
            ]
          ]
        },
        "type": "header",
        "version": 67,
        "inline_content": [
          {
            "Text": "Type assertion"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552267740000,
        "id": "8fec9f4c-37b1-45f4-843d-0779e9719d17",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552267860000,
        "parent_id": "c3315892-5082-48fd-b19b-663bf8bff028",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Type assertion allows you to check if empty interface value is of a given type."
            ]
          ]
        },
        "type": "text",
        "version": 90,
        "inline_content": [
          {
            "Text": "Type assertion allows you to check if empty interface value is of a given type."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156019267,
        "id": "a2cc258e-960c-4001-bb1f-151358d32b55",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552265460000,
        "parent_id": "c3315892-5082-48fd-b19b-663bf8bff028",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For completness, you can use short version of type switch: "
            ],
            [
              "v := iv.(int)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (vs. "
            ],
            [
              "v, ok := iv.(int)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ")."
            ]
          ]
        },
        "type": "text",
        "version": 4,
        "inline_content": [
          {
            "Text": "For completness, you can use short version of type switch: "
          },
          {
            "Text": "v := iv.(int)",
            "AttrFlags": 2
          },
          {
            "Text": " (vs. "
          },
          {
            "Text": "v, ok := iv.(int)",
            "AttrFlags": 2
          },
          {
            "Text": ")."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156019267,
        "id": "950b9d12-a0c0-4139-9598-5da8081eba7c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552265460000,
        "parent_id": "c3315892-5082-48fd-b19b-663bf8bff028",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The difference is that the short version will panic if "
            ],
            [
              "iv",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is not of the asserted type:"
            ]
          ]
        },
        "type": "text",
        "version": 6,
        "inline_content": [
          {
            "Text": "The difference is that the short version will panic if "
          },
          {
            "Text": "iv",
            "AttrFlags": 2
          },
          {
            "Text": " is not of the asserted type:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552265495462,
        "id": "e8502130-adc2-47d9-ab55-568cf15b06d8",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552269060000,
        "parent_id": "c3315892-5082-48fd-b19b-663bf8bff028",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Go"
            ]
          ],
          "title": [
            [
              "// :glot, allow error\npackage main\n\nimport (\n\t\"fmt\"\n)\n\n// :show start\nfunc panicOnInvalidConversion(iv interface{}) {\n\tv := iv.(int)\n\tfmt.Printf(\"v is int of value: %d\\n\", v)\n}\n\nfunc main() {\n\tpanicOnInvalidConversion(\"string\")\n}\n\n// :show end"
            ]
          ]
        },
        "type": "code",
        "version": 22,
        "code": "// :glot, allow error\npackage main\n\nimport (\n\t\"fmt\"\n)\n\n// :show start\nfunc panicOnInvalidConversion(iv interface{}) {\n\tv := iv.(int)\n\tfmt.Printf(\"v is int of value: %d\\n\", v)\n}\n\nfunc main() {\n\tpanicOnInvalidConversion(\"string\")\n}\n\n// :show end",
        "code_language": "Go"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156019267,
        "id": "71691e7f-e230-44f6-a4c5-5d8df3c794ed",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552265460000,
        "parent_id": "c3315892-5082-48fd-b19b-663bf8bff028",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As a rule of thumb, you shouldn’t try to discover underlying value of interface type as it pierces through an abstraction."
            ]
          ]
        },
        "type": "text",
        "version": 5,
        "inline_content": [
          {
            "Text": "As a rule of thumb, you shouldn’t try to discover underlying value of interface type as it pierces through an abstraction."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552267620000,
        "id": "0500145a-75da-4464-bca0-d25da19af112",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552267680000,
        "parent_id": "c3315892-5082-48fd-b19b-663bf8bff028",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Type switch"
            ]
          ]
        },
        "type": "header",
        "version": 338,
        "inline_content": [
          {
            "Text": "Type switch"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552267740000,
        "id": "4b46d50a-5e22-43f1-af54-14efb903dec9",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552267860000,
        "parent_id": "c3315892-5082-48fd-b19b-663bf8bff028",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A "
            ],
            [
              "switch",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " statement can dispatch based on the type of the value wrapped by the interface."
            ]
          ]
        },
        "type": "text",
        "version": 204,
        "inline_content": [
          {
            "Text": "A "
          },
          {
            "Text": "switch",
            "AttrFlags": 2
          },
          {
            "Text": " statement can dispatch based on the type of the value wrapped by the interface."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1538893747303,
        "id": "bf5c8f07-5bfd-4494-ba0a-c1ea53ed9c2e",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552267920000,
        "parent_id": "c3315892-5082-48fd-b19b-663bf8bff028",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If you have an "
            ],
            [
              "interface",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " value you can "
            ],
            [
              "switch",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " based on the type of the underlying value:"
            ]
          ]
        },
        "type": "text",
        "version": 46,
        "inline_content": [
          {
            "Text": "If you have an "
          },
          {
            "Text": "interface",
            "AttrFlags": 2
          },
          {
            "Text": " value you can "
          },
          {
            "Text": "switch",
            "AttrFlags": 2
          },
          {
            "Text": " based on the type of the underlying value:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552265525570,
        "id": "9ed3cfc9-7510-44de-b0c1-927d0e6052ff",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552265520000,
        "parent_id": "c3315892-5082-48fd-b19b-663bf8bff028",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Go"
            ]
          ],
          "title": [
            [
              "// :glot\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strconv\"\n)\n\n// :show start\nfunc smartConvertToInt(iv interface{}) (int, error) {\n\t// inside case statements, v is of type matching case type\n\tswitch v := iv.(type) {\n\tcase int:\n\t\treturn v, nil\n\tcase string:\n\t\treturn strconv.Atoi(v)\n\tcase float64:\n\t\treturn int(v), nil\n\tdefault:\n\t\treturn 0, fmt.Errorf(\"unsupported type: %T\", iv)\n\t}\n}\n\nfunc printSmartConvertToInt(iv interface{}) {\n\ti, err := smartConvertToInt(iv)\n\tif err != nil {\n\t\tfmt.Printf(\"Failed to convert %#v to int\\n\", iv)\n\t\treturn\n\t}\n\tfmt.Printf(\"%#v of type %T converted to %d\\n\", iv, iv, i)\n}\n\nfunc main() {\n\tprintSmartConvertToInt(\"5\")\n\tprintSmartConvertToInt(4)\n\tprintSmartConvertToInt(int32(8))\n\tprintSmartConvertToInt(\"not valid int\")\n}\n\n// :show end"
            ]
          ]
        },
        "type": "code",
        "version": 15,
        "code": "// :glot\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strconv\"\n)\n\n// :show start\nfunc smartConvertToInt(iv interface{}) (int, error) {\n\t// inside case statements, v is of type matching case type\n\tswitch v := iv.(type) {\n\tcase int:\n\t\treturn v, nil\n\tcase string:\n\t\treturn strconv.Atoi(v)\n\tcase float64:\n\t\treturn int(v), nil\n\tdefault:\n\t\treturn 0, fmt.Errorf(\"unsupported type: %T\", iv)\n\t}\n}\n\nfunc printSmartConvertToInt(iv interface{}) {\n\ti, err := smartConvertToInt(iv)\n\tif err != nil {\n\t\tfmt.Printf(\"Failed to convert %#v to int\\n\", iv)\n\t\treturn\n\t}\n\tfmt.Printf(\"%#v of type %T converted to %d\\n\", iv, iv, i)\n}\n\nfunc main() {\n\tprintSmartConvertToInt(\"5\")\n\tprintSmartConvertToInt(4)\n\tprintSmartConvertToInt(int32(8))\n\tprintSmartConvertToInt(\"not valid int\")\n}\n\n// :show end",
        "code_language": "Go"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156020153,
        "id": "df61a73d-6014-4025-91ac-24c74aebf20a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552265460000,
        "parent_id": "c3315892-5082-48fd-b19b-663bf8bff028",
        "parent_table": "block",
        "type": "text",
        "version": 6
      }
    ],
    "title": "Empty interface",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 29
    }
  ],
  "Tables": null
}