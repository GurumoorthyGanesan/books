{
  "ID": "b8e61a53-1951-436e-a485-18c77697c930",
  "Root": {
    "alive": true,
    "content": [
      "1d8296f3-68da-4405-a0c0-59c93f49a6bb",
      "fdfd3516-59a6-4743-b3ce-b8e09d4f8c5f",
      "17e2d8b3-7ead-418b-8f7b-41ee1ccded73",
      "5cd49b2d-c40d-4756-aa28-dd341b19c7ac",
      "65aa95fd-5a0b-41e5-974c-87f8406df7dd",
      "09ec83df-58d2-4feb-ba58-7c80cc90b221",
      "0df33b65-d1fa-4609-943e-d51cbabbd4bd",
      "68c5712b-94d2-42cc-bc72-4a504e76b573",
      "5bfb484d-6621-4b70-9709-65ab281d782f",
      "d039ad6a-92c3-4d8f-91b6-8fad9138d8fa",
      "cd26434c-5fdf-462e-81f3-a9944102e5d6",
      "c7e88d22-6236-486b-a6dc-82d67d7942a4",
      "213f4702-bbcd-477c-84d4-51ee3595c261",
      "5f829e59-db3e-4c48-b82c-519ce50620ba",
      "28a784bc-229e-4627-ac94-1eb5456bf304",
      "42abf2fd-c074-4c6b-8869-ac9176707bf6"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1532156054135,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "b8e61a53-1951-436e-a485-18c77697c930",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552277820000,
    "parent_id": "20bfd8fa-4545-4479-954a-6814eeeef716",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Defer in depth"
        ]
      ]
    },
    "type": "page",
    "version": 150,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532205311835,
        "id": "1d8296f3-68da-4405-a0c0-59c93f49a6bb",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532236185315,
        "parent_id": "b8e61a53-1951-436e-a485-18c77697c930",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "$Id: 129"
            ]
          ]
        },
        "type": "text",
        "version": 12,
        "inline_content": [
          {
            "Text": "$Id: 129"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532205313618,
        "id": "fdfd3516-59a6-4743-b3ce-b8e09d4f8c5f",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532236186090,
        "parent_id": "b8e61a53-1951-436e-a485-18c77697c930",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "$SOId: 9429"
            ]
          ]
        },
        "type": "text",
        "version": 12,
        "inline_content": [
          {
            "Text": "$SOId: 9429"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532205318241,
        "id": "17e2d8b3-7ead-418b-8f7b-41ee1ccded73",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532205318241,
        "parent_id": "b8e61a53-1951-436e-a485-18c77697c930",
        "parent_table": "block",
        "type": "text",
        "version": 4
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532205315967,
        "id": "5cd49b2d-c40d-4756-aa28-dd341b19c7ac",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532205318976,
        "parent_id": "b8e61a53-1951-436e-a485-18c77697c930",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "defer",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " statements marks a function to be executed at a later time."
            ]
          ]
        },
        "type": "text",
        "version": 12,
        "inline_content": [
          {
            "Text": "defer",
            "AttrFlags": 2
          },
          {
            "Text": " statements marks a function to be executed at a later time."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156054131,
        "id": "65aa95fd-5a0b-41e5-974c-87f8406df7dd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532156054131,
        "parent_id": "b8e61a53-1951-436e-a485-18c77697c930",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Defer statement is an ordinary function call prefixed by the keyword "
            ],
            [
              "defer",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Defer statement is an ordinary function call prefixed by the keyword "
          },
          {
            "Text": "defer",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156054131,
        "id": "09ec83df-58d2-4feb-ba58-7c80cc90b221",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532205323777,
        "parent_id": "b8e61a53-1951-436e-a485-18c77697c930",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Go"
            ]
          ],
          "title": [
            [
              "defer someFunction()"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "defer someFunction()",
        "code_language": "Go"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156054132,
        "id": "0df33b65-d1fa-4609-943e-d51cbabbd4bd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532156054132,
        "parent_id": "b8e61a53-1951-436e-a485-18c77697c930",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A deferred function is executed once the function that contains the "
            ],
            [
              "defer",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " statement returns. Actual call to the deferred function occurs when the enclosing function: - executes a return statement - falls off the end - panics"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A deferred function is executed once the function that contains the "
          },
          {
            "Text": "defer",
            "AttrFlags": 2
          },
          {
            "Text": " statement returns. Actual call to the deferred function occurs when the enclosing function: - executes a return statement - falls off the end - panics"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156054132,
        "id": "68c5712b-94d2-42cc-bc72-4a504e76b573",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1538785745612,
        "parent_id": "b8e61a53-1951-436e-a485-18c77697c930",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Example:"
            ]
          ]
        },
        "type": "text",
        "version": 3,
        "inline_content": [
          {
            "Text": "Example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552277808545,
        "id": "5bfb484d-6621-4b70-9709-65ab281d782f",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552277760000,
        "parent_id": "b8e61a53-1951-436e-a485-18c77697c930",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Go"
            ]
          ],
          "title": [
            [
              "// :glot\npackage main\n\nimport \"fmt\"\n\n// :show start\nfunc logExit(name string) {\n\tfmt.Printf(\"Function %s returned\\n\", name)\n}\n\nfunc main() {\n\tfmt.Println(\"First main statement\")\n\tdefer logExit(\"main\") // position of defer statement here does not matter\n\tfmt.Println(\"Last main statement\")\n}\n\n// :show end"
            ]
          ]
        },
        "type": "code",
        "version": 15,
        "code": "// :glot\npackage main\n\nimport \"fmt\"\n\n// :show start\nfunc logExit(name string) {\n\tfmt.Printf(\"Function %s returned\\n\", name)\n}\n\nfunc main() {\n\tfmt.Println(\"First main statement\")\n\tdefer logExit(\"main\") // position of defer statement here does not matter\n\tfmt.Println(\"Last main statement\")\n}\n\n// :show end",
        "code_language": "Go"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156054132,
        "id": "d039ad6a-92c3-4d8f-91b6-8fad9138d8fa",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532156054132,
        "parent_id": "b8e61a53-1951-436e-a485-18c77697c930",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If a function has multiple deferred statements, they form a stack. The last "
            ],
            [
              "defer",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is the first one to execute after the enclosing function returns, followed by subsequent calls to preceding "
            ],
            [
              "defer",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "s in order (below example returns by causing a panic):"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If a function has multiple deferred statements, they form a stack. The last "
          },
          {
            "Text": "defer",
            "AttrFlags": 2
          },
          {
            "Text": " is the first one to execute after the enclosing function returns, followed by subsequent calls to preceding "
          },
          {
            "Text": "defer",
            "AttrFlags": 2
          },
          {
            "Text": "s in order (below example returns by causing a panic):"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552277825037,
        "id": "cd26434c-5fdf-462e-81f3-a9944102e5d6",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552277820000,
        "parent_id": "b8e61a53-1951-436e-a485-18c77697c930",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Go"
            ]
          ],
          "title": [
            [
              "// :glot\n// allow error\npackage main\n\nimport \"fmt\"\n\n// :show start\nfunc logNum(i int) {\n\tfmt.Printf(\"Num %d\\n\", i)\n}\n\nfunc main() {\n\tdefer logNum(1)\n\tfmt.Println(\"First main statement\")\n\tdefer logNum(2)\n\tdefer logNum(3)\n\tpanic(\"panic occurred\")\n\n\tfmt.Println(\"Last main statement\") // not printed\n\n\t// not deferred since execution flow never reaches this line\n\tdefer logNum(3)\n}\n\n// :show end"
            ]
          ]
        },
        "type": "code",
        "version": 15,
        "code": "// :glot\n// allow error\npackage main\n\nimport \"fmt\"\n\n// :show start\nfunc logNum(i int) {\n\tfmt.Printf(\"Num %d\\n\", i)\n}\n\nfunc main() {\n\tdefer logNum(1)\n\tfmt.Println(\"First main statement\")\n\tdefer logNum(2)\n\tdefer logNum(3)\n\tpanic(\"panic occurred\")\n\n\tfmt.Println(\"Last main statement\") // not printed\n\n\t// not deferred since execution flow never reaches this line\n\tdefer logNum(3)\n}\n\n// :show end",
        "code_language": "Go"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156054133,
        "id": "c7e88d22-6236-486b-a6dc-82d67d7942a4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1538785763498,
        "parent_id": "b8e61a53-1951-436e-a485-18c77697c930",
        "parent_table": "block",
        "type": "text",
        "version": 3
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156054133,
        "id": "213f4702-bbcd-477c-84d4-51ee3595c261",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1538897756826,
        "parent_id": "b8e61a53-1951-436e-a485-18c77697c930",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Deferred functions have their arguments evaluated at the time "
            ],
            [
              "defer",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " executes:"
            ]
          ]
        },
        "type": "text",
        "version": 6,
        "inline_content": [
          {
            "Text": "Deferred functions have their arguments evaluated at the time "
          },
          {
            "Text": "defer",
            "AttrFlags": 2
          },
          {
            "Text": " executes:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552277835943,
        "id": "5f829e59-db3e-4c48-b82c-519ce50620ba",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552277820000,
        "parent_id": "b8e61a53-1951-436e-a485-18c77697c930",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Go"
            ]
          ],
          "title": [
            [
              "// :glot\npackage main\n\nimport \"fmt\"\n\n// :show start\n\nfunc logNum(i int) {\n\tfmt.Printf(\"Num %d\\n\", i)\n}\n\nfunc main() {\n\ti := 1\n\tdefer logNum(i) // deferred function call: logNum(1)\n\tfmt.Println(\"First main statement\")\n\ti++\n\tdefer logNum(i)     // deferred function call: logNum(2)\n\tdefer logNum(i * i) // deferred function call: logNum(4)\n}\n\n// :show end"
            ]
          ]
        },
        "type": "code",
        "version": 17,
        "code": "// :glot\npackage main\n\nimport \"fmt\"\n\n// :show start\n\nfunc logNum(i int) {\n\tfmt.Printf(\"Num %d\\n\", i)\n}\n\nfunc main() {\n\ti := 1\n\tdefer logNum(i) // deferred function call: logNum(1)\n\tfmt.Println(\"First main statement\")\n\ti++\n\tdefer logNum(i)     // deferred function call: logNum(2)\n\tdefer logNum(i * i) // deferred function call: logNum(4)\n}\n\n// :show end",
        "code_language": "Go"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156054133,
        "id": "28a784bc-229e-4627-ac94-1eb5456bf304",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1538897557221,
        "parent_id": "b8e61a53-1951-436e-a485-18c77697c930",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If a function has named return values, a deferred anonymous function within that function can access and update the returned value even after the function has returned:"
            ]
          ]
        },
        "type": "text",
        "version": 7,
        "inline_content": [
          {
            "Text": "If a function has named return values, a deferred anonymous function within that function can access and update the returned value even after the function has returned:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552277849561,
        "id": "42abf2fd-c074-4c6b-8869-ac9176707bf6",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552277820000,
        "parent_id": "b8e61a53-1951-436e-a485-18c77697c930",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Go"
            ]
          ],
          "title": [
            [
              "// :glot\npackage main\n\nimport \"fmt\"\n\n// :show start\n\nfunc plusOne(i int) (result int) {\n\t// anonymous function must be called by adding ()\n\tdefer func() { result++ }()\n\n\t// i is returned as result, which is updated by deferred function above\n\t// after execution of below return\n\treturn i\n}\n\nfunc main() {\n\tfmt.Println(plusOne(1)) // 2\n}\n\n// :show end"
            ]
          ]
        },
        "type": "code",
        "version": 15,
        "code": "// :glot\npackage main\n\nimport \"fmt\"\n\n// :show start\n\nfunc plusOne(i int) (result int) {\n\t// anonymous function must be called by adding ()\n\tdefer func() { result++ }()\n\n\t// i is returned as result, which is updated by deferred function above\n\t// after execution of below return\n\treturn i\n}\n\nfunc main() {\n\tfmt.Println(plusOne(1)) // 2\n}\n\n// :show end",
        "code_language": "Go"
      }
    ],
    "title": "Defer in depth",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}