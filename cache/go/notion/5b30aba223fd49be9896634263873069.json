{
  "ID": "5b30aba2-23fd-49be-9896-634263873069",
  "Root": {
    "alive": true,
    "content": [
      "370b489d-cdec-47c7-8d49-fe87073cf955",
      "f9ee9664-2a10-4ba8-ad38-2b609c284c3e",
      "f796c3f4-a0bc-4659-bc87-8b15ace51a7f",
      "79403c8d-ee2b-4899-abac-f027f0e64f7e",
      "9ec80330-5bdb-4e2a-8926-903be6532176",
      "d4233cf1-62a7-41b3-890d-c80b291f3674",
      "06218053-149a-4d0e-ada4-2a0556df1273",
      "ece9ca0b-3d8e-4a6b-a065-446079bf45c3",
      "85c6154f-3e48-46dc-aea0-2079b5a3c84f",
      "2789eee4-2ad7-452e-aadd-0a3b87c86d15",
      "5d85522e-7248-41fc-bdae-47018152e97e"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1532156152201,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "5b30aba2-23fd-49be-9896-634263873069",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552285560000,
    "parent_id": "cabbd741-52a7-4e29-8be4-afcd41ed10b2",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "if action"
        ]
      ]
    },
    "type": "page",
    "version": 92,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532209413948,
        "id": "370b489d-cdec-47c7-8d49-fe87073cf955",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532209417439,
        "parent_id": "5b30aba2-23fd-49be-9896-634263873069",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "$Id: 219"
            ]
          ]
        },
        "type": "text",
        "version": 12,
        "inline_content": [
          {
            "Text": "$Id: 219"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532209417439,
        "id": "f9ee9664-2a10-4ba8-ad38-2b609c284c3e",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532209419379,
        "parent_id": "5b30aba2-23fd-49be-9896-634263873069",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "$SOId: 13458"
            ]
          ]
        },
        "type": "text",
        "version": 12,
        "inline_content": [
          {
            "Text": "$SOId: 13458"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532209419379,
        "id": "f796c3f4-a0bc-4659-bc87-8b15ace51a7f",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532209419768,
        "parent_id": "5b30aba2-23fd-49be-9896-634263873069",
        "parent_table": "block",
        "type": "text",
        "version": 10
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156152199,
        "id": "79403c8d-ee2b-4899-abac-f027f0e64f7e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1538797456938,
        "parent_id": "5b30aba2-23fd-49be-9896-634263873069",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To conditionally render parts of the template, use "
            ],
            [
              "if",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " action:"
            ]
          ]
        },
        "type": "text",
        "version": 3,
        "inline_content": [
          {
            "Text": "To conditionally render parts of the template, use "
          },
          {
            "Text": "if",
            "AttrFlags": 2
          },
          {
            "Text": " action:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552285552900,
        "id": "9ec80330-5bdb-4e2a-8926-903be6532176",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552285500000,
        "parent_id": "5b30aba2-23fd-49be-9896-634263873069",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Go"
            ]
          ],
          "title": [
            [
              "// :glot\npackage main\n\nimport (\n\t\"log\"\n\t\"os\"\n\t\"text/template\"\n)\n\n// :show start\nconst tmplStr = `{{range . -}}\n{{if .IsNew}}'{{.Name}}' is new{{else}}'{{.Name}}' is not new{{end}}\n{{end}}`\n\n// :show end\n\nfunc main() {\n\t// :show start\n\tt := template.Must(template.New(\"if\").Parse(tmplStr))\n\n\tdata := []struct {\n\t\tName  string\n\t\tIsNew bool\n\t}{\n\t\t{\"Bridge\", false},\n\t\t{\"Electric battery\", true},\n\t}\n\n\terr := t.Execute(os.Stdout, data)\n\tif err != nil {\n\t\tlog.Fatalf(\"t.Execute() failed with '%s'\\n\", err)\n\t}\n\t// :show end\n}"
            ]
          ]
        },
        "type": "code",
        "version": 15,
        "code": "// :glot\npackage main\n\nimport (\n\t\"log\"\n\t\"os\"\n\t\"text/template\"\n)\n\n// :show start\nconst tmplStr = `{{range . -}}\n{{if .IsNew}}'{{.Name}}' is new{{else}}'{{.Name}}' is not new{{end}}\n{{end}}`\n\n// :show end\n\nfunc main() {\n\t// :show start\n\tt := template.Must(template.New(\"if\").Parse(tmplStr))\n\n\tdata := []struct {\n\t\tName  string\n\t\tIsNew bool\n\t}{\n\t\t{\"Bridge\", false},\n\t\t{\"Electric battery\", true},\n\t}\n\n\terr := t.Execute(os.Stdout, data)\n\tif err != nil {\n\t\tlog.Fatalf(\"t.Execute() failed with '%s'\\n\", err)\n\t}\n\t// :show end\n}",
        "code_language": "Go"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156152200,
        "id": "d4233cf1-62a7-41b3-890d-c80b291f3674",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532156152200,
        "parent_id": "5b30aba2-23fd-49be-9896-634263873069",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "false values"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "false values"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156152200,
        "id": "06218053-149a-4d0e-ada4-2a0556df1273",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1538797478736,
        "parent_id": "5b30aba2-23fd-49be-9896-634263873069",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Templating uses “truthy” logic for deciding what values are true or false in the context of "
            ],
            [
              "if",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " action:"
            ]
          ]
        },
        "type": "text",
        "version": 3,
        "inline_content": [
          {
            "Text": "Templating uses “truthy” logic for deciding what values are true or false in the context of "
          },
          {
            "Text": "if",
            "AttrFlags": 2
          },
          {
            "Text": " action:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552285565367,
        "id": "ece9ca0b-3d8e-4a6b-a065-446079bf45c3",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552285560000,
        "parent_id": "5b30aba2-23fd-49be-9896-634263873069",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Go"
            ]
          ],
          "title": [
            [
              "// :glot\npackage main\n\nimport (\n\t\"log\"\n\t\"math\"\n\t\"os\"\n\t\"text/template\"\n)\n\n// :show start\nconst tmplStr = `{{range . -}}\n{{printf \"%- 16s\" .Name}} is: {{if .Value}}true{{else}}false{{end}}\n{{end}}`\n\n// :show end\n\nfunc main() {\n\t// :show start\n\tt := template.Must(template.New(\"if\").Parse(tmplStr))\n\n\tvar nilPtr *string = nil\n\tvar nilSlice []float32\n\temptySlice := []int{}\n\n\tdata := []struct {\n\t\tName  string\n\t\tValue interface{}\n\t}{\n\t\t{\"bool false\", false},\n\t\t{\"bool true\", true},\n\t\t{\"integer 0\", 0},\n\t\t{\"integer 1\", 1},\n\t\t{\"float32 0\", float32(0)},\n\t\t{\"float64 NaN\", math.NaN},\n\t\t{\"empty string\", \"\"},\n\t\t{\"non-empty string\", \"haha\"},\n\t\t{\"nil slice\", nilSlice},\n\t\t{\"empty slice\", emptySlice},\n\t\t{\"non-empty slice\", []int{3}},\n\t\t{\"nil pointer\", nilPtr},\n\t}\n\n\terr := t.Execute(os.Stdout, data)\n\tif err != nil {\n\t\tlog.Fatalf(\"t.Execute() failed with '%s'\\n\", err)\n\t}\n\t// :show end\n}"
            ]
          ]
        },
        "type": "code",
        "version": 15,
        "code": "// :glot\npackage main\n\nimport (\n\t\"log\"\n\t\"math\"\n\t\"os\"\n\t\"text/template\"\n)\n\n// :show start\nconst tmplStr = `{{range . -}}\n{{printf \"%- 16s\" .Name}} is: {{if .Value}}true{{else}}false{{end}}\n{{end}}`\n\n// :show end\n\nfunc main() {\n\t// :show start\n\tt := template.Must(template.New(\"if\").Parse(tmplStr))\n\n\tvar nilPtr *string = nil\n\tvar nilSlice []float32\n\temptySlice := []int{}\n\n\tdata := []struct {\n\t\tName  string\n\t\tValue interface{}\n\t}{\n\t\t{\"bool false\", false},\n\t\t{\"bool true\", true},\n\t\t{\"integer 0\", 0},\n\t\t{\"integer 1\", 1},\n\t\t{\"float32 0\", float32(0)},\n\t\t{\"float64 NaN\", math.NaN},\n\t\t{\"empty string\", \"\"},\n\t\t{\"non-empty string\", \"haha\"},\n\t\t{\"nil slice\", nilSlice},\n\t\t{\"empty slice\", emptySlice},\n\t\t{\"non-empty slice\", []int{3}},\n\t\t{\"nil pointer\", nilPtr},\n\t}\n\n\terr := t.Execute(os.Stdout, data)\n\tif err != nil {\n\t\tlog.Fatalf(\"t.Execute() failed with '%s'\\n\", err)\n\t}\n\t// :show end\n}",
        "code_language": "Go"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156152201,
        "id": "85c6154f-3e48-46dc-aea0-2079b5a3c84f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532156152201,
        "parent_id": "5b30aba2-23fd-49be-9896-634263873069",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Avoid printing empty slices"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Avoid printing empty slices"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1532156152201,
        "id": "2789eee4-2ad7-452e-aadd-0a3b87c86d15",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1538797499894,
        "parent_id": "5b30aba2-23fd-49be-9896-634263873069",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Truthy logic is useful when we want to show different text if a list of items is empty:"
            ]
          ]
        },
        "type": "text",
        "version": 5,
        "inline_content": [
          {
            "Text": "Truthy logic is useful when we want to show different text if a list of items is empty:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552285580624,
        "id": "5d85522e-7248-41fc-bdae-47018152e97e",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552285560000,
        "parent_id": "5b30aba2-23fd-49be-9896-634263873069",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Go"
            ]
          ],
          "title": [
            [
              "// :glot\npackage main\n\nimport (\n\t\"log\"\n\t\"os\"\n\t\"text/template\"\n)\n\n// :show start\ntype UserTweets struct {\n\tUser   string\n\tTweets []string\n}\n\nconst tmplStr = `\n{{- if not .Tweets -}}\nUser '{{.User}}' has no tweets.\n{{ else -}}\nUser '{{.User}}' has {{ len .Tweets }} tweets:\n{{ range .Tweets -}}\n  '{{ . }}'\n{{ end }}\n{{- end}}`\n\n// :show end\n\nfunc main() {\n\t// :show start\n\tt := template.Must(template.New(\"if\").Parse(tmplStr))\n\n\tdata := UserTweets{\n\t\tUser: \"kjk\",\n\t}\n\terr := t.Execute(os.Stdout, data)\n\tif err != nil {\n\t\tlog.Fatalf(\"t.Execute() failed with '%s'\\n\", err)\n\t}\n\n\tdata = UserTweets{\n\t\tUser:   \"masa\",\n\t\tTweets: []string{\"tweet one\", \"tweet two\"},\n\t}\n\terr = t.Execute(os.Stdout, data)\n\tif err != nil {\n\t\tlog.Fatalf(\"t.Execute() failed with '%s'\\n\", err)\n\t}\n\n\t// :show end\n}"
            ]
          ]
        },
        "type": "code",
        "version": 15,
        "code": "// :glot\npackage main\n\nimport (\n\t\"log\"\n\t\"os\"\n\t\"text/template\"\n)\n\n// :show start\ntype UserTweets struct {\n\tUser   string\n\tTweets []string\n}\n\nconst tmplStr = `\n{{- if not .Tweets -}}\nUser '{{.User}}' has no tweets.\n{{ else -}}\nUser '{{.User}}' has {{ len .Tweets }} tweets:\n{{ range .Tweets -}}\n  '{{ . }}'\n{{ end }}\n{{- end}}`\n\n// :show end\n\nfunc main() {\n\t// :show start\n\tt := template.Must(template.New(\"if\").Parse(tmplStr))\n\n\tdata := UserTweets{\n\t\tUser: \"kjk\",\n\t}\n\terr := t.Execute(os.Stdout, data)\n\tif err != nil {\n\t\tlog.Fatalf(\"t.Execute() failed with '%s'\\n\", err)\n\t}\n\n\tdata = UserTweets{\n\t\tUser:   \"masa\",\n\t\tTweets: []string{\"tweet one\", \"tweet two\"},\n\t}\n\terr = t.Execute(os.Stdout, data)\n\tif err != nil {\n\t\tlog.Fatalf(\"t.Execute() failed with '%s'\\n\", err)\n\t}\n\n\t// :show end\n}",
        "code_language": "Go"
      }
    ],
    "title": "if action",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 29
    }
  ],
  "Tables": null
}