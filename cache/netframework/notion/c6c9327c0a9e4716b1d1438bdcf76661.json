{
  "ID": "c6c9327c-0a9e-4716-b1d1-438bdcf76661",
  "Root": {
    "alive": true,
    "content": [
      "43c56b9e-ae96-4410-af3f-4303a8d2fcfc",
      "c05590c3-8c39-477b-a644-00445f11a332",
      "a8829fab-bda3-4eb4-bbc2-02323bedd0e6",
      "2de1a6cf-faac-4210-bc8b-7585c5fa9d3b",
      "cbc621ba-574a-41fb-b330-2a75d34a8cf7",
      "b2838b3a-286a-4160-911f-60d5a168c998",
      "4545e67c-1470-4d4a-9a53-e892aff52e0a",
      "c9e61229-da14-4fb7-8938-2a581ed764ab",
      "2f7b9d46-e832-41f9-add6-439149096fad",
      "3caf49af-010e-4e5c-aa88-432d1ee26707",
      "335941c7-6265-4eb9-badd-6b6e49da53af",
      "84b1bd44-0ea2-42a3-a628-4ff6d66a0713",
      "5385825d-70e9-48fb-af1c-9ad52aff52ff",
      "42c4f8ca-445e-4a54-88a0-ec47ca04a256",
      "62849095-9966-447e-83b7-0d6929c6646f",
      "9583891d-116a-4955-9e5e-14c259b8661c",
      "fe441d3c-5581-4e0a-ae0b-51f392cde00f",
      "58f10006-eff9-4013-bbf6-5b994642a783",
      "9e444316-d29d-4aee-8822-62c168e491bf",
      "158514b6-a4bb-4fd1-8705-86a77df895b4",
      "ad2bf3da-566e-4910-bbbe-d57c88944874"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551951569479,
    "id": "c6c9327c-0a9e-4716-b1d1-438bdcf76661",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551951569479,
    "parent_id": "13fcd1ea-9ee9-4041-b996-ee82c3fe1e11",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "030 Why We Use Dependency Injection Containers IoC Containers"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551951569470,
        "id": "43c56b9e-ae96-4410-af3f-4303a8d2fcfc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551951569470,
        "parent_id": "c6c9327c-0a9e-4716-b1d1-438bdcf76661",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Dependency injection means writing classes so that they do not control their dependencies - instead, their dependencies are provided to them (“injected.”)"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Dependency injection means writing classes so that they do not control their dependencies - instead, their dependencies are provided to them (“injected.”)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551951569473,
        "id": "c05590c3-8c39-477b-a644-00445f11a332",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551951569473,
        "parent_id": "c6c9327c-0a9e-4716-b1d1-438bdcf76661",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This is not the same thing as using a dependency injection framework (often called a “DI container”, “IoC container”, or just “container”) like Castle Windsor, Autofac, SimpleInjector, Ninject, Unity, or others."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This is not the same thing as using a dependency injection framework (often called a “DI container”, “IoC container”, or just “container”) like Castle Windsor, Autofac, SimpleInjector, Ninject, Unity, or others."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551951569473,
        "id": "a8829fab-bda3-4eb4-bbc2-02323bedd0e6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551951569473,
        "parent_id": "c6c9327c-0a9e-4716-b1d1-438bdcf76661",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A container just makes dependency injection easier. For example, suppose you write a number of classes that rely on dependency injection. One class depends on several interfaces, the classes that implement those interfaces depend on other interfaces, and so on. Some depend on specific values. And just for fun, some of those classes implement "
            ],
            [
              "IDisposable",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and need to be disposed."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A container just makes dependency injection easier. For example, suppose you write a number of classes that rely on dependency injection. One class depends on several interfaces, the classes that implement those interfaces depend on other interfaces, and so on. Some depend on specific values. And just for fun, some of those classes implement "
          },
          {
            "Text": "IDisposable",
            "AttrFlags": 2
          },
          {
            "Text": " and need to be disposed."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551951569474,
        "id": "2de1a6cf-faac-4210-bc8b-7585c5fa9d3b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551951569474,
        "parent_id": "c6c9327c-0a9e-4716-b1d1-438bdcf76661",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Each individual class is well-written and easy to test. But now there’s a different problem: Creating an instance of a class has become much more complicated. Suppose we’re creating an instance of a "
            ],
            [
              "CustomerService",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " class. It has dependencies and its dependencies have dependencies. Constructing an instance might look something like this:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Each individual class is well-written and easy to test. But now there’s a different problem: Creating an instance of a class has become much more complicated. Suppose we’re creating an instance of a "
          },
          {
            "Text": "CustomerService",
            "AttrFlags": 2
          },
          {
            "Text": " class. It has dependencies and its dependencies have dependencies. Constructing an instance might look something like this:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551951569474,
        "id": "cbc621ba-574a-41fb-b330-2a75d34a8cf7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551951569474,
        "parent_id": "c6c9327c-0a9e-4716-b1d1-438bdcf76661",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public CustomerData GetCustomerData(string customerNumber)\n{\n    var customerApiEndpoint = ConfigurationManager.AppSettings[\"customerApi:customerApiEndpoint\"];\n    var logFilePath = ConfigurationManager.AppSettings[\"logwriter:logFilePath\"];\n    var authConnectionString = ConfigurationManager.ConnectionStrings[\"authorization\"].ConnectionString;\n    using(var logWriter = new LogWriter(logFilePath ))\n    {\n        using(var customerApiClient = new CustomerApiClient(customerApiEndpoint))\n        {\n            var customerService = new CustomerService(\n                new SqlAuthorizationRepository(authorizationConnectionString, logWriter),\n                new CustomerDataRepository(customerApiClient, logWriter),\n                logWriter\n            );   \n            \n            // All this just to create an instance of CustomerService!         \n            return customerService.GetCustomerData(string customerNumber);\n        }\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public CustomerData GetCustomerData(string customerNumber)\n{\n    var customerApiEndpoint = ConfigurationManager.AppSettings[\"customerApi:customerApiEndpoint\"];\n    var logFilePath = ConfigurationManager.AppSettings[\"logwriter:logFilePath\"];\n    var authConnectionString = ConfigurationManager.ConnectionStrings[\"authorization\"].ConnectionString;\n    using(var logWriter = new LogWriter(logFilePath ))\n    {\n        using(var customerApiClient = new CustomerApiClient(customerApiEndpoint))\n        {\n            var customerService = new CustomerService(\n                new SqlAuthorizationRepository(authorizationConnectionString, logWriter),\n                new CustomerDataRepository(customerApiClient, logWriter),\n                logWriter\n            );   \n            \n            // All this just to create an instance of CustomerService!         \n            return customerService.GetCustomerData(string customerNumber);\n        }\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551951569474,
        "id": "b2838b3a-286a-4160-911f-60d5a168c998",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551951569474,
        "parent_id": "c6c9327c-0a9e-4716-b1d1-438bdcf76661",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You might wonder, why not put the whole giant construction in a separate function that just returns "
            ],
            [
              "CustomerService",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "? One reason is that because the dependencies for each class are injected into it, a class isn’t responsible for knowing whether those dependencies are "
            ],
            [
              "IDisposable",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or disposing them. It just uses them. So if a we had a "
            ],
            [
              "GetCustomerService()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " function that returned a fully-constructed "
            ],
            [
              "CustomerService",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", that class might contain a number of disposable resources and no way to access or dispose them."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You might wonder, why not put the whole giant construction in a separate function that just returns "
          },
          {
            "Text": "CustomerService",
            "AttrFlags": 2
          },
          {
            "Text": "? One reason is that because the dependencies for each class are injected into it, a class isn’t responsible for knowing whether those dependencies are "
          },
          {
            "Text": "IDisposable",
            "AttrFlags": 2
          },
          {
            "Text": " or disposing them. It just uses them. So if a we had a "
          },
          {
            "Text": "GetCustomerService()",
            "AttrFlags": 2
          },
          {
            "Text": " function that returned a fully-constructed "
          },
          {
            "Text": "CustomerService",
            "AttrFlags": 2
          },
          {
            "Text": ", that class might contain a number of disposable resources and no way to access or dispose them."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551951569474,
        "id": "4545e67c-1470-4d4a-9a53-e892aff52e0a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551951569474,
        "parent_id": "c6c9327c-0a9e-4716-b1d1-438bdcf76661",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "And aside from disposing "
            ],
            [
              "IDisposable",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", who wants to call a series of nested constructors like that, ever? That’s a short example. It could get much, much worse. Again, that doesn’t mean that we wrote the classes the wrong way. The classes might be individually perfect. The challenge is composing them together."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "And aside from disposing "
          },
          {
            "Text": "IDisposable",
            "AttrFlags": 2
          },
          {
            "Text": ", who wants to call a series of nested constructors like that, ever? That’s a short example. It could get much, much worse. Again, that doesn’t mean that we wrote the classes the wrong way. The classes might be individually perfect. The challenge is composing them together."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551951569475,
        "id": "c9e61229-da14-4fb7-8938-2a581ed764ab",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551951569475,
        "parent_id": "c6c9327c-0a9e-4716-b1d1-438bdcf76661",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A dependency injection container simplifies that. It allows us to specify which class or value should be used to fulfill each dependency. This slightly oversimplified example uses Castle Windsor:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A dependency injection container simplifies that. It allows us to specify which class or value should be used to fulfill each dependency. This slightly oversimplified example uses Castle Windsor:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551951569475,
        "id": "2f7b9d46-e832-41f9-add6-439149096fad",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551951569475,
        "parent_id": "c6c9327c-0a9e-4716-b1d1-438bdcf76661",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "var container = new WindsorContainer()\ncontainer.Register(\n    Component.For\u003cCustomerService\u003e(),\n    Component.For\u003cILogWriter, LogWriter\u003e()\n        .DependsOn(Dependency.OnAppSettingsValue(\"logFilePath\", \"logWriter:logFilePath\")),\n    Component.For\u003cIAuthorizationRepository, SqlAuthorizationRepository\u003e()\n        .DependsOn(Dependency.OnValue(connectionString, ConfigurationManager.ConnectionStrings[\"authorization\"].ConnectionString)),\n    Component.For\u003cICustomerDataProvider, CustomerApiClient\u003e()\n         .DependsOn(Dependency.OnAppSettingsValue(\"apiEndpoint\", \"customerApi:customerApiEndpoint\"))   \n);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "var container = new WindsorContainer()\ncontainer.Register(\n    Component.For\u003cCustomerService\u003e(),\n    Component.For\u003cILogWriter, LogWriter\u003e()\n        .DependsOn(Dependency.OnAppSettingsValue(\"logFilePath\", \"logWriter:logFilePath\")),\n    Component.For\u003cIAuthorizationRepository, SqlAuthorizationRepository\u003e()\n        .DependsOn(Dependency.OnValue(connectionString, ConfigurationManager.ConnectionStrings[\"authorization\"].ConnectionString)),\n    Component.For\u003cICustomerDataProvider, CustomerApiClient\u003e()\n         .DependsOn(Dependency.OnAppSettingsValue(\"apiEndpoint\", \"customerApi:customerApiEndpoint\"))   \n);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551951569475,
        "id": "3caf49af-010e-4e5c-aa88-432d1ee26707",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551951569475,
        "parent_id": "c6c9327c-0a9e-4716-b1d1-438bdcf76661",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We call this “registering dependencies” or “configuring the container.” Translated, this tells our "
            ],
            [
              "WindsorContainer",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "We call this “registering dependencies” or “configuring the container.” Translated, this tells our "
          },
          {
            "Text": "WindsorContainer",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551951569476,
        "id": "335941c7-6265-4eb9-badd-6b6e49da53af",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551951569476,
        "parent_id": "c6c9327c-0a9e-4716-b1d1-438bdcf76661",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If a class requires "
            ],
            [
              "ILogWriter",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", create an instance of "
            ],
            [
              "LogWriter",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". "
            ],
            [
              "LogWriter",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " requires a file path. Use this value from "
            ],
            [
              "AppSettings",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "If a class requires "
          },
          {
            "Text": "ILogWriter",
            "AttrFlags": 2
          },
          {
            "Text": ", create an instance of "
          },
          {
            "Text": "LogWriter",
            "AttrFlags": 2
          },
          {
            "Text": ". "
          },
          {
            "Text": "LogWriter",
            "AttrFlags": 2
          },
          {
            "Text": " requires a file path. Use this value from "
          },
          {
            "Text": "AppSettings",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551951569477,
        "id": "84b1bd44-0ea2-42a3-a628-4ff6d66a0713",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551951569477,
        "parent_id": "c6c9327c-0a9e-4716-b1d1-438bdcf76661",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If a class requires "
            ],
            [
              "IAuthorizationRepository",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", create an instance of "
            ],
            [
              "SqlAuthorizationRepository",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". It requires a connection string. Use this value from the "
            ],
            [
              "ConnectionStrings",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " section."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "If a class requires "
          },
          {
            "Text": "IAuthorizationRepository",
            "AttrFlags": 2
          },
          {
            "Text": ", create an instance of "
          },
          {
            "Text": "SqlAuthorizationRepository",
            "AttrFlags": 2
          },
          {
            "Text": ". It requires a connection string. Use this value from the "
          },
          {
            "Text": "ConnectionStrings",
            "AttrFlags": 2
          },
          {
            "Text": " section."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551951569477,
        "id": "5385825d-70e9-48fb-af1c-9ad52aff52ff",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551951569477,
        "parent_id": "c6c9327c-0a9e-4716-b1d1-438bdcf76661",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If a class requires "
            ],
            [
              "ICustomerDataProvider",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", create a "
            ],
            [
              "CustomerApiClient",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and provide the string it needs from "
            ],
            [
              "AppSettings",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "If a class requires "
          },
          {
            "Text": "ICustomerDataProvider",
            "AttrFlags": 2
          },
          {
            "Text": ", create a "
          },
          {
            "Text": "CustomerApiClient",
            "AttrFlags": 2
          },
          {
            "Text": " and provide the string it needs from "
          },
          {
            "Text": "AppSettings",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551951569477,
        "id": "42c4f8ca-445e-4a54-88a0-ec47ca04a256",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551951569477,
        "parent_id": "c6c9327c-0a9e-4716-b1d1-438bdcf76661",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When we request a dependency from the container we call that “resolving” a dependency. It’s bad practice to do that directly using the container, but that’s a different story. For demonstration purposes, we could now do this:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When we request a dependency from the container we call that “resolving” a dependency. It’s bad practice to do that directly using the container, but that’s a different story. For demonstration purposes, we could now do this:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551951569477,
        "id": "62849095-9966-447e-83b7-0d6929c6646f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551951569477,
        "parent_id": "c6c9327c-0a9e-4716-b1d1-438bdcf76661",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "var customerService = container.Resolve\u003cCustomerService\u003e();\nvar data = customerService.GetCustomerData(customerNumber);\ncontainer.Release(customerService);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "var customerService = container.Resolve\u003cCustomerService\u003e();\nvar data = customerService.GetCustomerData(customerNumber);\ncontainer.Release(customerService);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551951569478,
        "id": "9583891d-116a-4955-9e5e-14c259b8661c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551951569478,
        "parent_id": "c6c9327c-0a9e-4716-b1d1-438bdcf76661",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The container knows that "
            ],
            [
              "CustomerService",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " depends on "
            ],
            [
              "IAuthorizationRepository",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "ICustomerDataProvider",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". It knows what classes it needs to create to fulfill those requirements. Those classes, in turn, have more dependencies, and the container knows how to fulfill those. It will create every class it needs to until it can return an instance of "
            ],
            [
              "CustomerService",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The container knows that "
          },
          {
            "Text": "CustomerService",
            "AttrFlags": 2
          },
          {
            "Text": " depends on "
          },
          {
            "Text": "IAuthorizationRepository",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "ICustomerDataProvider",
            "AttrFlags": 2
          },
          {
            "Text": ". It knows what classes it needs to create to fulfill those requirements. Those classes, in turn, have more dependencies, and the container knows how to fulfill those. It will create every class it needs to until it can return an instance of "
          },
          {
            "Text": "CustomerService",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551951569478,
        "id": "fe441d3c-5581-4e0a-ae0b-51f392cde00f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551951569478,
        "parent_id": "c6c9327c-0a9e-4716-b1d1-438bdcf76661",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If it gets to a point where a class requires a dependency that we haven’t registered, like "
            ],
            [
              "IDoesSomethingElse",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", then when we try to resolve "
            ],
            [
              "CustomerService",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " it will throw a clear exception telling us that we haven’t registered anything to fulfill that requirement."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If it gets to a point where a class requires a dependency that we haven’t registered, like "
          },
          {
            "Text": "IDoesSomethingElse",
            "AttrFlags": 2
          },
          {
            "Text": ", then when we try to resolve "
          },
          {
            "Text": "CustomerService",
            "AttrFlags": 2
          },
          {
            "Text": " it will throw a clear exception telling us that we haven’t registered anything to fulfill that requirement."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551951569478,
        "id": "58f10006-eff9-4013-bbf6-5b994642a783",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551951569478,
        "parent_id": "c6c9327c-0a9e-4716-b1d1-438bdcf76661",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Each DI framework behaves a little differently, but typically they give us some control over how certain classes are instantiated. For example, do we want it to create one instance of "
            ],
            [
              "LogWriter",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and provide it to every class that depends on "
            ],
            [
              "ILogWriter",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", or do we want it to create a new one every time? Most containers have a way to specify that."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Each DI framework behaves a little differently, but typically they give us some control over how certain classes are instantiated. For example, do we want it to create one instance of "
          },
          {
            "Text": "LogWriter",
            "AttrFlags": 2
          },
          {
            "Text": " and provide it to every class that depends on "
          },
          {
            "Text": "ILogWriter",
            "AttrFlags": 2
          },
          {
            "Text": ", or do we want it to create a new one every time? Most containers have a way to specify that."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551951569479,
        "id": "9e444316-d29d-4aee-8822-62c168e491bf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551951569479,
        "parent_id": "c6c9327c-0a9e-4716-b1d1-438bdcf76661",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "What about classes that implement "
            ],
            [
              "IDisposable",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "? That’s why we call "
            ],
            [
              "container.Release(customerService);",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " at the end. Most containers (including Windsor) will step back through all of the dependencies created and "
            ],
            [
              "Dispose",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " the ones that need disposing. If "
            ],
            [
              "CustomerService",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is "
            ],
            [
              "IDisposable",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " it will dispose that too."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "What about classes that implement "
          },
          {
            "Text": "IDisposable",
            "AttrFlags": 2
          },
          {
            "Text": "? That’s why we call "
          },
          {
            "Text": "container.Release(customerService);",
            "AttrFlags": 2
          },
          {
            "Text": " at the end. Most containers (including Windsor) will step back through all of the dependencies created and "
          },
          {
            "Text": "Dispose",
            "AttrFlags": 2
          },
          {
            "Text": " the ones that need disposing. If "
          },
          {
            "Text": "CustomerService",
            "AttrFlags": 2
          },
          {
            "Text": " is "
          },
          {
            "Text": "IDisposable",
            "AttrFlags": 2
          },
          {
            "Text": " it will dispose that too."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551951569479,
        "id": "158514b6-a4bb-4fd1-8705-86a77df895b4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551951569479,
        "parent_id": "c6c9327c-0a9e-4716-b1d1-438bdcf76661",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Registering dependencies as seen above might just look like more code to write. But when we have lots of classes with lots of dependencies then it really pays off. And if we had to write those same classes "
            ],
            [
              "without",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " using dependency injection then that same application with lots of classes would become difficult to maintain and test."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Registering dependencies as seen above might just look like more code to write. But when we have lots of classes with lots of dependencies then it really pays off. And if we had to write those same classes "
          },
          {
            "Text": "without",
            "AttrFlags": 4
          },
          {
            "Text": " using dependency injection then that same application with lots of classes would become difficult to maintain and test."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551951569479,
        "id": "ad2bf3da-566e-4910-bbbe-d57c88944874",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551951569479,
        "parent_id": "c6c9327c-0a9e-4716-b1d1-438bdcf76661",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This scratches the surface of "
            ],
            [
              "why",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " we use dependency injection containers. "
            ],
            [
              "How",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " we configure our application to use one (and use it correctly) is not just one topic - it’s a number of topics, as the instructions and examples vary from one container to the next."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This scratches the surface of "
          },
          {
            "Text": "why",
            "AttrFlags": 4
          },
          {
            "Text": " we use dependency injection containers. "
          },
          {
            "Text": "How",
            "AttrFlags": 4
          },
          {
            "Text": " we configure our application to use one (and use it correctly) is not just one topic - it’s a number of topics, as the instructions and examples vary from one container to the next."
          }
        ]
      }
    ],
    "title": "030 Why We Use Dependency Injection Containers IoC Containers"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}