{
  "ID": "677536fb-ee3d-41e1-8e20-fce93ccf4303",
  "Root": {
    "alive": true,
    "content": [
      "20a3e2a8-3566-4d90-a5ca-4dcd732f16d8",
      "46128ef0-855a-4c63-9a48-b2ff45e3df8c"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551951098562,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "677536fb-ee3d-41e1-8e20-fce93ccf4303",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551951098562,
    "parent_id": "36ec1eee-8fca-49be-9ec2-4afd299cc91e",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "System.Runtime.Caching.MemoryCache ObjectCache"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551951098559,
        "id": "20a3e2a8-3566-4d90-a5ca-4dcd732f16d8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551951098559,
        "parent_id": "677536fb-ee3d-41e1-8e20-fce93ccf4303",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This function gets existing item form cache, and if the item don’t exist in cache, it will fetch item based on the valueFetchFactory function."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This function gets existing item form cache, and if the item don’t exist in cache, it will fetch item based on the valueFetchFactory function."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551951098561,
        "id": "46128ef0-855a-4c63-9a48-b2ff45e3df8c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551951098561,
        "parent_id": "677536fb-ee3d-41e1-8e20-fce93ccf4303",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public static TValue GetExistingOrAdd\u003cTValue\u003e(string key, double minutesForExpiration, Func\u003cTValue\u003e valueFetchFactory)\n{            \n    try\n    {\n        //The Lazy class provides Lazy initialization which will evaluate \n        //the valueFetchFactory only if item is not in the cache.\n        var newValue = new Lazy\u003cTValue\u003e(valueFetchFactory);\n\n        //Setup the cache policy if item will be saved back to cache.\n        CacheItemPolicy policy = new CacheItemPolicy()\n        {\n            AbsoluteExpiration = DateTimeOffset.Now.AddMinutes(minutesForExpiration)\n        };\n\n        //returns existing item form cache or add the new value if it does not exist.\n        var cachedItem = _cacheContainer.AddOrGetExisting(key, newValue, policy) as Lazy\u003cTValue\u003e;\n\n        return (cachedItem ?? newValue).Value;\n    }\n    catch (Exception excep)\n    {\n        return default(TValue);\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public static TValue GetExistingOrAdd\u003cTValue\u003e(string key, double minutesForExpiration, Func\u003cTValue\u003e valueFetchFactory)\n{            \n    try\n    {\n        //The Lazy class provides Lazy initialization which will evaluate \n        //the valueFetchFactory only if item is not in the cache.\n        var newValue = new Lazy\u003cTValue\u003e(valueFetchFactory);\n\n        //Setup the cache policy if item will be saved back to cache.\n        CacheItemPolicy policy = new CacheItemPolicy()\n        {\n            AbsoluteExpiration = DateTimeOffset.Now.AddMinutes(minutesForExpiration)\n        };\n\n        //returns existing item form cache or add the new value if it does not exist.\n        var cachedItem = _cacheContainer.AddOrGetExisting(key, newValue, policy) as Lazy\u003cTValue\u003e;\n\n        return (cachedItem ?? newValue).Value;\n    }\n    catch (Exception excep)\n    {\n        return default(TValue);\n    }\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "System.Runtime.Caching.MemoryCache ObjectCache",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}