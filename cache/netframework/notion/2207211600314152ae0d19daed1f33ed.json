{
  "ID": "22072116-0031-4152-ae0d-19daed1f33ed",
  "Root": {
    "alive": true,
    "content": [
      "22fcf10e-ac13-44c7-800f-65096c25ef7f",
      "2ae9123d-c24d-4912-9365-ad62eaefdc13",
      "05fe5359-4b80-4faa-bd83-220c6c3e1fca",
      "b4dd0a4a-f4cd-4ebe-8eb3-b70ca100788e",
      "3bc30c7b-d730-4e7a-9722-73a20de0f9a8",
      "69b38ccf-3f7f-42e7-82a4-53406dc8d5b9"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551952147679,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "22072116-0031-4152-ae0d-19daed1f33ed",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551952147679,
    "parent_id": "b7cd86c1-4d1b-4e0a-8478-90678a901422",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Encryption and Decryption using Cryptography AES"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551952147676,
        "id": "22fcf10e-ac13-44c7-800f-65096c25ef7f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551952147676,
        "parent_id": "22072116-0031-4152-ae0d-19daed1f33ed",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Decryption Code"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Decryption Code"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551952147678,
        "id": "2ae9123d-c24d-4912-9365-ad62eaefdc13",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551952147678,
        "parent_id": "22072116-0031-4152-ae0d-19daed1f33ed",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public static string Decrypt(string cipherText)\n{\n    if (cipherText == null)\n        return null;\n\n    byte[] cipherBytes = Convert.FromBase64String(cipherText);\n    using (Aes encryptor = Aes.Create())\n    {\n        Rfc2898DeriveBytes pdb = new Rfc2898DeriveBytes(CryptKey, new byte[] { 0x49, 0x76, 0x61, 0x6e, 0x20, 0x4d, 0x65, 0x64, 0x76, 0x65, 0x64, 0x65, 0x76 });\n        encryptor.Key = pdb.GetBytes(32);\n        encryptor.IV = pdb.GetBytes(16);\n\n        using (MemoryStream ms = new MemoryStream())\n        {\n            using (CryptoStream cs = new CryptoStream(ms, encryptor.CreateDecryptor(), CryptoStreamMode.Write))\n            {\n                cs.Write(cipherBytes, 0, cipherBytes.Length);\n                cs.Close();\n            }\n\n            cipherText = Encoding.Unicode.GetString(ms.ToArray());\n        }\n    }\n\n    return cipherText;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public static string Decrypt(string cipherText)\n{\n    if (cipherText == null)\n        return null;\n\n    byte[] cipherBytes = Convert.FromBase64String(cipherText);\n    using (Aes encryptor = Aes.Create())\n    {\n        Rfc2898DeriveBytes pdb = new Rfc2898DeriveBytes(CryptKey, new byte[] { 0x49, 0x76, 0x61, 0x6e, 0x20, 0x4d, 0x65, 0x64, 0x76, 0x65, 0x64, 0x65, 0x76 });\n        encryptor.Key = pdb.GetBytes(32);\n        encryptor.IV = pdb.GetBytes(16);\n\n        using (MemoryStream ms = new MemoryStream())\n        {\n            using (CryptoStream cs = new CryptoStream(ms, encryptor.CreateDecryptor(), CryptoStreamMode.Write))\n            {\n                cs.Write(cipherBytes, 0, cipherBytes.Length);\n                cs.Close();\n            }\n\n            cipherText = Encoding.Unicode.GetString(ms.ToArray());\n        }\n    }\n\n    return cipherText;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551952147679,
        "id": "05fe5359-4b80-4faa-bd83-220c6c3e1fca",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551952147679,
        "parent_id": "22072116-0031-4152-ae0d-19daed1f33ed",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Encryption Code"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Encryption Code"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551952147679,
        "id": "b4dd0a4a-f4cd-4ebe-8eb3-b70ca100788e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551952147679,
        "parent_id": "22072116-0031-4152-ae0d-19daed1f33ed",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public static string Encrypt(string cipherText)\n{\n    if (cipherText == null)\n        return null;\n  \n    byte[] clearBytes = Encoding.Unicode.GetBytes(cipherText);\n    using (Aes encryptor = Aes.Create())\n    {\n        Rfc2898DeriveBytes pdb = new Rfc2898DeriveBytes(CryptKey, new byte[] { 0x49, 0x76, 0x61, 0x6e, 0x20, 0x4d, 0x65, 0x64, 0x76, 0x65, 0x64, 0x65, 0x76 });\n        encryptor.Key = pdb.GetBytes(32);\n        encryptor.IV = pdb.GetBytes(16);\n\n        using (MemoryStream ms = new MemoryStream())\n        {\n            using (CryptoStream cs = new CryptoStream(ms, encryptor.CreateEncryptor(), CryptoStreamMode.Write))\n            {\n                cs.Write(clearBytes, 0, clearBytes.Length);\n                cs.Close();\n            }\n\n            cipherText = Convert.ToBase64String(ms.ToArray());\n        }\n    }\n    return cipherText;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public static string Encrypt(string cipherText)\n{\n    if (cipherText == null)\n        return null;\n  \n    byte[] clearBytes = Encoding.Unicode.GetBytes(cipherText);\n    using (Aes encryptor = Aes.Create())\n    {\n        Rfc2898DeriveBytes pdb = new Rfc2898DeriveBytes(CryptKey, new byte[] { 0x49, 0x76, 0x61, 0x6e, 0x20, 0x4d, 0x65, 0x64, 0x76, 0x65, 0x64, 0x65, 0x76 });\n        encryptor.Key = pdb.GetBytes(32);\n        encryptor.IV = pdb.GetBytes(16);\n\n        using (MemoryStream ms = new MemoryStream())\n        {\n            using (CryptoStream cs = new CryptoStream(ms, encryptor.CreateEncryptor(), CryptoStreamMode.Write))\n            {\n                cs.Write(clearBytes, 0, clearBytes.Length);\n                cs.Close();\n            }\n\n            cipherText = Convert.ToBase64String(ms.ToArray());\n        }\n    }\n    return cipherText;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551952147679,
        "id": "3bc30c7b-d730-4e7a-9722-73a20de0f9a8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551952147679,
        "parent_id": "22072116-0031-4152-ae0d-19daed1f33ed",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Usage"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Usage"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551952147679,
        "id": "69b38ccf-3f7f-42e7-82a4-53406dc8d5b9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551952147679,
        "parent_id": "22072116-0031-4152-ae0d-19daed1f33ed",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "var textToEncrypt = \"TestEncrypt\";\n\nvar encrypted = Encrypt(textToEncrypt);\n\nvar decrypted = Decrypt(encrypted);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "var textToEncrypt = \"TestEncrypt\";\n\nvar encrypted = Encrypt(textToEncrypt);\n\nvar decrypted = Decrypt(encrypted);",
        "code_language": "Plain Text"
      }
    ],
    "title": "Encryption and Decryption using Cryptography AES",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}