{
  "ID": "0a7c8211-05c9-49b0-b799-4ef570da0ee4",
  "Root": {
    "alive": true,
    "content": [
      "d5b68fea-7028-4f76-adf8-0f588b5027ba",
      "92815e3b-ba7c-49eb-b961-085d4dc9e819",
      "a0a4eab5-62fd-47f3-b6e2-3a8dbe464078",
      "af38c1fd-c6f4-400d-882d-32e113f90aba",
      "01685fa8-a0c6-4bf6-a0a4-9cf2b82ae181"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551950762498,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "0a7c8211-05c9-49b0-b799-4ef570da0ee4",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551950762498,
    "parent_id": "05995655-4ee0-4127-b3a5-80bfa8b84e47",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Basic read-only HTTP file server HttpListener"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551950762495,
        "id": "d5b68fea-7028-4f76-adf8-0f588b5027ba",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551950762495,
        "parent_id": "0a7c8211-05c9-49b0-b799-4ef570da0ee4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Notes:",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Notes:",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551950762497,
        "id": "92815e3b-ba7c-49eb-b961-085d4dc9e819",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551950762497,
        "parent_id": "0a7c8211-05c9-49b0-b799-4ef570da0ee4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This example must be run in administrative mode."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This example must be run in administrative mode."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551950762497,
        "id": "a0a4eab5-62fd-47f3-b6e2-3a8dbe464078",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551950762497,
        "parent_id": "0a7c8211-05c9-49b0-b799-4ef570da0ee4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Only one simultaneous client is supported."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Only one simultaneous client is supported."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551950762498,
        "id": "af38c1fd-c6f4-400d-882d-32e113f90aba",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551950762498,
        "parent_id": "0a7c8211-05c9-49b0-b799-4ef570da0ee4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For simplicity, filenames are assumed to be all ASCII (for the "
            ],
            [
              "filename",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " part in the "
            ],
            [
              "Content-Disposition",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " header) and file access errors are not handled."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For simplicity, filenames are assumed to be all ASCII (for the "
          },
          {
            "Text": "filename",
            "AttrFlags": 4
          },
          {
            "Text": " part in the "
          },
          {
            "Text": "Content-Disposition",
            "AttrFlags": 4
          },
          {
            "Text": " header) and file access errors are not handled."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551950762498,
        "id": "01685fa8-a0c6-4bf6-a0a4-9cf2b82ae181",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551950762498,
        "parent_id": "0a7c8211-05c9-49b0-b799-4ef570da0ee4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "using System;\nusing System.IO;\nusing System.Net;\n\nclass HttpFileServer\n{\n    private static HttpListenerResponse response;\n    private static HttpListener listener;\n    private static string baseFilesystemPath;\n\n    static void Main(string[] args)\n    {\n        if (!HttpListener.IsSupported)\n        {\n            Console.WriteLine(\n                \"*** HttpListener requires at least Windows XP SP2 or Windows Server 2003.\");\n            return;\n        }\n\n        if(args.Length \u003c 2)\n        {\n            Console.WriteLine(\"Basic read-only HTTP file server\");\n            Console.WriteLine();\n            Console.WriteLine(\"Usage: httpfileserver \u003cbase filesystem path\u003e \u003cport\u003e\");\n            Console.WriteLine(\"Request format: http://url:port/path/to/file.ext\");\n            return;\n        }\n\n        baseFilesystemPath = Path.GetFullPath(args[0]);\n        var port = int.Parse(args[1]);\n\n        listener = new HttpListener();\n        listener.Prefixes.Add(\"http://*:\" + port + \"/\");\n        listener.Start();\n\n        Console.WriteLine(\"--- Server stated, base path is: \" + baseFilesystemPath);\n        Console.WriteLine(\"--- Listening, exit with Ctrl-C\");\n        try\n        {\n            ServerLoop();\n        }\n        catch(Exception ex)\n        {\n            Console.WriteLine(ex);\n            if(response != null)\n            {\n                SendErrorResponse(500, \"Internal server error\");\n            }\n        }\n    }\n\n    static void ServerLoop()\n    {\n        while(true)\n        {\n            var context = listener.GetContext();\n\n            var request = context.Request;\n            response = context.Response;\n            var fileName = request.RawUrl.Substring(1);\n            Console.WriteLine(\n                \"--- Got {0} request for: {1}\", \n                request.HttpMethod, fileName);\n\n            if (request.HttpMethod.ToUpper() != \"GET\")\n            {\n                SendErrorResponse(405, \"Method must be GET\");\n                continue;\n            }\n\n            var fullFilePath = Path.Combine(baseFilesystemPath, fileName);\n            if(!File.Exists(fullFilePath))\n            {\n                SendErrorResponse(404, \"File not found\");\n                continue;\n            }\n\n            Console.Write(\"    Sending file...\");\n            using (var fileStream = File.OpenRead(fullFilePath))\n            {\n                response.ContentType = \"application/octet-stream\";\n                response.ContentLength64 = (new FileInfo(fullFilePath)).Length;\n                response.AddHeader(\n                    \"Content-Disposition\",\n                    \"Attachment; filename=\\\"\" + Path.GetFileName(fullFilePath) + \"\\\"\");\n                fileStream.CopyTo(response.OutputStream);\n            }\n\n            response.OutputStream.Close();\n            response = null;\n            Console.WriteLine(\" Ok!\");\n        }\n    }\n\n    static void SendErrorResponse(int statusCode, string statusResponse)\n    {\n        response.ContentLength64 = 0;\n        response.StatusCode = statusCode;\n        response.StatusDescription = statusResponse;\n        response.OutputStream.Close();\n        Console.WriteLine(\"*** Sent error: {0} {1}\", statusCode, statusResponse);\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "using System;\nusing System.IO;\nusing System.Net;\n\nclass HttpFileServer\n{\n    private static HttpListenerResponse response;\n    private static HttpListener listener;\n    private static string baseFilesystemPath;\n\n    static void Main(string[] args)\n    {\n        if (!HttpListener.IsSupported)\n        {\n            Console.WriteLine(\n                \"*** HttpListener requires at least Windows XP SP2 or Windows Server 2003.\");\n            return;\n        }\n\n        if(args.Length \u003c 2)\n        {\n            Console.WriteLine(\"Basic read-only HTTP file server\");\n            Console.WriteLine();\n            Console.WriteLine(\"Usage: httpfileserver \u003cbase filesystem path\u003e \u003cport\u003e\");\n            Console.WriteLine(\"Request format: http://url:port/path/to/file.ext\");\n            return;\n        }\n\n        baseFilesystemPath = Path.GetFullPath(args[0]);\n        var port = int.Parse(args[1]);\n\n        listener = new HttpListener();\n        listener.Prefixes.Add(\"http://*:\" + port + \"/\");\n        listener.Start();\n\n        Console.WriteLine(\"--- Server stated, base path is: \" + baseFilesystemPath);\n        Console.WriteLine(\"--- Listening, exit with Ctrl-C\");\n        try\n        {\n            ServerLoop();\n        }\n        catch(Exception ex)\n        {\n            Console.WriteLine(ex);\n            if(response != null)\n            {\n                SendErrorResponse(500, \"Internal server error\");\n            }\n        }\n    }\n\n    static void ServerLoop()\n    {\n        while(true)\n        {\n            var context = listener.GetContext();\n\n            var request = context.Request;\n            response = context.Response;\n            var fileName = request.RawUrl.Substring(1);\n            Console.WriteLine(\n                \"--- Got {0} request for: {1}\", \n                request.HttpMethod, fileName);\n\n            if (request.HttpMethod.ToUpper() != \"GET\")\n            {\n                SendErrorResponse(405, \"Method must be GET\");\n                continue;\n            }\n\n            var fullFilePath = Path.Combine(baseFilesystemPath, fileName);\n            if(!File.Exists(fullFilePath))\n            {\n                SendErrorResponse(404, \"File not found\");\n                continue;\n            }\n\n            Console.Write(\"    Sending file...\");\n            using (var fileStream = File.OpenRead(fullFilePath))\n            {\n                response.ContentType = \"application/octet-stream\";\n                response.ContentLength64 = (new FileInfo(fullFilePath)).Length;\n                response.AddHeader(\n                    \"Content-Disposition\",\n                    \"Attachment; filename=\\\"\" + Path.GetFileName(fullFilePath) + \"\\\"\");\n                fileStream.CopyTo(response.OutputStream);\n            }\n\n            response.OutputStream.Close();\n            response = null;\n            Console.WriteLine(\" Ok!\");\n        }\n    }\n\n    static void SendErrorResponse(int statusCode, string statusResponse)\n    {\n        response.ContentLength64 = 0;\n        response.StatusCode = statusCode;\n        response.StatusDescription = statusResponse;\n        response.OutputStream.Close();\n        Console.WriteLine(\"*** Sent error: {0} {1}\", statusCode, statusResponse);\n    }\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "Basic read-only HTTP file server HttpListener",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}