{
  "ID": "6bca9dc0-02f5-4fff-bb9d-55dd48f098ae",
  "Root": {
    "alive": true,
    "content": [
      "30f31a54-c28f-47bf-bdaa-50af35be09ba"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551951076028,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "6bca9dc0-02f5-4fff-bb9d-55dd48f098ae",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551951076028,
    "parent_id": "778bc6b5-2d2f-430d-b96d-32a23351064e",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Creating an assembly dynamically"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551951076028,
        "id": "30f31a54-c28f-47bf-bdaa-50af35be09ba",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551951076028,
        "parent_id": "6bca9dc0-02f5-4fff-bb9d-55dd48f098ae",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "using System;\nusing System.Reflection;\nusing System.Reflection.Emit;\n\nclass DemoAssemblyBuilder\n{\n    public static void Main()\n    {\n        // An assembly consists of one or more modules, each of which\n        // contains zero or more types. This code creates a single-module\n        // assembly, the most common case. The module contains one type,\n        // named \"MyDynamicType\", that has a private field, a property \n        // that gets and sets the private field, constructors that \n        // initialize the private field, and a method that multiplies \n        // a user-supplied number by the private field value and returns\n        // the result. In C# the type might look like this:\n        /*\n        public class MyDynamicType\n        {\n            private int m_number;\n\n            public MyDynamicType() : this(42) {}\n            public MyDynamicType(int initNumber)\n            {\n                m_number = initNumber;\n            }\n\n            public int Number\n            {\n                get { return m_number; }\n                set { m_number = value; }\n            }\n\n            public int MyMethod(int multiplier)\n            {\n                return m_number * multiplier;\n            }\n        }\n        */\n\n        AssemblyName aName = new AssemblyName(\"DynamicAssemblyExample\");\n        AssemblyBuilder ab =\n            AppDomain.CurrentDomain.DefineDynamicAssembly(\n                aName,\n                AssemblyBuilderAccess.RunAndSave);\n\n        // For a single-module assembly, the module name is usually\n        // the assembly name plus an extension.\n        ModuleBuilder mb =\n            ab.DefineDynamicModule(aName.Name, aName.Name + \".dll\");\n\n        TypeBuilder tb = mb.DefineType(\n            \"MyDynamicType\",\n             TypeAttributes.Public);\n\n        // Add a private field of type int (Int32).\n        FieldBuilder fbNumber = tb.DefineField(\n            \"m_number\",\n            typeof(int),\n            FieldAttributes.Private);\n\n        // Next, we make a simple sealed method.\n        MethodBuilder mbMyMethod = tb.DefineMethod(\n            \"MyMethod\",\n            MethodAttributes.Public,\n            typeof(int),\n            new[] { typeof(int) });\n\n        ILGenerator il = mbMyMethod.GetILGenerator();\n        il.Emit(OpCodes.Ldarg_0); // Load this - always the first argument of any instance method\n        il.Emit(OpCodes.Ldfld, fbNumber);\n        il.Emit(OpCodes.Ldarg_1); // Load the integer argument\n        il.Emit(OpCodes.Mul); // Multiply the two numbers with no overflow checking\n        il.Emit(OpCodes.Ret); // Return\n\n        // Next, we build the property. This involves building the property itself, as well as the\n        // getter and setter methods.\n        PropertyBuilder pbNumber = tb.DefineProperty(\n            \"Number\", // Name\n            PropertyAttributes.None, \n            typeof(int), // Type of the property\n            new Type[0]); // Types of indices, if any\n\n        MethodBuilder mbSetNumber = tb.DefineMethod(\n            \"set_Number\", // Name - setters are set_Property by convention\n            // Setter is a special method and we don't want it to appear to callers from C#\n            MethodAttributes.PrivateScope | MethodAttributes.HideBySig | MethodAttributes.Public | MethodAttributes.SpecialName,\n            typeof(void), // Setters don't return a value\n            new[] { typeof(int) }); // We have a single argument of type System.Int32\n\n        // To generate the body of the method, we'll need an IL generator\n        il = mbSetNumber.GetILGenerator();\n        il.Emit(OpCodes.Ldarg_0); // Load this\n        il.Emit(OpCodes.Ldarg_1); // Load the new value\n        il.Emit(OpCodes.Stfld, fbNumber); // Save the new value to this.m_number\n        il.Emit(OpCodes.Ret); // Return\n\n        // Finally, link the method to the setter of our property\n        pbNumber.SetSetMethod(mbSetNumber);\n\n        MethodBuilder mbGetNumber = tb.DefineMethod(\n            \"get_Number\",\n            MethodAttributes.PrivateScope | MethodAttributes.HideBySig | MethodAttributes.Public | MethodAttributes.SpecialName,\n            typeof(int),\n            new Type[0]);\n\n        il = mbGetNumber.GetILGenerator();\n        il.Emit(OpCodes.Ldarg_0); // Load this\n        il.Emit(OpCodes.Ldfld, fbNumber); // Load the value of this.m_number\n        il.Emit(OpCodes.Ret); // Return the value\n\n        pbNumber.SetGetMethod(mbGetNumber);\n        \n        // Finally, we add the two constructors.\n        // Constructor needs to call the constructor of the parent class, or another constructor in the same class\n        ConstructorBuilder intConstructor = tb.DefineConstructor(\n            MethodAttributes.Public, CallingConventions.Standard | CallingConventions.HasThis, new[] { typeof(int) });\n        il = intConstructor.GetILGenerator();\n        il.Emit(OpCodes.Ldarg_0); // this\n        il.Emit(OpCodes.Call, typeof(object).GetConstructor(new Type[0])); // call parent's constructor\n        il.Emit(OpCodes.Ldarg_0); // this\n        il.Emit(OpCodes.Ldarg_1); // our int argument\n        il.Emit(OpCodes.Stfld, fbNumber); // store argument in this.m_number\n        il.Emit(OpCodes.Ret);\n\n        var parameterlessConstructor = tb.DefineConstructor(\n            MethodAttributes.Public, CallingConventions.Standard | CallingConventions.HasThis, new Type[0]);\n        il = parameterlessConstructor.GetILGenerator();\n        il.Emit(OpCodes.Ldarg_0); // this\n        il.Emit(OpCodes.Ldc_I4_S, (byte)42); // load 42 as an integer constant\n        il.Emit(OpCodes.Call, intConstructor); // call this(42)\n        il.Emit(OpCodes.Ret);\n\n        // And make sure the type is created\n        Type ourType = tb.CreateType();\n\n        // The types from the assembly can be used directly using reflection, or we can save the assembly to use as a reference\n        object ourInstance = Activator.CreateInstance(ourType);\n        Console.WriteLine(ourType.GetProperty(\"Number\").GetValue(ourInstance)); // 42\n        \n        // Save the assembly for use elsewhere. This is very useful for debugging - you can use e.g. ILSpy to look at the equivalent IL/C# code.\n        ab.Save(@\"DynamicAssemblyExample.dll\");\n        // Using newly created type\n        var myDynamicType = tb.CreateType();\n        var myDynamicTypeInstance = Activator.CreateInstance(myDynamicType);\n\n        Console.WriteLine(myDynamicTypeInstance.GetType()); // MyDynamicType\n\n        var numberField = myDynamicType.GetField(\"m_number\", BindingFlags.NonPublic | BindingFlags.Instance);\n        numberField.SetValue (myDynamicTypeInstance, 10);\n\n        Console.WriteLine(numberField.GetValue(myDynamicTypeInstance)); // 10\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "using System;\nusing System.Reflection;\nusing System.Reflection.Emit;\n\nclass DemoAssemblyBuilder\n{\n    public static void Main()\n    {\n        // An assembly consists of one or more modules, each of which\n        // contains zero or more types. This code creates a single-module\n        // assembly, the most common case. The module contains one type,\n        // named \"MyDynamicType\", that has a private field, a property \n        // that gets and sets the private field, constructors that \n        // initialize the private field, and a method that multiplies \n        // a user-supplied number by the private field value and returns\n        // the result. In C# the type might look like this:\n        /*\n        public class MyDynamicType\n        {\n            private int m_number;\n\n            public MyDynamicType() : this(42) {}\n            public MyDynamicType(int initNumber)\n            {\n                m_number = initNumber;\n            }\n\n            public int Number\n            {\n                get { return m_number; }\n                set { m_number = value; }\n            }\n\n            public int MyMethod(int multiplier)\n            {\n                return m_number * multiplier;\n            }\n        }\n        */\n\n        AssemblyName aName = new AssemblyName(\"DynamicAssemblyExample\");\n        AssemblyBuilder ab =\n            AppDomain.CurrentDomain.DefineDynamicAssembly(\n                aName,\n                AssemblyBuilderAccess.RunAndSave);\n\n        // For a single-module assembly, the module name is usually\n        // the assembly name plus an extension.\n        ModuleBuilder mb =\n            ab.DefineDynamicModule(aName.Name, aName.Name + \".dll\");\n\n        TypeBuilder tb = mb.DefineType(\n            \"MyDynamicType\",\n             TypeAttributes.Public);\n\n        // Add a private field of type int (Int32).\n        FieldBuilder fbNumber = tb.DefineField(\n            \"m_number\",\n            typeof(int),\n            FieldAttributes.Private);\n\n        // Next, we make a simple sealed method.\n        MethodBuilder mbMyMethod = tb.DefineMethod(\n            \"MyMethod\",\n            MethodAttributes.Public,\n            typeof(int),\n            new[] { typeof(int) });\n\n        ILGenerator il = mbMyMethod.GetILGenerator();\n        il.Emit(OpCodes.Ldarg_0); // Load this - always the first argument of any instance method\n        il.Emit(OpCodes.Ldfld, fbNumber);\n        il.Emit(OpCodes.Ldarg_1); // Load the integer argument\n        il.Emit(OpCodes.Mul); // Multiply the two numbers with no overflow checking\n        il.Emit(OpCodes.Ret); // Return\n\n        // Next, we build the property. This involves building the property itself, as well as the\n        // getter and setter methods.\n        PropertyBuilder pbNumber = tb.DefineProperty(\n            \"Number\", // Name\n            PropertyAttributes.None, \n            typeof(int), // Type of the property\n            new Type[0]); // Types of indices, if any\n\n        MethodBuilder mbSetNumber = tb.DefineMethod(\n            \"set_Number\", // Name - setters are set_Property by convention\n            // Setter is a special method and we don't want it to appear to callers from C#\n            MethodAttributes.PrivateScope | MethodAttributes.HideBySig | MethodAttributes.Public | MethodAttributes.SpecialName,\n            typeof(void), // Setters don't return a value\n            new[] { typeof(int) }); // We have a single argument of type System.Int32\n\n        // To generate the body of the method, we'll need an IL generator\n        il = mbSetNumber.GetILGenerator();\n        il.Emit(OpCodes.Ldarg_0); // Load this\n        il.Emit(OpCodes.Ldarg_1); // Load the new value\n        il.Emit(OpCodes.Stfld, fbNumber); // Save the new value to this.m_number\n        il.Emit(OpCodes.Ret); // Return\n\n        // Finally, link the method to the setter of our property\n        pbNumber.SetSetMethod(mbSetNumber);\n\n        MethodBuilder mbGetNumber = tb.DefineMethod(\n            \"get_Number\",\n            MethodAttributes.PrivateScope | MethodAttributes.HideBySig | MethodAttributes.Public | MethodAttributes.SpecialName,\n            typeof(int),\n            new Type[0]);\n\n        il = mbGetNumber.GetILGenerator();\n        il.Emit(OpCodes.Ldarg_0); // Load this\n        il.Emit(OpCodes.Ldfld, fbNumber); // Load the value of this.m_number\n        il.Emit(OpCodes.Ret); // Return the value\n\n        pbNumber.SetGetMethod(mbGetNumber);\n        \n        // Finally, we add the two constructors.\n        // Constructor needs to call the constructor of the parent class, or another constructor in the same class\n        ConstructorBuilder intConstructor = tb.DefineConstructor(\n            MethodAttributes.Public, CallingConventions.Standard | CallingConventions.HasThis, new[] { typeof(int) });\n        il = intConstructor.GetILGenerator();\n        il.Emit(OpCodes.Ldarg_0); // this\n        il.Emit(OpCodes.Call, typeof(object).GetConstructor(new Type[0])); // call parent's constructor\n        il.Emit(OpCodes.Ldarg_0); // this\n        il.Emit(OpCodes.Ldarg_1); // our int argument\n        il.Emit(OpCodes.Stfld, fbNumber); // store argument in this.m_number\n        il.Emit(OpCodes.Ret);\n\n        var parameterlessConstructor = tb.DefineConstructor(\n            MethodAttributes.Public, CallingConventions.Standard | CallingConventions.HasThis, new Type[0]);\n        il = parameterlessConstructor.GetILGenerator();\n        il.Emit(OpCodes.Ldarg_0); // this\n        il.Emit(OpCodes.Ldc_I4_S, (byte)42); // load 42 as an integer constant\n        il.Emit(OpCodes.Call, intConstructor); // call this(42)\n        il.Emit(OpCodes.Ret);\n\n        // And make sure the type is created\n        Type ourType = tb.CreateType();\n\n        // The types from the assembly can be used directly using reflection, or we can save the assembly to use as a reference\n        object ourInstance = Activator.CreateInstance(ourType);\n        Console.WriteLine(ourType.GetProperty(\"Number\").GetValue(ourInstance)); // 42\n        \n        // Save the assembly for use elsewhere. This is very useful for debugging - you can use e.g. ILSpy to look at the equivalent IL/C# code.\n        ab.Save(@\"DynamicAssemblyExample.dll\");\n        // Using newly created type\n        var myDynamicType = tb.CreateType();\n        var myDynamicTypeInstance = Activator.CreateInstance(myDynamicType);\n\n        Console.WriteLine(myDynamicTypeInstance.GetType()); // MyDynamicType\n\n        var numberField = myDynamicType.GetField(\"m_number\", BindingFlags.NonPublic | BindingFlags.Instance);\n        numberField.SetValue (myDynamicTypeInstance, 10);\n\n        Console.WriteLine(numberField.GetValue(myDynamicTypeInstance)); // 10\n    }\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "Creating an assembly dynamically",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}