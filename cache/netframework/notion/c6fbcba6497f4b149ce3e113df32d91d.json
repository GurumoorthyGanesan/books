{
  "ID": "c6fbcba6-497f-4b14-9ce3-e113df32d91d",
  "Root": {
    "alive": true,
    "content": [
      "ee7c4eb3-5355-4d07-8893-5943367ed0d5",
      "4d7c8726-1c6e-43d4-83c7-9e71fbef1e39",
      "e0a6d587-1ca4-41a6-a062-2ef91bf86538",
      "660f456a-4e3e-409d-badd-352f2c1336cd"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551951567360,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "c6fbcba6-497f-4b14-9ce3-e113df32d91d",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551951567360,
    "parent_id": "13fcd1ea-9ee9-4041-b996-ee82c3fe1e11",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "How Dependency Injection Makes Unit Testing Easier"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551951567357,
        "id": "ee7c4eb3-5355-4d07-8893-5943367ed0d5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551951567357,
        "parent_id": "c6fbcba6-497f-4b14-9ce3-e113df32d91d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This builds on the previous example of the "
            ],
            [
              "Greeter",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " class which has two dependencies, "
            ],
            [
              "IGreetingProvider",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "IGreetingWriter",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This builds on the previous example of the "
          },
          {
            "Text": "Greeter",
            "AttrFlags": 2
          },
          {
            "Text": " class which has two dependencies, "
          },
          {
            "Text": "IGreetingProvider",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "IGreetingWriter",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551951567359,
        "id": "4d7c8726-1c6e-43d4-83c7-9e71fbef1e39",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551951567359,
        "parent_id": "c6fbcba6-497f-4b14-9ce3-e113df32d91d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The actual implementation of "
            ],
            [
              "IGreetingProvider",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " might retrieve a string from an API call or a database. The implementation of "
            ],
            [
              "IGreetingWriter",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " might display the greeting in the console. But because "
            ],
            [
              "Greeter",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " has its dependencies injected into its constructor, it’s easy to write a unit test that injects mocked versions of those interfaces. In real life we might use a framework like "
            ],
            [
              "Moq",
              [
                [
                  "a",
                  "http://www.moqthis.com/"
                ]
              ]
            ],
            [
              ", but in this case I’ll write those mocked implementations."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The actual implementation of "
          },
          {
            "Text": "IGreetingProvider",
            "AttrFlags": 2
          },
          {
            "Text": " might retrieve a string from an API call or a database. The implementation of "
          },
          {
            "Text": "IGreetingWriter",
            "AttrFlags": 2
          },
          {
            "Text": " might display the greeting in the console. But because "
          },
          {
            "Text": "Greeter",
            "AttrFlags": 2
          },
          {
            "Text": " has its dependencies injected into its constructor, it’s easy to write a unit test that injects mocked versions of those interfaces. In real life we might use a framework like "
          },
          {
            "Text": "Moq",
            "Link": "http://www.moqthis.com/"
          },
          {
            "Text": ", but in this case I’ll write those mocked implementations."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551951567359,
        "id": "e0a6d587-1ca4-41a6-a062-2ef91bf86538",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551951567359,
        "parent_id": "c6fbcba6-497f-4b14-9ce3-e113df32d91d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class TestGreetingProvider : IGreetingProvider\n{\n    public const string TestGreeting = \"Hello!\";\n\n    public string GetGreeting()\n    {\n        return TestGreeting;\n    }\n}\n\npublic class TestGreetingWriter : List\u003cstring\u003e, IGreetingWriter\n{\n    public void WriteGreeting(string greeting)\n    {\n        Add(greeting);\n    }\n}\n\n[TestClass]\npublic class GreeterTests\n{\n    [TestMethod]\n    public void Greeter_WritesGreeting()\n    {\n        var greetingProvider = new TestGreetingProvider();\n        var greetingWriter = new TestGreetingWriter();\n        var greeter = new Greeter(greetingProvider, greetingWriter);\n        greeter.Greet();\n        Assert.AreEqual(greetingWriter[0], TestGreetingProvider.TestGreeting);\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class TestGreetingProvider : IGreetingProvider\n{\n    public const string TestGreeting = \"Hello!\";\n\n    public string GetGreeting()\n    {\n        return TestGreeting;\n    }\n}\n\npublic class TestGreetingWriter : List\u003cstring\u003e, IGreetingWriter\n{\n    public void WriteGreeting(string greeting)\n    {\n        Add(greeting);\n    }\n}\n\n[TestClass]\npublic class GreeterTests\n{\n    [TestMethod]\n    public void Greeter_WritesGreeting()\n    {\n        var greetingProvider = new TestGreetingProvider();\n        var greetingWriter = new TestGreetingWriter();\n        var greeter = new Greeter(greetingProvider, greetingWriter);\n        greeter.Greet();\n        Assert.AreEqual(greetingWriter[0], TestGreetingProvider.TestGreeting);\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551951567359,
        "id": "660f456a-4e3e-409d-badd-352f2c1336cd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551951567359,
        "parent_id": "c6fbcba6-497f-4b14-9ce3-e113df32d91d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The behavior of "
            ],
            [
              "IGreetingProvider",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "IGreetingWriter",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " are not relevant to this test. We want to test that "
            ],
            [
              "Greeter",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " gets a greeting and writes it. The design of "
            ],
            [
              "Greeter",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (using dependency injection) allows us to inject mocked dependencies without any complicated moving parts. All we’re testing is that "
            ],
            [
              "Greeter",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " interacts with those dependencies as we expect it to."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The behavior of "
          },
          {
            "Text": "IGreetingProvider",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "IGreetingWriter",
            "AttrFlags": 2
          },
          {
            "Text": " are not relevant to this test. We want to test that "
          },
          {
            "Text": "Greeter",
            "AttrFlags": 2
          },
          {
            "Text": " gets a greeting and writes it. The design of "
          },
          {
            "Text": "Greeter",
            "AttrFlags": 2
          },
          {
            "Text": " (using dependency injection) allows us to inject mocked dependencies without any complicated moving parts. All we’re testing is that "
          },
          {
            "Text": "Greeter",
            "AttrFlags": 2
          },
          {
            "Text": " interacts with those dependencies as we expect it to."
          }
        ]
      }
    ],
    "title": "How Dependency Injection Makes Unit Testing Easier",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}