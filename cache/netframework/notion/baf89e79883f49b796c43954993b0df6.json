{
  "ID": "baf89e79-883f-49b7-96c4-3954993b0df6",
  "Root": {
    "alive": true,
    "content": [
      "e7088f54-e4f4-4d14-9ec2-b55d179eb01b",
      "a9eb9b26-6cce-4d0d-bc1c-fefd12c37a55",
      "4bbbeb02-4e26-47ca-bbad-f8684d3a301d",
      "b68f1f3a-3f0a-41f2-9f0a-4a64800ed811",
      "e1caa809-55c8-4697-892f-45b36fb1799d"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551950660565,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "baf89e79-883f-49b7-96c4-3954993b0df6",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551950660565,
    "parent_id": "fb28bc7f-e61f-4ac8-b19d-4670cd051e98",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Rethrowing an exception within a catch block"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551950660560,
        "id": "e7088f54-e4f4-4d14-9ec2-b55d179eb01b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551950660560,
        "parent_id": "baf89e79-883f-49b7-96c4-3954993b0df6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Within a "
            ],
            [
              "catch",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " block the "
            ],
            [
              "throw",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " keyword can be used on its own, without specifying an exception value, to "
            ],
            [
              "rethrow",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " the exception which was just caught. Rethrowing an exception allows the original exception to continue up the exception handling chain, preserving its call stack or associated data:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Within a "
          },
          {
            "Text": "catch",
            "AttrFlags": 2
          },
          {
            "Text": " block the "
          },
          {
            "Text": "throw",
            "AttrFlags": 2
          },
          {
            "Text": " keyword can be used on its own, without specifying an exception value, to "
          },
          {
            "Text": "rethrow",
            "AttrFlags": 4
          },
          {
            "Text": " the exception which was just caught. Rethrowing an exception allows the original exception to continue up the exception handling chain, preserving its call stack or associated data:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551950660563,
        "id": "a9eb9b26-6cce-4d0d-bc1c-fefd12c37a55",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551950660563,
        "parent_id": "baf89e79-883f-49b7-96c4-3954993b0df6",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "try {...}\ncatch (Exception ex) {\n  // Note: the ex variable is *not* used\n  throw;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "try {...}\ncatch (Exception ex) {\n  // Note: the ex variable is *not* used\n  throw;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551950660563,
        "id": "4bbbeb02-4e26-47ca-bbad-f8684d3a301d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551950660563,
        "parent_id": "baf89e79-883f-49b7-96c4-3954993b0df6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A common anti-pattern is to instead "
            ],
            [
              "throw ex",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", which has the effect of limiting the next exception handler’s view of the stack trace:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A common anti-pattern is to instead "
          },
          {
            "Text": "throw ex",
            "AttrFlags": 2
          },
          {
            "Text": ", which has the effect of limiting the next exception handler’s view of the stack trace:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551950660563,
        "id": "b68f1f3a-3f0a-41f2-9f0a-4a64800ed811",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551950660563,
        "parent_id": "baf89e79-883f-49b7-96c4-3954993b0df6",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "try {...}\ncatch (Exception ex) {\n  // Note: the ex variable is thrown\n  //  future stack traces of the exception will not see prior calls\n  throw ex;  \n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "try {...}\ncatch (Exception ex) {\n  // Note: the ex variable is thrown\n  //  future stack traces of the exception will not see prior calls\n  throw ex;  \n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551950660565,
        "id": "e1caa809-55c8-4697-892f-45b36fb1799d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551950660565,
        "parent_id": "baf89e79-883f-49b7-96c4-3954993b0df6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In general using "
            ],
            [
              "throw ex",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " isn’t desirable, as future exception handlers which inspect the stack trace will only be able to see calls as far back as "
            ],
            [
              "throw ex",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". By omitting the "
            ],
            [
              "ex",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " variable, and using the "
            ],
            [
              "throw",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " keyword alone the original exception will "
            ],
            [
              "“bubble-up”",
              [
                [
                  "a",
                  "http://stackoverflow.com/questions/4065893/about-throw-and-exception-bubbling"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In general using "
          },
          {
            "Text": "throw ex",
            "AttrFlags": 2
          },
          {
            "Text": " isn’t desirable, as future exception handlers which inspect the stack trace will only be able to see calls as far back as "
          },
          {
            "Text": "throw ex",
            "AttrFlags": 2
          },
          {
            "Text": ". By omitting the "
          },
          {
            "Text": "ex",
            "AttrFlags": 2
          },
          {
            "Text": " variable, and using the "
          },
          {
            "Text": "throw",
            "AttrFlags": 2
          },
          {
            "Text": " keyword alone the original exception will "
          },
          {
            "Text": "“bubble-up”",
            "Link": "http://stackoverflow.com/questions/4065893/about-throw-and-exception-bubbling"
          },
          {
            "Text": "."
          }
        ]
      }
    ],
    "title": "Rethrowing an exception within a catch block",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}