{
  "ID": "f9ada131-c423-4113-b120-a8e8ca25cec9",
  "Root": {
    "alive": true,
    "content": [
      "0ec1aedf-1753-4432-96ff-4f9cbd2a7298",
      "8ea6be9c-4cf7-49b5-b21a-2a9c46d499e2",
      "9ce4535e-b0e2-4779-9899-aae265f34970",
      "ba0d205f-41f0-4f66-8717-bdba0454303e",
      "a563b8dc-5ea5-4d17-a3e5-107bf530dc0e"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551951117428,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "f9ada131-c423-4113-b120-a8e8ca25cec9",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551951117428,
    "parent_id": "b7cfb8cb-4348-49e4-a04a-0ba6eacab118",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Serialization using Json.NET"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551951117423,
        "id": "0ec1aedf-1753-4432-96ff-4f9cbd2a7298",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551951117423,
        "parent_id": "f9ada131-c423-4113-b120-a8e8ca25cec9",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "[JsonObject(\"person\")]\npublic class Person\n{\n    [JsonProperty(\"name\")]\n    public string PersonName { get; set; }\n    [JsonProperty(\"age\")]\n    public int PersonAge { get; set; }\n    [JsonIgnore]\n    public string Address { get; set; }\n}\n\nPerson person = new Person { PersonName = \"Andrius\", PersonAge = 99, Address = \"Some address\" };\nstring rawJson = JsonConvert.SerializeObject(person);\n\nConsole.WriteLine(rawJson); // {\"name\":\"Andrius\",\"age\":99}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "[JsonObject(\"person\")]\npublic class Person\n{\n    [JsonProperty(\"name\")]\n    public string PersonName { get; set; }\n    [JsonProperty(\"age\")]\n    public int PersonAge { get; set; }\n    [JsonIgnore]\n    public string Address { get; set; }\n}\n\nPerson person = new Person { PersonName = \"Andrius\", PersonAge = 99, Address = \"Some address\" };\nstring rawJson = JsonConvert.SerializeObject(person);\n\nConsole.WriteLine(rawJson); // {\"name\":\"Andrius\",\"age\":99}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551951117426,
        "id": "8ea6be9c-4cf7-49b5-b21a-2a9c46d499e2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551951117426,
        "parent_id": "f9ada131-c423-4113-b120-a8e8ca25cec9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Notice how properties (and classes) can be decorated with attributes to change their appearance in resulting json string or to remove them from json string at all (JsonIgnore)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Notice how properties (and classes) can be decorated with attributes to change their appearance in resulting json string or to remove them from json string at all (JsonIgnore)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551951117427,
        "id": "9ce4535e-b0e2-4779-9899-aae265f34970",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551951117427,
        "parent_id": "f9ada131-c423-4113-b120-a8e8ca25cec9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "More information about Json.NET serialization attributes can be found "
            ],
            [
              "here",
              [
                [
                  "a",
                  "http://www.newtonsoft.com/json/help/html/serializationattributes.htm"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "More information about Json.NET serialization attributes can be found "
          },
          {
            "Text": "here",
            "Link": "http://www.newtonsoft.com/json/help/html/serializationattributes.htm"
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551951117428,
        "id": "ba0d205f-41f0-4f66-8717-bdba0454303e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551951117428,
        "parent_id": "f9ada131-c423-4113-b120-a8e8ca25cec9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In C#, public identifiers are written in "
            ],
            [
              "PascalCase",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " by convention. In JSON, the convention is to use "
            ],
            [
              "camelCase",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " for all names. You can use a contract resolver to convert between the two."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In C#, public identifiers are written in "
          },
          {
            "Text": "PascalCase",
            "AttrFlags": 4
          },
          {
            "Text": " by convention. In JSON, the convention is to use "
          },
          {
            "Text": "camelCase",
            "AttrFlags": 4
          },
          {
            "Text": " for all names. You can use a contract resolver to convert between the two."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551951117428,
        "id": "a563b8dc-5ea5-4d17-a3e5-107bf530dc0e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551951117428,
        "parent_id": "f9ada131-c423-4113-b120-a8e8ca25cec9",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "using Newtonsoft.Json;\nusing Newtonsoft.Json.Serialization;\n\npublic class Person\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n    [JsonIgnore]\n    public string Address { get; set; }\n}\n\npublic void ToJson() {\n    Person person = new Person { Name = \"Andrius\", Age = 99, Address = \"Some address\" };\n    var resolver = new CamelCasePropertyNamesContractResolver();\n    var settings = new JsonSerializerSettings { ContractResolver = resolver };\n    string json = JsonConvert.SerializeObject(person, settings);\n\n    Console.WriteLine(json); // {\"name\":\"Andrius\",\"age\":99}\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "using Newtonsoft.Json;\nusing Newtonsoft.Json.Serialization;\n\npublic class Person\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n    [JsonIgnore]\n    public string Address { get; set; }\n}\n\npublic void ToJson() {\n    Person person = new Person { Name = \"Andrius\", Age = 99, Address = \"Some address\" };\n    var resolver = new CamelCasePropertyNamesContractResolver();\n    var settings = new JsonSerializerSettings { ContractResolver = resolver };\n    string json = JsonConvert.SerializeObject(person, settings);\n\n    Console.WriteLine(json); // {\"name\":\"Andrius\",\"age\":99}\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "Serialization using Json.NET",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}