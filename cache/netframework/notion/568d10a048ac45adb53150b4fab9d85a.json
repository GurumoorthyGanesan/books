{
  "ID": "568d10a0-48ac-45ad-b531-50b4fab9d85a",
  "Root": {
    "alive": true,
    "content": [
      "38184269-a2be-4a4e-a79c-a80be7c251f9",
      "f52b8c61-0fd1-414e-81d1-da74330dc520",
      "e9bb25c0-ddd0-4296-a680-bed083ae5c88",
      "f534c73c-0237-45dc-a413-8911e562eba4",
      "346d4005-abf8-4e75-9b55-75db76d0dba9",
      "c8dbdd45-221c-4d0f-bb8e-15998a610b7d",
      "b4725e09-3273-4733-93e9-7f181d21b3ab"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551952265517,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "568d10a0-48ac-45ad-b531-50b4fab9d85a",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551952265517,
    "parent_id": "4cd15e8e-d40c-4679-9ced-0cfcb5a44695",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Dispose vs. finalizers"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551952265513,
        "id": "38184269-a2be-4a4e-a79c-a80be7c251f9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551952265513,
        "parent_id": "568d10a0-48ac-45ad-b531-50b4fab9d85a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Implement Dispose() method (and declare the containing class as IDisposable) as a means to ensure any memory-heavy resources are freed as soon as the object is no longer used. The “catch” is that there is no strong guarantee the the Dispose() method would ever be invoked (unlike finalizers that always get invoked at the end of the life of the object)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Implement Dispose() method (and declare the containing class as IDisposable) as a means to ensure any memory-heavy resources are freed as soon as the object is no longer used. The “catch” is that there is no strong guarantee the the Dispose() method would ever be invoked (unlike finalizers that always get invoked at the end of the life of the object)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551952265516,
        "id": "f52b8c61-0fd1-414e-81d1-da74330dc520",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551952265516,
        "parent_id": "568d10a0-48ac-45ad-b531-50b4fab9d85a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "One scenario is a program calling Dispose() on objects it explicitly creates:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "One scenario is a program calling Dispose() on objects it explicitly creates:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551952265516,
        "id": "e9bb25c0-ddd0-4296-a680-bed083ae5c88",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551952265516,
        "parent_id": "568d10a0-48ac-45ad-b531-50b4fab9d85a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "private void SomeFunction()\n{\n    // Initialize an object that uses heavy external resources\n    var disposableObject = new ClassThatImplementsIDisposable();\n\n    // ... Use that object\n\n    // Dispose as soon as no longer used\n    disposableObject.Dispose();\n\n    // ... Do other stuff \n\n    // The disposableObject variable gets out of scope here\n    // The object will be finalized later on (no guarantee when)\n    // But it no longer holds to the heavy external resource after it was disposed\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "private void SomeFunction()\n{\n    // Initialize an object that uses heavy external resources\n    var disposableObject = new ClassThatImplementsIDisposable();\n\n    // ... Use that object\n\n    // Dispose as soon as no longer used\n    disposableObject.Dispose();\n\n    // ... Do other stuff \n\n    // The disposableObject variable gets out of scope here\n    // The object will be finalized later on (no guarantee when)\n    // But it no longer holds to the heavy external resource after it was disposed\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551952265516,
        "id": "f534c73c-0237-45dc-a413-8911e562eba4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551952265516,
        "parent_id": "568d10a0-48ac-45ad-b531-50b4fab9d85a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Another scenario is declaring a class to be instantiated by the framework. In this case the new class usually inherits a base class, for instance in MVC one creates a controller class as a subclass of System.Web.Mvc.ControllerBase. When the base class implements IDisposable interface, this is a good hint that Dispose() would be invoked properly by the framework - but again there is no strong guarantee."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Another scenario is declaring a class to be instantiated by the framework. In this case the new class usually inherits a base class, for instance in MVC one creates a controller class as a subclass of System.Web.Mvc.ControllerBase. When the base class implements IDisposable interface, this is a good hint that Dispose() would be invoked properly by the framework - but again there is no strong guarantee."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551952265517,
        "id": "346d4005-abf8-4e75-9b55-75db76d0dba9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551952265517,
        "parent_id": "568d10a0-48ac-45ad-b531-50b4fab9d85a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Thus Dispose() is not a substitute for a finalizer; instead, the two should be used for different purposes:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Thus Dispose() is not a substitute for a finalizer; instead, the two should be used for different purposes:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551952265517,
        "id": "c8dbdd45-221c-4d0f-bb8e-15998a610b7d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551952265517,
        "parent_id": "568d10a0-48ac-45ad-b531-50b4fab9d85a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A finalizer eventually frees resources to avoid memory leaks that would occur otherwise"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "A finalizer eventually frees resources to avoid memory leaks that would occur otherwise"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551952265517,
        "id": "b4725e09-3273-4733-93e9-7f181d21b3ab",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551952265517,
        "parent_id": "568d10a0-48ac-45ad-b531-50b4fab9d85a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Dispose() frees resources (possibly the same ones) as soon as these are no longer needed, to ease pressure on overall memory allocation."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Dispose() frees resources (possibly the same ones) as soon as these are no longer needed, to ease pressure on overall memory allocation."
          }
        ]
      }
    ],
    "title": "Dispose vs. finalizers",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}