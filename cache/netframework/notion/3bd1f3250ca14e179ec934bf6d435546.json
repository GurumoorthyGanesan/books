{
  "ID": "3bd1f325-0ca1-4e17-9ec9-34bf6d435546",
  "Root": {
    "alive": true,
    "content": [
      "c6f47902-e659-4e4b-bd0c-f54527da3663",
      "c40aeb5d-0c61-48ab-9a6b-e34bdd56ced6",
      "aaf5bef9-d60f-4647-81fa-ad7495ff7047",
      "3a0e10bc-dd64-4f29-bed4-505ebd444060",
      "7fafd0f6-71a9-483e-8eac-e1ec72dfc160",
      "8a248f8c-c6ca-4639-9293-b1b99dee618a",
      "7d10547a-581c-4e45-b9ab-a50d7f6b9f8a",
      "24165e44-6843-4efb-936a-37f77b13c617",
      "029f574a-ce8c-4662-935e-e2b432bbb891"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551952145550,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "3bd1f325-0ca1-4e17-9ec9-34bf6d435546",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551952145550,
    "parent_id": "b7cd86c1-4d1b-4e0a-8478-90678a901422",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Create a Key from a Password Random SALT in C"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551952145547,
        "id": "c6f47902-e659-4e4b-bd0c-f54527da3663",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551952145547,
        "parent_id": "3bd1f325-0ca1-4e17-9ec9-34bf6d435546",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "using System;\nusing System.Security.Cryptography;\nusing System.Text;\n\npublic class PasswordDerivedBytesExample\n{\n    public static void Main(String[] args)\n    {\n        // Get a password from the user.\n        Console.WriteLine(\"Enter a password to produce a key:\");\n\n        byte[] pwd = Encoding.Unicode.GetBytes(Console.ReadLine());\n\n        byte[] salt = CreateRandomSalt(7);\n\n        // Create a TripleDESCryptoServiceProvider object.\n        TripleDESCryptoServiceProvider tdes = new TripleDESCryptoServiceProvider();\n\n        try\n        {\n            Console.WriteLine(\"Creating a key with PasswordDeriveBytes...\");\n\n            // Create a PasswordDeriveBytes object and then create\n            // a TripleDES key from the password and salt.\n            PasswordDeriveBytes pdb = new PasswordDeriveBytes(pwd, salt);\n\n            // Create the key and set it to the Key property\n            // of the TripleDESCryptoServiceProvider object.\n            tdes.Key = pdb.CryptDeriveKey(\"TripleDES\", \"SHA1\", 192, tdes.IV);\n\n            Console.WriteLine(\"Operation complete.\");\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(e.Message);\n        }\n        finally\n        {\n            // Clear the buffers\n            ClearBytes(pwd);\n            ClearBytes(salt);\n\n            // Clear the key.\n            tdes.Clear();\n        }\n\n        Console.ReadLine();\n    }\n\n    #region Helper methods\n\n    /// \u003csummary\u003e\n    /// Generates a random salt value of the specified length.\n    /// \u003c/summary\u003e\n    public static byte[] CreateRandomSalt(int length)\n    {\n        // Create a buffer\n        byte[] randBytes;\n\n        if (length \u003e= 1)\n        {\n            randBytes = new byte[length];\n        }\n        else\n        {\n            randBytes = new byte[1];\n        }\n\n        // Create a new RNGCryptoServiceProvider.\n        RNGCryptoServiceProvider rand = new RNGCryptoServiceProvider();\n\n        // Fill the buffer with random bytes.\n        rand.GetBytes(randBytes);\n\n        // return the bytes.\n        return randBytes;\n    }\n\n    /// \u003csummary\u003e\n    /// Clear the bytes in a buffer so they can't later be read from memory.\n    /// \u003c/summary\u003e\n    public static void ClearBytes(byte[] buffer)\n    {\n        // Check arguments.\n        if (buffer == null)\n        {\n            throw new ArgumentNullException(\"buffer\");\n        }\n\n        // Set each byte in the buffer to 0.\n        for (int x = 0; x \u003c buffer.Length; x++)\n        {\n            buffer[x] = 0;\n        }\n    }\n\n    #endregion\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "using System;\nusing System.Security.Cryptography;\nusing System.Text;\n\npublic class PasswordDerivedBytesExample\n{\n    public static void Main(String[] args)\n    {\n        // Get a password from the user.\n        Console.WriteLine(\"Enter a password to produce a key:\");\n\n        byte[] pwd = Encoding.Unicode.GetBytes(Console.ReadLine());\n\n        byte[] salt = CreateRandomSalt(7);\n\n        // Create a TripleDESCryptoServiceProvider object.\n        TripleDESCryptoServiceProvider tdes = new TripleDESCryptoServiceProvider();\n\n        try\n        {\n            Console.WriteLine(\"Creating a key with PasswordDeriveBytes...\");\n\n            // Create a PasswordDeriveBytes object and then create\n            // a TripleDES key from the password and salt.\n            PasswordDeriveBytes pdb = new PasswordDeriveBytes(pwd, salt);\n\n            // Create the key and set it to the Key property\n            // of the TripleDESCryptoServiceProvider object.\n            tdes.Key = pdb.CryptDeriveKey(\"TripleDES\", \"SHA1\", 192, tdes.IV);\n\n            Console.WriteLine(\"Operation complete.\");\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(e.Message);\n        }\n        finally\n        {\n            // Clear the buffers\n            ClearBytes(pwd);\n            ClearBytes(salt);\n\n            // Clear the key.\n            tdes.Clear();\n        }\n\n        Console.ReadLine();\n    }\n\n    #region Helper methods\n\n    /// \u003csummary\u003e\n    /// Generates a random salt value of the specified length.\n    /// \u003c/summary\u003e\n    public static byte[] CreateRandomSalt(int length)\n    {\n        // Create a buffer\n        byte[] randBytes;\n\n        if (length \u003e= 1)\n        {\n            randBytes = new byte[length];\n        }\n        else\n        {\n            randBytes = new byte[1];\n        }\n\n        // Create a new RNGCryptoServiceProvider.\n        RNGCryptoServiceProvider rand = new RNGCryptoServiceProvider();\n\n        // Fill the buffer with random bytes.\n        rand.GetBytes(randBytes);\n\n        // return the bytes.\n        return randBytes;\n    }\n\n    /// \u003csummary\u003e\n    /// Clear the bytes in a buffer so they can't later be read from memory.\n    /// \u003c/summary\u003e\n    public static void ClearBytes(byte[] buffer)\n    {\n        // Check arguments.\n        if (buffer == null)\n        {\n            throw new ArgumentNullException(\"buffer\");\n        }\n\n        // Set each byte in the buffer to 0.\n        for (int x = 0; x \u003c buffer.Length; x++)\n        {\n            buffer[x] = 0;\n        }\n    }\n\n    #endregion\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551952145548,
        "id": "c40aeb5d-0c61-48ab-9a6b-e34bdd56ced6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551952145548,
        "parent_id": "3bd1f325-0ca1-4e17-9ec9-34bf6d435546",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This example is taken from "
            ],
            [
              "MSDN.",
              [
                [
                  "a",
                  "https://msdn.microsoft.com/en-us/library/system.security.cryptography.passwordderivebytes(v=vs.110).aspx"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This example is taken from "
          },
          {
            "Text": "MSDN.",
            "Link": "https://msdn.microsoft.com/en-us/library/system.security.cryptography.passwordderivebytes(v=vs.110).aspx"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551952145548,
        "id": "aaf5bef9-d60f-4647-81fa-ad7495ff7047",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551952145548,
        "parent_id": "3bd1f325-0ca1-4e17-9ec9-34bf6d435546",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It is a console demo, and it shows how to create a secure key based on a user-defined password, and how to create a random SALT based on the cryptographic random generator."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It is a console demo, and it shows how to create a secure key based on a user-defined password, and how to create a random SALT based on the cryptographic random generator."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551952145548,
        "id": "3a0e10bc-dd64-4f29-bed4-505ebd444060",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551952145548,
        "parent_id": "3bd1f325-0ca1-4e17-9ec9-34bf6d435546",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Notes:",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Notes:",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551952145549,
        "id": "7fafd0f6-71a9-483e-8eac-e1ec72dfc160",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551952145549,
        "parent_id": "3bd1f325-0ca1-4e17-9ec9-34bf6d435546",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The built-in function "
            ],
            [
              "PasswordDeriveBytes",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " uses the standard PBKDF1 algorithm to generate a key from the password. Per default, it uses 100 iterations to generate the key to slow down brute force attacks. The SALT generated randomly further strenghens the key."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "The built-in function "
          },
          {
            "Text": "PasswordDeriveBytes",
            "AttrFlags": 2
          },
          {
            "Text": " uses the standard PBKDF1 algorithm to generate a key from the password. Per default, it uses 100 iterations to generate the key to slow down brute force attacks. The SALT generated randomly further strenghens the key."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551952145549,
        "id": "8a248f8c-c6ca-4639-9293-b1b99dee618a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551952145549,
        "parent_id": "3bd1f325-0ca1-4e17-9ec9-34bf6d435546",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The function "
            ],
            [
              "CryptDeriveKey",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " converts the key generated by "
            ],
            [
              "PasswordDeriveBytes",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " into a key compatible with the specified encryption algorithm (here “TripleDES”) by using the specified hash algorithm (here “SHA1”). The keysize in this example is 192 bytes, and the initialization vector IV is taken from the triple-DES crypto provider"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "The function "
          },
          {
            "Text": "CryptDeriveKey",
            "AttrFlags": 2
          },
          {
            "Text": " converts the key generated by "
          },
          {
            "Text": "PasswordDeriveBytes",
            "AttrFlags": 2
          },
          {
            "Text": " into a key compatible with the specified encryption algorithm (here “TripleDES”) by using the specified hash algorithm (here “SHA1”). The keysize in this example is 192 bytes, and the initialization vector IV is taken from the triple-DES crypto provider"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551952145549,
        "id": "7d10547a-581c-4e45-b9ab-a50d7f6b9f8a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551952145549,
        "parent_id": "3bd1f325-0ca1-4e17-9ec9-34bf6d435546",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Usually, this mechanism is used to protect a stronger random generated key by a password, which encrypts large amount of data. You can also use it to provide multiple passwords of different users to give access to the same data (being protected by a different random key)."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Usually, this mechanism is used to protect a stronger random generated key by a password, which encrypts large amount of data. You can also use it to provide multiple passwords of different users to give access to the same data (being protected by a different random key)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551952145550,
        "id": "24165e44-6843-4efb-936a-37f77b13c617",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551952145550,
        "parent_id": "3bd1f325-0ca1-4e17-9ec9-34bf6d435546",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Unfortunately, "
            ],
            [
              "CryptDeriveKey",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " does currently not support AES. See "
            ],
            [
              "here.",
              [
                [
                  "a",
                  "https://social.msdn.microsoft.com/Forums/vstudio/en-US/61d85001-2eae-4419-b4bf-ce98d46f4d21/passwordderivebytescryptderivekey-derives-an-aes-key-but-gets-object-identifier-oid-is-unknown?forum=netfxbcl"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "NOTE:",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " As a workaround, you can create a random AES key for encryption of the data to be protected with AES and store the AES key in a TripleDES-Container which uses the key generated by "
            ],
            [
              "CryptDeriveKey",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". But that limits the security to TripleDES, does not take advantage of the larger keysizes of AES and creates a dependency to TripleDES."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Unfortunately, "
          },
          {
            "Text": "CryptDeriveKey",
            "AttrFlags": 2
          },
          {
            "Text": " does currently not support AES. See "
          },
          {
            "Text": "here.",
            "Link": "https://social.msdn.microsoft.com/Forums/vstudio/en-US/61d85001-2eae-4419-b4bf-ce98d46f4d21/passwordderivebytescryptderivekey-derives-an-aes-key-but-gets-object-identifier-oid-is-unknown?forum=netfxbcl"
          },
          {
            "Text": " "
          },
          {
            "Text": "NOTE:",
            "AttrFlags": 1
          },
          {
            "Text": " As a workaround, you can create a random AES key for encryption of the data to be protected with AES and store the AES key in a TripleDES-Container which uses the key generated by "
          },
          {
            "Text": "CryptDeriveKey",
            "AttrFlags": 2
          },
          {
            "Text": ". But that limits the security to TripleDES, does not take advantage of the larger keysizes of AES and creates a dependency to TripleDES."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551952145550,
        "id": "029f574a-ce8c-4662-935e-e2b432bbb891",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551952145550,
        "parent_id": "3bd1f325-0ca1-4e17-9ec9-34bf6d435546",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Usage:",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " See Main() method."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Usage:",
            "AttrFlags": 1
          },
          {
            "Text": " See Main() method."
          }
        ]
      }
    ],
    "title": "Create a Key from a Password Random SALT in C",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}