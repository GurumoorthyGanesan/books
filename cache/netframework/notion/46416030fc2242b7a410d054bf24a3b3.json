{
  "ID": "46416030-fc22-42b7-a410-d054bf24a3b3",
  "Root": {
    "alive": true,
    "content": [
      "a42ed384-b85f-4fe2-a58a-98125448407a",
      "d4be2109-b638-43ee-9cf7-5939f5afc330",
      "c2ff7d77-9f6f-427c-9662-676374b8cb1f",
      "1d9843d8-cefb-4a02-afa1-8f7c2b8e0301",
      "cfac9854-78e6-4500-954a-68ec6ba99dff",
      "5243d69b-ce61-4c7c-aaaa-1c2a94de08da",
      "52dc8620-9131-48bc-9208-e9878c8332a4",
      "0751924c-9414-4974-a2d9-ce62f4b2a601",
      "b1c1640f-c8b0-4121-af00-425bac8396b0",
      "38088184-85bf-4803-ba70-ac77455d7808"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551952144516,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "46416030-fc22-42b7-a410-d054bf24a3b3",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551952144516,
    "parent_id": "b7cd86c1-4d1b-4e0a-8478-90678a901422",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Encrypt and decrypt data using AES in C"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551952144508,
        "id": "a42ed384-b85f-4fe2-a58a-98125448407a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551952144508,
        "parent_id": "46416030-fc22-42b7-a410-d054bf24a3b3",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "using System;\nusing System.IO;\nusing System.Security.Cryptography;\n\nnamespace Aes_Example\n{\n    class AesExample\n    {\n        public static void Main()\n        {\n            try\n            {\n                string original = \"Here is some data to encrypt!\";\n\n                // Create a new instance of the Aes class.\n                // This generates a new key and initialization vector (IV).\n                using (Aes myAes = Aes.Create())\n                {\n                    // Encrypt the string to an array of bytes.\n                    byte[] encrypted = EncryptStringToBytes_Aes(original, \n                                                                myAes.Key,\n                                                                myAes.IV);\n\n                    // Decrypt the bytes to a string.\n                    string roundtrip = DecryptStringFromBytes_Aes(encrypted, \n                                                                  myAes.Key, \n                                                                  myAes.IV);\n\n                    //Display the original data and the decrypted data.\n                    Console.WriteLine(\"Original:   {0}\", original);\n                    Console.WriteLine(\"Round Trip: {0}\", roundtrip);\n                }\n            }\n            catch (Exception e)\n            {\n                Console.WriteLine(\"Error: {0}\", e.Message);\n            }\n        }\n\n        static byte[] EncryptStringToBytes_Aes(string plainText, byte[] Key, byte[] IV)\n        {\n            // Check arguments.\n            if (plainText == null || plainText.Length \u003c= 0)\n                throw new ArgumentNullException(\"plainText\");\n            if (Key == null || Key.Length \u003c= 0)\n                throw new ArgumentNullException(\"Key\");\n            if (IV == null || IV.Length \u003c= 0)\n                throw new ArgumentNullException(\"IV\");\n\n            byte[] encrypted;\n\n            // Create an Aes object with the specified key and IV.\n            using (Aes aesAlg = Aes.Create())\n            {\n                aesAlg.Key = Key;\n                aesAlg.IV = IV;\n\n                // Create a decrytor to perform the stream transform.\n                ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key,\n                                                                    aesAlg.IV);\n\n                // Create the streams used for encryption.\n                using (MemoryStream msEncrypt = new MemoryStream())\n                {\n                    using (CryptoStream csEncrypt = new CryptoStream(msEncrypt,\n                                                                     encryptor,\n                                                                     CryptoStreamMode.Write))\n                    {\n                        using (StreamWriter swEncrypt = new StreamWriter(csEncrypt))\n                        {\n                            //Write all data to the stream.\n                            swEncrypt.Write(plainText);\n                        }\n\n                        encrypted = msEncrypt.ToArray();\n                    }\n                }\n            }\n\n            // Return the encrypted bytes from the memory stream.\n            return encrypted;\n        }\n\n        static string DecryptStringFromBytes_Aes(byte[] cipherText, byte[] Key, byte[] IV)\n        {\n            // Check arguments.\n            if (cipherText == null || cipherText.Length \u003c= 0)\n                throw new ArgumentNullException(\"cipherText\");\n            if (Key == null || Key.Length \u003c= 0)\n                throw new ArgumentNullException(\"Key\");\n            if (IV == null || IV.Length \u003c= 0)\n                throw new ArgumentNullException(\"IV\");\n\n            // Declare the string used to hold the decrypted text.\n            string plaintext = null;\n\n            // Create an Aes object with the specified key and IV.\n            using (Aes aesAlg = Aes.Create())\n            {\n                aesAlg.Key = Key;\n                aesAlg.IV = IV;\n\n                // Create a decrytor to perform the stream transform.\n                ICryptoTransform decryptor = aesAlg.CreateDecryptor(aesAlg.Key,\n                                                                    aesAlg.IV);\n\n                // Create the streams used for decryption.\n                using (MemoryStream msDecrypt = new MemoryStream(cipherText))\n                {\n                    using (CryptoStream csDecrypt = new CryptoStream(msDecrypt,\n                                                                     decryptor,\n                                                                     CryptoStreamMode.Read))\n                    {\n                        using (StreamReader srDecrypt = new StreamReader(csDecrypt))\n                        {\n\n                            // Read the decrypted bytes from the decrypting stream\n                            // and place them in a string.\n                            plaintext = srDecrypt.ReadToEnd();\n                        }\n                    }\n                }\n            }\n\n            return plaintext;\n        }\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "using System;\nusing System.IO;\nusing System.Security.Cryptography;\n\nnamespace Aes_Example\n{\n    class AesExample\n    {\n        public static void Main()\n        {\n            try\n            {\n                string original = \"Here is some data to encrypt!\";\n\n                // Create a new instance of the Aes class.\n                // This generates a new key and initialization vector (IV).\n                using (Aes myAes = Aes.Create())\n                {\n                    // Encrypt the string to an array of bytes.\n                    byte[] encrypted = EncryptStringToBytes_Aes(original, \n                                                                myAes.Key,\n                                                                myAes.IV);\n\n                    // Decrypt the bytes to a string.\n                    string roundtrip = DecryptStringFromBytes_Aes(encrypted, \n                                                                  myAes.Key, \n                                                                  myAes.IV);\n\n                    //Display the original data and the decrypted data.\n                    Console.WriteLine(\"Original:   {0}\", original);\n                    Console.WriteLine(\"Round Trip: {0}\", roundtrip);\n                }\n            }\n            catch (Exception e)\n            {\n                Console.WriteLine(\"Error: {0}\", e.Message);\n            }\n        }\n\n        static byte[] EncryptStringToBytes_Aes(string plainText, byte[] Key, byte[] IV)\n        {\n            // Check arguments.\n            if (plainText == null || plainText.Length \u003c= 0)\n                throw new ArgumentNullException(\"plainText\");\n            if (Key == null || Key.Length \u003c= 0)\n                throw new ArgumentNullException(\"Key\");\n            if (IV == null || IV.Length \u003c= 0)\n                throw new ArgumentNullException(\"IV\");\n\n            byte[] encrypted;\n\n            // Create an Aes object with the specified key and IV.\n            using (Aes aesAlg = Aes.Create())\n            {\n                aesAlg.Key = Key;\n                aesAlg.IV = IV;\n\n                // Create a decrytor to perform the stream transform.\n                ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key,\n                                                                    aesAlg.IV);\n\n                // Create the streams used for encryption.\n                using (MemoryStream msEncrypt = new MemoryStream())\n                {\n                    using (CryptoStream csEncrypt = new CryptoStream(msEncrypt,\n                                                                     encryptor,\n                                                                     CryptoStreamMode.Write))\n                    {\n                        using (StreamWriter swEncrypt = new StreamWriter(csEncrypt))\n                        {\n                            //Write all data to the stream.\n                            swEncrypt.Write(plainText);\n                        }\n\n                        encrypted = msEncrypt.ToArray();\n                    }\n                }\n            }\n\n            // Return the encrypted bytes from the memory stream.\n            return encrypted;\n        }\n\n        static string DecryptStringFromBytes_Aes(byte[] cipherText, byte[] Key, byte[] IV)\n        {\n            // Check arguments.\n            if (cipherText == null || cipherText.Length \u003c= 0)\n                throw new ArgumentNullException(\"cipherText\");\n            if (Key == null || Key.Length \u003c= 0)\n                throw new ArgumentNullException(\"Key\");\n            if (IV == null || IV.Length \u003c= 0)\n                throw new ArgumentNullException(\"IV\");\n\n            // Declare the string used to hold the decrypted text.\n            string plaintext = null;\n\n            // Create an Aes object with the specified key and IV.\n            using (Aes aesAlg = Aes.Create())\n            {\n                aesAlg.Key = Key;\n                aesAlg.IV = IV;\n\n                // Create a decrytor to perform the stream transform.\n                ICryptoTransform decryptor = aesAlg.CreateDecryptor(aesAlg.Key,\n                                                                    aesAlg.IV);\n\n                // Create the streams used for decryption.\n                using (MemoryStream msDecrypt = new MemoryStream(cipherText))\n                {\n                    using (CryptoStream csDecrypt = new CryptoStream(msDecrypt,\n                                                                     decryptor,\n                                                                     CryptoStreamMode.Read))\n                    {\n                        using (StreamReader srDecrypt = new StreamReader(csDecrypt))\n                        {\n\n                            // Read the decrypted bytes from the decrypting stream\n                            // and place them in a string.\n                            plaintext = srDecrypt.ReadToEnd();\n                        }\n                    }\n                }\n            }\n\n            return plaintext;\n        }\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551952144512,
        "id": "d4be2109-b638-43ee-9cf7-5939f5afc330",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551952144512,
        "parent_id": "46416030-fc22-42b7-a410-d054bf24a3b3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This example is from "
            ],
            [
              "MSDN",
              [
                [
                  "a",
                  "https://msdn.microsoft.com/en-us/library/system.security.cryptography.aes(v=vs.110).aspx"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This example is from "
          },
          {
            "Text": "MSDN",
            "Link": "https://msdn.microsoft.com/en-us/library/system.security.cryptography.aes(v=vs.110).aspx"
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551952144513,
        "id": "c2ff7d77-9f6f-427c-9662-676374b8cb1f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551952144513,
        "parent_id": "46416030-fc22-42b7-a410-d054bf24a3b3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It is a console demo application, showing how to encrypt a string by using the standard "
            ],
            [
              "AES",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " encryption, and how to decrypt it afterwards."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It is a console demo application, showing how to encrypt a string by using the standard "
          },
          {
            "Text": "AES",
            "AttrFlags": 1
          },
          {
            "Text": " encryption, and how to decrypt it afterwards."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551952144513,
        "id": "1d9843d8-cefb-4a02-afa1-8f7c2b8e0301",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551952144513,
        "parent_id": "46416030-fc22-42b7-a410-d054bf24a3b3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "("
            ],
            [
              "AES = Advanced Encryption Standard",
              [
                [
                  "b"
                ],
                [
                  "a",
                  "https://en.wikipedia.org/wiki/Advanced_Encryption_Standard"
                ]
              ]
            ],
            [
              ",",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " a specification for the encryption of electronic data established by the U.S. National Institute of Standards and Technology (NIST) in 2001 which is still the de-facto standard for symmetric encryption)"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "("
          },
          {
            "Text": "AES = Advanced Encryption Standard",
            "AttrFlags": 1,
            "Link": "https://en.wikipedia.org/wiki/Advanced_Encryption_Standard"
          },
          {
            "Text": ",",
            "AttrFlags": 1
          },
          {
            "Text": " a specification for the encryption of electronic data established by the U.S. National Institute of Standards and Technology (NIST) in 2001 which is still the de-facto standard for symmetric encryption)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551952144513,
        "id": "cfac9854-78e6-4500-954a-68ec6ba99dff",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551952144513,
        "parent_id": "46416030-fc22-42b7-a410-d054bf24a3b3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Notes:",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Notes:",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551952144515,
        "id": "5243d69b-ce61-4c7c-aaaa-1c2a94de08da",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551952144515,
        "parent_id": "46416030-fc22-42b7-a410-d054bf24a3b3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In a real encryption scenario, you need to choose a proper cipher mode (can be assigned to the "
            ],
            [
              "Mode",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " property by selecting a value from the "
            ],
            [
              "CipherMode",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " enumeration). "
            ],
            [
              "Never",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " use the "
            ],
            [
              "CipherMode.ECB",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (electronic codebook mode), since this procuces a weak cypher stream"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "In a real encryption scenario, you need to choose a proper cipher mode (can be assigned to the "
          },
          {
            "Text": "Mode",
            "AttrFlags": 2
          },
          {
            "Text": " property by selecting a value from the "
          },
          {
            "Text": "CipherMode",
            "AttrFlags": 2
          },
          {
            "Text": " enumeration). "
          },
          {
            "Text": "Never",
            "AttrFlags": 1
          },
          {
            "Text": " use the "
          },
          {
            "Text": "CipherMode.ECB",
            "AttrFlags": 2
          },
          {
            "Text": " (electronic codebook mode), since this procuces a weak cypher stream"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551952144515,
        "id": "52dc8620-9131-48bc-9208-e9878c8332a4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551952144515,
        "parent_id": "46416030-fc22-42b7-a410-d054bf24a3b3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To create a good (and not a weak) "
            ],
            [
              "Key",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", either use a cryptographic random generator or use the example above ("
            ],
            [
              "Create a Key from a Password",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "). The recommended "
            ],
            [
              "KeySize",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " is 256 bit. Supported key sizes are available via the "
            ],
            [
              "LegalKeySizes",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " property."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "To create a good (and not a weak) "
          },
          {
            "Text": "Key",
            "AttrFlags": 2
          },
          {
            "Text": ", either use a cryptographic random generator or use the example above ("
          },
          {
            "Text": "Create a Key from a Password",
            "AttrFlags": 1
          },
          {
            "Text": "). The recommended "
          },
          {
            "Text": "KeySize",
            "AttrFlags": 1
          },
          {
            "Text": " is 256 bit. Supported key sizes are available via the "
          },
          {
            "Text": "LegalKeySizes",
            "AttrFlags": 2
          },
          {
            "Text": " property."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551952144515,
        "id": "0751924c-9414-4974-a2d9-ce62f4b2a601",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551952144515,
        "parent_id": "46416030-fc22-42b7-a410-d054bf24a3b3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To initialize the initialization vector "
            ],
            [
              "IV",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", you can use a SALT as shown in the example above ("
            ],
            [
              "Random SALT",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ")"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "To initialize the initialization vector "
          },
          {
            "Text": "IV",
            "AttrFlags": 2
          },
          {
            "Text": ", you can use a SALT as shown in the example above ("
          },
          {
            "Text": "Random SALT",
            "AttrFlags": 1
          },
          {
            "Text": ")"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551952144516,
        "id": "b1c1640f-c8b0-4121-af00-425bac8396b0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551952144516,
        "parent_id": "46416030-fc22-42b7-a410-d054bf24a3b3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Supported block sizes are available via the "
            ],
            [
              "SupportedBlockSizes",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " property, the block size can be assigned via the "
            ],
            [
              "BlockSize",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " property"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Supported block sizes are available via the "
          },
          {
            "Text": "SupportedBlockSizes",
            "AttrFlags": 2
          },
          {
            "Text": " property, the block size can be assigned via the "
          },
          {
            "Text": "BlockSize",
            "AttrFlags": 2
          },
          {
            "Text": " property"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551952144516,
        "id": "38088184-85bf-4803-ba70-ac77455d7808",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551952144516,
        "parent_id": "46416030-fc22-42b7-a410-d054bf24a3b3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Usage:",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " see Main() method."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Usage:",
            "AttrFlags": 1
          },
          {
            "Text": " see Main() method."
          }
        ]
      }
    ],
    "title": "Encrypt and decrypt data using AES in C",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}