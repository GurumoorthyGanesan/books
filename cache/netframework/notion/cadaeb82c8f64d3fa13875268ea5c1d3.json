{
  "ID": "cadaeb82-c8f6-4d3f-a138-75268ea5c1d3",
  "Root": {
    "alive": true,
    "content": [
      "e06b4f3b-5820-4bb8-a3cc-7cf70a420062",
      "73312803-965a-47e7-ae24-c00251a5a252"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551950730425,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "cadaeb82-c8f6-4d3f-a138-75268ea5c1d3",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551950730425,
    "parent_id": "4bda71fd-ad0d-41b6-90bd-b47b4f14bed7",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Getting an attribute of an enum with reflection and caching it"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551950730425,
        "id": "e06b4f3b-5820-4bb8-a3cc-7cf70a420062",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551950730425,
        "parent_id": "cadaeb82-c8f6-4d3f-a138-75268ea5c1d3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Attributes can be useful for denoting metadata on enums. Getting the value of this can be slow, so it is important to cache results."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Attributes can be useful for denoting metadata on enums. Getting the value of this can be slow, so it is important to cache results."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551950730425,
        "id": "73312803-965a-47e7-ae24-c00251a5a252",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551950730425,
        "parent_id": "cadaeb82-c8f6-4d3f-a138-75268ea5c1d3",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "private static Dictionary\u003cobject, object\u003e attributeCache = new Dictionary\u003cobject, object\u003e();\n\npublic static T GetAttribute\u003cT, V\u003e(this V value)\n    where T : Attribute\n    where V : struct\n{\n    object temp;\n\n    // Try to get the value from the static cache.\n    if (attributeCache.TryGetValue(value, out temp))\n    {\n        return (T) temp;\n    }\n    else\n    {\n        // Get the type of the struct passed in.\n        Type type = value.GetType();   \n        FieldInfo fieldInfo = type.GetField(value.ToString());\n\n        // Get the custom attributes of the type desired found on the struct.\n        T[] attribs = (T[])fieldInfo.GetCustomAttributes(typeof(T), false);\n\n        // Return the first if there was a match.\n        var result = attribs.Length \u003e 0 ? attribs[0] : null;\n\n        // Cache the result so future checks won't need reflection.\n        attributeCache.Add(value, result);\n\n        return result;\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "private static Dictionary\u003cobject, object\u003e attributeCache = new Dictionary\u003cobject, object\u003e();\n\npublic static T GetAttribute\u003cT, V\u003e(this V value)\n    where T : Attribute\n    where V : struct\n{\n    object temp;\n\n    // Try to get the value from the static cache.\n    if (attributeCache.TryGetValue(value, out temp))\n    {\n        return (T) temp;\n    }\n    else\n    {\n        // Get the type of the struct passed in.\n        Type type = value.GetType();   \n        FieldInfo fieldInfo = type.GetField(value.ToString());\n\n        // Get the custom attributes of the type desired found on the struct.\n        T[] attribs = (T[])fieldInfo.GetCustomAttributes(typeof(T), false);\n\n        // Return the first if there was a match.\n        var result = attribs.Length \u003e 0 ? attribs[0] : null;\n\n        // Cache the result so future checks won't need reflection.\n        attributeCache.Add(value, result);\n\n        return result;\n    }\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "Getting an attribute of an enum with reflection and caching it",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}