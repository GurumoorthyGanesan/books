{
  "ID": "0325f242-8f85-45a6-860a-42cfca6b48bd",
  "Root": {
    "alive": true,
    "content": [
      "c227b8de-5cc2-4d18-824b-5a732b917467",
      "4623866e-3420-4af3-bdc2-662dbe5a233a",
      "177de8d9-f9a5-4df7-bfee-a0e2d90c8024",
      "1b1ecfbe-d8f3-47c0-8f62-ac7fa1f3c6a8",
      "79bfee8b-0e55-47e6-980f-365399adbaa9",
      "8870e4e0-8acc-4f8e-a9e0-832a39b9066a",
      "846b093b-1963-44c1-a537-213384fe2fab",
      "5b79e5ea-8462-4f03-bb0f-807369776f6e",
      "82e610cb-abf8-4f57-9594-4d89d8f58ff8",
      "9a4b4be8-41ae-4a2d-8415-fd70dbe97b01",
      "e7181b5f-c794-4938-aebb-fad3b6d8d059"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551951566430,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "0325f242-8f85-45a6-860a-42cfca6b48bd",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551951566430,
    "parent_id": "13fcd1ea-9ee9-4041-b996-ee82c3fe1e11",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Dependency Injection"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551951566427,
        "id": "c227b8de-5cc2-4d18-824b-5a732b917467",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551951566427,
        "parent_id": "0325f242-8f85-45a6-860a-42cfca6b48bd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Remarks"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Remarks"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551951566427,
        "id": "4623866e-3420-4af3-bdc2-662dbe5a233a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551951566427,
        "parent_id": "0325f242-8f85-45a6-860a-42cfca6b48bd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Problems Solved By Dependency Injection",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Problems Solved By Dependency Injection",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551951566428,
        "id": "177de8d9-f9a5-4df7-bfee-a0e2d90c8024",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551951566428,
        "parent_id": "0325f242-8f85-45a6-860a-42cfca6b48bd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If we didn’t use dependency injection, the "
            ],
            [
              "Greeter",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " class might look more like this:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If we didn’t use dependency injection, the "
          },
          {
            "Text": "Greeter",
            "AttrFlags": 2
          },
          {
            "Text": " class might look more like this:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551951566428,
        "id": "1b1ecfbe-d8f3-47c0-8f62-ac7fa1f3c6a8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551951566428,
        "parent_id": "0325f242-8f85-45a6-860a-42cfca6b48bd",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class ControlFreakGreeter\n{\n    public void Greet()\n    {\n        var greetingProvider = new SqlGreetingProvider(\n            ConfigurationManager.ConnectionStrings[\"myConnectionString\"].ConnectionString);\n        var greeting = greetingProvider.GetGreeting();\n        Console.WriteLine(greeting);\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class ControlFreakGreeter\n{\n    public void Greet()\n    {\n        var greetingProvider = new SqlGreetingProvider(\n            ConfigurationManager.ConnectionStrings[\"myConnectionString\"].ConnectionString);\n        var greeting = greetingProvider.GetGreeting();\n        Console.WriteLine(greeting);\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551951566428,
        "id": "79bfee8b-0e55-47e6-980f-365399adbaa9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551951566428,
        "parent_id": "0325f242-8f85-45a6-860a-42cfca6b48bd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It’s a “control freak” because it controls creating the class that provides the greeting, it controls where the SQL connection string comes from, and it controls the output."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It’s a “control freak” because it controls creating the class that provides the greeting, it controls where the SQL connection string comes from, and it controls the output."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551951566428,
        "id": "8870e4e0-8acc-4f8e-a9e0-832a39b9066a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551951566428,
        "parent_id": "0325f242-8f85-45a6-860a-42cfca6b48bd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Using dependency injection, the "
            ],
            [
              "Greeter",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " class relinquishes those responsibilities in favor of a single responsibility, writing a greeting provided to it."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Using dependency injection, the "
          },
          {
            "Text": "Greeter",
            "AttrFlags": 2
          },
          {
            "Text": " class relinquishes those responsibilities in favor of a single responsibility, writing a greeting provided to it."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551951566429,
        "id": "846b093b-1963-44c1-a537-213384fe2fab",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551951566429,
        "parent_id": "0325f242-8f85-45a6-860a-42cfca6b48bd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "Dependency Inversion Principle",
              [
                [
                  "a",
                  "https://en.wikipedia.org/wiki/Dependency_inversion_principle"
                ]
              ]
            ],
            [
              " suggests that classes should depend on abstractions (like interfaces) rather than on other concrete classes. Direct dependencies (coupling) between classes can make maintenance progressively difficult. Depending on abstractions can reduce that coupling."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "Dependency Inversion Principle",
            "Link": "https://en.wikipedia.org/wiki/Dependency_inversion_principle"
          },
          {
            "Text": " suggests that classes should depend on abstractions (like interfaces) rather than on other concrete classes. Direct dependencies (coupling) between classes can make maintenance progressively difficult. Depending on abstractions can reduce that coupling."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551951566429,
        "id": "5b79e5ea-8462-4f03-bb0f-807369776f6e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551951566429,
        "parent_id": "0325f242-8f85-45a6-860a-42cfca6b48bd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Dependency injection helps us to achieve that dependency inversion because it leads to writing classes that depend on abstractions. The "
            ],
            [
              "Greeter",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " class “knows” nothing at all of the implementation details of "
            ],
            [
              "IGreetingProvider",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "IGreetingWriter",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". It only knows that the injected dependencies implement those interfaces. That means that changes to the concrete classes that implement "
            ],
            [
              "IGreetingProvider",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "IGreetingWriter",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will not affect "
            ],
            [
              "Greeter",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Neither will replacing them with entirely different implementations. Only changes to the interfaces will. "
            ],
            [
              "Greeter",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is decoupled."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Dependency injection helps us to achieve that dependency inversion because it leads to writing classes that depend on abstractions. The "
          },
          {
            "Text": "Greeter",
            "AttrFlags": 2
          },
          {
            "Text": " class “knows” nothing at all of the implementation details of "
          },
          {
            "Text": "IGreetingProvider",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "IGreetingWriter",
            "AttrFlags": 2
          },
          {
            "Text": ". It only knows that the injected dependencies implement those interfaces. That means that changes to the concrete classes that implement "
          },
          {
            "Text": "IGreetingProvider",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "IGreetingWriter",
            "AttrFlags": 2
          },
          {
            "Text": " will not affect "
          },
          {
            "Text": "Greeter",
            "AttrFlags": 2
          },
          {
            "Text": ". Neither will replacing them with entirely different implementations. Only changes to the interfaces will. "
          },
          {
            "Text": "Greeter",
            "AttrFlags": 2
          },
          {
            "Text": " is decoupled."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551951566429,
        "id": "82e610cb-abf8-4f57-9594-4d89d8f58ff8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551951566429,
        "parent_id": "0325f242-8f85-45a6-860a-42cfca6b48bd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "ControlFreakGreeter",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is impossible to properly unit test. We want to test one small unit of code, but instead our test would include connecting to SQL and executing a stored procedure. It would also include testing the console output. Because ControlFreakGreeter does so much it’s impossible to test in isolation from other classes."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "ControlFreakGreeter",
            "AttrFlags": 2
          },
          {
            "Text": " is impossible to properly unit test. We want to test one small unit of code, but instead our test would include connecting to SQL and executing a stored procedure. It would also include testing the console output. Because ControlFreakGreeter does so much it’s impossible to test in isolation from other classes."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551951566429,
        "id": "9a4b4be8-41ae-4a2d-8415-fd70dbe97b01",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551951566429,
        "parent_id": "0325f242-8f85-45a6-860a-42cfca6b48bd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Greeter",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is easy to unit test because we can inject mocked implementations of its dependencies that are easier to execute and verify than calling a stored procedure or reading the output of the console. It doesn’t require a connection string in app.config."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Greeter",
            "AttrFlags": 2
          },
          {
            "Text": " is easy to unit test because we can inject mocked implementations of its dependencies that are easier to execute and verify than calling a stored procedure or reading the output of the console. It doesn’t require a connection string in app.config."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551951566430,
        "id": "e7181b5f-c794-4938-aebb-fad3b6d8d059",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551951566430,
        "parent_id": "0325f242-8f85-45a6-860a-42cfca6b48bd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The concrete implementations of "
            ],
            [
              "IGreetingProvider",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "IGreetingWriter",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " might become more complex. They, in turn might have their own dependencies which are injected into them. (For example, we’d inject the SQL connection string into "
            ],
            [
              "SqlGreetingProvider",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ".) But that complexity is “hidden” from other classes which only depend on the interfaces. That makes it easier to modify one class without a “ripple effect” that requires us to make corresponding changes to other classes."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The concrete implementations of "
          },
          {
            "Text": "IGreetingProvider",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "IGreetingWriter",
            "AttrFlags": 2
          },
          {
            "Text": " might become more complex. They, in turn might have their own dependencies which are injected into them. (For example, we’d inject the SQL connection string into "
          },
          {
            "Text": "SqlGreetingProvider",
            "AttrFlags": 2
          },
          {
            "Text": ".) But that complexity is “hidden” from other classes which only depend on the interfaces. That makes it easier to modify one class without a “ripple effect” that requires us to make corresponding changes to other classes."
          }
        ]
      }
    ],
    "title": "Dependency Injection",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}