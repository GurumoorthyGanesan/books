{
  "ID": "4cb10356-f522-44c0-97d7-b1a8a9999b28",
  "Root": {
    "alive": true,
    "content": [
      "bb1c7bbf-b27c-486c-b7b2-b09900e5b508"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551951134550,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "4cb10356-f522-44c0-97d7-b1a8a9999b28",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551951134550,
    "parent_id": "b3f43cee-5486-4d44-aa91-ecaaf72cc072",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Synchronous ProducerConsumer with BufferBlockT"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551951134548,
        "id": "bb1c7bbf-b27c-486c-b7b2-b09900e5b508",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551951134548,
        "parent_id": "4cb10356-f522-44c0-97d7-b1a8a9999b28",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class Producer\n{\n    private static Random random = new Random((int)DateTime.UtcNow.Ticks);\n    //produce the value that will be posted to buffer block\n    public double Produce ( )\n    {\n        var value = random.NextDouble();\n        Console.WriteLine($\"Producing value: {value}\");\n        return value;\n    }\n}\n\npublic class Consumer\n{\n    //consume the value that will be received from buffer block\n    public void Consume (double value) =\u003e Console.WriteLine($\"Consuming value: {value}\");\n}\n\nclass Program\n{\n    private static BufferBlock\u003cdouble\u003e buffer = new BufferBlock\u003cdouble\u003e();\n    static void Main (string[] args)\n    {\n        //start a task that will every 1 second post a value from the producer to buffer block\n        var producerTask = Task.Run(async () =\u003e\n        {\n            var producer = new Producer();\n            while(true)\n            {\n                buffer.Post(producer.Produce());\n                await Task.Delay(1000);\n            }\n        });\n        //start a task that will recieve values from bufferblock and consume it\n        var consumerTask = Task.Run(() =\u003e \n        {\n            var consumer = new Consumer();\n            while(true)\n            {\n                consumer.Consume(buffer.Receive());\n            }\n        });\n\n        Task.WaitAll(new[] { producerTask, consumerTask });\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class Producer\n{\n    private static Random random = new Random((int)DateTime.UtcNow.Ticks);\n    //produce the value that will be posted to buffer block\n    public double Produce ( )\n    {\n        var value = random.NextDouble();\n        Console.WriteLine($\"Producing value: {value}\");\n        return value;\n    }\n}\n\npublic class Consumer\n{\n    //consume the value that will be received from buffer block\n    public void Consume (double value) =\u003e Console.WriteLine($\"Consuming value: {value}\");\n}\n\nclass Program\n{\n    private static BufferBlock\u003cdouble\u003e buffer = new BufferBlock\u003cdouble\u003e();\n    static void Main (string[] args)\n    {\n        //start a task that will every 1 second post a value from the producer to buffer block\n        var producerTask = Task.Run(async () =\u003e\n        {\n            var producer = new Producer();\n            while(true)\n            {\n                buffer.Post(producer.Produce());\n                await Task.Delay(1000);\n            }\n        });\n        //start a task that will recieve values from bufferblock and consume it\n        var consumerTask = Task.Run(() =\u003e \n        {\n            var consumer = new Consumer();\n            while(true)\n            {\n                consumer.Consume(buffer.Receive());\n            }\n        });\n\n        Task.WaitAll(new[] { producerTask, consumerTask });\n    }\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "Synchronous ProducerConsumer with BufferBlockT",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}