{
  "ID": "0b1d6a76-e88a-42c6-b618-1861b84cf708",
  "Root": {
    "alive": true,
    "content": [
      "749a7250-e8ae-4679-8131-d839d4826236",
      "db1e23c4-84a2-4b53-94ad-d966878b09eb",
      "ffcdc6fa-9a9b-4bda-8cb2-a1995d7514d4",
      "6ec22fb6-973e-42d1-b0c7-acfc61a90de3"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551952301552,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "0b1d6a76-e88a-42c6-b618-1861b84cf708",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551952301552,
    "parent_id": "524d9bfb-5233-4062-84c4-edd378f0520f",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Upload file with WebRequest"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551952301551,
        "id": "749a7250-e8ae-4679-8131-d839d4826236",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551952301551,
        "parent_id": "0b1d6a76-e88a-42c6-b618-1861b84cf708",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To send a file and form data in single request, content should have "
            ],
            [
              "multipart/form-data",
              [
                [
                  "a",
                  "https://tools.ietf.org/html/rfc2388"
                ]
              ]
            ],
            [
              " type."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To send a file and form data in single request, content should have "
          },
          {
            "Text": "multipart/form-data",
            "Link": "https://tools.ietf.org/html/rfc2388"
          },
          {
            "Text": " type."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551952301551,
        "id": "db1e23c4-84a2-4b53-94ad-d966878b09eb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551952301551,
        "parent_id": "0b1d6a76-e88a-42c6-b618-1861b84cf708",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Net;\nusing System.Threading.Tasks;\n\npublic async Task\u003cstring\u003e UploadFile(string url, string filename, \n    Dictionary\u003cstring, object\u003e postData)\n{\n    var request = WebRequest.CreateHttp(url);\n    var boundary = $\"{Guid.NewGuid():N}\"; // boundary will separate each parameter\n    request.ContentType = $\"multipart/form-data; {nameof(boundary)}={boundary}\";\n    request.Method = \"POST\";\n\n    using (var requestStream = request.GetRequestStream())\n    using (var writer = new StreamWriter(requestStream))\n    {\n        foreach (var data in postData)\n            await writer.WriteAsync( // put all POST data into request\n                $\"\\r\\n--{boundary}\\r\\nContent-Disposition: \" +\n                $\"form-data; name=\\\"{data.Key}\\\"\\r\\n\\r\\n{data.Value}\");\n\n        await writer.WriteAsync( // file header\n            $\"\\r\\n--{boundary}\\r\\nContent-Disposition: \" +\n            $\"form-data; name=\\\"File\\\"; filename=\\\"{Path.GetFileName(filename)}\\\"\\r\\n\" +\n            \"Content-Type: application/octet-stream\\r\\n\\r\\n\");\n\n        await writer.FlushAsync();\n        using (var fileStream = File.OpenRead(filename))\n            await fileStream.CopyToAsync(requestStream);\n\n        await writer.WriteAsync($\"\\r\\n--{boundary}--\\r\\n\");\n    }\n\n    using (var response = (HttpWebResponse) await request.GetResponseAsync())\n    using (var responseStream = response.GetResponseStream())\n    {\n        if (responseStream == null)\n            return string.Empty;\n        using (var reader = new StreamReader(responseStream))\n            return await reader.ReadToEndAsync();\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Net;\nusing System.Threading.Tasks;\n\npublic async Task\u003cstring\u003e UploadFile(string url, string filename, \n    Dictionary\u003cstring, object\u003e postData)\n{\n    var request = WebRequest.CreateHttp(url);\n    var boundary = $\"{Guid.NewGuid():N}\"; // boundary will separate each parameter\n    request.ContentType = $\"multipart/form-data; {nameof(boundary)}={boundary}\";\n    request.Method = \"POST\";\n\n    using (var requestStream = request.GetRequestStream())\n    using (var writer = new StreamWriter(requestStream))\n    {\n        foreach (var data in postData)\n            await writer.WriteAsync( // put all POST data into request\n                $\"\\r\\n--{boundary}\\r\\nContent-Disposition: \" +\n                $\"form-data; name=\\\"{data.Key}\\\"\\r\\n\\r\\n{data.Value}\");\n\n        await writer.WriteAsync( // file header\n            $\"\\r\\n--{boundary}\\r\\nContent-Disposition: \" +\n            $\"form-data; name=\\\"File\\\"; filename=\\\"{Path.GetFileName(filename)}\\\"\\r\\n\" +\n            \"Content-Type: application/octet-stream\\r\\n\\r\\n\");\n\n        await writer.FlushAsync();\n        using (var fileStream = File.OpenRead(filename))\n            await fileStream.CopyToAsync(requestStream);\n\n        await writer.WriteAsync($\"\\r\\n--{boundary}--\\r\\n\");\n    }\n\n    using (var response = (HttpWebResponse) await request.GetResponseAsync())\n    using (var responseStream = response.GetResponseStream())\n    {\n        if (responseStream == null)\n            return string.Empty;\n        using (var reader = new StreamReader(responseStream))\n            return await reader.ReadToEndAsync();\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551952301551,
        "id": "ffcdc6fa-9a9b-4bda-8cb2-a1995d7514d4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551952301551,
        "parent_id": "0b1d6a76-e88a-42c6-b618-1861b84cf708",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Usage:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Usage:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551952301551,
        "id": "6ec22fb6-973e-42d1-b0c7-acfc61a90de3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551952301551,
        "parent_id": "0b1d6a76-e88a-42c6-b618-1861b84cf708",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "var response = await uploader.UploadFile(\"\u003c YOUR URL \u003e\", \"\u003c PATH TO YOUR FILE \u003e\",\n    new Dictionary\u003cstring, object\u003e\n    {\n        {\"Comment\", \"test\"},\n        {\"Modified\", DateTime.Now }\n    });"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "var response = await uploader.UploadFile(\"\u003c YOUR URL \u003e\", \"\u003c PATH TO YOUR FILE \u003e\",\n    new Dictionary\u003cstring, object\u003e\n    {\n        {\"Comment\", \"test\"},\n        {\"Modified\", DateTime.Now }\n    });",
        "code_language": "Plain Text"
      }
    ],
    "title": "Upload file with WebRequest",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}