{
  "ID": "5aa7fa81-5e56-4b06-b123-7a0d473acd1e",
  "Root": {
    "alive": true,
    "content": [
      "be399c3b-16d8-493d-81d9-ae455e17008a",
      "845c057c-8f2c-4b8a-a913-ff1bc279bb70",
      "fa4c3e19-9e9d-43d0-9b61-127d30acf923"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551951555300,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "5aa7fa81-5e56-4b06-b123-7a0d473acd1e",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551951555300,
    "parent_id": "b4b4834d-3ff1-40e2-9a90-ddac3a7f4364",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Get process affinity mask"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551951555298,
        "id": "be399c3b-16d8-493d-81d9-ae455e17008a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551951555298,
        "parent_id": "5aa7fa81-5e56-4b06-b123-7a0d473acd1e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public static int GetProcessAffinityMask(string processName = null)\n    {\n        Process myProcess = GetProcessByName(ref processName);\n\n        int processorAffinity = (int)myProcess.ProcessorAffinity;\n        Console.WriteLine(\"Process {0} Affinity Mask is : {1}\", processName, FormatAffinity(processorAffinity));\n\n        return processorAffinity;\n    }\n\n    public static Process GetProcessByName(ref string processName)\n    {\n        Process myProcess;\n        if (string.IsNullOrEmpty(processName))\n        {\n            myProcess = Process.GetCurrentProcess();\n            processName = myProcess.ProcessName;\n        }\n        else\n        {\n            Process[] processList = Process.GetProcessesByName(processName);\n            myProcess = processList[0];\n        }\n        return myProcess;\n    }\n\n    private static string FormatAffinity(int affinity)\n    {\n        return Convert.ToString(affinity, 2).PadLeft(Environment.ProcessorCount, '0');\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public static int GetProcessAffinityMask(string processName = null)\n    {\n        Process myProcess = GetProcessByName(ref processName);\n\n        int processorAffinity = (int)myProcess.ProcessorAffinity;\n        Console.WriteLine(\"Process {0} Affinity Mask is : {1}\", processName, FormatAffinity(processorAffinity));\n\n        return processorAffinity;\n    }\n\n    public static Process GetProcessByName(ref string processName)\n    {\n        Process myProcess;\n        if (string.IsNullOrEmpty(processName))\n        {\n            myProcess = Process.GetCurrentProcess();\n            processName = myProcess.ProcessName;\n        }\n        else\n        {\n            Process[] processList = Process.GetProcessesByName(processName);\n            myProcess = processList[0];\n        }\n        return myProcess;\n    }\n\n    private static string FormatAffinity(int affinity)\n    {\n        return Convert.ToString(affinity, 2).PadLeft(Environment.ProcessorCount, '0');\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551951555300,
        "id": "845c057c-8f2c-4b8a-a913-ff1bc279bb70",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551951555300,
        "parent_id": "5aa7fa81-5e56-4b06-b123-7a0d473acd1e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Example of usage :"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Example of usage :"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551951555300,
        "id": "fa4c3e19-9e9d-43d0-9b61-127d30acf923",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551951555300,
        "parent_id": "5aa7fa81-5e56-4b06-b123-7a0d473acd1e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "private static void Main(string[] args)\n{\n    GetProcessAffinityMask();\n\n    Console.ReadKey();\n}\n// Output:\n// Process Test.vshost Affinity Mask is : 11111111"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "private static void Main(string[] args)\n{\n    GetProcessAffinityMask();\n\n    Console.ReadKey();\n}\n// Output:\n// Process Test.vshost Affinity Mask is : 11111111",
        "code_language": "Plain Text"
      }
    ],
    "title": "Get process affinity mask",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}