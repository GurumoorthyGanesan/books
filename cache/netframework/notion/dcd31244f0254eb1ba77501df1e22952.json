{
  "ID": "dcd31244-f025-4eb1-ba77-501df1e22952",
  "Root": {
    "alive": true,
    "content": [
      "f2a5e1f1-e334-4b16-b1b4-546b8a449248",
      "34e264f0-7140-4bac-9343-33d34c881ded",
      "44ea44bb-f1df-440c-82f4-b93897225c92",
      "aa632426-460d-4686-82f8-0a497200eb07",
      "2b24136d-58aa-4ae4-b8d4-e67f60cab273",
      "e816e58e-7ad5-41ff-bb23-2c90b045ddc0",
      "b91a516a-42b4-46c0-a63e-ab7d34c5a0d9",
      "482b09a2-6292-4ddd-908a-023d737a10fd",
      "75c0da75-bab7-455d-9ac9-232b6f603ae0",
      "deb600a1-c3f8-4c00-87c1-7aa2315f601d",
      "62906b96-2c20-4ba5-95e4-184b9dac6334"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551951227743,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "dcd31244-f025-4eb1-ba77-501df1e22952",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551951227743,
    "parent_id": "10e9af4b-fd8b-4668-bcc1-8a1d2ce2433e",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Strings"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551951227733,
        "id": "f2a5e1f1-e334-4b16-b1b4-546b8a449248",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551951227733,
        "parent_id": "dcd31244-f025-4eb1-ba77-501df1e22952",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Remarks"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Remarks"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551951227735,
        "id": "34e264f0-7140-4bac-9343-33d34c881ded",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551951227735,
        "parent_id": "dcd31244-f025-4eb1-ba77-501df1e22952",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In .NET strings "
            ],
            [
              "System.String",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " are sequence of characters "
            ],
            [
              "System.Char",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", each character is an UTF-16 encoded code-unit. This distinction is important because "
            ],
            [
              "spoken language",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " definition of "
            ],
            [
              "character",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " and .NET (and many other languages) definition of character are different."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In .NET strings "
          },
          {
            "Text": "System.String",
            "AttrFlags": 2
          },
          {
            "Text": " are sequence of characters "
          },
          {
            "Text": "System.Char",
            "AttrFlags": 2
          },
          {
            "Text": ", each character is an UTF-16 encoded code-unit. This distinction is important because "
          },
          {
            "Text": "spoken language",
            "AttrFlags": 4
          },
          {
            "Text": " definition of "
          },
          {
            "Text": "character",
            "AttrFlags": 4
          },
          {
            "Text": " and .NET (and many other languages) definition of character are different."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551951227738,
        "id": "44ea44bb-f1df-440c-82f4-b93897225c92",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551951227738,
        "parent_id": "dcd31244-f025-4eb1-ba77-501df1e22952",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "One "
            ],
            [
              "character",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ", which should be correctly called "
            ],
            [
              "grapheme",
              [
                [
                  "a",
                  "https://en.wikipedia.org/wiki/Grapheme"
                ]
              ]
            ],
            [
              ", it’s displayed as a "
            ],
            [
              "glyph",
              [
                [
                  "a",
                  "https://en.wikipedia.org/wiki/Glyph"
                ]
              ]
            ],
            [
              " and it is defined by one or more Unicode "
            ],
            [
              "code-points",
              [
                [
                  "a",
                  "https://en.wikipedia.org/wiki/Code_point"
                ]
              ]
            ],
            [
              ". Each code-point is then encoded in a sequence of "
            ],
            [
              "code-units",
              [
                [
                  "a",
                  "https://en.wikipedia.org/wiki/Character_encoding#Code_unit"
                ]
              ]
            ],
            [
              ". Now it should be clear why a single "
            ],
            [
              "System.Char",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " does not always represent a grapheme, let’s see in real world how they’re different:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "One "
          },
          {
            "Text": "character",
            "AttrFlags": 4
          },
          {
            "Text": ", which should be correctly called "
          },
          {
            "Text": "grapheme",
            "Link": "https://en.wikipedia.org/wiki/Grapheme"
          },
          {
            "Text": ", it’s displayed as a "
          },
          {
            "Text": "glyph",
            "Link": "https://en.wikipedia.org/wiki/Glyph"
          },
          {
            "Text": " and it is defined by one or more Unicode "
          },
          {
            "Text": "code-points",
            "Link": "https://en.wikipedia.org/wiki/Code_point"
          },
          {
            "Text": ". Each code-point is then encoded in a sequence of "
          },
          {
            "Text": "code-units",
            "Link": "https://en.wikipedia.org/wiki/Character_encoding#Code_unit"
          },
          {
            "Text": ". Now it should be clear why a single "
          },
          {
            "Text": "System.Char",
            "AttrFlags": 2
          },
          {
            "Text": " does not always represent a grapheme, let’s see in real world how they’re different:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551951227740,
        "id": "aa632426-460d-4686-82f8-0a497200eb07",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551951227740,
        "parent_id": "dcd31244-f025-4eb1-ba77-501df1e22952",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "One grapheme, because of "
            ],
            [
              "combining characters",
              [
                [
                  "a",
                  "https://en.wikipedia.org/wiki/Combining_character"
                ]
              ]
            ],
            [
              ", may result in two or more code-points: à is composed by two code-points: "
            ],
            [
              "U+0061 LATIN SMALL LETTER A",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "U+0300 COMBINING GRAVE ACCENT",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ". This is the most common mistake because "
            ],
            [
              "\"à\".Length == 2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " while you may expect "
            ],
            [
              "1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "One grapheme, because of "
          },
          {
            "Text": "combining characters",
            "Link": "https://en.wikipedia.org/wiki/Combining_character"
          },
          {
            "Text": ", may result in two or more code-points: à is composed by two code-points: "
          },
          {
            "Text": "U+0061 LATIN SMALL LETTER A",
            "AttrFlags": 4
          },
          {
            "Text": " and "
          },
          {
            "Text": "U+0300 COMBINING GRAVE ACCENT",
            "AttrFlags": 4
          },
          {
            "Text": ". This is the most common mistake because "
          },
          {
            "Text": "\"à\".Length == 2",
            "AttrFlags": 2
          },
          {
            "Text": " while you may expect "
          },
          {
            "Text": "1",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551951227740,
        "id": "2b24136d-58aa-4ae4-b8d4-e67f60cab273",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551951227740,
        "parent_id": "dcd31244-f025-4eb1-ba77-501df1e22952",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "There are duplicated characters, for example à may be a single code-point "
            ],
            [
              "U+00E0 LATIN SMALL LETTER A WITH GRAVE",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " or two code-points as explained above. Obviously they must compare the same: "
            ],
            [
              "\"\\u00e0\" == \"\\u0061\\u0300\"",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (even if "
            ],
            [
              "\"\\u00e0\".Length != \"\\u0061\\u0300\".Length",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "). This is possible because of "
            ],
            [
              "string normalization",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " performed by "
            ],
            [
              "String.Normalize()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "There are duplicated characters, for example à may be a single code-point "
          },
          {
            "Text": "U+00E0 LATIN SMALL LETTER A WITH GRAVE",
            "AttrFlags": 4
          },
          {
            "Text": " or two code-points as explained above. Obviously they must compare the same: "
          },
          {
            "Text": "\"\\u00e0\" == \"\\u0061\\u0300\"",
            "AttrFlags": 2
          },
          {
            "Text": " (even if "
          },
          {
            "Text": "\"\\u00e0\".Length != \"\\u0061\\u0300\".Length",
            "AttrFlags": 2
          },
          {
            "Text": "). This is possible because of "
          },
          {
            "Text": "string normalization",
            "AttrFlags": 4
          },
          {
            "Text": " performed by "
          },
          {
            "Text": "String.Normalize()",
            "AttrFlags": 2
          },
          {
            "Text": " method."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551951227741,
        "id": "e816e58e-7ad5-41ff-bb23-2c90b045ddc0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551951227741,
        "parent_id": "dcd31244-f025-4eb1-ba77-501df1e22952",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "An Unicode sequence may contain a composed or decomposed sequence, for example character 한 "
            ],
            [
              "U+D55C HAN CHARACTER",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " may be a single code-point (encoded as a single code-unit in UTF-16) or a decomposed sequence of its syllables ᄒ, ᅡ and ᆫ. They must be compared equal."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "An Unicode sequence may contain a composed or decomposed sequence, for example character 한 "
          },
          {
            "Text": "U+D55C HAN CHARACTER",
            "AttrFlags": 4
          },
          {
            "Text": " may be a single code-point (encoded as a single code-unit in UTF-16) or a decomposed sequence of its syllables ᄒ, ᅡ and ᆫ. They must be compared equal."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551951227741,
        "id": "b91a516a-42b4-46c0-a63e-ab7d34c5a0d9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551951227741,
        "parent_id": "dcd31244-f025-4eb1-ba77-501df1e22952",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "One code-point may be encoded to more than one code-units: character 𠂊 "
            ],
            [
              "U+2008A HAN CHARACTER",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " is encoded as two "
            ],
            [
              "System.Char",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " ("
            ],
            [
              "\"\\ud840\\udc8a\"",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") even if it is just one code-point: UTF-16 encoding is not fixed size! This is a source of countless bugs (also serious security bugs), if for example your application applies a maximum length and blindly truncates string at that then you may create an invalid string."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "One code-point may be encoded to more than one code-units: character 𠂊 "
          },
          {
            "Text": "U+2008A HAN CHARACTER",
            "AttrFlags": 4
          },
          {
            "Text": " is encoded as two "
          },
          {
            "Text": "System.Char",
            "AttrFlags": 2
          },
          {
            "Text": " ("
          },
          {
            "Text": "\"\\ud840\\udc8a\"",
            "AttrFlags": 2
          },
          {
            "Text": ") even if it is just one code-point: UTF-16 encoding is not fixed size! This is a source of countless bugs (also serious security bugs), if for example your application applies a maximum length and blindly truncates string at that then you may create an invalid string."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551951227742,
        "id": "482b09a2-6292-4ddd-908a-023d737a10fd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551951227742,
        "parent_id": "dcd31244-f025-4eb1-ba77-501df1e22952",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Some languages have "
            ],
            [
              "digraph",
              [
                [
                  "a",
                  "https://en.wikipedia.org/wiki/Digraph_(orthography)"
                ]
              ]
            ],
            [
              " and trigraphs, for example in Czech ch is a standalone letter (after h and before i then when ordering a list of strings you will have "
            ],
            [
              "fyzika",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " before "
            ],
            [
              "chemie",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Some languages have "
          },
          {
            "Text": "digraph",
            "Link": "https://en.wikipedia.org/wiki/Digraph_(orthography)"
          },
          {
            "Text": " and trigraphs, for example in Czech ch is a standalone letter (after h and before i then when ordering a list of strings you will have "
          },
          {
            "Text": "fyzika",
            "AttrFlags": 4
          },
          {
            "Text": " before "
          },
          {
            "Text": "chemie",
            "AttrFlags": 4
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551951227742,
        "id": "75c0da75-bab7-455d-9ac9-232b6f603ae0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551951227742,
        "parent_id": "dcd31244-f025-4eb1-ba77-501df1e22952",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "There are much more issues about text handling, see for example "
            ],
            [
              "How can I perform a Unicode aware character by character comparison?",
              [
                [
                  "a",
                  "http://stackoverflow.com/q/27229589/1207195"
                ]
              ]
            ],
            [
              " for a broader introduction and more links to related arguments."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "There are much more issues about text handling, see for example "
          },
          {
            "Text": "How can I perform a Unicode aware character by character comparison?",
            "Link": "http://stackoverflow.com/q/27229589/1207195"
          },
          {
            "Text": " for a broader introduction and more links to related arguments."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551951227742,
        "id": "deb600a1-c3f8-4c00-87c1-7aa2315f601d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551951227742,
        "parent_id": "dcd31244-f025-4eb1-ba77-501df1e22952",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In general when dealing with "
            ],
            [
              "international",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " text you may use this simple function to enumerate text elements in a string (avoiding to break Unicode surrogates and encoding):"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In general when dealing with "
          },
          {
            "Text": "international",
            "AttrFlags": 4
          },
          {
            "Text": " text you may use this simple function to enumerate text elements in a string (avoiding to break Unicode surrogates and encoding):"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551951227743,
        "id": "62906b96-2c20-4ba5-95e4-184b9dac6334",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551951227743,
        "parent_id": "dcd31244-f025-4eb1-ba77-501df1e22952",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public static class StringExtensions\n{\n    public static IEnumerable\u003cstring\u003e EnumerateCharacters(this string s)\n    {\n        if (s == null)\n            return Enumerable.Empty\u003cstring\u003e();\n\n        var enumerator = StringInfo.GetTextElementEnumerator(s.Normalize());\n        while (enumerator.MoveNext())\n            yield return (string)enumerator.Value;\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public static class StringExtensions\n{\n    public static IEnumerable\u003cstring\u003e EnumerateCharacters(this string s)\n    {\n        if (s == null)\n            return Enumerable.Empty\u003cstring\u003e();\n\n        var enumerator = StringInfo.GetTextElementEnumerator(s.Normalize());\n        while (enumerator.MoveNext())\n            yield return (string)enumerator.Value;\n    }\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "Strings",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}