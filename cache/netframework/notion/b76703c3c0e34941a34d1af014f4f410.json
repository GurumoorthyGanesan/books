{
  "ID": "b76703c3-c0e3-4941-a34d-1af014f4f410",
  "Root": {
    "alive": true,
    "content": [
      "fe9b2310-2d9c-43ed-b2b7-ba5a5d4e0757",
      "9cfce112-f192-4343-9acb-2162826e3a99"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551951235518,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "b76703c3-c0e3-4941-a34d-1af014f4f410",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551951235518,
    "parent_id": "10e9af4b-fd8b-4668-bcc1-8a1d2ce2433e",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Split string into fixed length blocks"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551951235515,
        "id": "fe9b2310-2d9c-43ed-b2b7-ba5a5d4e0757",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551951235515,
        "parent_id": "b76703c3-c0e3-4941-a34d-1af014f4f410",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We cannot break a string into arbitrary points (because a "
            ],
            [
              "System.Char",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " may not be valid alone because it’s a combining character or part of a surrogate) then code must take that into account (note that with "
            ],
            [
              "length",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " I mean the number of "
            ],
            [
              "graphemes",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " not the number of "
            ],
            [
              "code-units",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              "):"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "We cannot break a string into arbitrary points (because a "
          },
          {
            "Text": "System.Char",
            "AttrFlags": 2
          },
          {
            "Text": " may not be valid alone because it’s a combining character or part of a surrogate) then code must take that into account (note that with "
          },
          {
            "Text": "length",
            "AttrFlags": 4
          },
          {
            "Text": " I mean the number of "
          },
          {
            "Text": "graphemes",
            "AttrFlags": 4
          },
          {
            "Text": " not the number of "
          },
          {
            "Text": "code-units",
            "AttrFlags": 4
          },
          {
            "Text": "):"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551951235518,
        "id": "9cfce112-f192-4343-9acb-2162826e3a99",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551951235518,
        "parent_id": "b76703c3-c0e3-4941-a34d-1af014f4f410",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public static IEnumerable\u003cstring\u003e Split(this string value, int desiredLength)\n{\n    var characters = StringInfo.GetTextElementEnumerator(value);\n    while (characters.MoveNext())\n        yield return String.Concat(Take(characters, desiredLength));\n}\n\nprivate static IEnumerable\u003cstring\u003e Take(TextElementEnumerator enumerator, int count)\n{\n    for (int i = 0; i \u003c count; ++i)\n    {\n        yield return (string)enumerator.Current;\n\n        if (!enumerator.MoveNext())\n            yield break;\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public static IEnumerable\u003cstring\u003e Split(this string value, int desiredLength)\n{\n    var characters = StringInfo.GetTextElementEnumerator(value);\n    while (characters.MoveNext())\n        yield return String.Concat(Take(characters, desiredLength));\n}\n\nprivate static IEnumerable\u003cstring\u003e Take(TextElementEnumerator enumerator, int count)\n{\n    for (int i = 0; i \u003c count; ++i)\n    {\n        yield return (string)enumerator.Current;\n\n        if (!enumerator.MoveNext())\n            yield break;\n    }\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "Split string into fixed length blocks",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}