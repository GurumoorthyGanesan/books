{
  "ID": "6bba0a02-384b-49ea-8880-5d10a30a1075",
  "Root": {
    "alive": true,
    "content": [
      "178cda78-7258-4dd2-9429-6d3b0b96b0a4",
      "0c5acfa0-7d32-46bc-ba37-a50d9f841faf",
      "799afa08-f444-4543-a9e3-63caeb423182",
      "6be5f7bd-15e6-495e-ad63-2f68413d02fa",
      "5aedc29c-9c02-41f8-97c8-c2a44cf8686e",
      "c2383aba-712e-4c62-9dc4-0175f906c00d",
      "f092bdce-e947-4360-8b48-c5e142e6643c",
      "a21f6534-a24b-4298-a546-d8530cf2210b",
      "80a3af2a-8640-4a75-be3f-fe88ba605367",
      "d089082f-735e-48f5-a7da-c22b08157a9e",
      "8604fd2a-ef13-4d05-8a69-78391c06a684",
      "f9e2ffb7-75c9-4fb7-861e-f6852a9b0ba2"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552106354117,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "6bba0a02-384b-49ea-8880-5d10a30a1075",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552106354117,
    "parent_id": "ce3c34ba-e91e-4ecc-aec0-76d8276ac5fa",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "String Literal Types"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552106354107,
        "id": "178cda78-7258-4dd2-9429-6d3b0b96b0a4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552106354107,
        "parent_id": "6bba0a02-384b-49ea-8880-5d10a30a1075",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "String literal types allow you to specify the exact value a string can have."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "String literal types allow you to specify the exact value a string can have."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552106354115,
        "id": "0c5acfa0-7d32-46bc-ba37-a50d9f841faf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552106354115,
        "parent_id": "6bba0a02-384b-49ea-8880-5d10a30a1075",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "let myFavoritePet: \"dog\";\nmyFavoritePet = \"dog\";"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "let myFavoritePet: \"dog\";\nmyFavoritePet = \"dog\";",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552106354115,
        "id": "799afa08-f444-4543-a9e3-63caeb423182",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552106354115,
        "parent_id": "6bba0a02-384b-49ea-8880-5d10a30a1075",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Any other string will give a error."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Any other string will give a error."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552106354116,
        "id": "6be5f7bd-15e6-495e-ad63-2f68413d02fa",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552106354116,
        "parent_id": "6bba0a02-384b-49ea-8880-5d10a30a1075",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// Error: Type '\"rock\"' is not assignable to type '\"dog\"'.\n// myFavoritePet = \"rock\";"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// Error: Type '\"rock\"' is not assignable to type '\"dog\"'.\n// myFavoritePet = \"rock\";",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552106354116,
        "id": "5aedc29c-9c02-41f8-97c8-c2a44cf8686e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552106354116,
        "parent_id": "6bba0a02-384b-49ea-8880-5d10a30a1075",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Together with Type Aliases and Union Types you get a enum-like behavior."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Together with Type Aliases and Union Types you get a enum-like behavior."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552106354116,
        "id": "c2383aba-712e-4c62-9dc4-0175f906c00d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552106354116,
        "parent_id": "6bba0a02-384b-49ea-8880-5d10a30a1075",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "type Species = \"cat\" | \"dog\" | \"bird\";\n\nfunction buyPet(pet: Species, name: string) : Pet { /*...*/ }\n\nbuyPet(myFavoritePet /* \"dog\" as defined above */, \"Rocky\");\n\n// Error: Argument of type '\"rock\"' is not assignable to parameter of type \"'cat' | \"dog\" | \"bird\". Type '\"rock\"' is not assignable to type '\"bird\"'.\n// buyPet(\"rock\", \"Rocky\");"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "type Species = \"cat\" | \"dog\" | \"bird\";\n\nfunction buyPet(pet: Species, name: string) : Pet { /*...*/ }\n\nbuyPet(myFavoritePet /* \"dog\" as defined above */, \"Rocky\");\n\n// Error: Argument of type '\"rock\"' is not assignable to parameter of type \"'cat' | \"dog\" | \"bird\". Type '\"rock\"' is not assignable to type '\"bird\"'.\n// buyPet(\"rock\", \"Rocky\");",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552106354116,
        "id": "f092bdce-e947-4360-8b48-c5e142e6643c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552106354116,
        "parent_id": "6bba0a02-384b-49ea-8880-5d10a30a1075",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "String Literal Types can be used to distinguish overloads."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "String Literal Types can be used to distinguish overloads."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552106354116,
        "id": "a21f6534-a24b-4298-a546-d8530cf2210b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552106354116,
        "parent_id": "6bba0a02-384b-49ea-8880-5d10a30a1075",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "function buyPet(pet: Species, name: string) : Pet;\nfunction buyPet(pet: \"cat\", name: string): Cat;\nfunction buyPet(pet: \"dog\", name: string): Dog;\nfunction buyPet(pet: \"bird\", name: string): Bird;\nfunction buyPet(pet: Species, name: string) : Pet { /*...*/ }\n\nlet dog = buyPet(myFavoritePet /* \"dog\" as defined above */, \"Rocky\");\n// dog is from type Dog (dog: Dog)"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "function buyPet(pet: Species, name: string) : Pet;\nfunction buyPet(pet: \"cat\", name: string): Cat;\nfunction buyPet(pet: \"dog\", name: string): Dog;\nfunction buyPet(pet: \"bird\", name: string): Bird;\nfunction buyPet(pet: Species, name: string) : Pet { /*...*/ }\n\nlet dog = buyPet(myFavoritePet /* \"dog\" as defined above */, \"Rocky\");\n// dog is from type Dog (dog: Dog)",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552106354116,
        "id": "80a3af2a-8640-4a75-be3f-fe88ba605367",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552106354116,
        "parent_id": "6bba0a02-384b-49ea-8880-5d10a30a1075",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "They works well for User-Defined Type Guards."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "They works well for User-Defined Type Guards."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552106354116,
        "id": "d089082f-735e-48f5-a7da-c22b08157a9e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552106354116,
        "parent_id": "6bba0a02-384b-49ea-8880-5d10a30a1075",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "interface Pet {\n    species: Species;\n    eat();\n    sleep();\n}\n\ninterface Cat extends Pet {\n    species: \"cat\";\n}\n\ninterface Bird extends Pet {\n    species: \"bird\";\n    sing();\n}\n\nfunction petIsCat(pet: Pet): pet is Cat {\n    return pet.species === \"cat\";\n}\n\nfunction petIsBird(pet: Pet): pet is Bird {\n    return pet.species === \"bird\";\n}\n\nfunction playWithPet(pet: Pet){\n    if(petIsCat(pet)) {\n        // pet is now from type Cat (pet: Cat)\n        pet.eat();\n        pet.sleep();\n    } else if(petIsBird(pet)) {\n        // pet is now from type Bird (pet: Bird)\n        pet.eat();\n        pet.sing();\n        pet.sleep();\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "interface Pet {\n    species: Species;\n    eat();\n    sleep();\n}\n\ninterface Cat extends Pet {\n    species: \"cat\";\n}\n\ninterface Bird extends Pet {\n    species: \"bird\";\n    sing();\n}\n\nfunction petIsCat(pet: Pet): pet is Cat {\n    return pet.species === \"cat\";\n}\n\nfunction petIsBird(pet: Pet): pet is Bird {\n    return pet.species === \"bird\";\n}\n\nfunction playWithPet(pet: Pet){\n    if(petIsCat(pet)) {\n        // pet is now from type Cat (pet: Cat)\n        pet.eat();\n        pet.sleep();\n    } else if(petIsBird(pet)) {\n        // pet is now from type Bird (pet: Bird)\n        pet.eat();\n        pet.sing();\n        pet.sleep();\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552106354116,
        "id": "8604fd2a-ef13-4d05-8a69-78391c06a684",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552106354116,
        "parent_id": "6bba0a02-384b-49ea-8880-5d10a30a1075",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Full example code"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Full example code"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552106354117,
        "id": "f9e2ffb7-75c9-4fb7-861e-f6852a9b0ba2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552106354117,
        "parent_id": "6bba0a02-384b-49ea-8880-5d10a30a1075",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "let myFavoritePet: \"dog\";\nmyFavoritePet = \"dog\";\n\n// Error: Type '\"rock\"' is not assignable to type '\"dog\"'.\n// myFavoritePet = \"rock\";\n\ntype Species = \"cat\" | \"dog\" | \"bird\";\n\ninterface Pet {\n    species: Species;\n    name: string;\n    eat();\n    walk();\n    sleep();\n}\n\ninterface Cat extends Pet {\n    species: \"cat\";\n}\n\ninterface Dog extends Pet {\n    species: \"dog\";\n}\n\ninterface Bird extends Pet {\n    species: \"bird\";\n    sing();\n}\n\n// Error: Interface 'Rock' incorrectly extends interface 'Pet'. Types of property 'species' are incompatible. Type '\"rock\"' is not assignable to type '\"cat\" | \"dog\" | \"bird\"'. Type '\"rock\"' is not assignable to type '\"bird\"'.\n// interface Rock extends Pet { \n//      type: \"rock\"; \n// }\n\nfunction buyPet(pet: Species, name: string) : Pet;\nfunction buyPet(pet: \"cat\", name: string): Cat;\nfunction buyPet(pet: \"dog\", name: string): Dog;\nfunction buyPet(pet: \"bird\", name: string): Bird;\nfunction buyPet(pet: Species, name: string) : Pet {\n    if(pet === \"cat\") { \n        return {\n            species: \"cat\",\n            name: name,\n            eat: function () {\n                console.log(`${this.name} eats.`);\n            }, walk: function () {\n                console.log(`${this.name} walks.`);\n            }, sleep: function () {\n                console.log(`${this.name} sleeps.`);\n            }\n        } as Cat;\n    } else if(pet === \"dog\") { \n        return {\n            species: \"dog\",\n            name: name,\n            eat: function () {\n                console.log(`${this.name} eats.`);\n            }, walk: function () {\n                console.log(`${this.name} walks.`);\n            }, sleep: function () {\n                console.log(`${this.name} sleeps.`);\n            }\n        } as Dog;\n    } else if(pet === \"bird\") { \n        return {\n            species: \"bird\",\n            name: name,\n            eat: function () {\n                console.log(`${this.name} eats.`);\n            }, walk: function () {\n                console.log(`${this.name} walks.`);\n            }, sleep: function () {\n                console.log(`${this.name} sleeps.`);\n            }, sing: function () {\n                console.log(`${this.name} sings.`);\n            }\n        } as Bird;\n    } else {\n        throw `Sorry we don't have a ${pet}. Would you like to buy a dog?`;\n    }\n}\n\nfunction petIsCat(pet: Pet): pet is Cat {\n    return pet.species === \"cat\";\n}\n\nfunction petIsDog(pet: Pet): pet is Dog {\n    return pet.species === \"dog\";\n}\n\nfunction petIsBird(pet: Pet): pet is Bird {\n    return pet.species === \"bird\";\n}\n\nfunction playWithPet(pet: Pet) {\n    console.log(`Hey ${pet.name}, let's play.`);\n    \n    if(petIsCat(pet)) {\n        // pet is now from type Cat (pet: Cat)\n        \n        pet.eat();\n        pet.sleep();\n        \n        // Error: Type '\"bird\"' is not assignable to type '\"cat\"'.\n        // pet.type = \"bird\";\n        \n        // Error: Property 'sing' does not exist on type 'Cat'.\n        // pet.sing();\n        \n    } else if(petIsDog(pet)) {\n        // pet is now from type Dog (pet: Dog)\n        \n        pet.eat();\n        pet.walk();\n        pet.sleep();\n        \n    } else if(petIsBird(pet)) {\n        // pet is now from type Bird (pet: Bird)\n    \n        pet.eat();\n        pet.sing();\n        pet.sleep();\n    } else {\n        throw \"An unknown pet. Did you buy a rock?\";\n    }\n}\n\nlet dog = buyPet(myFavoritePet /* \"dog\" as defined above */, \"Rocky\");\n// dog is from type Dog (dog: Dog)\n\n// Error: Argument of type '\"rock\"' is not assignable to parameter of type \"'cat' | \"dog\" | \"bird\". Type '\"rock\"' is not assignable to type '\"bird\"'.\n// buyPet(\"rock\", \"Rocky\");\n\nplayWithPet(dog);\n// Output: Hey Rocky, let's play.\n//         Rocky eats.\n//         Rocky walks.\n//         Rocky sleeps."
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "let myFavoritePet: \"dog\";\nmyFavoritePet = \"dog\";\n\n// Error: Type '\"rock\"' is not assignable to type '\"dog\"'.\n// myFavoritePet = \"rock\";\n\ntype Species = \"cat\" | \"dog\" | \"bird\";\n\ninterface Pet {\n    species: Species;\n    name: string;\n    eat();\n    walk();\n    sleep();\n}\n\ninterface Cat extends Pet {\n    species: \"cat\";\n}\n\ninterface Dog extends Pet {\n    species: \"dog\";\n}\n\ninterface Bird extends Pet {\n    species: \"bird\";\n    sing();\n}\n\n// Error: Interface 'Rock' incorrectly extends interface 'Pet'. Types of property 'species' are incompatible. Type '\"rock\"' is not assignable to type '\"cat\" | \"dog\" | \"bird\"'. Type '\"rock\"' is not assignable to type '\"bird\"'.\n// interface Rock extends Pet { \n//      type: \"rock\"; \n// }\n\nfunction buyPet(pet: Species, name: string) : Pet;\nfunction buyPet(pet: \"cat\", name: string): Cat;\nfunction buyPet(pet: \"dog\", name: string): Dog;\nfunction buyPet(pet: \"bird\", name: string): Bird;\nfunction buyPet(pet: Species, name: string) : Pet {\n    if(pet === \"cat\") { \n        return {\n            species: \"cat\",\n            name: name,\n            eat: function () {\n                console.log(`${this.name} eats.`);\n            }, walk: function () {\n                console.log(`${this.name} walks.`);\n            }, sleep: function () {\n                console.log(`${this.name} sleeps.`);\n            }\n        } as Cat;\n    } else if(pet === \"dog\") { \n        return {\n            species: \"dog\",\n            name: name,\n            eat: function () {\n                console.log(`${this.name} eats.`);\n            }, walk: function () {\n                console.log(`${this.name} walks.`);\n            }, sleep: function () {\n                console.log(`${this.name} sleeps.`);\n            }\n        } as Dog;\n    } else if(pet === \"bird\") { \n        return {\n            species: \"bird\",\n            name: name,\n            eat: function () {\n                console.log(`${this.name} eats.`);\n            }, walk: function () {\n                console.log(`${this.name} walks.`);\n            }, sleep: function () {\n                console.log(`${this.name} sleeps.`);\n            }, sing: function () {\n                console.log(`${this.name} sings.`);\n            }\n        } as Bird;\n    } else {\n        throw `Sorry we don't have a ${pet}. Would you like to buy a dog?`;\n    }\n}\n\nfunction petIsCat(pet: Pet): pet is Cat {\n    return pet.species === \"cat\";\n}\n\nfunction petIsDog(pet: Pet): pet is Dog {\n    return pet.species === \"dog\";\n}\n\nfunction petIsBird(pet: Pet): pet is Bird {\n    return pet.species === \"bird\";\n}\n\nfunction playWithPet(pet: Pet) {\n    console.log(`Hey ${pet.name}, let's play.`);\n    \n    if(petIsCat(pet)) {\n        // pet is now from type Cat (pet: Cat)\n        \n        pet.eat();\n        pet.sleep();\n        \n        // Error: Type '\"bird\"' is not assignable to type '\"cat\"'.\n        // pet.type = \"bird\";\n        \n        // Error: Property 'sing' does not exist on type 'Cat'.\n        // pet.sing();\n        \n    } else if(petIsDog(pet)) {\n        // pet is now from type Dog (pet: Dog)\n        \n        pet.eat();\n        pet.walk();\n        pet.sleep();\n        \n    } else if(petIsBird(pet)) {\n        // pet is now from type Bird (pet: Bird)\n    \n        pet.eat();\n        pet.sing();\n        pet.sleep();\n    } else {\n        throw \"An unknown pet. Did you buy a rock?\";\n    }\n}\n\nlet dog = buyPet(myFavoritePet /* \"dog\" as defined above */, \"Rocky\");\n// dog is from type Dog (dog: Dog)\n\n// Error: Argument of type '\"rock\"' is not assignable to parameter of type \"'cat' | \"dog\" | \"bird\". Type '\"rock\"' is not assignable to type '\"bird\"'.\n// buyPet(\"rock\", \"Rocky\");\n\nplayWithPet(dog);\n// Output: Hey Rocky, let's play.\n//         Rocky eats.\n//         Rocky walks.\n//         Rocky sleeps.",
        "code_language": "Plain Text"
      }
    ],
    "title": "String Literal Types",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}