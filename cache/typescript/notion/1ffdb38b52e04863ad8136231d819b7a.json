{
  "ID": "1ffdb38b-52e0-4863-ad81-36231d819b7a",
  "Root": {
    "alive": true,
    "content": [
      "ddffbc6f-42c9-4005-8e6a-7916a2195a2e",
      "b2677afc-1a43-4d7d-8c93-2e9fd803a334",
      "1593d529-8753-4c7a-ba3d-ddf6a3b77539",
      "e0e8e052-e2dd-4c84-a41a-dd547e944d72"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552106366107,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "1ffdb38b-52e0-4863-ad81-36231d819b7a",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552106366107,
    "parent_id": "ce3c34ba-e91e-4ecc-aec0-76d8276ac5fa",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "const Enum"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552106366104,
        "id": "ddffbc6f-42c9-4005-8e6a-7916a2195a2e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552106366104,
        "parent_id": "1ffdb38b-52e0-4863-ad81-36231d819b7a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A const Enum is the same as a normal Enum. Except that no Object is generated at compile time. Instead, the literal values are substituted where the const Enum is used."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A const Enum is the same as a normal Enum. Except that no Object is generated at compile time. Instead, the literal values are substituted where the const Enum is used."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552106366107,
        "id": "b2677afc-1a43-4d7d-8c93-2e9fd803a334",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552106366107,
        "parent_id": "1ffdb38b-52e0-4863-ad81-36231d819b7a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// Typescript: A const Enum can be defined like a normal Enum (with start value, specifig values, etc.)\nconst enum NinjaActivity {\n    Espionage, \n    Sabotage, \n    Assassination\n}\n\n// Javascript: But nothing is generated    \n\n// Typescript: Except if you use it\nlet myFavoriteNinjaActivity = NinjaActivity.Espionage;\nconsole.log(myFavoritePirateActivity); // 0\n\n// Javascript: Then only the number of the value is compiled into the code\n// var myFavoriteNinjaActivity = 0 /* Espionage */;\n// console.log(myFavoritePirateActivity); // 0\n\n// Typescript: The same for the other constant example\nconsole.log(NinjaActivity[\"Sabotage\"]); // 1   \n\n// Javascript: Just the number and in a comment the name of the value\n// console.log(1 /* \"Sabotage\" */); // 1\n\n// Typescript: But without the object none runtime access is possible\n// Error: A const enum member can only be accessed using a string literal.\n// console.log(NinjaActivity[myFavoriteNinjaActivity]);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// Typescript: A const Enum can be defined like a normal Enum (with start value, specifig values, etc.)\nconst enum NinjaActivity {\n    Espionage, \n    Sabotage, \n    Assassination\n}\n\n// Javascript: But nothing is generated    \n\n// Typescript: Except if you use it\nlet myFavoriteNinjaActivity = NinjaActivity.Espionage;\nconsole.log(myFavoritePirateActivity); // 0\n\n// Javascript: Then only the number of the value is compiled into the code\n// var myFavoriteNinjaActivity = 0 /* Espionage */;\n// console.log(myFavoritePirateActivity); // 0\n\n// Typescript: The same for the other constant example\nconsole.log(NinjaActivity[\"Sabotage\"]); // 1   \n\n// Javascript: Just the number and in a comment the name of the value\n// console.log(1 /* \"Sabotage\" */); // 1\n\n// Typescript: But without the object none runtime access is possible\n// Error: A const enum member can only be accessed using a string literal.\n// console.log(NinjaActivity[myFavoriteNinjaActivity]);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552106366107,
        "id": "1593d529-8753-4c7a-ba3d-ddf6a3b77539",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552106366107,
        "parent_id": "1ffdb38b-52e0-4863-ad81-36231d819b7a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For comparison, a normal Enum"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For comparison, a normal Enum"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552106366107,
        "id": "e0e8e052-e2dd-4c84-a41a-dd547e944d72",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552106366107,
        "parent_id": "1ffdb38b-52e0-4863-ad81-36231d819b7a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// Typescript: A normal Enum\nenum PirateActivity {\n    Boarding,\n    Drinking, \n    Fencing \n} \n\n// Javascript: The Enum after the compiling\n// var PirateActivity;\n// (function (PirateActivity) {\n//     PirateActivity[PirateActivity[\"Boarding\"] = 0] = \"Boarding\";\n//     PirateActivity[PirateActivity[\"Drinking\"] = 1] = \"Drinking\";\n//     PirateActivity[PirateActivity[\"Fencing\"] = 2] = \"Fencing\";\n// })(PirateActivity || (PirateActivity = {}));\n\n// Typescript: A normale use of this Enum\nlet myFavoritePirateActivity = PirateActivity.Boarding;\nconsole.log(myFavoritePirateActivity); // 0\n\n// Javascript: Looks quite similar in Javascript\n// var myFavoritePirateActivity = PirateActivity.Boarding;\n// console.log(myFavoritePirateActivity); // 0\n\n// Typescript: And some other normale use\nconsole.log(PirateActivity[\"Drinking\"]); // 1\n\n// Javascript: Looks quite similar in Javascript\n// console.log(PirateActivity[\"Drinking\"]); // 1\n\n// Typescript: At runtime, you can access an normal enum\nconsole.log(PirateActivity[myFavoritePirateActivity]); // \"Boarding\"\n\n// Javascript: And it will be resolved at runtime\n// console.log(PirateActivity[myFavoritePirateActivity]); // \"Boarding\""
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// Typescript: A normal Enum\nenum PirateActivity {\n    Boarding,\n    Drinking, \n    Fencing \n} \n\n// Javascript: The Enum after the compiling\n// var PirateActivity;\n// (function (PirateActivity) {\n//     PirateActivity[PirateActivity[\"Boarding\"] = 0] = \"Boarding\";\n//     PirateActivity[PirateActivity[\"Drinking\"] = 1] = \"Drinking\";\n//     PirateActivity[PirateActivity[\"Fencing\"] = 2] = \"Fencing\";\n// })(PirateActivity || (PirateActivity = {}));\n\n// Typescript: A normale use of this Enum\nlet myFavoritePirateActivity = PirateActivity.Boarding;\nconsole.log(myFavoritePirateActivity); // 0\n\n// Javascript: Looks quite similar in Javascript\n// var myFavoritePirateActivity = PirateActivity.Boarding;\n// console.log(myFavoritePirateActivity); // 0\n\n// Typescript: And some other normale use\nconsole.log(PirateActivity[\"Drinking\"]); // 1\n\n// Javascript: Looks quite similar in Javascript\n// console.log(PirateActivity[\"Drinking\"]); // 1\n\n// Typescript: At runtime, you can access an normal enum\nconsole.log(PirateActivity[myFavoritePirateActivity]); // \"Boarding\"\n\n// Javascript: And it will be resolved at runtime\n// console.log(PirateActivity[myFavoritePirateActivity]); // \"Boarding\"",
        "code_language": "Plain Text"
      }
    ],
    "title": "const Enum",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}