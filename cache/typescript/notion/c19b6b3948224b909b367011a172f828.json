{
  "ID": "c19b6b39-4822-4b90-9b36-7011a172f828",
  "Root": {
    "alive": true,
    "content": [
      "f232dbbc-7955-4b9b-82d0-66e099a6eaaf",
      "10b36266-258c-417e-80c2-0e2ee19a79c8",
      "b881c99f-a815-4910-987e-71cc3bdab5b6",
      "92aca442-07dd-4517-8499-3cffb5516220",
      "f4945a01-32a0-43a2-ba0b-52407b3ba1cf",
      "928e963c-7d33-4e1b-8254-e7f5f4f82822"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552106274117,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "c19b6b39-4822-4b90-9b36-7011a172f828",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552106274117,
    "parent_id": "bcb8cc4c-9223-4de8-b86b-20ff305bd9ee",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Abstract Classes"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552106274113,
        "id": "f232dbbc-7955-4b9b-82d0-66e099a6eaaf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552106274113,
        "parent_id": "c19b6b39-4822-4b90-9b36-7011a172f828",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "abstract class Machine {\n    constructor(public manufacturer: string) {\n    }\n\n    // An abstract class can define methods of it's own, or...\n    summary(): string {\n        return `${this.manufacturer} makes this machine.`;\n    }\n    \n    // Require inheriting classes to implement methods\n    abstract moreInfo(): string;\n}\n\nclass Car extends Machine {\n    constructor(manufacturer: string, public position: number, protected speed: number) {\n        super(manufacturer);\n    }\n    \n    move() {\n        this.position += this.speed;\n    }\n    \n    moreInfo() {\n        return `This is a car located at ${this.position} and going ${this.speed}mph!`;\n    }\n}\n\nlet myCar = new Car(\"Konda\", 10, 70);\nmyCar.move(); // position is now 80\nconsole.log(myCar.summary()); // prints \"Konda makes this machine.\"\nconsole.log(myCar.moreInfo()); // prints \"This is a car located at 80 and going 70mph!\""
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "abstract class Machine {\n    constructor(public manufacturer: string) {\n    }\n\n    // An abstract class can define methods of it's own, or...\n    summary(): string {\n        return `${this.manufacturer} makes this machine.`;\n    }\n    \n    // Require inheriting classes to implement methods\n    abstract moreInfo(): string;\n}\n\nclass Car extends Machine {\n    constructor(manufacturer: string, public position: number, protected speed: number) {\n        super(manufacturer);\n    }\n    \n    move() {\n        this.position += this.speed;\n    }\n    \n    moreInfo() {\n        return `This is a car located at ${this.position} and going ${this.speed}mph!`;\n    }\n}\n\nlet myCar = new Car(\"Konda\", 10, 70);\nmyCar.move(); // position is now 80\nconsole.log(myCar.summary()); // prints \"Konda makes this machine.\"\nconsole.log(myCar.moreInfo()); // prints \"This is a car located at 80 and going 70mph!\"",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552106274116,
        "id": "10b36266-258c-417e-80c2-0e2ee19a79c8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552106274116,
        "parent_id": "c19b6b39-4822-4b90-9b36-7011a172f828",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Abstract classes are base classes from which other classes can extend. They cannot be instantiated themselves (i.e. you "
            ],
            [
              "cannot",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " do "
            ],
            [
              "new Machine(\"Konda\")",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ")."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Abstract classes are base classes from which other classes can extend. They cannot be instantiated themselves (i.e. you "
          },
          {
            "Text": "cannot",
            "AttrFlags": 1
          },
          {
            "Text": " do "
          },
          {
            "Text": "new Machine(\"Konda\")",
            "AttrFlags": 2
          },
          {
            "Text": ")."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552106274116,
        "id": "b881c99f-a815-4910-987e-71cc3bdab5b6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552106274116,
        "parent_id": "c19b6b39-4822-4b90-9b36-7011a172f828",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The two key characteristics of an abstract class in Typescript are:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The two key characteristics of an abstract class in Typescript are:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552106274116,
        "id": "92aca442-07dd-4517-8499-3cffb5516220",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552106274116,
        "parent_id": "c19b6b39-4822-4b90-9b36-7011a172f828",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "They can implement methods of their own."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "They can implement methods of their own."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552106274117,
        "id": "f4945a01-32a0-43a2-ba0b-52407b3ba1cf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552106274117,
        "parent_id": "c19b6b39-4822-4b90-9b36-7011a172f828",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "They can define methods that inheriting classes "
            ],
            [
              "must",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " implement."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "They can define methods that inheriting classes "
          },
          {
            "Text": "must",
            "AttrFlags": 1
          },
          {
            "Text": " implement."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552106274117,
        "id": "928e963c-7d33-4e1b-8254-e7f5f4f82822",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552106274117,
        "parent_id": "c19b6b39-4822-4b90-9b36-7011a172f828",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For this reason, abstract classes can conceptually be considered a "
            ],
            [
              "combination of an interface and a class",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For this reason, abstract classes can conceptually be considered a "
          },
          {
            "Text": "combination of an interface and a class",
            "AttrFlags": 1
          },
          {
            "Text": "."
          }
        ]
      }
    ],
    "title": "Abstract Classes",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}