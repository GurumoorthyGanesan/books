{
  "ID": "6faef792-3425-435a-a3c8-8f0085f7e3ce",
  "Root": {
    "alive": true,
    "content": [
      "1c242948-9157-4181-8637-2acb2a6b6560",
      "09f1874f-a6c7-41b5-a754-cbf3445f1594"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552106282068,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "6faef792-3425-435a-a3c8-8f0085f7e3ce",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552106282068,
    "parent_id": "3ed0aad5-d965-4a1e-8ddd-54de0d698ad8",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Non-null assertions"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552106282068,
        "id": "1c242948-9157-4181-8637-2acb2a6b6560",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552106282068,
        "parent_id": "6faef792-3425-435a-a3c8-8f0085f7e3ce",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The non-null assertion operator, "
            ],
            [
              "\\!",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", allows you to assert that an expression isn’t "
            ],
            [
              "null",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "undefined",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " when the TypeScript compiler can’t infer that automatically:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The non-null assertion operator, "
          },
          {
            "Text": "\\!",
            "AttrFlags": 2
          },
          {
            "Text": ", allows you to assert that an expression isn’t "
          },
          {
            "Text": "null",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "undefined",
            "AttrFlags": 2
          },
          {
            "Text": " when the TypeScript compiler can’t infer that automatically:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552106282068,
        "id": "09f1874f-a6c7-41b5-a754-cbf3445f1594",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552106282068,
        "parent_id": "6faef792-3425-435a-a3c8-8f0085f7e3ce",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "type ListNode = { data: number; next?: ListNode; };\n\nfunction addNext(node: ListNode) {\n    if (node.next === undefined) {\n        node.next = {data: 0};\n    }\n}\n\nfunction setNextValue(node: ListNode, value: number) {\n    addNext(node);\n    \n    // Even though we know `node.next` is defined because we just called `addNext`,\n    // TypeScript isn't able to infer this in the line of code below:\n    // node.next.data = value;\n    \n    // So, we can use the non-null assertion operator, !,\n    // to assert that node.next isn't undefined and silence the compiler warning\n    node.next!.data = value;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "type ListNode = { data: number; next?: ListNode; };\n\nfunction addNext(node: ListNode) {\n    if (node.next === undefined) {\n        node.next = {data: 0};\n    }\n}\n\nfunction setNextValue(node: ListNode, value: number) {\n    addNext(node);\n    \n    // Even though we know `node.next` is defined because we just called `addNext`,\n    // TypeScript isn't able to infer this in the line of code below:\n    // node.next.data = value;\n    \n    // So, we can use the non-null assertion operator, !,\n    // to assert that node.next isn't undefined and silence the compiler warning\n    node.next!.data = value;\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "Non-null assertions",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}