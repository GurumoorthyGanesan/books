{
  "ID": "6924ddcc-001f-4015-9a34-56a5e181e631",
  "Root": {
    "alive": true,
    "content": [
      "7d9df6fc-eee5-45ef-aa9f-93fbd1d7e2fe",
      "0236e5b6-89c7-46e8-b07d-bf17c447affa",
      "bc89f872-dafa-4ede-803e-18ba9b28cdf5",
      "1cd39e55-dc70-4050-bfd9-a321853bc4dd",
      "b8dd7f4b-dbcf-433a-800c-8c2bf076180a",
      "6ed37df0-314b-4329-a967-e1ba629581ee",
      "767abc51-5056-417f-8869-e55d381c067c",
      "773faa94-22a1-48c3-b499-ddacf326acbc",
      "11162803-f179-4a47-85e4-42bb41a89571",
      "3f308b16-6b75-435e-96b0-4d76ae96f0fa",
      "baaf4f92-8b83-438e-b060-577de6f2e093",
      "cc8bc4d0-cd4f-424b-b660-15d5a6bd7954",
      "b7ef2f04-ac87-430f-8c0a-1dd0aab37d8b"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552106329975,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "6924ddcc-001f-4015-9a34-56a5e181e631",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552106329975,
    "parent_id": "f739d352-c00f-4e51-b6f2-1b425ff8f732",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Using Interfaces for Polymorphism"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552106329969,
        "id": "7d9df6fc-eee5-45ef-aa9f-93fbd1d7e2fe",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552106329969,
        "parent_id": "6924ddcc-001f-4015-9a34-56a5e181e631",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The primary reason to use interfaces to achieve polymorphism and provide developers to implement on their own way in future by implementing interface’s methods."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The primary reason to use interfaces to achieve polymorphism and provide developers to implement on their own way in future by implementing interface’s methods."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552106329971,
        "id": "0236e5b6-89c7-46e8-b07d-bf17c447affa",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552106329971,
        "parent_id": "6924ddcc-001f-4015-9a34-56a5e181e631",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Suppose we have an interface and three classes:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Suppose we have an interface and three classes:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552106329971,
        "id": "bc89f872-dafa-4ede-803e-18ba9b28cdf5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552106329971,
        "parent_id": "6924ddcc-001f-4015-9a34-56a5e181e631",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "interface Connector{\n    doConnect(): boolean;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "interface Connector{\n    doConnect(): boolean;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552106329971,
        "id": "1cd39e55-dc70-4050-bfd9-a321853bc4dd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552106329971,
        "parent_id": "6924ddcc-001f-4015-9a34-56a5e181e631",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This is connector interface. Now we will implement that for Wifi communication."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This is connector interface. Now we will implement that for Wifi communication."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552106329971,
        "id": "b8dd7f4b-dbcf-433a-800c-8c2bf076180a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552106329972,
        "parent_id": "6924ddcc-001f-4015-9a34-56a5e181e631",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "export class WifiConnector implements Connector{\n\n    public doConnect(): boolean{\n        console.log(\"Connecting via wifi\");\n        console.log(\"Get password\");\n        console.log(\"Lease an IP for 24 hours\");\n        console.log(\"Connected\");\n        return true\n    }\n\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "export class WifiConnector implements Connector{\n\n    public doConnect(): boolean{\n        console.log(\"Connecting via wifi\");\n        console.log(\"Get password\");\n        console.log(\"Lease an IP for 24 hours\");\n        console.log(\"Connected\");\n        return true\n    }\n\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552106329972,
        "id": "6ed37df0-314b-4329-a967-e1ba629581ee",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552106329972,
        "parent_id": "6924ddcc-001f-4015-9a34-56a5e181e631",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Here we have developed our concrete class named "
            ],
            [
              "WifiConnector",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " that has its own implementation. This is now type "
            ],
            [
              "Connector",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Here we have developed our concrete class named "
          },
          {
            "Text": "WifiConnector",
            "AttrFlags": 2
          },
          {
            "Text": " that has its own implementation. This is now type "
          },
          {
            "Text": "Connector",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552106329972,
        "id": "767abc51-5056-417f-8869-e55d381c067c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552106329972,
        "parent_id": "6924ddcc-001f-4015-9a34-56a5e181e631",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Now we are creating our "
            ],
            [
              "System",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " that has a component "
            ],
            [
              "Connector",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". This is called dependency injection."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Now we are creating our "
          },
          {
            "Text": "System",
            "AttrFlags": 2
          },
          {
            "Text": " that has a component "
          },
          {
            "Text": "Connector",
            "AttrFlags": 2
          },
          {
            "Text": ". This is called dependency injection."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552106329972,
        "id": "773faa94-22a1-48c3-b499-ddacf326acbc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552106329972,
        "parent_id": "6924ddcc-001f-4015-9a34-56a5e181e631",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "export class System {\n    constructor(private connector: Connector){ #inject Connector type\n        connector.doConnect()\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "export class System {\n    constructor(private connector: Connector){ #inject Connector type\n        connector.doConnect()\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552106329972,
        "id": "11162803-f179-4a47-85e4-42bb41a89571",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552106329972,
        "parent_id": "6924ddcc-001f-4015-9a34-56a5e181e631",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "constructor(private connector: Connector)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " this line is very important here. "
            ],
            [
              "Connector",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is an interface and must have "
            ],
            [
              "doConnect()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". As "
            ],
            [
              "Connector",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is an interface this class "
            ],
            [
              "System",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " has much more flexibility. We can pass any Type which has implemented "
            ],
            [
              "Connector",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " interface. In future developer achieves more flexibility. For example, now developer want to add Bluetooth Connection module:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "constructor(private connector: Connector)",
            "AttrFlags": 2
          },
          {
            "Text": " this line is very important here. "
          },
          {
            "Text": "Connector",
            "AttrFlags": 2
          },
          {
            "Text": " is an interface and must have "
          },
          {
            "Text": "doConnect()",
            "AttrFlags": 2
          },
          {
            "Text": ". As "
          },
          {
            "Text": "Connector",
            "AttrFlags": 2
          },
          {
            "Text": " is an interface this class "
          },
          {
            "Text": "System",
            "AttrFlags": 2
          },
          {
            "Text": " has much more flexibility. We can pass any Type which has implemented "
          },
          {
            "Text": "Connector",
            "AttrFlags": 2
          },
          {
            "Text": " interface. In future developer achieves more flexibility. For example, now developer want to add Bluetooth Connection module:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552106329973,
        "id": "3f308b16-6b75-435e-96b0-4d76ae96f0fa",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552106329973,
        "parent_id": "6924ddcc-001f-4015-9a34-56a5e181e631",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "export class BluetoothConnector implements Connector{\n\n    public doConnect(): boolean{\n        console.log(\"Connecting via Bluetooth\");\n        console.log(\"Pair with PIN\");\n        console.log(\"Connected\");\n        return true\n    }\n\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "export class BluetoothConnector implements Connector{\n\n    public doConnect(): boolean{\n        console.log(\"Connecting via Bluetooth\");\n        console.log(\"Pair with PIN\");\n        console.log(\"Connected\");\n        return true\n    }\n\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552106329973,
        "id": "baaf4f92-8b83-438e-b060-577de6f2e093",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552106329973,
        "parent_id": "6924ddcc-001f-4015-9a34-56a5e181e631",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "See that Wifi and Bluetooth have its own implementation. There own different way to connect. However, hence both have implemented Type "
            ],
            [
              "Connector",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " the are now Type "
            ],
            [
              "Connector",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". So that we can pass any of those to "
            ],
            [
              "System",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " class as the constructor parameter. This is called polymorphism. The class "
            ],
            [
              "System",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is now not aware of whether it is Bluetooth / Wifi even we can add another Communication module like Inferade, Bluetooth5 and whatsoever by just implementing "
            ],
            [
              "Connector",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " interface."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "See that Wifi and Bluetooth have its own implementation. There own different way to connect. However, hence both have implemented Type "
          },
          {
            "Text": "Connector",
            "AttrFlags": 2
          },
          {
            "Text": " the are now Type "
          },
          {
            "Text": "Connector",
            "AttrFlags": 2
          },
          {
            "Text": ". So that we can pass any of those to "
          },
          {
            "Text": "System",
            "AttrFlags": 2
          },
          {
            "Text": " class as the constructor parameter. This is called polymorphism. The class "
          },
          {
            "Text": "System",
            "AttrFlags": 2
          },
          {
            "Text": " is now not aware of whether it is Bluetooth / Wifi even we can add another Communication module like Inferade, Bluetooth5 and whatsoever by just implementing "
          },
          {
            "Text": "Connector",
            "AttrFlags": 2
          },
          {
            "Text": " interface."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552106329975,
        "id": "cc8bc4d0-cd4f-424b-b660-15d5a6bd7954",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552106329975,
        "parent_id": "6924ddcc-001f-4015-9a34-56a5e181e631",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This is called "
            ],
            [
              "Duck typing",
              [
                [
                  "a",
                  "https://en.wikipedia.org/wiki/Duck_typing"
                ]
              ]
            ],
            [
              ". "
            ],
            [
              "Connector",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " type is now dynamic as "
            ],
            [
              "doConnect()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is just a placeholder and developer implement this as his/her own."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This is called "
          },
          {
            "Text": "Duck typing",
            "Link": "https://en.wikipedia.org/wiki/Duck_typing"
          },
          {
            "Text": ". "
          },
          {
            "Text": "Connector",
            "AttrFlags": 2
          },
          {
            "Text": " type is now dynamic as "
          },
          {
            "Text": "doConnect()",
            "AttrFlags": 2
          },
          {
            "Text": " is just a placeholder and developer implement this as his/her own."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552106329975,
        "id": "b7ef2f04-ac87-430f-8c0a-1dd0aab37d8b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552106329975,
        "parent_id": "6924ddcc-001f-4015-9a34-56a5e181e631",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "if at "
            ],
            [
              "constructor(private connector: WifiConnector)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " where "
            ],
            [
              "WifiConnector",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is a concrete class what will happen? Then "
            ],
            [
              "System",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " class will tightly couple only with WifiConnector nothing else. Here interface solved our problem by polymorphism."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "if at "
          },
          {
            "Text": "constructor(private connector: WifiConnector)",
            "AttrFlags": 2
          },
          {
            "Text": " where "
          },
          {
            "Text": "WifiConnector",
            "AttrFlags": 2
          },
          {
            "Text": " is a concrete class what will happen? Then "
          },
          {
            "Text": "System",
            "AttrFlags": 2
          },
          {
            "Text": " class will tightly couple only with WifiConnector nothing else. Here interface solved our problem by polymorphism."
          }
        ]
      }
    ],
    "title": "Using Interfaces for Polymorphism",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}