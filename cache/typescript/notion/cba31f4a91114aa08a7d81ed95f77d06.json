{
  "ID": "cba31f4a-9111-4aa0-8a7d-81ed95f77d06",
  "Root": {
    "alive": true,
    "content": [
      "11d8385c-767b-4fe0-98d6-c7df6f5a721d",
      "9ea2a29e-78f3-4d3d-a959-67ecc7e9d3a7",
      "602bc96b-a191-4abe-832e-f1437dd6256d",
      "fcbfdecb-05d3-4565-bb94-da4bb32933c7",
      "c7dfb717-b708-4158-8505-e766e1c2cfc9",
      "f24623e3-1243-4f5c-8ae6-07408fcf82b5",
      "afa3a0a4-5137-4dc4-9ce3-48ab38c49a36",
      "c92f4c62-3900-4bf1-84e3-a517a61cea51",
      "d945f116-fdbd-419d-aeda-48950c4ac8bb",
      "d2c640aa-62ea-47f5-a80c-a13df7ab2812",
      "57df12ab-5c05-4c21-8ab9-9587de8b1db5",
      "e7b3846c-0530-40fa-b68b-30fd12c40281",
      "43d3c578-0848-4c1e-bb9d-12b5a43250c5",
      "60ecbe6b-2150-4bd9-9082-e16c75f6f2d4",
      "069fea45-0b3d-4d6e-af43-0c6625302fcf",
      "d3070cc4-7382-4dde-87a1-155bcda99a03",
      "c8b66a3d-f84d-462b-bc3c-ee9b5a529abd"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552106324453,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "cba31f4a-9111-4aa0-8a7d-81ed95f77d06",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552106324453,
    "parent_id": "f739d352-c00f-4e51-b6f2-1b425ff8f732",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Interfaces"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552106324448,
        "id": "11d8385c-767b-4fe0-98d6-c7df6f5a721d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552106324448,
        "parent_id": "cba31f4a-9111-4aa0-8a7d-81ed95f77d06",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Introduction"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Introduction"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552106324450,
        "id": "9ea2a29e-78f3-4d3d-a959-67ecc7e9d3a7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552106324450,
        "parent_id": "cba31f4a-9111-4aa0-8a7d-81ed95f77d06",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "An interfaces specifies a list of fields and functions that may be expected on any class implementing the interface. Conversely, a class cannot implement an interface unless it has every field and function specified on the interface."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "An interfaces specifies a list of fields and functions that may be expected on any class implementing the interface. Conversely, a class cannot implement an interface unless it has every field and function specified on the interface."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552106324451,
        "id": "602bc96b-a191-4abe-832e-f1437dd6256d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552106324451,
        "parent_id": "cba31f4a-9111-4aa0-8a7d-81ed95f77d06",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The primary benefit of using interfaces, is that it allows one to use objects of different types in a polymorphic way. This is because any class implementing the interface has at least those fields and functions."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The primary benefit of using interfaces, is that it allows one to use objects of different types in a polymorphic way. This is because any class implementing the interface has at least those fields and functions."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552106324451,
        "id": "fcbfdecb-05d3-4565-bb94-da4bb32933c7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552106324451,
        "parent_id": "cba31f4a-9111-4aa0-8a7d-81ed95f77d06",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Syntax"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Syntax"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552106324451,
        "id": "c7dfb717-b708-4158-8505-e766e1c2cfc9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552106324451,
        "parent_id": "cba31f4a-9111-4aa0-8a7d-81ed95f77d06",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "interface InterfaceName {"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "interface InterfaceName {"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552106324451,
        "id": "f24623e3-1243-4f5c-8ae6-07408fcf82b5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552106324451,
        "parent_id": "cba31f4a-9111-4aa0-8a7d-81ed95f77d06",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "parameterName: parameterType;"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "parameterName: parameterType;"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552106324452,
        "id": "afa3a0a4-5137-4dc4-9ce3-48ab38c49a36",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552106324452,
        "parent_id": "cba31f4a-9111-4aa0-8a7d-81ed95f77d06",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "optionalParameterName?: parameterType;"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "optionalParameterName?: parameterType;"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552106324452,
        "id": "c92f4c62-3900-4bf1-84e3-a517a61cea51",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552106324452,
        "parent_id": "cba31f4a-9111-4aa0-8a7d-81ed95f77d06",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "}"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "}"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552106324452,
        "id": "d945f116-fdbd-419d-aeda-48950c4ac8bb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552106324452,
        "parent_id": "cba31f4a-9111-4aa0-8a7d-81ed95f77d06",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Remarks"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Remarks"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552106324452,
        "id": "d2c640aa-62ea-47f5-a80c-a13df7ab2812",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552106324452,
        "parent_id": "cba31f4a-9111-4aa0-8a7d-81ed95f77d06",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Interfaces vs Type Aliases"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Interfaces vs Type Aliases"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552106324452,
        "id": "57df12ab-5c05-4c21-8ab9-9587de8b1db5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552106324452,
        "parent_id": "cba31f4a-9111-4aa0-8a7d-81ed95f77d06",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Interfaces are good for specifying the shape of an object, eg for a person object you could specify"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Interfaces are good for specifying the shape of an object, eg for a person object you could specify"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552106324452,
        "id": "e7b3846c-0530-40fa-b68b-30fd12c40281",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552106324452,
        "parent_id": "cba31f4a-9111-4aa0-8a7d-81ed95f77d06",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "interface person {\n    id?: number;\n    name: string;\n    age: number;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "interface person {\n    id?: number;\n    name: string;\n    age: number;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552106324453,
        "id": "43d3c578-0848-4c1e-bb9d-12b5a43250c5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552106324453,
        "parent_id": "cba31f4a-9111-4aa0-8a7d-81ed95f77d06",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "However what if you want to represent, say, the way a person is stored in an SQL database? Seeing as each DB entry consists of a row of shape "
            ],
            [
              "[string, string, number]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (so an array of strings or numbers), there is no way you could represent this as an object shape, because the row doesn’t have any "
            ],
            [
              "properties",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " as such, it’s just an array."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "However what if you want to represent, say, the way a person is stored in an SQL database? Seeing as each DB entry consists of a row of shape "
          },
          {
            "Text": "[string, string, number]",
            "AttrFlags": 2
          },
          {
            "Text": " (so an array of strings or numbers), there is no way you could represent this as an object shape, because the row doesn’t have any "
          },
          {
            "Text": "properties",
            "AttrFlags": 4
          },
          {
            "Text": " as such, it’s just an array."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552106324453,
        "id": "60ecbe6b-2150-4bd9-9082-e16c75f6f2d4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552106324453,
        "parent_id": "cba31f4a-9111-4aa0-8a7d-81ed95f77d06",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This is an occasion where types come in useful. Instead of specifying in every function that accepts a row parameter "
            ],
            [
              "function processRow(row: [string, string, number])",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", you can create a separate type alias for a row and then use that in every function:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This is an occasion where types come in useful. Instead of specifying in every function that accepts a row parameter "
          },
          {
            "Text": "function processRow(row: [string, string, number])",
            "AttrFlags": 2
          },
          {
            "Text": ", you can create a separate type alias for a row and then use that in every function:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552106324453,
        "id": "069fea45-0b3d-4d6e-af43-0c6625302fcf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552106324453,
        "parent_id": "cba31f4a-9111-4aa0-8a7d-81ed95f77d06",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "type Row = [string, string, number];\nfunction processRow(row: Row)"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "type Row = [string, string, number];\nfunction processRow(row: Row)",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552106324453,
        "id": "d3070cc4-7382-4dde-87a1-155bcda99a03",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552106324453,
        "parent_id": "cba31f4a-9111-4aa0-8a7d-81ed95f77d06",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Official interface documentation"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Official interface documentation"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552106324453,
        "id": "c8b66a3d-f84d-462b-bc3c-ee9b5a529abd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552106324453,
        "parent_id": "cba31f4a-9111-4aa0-8a7d-81ed95f77d06",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "https://www.typescriptlang.org/docs/handbook/interfaces.html"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "https://www.typescriptlang.org/docs/handbook/interfaces.html"
          }
        ]
      }
    ],
    "title": "Interfaces",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}