{
  "ID": "02d4d76c-3be9-48f0-b892-cd391ccc47a6",
  "Root": {
    "alive": true,
    "content": [
      "29e5b1a9-88a6-4bfd-9f09-32eb4e443eb6",
      "6b84baf7-4a8e-496c-8849-2cafb3b42f67"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552106409947,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "02d4d76c-3be9-48f0-b892-cd391ccc47a6",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552106409947,
    "parent_id": "9d04aa98-ad4e-4010-9d3f-002b3ff21e5f",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Custom enum implementation extends for enums"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552106409947,
        "id": "29e5b1a9-88a6-4bfd-9f09-32eb4e443eb6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552106409947,
        "parent_id": "02d4d76c-3be9-48f0-b892-cd391ccc47a6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Sometimes it is required to implement Enum on your own. E.g. there is no clear way to extend other enums. Custom implementation allows this:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Sometimes it is required to implement Enum on your own. E.g. there is no clear way to extend other enums. Custom implementation allows this:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552106409947,
        "id": "6b84baf7-4a8e-496c-8849-2cafb3b42f67",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552106409947,
        "parent_id": "02d4d76c-3be9-48f0-b892-cd391ccc47a6",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class Enum {\n  constructor(protected value: string) {}\n\n  public toString() {\n    return String(this.value);\n  }\n\n  public is(value: Enum | string) {\n    return this.value = value.toString();\n  }\n}\n\nclass SourceEnum extends Enum {\n  public static value1 = new SourceEnum('value1');\n  public static value2 = new SourceEnum('value2');\n}\n\nclass TestEnum extends SourceEnum {\n  public static value3 = new TestEnum('value3');\n  public static value4 = new TestEnum('value4');\n}\n\nfunction check(test: TestEnum) {\n  return test === TestEnum.value2;\n}\n\nlet value1 = TestEnum.value1;\n\nconsole.log(value1 + 'hello');\nconsole.log(value1.toString() === 'value1');\nconsole.log(value1.is('value1'));\nconsole.log(!TestEnum.value3.is(TestEnum.value3));\nconsole.log(check(TestEnum.value2));\n// this works but perhaps your TSLint would complain\n// attention! does not work with ===\n// use .is() instead\nconsole.log(TestEnum.value1 == \u003cany\u003e'value1');"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class Enum {\n  constructor(protected value: string) {}\n\n  public toString() {\n    return String(this.value);\n  }\n\n  public is(value: Enum | string) {\n    return this.value = value.toString();\n  }\n}\n\nclass SourceEnum extends Enum {\n  public static value1 = new SourceEnum('value1');\n  public static value2 = new SourceEnum('value2');\n}\n\nclass TestEnum extends SourceEnum {\n  public static value3 = new TestEnum('value3');\n  public static value4 = new TestEnum('value4');\n}\n\nfunction check(test: TestEnum) {\n  return test === TestEnum.value2;\n}\n\nlet value1 = TestEnum.value1;\n\nconsole.log(value1 + 'hello');\nconsole.log(value1.toString() === 'value1');\nconsole.log(value1.is('value1'));\nconsole.log(!TestEnum.value3.is(TestEnum.value3));\nconsole.log(check(TestEnum.value2));\n// this works but perhaps your TSLint would complain\n// attention! does not work with ===\n// use .is() instead\nconsole.log(TestEnum.value1 == \u003cany\u003e'value1');",
        "code_language": "Plain Text"
      }
    ],
    "title": "Custom enum implementation extends for enums",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}