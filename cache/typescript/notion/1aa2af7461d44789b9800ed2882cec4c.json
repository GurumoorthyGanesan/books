{
  "ID": "1aa2af74-61d4-4789-b980-0ed2882cec4c",
  "Root": {
    "alive": true,
    "content": [
      "651c79ae-17d4-4e48-b92f-d4d931bd86e9",
      "431895d6-3edf-49a4-981b-5ccd6e9865de",
      "b5d0f3f8-65cb-4b65-b2ef-2e959905027f",
      "66cfdca8-2e27-47b6-b368-61a4c57d05ca",
      "ab6ba5fb-adfd-443f-851b-009e8c42109e",
      "d867e497-73a8-4ac4-956b-c1722586497c",
      "158f3e7a-414b-4dda-80e6-03222e1dc5a2",
      "1f6393db-7667-4d0e-aa6c-8197bc1eaf7d",
      "39480c32-bd53-46c2-bbd7-620ac7a9b611",
      "bd6b51ad-212a-40a3-88d6-d84ac4263aae",
      "590180a9-8b79-4c5e-b258-9c9ceae0ef0c",
      "ddc6c55a-2310-49b7-ae9b-41a4eef9f087",
      "569e9d98-0079-4e15-a1e8-151e78d1bf85"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552106330927,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "1aa2af74-61d4-4789-b980-0ed2882cec4c",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552106330927,
    "parent_id": "f739d352-c00f-4e51-b6f2-1b425ff8f732",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Using Interfaces to Enforce Types"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552106330922,
        "id": "651c79ae-17d4-4e48-b92f-d4d931bd86e9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552106330922,
        "parent_id": "1aa2af74-61d4-4789-b980-0ed2882cec4c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "One of the core benefits of Typescript is that it enforces data types of values that you are passing around your code to help prevent mistakes."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "One of the core benefits of Typescript is that it enforces data types of values that you are passing around your code to help prevent mistakes."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552106330925,
        "id": "431895d6-3edf-49a4-981b-5ccd6e9865de",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552106330925,
        "parent_id": "1aa2af74-61d4-4789-b980-0ed2882cec4c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Let’s say you’re making a pet dating application."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Let’s say you’re making a pet dating application."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552106330925,
        "id": "b5d0f3f8-65cb-4b65-b2ef-2e959905027f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552106330925,
        "parent_id": "1aa2af74-61d4-4789-b980-0ed2882cec4c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You have this simple function that checks if two pets are compatible with each other…"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You have this simple function that checks if two pets are compatible with each other…"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552106330925,
        "id": "66cfdca8-2e27-47b6-b368-61a4c57d05ca",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552106330925,
        "parent_id": "1aa2af74-61d4-4789-b980-0ed2882cec4c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "checkCompatible(petOne, petTwo) {\n  if (petOne.species === petTwo.species \u0026\u0026\n      Math.abs(petOne.age - petTwo.age) \u003c= 5) {\n    return true;\n  }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "checkCompatible(petOne, petTwo) {\n  if (petOne.species === petTwo.species \u0026\u0026\n      Math.abs(petOne.age - petTwo.age) \u003c= 5) {\n    return true;\n  }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552106330926,
        "id": "ab6ba5fb-adfd-443f-851b-009e8c42109e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552106330926,
        "parent_id": "1aa2af74-61d4-4789-b980-0ed2882cec4c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This is completely functional code, but it would be far too easy for someone, especially other people working on this application who didn’t write this function, to be unaware that they are supposed to pass it objects with ‘species’ and ‘age’ properties. They may mistakenly try "
            ],
            [
              "checkCompatible(petOne.species, petTwo.species)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and then be left to figure out the errors thrown when the function tries to access petOne.species.species or petOne.species.age!"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This is completely functional code, but it would be far too easy for someone, especially other people working on this application who didn’t write this function, to be unaware that they are supposed to pass it objects with ‘species’ and ‘age’ properties. They may mistakenly try "
          },
          {
            "Text": "checkCompatible(petOne.species, petTwo.species)",
            "AttrFlags": 2
          },
          {
            "Text": " and then be left to figure out the errors thrown when the function tries to access petOne.species.species or petOne.species.age!"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552106330926,
        "id": "d867e497-73a8-4ac4-956b-c1722586497c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552106330926,
        "parent_id": "1aa2af74-61d4-4789-b980-0ed2882cec4c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "One way we can prevent this from happening is to specify the properties we want on the pet parameters:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "One way we can prevent this from happening is to specify the properties we want on the pet parameters:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552106330926,
        "id": "158f3e7a-414b-4dda-80e6-03222e1dc5a2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552106330926,
        "parent_id": "1aa2af74-61d4-4789-b980-0ed2882cec4c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "checkCompatible(petOne: {species: string, age: number}, petTwo: {species: string, age: number}) {\n    //...\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "checkCompatible(petOne: {species: string, age: number}, petTwo: {species: string, age: number}) {\n    //...\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552106330926,
        "id": "1f6393db-7667-4d0e-aa6c-8197bc1eaf7d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552106330926,
        "parent_id": "1aa2af74-61d4-4789-b980-0ed2882cec4c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In this case, Typescript will make sure everything passed to the function has ‘species’ and ‘age’ properties (it is okay if they have additional properties), but this is a bit of an unwieldy solution, even with only two properties specified. With interfaces, there is a better way!"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In this case, Typescript will make sure everything passed to the function has ‘species’ and ‘age’ properties (it is okay if they have additional properties), but this is a bit of an unwieldy solution, even with only two properties specified. With interfaces, there is a better way!"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552106330926,
        "id": "39480c32-bd53-46c2-bbd7-620ac7a9b611",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552106330926,
        "parent_id": "1aa2af74-61d4-4789-b980-0ed2882cec4c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "First we define our interface:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "First we define our interface:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552106330926,
        "id": "bd6b51ad-212a-40a3-88d6-d84ac4263aae",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552106330926,
        "parent_id": "1aa2af74-61d4-4789-b980-0ed2882cec4c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "interface Pet {\n  species: string;\n  age: number;\n  //We can add more properties if we choose.\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "interface Pet {\n  species: string;\n  age: number;\n  //We can add more properties if we choose.\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552106330927,
        "id": "590180a9-8b79-4c5e-b258-9c9ceae0ef0c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552106330927,
        "parent_id": "1aa2af74-61d4-4789-b980-0ed2882cec4c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Now all we have to do is specify the type of our parameters as our new interface, like so…"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Now all we have to do is specify the type of our parameters as our new interface, like so…"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552106330927,
        "id": "ddc6c55a-2310-49b7-ae9b-41a4eef9f087",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552106330927,
        "parent_id": "1aa2af74-61d4-4789-b980-0ed2882cec4c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "checkCompatible(petOne: Pet, petTwo: Pet) {\n  //...\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "checkCompatible(petOne: Pet, petTwo: Pet) {\n  //...\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552106330927,
        "id": "569e9d98-0079-4e15-a1e8-151e78d1bf85",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552106330927,
        "parent_id": "1aa2af74-61d4-4789-b980-0ed2882cec4c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "… and Typescript will make sure that the parameters passed to our function contain the properties specified in the Pet interface!"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "… and Typescript will make sure that the parameters passed to our function contain the properties specified in the Pet interface!"
          }
        ]
      }
    ],
    "title": "Using Interfaces to Enforce Types",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}