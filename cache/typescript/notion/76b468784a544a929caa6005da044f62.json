{
  "ID": "76b46878-4a54-4a92-9caa-6005da044f62",
  "Root": {
    "alive": true,
    "content": [
      "2533fcc2-2911-4e6a-ae21-2b0861320eef",
      "e7855744-e80d-41f9-b758-4a1e1a31f946",
      "e8a2760a-46af-4579-b0d4-2b8e52aaaf68"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552106435386,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "76b46878-4a54-4a92-9caa-6005da044f62",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552106435386,
    "parent_id": "60872471-6dce-4887-97ac-cb868a73e2cf",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Configuration for fewer programming errors"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552106435385,
        "id": "2533fcc2-2911-4e6a-ae21-2b0861320eef",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552106435385,
        "parent_id": "76b46878-4a54-4a92-9caa-6005da044f62",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This tslint.json example contains a set of configuration to enforce more typings, catch common errors or otherwise confusing constructs that are prone to producing bugs and following more the "
            ],
            [
              "Coding Guidelines for TypeScript Contributors",
              [
                [
                  "a",
                  "https://github.com/Microsoft/TypeScript/wiki/Coding-guidelines"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This tslint.json example contains a set of configuration to enforce more typings, catch common errors or otherwise confusing constructs that are prone to producing bugs and following more the "
          },
          {
            "Text": "Coding Guidelines for TypeScript Contributors",
            "Link": "https://github.com/Microsoft/TypeScript/wiki/Coding-guidelines"
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552106435386,
        "id": "e7855744-e80d-41f9-b758-4a1e1a31f946",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552106435386,
        "parent_id": "76b46878-4a54-4a92-9caa-6005da044f62",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To enforce this rules, include tslint in your build process and check your code before compiling it with tsc."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To enforce this rules, include tslint in your build process and check your code before compiling it with tsc."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552106435386,
        "id": "e8a2760a-46af-4579-b0d4-2b8e52aaaf68",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552106435386,
        "parent_id": "76b46878-4a54-4a92-9caa-6005da044f62",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "{\n  \"rules\": {\n     // TypeScript Specific\n     \"member-access\": true, // Requires explicit visibility declarations for class members.\n     \"no-any\": true, // Diallows usages of any as a type declaration.\n     // Functionality\n     \"label-position\": true, // Only allows labels in sensible locations.\n     \"no-bitwise\": true, // Disallows bitwise operators.\n     \"no-eval\": true, // Disallows eval function invocations.\n     \"no-null-keyword\": true, // Disallows use of the null keyword literal.\n     \"no-unsafe-finally\": true, // Disallows control flow statements, such as return, continue, break and throws in finally blocks.\n     \"no-var-keyword\": true, // Disallows usage of the var keyword.\n     \"radix\": true, // Requires the radix parameter to be specified when calling parseInt.\n     \"triple-equals\": true, // Requires === and !== in place of == and !=.\n     \"use-isnan\": true, // Enforces use of the isNaN() function to check for NaN references instead of a comparison to the NaN constant.\n     // Style\n     \"class-name\": true, // Enforces PascalCased class and interface names. \n     \"interface-name\": [ true, \"never-prefix\" ], // Requires interface names to begin with a capital ‘I’\n     \"no-angle-bracket-type-assertion\": true, // Requires the use of as Type for type assertions instead of \u003cType\u003e.\n     \"one-variable-per-declaration\": true, // Disallows multiple variable definitions in the same declaration statement.\n     \"quotemark\": [ true, \"double\", \"avoid-escape\" ], // Requires double quotes for string literals.\n     \"semicolon\": [ true, \"always\" ], // Enforces consistent semicolon usage at the end of every statement.\n     \"variable-name\": [true, \"ban-keywords\", \"check-format\", \"allow-leading-underscore\"] // Checks variable names for various errors. Disallows the use of certain TypeScript keywords (any, Number, number, String, string, Boolean, boolean, undefined) as variable or parameter. Allows only camelCased or UPPER_CASED variable names. Allows underscores at the beginning (only has an effect if “check-format” specified).\n  }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "{\n  \"rules\": {\n     // TypeScript Specific\n     \"member-access\": true, // Requires explicit visibility declarations for class members.\n     \"no-any\": true, // Diallows usages of any as a type declaration.\n     // Functionality\n     \"label-position\": true, // Only allows labels in sensible locations.\n     \"no-bitwise\": true, // Disallows bitwise operators.\n     \"no-eval\": true, // Disallows eval function invocations.\n     \"no-null-keyword\": true, // Disallows use of the null keyword literal.\n     \"no-unsafe-finally\": true, // Disallows control flow statements, such as return, continue, break and throws in finally blocks.\n     \"no-var-keyword\": true, // Disallows usage of the var keyword.\n     \"radix\": true, // Requires the radix parameter to be specified when calling parseInt.\n     \"triple-equals\": true, // Requires === and !== in place of == and !=.\n     \"use-isnan\": true, // Enforces use of the isNaN() function to check for NaN references instead of a comparison to the NaN constant.\n     // Style\n     \"class-name\": true, // Enforces PascalCased class and interface names. \n     \"interface-name\": [ true, \"never-prefix\" ], // Requires interface names to begin with a capital ‘I’\n     \"no-angle-bracket-type-assertion\": true, // Requires the use of as Type for type assertions instead of \u003cType\u003e.\n     \"one-variable-per-declaration\": true, // Disallows multiple variable definitions in the same declaration statement.\n     \"quotemark\": [ true, \"double\", \"avoid-escape\" ], // Requires double quotes for string literals.\n     \"semicolon\": [ true, \"always\" ], // Enforces consistent semicolon usage at the end of every statement.\n     \"variable-name\": [true, \"ban-keywords\", \"check-format\", \"allow-leading-underscore\"] // Checks variable names for various errors. Disallows the use of certain TypeScript keywords (any, Number, number, String, string, Boolean, boolean, undefined) as variable or parameter. Allows only camelCased or UPPER_CASED variable names. Allows underscores at the beginning (only has an effect if “check-format” specified).\n  }\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "Configuration for fewer programming errors",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}