{
  "ID": "bd96f580-f9c8-4290-a610-aa3e2e16b114",
  "Root": {
    "alive": true,
    "content": [
      "9bc92ca5-6745-4120-b726-22a4f3ae6651",
      "266e87d9-294a-4115-b9da-58ec1ea8e022",
      "36a3d378-757b-4909-b625-dabfd5473061",
      "38610913-431e-48e4-862d-1b531c09096d",
      "9f1e0dfa-61bf-4b91-95f7-7857886f421b",
      "4c21e433-7308-46ac-9089-3df883a08c3a",
      "e78046f2-af3b-4662-966e-d1a179d149db"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552021572082,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "bd96f580-f9c8-4290-a610-aa3e2e16b114",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552021572082,
    "parent_id": "9ab4b6b8-bf3c-4fb8-b76e-f1e7486d2519",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "BOOL"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552021572067,
        "id": "9bc92ca5-6745-4120-b726-22a4f3ae6651",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552021572067,
        "parent_id": "bd96f580-f9c8-4290-a610-aa3e2e16b114",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "BOOL",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " type is used for boolean values in Objective-C. It has two values, "
            ],
            [
              "YES",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", and "
            ],
            [
              "NO",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", in contrast to the more common “true” and “false”."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "BOOL",
            "AttrFlags": 2
          },
          {
            "Text": " type is used for boolean values in Objective-C. It has two values, "
          },
          {
            "Text": "YES",
            "AttrFlags": 2
          },
          {
            "Text": ", and "
          },
          {
            "Text": "NO",
            "AttrFlags": 2
          },
          {
            "Text": ", in contrast to the more common “true” and “false”."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552021572070,
        "id": "266e87d9-294a-4115-b9da-58ec1ea8e022",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552021572070,
        "parent_id": "bd96f580-f9c8-4290-a610-aa3e2e16b114",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Its behavior is straightforward and identical to the C language’s."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Its behavior is straightforward and identical to the C language’s."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552021572070,
        "id": "36a3d378-757b-4909-b625-dabfd5473061",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552021572070,
        "parent_id": "bd96f580-f9c8-4290-a610-aa3e2e16b114",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "BOOL areEqual = (1 == 1);    // areEqual is YES\nBOOL areNotEqual = !areEqual    // areNotEqual is NO\nNSCAssert(areEqual, \"Mathematics is a lie\");    // Assertion passes\n\nBOOL shouldFlatterReader = YES;\nif (shouldFlatterReader) {\n    NSLog(@\"Only the very smartest programmers read this kind of material.\");\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "BOOL areEqual = (1 == 1);    // areEqual is YES\nBOOL areNotEqual = !areEqual    // areNotEqual is NO\nNSCAssert(areEqual, \"Mathematics is a lie\");    // Assertion passes\n\nBOOL shouldFlatterReader = YES;\nif (shouldFlatterReader) {\n    NSLog(@\"Only the very smartest programmers read this kind of material.\");\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552021572070,
        "id": "38610913-431e-48e4-862d-1b531c09096d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552021572070,
        "parent_id": "bd96f580-f9c8-4290-a610-aa3e2e16b114",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A "
            ],
            [
              "BOOL",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is a primitive, and so it cannot be stored directly in a Foundation collection. It must be wrapped in an "
            ],
            [
              "NSNumber",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Clang provides special syntax for this:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A "
          },
          {
            "Text": "BOOL",
            "AttrFlags": 2
          },
          {
            "Text": " is a primitive, and so it cannot be stored directly in a Foundation collection. It must be wrapped in an "
          },
          {
            "Text": "NSNumber",
            "AttrFlags": 2
          },
          {
            "Text": ". Clang provides special syntax for this:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552021572070,
        "id": "9f1e0dfa-61bf-4b91-95f7-7857886f421b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552021572070,
        "parent_id": "bd96f580-f9c8-4290-a610-aa3e2e16b114",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "NSNumber * yes = @YES;    // Equivalent to [NSNumber numberWithBool:YES]\nNSNumber * no = @NO;    // Equivalent to [NSNumber numberWithBool:NO]"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "NSNumber * yes = @YES;    // Equivalent to [NSNumber numberWithBool:YES]\nNSNumber * no = @NO;    // Equivalent to [NSNumber numberWithBool:NO]",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552021572070,
        "id": "4c21e433-7308-46ac-9089-3df883a08c3a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552021572070,
        "parent_id": "bd96f580-f9c8-4290-a610-aa3e2e16b114",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552021572082,
        "id": "e78046f2-af3b-4662-966e-d1a179d149db",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552021572082,
        "parent_id": "bd96f580-f9c8-4290-a610-aa3e2e16b114",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "BOOL",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " implementation is directly based on C’s, in that it is a typedef of the C99 standard type "
            ],
            [
              "bool",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". The "
            ],
            [
              "YES",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "NO",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " values are defined to "
            ],
            [
              "__objc_yes",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "__objc_no",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", respectively. These special values are compiler builtins introduced by Clang, which are translated to "
            ],
            [
              "(BOOL)1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "(BOOL)0",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". If they are not available, "
            ],
            [
              "YES",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "NO",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " are defined directly as the cast-integer form. The definitions are found in the Objective-C runtime header objc.h"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "BOOL",
            "AttrFlags": 2
          },
          {
            "Text": " implementation is directly based on C’s, in that it is a typedef of the C99 standard type "
          },
          {
            "Text": "bool",
            "AttrFlags": 2
          },
          {
            "Text": ". The "
          },
          {
            "Text": "YES",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "NO",
            "AttrFlags": 2
          },
          {
            "Text": " values are defined to "
          },
          {
            "Text": "__objc_yes",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "__objc_no",
            "AttrFlags": 2
          },
          {
            "Text": ", respectively. These special values are compiler builtins introduced by Clang, which are translated to "
          },
          {
            "Text": "(BOOL)1",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "(BOOL)0",
            "AttrFlags": 2
          },
          {
            "Text": ". If they are not available, "
          },
          {
            "Text": "YES",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "NO",
            "AttrFlags": 2
          },
          {
            "Text": " are defined directly as the cast-integer form. The definitions are found in the Objective-C runtime header objc.h"
          }
        ]
      }
    ],
    "title": "BOOL",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}