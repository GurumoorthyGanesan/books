{
  "ID": "a935a28b-8c10-44e3-b901-20981db69cef",
  "Root": {
    "alive": true,
    "content": [
      "9b3d2a2f-ebf7-4ff6-a454-d36ec2eca605",
      "5b8aaf7e-b2a1-4dc1-bca5-73722ee55174",
      "643b0fb7-f3d0-4da1-8f4e-fb6a0f4e5feb"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552021081109,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "a935a28b-8c10-44e3-b901-20981db69cef",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552021081109,
    "parent_id": "1a2fc903-c419-477e-bc9c-634980a5b747",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Key Value Observing"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552021081109,
        "id": "9b3d2a2f-ebf7-4ff6-a454-d36ec2eca605",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552021081109,
        "parent_id": "a935a28b-8c10-44e3-b901-20981db69cef",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Setting up key value observing."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Setting up key value observing."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552021081109,
        "id": "5b8aaf7e-b2a1-4dc1-bca5-73722ee55174",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552021081109,
        "parent_id": "a935a28b-8c10-44e3-b901-20981db69cef",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In this case, we want to observe the "
            ],
            [
              "contentOffset",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " on an object that our observer owns"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In this case, we want to observe the "
          },
          {
            "Text": "contentOffset",
            "AttrFlags": 2
          },
          {
            "Text": " on an object that our observer owns"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552021081109,
        "id": "643b0fb7-f3d0-4da1-8f4e-fb6a0f4e5feb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552021081109,
        "parent_id": "a935a28b-8c10-44e3-b901-20981db69cef",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "//\n// Class to observe\n//\n@interface XYZScrollView: NSObject\n@property (nonatomic, assign) CGPoint contentOffset;\n@end\n\n@implementation XYZScrollView\n@end\n\n\n//\n// Class that will observe changes\n//\n@interface XYZObserver: NSObject\n@property (nonatomic, strong) XYZScrollView *scrollView;\n@end\n\n@implementation XYZObserver\n\n// simple way to create a KVO context\nstatic void *XYZObserverContext = \u0026XYZObserverContext;\n\n\n// Helper method to add self as an observer to \n// the scrollView's contentOffset property\n- (void)addObserver {\n\n    // NSKeyValueObservingOptions\n    //\n    // - NSKeyValueObservingOptionNew\n    // - NSKeyValueObservingOptionOld\n    // - NSKeyValueObservingOptionInitial\n    // - NSKeyValueObservingOptionPrior\n    //\n    // can be combined:\n    // (NSKeyValueObservingOptionNew | NSKeyValueObservingOptionOld)\n    \n    NSString *keyPath = NSStringFromSelector(@selector(contentOffset));\n    NSKeyValueObservingOptions options = NSKeyValueObservingOptionNew;    \n\n    [self.scrollView addObserver: self \n                      forKeyPath: keyPath \n                         options: options\n                         context: XYZObserverContext];\n}\n\n- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary\u003cNSString *,id\u003e *)change context:(void *)context {\n    \n    if (context == XYZObserverContext) { // check the context\n\n        // check the keyPath to see if it's any of the desired keyPath's.\n        // You can observe multiple keyPath's\n        if ([keyPath isEqualToString: NSStringFromSelector(@selector(contentOffset))]) {\n\n            // change dictionary keys:\n            // - NSKeyValueChangeKindKey\n            // - NSKeyValueChangeNewKey\n            // - NSKeyValueChangeOldKey\n            // - NSKeyValueChangeIndexesKey\n            // - NSKeyValueChangeNotificationIsPriorKey\n            \n            // the change dictionary here for a CGPoint observation will\n            // return an NSPoint, so we can take the CGPointValue of it.\n            CGPoint point = [change[NSKeyValueChangeNewKey] CGPointValue];\n            \n            // handle point\n        }\n        \n    } else {\n\n        // if the context doesn't match our current object's context\n        // we want to pass the observation parameters to super\n        [super observeValueForKeyPath: keyPath\n                             ofObject: object\n                               change: change\n                              context: context];\n    }\n}\n\n// The program can crash if an object is not removed as observer \n// before it is dealloc'd\n//\n// Helper method to remove self as an observer of the scrollView's\n// contentOffset property\n- (void)removeObserver {\n    NSString *keyPath = NSStringFromSelector(@selector(contentOffset));\n    [self.scrollView removeObserver: self forKeyPath: keyPath];\n}\n\n@end"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "//\n// Class to observe\n//\n@interface XYZScrollView: NSObject\n@property (nonatomic, assign) CGPoint contentOffset;\n@end\n\n@implementation XYZScrollView\n@end\n\n\n//\n// Class that will observe changes\n//\n@interface XYZObserver: NSObject\n@property (nonatomic, strong) XYZScrollView *scrollView;\n@end\n\n@implementation XYZObserver\n\n// simple way to create a KVO context\nstatic void *XYZObserverContext = \u0026XYZObserverContext;\n\n\n// Helper method to add self as an observer to \n// the scrollView's contentOffset property\n- (void)addObserver {\n\n    // NSKeyValueObservingOptions\n    //\n    // - NSKeyValueObservingOptionNew\n    // - NSKeyValueObservingOptionOld\n    // - NSKeyValueObservingOptionInitial\n    // - NSKeyValueObservingOptionPrior\n    //\n    // can be combined:\n    // (NSKeyValueObservingOptionNew | NSKeyValueObservingOptionOld)\n    \n    NSString *keyPath = NSStringFromSelector(@selector(contentOffset));\n    NSKeyValueObservingOptions options = NSKeyValueObservingOptionNew;    \n\n    [self.scrollView addObserver: self \n                      forKeyPath: keyPath \n                         options: options\n                         context: XYZObserverContext];\n}\n\n- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary\u003cNSString *,id\u003e *)change context:(void *)context {\n    \n    if (context == XYZObserverContext) { // check the context\n\n        // check the keyPath to see if it's any of the desired keyPath's.\n        // You can observe multiple keyPath's\n        if ([keyPath isEqualToString: NSStringFromSelector(@selector(contentOffset))]) {\n\n            // change dictionary keys:\n            // - NSKeyValueChangeKindKey\n            // - NSKeyValueChangeNewKey\n            // - NSKeyValueChangeOldKey\n            // - NSKeyValueChangeIndexesKey\n            // - NSKeyValueChangeNotificationIsPriorKey\n            \n            // the change dictionary here for a CGPoint observation will\n            // return an NSPoint, so we can take the CGPointValue of it.\n            CGPoint point = [change[NSKeyValueChangeNewKey] CGPointValue];\n            \n            // handle point\n        }\n        \n    } else {\n\n        // if the context doesn't match our current object's context\n        // we want to pass the observation parameters to super\n        [super observeValueForKeyPath: keyPath\n                             ofObject: object\n                               change: change\n                              context: context];\n    }\n}\n\n// The program can crash if an object is not removed as observer \n// before it is dealloc'd\n//\n// Helper method to remove self as an observer of the scrollView's\n// contentOffset property\n- (void)removeObserver {\n    NSString *keyPath = NSStringFromSelector(@selector(contentOffset));\n    [self.scrollView removeObserver: self forKeyPath: keyPath];\n}\n\n@end",
        "code_language": "Plain Text"
      }
    ],
    "title": "Key Value Observing",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}