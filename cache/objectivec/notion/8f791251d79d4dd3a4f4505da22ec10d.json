{
  "ID": "8f791251-d79d-4dd3-a4f4-505da22ec10d",
  "Root": {
    "alive": true,
    "content": [
      "6d28bf84-f4dd-4b6f-8161-3f4635130878",
      "817bde09-abb5-4dc0-a557-8672ea6eb1ae",
      "36e45130-737d-4670-b995-497fb0285982"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552021147047,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "8f791251-d79d-4dd3-a4f4-505da22ec10d",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552021147047,
    "parent_id": "73591b7d-ab8a-48a4-8c0c-08a8eb95bd4e",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Calling methods directly"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552021147046,
        "id": "6d28bf84-f4dd-4b6f-8161-3f4635130878",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552021147046,
        "parent_id": "8f791251-d79d-4dd3-a4f4-505da22ec10d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If you need to call an Objective-C method from C code, you have two ways: using "
            ],
            [
              "objc_msgSend",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", or obtaining the "
            ],
            [
              "IMP",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (method implementation function pointer) and calling that."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If you need to call an Objective-C method from C code, you have two ways: using "
          },
          {
            "Text": "objc_msgSend",
            "AttrFlags": 2
          },
          {
            "Text": ", or obtaining the "
          },
          {
            "Text": "IMP",
            "AttrFlags": 2
          },
          {
            "Text": " (method implementation function pointer) and calling that."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552021147047,
        "id": "817bde09-abb5-4dc0-a557-8672ea6eb1ae",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552021147047,
        "parent_id": "8f791251-d79d-4dd3-a4f4-505da22ec10d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#import \u003cobjc/objc.h\u003e\n\n@implementation Example\n\n- (double)negate:(double)value {\n    return -value;\n}\n\n- (double)invert:(double)value {\n    return 1 / value;\n}\n\n@end\n\n// Calls the selector on the object. Expects the method to have one double argument and return a double.\ndouble performSelectorWithMsgSend(id object, SEL selector, double value) {\n    // We declare pointer to function and cast `objc_msgSend` to expected signature.\n    // WARNING: This step is important! Otherwise you may get unexpected results!\n    double (*msgSend)(id, SEL, double) = (typeof(msgSend)) \u0026objc_msgSend;\n\n    // The implicit arguments of self and _cmd need to be passed in addition to any explicit arguments.\n    return msgSend(object, selector, value);\n}\n\n// Does the same as the above function, but by obtaining the method's IMP.\ndouble performSelectorWithIMP(id object, SEL selector, double value) {\n    // Get the method's implementation.\n    IMP imp = class_getMethodImplementation([self class], selector);\n\n    // Cast it so the types are known and ARC can work correctly.\n    double (*callableImp)(id, SEL, double) = (typeof(callableImp)) imp;\n\n    // Again, you need the explicit arguments.\n    return callableImp(object, selector, value);\n} \n\nint main() {\n    Example *e = [Example new];\n\n    // Invoke negation, result is -4\n    double x = performSelectorWithMsgSend(e, @selector(negate:), 4);\n\n    // Invoke inversion, result is 0.25\n    double y = performSelectorWithIMP(e, @selector(invert:), 4);\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#import \u003cobjc/objc.h\u003e\n\n@implementation Example\n\n- (double)negate:(double)value {\n    return -value;\n}\n\n- (double)invert:(double)value {\n    return 1 / value;\n}\n\n@end\n\n// Calls the selector on the object. Expects the method to have one double argument and return a double.\ndouble performSelectorWithMsgSend(id object, SEL selector, double value) {\n    // We declare pointer to function and cast `objc_msgSend` to expected signature.\n    // WARNING: This step is important! Otherwise you may get unexpected results!\n    double (*msgSend)(id, SEL, double) = (typeof(msgSend)) \u0026objc_msgSend;\n\n    // The implicit arguments of self and _cmd need to be passed in addition to any explicit arguments.\n    return msgSend(object, selector, value);\n}\n\n// Does the same as the above function, but by obtaining the method's IMP.\ndouble performSelectorWithIMP(id object, SEL selector, double value) {\n    // Get the method's implementation.\n    IMP imp = class_getMethodImplementation([self class], selector);\n\n    // Cast it so the types are known and ARC can work correctly.\n    double (*callableImp)(id, SEL, double) = (typeof(callableImp)) imp;\n\n    // Again, you need the explicit arguments.\n    return callableImp(object, selector, value);\n} \n\nint main() {\n    Example *e = [Example new];\n\n    // Invoke negation, result is -4\n    double x = performSelectorWithMsgSend(e, @selector(negate:), 4);\n\n    // Invoke inversion, result is 0.25\n    double y = performSelectorWithIMP(e, @selector(invert:), 4);\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552021147047,
        "id": "36e45130-737d-4670-b995-497fb0285982",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552021147047,
        "parent_id": "8f791251-d79d-4dd3-a4f4-505da22ec10d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "objc_msgSend",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " works by obtaining the IMP for the method and calling that. The "
            ],
            [
              "IMP",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "s for the last several methods called are cached, so if you’re sending an Objective-C message in a very tight loop you can get acceptable performance. In some cases, manually caching the IMP can give slightly better performance, although this is a last resort optimization."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "objc_msgSend",
            "AttrFlags": 2
          },
          {
            "Text": " works by obtaining the IMP for the method and calling that. The "
          },
          {
            "Text": "IMP",
            "AttrFlags": 2
          },
          {
            "Text": "s for the last several methods called are cached, so if you’re sending an Objective-C message in a very tight loop you can get acceptable performance. In some cases, manually caching the IMP can give slightly better performance, although this is a last resort optimization."
          }
        ]
      }
    ],
    "title": "Calling methods directly",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}