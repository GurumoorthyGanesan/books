{
  "ID": "2ced2664-ce01-4c0b-a145-9814015c94ee",
  "Root": {
    "alive": true,
    "content": [
      "c11aecb8-3283-4e05-9a97-28082baa6874",
      "c8f4de12-1f2b-4161-a026-beb82001cc84",
      "4680d0eb-522d-4fdc-a05b-d43ce5bec6cc",
      "31eba25a-0ee4-47c1-9cdb-dc71d395912a",
      "1c7b0888-19c9-438a-8074-c87a7b4ed2f3",
      "cf11972d-7b86-4427-b1e0-f46689d5b378",
      "9c67ad8d-2f13-4362-adfa-83006af70518",
      "40d8ecca-cf8f-44fb-a4de-bc1ec5a3db5c",
      "18be0532-25f8-46bc-b160-02de6e54c507"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552021145202,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "2ced2664-ce01-4c0b-a145-9814015c94ee",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552021145202,
    "parent_id": "73591b7d-ab8a-48a4-8c0c-08a8eb95bd4e",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Augmenting methods using Method Swizzling"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552021145200,
        "id": "c11aecb8-3283-4e05-9a97-28082baa6874",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552021145200,
        "parent_id": "2ced2664-ce01-4c0b-a145-9814015c94ee",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The Objective-C runtime allows you to change the implementation of a method at runtime. This is called "
            ],
            [
              "method swizzling",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " and is often used to exchange the implementations of two methods. For example, if the methods "
            ],
            [
              "foo",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "bar",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " are exchanged, sending the message "
            ],
            [
              "foo",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will now execute the implementation of "
            ],
            [
              "bar",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and vice versa."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The Objective-C runtime allows you to change the implementation of a method at runtime. This is called "
          },
          {
            "Text": "method swizzling",
            "AttrFlags": 4
          },
          {
            "Text": " and is often used to exchange the implementations of two methods. For example, if the methods "
          },
          {
            "Text": "foo",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "bar",
            "AttrFlags": 2
          },
          {
            "Text": " are exchanged, sending the message "
          },
          {
            "Text": "foo",
            "AttrFlags": 2
          },
          {
            "Text": " will now execute the implementation of "
          },
          {
            "Text": "bar",
            "AttrFlags": 2
          },
          {
            "Text": " and vice versa."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552021145200,
        "id": "c8f4de12-1f2b-4161-a026-beb82001cc84",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552021145200,
        "parent_id": "2ced2664-ce01-4c0b-a145-9814015c94ee",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This technique can be used to augment or “patch” existing methods which you cannot edit directly, such as methods of system-provided classes."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This technique can be used to augment or “patch” existing methods which you cannot edit directly, such as methods of system-provided classes."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552021145201,
        "id": "4680d0eb-522d-4fdc-a05b-d43ce5bec6cc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552021145201,
        "parent_id": "2ced2664-ce01-4c0b-a145-9814015c94ee",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In the following example, the "
            ],
            [
              "-[NSUserDefaults synchronize]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method is augmented to print the execution time of the original implementation."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In the following example, the "
          },
          {
            "Text": "-[NSUserDefaults synchronize]",
            "AttrFlags": 2
          },
          {
            "Text": " method is augmented to print the execution time of the original implementation."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552021145201,
        "id": "31eba25a-0ee4-47c1-9cdb-dc71d395912a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552021145201,
        "parent_id": "2ced2664-ce01-4c0b-a145-9814015c94ee",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "IMPORTANT:",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " Many people try to do swizzling using "
            ],
            [
              "method_exchangeImplementations",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". However, this approach is dangerous if you need to call the method you’re replacing, because you’ll be calling it using a different selector than it is expecting to receive. As a result, your code can break in strange and unexpected ways—particularly if multiple parties swizzle an object in this way. Instead, you should always do swizzling using "
            ],
            [
              "setImplementation",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in conjunction with a C function, allowing you to call the method with the original selector."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "IMPORTANT:",
            "AttrFlags": 1
          },
          {
            "Text": " Many people try to do swizzling using "
          },
          {
            "Text": "method_exchangeImplementations",
            "AttrFlags": 2
          },
          {
            "Text": ". However, this approach is dangerous if you need to call the method you’re replacing, because you’ll be calling it using a different selector than it is expecting to receive. As a result, your code can break in strange and unexpected ways—particularly if multiple parties swizzle an object in this way. Instead, you should always do swizzling using "
          },
          {
            "Text": "setImplementation",
            "AttrFlags": 2
          },
          {
            "Text": " in conjunction with a C function, allowing you to call the method with the original selector."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552021145201,
        "id": "1c7b0888-19c9-438a-8074-c87a7b4ed2f3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552021145201,
        "parent_id": "2ced2664-ce01-4c0b-a145-9814015c94ee",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#import \"NSUserDefaults+Timing.h\"\n#import \u003cobjc/runtime.h\u003e // Needed for method swizzling\n\nstatic IMP old_synchronize = NULL;\n\nstatic void new_synchronize(id self, SEL _cmd);\n\n@implementation NSUserDefaults(Timing)\n\n+ (void)load\n{\n    Method originalMethod = class_getInstanceMethod([self class], @selector(synchronize:));\n    IMP swizzleImp = (IMP)new_synchronize;\n    old_synchronize = method_setImplementation(originalMethod, swizzleImp);\n}\n@end\n\nstatic void new_synchronize(id self, SEL _cmd);\n{\n    NSDate *started;\n    BOOL returnValue;\n\n    started = [NSDate date];"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#import \"NSUserDefaults+Timing.h\"\n#import \u003cobjc/runtime.h\u003e // Needed for method swizzling\n\nstatic IMP old_synchronize = NULL;\n\nstatic void new_synchronize(id self, SEL _cmd);\n\n@implementation NSUserDefaults(Timing)\n\n+ (void)load\n{\n    Method originalMethod = class_getInstanceMethod([self class], @selector(synchronize:));\n    IMP swizzleImp = (IMP)new_synchronize;\n    old_synchronize = method_setImplementation(originalMethod, swizzleImp);\n}\n@end\n\nstatic void new_synchronize(id self, SEL _cmd);\n{\n    NSDate *started;\n    BOOL returnValue;\n\n    started = [NSDate date];",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552021145201,
        "id": "cf11972d-7b86-4427-b1e0-f46689d5b378",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552021145201,
        "parent_id": "2ced2664-ce01-4c0b-a145-9814015c94ee",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// Call the original implementation, passing the same parameters\n// that this function was called with, including the selector.\nreturnValue = old_synchronize(self, _cmd);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// Call the original implementation, passing the same parameters\n// that this function was called with, including the selector.\nreturnValue = old_synchronize(self, _cmd);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552021145202,
        "id": "9c67ad8d-2f13-4362-adfa-83006af70518",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552021145202,
        "parent_id": "2ced2664-ce01-4c0b-a145-9814015c94ee",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "NSLog(@\"Writing user defaults took %f seconds.\", [[NSDate date] timeIntervalSinceDate:started]);\n\nreturn returnValue;\n}\n\n@end"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "NSLog(@\"Writing user defaults took %f seconds.\", [[NSDate date] timeIntervalSinceDate:started]);\n\nreturn returnValue;\n}\n\n@end",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552021145202,
        "id": "40d8ecca-cf8f-44fb-a4de-bc1ec5a3db5c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552021145202,
        "parent_id": "2ced2664-ce01-4c0b-a145-9814015c94ee",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If you need to swizzle a method that takes parameters, you just add them as additional parameters to the function. For example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If you need to swizzle a method that takes parameters, you just add them as additional parameters to the function. For example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552021145202,
        "id": "18be0532-25f8-46bc-b160-02de6e54c507",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552021145202,
        "parent_id": "2ced2664-ce01-4c0b-a145-9814015c94ee",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "static IMP old_viewWillAppear_animated = NULL;\nstatic void new_viewWillAppear_animated(id self, SEL _cmd, BOOL animated);\n\n...\n\nMethod originalMethod = class_getClassMethod([UIViewController class], @selector(viewWillAppear:));\nIMP swizzleImp = (IMP)new_viewWillAppear_animated;\nold_viewWillAppear_animated = method_setImplementation(originalMethod, swizzleImp);\n\n...\n\nstatic void new_viewWillAppear_animated(id self, SEL _cmd, BOOL animated)\n{\n    ...\n\n    old_viewWillAppear_animated(self, _cmd, animated);\n\n    ...\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "static IMP old_viewWillAppear_animated = NULL;\nstatic void new_viewWillAppear_animated(id self, SEL _cmd, BOOL animated);\n\n...\n\nMethod originalMethod = class_getClassMethod([UIViewController class], @selector(viewWillAppear:));\nIMP swizzleImp = (IMP)new_viewWillAppear_animated;\nold_viewWillAppear_animated = method_setImplementation(originalMethod, swizzleImp);\n\n...\n\nstatic void new_viewWillAppear_animated(id self, SEL _cmd, BOOL animated)\n{\n    ...\n\n    old_viewWillAppear_animated(self, _cmd, animated);\n\n    ...\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "Augmenting methods using Method Swizzling",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}