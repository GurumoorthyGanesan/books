{
  "ID": "638e2a63-db4c-47cf-8e23-57c68df7e56e",
  "Root": {
    "alive": true,
    "content": [
      "09717030-2245-41f6-a8ef-02f86ddcbbd5",
      "c3f88313-49f8-4250-806b-ad38ff87af8c",
      "6ae672d8-7194-4a79-9bba-043597c5ad0c",
      "37c7752e-0d5e-43bd-b927-79e019d700f0",
      "0de11ad8-4ff2-4911-968e-37b99e45d18e",
      "3aeb2569-c76a-48fb-a271-fdb39a1608ec",
      "233f348f-2949-4acf-932c-b876deb95301",
      "fe670513-10d3-47d4-82da-f55aa81ce239",
      "c02e5734-76df-4633-9878-14f646285102",
      "b2e4db0c-d2b7-4165-ab05-faaf6dbaa27d",
      "24578507-aaf2-41a7-aac1-f36a642a99c3",
      "0b1b3ca7-df36-4fca-92ca-f6633f325692",
      "0f729a19-159a-4d4b-8373-13f9bb19f4ed",
      "f5eae0d8-f487-407e-849f-487313f39dc4",
      "45fcebe4-81fa-495a-afd5-8e55a31a5fde"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550394308959,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "638e2a63-db4c-47cf-8e23-57c68df7e56e",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550482740000,
    "parent_id": "9aa8d1a9-074b-4599-9180-730b73cffa87",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Managing the Keyboard Using a Singleton Delegate"
        ]
      ]
    },
    "type": "page",
    "version": 7,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550394308954,
        "id": "09717030-2245-41f6-a8ef-02f86ddcbbd5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550394308954,
        "parent_id": "638e2a63-db4c-47cf-8e23-57c68df7e56e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When I first started managing the keyboard I would use separate Notifications in each ViewController."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When I first started managing the keyboard I would use separate Notifications in each ViewController."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550394308957,
        "id": "c3f88313-49f8-4250-806b-ad38ff87af8c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550394308957,
        "parent_id": "638e2a63-db4c-47cf-8e23-57c68df7e56e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Notification Method (Using NSNotification):"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Notification Method (Using NSNotification):"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550394308957,
        "id": "6ae672d8-7194-4a79-9bba-043597c5ad0c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550482740000,
        "parent_id": "638e2a63-db4c-47cf-8e23-57c68df7e56e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Swift"
            ]
          ],
          "title": [
            [
              "class ViewController: UIViewController {\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        NSNotificationCenter.defaultCenter().addObserver(self, selector: #selector(ViewController.keyboardNotification(_:)), name: UIKeyboardWillChangeFrameNotification, object: nil)\n    }\n\n    func keyboardNotification(notification: NSNotification) {\n        guard let userInfo = notification.userInfo else { return }\n    \n        let endFrame = (userInfo[UIKeyboardFrameEndUserInfoKey] as? NSValue)?.CGRectValue()\n        let duration: NSTimeInterval = (userInfo[UIKeyboardAnimationDurationUserInfoKey] as? NSNumber)?.doubleValue ?? 0\n        let animationCurveRawNSN = userInfo[UIKeyboardAnimationCurveUserInfoKey] as? NSNumber\n        let animationCurveRaw = animationCurveRawNSN?.unsignedLongValue ?? UIViewAnimationOptions.CurveEaseOut.rawValue\n        let animationCurve: UIViewAnimationOptions = UIViewAnimationOptions(rawValue: animationCurveRaw)\n    \n        if endFrame?.origin.y \u003e= UIScreen.mainScreen().bounds.size.height {\n            lowerViewBottomConstraint.constant = 0\n        } else {\n            lowerViewBottomConstraint.constant = endFrame?.size.height ?? 0.0\n        }\n        view.animateConstraintWithDuration(duration, delay: NSTimeInterval(0), options: animationCurve, completion: nil)\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "class ViewController: UIViewController {\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        NSNotificationCenter.defaultCenter().addObserver(self, selector: #selector(ViewController.keyboardNotification(_:)), name: UIKeyboardWillChangeFrameNotification, object: nil)\n    }\n\n    func keyboardNotification(notification: NSNotification) {\n        guard let userInfo = notification.userInfo else { return }\n    \n        let endFrame = (userInfo[UIKeyboardFrameEndUserInfoKey] as? NSValue)?.CGRectValue()\n        let duration: NSTimeInterval = (userInfo[UIKeyboardAnimationDurationUserInfoKey] as? NSNumber)?.doubleValue ?? 0\n        let animationCurveRawNSN = userInfo[UIKeyboardAnimationCurveUserInfoKey] as? NSNumber\n        let animationCurveRaw = animationCurveRawNSN?.unsignedLongValue ?? UIViewAnimationOptions.CurveEaseOut.rawValue\n        let animationCurve: UIViewAnimationOptions = UIViewAnimationOptions(rawValue: animationCurveRaw)\n    \n        if endFrame?.origin.y \u003e= UIScreen.mainScreen().bounds.size.height {\n            lowerViewBottomConstraint.constant = 0\n        } else {\n            lowerViewBottomConstraint.constant = endFrame?.size.height ?? 0.0\n        }\n        view.animateConstraintWithDuration(duration, delay: NSTimeInterval(0), options: animationCurve, completion: nil)\n    }\n}",
        "code_language": "Swift"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550394308958,
        "id": "37c7752e-0d5e-43bd-b927-79e019d700f0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550394308958,
        "parent_id": "638e2a63-db4c-47cf-8e23-57c68df7e56e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "My problem was that I found myself writing this code again and again for every single ViewController. After experimenting a bit I found using a Singleton + Delegate pattern allowed me to reuse a bunch of code and organize all of the Keyboard Management in a single place!"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "My problem was that I found myself writing this code again and again for every single ViewController. After experimenting a bit I found using a Singleton + Delegate pattern allowed me to reuse a bunch of code and organize all of the Keyboard Management in a single place!"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550394308958,
        "id": "0de11ad8-4ff2-4911-968e-37b99e45d18e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550394308958,
        "parent_id": "638e2a63-db4c-47cf-8e23-57c68df7e56e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Singleton + Delegate Method:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Singleton + Delegate Method:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550394308958,
        "id": "3aeb2569-c76a-48fb-a271-fdb39a1608ec",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550482740000,
        "parent_id": "638e2a63-db4c-47cf-8e23-57c68df7e56e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Swift"
            ]
          ],
          "title": [
            [
              "protocol KeyboardManagerDelegate: class {\n    func keyboardWillChangeFrame(endFrame: CGRect?, duration: NSTimeInterval, animationCurve: UIViewAnimationOptions)\n}\n\nclass KeyboardManager {\n\n    weak var delegate: KeyboardManagerDelegate?\n\n    class var sharedInstance: KeyboardManager {\n        struct Singleton {\n            static let instance = KeyboardManager()\n        }\n        return Singleton.instance\n    }\n\n    init() {\n        NSNotificationCenter.defaultCenter().addObserver(self, selector: #selector(KeyboardManager.keyboardWillChangeFrameNotification(_:)), name: UIKeyboardWillChangeFrameNotification, object: nil)\n    }\n\n    @objc func keyboardWillChangeFrameNotification(notification: NSNotification) {\n        guard let userInfo = notification.userInfo else { return }\n    \n        let endFrame = (userInfo[UIKeyboardFrameEndUserInfoKey] as? NSValue)?.CGRectValue()\n        let duration: NSTimeInterval = (userInfo[UIKeyboardAnimationDurationUserInfoKey] as? NSNumber)?.doubleValue ?? 0\n        let animationCurveRawNSN = userInfo[UIKeyboardAnimationCurveUserInfoKey] as? NSNumber\n        let animationCurveRaw = animationCurveRawNSN?.unsignedLongValue ?? UIViewAnimationOptions.CurveEaseOut.rawValue\n        let animationCurve: UIViewAnimationOptions = UIViewAnimationOptions(rawValue: animationCurveRaw)\n    \n        delegate?.keyboardWillChangeFrame(endFrame, duration: duration, animationCurve: animationCurve)\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "protocol KeyboardManagerDelegate: class {\n    func keyboardWillChangeFrame(endFrame: CGRect?, duration: NSTimeInterval, animationCurve: UIViewAnimationOptions)\n}\n\nclass KeyboardManager {\n\n    weak var delegate: KeyboardManagerDelegate?\n\n    class var sharedInstance: KeyboardManager {\n        struct Singleton {\n            static let instance = KeyboardManager()\n        }\n        return Singleton.instance\n    }\n\n    init() {\n        NSNotificationCenter.defaultCenter().addObserver(self, selector: #selector(KeyboardManager.keyboardWillChangeFrameNotification(_:)), name: UIKeyboardWillChangeFrameNotification, object: nil)\n    }\n\n    @objc func keyboardWillChangeFrameNotification(notification: NSNotification) {\n        guard let userInfo = notification.userInfo else { return }\n    \n        let endFrame = (userInfo[UIKeyboardFrameEndUserInfoKey] as? NSValue)?.CGRectValue()\n        let duration: NSTimeInterval = (userInfo[UIKeyboardAnimationDurationUserInfoKey] as? NSNumber)?.doubleValue ?? 0\n        let animationCurveRawNSN = userInfo[UIKeyboardAnimationCurveUserInfoKey] as? NSNumber\n        let animationCurveRaw = animationCurveRawNSN?.unsignedLongValue ?? UIViewAnimationOptions.CurveEaseOut.rawValue\n        let animationCurve: UIViewAnimationOptions = UIViewAnimationOptions(rawValue: animationCurveRaw)\n    \n        delegate?.keyboardWillChangeFrame(endFrame, duration: duration, animationCurve: animationCurve)\n    }\n}",
        "code_language": "Swift"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550394308958,
        "id": "233f348f-2949-4acf-932c-b876deb95301",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550394308958,
        "parent_id": "638e2a63-db4c-47cf-8e23-57c68df7e56e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Now when I want to manage the keyboard from a ViewController all I need to do is set the delegate to that ViewController and implement any delegate methods."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Now when I want to manage the keyboard from a ViewController all I need to do is set the delegate to that ViewController and implement any delegate methods."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550394308958,
        "id": "fe670513-10d3-47d4-82da-f55aa81ce239",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550482740000,
        "parent_id": "638e2a63-db4c-47cf-8e23-57c68df7e56e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Swift"
            ]
          ],
          "title": [
            [
              "class ViewController: UIViewController {\n    override func viewWillAppear(animated: Bool) {\n        super.viewWillAppear(animated)\n        KeyboardManager.sharedInstance.delegate = self\n    }\n}\n\n// MARK: - Keyboard Manager\n\nextension ViewController: KeyboardManagerDelegate {\n    func keyboardWillChangeFrame(endFrame: CGRect?, duration: NSTimeInterval, animationCurve: UIViewAnimationOptions) {\n        if endFrame?.origin.y \u003e= UIScreen.mainScreen().bounds.size.height {\n           lowerViewBottomConstraint.constant = 0\n        } else {\n            lowerViewBottomConstraint.constant = (endFrame?.size.height ?? 0.0)\n        }\n        view.animateConstraintWithDuration(duration, delay: NSTimeInterval(0), options: animationCurve, completion: nil)\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "class ViewController: UIViewController {\n    override func viewWillAppear(animated: Bool) {\n        super.viewWillAppear(animated)\n        KeyboardManager.sharedInstance.delegate = self\n    }\n}\n\n// MARK: - Keyboard Manager\n\nextension ViewController: KeyboardManagerDelegate {\n    func keyboardWillChangeFrame(endFrame: CGRect?, duration: NSTimeInterval, animationCurve: UIViewAnimationOptions) {\n        if endFrame?.origin.y \u003e= UIScreen.mainScreen().bounds.size.height {\n           lowerViewBottomConstraint.constant = 0\n        } else {\n            lowerViewBottomConstraint.constant = (endFrame?.size.height ?? 0.0)\n        }\n        view.animateConstraintWithDuration(duration, delay: NSTimeInterval(0), options: animationCurve, completion: nil)\n    }\n}",
        "code_language": "Swift"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550394308958,
        "id": "c02e5734-76df-4633-9878-14f646285102",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550394308958,
        "parent_id": "638e2a63-db4c-47cf-8e23-57c68df7e56e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This method is very customizable too! Say we want to add functionality for "
            ],
            [
              "UIKeyboardWillHideNotification",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". This is as easy as adding a method to our "
            ],
            [
              "KeyboardManagerDelegate",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This method is very customizable too! Say we want to add functionality for "
          },
          {
            "Text": "UIKeyboardWillHideNotification",
            "AttrFlags": 2
          },
          {
            "Text": ". This is as easy as adding a method to our "
          },
          {
            "Text": "KeyboardManagerDelegate",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550394308958,
        "id": "b2e4db0c-d2b7-4165-ab05-faaf6dbaa27d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550394308958,
        "parent_id": "638e2a63-db4c-47cf-8e23-57c68df7e56e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "KeyboardManagerDelegate",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " with "
            ],
            [
              "UIKeyboardWillHideNotification",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "KeyboardManagerDelegate",
            "AttrFlags": 2
          },
          {
            "Text": " with "
          },
          {
            "Text": "UIKeyboardWillHideNotification",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550394308958,
        "id": "24578507-aaf2-41a7-aac1-f36a642a99c3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550482740000,
        "parent_id": "638e2a63-db4c-47cf-8e23-57c68df7e56e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Swift"
            ]
          ],
          "title": [
            [
              "protocol KeyboardManagerDelegate: class {\n    func keyboardWillChangeFrame(endFrame: CGRect?, duration: NSTimeInterval, animationCurve: UIViewAnimationOptions)\n    func keyboardWillHide(notificationUserInfo: [NSObject: AnyObject])\n}\n\nclass KeyboardManager {\n    init() {\n        NSNotificationCenter.defaultCenter().addObserver(self, selector: #selector(KeyboardManager.keyboardWillChangeFrameNotification(_:)), name: UIKeyboardWillChangeFrameNotification, object: nil)\n        NSNotificationCenter.defaultCenter().addObserver(self, selector: #selector(KeyboardManager.keyboardWillHide(_:)), name: UIKeyboardWillHideNotification, object: nil)\n    }\n\n    func keyboardWillHide(notification: NSNotification) {\n        guard let userInfo = notification.userInfo else { return }\n        delegate?.keyboardWillHide(userInfo)\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "protocol KeyboardManagerDelegate: class {\n    func keyboardWillChangeFrame(endFrame: CGRect?, duration: NSTimeInterval, animationCurve: UIViewAnimationOptions)\n    func keyboardWillHide(notificationUserInfo: [NSObject: AnyObject])\n}\n\nclass KeyboardManager {\n    init() {\n        NSNotificationCenter.defaultCenter().addObserver(self, selector: #selector(KeyboardManager.keyboardWillChangeFrameNotification(_:)), name: UIKeyboardWillChangeFrameNotification, object: nil)\n        NSNotificationCenter.defaultCenter().addObserver(self, selector: #selector(KeyboardManager.keyboardWillHide(_:)), name: UIKeyboardWillHideNotification, object: nil)\n    }\n\n    func keyboardWillHide(notification: NSNotification) {\n        guard let userInfo = notification.userInfo else { return }\n        delegate?.keyboardWillHide(userInfo)\n    }\n}",
        "code_language": "Swift"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550394308959,
        "id": "0b1b3ca7-df36-4fca-92ca-f6633f325692",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550394308959,
        "parent_id": "638e2a63-db4c-47cf-8e23-57c68df7e56e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Say we only want to implement "
            ],
            [
              "func keyboardWillHide(notificationUserInfo: [NSObject: AnyObject])",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in one ViewController. We can also make this method optional."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Say we only want to implement "
          },
          {
            "Text": "func keyboardWillHide(notificationUserInfo: [NSObject: AnyObject])",
            "AttrFlags": 2
          },
          {
            "Text": " in one ViewController. We can also make this method optional."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550394308959,
        "id": "0f729a19-159a-4d4b-8373-13f9bb19f4ed",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550482740000,
        "parent_id": "638e2a63-db4c-47cf-8e23-57c68df7e56e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Swift"
            ]
          ],
          "title": [
            [
              "typealias KeyboardManagerDelegate = protocol\u003cKeyboardManagerModel, KeyboardManagerConfigureable\u003e\n\nprotocol KeyboardManagerModel: class {\n    func keyboardWillChangeFrame(endFrame: CGRect?, duration: NSTimeInterval, animationCurve: UIViewAnimationOptions)\n}\n\n@objc protocol KeyboardManagerConfigureable {\n    optional func keyboardWillHide(userInfo: [NSObject: AnyObject])\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "typealias KeyboardManagerDelegate = protocol\u003cKeyboardManagerModel, KeyboardManagerConfigureable\u003e\n\nprotocol KeyboardManagerModel: class {\n    func keyboardWillChangeFrame(endFrame: CGRect?, duration: NSTimeInterval, animationCurve: UIViewAnimationOptions)\n}\n\n@objc protocol KeyboardManagerConfigureable {\n    optional func keyboardWillHide(userInfo: [NSObject: AnyObject])\n}",
        "code_language": "Swift"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550394308959,
        "id": "f5eae0d8-f487-407e-849f-487313f39dc4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550394308959,
        "parent_id": "638e2a63-db4c-47cf-8e23-57c68df7e56e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "*Note this pattern helps avoid overuse of "
            ],
            [
              "@objc",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". See http://www.jessesquires.com/avoiding-objc-in-swift/ for more details!"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "*Note this pattern helps avoid overuse of "
          },
          {
            "Text": "@objc",
            "AttrFlags": 2
          },
          {
            "Text": ". See http://www.jessesquires.com/avoiding-objc-in-swift/ for more details!"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550394308959,
        "id": "45fcebe4-81fa-495a-afd5-8e55a31a5fde",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550394308959,
        "parent_id": "638e2a63-db4c-47cf-8e23-57c68df7e56e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In summary, I’ve found using a Singleton + Delegate to manage the keyboard is both more efficient and easier to use than using Notifications"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In summary, I’ve found using a Singleton + Delegate to manage the keyboard is both more efficient and easier to use than using Notifications"
          }
        ]
      }
    ],
    "title": "Managing the Keyboard Using a Singleton Delegate",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}