{
  "ID": "a2d8da68-fb27-4ab0-8bd7-5046c42f2b2a",
  "Root": {
    "alive": true,
    "content": [
      "5fb05d04-3aed-4173-af4a-a21cdde2cbe8",
      "56db9126-ac22-4cc9-a882-b6c82e3a4666",
      "fcb2862a-ff55-4a91-a186-3c64246283b0",
      "63d92618-8785-4bc0-827d-8ab643f1a69a",
      "722bd860-b9a5-4f86-bc50-fd1b8287c642",
      "f07aba0f-bcb4-4c68-9640-ccd4ceaca7f1"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550397856882,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "a2d8da68-fb27-4ab0-8bd7-5046c42f2b2a",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550654160000,
    "parent_id": "25182a98-2d66-4298-8b39-71e23ab1ece4",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "ScrollableController"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550397856866,
        "id": "5fb05d04-3aed-4173-af4a-a21cdde2cbe8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550397856866,
        "parent_id": "a2d8da68-fb27-4ab0-8bd7-5046c42f2b2a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When using Autolayout with a "
            ],
            [
              "UIScrollView",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", it does NOT resize properly depending on the size of its contents or subviews."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When using Autolayout with a "
          },
          {
            "Text": "UIScrollView",
            "AttrFlags": 2
          },
          {
            "Text": ", it does NOT resize properly depending on the size of its contents or subviews."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550397856881,
        "id": "56db9126-ac22-4cc9-a882-b6c82e3a4666",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550397856881,
        "parent_id": "a2d8da68-fb27-4ab0-8bd7-5046c42f2b2a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In order to get a "
            ],
            [
              "UIScrollView",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to automatically scroll when its contents become too large to fit in the visible area, we need to add a "
            ],
            [
              "ContentView",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and some constraints that allow the "
            ],
            [
              "UIScrollView",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to determine the size of its contents AND its width and height in its parent view."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In order to get a "
          },
          {
            "Text": "UIScrollView",
            "AttrFlags": 2
          },
          {
            "Text": " to automatically scroll when its contents become too large to fit in the visible area, we need to add a "
          },
          {
            "Text": "ContentView",
            "AttrFlags": 2
          },
          {
            "Text": " and some constraints that allow the "
          },
          {
            "Text": "UIScrollView",
            "AttrFlags": 2
          },
          {
            "Text": " to determine the size of its contents AND its width and height in its parent view."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550397856881,
        "id": "fcb2862a-ff55-4a91-a186-3c64246283b0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550397856881,
        "parent_id": "a2d8da68-fb27-4ab0-8bd7-5046c42f2b2a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "import Foundation\nimport UIKit\n\nclass ScrollableController : UIViewController {\n    \n    private var scrollView: UIScrollView!\n    private var contentView: UIView!\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        //Setup\n        self.initControls()\n        self.setTheme()\n        self.layoutScrollView()\n        self.layoutContentView()\n        \n        //Add child views\n        self.addChildViews()\n    }\n    \n    func initControls() {\n        self.scrollView = UIScrollView()\n        self.contentView = UIView()\n    }\n    \n    func setTheme() {\n        self.scrollView.backgroundColor = UIColor.blue()\n        self.contentView.backgroundColor = UIColor.orange()\n    }\n    \n    func layoutScrollView() {\n        self.view.addSubview(self.scrollView)\n        \n        let views: NSDictionary = [\"scrollView\": self.scrollView]\n        var constraints = Array\u003cString\u003e()\n        \n        //Constrain the scrollView to our controller's self.view.\n        constraints.append(\"H:|-0-[scrollView]-0-|\")\n        constraints.append(\"V:|-0-[scrollView]-0-|\")\n        \n        for constraint in constraints {\n            self.view.addConstraints(NSLayoutConstraint.constraints(withVisualFormat: constraint, options: NSLayoutFormatOptions(rawValue: 0), metrics: nil, views: views as! [String : AnyObject]))\n        }\n        \n        self.scrollView.translatesAutoresizingMaskIntoConstraints = false\n    }\n    \n    func layoutContentView() {\n        self.scrollView.addSubview(self.contentView)\n        \n        let views: NSDictionary = [\"contentView\": self.contentView, \"view\": self.view]\n        var constraints = Array\u003cString\u003e()\n        \n        //Constrain the contentView to the scrollView.\n        constraints.append(\"H:|-0-[contentView]-0-|\")\n        constraints.append(\"V:|-0-[contentView]-0-|\")\n        \n        for constraint in constraints {\n            self.scrollView.addConstraints(NSLayoutConstraint.constraints(withVisualFormat: constraint, options: NSLayoutFormatOptions(rawValue: 0), metrics: nil, views: views as! [String : AnyObject]))\n        }\n        \n        //Disable Horizontal Scrolling by making the contentView EqualWidth with our controller's self.view (ScrollView's parentView).\n        self.view.addConstraints(NSLayoutConstraint.constraints(withVisualFormat: \"H:[contentView(==view)]\", options: NSLayoutFormatOptions(rawValue: 0), metrics: nil, views: views as! [String : AnyObject]))\n        \n        self.contentView.translatesAutoresizingMaskIntoConstraints = false\n    }\n    \n    func addChildViews() {\n        //Init\n        let greenView = UIView()\n        let whiteView = UIView()\n        \n        //Theme\n        greenView.backgroundColor = UIColor.green()\n        whiteView.backgroundColor = UIColor.orange()\n        \n        //Layout -- Child views are added to the 'ContentView'\n        self.contentView.addSubview(greenView)\n        self.contentView.addSubview(whiteView)\n        \n        let views: NSDictionary = [\"greenView\": greenView, \"whiteView\": whiteView];\n        var constraints = Array\u003cString\u003e()\n        \n        //Constrain the greenView to the contentView with a height of 400 and 15 spacing all around.\n        constraints.append(\"H:|-15-[greenView]-15-|\")\n        constraints.append(\"V:|-15-[greenView(400)]\")\n        \n        //Constrain the whiteView below the greenView with 15 spacing all around and a height of 500.\n        constraints.append(\"H:|-15-[whiteView]-15-|\")\n        constraints.append(\"V:[greenView]-15-[whiteView(500)]-15-|\")\n        \n        for constraint in constraints {\n            self.contentView.addConstraints(NSLayoutConstraint.constraints(withVisualFormat: constraint, options: NSLayoutFormatOptions(rawValue: 0), metrics: nil, views: views as! [String : AnyObject]))\n        }\n        \n        greenView.translatesAutoresizingMaskIntoConstraints = false\n        whiteView.translatesAutoresizingMaskIntoConstraints = false\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "import Foundation\nimport UIKit\n\nclass ScrollableController : UIViewController {\n    \n    private var scrollView: UIScrollView!\n    private var contentView: UIView!\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        //Setup\n        self.initControls()\n        self.setTheme()\n        self.layoutScrollView()\n        self.layoutContentView()\n        \n        //Add child views\n        self.addChildViews()\n    }\n    \n    func initControls() {\n        self.scrollView = UIScrollView()\n        self.contentView = UIView()\n    }\n    \n    func setTheme() {\n        self.scrollView.backgroundColor = UIColor.blue()\n        self.contentView.backgroundColor = UIColor.orange()\n    }\n    \n    func layoutScrollView() {\n        self.view.addSubview(self.scrollView)\n        \n        let views: NSDictionary = [\"scrollView\": self.scrollView]\n        var constraints = Array\u003cString\u003e()\n        \n        //Constrain the scrollView to our controller's self.view.\n        constraints.append(\"H:|-0-[scrollView]-0-|\")\n        constraints.append(\"V:|-0-[scrollView]-0-|\")\n        \n        for constraint in constraints {\n            self.view.addConstraints(NSLayoutConstraint.constraints(withVisualFormat: constraint, options: NSLayoutFormatOptions(rawValue: 0), metrics: nil, views: views as! [String : AnyObject]))\n        }\n        \n        self.scrollView.translatesAutoresizingMaskIntoConstraints = false\n    }\n    \n    func layoutContentView() {\n        self.scrollView.addSubview(self.contentView)\n        \n        let views: NSDictionary = [\"contentView\": self.contentView, \"view\": self.view]\n        var constraints = Array\u003cString\u003e()\n        \n        //Constrain the contentView to the scrollView.\n        constraints.append(\"H:|-0-[contentView]-0-|\")\n        constraints.append(\"V:|-0-[contentView]-0-|\")\n        \n        for constraint in constraints {\n            self.scrollView.addConstraints(NSLayoutConstraint.constraints(withVisualFormat: constraint, options: NSLayoutFormatOptions(rawValue: 0), metrics: nil, views: views as! [String : AnyObject]))\n        }\n        \n        //Disable Horizontal Scrolling by making the contentView EqualWidth with our controller's self.view (ScrollView's parentView).\n        self.view.addConstraints(NSLayoutConstraint.constraints(withVisualFormat: \"H:[contentView(==view)]\", options: NSLayoutFormatOptions(rawValue: 0), metrics: nil, views: views as! [String : AnyObject]))\n        \n        self.contentView.translatesAutoresizingMaskIntoConstraints = false\n    }\n    \n    func addChildViews() {\n        //Init\n        let greenView = UIView()\n        let whiteView = UIView()\n        \n        //Theme\n        greenView.backgroundColor = UIColor.green()\n        whiteView.backgroundColor = UIColor.orange()\n        \n        //Layout -- Child views are added to the 'ContentView'\n        self.contentView.addSubview(greenView)\n        self.contentView.addSubview(whiteView)\n        \n        let views: NSDictionary = [\"greenView\": greenView, \"whiteView\": whiteView];\n        var constraints = Array\u003cString\u003e()\n        \n        //Constrain the greenView to the contentView with a height of 400 and 15 spacing all around.\n        constraints.append(\"H:|-15-[greenView]-15-|\")\n        constraints.append(\"V:|-15-[greenView(400)]\")\n        \n        //Constrain the whiteView below the greenView with 15 spacing all around and a height of 500.\n        constraints.append(\"H:|-15-[whiteView]-15-|\")\n        constraints.append(\"V:[greenView]-15-[whiteView(500)]-15-|\")\n        \n        for constraint in constraints {\n            self.contentView.addConstraints(NSLayoutConstraint.constraints(withVisualFormat: constraint, options: NSLayoutFormatOptions(rawValue: 0), metrics: nil, views: views as! [String : AnyObject]))\n        }\n        \n        greenView.translatesAutoresizingMaskIntoConstraints = false\n        whiteView.translatesAutoresizingMaskIntoConstraints = false\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550397856882,
        "id": "63d92618-8785-4bc0-827d-8ab643f1a69a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550397856882,
        "parent_id": "a2d8da68-fb27-4ab0-8bd7-5046c42f2b2a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Now we can see that the greenView (400 height) + the whiteView (500 height) is larger than our screen. This will cause the ScrollView’s contentSize to grow to fit BOTH views, allowing it to scroll vertically."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Now we can see that the greenView (400 height) + the whiteView (500 height) is larger than our screen. This will cause the ScrollView’s contentSize to grow to fit BOTH views, allowing it to scroll vertically."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550397856882,
        "id": "722bd860-b9a5-4f86-bc50-fd1b8287c642",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550397856882,
        "parent_id": "a2d8da68-fb27-4ab0-8bd7-5046c42f2b2a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We disabled horizontal scrolling using the "
            ],
            [
              "EqualWidth",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " constraint on the "
            ],
            [
              "contentView",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "self.view",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "We disabled horizontal scrolling using the "
          },
          {
            "Text": "EqualWidth",
            "AttrFlags": 2
          },
          {
            "Text": " constraint on the "
          },
          {
            "Text": "contentView",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "self.view",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550397856882,
        "id": "f07aba0f-bcb4-4c68-9640-ccd4ceaca7f1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550397856882,
        "parent_id": "a2d8da68-fb27-4ab0-8bd7-5046c42f2b2a",
        "parent_table": "block",
        "properties": {
          "source": [
            [
              "http://i.stack.imgur.com/a9kai.png"
            ]
          ]
        },
        "type": "image",
        "version": 1,
        "source": "http://i.stack.imgur.com/a9kai.png",
        "image_url": "https://www.notion.so/image/https:%2F%2Fwww.notion.sohttp:%2F%2Fi.stack.imgur.com%2Fa9kai.png"
      }
    ],
    "title": "ScrollableController",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}