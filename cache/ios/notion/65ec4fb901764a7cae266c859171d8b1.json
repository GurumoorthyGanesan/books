{
  "ID": "65ec4fb9-0176-4a7c-ae26-6c859171d8b1",
  "Root": {
    "alive": true,
    "content": [
      "abf0d56a-2fb7-413d-be29-de6cb18f73ec",
      "ce4beaad-04a6-4077-abc5-e390c2728ffd",
      "d5810250-2310-40cc-bf59-25ea1915eaa4",
      "74568217-933b-47a1-ab8e-56448a444de9",
      "733e6e09-d36c-4f96-9364-24fe0f69cfb0",
      "0a8b0769-e2db-4037-9ffc-d06deaf9cb35",
      "d4d47831-68b4-4b6e-825f-17cc1eb43860",
      "5dfd7417-014c-4b22-9e2d-d1038ba1acb8",
      "6953f098-2492-4f29-8c68-825f30a2aefa"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550397809927,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "65ec4fb9-0176-4a7c-ae26-6c859171d8b1",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550654280000,
    "parent_id": "7f229db5-64ee-45de-a6ab-0d61f675f6ff",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Dispatch Group"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550397809921,
        "id": "abf0d56a-2fb7-413d-be29-de6cb18f73ec",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550397809921,
        "parent_id": "65ec4fb9-0176-4a7c-ae26-6c859171d8b1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "DispatchGroup allows for aggregate synchronization of work. You can use them to submit multiple different work items and track when they all complete, even though they might run on different queues. This behavior can be helpful when progress can’t be made until all of the specified tasks are complete."
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "DispatchGroup allows for aggregate synchronization of work. You can use them to submit multiple different work items and track when they all complete, even though they might run on different queues. This behavior can be helpful when progress can’t be made until all of the specified tasks are complete."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550397809924,
        "id": "ce4beaad-04a6-4077-abc5-e390c2728ffd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550397809924,
        "parent_id": "65ec4fb9-0176-4a7c-ae26-6c859171d8b1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A Scenario when this could be useful is if you have multiple webservice calls that all need to finish before continuing. For example, you need to download multiple sets of data that needs to be processed by some function. You have to wait for all webservices to complete before calling the function to process all the received data."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A Scenario when this could be useful is if you have multiple webservice calls that all need to finish before continuing. For example, you need to download multiple sets of data that needs to be processed by some function. You have to wait for all webservices to complete before calling the function to process all the received data."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550397809924,
        "id": "d5810250-2310-40cc-bf59-25ea1915eaa4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550397809924,
        "parent_id": "65ec4fb9-0176-4a7c-ae26-6c859171d8b1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Swift 3",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Swift 3",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550397809925,
        "id": "74568217-933b-47a1-ab8e-56448a444de9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550397809925,
        "parent_id": "65ec4fb9-0176-4a7c-ae26-6c859171d8b1",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "func doLongTasksAndWait () {\n    print(\"starting long running tasks\")\n    let group = DispatchGroup()          //create a group for a bunch of tasks we are about to do\n    for i in 0...3 {                     //launch a bunch of tasks (eg a bunch of webservice calls that all need to be finished before proceeding to the next ViewController)\n        group.enter()                    //let the group know that something is being added\n        DispatchQueue.global().async {   //run tasks on a background thread\n            sleep(arc4random() % 4)      //do some long task eg webservice or database lookup (here we are just sleeping for a random amount of time for demonstration purposes)\n            print(\"long task \\(i) done!\")\n            group.leave()                //let group know that the task is finished\n        }\n    }\n    group.wait()                         //will block whatever thread we are on here until all the above tasks have finished (so maybe dont use this function on your main thread)\n    print(\"all tasks done!\")\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "func doLongTasksAndWait () {\n    print(\"starting long running tasks\")\n    let group = DispatchGroup()          //create a group for a bunch of tasks we are about to do\n    for i in 0...3 {                     //launch a bunch of tasks (eg a bunch of webservice calls that all need to be finished before proceeding to the next ViewController)\n        group.enter()                    //let the group know that something is being added\n        DispatchQueue.global().async {   //run tasks on a background thread\n            sleep(arc4random() % 4)      //do some long task eg webservice or database lookup (here we are just sleeping for a random amount of time for demonstration purposes)\n            print(\"long task \\(i) done!\")\n            group.leave()                //let group know that the task is finished\n        }\n    }\n    group.wait()                         //will block whatever thread we are on here until all the above tasks have finished (so maybe dont use this function on your main thread)\n    print(\"all tasks done!\")\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550397809925,
        "id": "733e6e09-d36c-4f96-9364-24fe0f69cfb0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550397809925,
        "parent_id": "65ec4fb9-0176-4a7c-ae26-6c859171d8b1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Alternatively, if you do not want to wait for the groups to finish, but instead want to run a function once all the tasks have completed, use the "
            ],
            [
              "notify",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " function in place of the "
            ],
            [
              "group.wait()",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Alternatively, if you do not want to wait for the groups to finish, but instead want to run a function once all the tasks have completed, use the "
          },
          {
            "Text": "notify",
            "AttrFlags": 2
          },
          {
            "Text": " function in place of the "
          },
          {
            "Text": "group.wait()",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550397809925,
        "id": "0a8b0769-e2db-4037-9ffc-d06deaf9cb35",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550397809925,
        "parent_id": "65ec4fb9-0176-4a7c-ae26-6c859171d8b1",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "group.notify(queue: DispatchQueue.main) { //the queue: parameter is which queue this block will run on, if you need to do UI updates, use the main queue\n    print(\"all tasks done!\")              //this will execute when all tasks have left the group\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "group.notify(queue: DispatchQueue.main) { //the queue: parameter is which queue this block will run on, if you need to do UI updates, use the main queue\n    print(\"all tasks done!\")              //this will execute when all tasks have left the group\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550397809925,
        "id": "d4d47831-68b4-4b6e-825f-17cc1eb43860",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550397809925,
        "parent_id": "65ec4fb9-0176-4a7c-ae26-6c859171d8b1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Example output:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Example output:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550397809925,
        "id": "5dfd7417-014c-4b22-9e2d-d1038ba1acb8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550397809925,
        "parent_id": "65ec4fb9-0176-4a7c-ae26-6c859171d8b1",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "starting long running tasks\nlong task 0 done!\nlong task 3 done!\nlong task 1 done!\nlong task 2 done!\nall tasks done!"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "starting long running tasks\nlong task 0 done!\nlong task 3 done!\nlong task 1 done!\nlong task 2 done!\nall tasks done!",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550397809927,
        "id": "6953f098-2492-4f29-8c68-825f30a2aefa",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550397809927,
        "parent_id": "65ec4fb9-0176-4a7c-ae26-6c859171d8b1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For more info, refer to the "
            ],
            [
              "Apple Docs",
              [
                [
                  "a",
                  "https://developer.apple.com/reference/dispatch/dispatchgroup"
                ]
              ]
            ],
            [
              " or the related "
            ],
            [
              "topic",
              [
                [
                  "a",
                  "https://stackoverflow.com/documentation/ios/4624/dispatchgroup#t=201702170254423773445"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For more info, refer to the "
          },
          {
            "Text": "Apple Docs",
            "Link": "https://developer.apple.com/reference/dispatch/dispatchgroup"
          },
          {
            "Text": " or the related "
          },
          {
            "Text": "topic",
            "Link": "https://stackoverflow.com/documentation/ios/4624/dispatchgroup#t=201702170254423773445"
          }
        ]
      }
    ],
    "title": "Dispatch Group",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}