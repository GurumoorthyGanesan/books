{
  "ID": "653e6ab9-2079-41d6-addf-cf08169e39e3",
  "Root": {
    "alive": true,
    "content": [
      "735c8369-681b-45ff-8aa8-b4abedff489d",
      "086c008b-9fd6-4a8e-9e9c-456d21321d93"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550441362830,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "653e6ab9-2079-41d6-addf-cf08169e39e3",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550712960000,
    "parent_id": "5aa71e1f-99a6-44cb-9027-513bb5538289",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Example Code"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550441362830,
        "id": "735c8369-681b-45ff-8aa8-b4abedff489d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550441362830,
        "parent_id": "653e6ab9-2079-41d6-addf-cf08169e39e3",
        "parent_table": "block",
        "properties": {
          "source": [
            [
              "https://i.stack.imgur.com/yShOK.png"
            ]
          ]
        },
        "type": "image",
        "version": 1,
        "source": "https://i.stack.imgur.com/yShOK.png",
        "image_url": "https://www.notion.so/image/https:%2F%2Fi.stack.imgur.com%2FyShOK.png"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550441362830,
        "id": "086c008b-9fd6-4a8e-9e9c-456d21321d93",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550441362830,
        "parent_id": "653e6ab9-2079-41d6-addf-cf08169e39e3",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// create the dictionary that will be sent to the blocks\nvar myDictionary:Dictionary\u003cString, Any\u003e = Dictionary\u003cString, Any\u003e()\nmyDictionary[\"InitialKey\"] = \"InitialValue\"\n\n// create block queue\nlet myBlockQueue:MKBlockQueue = MKBlockQueue()\n\n// block 1\nlet b1:MKBlockQueueBlockType =\n{\n    (blockQueueObserver:MKBlockQueueObserver, dictionary:inout Dictionary\u003cString, Any\u003e) in\n\n    print(\"Block 1 started with dictionary: \\(dictionary)\")\n    dictionary[\"Block1Key\"] = \"Block1Value\"\n\n    // tell this block is now completed\n    blockQueueObserver.blockCompleted(with:\u0026dictionary)\n\n}\n\n// block 2\nlet b2:MKBlockQueueBlockType =\n{\n    (blockQueueObserver:MKBlockQueueObserver, dictionary:inout Dictionary\u003cString, Any\u003e) in\n\n    var copyOfDictionary:Dictionary\u003cString, Any\u003e = dictionary\n\n    // test calling on main thread, async, with delay\n    DispatchQueue.main.asyncAfter(deadline:(.now() + .seconds(1)), execute:\n    {\n        print(\"Block 2 started with dictionary: \\(copyOfDictionary)\")\n\n        copyOfDictionary[\"Block2Key\"] = \"Block2Value\"\n\n        // tell this block is now completed\n        blockQueueObserver.blockCompleted(with:\u0026copyOfDictionary)\n    })\n}\n\n// block 3\nlet b3:MKBlockQueueBlockType =\n{\n    (blockQueueObserver:MKBlockQueueObserver, dictionary:inout Dictionary\u003cString, Any\u003e) in\n\n    var copyOfDictionary:Dictionary\u003cString, Any\u003e = dictionary\n\n    // test calling on global background queue, async, with delay\n    DispatchQueue.global(qos:.background).asyncAfter(deadline:(.now() + .seconds(1)), execute:\n    {\n        print(\"Block 3 started with dictionary: \\(copyOfDictionary)\")\n\n        copyOfDictionary[\"Block3Key\"] = \"Block3Value\"\n\n        // tell this block is now completed\n        blockQueueObserver.blockCompleted(with:\u0026copyOfDictionary)\n    })\n}\n\n// add blocks to the queue\nmyBlockQueue.addBlock(b1)\nmyBlockQueue.addBlock(b2)\nmyBlockQueue.addBlock(b3)\n\n// add queue completion block for the queue\nmyBlockQueue.queueCompletedBlock(\n{\n    (dictionary:Dictionary\u003cString, Any\u003e) in\n    print(\"Queue completed with dictionary: \\(dictionary)\")\n})\n\n// run queue\nprint(\"Queue starting with dictionary: \\(myDictionary)\")\nmyBlockQueue.run(with:\u0026myDictionary)"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// create the dictionary that will be sent to the blocks\nvar myDictionary:Dictionary\u003cString, Any\u003e = Dictionary\u003cString, Any\u003e()\nmyDictionary[\"InitialKey\"] = \"InitialValue\"\n\n// create block queue\nlet myBlockQueue:MKBlockQueue = MKBlockQueue()\n\n// block 1\nlet b1:MKBlockQueueBlockType =\n{\n    (blockQueueObserver:MKBlockQueueObserver, dictionary:inout Dictionary\u003cString, Any\u003e) in\n\n    print(\"Block 1 started with dictionary: \\(dictionary)\")\n    dictionary[\"Block1Key\"] = \"Block1Value\"\n\n    // tell this block is now completed\n    blockQueueObserver.blockCompleted(with:\u0026dictionary)\n\n}\n\n// block 2\nlet b2:MKBlockQueueBlockType =\n{\n    (blockQueueObserver:MKBlockQueueObserver, dictionary:inout Dictionary\u003cString, Any\u003e) in\n\n    var copyOfDictionary:Dictionary\u003cString, Any\u003e = dictionary\n\n    // test calling on main thread, async, with delay\n    DispatchQueue.main.asyncAfter(deadline:(.now() + .seconds(1)), execute:\n    {\n        print(\"Block 2 started with dictionary: \\(copyOfDictionary)\")\n\n        copyOfDictionary[\"Block2Key\"] = \"Block2Value\"\n\n        // tell this block is now completed\n        blockQueueObserver.blockCompleted(with:\u0026copyOfDictionary)\n    })\n}\n\n// block 3\nlet b3:MKBlockQueueBlockType =\n{\n    (blockQueueObserver:MKBlockQueueObserver, dictionary:inout Dictionary\u003cString, Any\u003e) in\n\n    var copyOfDictionary:Dictionary\u003cString, Any\u003e = dictionary\n\n    // test calling on global background queue, async, with delay\n    DispatchQueue.global(qos:.background).asyncAfter(deadline:(.now() + .seconds(1)), execute:\n    {\n        print(\"Block 3 started with dictionary: \\(copyOfDictionary)\")\n\n        copyOfDictionary[\"Block3Key\"] = \"Block3Value\"\n\n        // tell this block is now completed\n        blockQueueObserver.blockCompleted(with:\u0026copyOfDictionary)\n    })\n}\n\n// add blocks to the queue\nmyBlockQueue.addBlock(b1)\nmyBlockQueue.addBlock(b2)\nmyBlockQueue.addBlock(b3)\n\n// add queue completion block for the queue\nmyBlockQueue.queueCompletedBlock(\n{\n    (dictionary:Dictionary\u003cString, Any\u003e) in\n    print(\"Queue completed with dictionary: \\(dictionary)\")\n})\n\n// run queue\nprint(\"Queue starting with dictionary: \\(myDictionary)\")\nmyBlockQueue.run(with:\u0026myDictionary)",
        "code_language": "Plain Text"
      }
    ],
    "title": "Example Code",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}