{
  "ID": "8eb95c28-af12-40ec-aad3-ec1a714c09fb",
  "Root": {
    "alive": true,
    "content": [
      "6d39cf01-80d5-4b63-b053-3c062d3889cc",
      "f401911d-2f83-4c89-9a6f-23e3fbf2aee3"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550440842888,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "8eb95c28-af12-40ec-aad3-ec1a714c09fb",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550712420000,
    "parent_id": "e9b75dc1-aa91-4870-a97c-903b327e12bc",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "UIViewController scanning for QR and displaying video input"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550440842886,
        "id": "6d39cf01-80d5-4b63-b053-3c062d3889cc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550440842886,
        "parent_id": "8eb95c28-af12-40ec-aad3-ec1a714c09fb",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "import AVFoundation\nclass QRScannerViewController: UIViewController,\n     AVCaptureMetadataOutputObjectsDelegate {\n   \n    func viewDidLoad() {\n        self.initCaptureSession()\n    }\n    \n    private func initCaptureSession() {\n        let captureDevice = AVCaptureDevice\n            .defaultDevice(withMediaType: AVMediaTypeVideo)\n        do {\n            let input = try AVCaptureDeviceInput(device: captureDevice)\n            let captureMetadataOutput = AVCaptureMetadataOutput()\n            self.captureSession?.addOutput(captureMetadataOutput)\n            captureMetadataOutput.setMetadataObjectsDelegate(self,\n                 queue: DispatchQueue.main)\n            captureMetadataOutput\n                .metadataObjectTypes = [AVMetadataObjectTypeQRCode]\n            \n            self.videoPreviewLayer = \n                AVCaptureVideoPreviewLayer(session: self.captureSession)\n            self.videoPreviewLayer?\n                .videoGravity = AVLayerVideoGravityResizeAspectFill\n            self.videoPreviewLayer?.frame =    \n                self.view.layer.bounds\n\n            self._viewController?.view.layer\n                .addSublayer(videoPreviewLayer!)\n            self.captureSession?.startRunning()\n        } catch {\n            //TODO: handle input open error\n        }\n    }\n    private func dismissCaptureSession() {\n        if let running = self.captureSession?.isRunning, running {\n            self.captureSession?.stopRunning()\n        }\n        self.captureSession = nil\n        self.videoPreviewLayer?.removeFromSuperLayer()\n        self.videoPreviewLayer = nil\n    }\n    \n    func captureOutput(_ captureOutput: AVCaptureOutput, \n        didOutputMetadataObjects metadataObjects: [Any]!, \n        from connection: AVCaptureConnection) {\n        guard metadataObjects != nil \u0026\u0026 metadataObjects.count != 0 else {\n            //Nothing captured\n            return\n        }\n\n        if let metadataObj = \n            metadataObjects[0] as? AVMetadataMachineReadableCodeObject {\n            guard metadataObj.type == AVMetadataObjectTypeQRCode else {\n                return\n            }\n\n            let barCodeObject = videoPreviewLayer?\n                .transformedMetadataObject(for: \n                    metadataObj as AVMetadataMachineReadableCodeObject)\n                 as! AVMetadataMachineReadableCodeObject\n        \n            if let qrValue = metadataObj.stringValue {\n                self.handleQRRead(value: qrValue)\n            }\n        }\n    }\n\n    private handleQRRead(value: String) {\n        //TODO: Handle the read qr\n    }\n    private captureSession: AVCaptureSession?\n    private videoPreviewLayer: AVCaptureVideo\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "import AVFoundation\nclass QRScannerViewController: UIViewController,\n     AVCaptureMetadataOutputObjectsDelegate {\n   \n    func viewDidLoad() {\n        self.initCaptureSession()\n    }\n    \n    private func initCaptureSession() {\n        let captureDevice = AVCaptureDevice\n            .defaultDevice(withMediaType: AVMediaTypeVideo)\n        do {\n            let input = try AVCaptureDeviceInput(device: captureDevice)\n            let captureMetadataOutput = AVCaptureMetadataOutput()\n            self.captureSession?.addOutput(captureMetadataOutput)\n            captureMetadataOutput.setMetadataObjectsDelegate(self,\n                 queue: DispatchQueue.main)\n            captureMetadataOutput\n                .metadataObjectTypes = [AVMetadataObjectTypeQRCode]\n            \n            self.videoPreviewLayer = \n                AVCaptureVideoPreviewLayer(session: self.captureSession)\n            self.videoPreviewLayer?\n                .videoGravity = AVLayerVideoGravityResizeAspectFill\n            self.videoPreviewLayer?.frame =    \n                self.view.layer.bounds\n\n            self._viewController?.view.layer\n                .addSublayer(videoPreviewLayer!)\n            self.captureSession?.startRunning()\n        } catch {\n            //TODO: handle input open error\n        }\n    }\n    private func dismissCaptureSession() {\n        if let running = self.captureSession?.isRunning, running {\n            self.captureSession?.stopRunning()\n        }\n        self.captureSession = nil\n        self.videoPreviewLayer?.removeFromSuperLayer()\n        self.videoPreviewLayer = nil\n    }\n    \n    func captureOutput(_ captureOutput: AVCaptureOutput, \n        didOutputMetadataObjects metadataObjects: [Any]!, \n        from connection: AVCaptureConnection) {\n        guard metadataObjects != nil \u0026\u0026 metadataObjects.count != 0 else {\n            //Nothing captured\n            return\n        }\n\n        if let metadataObj = \n            metadataObjects[0] as? AVMetadataMachineReadableCodeObject {\n            guard metadataObj.type == AVMetadataObjectTypeQRCode else {\n                return\n            }\n\n            let barCodeObject = videoPreviewLayer?\n                .transformedMetadataObject(for: \n                    metadataObj as AVMetadataMachineReadableCodeObject)\n                 as! AVMetadataMachineReadableCodeObject\n        \n            if let qrValue = metadataObj.stringValue {\n                self.handleQRRead(value: qrValue)\n            }\n        }\n    }\n\n    private handleQRRead(value: String) {\n        //TODO: Handle the read qr\n    }\n    private captureSession: AVCaptureSession?\n    private videoPreviewLayer: AVCaptureVideo\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550440842888,
        "id": "f401911d-2f83-4c89-9a6f-23e3fbf2aee3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550440842888,
        "parent_id": "8eb95c28-af12-40ec-aad3-ec1a714c09fb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "handleQRRead",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " - will be called on a successful scan "
            ],
            [
              "initCaptureSession",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " - initialize scanning for QR and camera input "
            ],
            [
              "dismissCaptureSession",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " - hide the camera input and stop scanning"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "handleQRRead",
            "AttrFlags": 2
          },
          {
            "Text": " - will be called on a successful scan "
          },
          {
            "Text": "initCaptureSession",
            "AttrFlags": 2
          },
          {
            "Text": " - initialize scanning for QR and camera input "
          },
          {
            "Text": "dismissCaptureSession",
            "AttrFlags": 2
          },
          {
            "Text": " - hide the camera input and stop scanning"
          }
        ]
      }
    ],
    "title": "UIViewController scanning for QR and displaying video input",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}