{
  "ID": "9d4170d8-d47b-4afd-8624-9b82c5107f71",
  "Root": {
    "alive": true,
    "content": [
      "13cfd7e3-6ec6-4425-965b-782532d8943a",
      "71eb1a1d-876d-4810-b61b-740eb9457a55",
      "8d5b8443-6912-4be8-95a9-cf5617b0f24b",
      "24be4b6b-bf2a-4e14-b439-fb9f6bc6e587"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550439620916,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "9d4170d8-d47b-4afd-8624-9b82c5107f71",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550711700000,
    "parent_id": "8b055c18-65b8-44bd-93de-3f6853c8e88d",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Keychain Add Update Remove and Find operations using one file."
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550439620913,
        "id": "13cfd7e3-6ec6-4425-965b-782532d8943a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550439620913,
        "parent_id": "9d4170d8-d47b-4afd-8624-9b82c5107f71",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Keychain.h",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Keychain.h",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550439620916,
        "id": "71eb1a1d-876d-4810-b61b-740eb9457a55",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550439620916,
        "parent_id": "9d4170d8-d47b-4afd-8624-9b82c5107f71",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#import \u003cFoundation/Foundation.h\u003e\ntypedef void (^KeychainOperationBlock)(BOOL successfulOperation, NSData *data, OSStatus status);\n\n@interface Keychain : NSObject\n\n-(id) initWithService:(NSString *) service_ withGroup:(NSString*)group_;\n\n-(void)insertKey:(NSString *)key withData:(NSData *)data withCompletion:(KeychainOperationBlock)completionBlock;\n-(void)updateKey:(NSString*)key withData:(NSData*) data withCompletion:(KeychainOperationBlock)completionBlock;\n-(void)removeDataForKey:(NSString*)key withCompletionBlock:(KeychainOperationBlock)completionBlock;\n-(void)findDataForKey:(NSString*)key withCompletionBlock:(KeychainOperationBlock)completionBlock;\n\n@end"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#import \u003cFoundation/Foundation.h\u003e\ntypedef void (^KeychainOperationBlock)(BOOL successfulOperation, NSData *data, OSStatus status);\n\n@interface Keychain : NSObject\n\n-(id) initWithService:(NSString *) service_ withGroup:(NSString*)group_;\n\n-(void)insertKey:(NSString *)key withData:(NSData *)data withCompletion:(KeychainOperationBlock)completionBlock;\n-(void)updateKey:(NSString*)key withData:(NSData*) data withCompletion:(KeychainOperationBlock)completionBlock;\n-(void)removeDataForKey:(NSString*)key withCompletionBlock:(KeychainOperationBlock)completionBlock;\n-(void)findDataForKey:(NSString*)key withCompletionBlock:(KeychainOperationBlock)completionBlock;\n\n@end",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550439620916,
        "id": "8d5b8443-6912-4be8-95a9-cf5617b0f24b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550439620916,
        "parent_id": "9d4170d8-d47b-4afd-8624-9b82c5107f71",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Keychain.m"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Keychain.m"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550439620916,
        "id": "24be4b6b-bf2a-4e14-b439-fb9f6bc6e587",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550439620916,
        "parent_id": "9d4170d8-d47b-4afd-8624-9b82c5107f71",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#import \"Keychain.h\"\n#import \u003cSecurity/Security.h\u003e\n\n@implementation Keychain\n\n{\n   NSString * keychainService;\n   NSString * keychainGroup;\n}\n\n-(id) initWithService:(NSString *)service withGroup:(NSString*)group\n{\n   self =[super init];\n   if(self) {\n       keychainService = [NSString stringWithString:service];\n       if(group) {\n           keychainGroup = [NSString stringWithString:group];\n       }\n   }\n   \n   return  self;\n}\n\n-(void)insertKey:(NSString *)key\n       withData:(NSData *)data\n withCompletion:(KeychainOperationBlock)completionBlock\n{\n   NSMutableDictionary * dict =[self prepareDict:key];\n   [dict setObject:data forKey:(__bridge id)kSecValueData];\n   [dict setObject:keychainService forKey:(id)kSecAttrService];\n   \n   OSStatus status = SecItemAdd((__bridge CFDictionaryRef)dict, NULL);\n   if(errSecSuccess != status) {\n       DLog(@\"Unable add item with key =%@ error:%d\",key,(int)status);\n       if (completionBlock) {\n           completionBlock(errSecSuccess == status, nil, status);\n       }\n   }\n   if (status == errSecDuplicateItem) {\n       [self updateKey:key withData:data withCompletion:^(BOOL successfulOperation, NSData *updateData, OSStatus updateStatus) {\n           if (completionBlock) {\n               completionBlock(successfulOperation, updateData, updateStatus);\n           }\n           DLog(@\"Found duplication item -- updating key with data\");\n       }];\n   }\n}\n\n-(void)findDataForKey:(NSString *)key\n withCompletionBlock:(KeychainOperationBlock)completionBlock\n{\n   NSMutableDictionary *dict = [self prepareDict:key];\n   [dict setObject:(__bridge id)kSecMatchLimitOne forKey:(__bridge id)kSecMatchLimit];\n   [dict setObject:keychainService forKey:(id)kSecAttrService];\n   [dict setObject:(id)kCFBooleanTrue forKey:(__bridge id)kSecReturnData];\n   CFTypeRef result = NULL;\n   OSStatus status = SecItemCopyMatching((__bridge CFDictionaryRef)dict,\u0026result);\n   \n   if( status != errSecSuccess) {\n       DLog(@\"Unable to fetch item for key %@ with error:%d\",key,(int)status);\n       if (completionBlock) {\n           completionBlock(errSecSuccess == status, nil, status);\n       }\n   } else {\n       if (completionBlock) {\n           completionBlock(errSecSuccess == status, (__bridge NSData *)result, status);\n       }\n   }\n}\n\n-(void)updateKey:(NSString *)key\n       withData:(NSData *)data\n withCompletion:(KeychainOperationBlock)completionBlock\n{\n   NSMutableDictionary * dictKey =[self prepareDict:key];\n   \n   NSMutableDictionary * dictUpdate =[[NSMutableDictionary alloc] init];\n   [dictUpdate setObject:data forKey:(__bridge id)kSecValueData];\n   [dictUpdate setObject:keychainService forKey:(id)kSecAttrService];\n   OSStatus status = SecItemUpdate((__bridge CFDictionaryRef)dictKey, (__bridge CFDictionaryRef)dictUpdate);\n   if( status != errSecSuccess) {\n       DLog(@\"Unable to remove item for key %@ with error:%d\",key,(int)status);\n   }\n   if (completionBlock) {\n       completionBlock(errSecSuccess == status, nil, status);\n   }\n}\n\n-(void)removeDataForKey:(NSString *)key\n   withCompletionBlock:(KeychainOperationBlock)completionBlock {\n   NSMutableDictionary *dict = [self prepareDict:key];\n   OSStatus status = SecItemDelete((__bridge CFDictionaryRef)dict);\n   if( status != errSecSuccess) {\n       DLog(@\"Unable to remove item for key %@ with error:%d\",key,(int)status);\n   }\n   if (completionBlock) {\n       completionBlock(errSecSuccess == status, nil, status);\n   }\n}\n\n#pragma mark Internal methods\n\n-(NSMutableDictionary*) prepareDict:(NSString *) key {\n   \n   NSMutableDictionary *dict = [[NSMutableDictionary alloc] init];\n   [dict setObject:(__bridge id)kSecClassGenericPassword forKey:(__bridge id)kSecClass];\n   \n   NSData *encodedKey = [key dataUsingEncoding:NSUTF8StringEncoding];\n   [dict setObject:encodedKey forKey:(__bridge id)kSecAttrGeneric];\n   [dict setObject:encodedKey forKey:(__bridge id)kSecAttrAccount];\n   [dict setObject:keychainService forKey:(__bridge id)kSecAttrService];\n   [dict setObject:(__bridge id)kSecAttrAccessibleAlwaysThisDeviceOnly forKey:(__bridge id)kSecAttrAccessible];\n   \n   //This is for sharing data across apps\n   if(keychainGroup != nil) {\n       [dict setObject:keychainGroup forKey:(__bridge id)kSecAttrAccessGroup];\n   }\n   \n   return  dict;\n}\n\n@end"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#import \"Keychain.h\"\n#import \u003cSecurity/Security.h\u003e\n\n@implementation Keychain\n\n{\n   NSString * keychainService;\n   NSString * keychainGroup;\n}\n\n-(id) initWithService:(NSString *)service withGroup:(NSString*)group\n{\n   self =[super init];\n   if(self) {\n       keychainService = [NSString stringWithString:service];\n       if(group) {\n           keychainGroup = [NSString stringWithString:group];\n       }\n   }\n   \n   return  self;\n}\n\n-(void)insertKey:(NSString *)key\n       withData:(NSData *)data\n withCompletion:(KeychainOperationBlock)completionBlock\n{\n   NSMutableDictionary * dict =[self prepareDict:key];\n   [dict setObject:data forKey:(__bridge id)kSecValueData];\n   [dict setObject:keychainService forKey:(id)kSecAttrService];\n   \n   OSStatus status = SecItemAdd((__bridge CFDictionaryRef)dict, NULL);\n   if(errSecSuccess != status) {\n       DLog(@\"Unable add item with key =%@ error:%d\",key,(int)status);\n       if (completionBlock) {\n           completionBlock(errSecSuccess == status, nil, status);\n       }\n   }\n   if (status == errSecDuplicateItem) {\n       [self updateKey:key withData:data withCompletion:^(BOOL successfulOperation, NSData *updateData, OSStatus updateStatus) {\n           if (completionBlock) {\n               completionBlock(successfulOperation, updateData, updateStatus);\n           }\n           DLog(@\"Found duplication item -- updating key with data\");\n       }];\n   }\n}\n\n-(void)findDataForKey:(NSString *)key\n withCompletionBlock:(KeychainOperationBlock)completionBlock\n{\n   NSMutableDictionary *dict = [self prepareDict:key];\n   [dict setObject:(__bridge id)kSecMatchLimitOne forKey:(__bridge id)kSecMatchLimit];\n   [dict setObject:keychainService forKey:(id)kSecAttrService];\n   [dict setObject:(id)kCFBooleanTrue forKey:(__bridge id)kSecReturnData];\n   CFTypeRef result = NULL;\n   OSStatus status = SecItemCopyMatching((__bridge CFDictionaryRef)dict,\u0026result);\n   \n   if( status != errSecSuccess) {\n       DLog(@\"Unable to fetch item for key %@ with error:%d\",key,(int)status);\n       if (completionBlock) {\n           completionBlock(errSecSuccess == status, nil, status);\n       }\n   } else {\n       if (completionBlock) {\n           completionBlock(errSecSuccess == status, (__bridge NSData *)result, status);\n       }\n   }\n}\n\n-(void)updateKey:(NSString *)key\n       withData:(NSData *)data\n withCompletion:(KeychainOperationBlock)completionBlock\n{\n   NSMutableDictionary * dictKey =[self prepareDict:key];\n   \n   NSMutableDictionary * dictUpdate =[[NSMutableDictionary alloc] init];\n   [dictUpdate setObject:data forKey:(__bridge id)kSecValueData];\n   [dictUpdate setObject:keychainService forKey:(id)kSecAttrService];\n   OSStatus status = SecItemUpdate((__bridge CFDictionaryRef)dictKey, (__bridge CFDictionaryRef)dictUpdate);\n   if( status != errSecSuccess) {\n       DLog(@\"Unable to remove item for key %@ with error:%d\",key,(int)status);\n   }\n   if (completionBlock) {\n       completionBlock(errSecSuccess == status, nil, status);\n   }\n}\n\n-(void)removeDataForKey:(NSString *)key\n   withCompletionBlock:(KeychainOperationBlock)completionBlock {\n   NSMutableDictionary *dict = [self prepareDict:key];\n   OSStatus status = SecItemDelete((__bridge CFDictionaryRef)dict);\n   if( status != errSecSuccess) {\n       DLog(@\"Unable to remove item for key %@ with error:%d\",key,(int)status);\n   }\n   if (completionBlock) {\n       completionBlock(errSecSuccess == status, nil, status);\n   }\n}\n\n#pragma mark Internal methods\n\n-(NSMutableDictionary*) prepareDict:(NSString *) key {\n   \n   NSMutableDictionary *dict = [[NSMutableDictionary alloc] init];\n   [dict setObject:(__bridge id)kSecClassGenericPassword forKey:(__bridge id)kSecClass];\n   \n   NSData *encodedKey = [key dataUsingEncoding:NSUTF8StringEncoding];\n   [dict setObject:encodedKey forKey:(__bridge id)kSecAttrGeneric];\n   [dict setObject:encodedKey forKey:(__bridge id)kSecAttrAccount];\n   [dict setObject:keychainService forKey:(__bridge id)kSecAttrService];\n   [dict setObject:(__bridge id)kSecAttrAccessibleAlwaysThisDeviceOnly forKey:(__bridge id)kSecAttrAccessible];\n   \n   //This is for sharing data across apps\n   if(keychainGroup != nil) {\n       [dict setObject:keychainGroup forKey:(__bridge id)kSecAttrAccessGroup];\n   }\n   \n   return  dict;\n}\n\n@end",
        "code_language": "Plain Text"
      }
    ],
    "title": "Keychain Add Update Remove and Find operations using one file.",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}