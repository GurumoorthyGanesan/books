{
  "ID": "932eae0d-4cde-4c0d-9744-365105e27ec7",
  "Root": {
    "alive": true,
    "content": [
      "90fead91-3646-4eb1-be75-066d745b32e9",
      "5f77207e-f0b4-487e-8ff7-a48fe5f9f018",
      "36a66b81-4ca4-4d5f-9726-26ff628843f0",
      "b3aeef8d-3ae4-4d59-826c-edc86e0bda2b",
      "1ad75987-e635-4491-be39-98edc5ff7bde",
      "abc146dc-be87-490e-b910-8aa034bfe733",
      "ed5c8059-2bb9-4953-aa58-bb8fc64e43dc",
      "515828dd-23ad-43e0-941e-2bcee9692a60",
      "6eae7f66-566a-4165-81f4-f579cfbd03dd",
      "065e80ab-c245-4ed4-b588-e25d5d76fd7e",
      "c5c1f9bc-6f05-4baf-b396-60bdb3a3eaf7",
      "6b751121-f760-4e38-8723-3223cbe30867"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550441709378,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "932eae0d-4cde-4c0d-9744-365105e27ec7",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550713320000,
    "parent_id": "468b0602-725a-4cb6-810e-ca88f35bd501",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "UIKit Dynamics"
        ]
      ]
    },
    "type": "page",
    "version": 9,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550441709373,
        "id": "90fead91-3646-4eb1-be75-066d745b32e9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550441709373,
        "parent_id": "932eae0d-4cde-4c0d-9744-365105e27ec7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Introduction"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Introduction"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550441709376,
        "id": "5f77207e-f0b4-487e-8ff7-a48fe5f9f018",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550441709376,
        "parent_id": "932eae0d-4cde-4c0d-9744-365105e27ec7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "UIKit Dynamics is a full real-world physics engine integrated into UIKit. It allows you to create interfaces that feel real by adding behaviors such as gravity, attachments, collision and forces. You define the physical traits that you would like your interface elements to adopt, and the dynamics engine takes care of the rest."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "UIKit Dynamics is a full real-world physics engine integrated into UIKit. It allows you to create interfaces that feel real by adding behaviors such as gravity, attachments, collision and forces. You define the physical traits that you would like your interface elements to adopt, and the dynamics engine takes care of the rest."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550441709377,
        "id": "36a66b81-4ca4-4d5f-9726-26ff628843f0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550441709377,
        "parent_id": "932eae0d-4cde-4c0d-9744-365105e27ec7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Remarks"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Remarks"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550441709377,
        "id": "b3aeef8d-3ae4-4d59-826c-edc86e0bda2b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550441709377,
        "parent_id": "932eae0d-4cde-4c0d-9744-365105e27ec7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "An import thing to keep in mind when using UIKit Dynamics is views that are positioned by the animator cannot readily be positioned by other common iOS layout methods."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "An import thing to keep in mind when using UIKit Dynamics is views that are positioned by the animator cannot readily be positioned by other common iOS layout methods."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550441709377,
        "id": "1ad75987-e635-4491-be39-98edc5ff7bde",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550441709377,
        "parent_id": "932eae0d-4cde-4c0d-9744-365105e27ec7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Newcomers to UIKit Dynamics often struggle with this important caveat. Placing constraints on a view that is also an item of a "
            ],
            [
              "UIDynamicBehavior",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will likely cause confusion as a both the auto layout engine and the dynamic animator engine fight over the appropriate position. Similarly, attempting to set the frame directly of a view being controlled by the animator will typically result in jittery animation and unexpected placement. Adding a view as an item to a "
            ],
            [
              "UIDynamicBehavior",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " means that the animator will take on the responsibility of positioning a view and as such changes of view positions should be implemented through the animator."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Newcomers to UIKit Dynamics often struggle with this important caveat. Placing constraints on a view that is also an item of a "
          },
          {
            "Text": "UIDynamicBehavior",
            "AttrFlags": 2
          },
          {
            "Text": " will likely cause confusion as a both the auto layout engine and the dynamic animator engine fight over the appropriate position. Similarly, attempting to set the frame directly of a view being controlled by the animator will typically result in jittery animation and unexpected placement. Adding a view as an item to a "
          },
          {
            "Text": "UIDynamicBehavior",
            "AttrFlags": 2
          },
          {
            "Text": " means that the animator will take on the responsibility of positioning a view and as such changes of view positions should be implemented through the animator."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550441709377,
        "id": "abc146dc-be87-490e-b910-8aa034bfe733",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550441709377,
        "parent_id": "932eae0d-4cde-4c0d-9744-365105e27ec7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A view’s frame that is being updated by a dynamic animator can be set, but that should be immediately followed by messaging the animator to update the animator’s internal model of the view hierarchy. For example, if I have "
            ],
            [
              "UILabel",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "label",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " that is an item of a "
            ],
            [
              "UIGravityBehavior",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " I can move it to the top of the screen to watch it fall again by saying:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A view’s frame that is being updated by a dynamic animator can be set, but that should be immediately followed by messaging the animator to update the animator’s internal model of the view hierarchy. For example, if I have "
          },
          {
            "Text": "UILabel",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "label",
            "AttrFlags": 2
          },
          {
            "Text": " that is an item of a "
          },
          {
            "Text": "UIGravityBehavior",
            "AttrFlags": 2
          },
          {
            "Text": " I can move it to the top of the screen to watch it fall again by saying:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550441709377,
        "id": "ed5c8059-2bb9-4953-aa58-bb8fc64e43dc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550441709377,
        "parent_id": "932eae0d-4cde-4c0d-9744-365105e27ec7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Swift"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Swift"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550441709378,
        "id": "515828dd-23ad-43e0-941e-2bcee9692a60",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550441709378,
        "parent_id": "932eae0d-4cde-4c0d-9744-365105e27ec7",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "label.frame = CGRect(x: 0.0, y: 0.0, width: label.intrinsicContentSize.width, height: label.intrinsicContentSize.height)\ndynamicAnimator.updateItem(usingCurrentState: label)"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "label.frame = CGRect(x: 0.0, y: 0.0, width: label.intrinsicContentSize.width, height: label.intrinsicContentSize.height)\ndynamicAnimator.updateItem(usingCurrentState: label)",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550441709378,
        "id": "6eae7f66-566a-4165-81f4-f579cfbd03dd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550441709378,
        "parent_id": "932eae0d-4cde-4c0d-9744-365105e27ec7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Objective-C"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Objective-C"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550441709378,
        "id": "065e80ab-c245-4ed4-b588-e25d5d76fd7e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550441709378,
        "parent_id": "932eae0d-4cde-4c0d-9744-365105e27ec7",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "self.label.frame = CGRectMake(0.0, 0.0, self.label.intrinsicContentSize.width, self.label.intrinsicContentSize.height);\n[self.dynamicAnimator updateItemUsingCurrentState: self.label];"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "self.label.frame = CGRectMake(0.0, 0.0, self.label.intrinsicContentSize.width, self.label.intrinsicContentSize.height);\n[self.dynamicAnimator updateItemUsingCurrentState: self.label];",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550441709378,
        "id": "c5c1f9bc-6f05-4baf-b396-60bdb3a3eaf7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550441709378,
        "parent_id": "932eae0d-4cde-4c0d-9744-365105e27ec7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "After which the animator will apply the gravity behavior from the label’s new location."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "After which the animator will apply the gravity behavior from the label’s new location."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550441709378,
        "id": "6b751121-f760-4e38-8723-3223cbe30867",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550441709378,
        "parent_id": "932eae0d-4cde-4c0d-9744-365105e27ec7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Another common technique is to use "
            ],
            [
              "UIDynamicBehaviors",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to position views. For example if positioning a view under a touch event is desired, creating a "
            ],
            [
              "UIAttachmentBehavior",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and updating its "
            ],
            [
              "anchorPoint",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in either "
            ],
            [
              "touchesMoved",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or a "
            ],
            [
              "UIGestureRecognizer",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "’s action is an effective strategy."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Another common technique is to use "
          },
          {
            "Text": "UIDynamicBehaviors",
            "AttrFlags": 2
          },
          {
            "Text": " to position views. For example if positioning a view under a touch event is desired, creating a "
          },
          {
            "Text": "UIAttachmentBehavior",
            "AttrFlags": 2
          },
          {
            "Text": " and updating its "
          },
          {
            "Text": "anchorPoint",
            "AttrFlags": 2
          },
          {
            "Text": " in either "
          },
          {
            "Text": "touchesMoved",
            "AttrFlags": 2
          },
          {
            "Text": " or a "
          },
          {
            "Text": "UIGestureRecognizer",
            "AttrFlags": 2
          },
          {
            "Text": "’s action is an effective strategy."
          }
        ]
      }
    ],
    "title": "UIKit Dynamics",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}