{
  "ID": "f59166d3-9483-411d-95d7-f212484a7b5a",
  "Root": {
    "alive": true,
    "content": [
      "c27357ba-7f68-424a-8499-992033c04d62",
      "73e13351-2a25-4de6-b1f0-05445bd83e42",
      "bc81c646-9133-46ec-8139-81de9822363d",
      "5732bfeb-1a34-4b05-a1f7-d670aa7a3231",
      "490b81c0-54bd-42d7-a6eb-4b720e23820f",
      "d92e4cc2-62c7-4550-9a8e-19560195f1ad",
      "cffadd10-a1ea-46cf-a90d-d3380077ec5b",
      "77e71e95-85e1-45fa-9264-70826114d70e",
      "a8dee517-1b6e-4fb4-8213-7f4ced92daf2",
      "b6e8dc3e-0bb4-4811-9264-d422165ef23d",
      "7c66b2af-e160-4c9a-acc5-d79e1a935cf4",
      "62223706-a572-430b-b3f0-e128667b0f84"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550442375332,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "f59166d3-9483-411d-95d7-f212484a7b5a",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550713680000,
    "parent_id": "380fc5fa-f930-4b28-8a76-819026b24346",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "020Transport Security using SSL"
        ]
      ]
    },
    "type": "page",
    "version": 5,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550442375328,
        "id": "c27357ba-7f68-424a-8499-992033c04d62",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550442375328,
        "parent_id": "f59166d3-9483-411d-95d7-f212484a7b5a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "iOS apps needs to be written in a way to provide security to data which is being transported over network."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "iOS apps needs to be written in a way to provide security to data which is being transported over network."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550442375331,
        "id": "73e13351-2a25-4de6-b1f0-05445bd83e42",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550442375331,
        "parent_id": "f59166d3-9483-411d-95d7-f212484a7b5a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "SSL is the common way to do it."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "SSL is the common way to do it."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550442375331,
        "id": "bc81c646-9133-46ec-8139-81de9822363d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550442375331,
        "parent_id": "f59166d3-9483-411d-95d7-f212484a7b5a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Whenever app tries to call web services to pull or push data to servers, it should "
            ],
            [
              "use SSL over HTTP, i.e. HTTPS",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Whenever app tries to call web services to pull or push data to servers, it should "
          },
          {
            "Text": "use SSL over HTTP, i.e. HTTPS",
            "AttrFlags": 1
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550442375331,
        "id": "5732bfeb-1a34-4b05-a1f7-d670aa7a3231",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550442375331,
        "parent_id": "f59166d3-9483-411d-95d7-f212484a7b5a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To do this, "
            ],
            [
              "app must call ",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "https://server.com/part",
              [
                [
                  "b"
                ],
                [
                  "c"
                ]
              ]
            ],
            [
              " such web services and not "
            ],
            [
              "http://server.com/part",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To do this, "
          },
          {
            "Text": "app must call ",
            "AttrFlags": 1
          },
          {
            "Text": "https://server.com/part",
            "AttrFlags": 3
          },
          {
            "Text": " such web services and not "
          },
          {
            "Text": "http://server.com/part",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550442375331,
        "id": "490b81c0-54bd-42d7-a6eb-4b720e23820f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550442375331,
        "parent_id": "f59166d3-9483-411d-95d7-f212484a7b5a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In this case, app needs to trust the server "
            ],
            [
              "server.com",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " using SSL certificate."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In this case, app needs to trust the server "
          },
          {
            "Text": "server.com",
            "AttrFlags": 2
          },
          {
            "Text": " using SSL certificate."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550442375331,
        "id": "d92e4cc2-62c7-4550-9a8e-19560195f1ad",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550442375331,
        "parent_id": "f59166d3-9483-411d-95d7-f212484a7b5a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Here is the example of validating server trust-"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Here is the example of validating server trust-"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550442375331,
        "id": "cffadd10-a1ea-46cf-a90d-d3380077ec5b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550442375331,
        "parent_id": "f59166d3-9483-411d-95d7-f212484a7b5a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Implement "
            ],
            [
              "URLSessionDelegate",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " as:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Implement "
          },
          {
            "Text": "URLSessionDelegate",
            "AttrFlags": 2
          },
          {
            "Text": " as:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550442375331,
        "id": "77e71e95-85e1-45fa-9264-70826114d70e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550713680000,
        "parent_id": "f59166d3-9483-411d-95d7-f212484a7b5a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Swift"
            ]
          ],
          "title": [
            [
              "func urlSession(_ session: URLSession, didReceive challenge: URLAuthenticationChallenge, completionHandler: @escaping (URLSession.AuthChallengeDisposition, URLCredential?) -\u003e Void) {\n    \n    if challenge.protectionSpace.authenticationMethod == NSURLAuthenticationMethodServerTrust {\n        let serverTrust:SecTrust = challenge.protectionSpace.serverTrust!\n\n        func acceptServerTrust() {\n            let credential:URLCredential = URLCredential(trust: serverTrust)\n            challenge.sender?.use(credential, for: challenge)\n            completionHandler(.useCredential, URLCredential(trust: challenge.protectionSpace.serverTrust!))\n        }\n        \n        let success = SSLTrustManager.shouldTrustServerTrust(serverTrust, forCert: \"Server_Public_SSL_Cert\")\n        if success {\n            acceptServerTrust()\n            return\n        }\n    }\n    else if challenge.protectionSpace.authenticationMethod == NSURLAuthenticationMethodClientCertificate {\n        completionHandler(.rejectProtectionSpace, nil);\n        return\n    }\n    completionHandler(.cancelAuthenticationChallenge, nil)\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "func urlSession(_ session: URLSession, didReceive challenge: URLAuthenticationChallenge, completionHandler: @escaping (URLSession.AuthChallengeDisposition, URLCredential?) -\u003e Void) {\n    \n    if challenge.protectionSpace.authenticationMethod == NSURLAuthenticationMethodServerTrust {\n        let serverTrust:SecTrust = challenge.protectionSpace.serverTrust!\n\n        func acceptServerTrust() {\n            let credential:URLCredential = URLCredential(trust: serverTrust)\n            challenge.sender?.use(credential, for: challenge)\n            completionHandler(.useCredential, URLCredential(trust: challenge.protectionSpace.serverTrust!))\n        }\n        \n        let success = SSLTrustManager.shouldTrustServerTrust(serverTrust, forCert: \"Server_Public_SSL_Cert\")\n        if success {\n            acceptServerTrust()\n            return\n        }\n    }\n    else if challenge.protectionSpace.authenticationMethod == NSURLAuthenticationMethodClientCertificate {\n        completionHandler(.rejectProtectionSpace, nil);\n        return\n    }\n    completionHandler(.cancelAuthenticationChallenge, nil)\n}",
        "code_language": "Swift"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550442375332,
        "id": "a8dee517-1b6e-4fb4-8213-7f4ced92daf2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550442375332,
        "parent_id": "f59166d3-9483-411d-95d7-f212484a7b5a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Here is trust manager: (couldn’t found Swift code)"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Here is trust manager: (couldn’t found Swift code)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550442375332,
        "id": "b6e8dc3e-0bb4-4811-9264-d422165ef23d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550442375332,
        "parent_id": "f59166d3-9483-411d-95d7-f212484a7b5a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "@implementation SSLTrustManager\n+ (BOOL)shouldTrustServerTrust:(SecTrustRef)serverTrust forCert:(NSString*)certName {\n// Load up the bundled certificate.\nNSString *certPath = [[NSBundle mainBundle] pathForResource:certName ofType:@\"der\"];\nNSData *certData = [[NSData alloc] initWithContentsOfFile:certPath];\nCFDataRef certDataRef = (__bridge_retained CFDataRef)certData;\nSecCertificateRef cert = SecCertificateCreateWithData(NULL, certDataRef);\n\n// Establish a chain of trust anchored on our bundled certificate.\nCFArrayRef certArrayRef = CFArrayCreate(NULL, (void *)\u0026cert, 1, NULL);\nSecTrustSetAnchorCertificates(serverTrust, certArrayRef);\n\n// Verify that trust.\nSecTrustResultType trustResult;\nSecTrustEvaluate(serverTrust, \u0026trustResult);\n\n// Clean up.\nCFRelease(certArrayRef);\nCFRelease(cert);\nCFRelease(certDataRef);\n\n// Did our custom trust chain evaluate successfully?\nreturn trustResult == kSecTrustResultUnspecified;\n}\n@end"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "@implementation SSLTrustManager\n+ (BOOL)shouldTrustServerTrust:(SecTrustRef)serverTrust forCert:(NSString*)certName {\n// Load up the bundled certificate.\nNSString *certPath = [[NSBundle mainBundle] pathForResource:certName ofType:@\"der\"];\nNSData *certData = [[NSData alloc] initWithContentsOfFile:certPath];\nCFDataRef certDataRef = (__bridge_retained CFDataRef)certData;\nSecCertificateRef cert = SecCertificateCreateWithData(NULL, certDataRef);\n\n// Establish a chain of trust anchored on our bundled certificate.\nCFArrayRef certArrayRef = CFArrayCreate(NULL, (void *)\u0026cert, 1, NULL);\nSecTrustSetAnchorCertificates(serverTrust, certArrayRef);\n\n// Verify that trust.\nSecTrustResultType trustResult;\nSecTrustEvaluate(serverTrust, \u0026trustResult);\n\n// Clean up.\nCFRelease(certArrayRef);\nCFRelease(cert);\nCFRelease(certDataRef);\n\n// Did our custom trust chain evaluate successfully?\nreturn trustResult == kSecTrustResultUnspecified;\n}\n@end",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550442375332,
        "id": "7c66b2af-e160-4c9a-acc5-d79e1a935cf4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550442375332,
        "parent_id": "f59166d3-9483-411d-95d7-f212484a7b5a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Server_Public_SSL_Cert.der",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " is servers’ public SSL key."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Server_Public_SSL_Cert.der",
            "AttrFlags": 1
          },
          {
            "Text": " is servers’ public SSL key."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550442375332,
        "id": "62223706-a572-430b-b3f0-e128667b0f84",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550442375332,
        "parent_id": "f59166d3-9483-411d-95d7-f212484a7b5a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Using this approach our app can make sure that it is communicating to the intended server and no one is intercepting the app-server communication."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Using this approach our app can make sure that it is communicating to the intended server and no one is intercepting the app-server communication."
          }
        ]
      }
    ],
    "title": "020Transport Security using SSL",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}