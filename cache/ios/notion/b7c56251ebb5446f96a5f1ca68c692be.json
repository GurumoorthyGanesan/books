{
  "ID": "b7c56251-ebb5-446f-96a5-f1ca68c692be",
  "Root": {
    "alive": true,
    "content": [
      "9e0dfb73-32d0-49c7-bd8c-0eb2ad874c14"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550442387797,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "b7c56251-ebb5-446f-96a5-f1ca68c692be",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550713740000,
    "parent_id": "4e73988d-2cf8-4e3c-8ffc-6b2186d1dfd1",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "VIPER Pattern"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550442387795,
        "id": "9e0dfb73-32d0-49c7-bd8c-0eb2ad874c14",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550713740000,
        "parent_id": "b7c56251-ebb5-446f-96a5-f1ca68c692be",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Swift"
            ]
          ],
          "title": [
            [
              "import UIKit\n\nstruct Person { // Entity (usually more complex e.g. NSManagedObject)\n    let firstName: String\n    let lastName: String\n}\n\nstruct GreetingData { // Transport data structure (not Entity)\n    let greeting: String\n    let subject: String\n}\n\nprotocol GreetingProvider {\n    func provideGreetingData()\n}\n\nprotocol GreetingOutput: class {\n    func receiveGreetingData(greetingData: GreetingData)\n}\n\nclass GreetingInteractor : GreetingProvider {\n    weak var output: GreetingOutput!\n    \n    func provideGreetingData() {\n        let person = Person(firstName: \"David\", lastName: \"Blaine\") // usually comes from data access layer\n        let subject = person.firstName + \" \" + person.lastName\n        let greeting = GreetingData(greeting: \"Hello\", subject: subject)\n        self.output.receiveGreetingData(greeting)\n    }\n}\n\nprotocol GreetingViewEventHandler {\n    func didTapShowGreetingButton()\n}\n\nprotocol GreetingView: class {\n    func setGreeting(greeting: String)\n}\n\nclass GreetingPresenter : GreetingOutput, GreetingViewEventHandler {\n    weak var view: GreetingView!\n    var greetingProvider: GreetingProvider!\n    \n    func didTapShowGreetingButton() {\n        self.greetingProvider.provideGreetingData()\n    }\n    \n    func receiveGreetingData(greetingData: GreetingData) {\n        let greeting = greetingData.greeting + \" \" + greetingData.subject\n        self.view.setGreeting(greeting)\n    }\n}\n\nclass GreetingViewController : UIViewController, GreetingView {\n    var eventHandler: GreetingViewEventHandler!\n    let showGreetingButton = UIButton()\n    let greetingLabel = UILabel()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        self.showGreetingButton.addTarget(self, action: \"didTapButton:\", forControlEvents: .TouchUpInside)\n    }\n    \n    func didTapButton(button: UIButton) {\n        self.eventHandler.didTapShowGreetingButton()\n    }\n    \n    func setGreeting(greeting: String) {\n        self.greetingLabel.text = greeting\n    }\n    \n    // layout code goes here\n}\n// Assembling of VIPER module, without Router\nlet view = GreetingViewController()\nlet presenter = GreetingPresenter()\nlet interactor = GreetingInteractor()\nview.eventHandler = presenter\npresenter.view = view\npresenter.greetingProvider = interactor\ninteractor.output = presenter"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "import UIKit\n\nstruct Person { // Entity (usually more complex e.g. NSManagedObject)\n    let firstName: String\n    let lastName: String\n}\n\nstruct GreetingData { // Transport data structure (not Entity)\n    let greeting: String\n    let subject: String\n}\n\nprotocol GreetingProvider {\n    func provideGreetingData()\n}\n\nprotocol GreetingOutput: class {\n    func receiveGreetingData(greetingData: GreetingData)\n}\n\nclass GreetingInteractor : GreetingProvider {\n    weak var output: GreetingOutput!\n    \n    func provideGreetingData() {\n        let person = Person(firstName: \"David\", lastName: \"Blaine\") // usually comes from data access layer\n        let subject = person.firstName + \" \" + person.lastName\n        let greeting = GreetingData(greeting: \"Hello\", subject: subject)\n        self.output.receiveGreetingData(greeting)\n    }\n}\n\nprotocol GreetingViewEventHandler {\n    func didTapShowGreetingButton()\n}\n\nprotocol GreetingView: class {\n    func setGreeting(greeting: String)\n}\n\nclass GreetingPresenter : GreetingOutput, GreetingViewEventHandler {\n    weak var view: GreetingView!\n    var greetingProvider: GreetingProvider!\n    \n    func didTapShowGreetingButton() {\n        self.greetingProvider.provideGreetingData()\n    }\n    \n    func receiveGreetingData(greetingData: GreetingData) {\n        let greeting = greetingData.greeting + \" \" + greetingData.subject\n        self.view.setGreeting(greeting)\n    }\n}\n\nclass GreetingViewController : UIViewController, GreetingView {\n    var eventHandler: GreetingViewEventHandler!\n    let showGreetingButton = UIButton()\n    let greetingLabel = UILabel()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        self.showGreetingButton.addTarget(self, action: \"didTapButton:\", forControlEvents: .TouchUpInside)\n    }\n    \n    func didTapButton(button: UIButton) {\n        self.eventHandler.didTapShowGreetingButton()\n    }\n    \n    func setGreeting(greeting: String) {\n        self.greetingLabel.text = greeting\n    }\n    \n    // layout code goes here\n}\n// Assembling of VIPER module, without Router\nlet view = GreetingViewController()\nlet presenter = GreetingPresenter()\nlet interactor = GreetingInteractor()\nview.eventHandler = presenter\npresenter.view = view\npresenter.greetingProvider = interactor\ninteractor.output = presenter",
        "code_language": "Swift"
      }
    ],
    "title": "VIPER Pattern",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}