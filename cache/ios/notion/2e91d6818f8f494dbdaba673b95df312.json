{
  "ID": "2e91d681-8f8f-494d-bdab-a673b95df312",
  "Root": {
    "alive": true,
    "content": [
      "190935a7-85c3-46ca-be3e-af8c9f6509b7",
      "18935a95-b4de-4c26-8897-9c1f19e48272",
      "13543afe-a3b2-4735-be7d-9d6d46e6e5d3",
      "8e309662-b4dd-4343-abc0-8d7ee0c2df53",
      "0ac3fbce-038e-4fd8-9c0b-366d7ad5bdbe",
      "f5280097-ea02-402a-b1d1-a7c75041b028",
      "152edaf7-66dd-44ec-b3b1-a7294f670e84",
      "12cba049-76ba-4850-8beb-a9c4a74e6510",
      "7a60ddac-5147-4387-b595-888fcab62f4d",
      "eb887d4f-5d25-40b6-ae09-be9526066097",
      "4fea1600-fba4-4e96-b0e3-2ba081bf6a15",
      "92b47ac5-5ac8-4461-bb0e-4986361c6ebe",
      "39db767c-2641-4dba-b040-d380d515ac1d"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550397794159,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "2e91d681-8f8f-494d-bdab-a673b95df312",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550654280000,
    "parent_id": "37452658-309f-4211-997e-ba7770e870b5",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Introduction"
        ]
      ]
    },
    "type": "page",
    "version": 9,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550397794154,
        "id": "190935a7-85c3-46ca-be3e-af8c9f6509b7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550397794154,
        "parent_id": "2e91d681-8f8f-494d-bdab-a673b95df312",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Suppose you have multiple threads running. Each thread is doing one task. You want to get notified either on the mainThread OR another thread, when all the task-threads are completed."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Suppose you have multiple threads running. Each thread is doing one task. You want to get notified either on the mainThread OR another thread, when all the task-threads are completed."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550397794157,
        "id": "18935a95-b4de-4c26-8897-9c1f19e48272",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550397794157,
        "parent_id": "2e91d681-8f8f-494d-bdab-a673b95df312",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The simplest solution to such a problem is a "
            ],
            [
              "DispatchGroup",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The simplest solution to such a problem is a "
          },
          {
            "Text": "DispatchGroup",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550397794157,
        "id": "13543afe-a3b2-4735-be7d-9d6d46e6e5d3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550397794157,
        "parent_id": "2e91d681-8f8f-494d-bdab-a673b95df312",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When using a "
            ],
            [
              "DispatchGroup",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", for each request, you "
            ],
            [
              "enter",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " the group and for each completed request, you "
            ],
            [
              "leave",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " the group."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When using a "
          },
          {
            "Text": "DispatchGroup",
            "AttrFlags": 2
          },
          {
            "Text": ", for each request, you "
          },
          {
            "Text": "enter",
            "AttrFlags": 2
          },
          {
            "Text": " the group and for each completed request, you "
          },
          {
            "Text": "leave",
            "AttrFlags": 2
          },
          {
            "Text": " the group."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550397794157,
        "id": "8e309662-b4dd-4343-abc0-8d7ee0c2df53",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550397794157,
        "parent_id": "2e91d681-8f8f-494d-bdab-a673b95df312",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When there are no longer requests in the group, you will be "
            ],
            [
              "notify",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (notified)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When there are no longer requests in the group, you will be "
          },
          {
            "Text": "notify",
            "AttrFlags": 2
          },
          {
            "Text": " (notified)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550397794158,
        "id": "0ac3fbce-038e-4fd8-9c0b-366d7ad5bdbe",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550397794158,
        "parent_id": "2e91d681-8f8f-494d-bdab-a673b95df312",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Usage:",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Usage:",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550397794158,
        "id": "f5280097-ea02-402a-b1d1-a7c75041b028",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550397794158,
        "parent_id": "2e91d681-8f8f-494d-bdab-a673b95df312",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "import UIKit\n\nclass ViewController: UIViewController {\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        \n        let dispatchGroup = DispatchGroup() //Create a group for the tasks.\n        let session: URLSession = URLSession.shared\n        \n        dispatchGroup.enter() //Enter the group for the first task.\n        \n        let firstTask = session.dataTask(with: URLRequest(url: URL(string: \"https://stackoverflow.com\")!)) { (data, response, error) in\n            \n            //Process Response..\n            \n            dispatchGroup.leave() //Leave the group for the first task.\n        }\n\n        \n        dispatchGroup.enter()  //Enter the group for the second task.\n        \n        let secondTask = session.dataTask(with: URLRequest(url: URL(string: \"https://google.ca\")!)) { (data, response, error) in\n            \n            //Process Response..\n            \n            dispatchGroup.leave()  //Leave the group for the second task.\n        }\n        \n        \n        //Get notified on the main thread/queue.. when ALL of the tasks above has been completed.\n        dispatchGroup.notify(queue: DispatchQueue.main) { \n            \n            print(\"Every task is complete\")\n            \n        }\n        \n        \n        //Start the tasks.\n        firstTask.resume()\n        secondTask.resume()\n    }\n\n    override func didReceiveMemoryWarning() {\n        super.didReceiveMemoryWarning()\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "import UIKit\n\nclass ViewController: UIViewController {\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        \n        let dispatchGroup = DispatchGroup() //Create a group for the tasks.\n        let session: URLSession = URLSession.shared\n        \n        dispatchGroup.enter() //Enter the group for the first task.\n        \n        let firstTask = session.dataTask(with: URLRequest(url: URL(string: \"https://stackoverflow.com\")!)) { (data, response, error) in\n            \n            //Process Response..\n            \n            dispatchGroup.leave() //Leave the group for the first task.\n        }\n\n        \n        dispatchGroup.enter()  //Enter the group for the second task.\n        \n        let secondTask = session.dataTask(with: URLRequest(url: URL(string: \"https://google.ca\")!)) { (data, response, error) in\n            \n            //Process Response..\n            \n            dispatchGroup.leave()  //Leave the group for the second task.\n        }\n        \n        \n        //Get notified on the main thread/queue.. when ALL of the tasks above has been completed.\n        dispatchGroup.notify(queue: DispatchQueue.main) { \n            \n            print(\"Every task is complete\")\n            \n        }\n        \n        \n        //Start the tasks.\n        firstTask.resume()\n        secondTask.resume()\n    }\n\n    override func didReceiveMemoryWarning() {\n        super.didReceiveMemoryWarning()\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550397794158,
        "id": "152edaf7-66dd-44ec-b3b1-a7294f670e84",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550397794158,
        "parent_id": "2e91d681-8f8f-494d-bdab-a673b95df312",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "With the above, you don’t have to "
            ],
            [
              "wait",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " infinitely until all the tasks are completed. You can display a loader BEFORE all the tasks have started and dismiss the loader AFTER all tasks are completed. This way, your main thread does not get blocked and your code remains clean."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "With the above, you don’t have to "
          },
          {
            "Text": "wait",
            "AttrFlags": 2
          },
          {
            "Text": " infinitely until all the tasks are completed. You can display a loader BEFORE all the tasks have started and dismiss the loader AFTER all tasks are completed. This way, your main thread does not get blocked and your code remains clean."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550397794158,
        "id": "12cba049-76ba-4850-8beb-a9c4a74e6510",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550397794158,
        "parent_id": "2e91d681-8f8f-494d-bdab-a673b95df312",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Now suppose you also wanted the tasks to be "
            ],
            [
              "ordered",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or add their responses to an array sequentially. You could do the following:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Now suppose you also wanted the tasks to be "
          },
          {
            "Text": "ordered",
            "AttrFlags": 2
          },
          {
            "Text": " or add their responses to an array sequentially. You could do the following:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550397794158,
        "id": "7a60ddac-5147-4387-b595-888fcab62f4d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550397794158,
        "parent_id": "2e91d681-8f8f-494d-bdab-a673b95df312",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "import UIKit\n\n//Locking mechanism..\nfunc synchronized(_ lock: AnyObject, closure: () -\u003e Void) {\n    objc_sync_enter(lock)\n    closure()\n    objc_sync_exit(lock)\n}\n\nclass ViewController: UIViewController {\n\n    let lock = NSObject() //Object to lock on.\n    var responseArray = Array\u003cData?\u003e() //Array of responses.\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        let dispatchGroup = DispatchGroup()\n        let session: URLSession = URLSession.shared\n        \n        dispatchGroup.enter() //Enter the group for the first task.\n        \n        let firstTask = session.dataTask(with: URLRequest(url: URL(string: \"https://stackoverflow.com\")!)) { (data, response, error) in\n            \n            //Process Response..\n\n            synchronized(self.lock, closure: { () -\u003e Void in\n                self.responseArray[0] = data ?? nil\n            })\n\n            dispatchGroup.leave() //Leave the group for the first task.\n        }\n\n        \n        dispatchGroup.enter()  //Enter the group for the second task.\n        \n        let secondTask = session.dataTask(with: URLRequest(url: URL(string: \"https://google.ca\")!)) { (data, response, error) in\n            \n            //Process Response..\n            \n            synchronized(self.lock, closure: { () -\u003e Void in\n                self.responseArray[1] = data ?? nil\n            })\n            \n            dispatchGroup.leave()  //Leave the group for the second task.\n        }\n        \n        \n        //Get notified on the main thread.. when ALL of the requests above has been completed.\n        dispatchGroup.notify(queue: DispatchQueue.main) { \n            \n            print(\"Every task is complete..\")\n            \n            for i in 0..\u003cself.responseArray.count {\n                \n                if self.responseArray[i] == nil {\n                    print(\"Request #\\(i) Failed.\\n\")\n                }\n                else {\n                    print(\"Request #\\(i) Succeeded.\\n\")\n                }\n            }\n        }\n        \n        //Two tasks added to the array. Responses are assumed nil until they complete.\n        self.responseArray.append(nil)\n        self.responseArray.append(nil)\n        \n        //Start the tasks.\n        firstTask.resume()\n        secondTask.resume()\n    }\n\n    override func didReceiveMemoryWarning() {\n        super.didReceiveMemoryWarning()\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "import UIKit\n\n//Locking mechanism..\nfunc synchronized(_ lock: AnyObject, closure: () -\u003e Void) {\n    objc_sync_enter(lock)\n    closure()\n    objc_sync_exit(lock)\n}\n\nclass ViewController: UIViewController {\n\n    let lock = NSObject() //Object to lock on.\n    var responseArray = Array\u003cData?\u003e() //Array of responses.\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        let dispatchGroup = DispatchGroup()\n        let session: URLSession = URLSession.shared\n        \n        dispatchGroup.enter() //Enter the group for the first task.\n        \n        let firstTask = session.dataTask(with: URLRequest(url: URL(string: \"https://stackoverflow.com\")!)) { (data, response, error) in\n            \n            //Process Response..\n\n            synchronized(self.lock, closure: { () -\u003e Void in\n                self.responseArray[0] = data ?? nil\n            })\n\n            dispatchGroup.leave() //Leave the group for the first task.\n        }\n\n        \n        dispatchGroup.enter()  //Enter the group for the second task.\n        \n        let secondTask = session.dataTask(with: URLRequest(url: URL(string: \"https://google.ca\")!)) { (data, response, error) in\n            \n            //Process Response..\n            \n            synchronized(self.lock, closure: { () -\u003e Void in\n                self.responseArray[1] = data ?? nil\n            })\n            \n            dispatchGroup.leave()  //Leave the group for the second task.\n        }\n        \n        \n        //Get notified on the main thread.. when ALL of the requests above has been completed.\n        dispatchGroup.notify(queue: DispatchQueue.main) { \n            \n            print(\"Every task is complete..\")\n            \n            for i in 0..\u003cself.responseArray.count {\n                \n                if self.responseArray[i] == nil {\n                    print(\"Request #\\(i) Failed.\\n\")\n                }\n                else {\n                    print(\"Request #\\(i) Succeeded.\\n\")\n                }\n            }\n        }\n        \n        //Two tasks added to the array. Responses are assumed nil until they complete.\n        self.responseArray.append(nil)\n        self.responseArray.append(nil)\n        \n        //Start the tasks.\n        firstTask.resume()\n        secondTask.resume()\n    }\n\n    override func didReceiveMemoryWarning() {\n        super.didReceiveMemoryWarning()\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550397794158,
        "id": "eb887d4f-5d25-40b6-ae09-be9526066097",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550397794158,
        "parent_id": "2e91d681-8f8f-494d-bdab-a673b95df312",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550397794158,
        "id": "4fea1600-fba4-4e96-b0e3-2ba081bf6a15",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550397794158,
        "parent_id": "2e91d681-8f8f-494d-bdab-a673b95df312",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Notes",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Notes",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550397794159,
        "id": "92b47ac5-5ac8-4461-bb0e-4986361c6ebe",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550397794159,
        "parent_id": "2e91d681-8f8f-494d-bdab-a673b95df312",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Every entry must have an exit in a "
            ],
            [
              "DispatchGroup",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". If you forget to "
            ],
            [
              "leave",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " after "
            ],
            [
              "entering",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", you are setting yourself up. You will NEVER be notified when the tasks are completed."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Every entry must have an exit in a "
          },
          {
            "Text": "DispatchGroup",
            "AttrFlags": 2
          },
          {
            "Text": ". If you forget to "
          },
          {
            "Text": "leave",
            "AttrFlags": 2
          },
          {
            "Text": " after "
          },
          {
            "Text": "entering",
            "AttrFlags": 2
          },
          {
            "Text": ", you are setting yourself up. You will NEVER be notified when the tasks are completed."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550397794159,
        "id": "39db767c-2641-4dba-b040-d380d515ac1d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550397794159,
        "parent_id": "2e91d681-8f8f-494d-bdab-a673b95df312",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The amount of "
            ],
            [
              "enter",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " must equal the amount of "
            ],
            [
              "leave",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The amount of "
          },
          {
            "Text": "enter",
            "AttrFlags": 2
          },
          {
            "Text": " must equal the amount of "
          },
          {
            "Text": "leave",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      }
    ],
    "title": "Introduction",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}