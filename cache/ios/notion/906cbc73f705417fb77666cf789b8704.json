{
  "ID": "906cbc73-f705-417f-b776-66cf789b8704",
  "Root": {
    "alive": true,
    "content": [
      "38645738-8d28-4678-91ad-5e14e8421949",
      "64d29e76-c51d-4725-a93f-aa95b55b2727",
      "2b6fd3b3-55a9-4e7f-aca2-4f878979a4a0",
      "a746a933-4ebe-40d5-8d8c-1bef1e998300",
      "5ac0e6bf-4eff-4eb2-87ca-1bf3cfacc610"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550394454798,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "906cbc73-f705-417f-b776-66cf789b8704",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550483040000,
    "parent_id": "e7e31a29-bf79-49d6-ba44-e09d1c896f24",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Hiding Elements"
        ]
      ]
    },
    "type": "page",
    "version": 7,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550394454797,
        "id": "38645738-8d28-4678-91ad-5e14e8421949",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550394454797,
        "parent_id": "906cbc73-f705-417f-b776-66cf789b8704",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Most UIKit classes, including UIView, adhere to "
            ],
            [
              "UIAccessibilityProtocol",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and return correct values by default. It’s easy to take for granted that a "
            ],
            [
              "UIView",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " set to hidden is also absent from the accessibility hierarchy and won’t be navigated by VoiceOver. While this default behavior is usually sufficient, there are times where a view will be present in the view hierarchy but not visible or navigable. For example, a collection of buttons may be overlapped by another view, rendering them invisible to a sighted user. VoiceOver, however, will still try to navigate them since they are technically not hidden from "
            ],
            [
              "UIKit",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and therefore are still present in the accessibility hierarchy. In such cases, you must hint to VoiceOver that the parent view isn’t accessible. You can do this by explicitly hiding the view from UIKit by setting hidden when the view goes offscreen:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Most UIKit classes, including UIView, adhere to "
          },
          {
            "Text": "UIAccessibilityProtocol",
            "AttrFlags": 2
          },
          {
            "Text": " and return correct values by default. It’s easy to take for granted that a "
          },
          {
            "Text": "UIView",
            "AttrFlags": 2
          },
          {
            "Text": " set to hidden is also absent from the accessibility hierarchy and won’t be navigated by VoiceOver. While this default behavior is usually sufficient, there are times where a view will be present in the view hierarchy but not visible or navigable. For example, a collection of buttons may be overlapped by another view, rendering them invisible to a sighted user. VoiceOver, however, will still try to navigate them since they are technically not hidden from "
          },
          {
            "Text": "UIKit",
            "AttrFlags": 2
          },
          {
            "Text": " and therefore are still present in the accessibility hierarchy. In such cases, you must hint to VoiceOver that the parent view isn’t accessible. You can do this by explicitly hiding the view from UIKit by setting hidden when the view goes offscreen:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550394454797,
        "id": "64d29e76-c51d-4725-a93f-aa95b55b2727",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550483040000,
        "parent_id": "906cbc73-f705-417f-b776-66cf789b8704",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Objective-C"
            ]
          ],
          "title": [
            [
              "myViewFullofButtons.hidden = YES;"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "myViewFullofButtons.hidden = YES;",
        "code_language": "Objective-C"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550394454798,
        "id": "2b6fd3b3-55a9-4e7f-aca2-4f878979a4a0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550394454798,
        "parent_id": "906cbc73-f705-417f-b776-66cf789b8704",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Alternatively, you can leave the parent view visible and simply hide its children from the accessibility hierarchy:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Alternatively, you can leave the parent view visible and simply hide its children from the accessibility hierarchy:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550394454798,
        "id": "a746a933-4ebe-40d5-8d8c-1bef1e998300",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550483040000,
        "parent_id": "906cbc73-f705-417f-b776-66cf789b8704",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Objective-C"
            ]
          ],
          "title": [
            [
              "myViewFullofButtons.accessibilityElementsHidden = YES;"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "myViewFullofButtons.accessibilityElementsHidden = YES;",
        "code_language": "Objective-C"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550394454798,
        "id": "5ac0e6bf-4eff-4eb2-87ca-1bf3cfacc610",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550394454798,
        "parent_id": "906cbc73-f705-417f-b776-66cf789b8704",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Temporary views are a another place you’ll want to hide elements from the accessibility hierarchy while leaving them visible to users. For example, the view that pops up when you hit the volume button is visible to sighted users but doesn’t demand attention the way a normal alert does. You wouldn’t want VoiceOver to interrupt the user and move the cursor from away from whatever they were doing to announce the new volume, especially given that adjusting volume already provides auditory feedback through the clicking sound it makes. In cases like this, you’ll want to hide the view using "
            ],
            [
              "accessibilityElementsHidden",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Temporary views are a another place you’ll want to hide elements from the accessibility hierarchy while leaving them visible to users. For example, the view that pops up when you hit the volume button is visible to sighted users but doesn’t demand attention the way a normal alert does. You wouldn’t want VoiceOver to interrupt the user and move the cursor from away from whatever they were doing to announce the new volume, especially given that adjusting volume already provides auditory feedback through the clicking sound it makes. In cases like this, you’ll want to hide the view using "
          },
          {
            "Text": "accessibilityElementsHidden",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      }
    ],
    "title": "Hiding Elements",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}