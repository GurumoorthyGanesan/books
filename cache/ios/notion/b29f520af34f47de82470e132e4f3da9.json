{
  "ID": "b29f520a-f34f-47de-8247-0e132e4f3da9",
  "Root": {
    "alive": true,
    "content": [
      "34bb567a-6943-438b-8df3-9e73cf58091a",
      "f33efc06-62b7-4b27-a6cf-f7760b9391af",
      "62487ec5-1f56-4101-9cd4-c8697f87988b",
      "a4573e95-027a-45cc-9298-e5a67f9183bb",
      "d858a55d-aa9c-478d-9a9e-4b8702717292",
      "8ef74304-8fda-4d96-b3a1-f70cc59c04e8",
      "05b7795a-d6eb-4ea5-96a0-6d4a0121ad5e",
      "c8193abe-3551-4e16-8cca-1b285494b37e",
      "0c658cbf-d94e-44e4-b2ea-12deeadb494c",
      "cb1ee7ad-79b7-4697-897a-1180235102cd",
      "78b56ea2-43a7-4ae2-9e9b-72668a7f51da",
      "e587be0e-fd14-47c1-96e6-8dc98858e43c",
      "ba7d22dd-7da3-47ee-94c9-a266fb6f9f0f",
      "755d4d95-dbad-40d2-a3ac-4943a54d0920",
      "d2a15ec6-eb9e-48f7-bed8-d9faf01b05e9",
      "43027e85-4bb9-40ad-b781-877055f8f708",
      "1d5f21f4-4f45-4daa-a037-8b4189d270db",
      "7ed8d15b-ed9b-49a4-bc11-f279bd6d94a6",
      "f8ef827a-c1b3-459f-9515-13858cbdb1f9",
      "6082ad7c-faf3-4ee1-b286-124a0915f659"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550441712895,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "b29f520a-f34f-47de-8247-0e132e4f3da9",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550713320000,
    "parent_id": "468b0602-725a-4cb6-810e-ca88f35bd501",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "UIDynamicBehavior Driven Custom Transition"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550441712888,
        "id": "34bb567a-6943-438b-8df3-9e73cf58091a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550441712888,
        "parent_id": "b29f520a-f34f-47de-8247-0e132e4f3da9",
        "parent_table": "block",
        "properties": {
          "source": [
            [
              "https://i.stack.imgur.com/VAeNo.gif"
            ]
          ]
        },
        "type": "image",
        "version": 1,
        "source": "https://i.stack.imgur.com/VAeNo.gif",
        "image_url": "https://www.notion.so/image/https:%2F%2Fi.stack.imgur.com%2FVAeNo.gif"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550441712888,
        "id": "f33efc06-62b7-4b27-a6cf-f7760b9391af",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550441712888,
        "parent_id": "b29f520a-f34f-47de-8247-0e132e4f3da9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This example shows how to create a custom presentation transition that is driven by a composite "
            ],
            [
              "UIDynamicBehavior",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". We can start by creating a presenting view controller that will present a modal."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This example shows how to create a custom presentation transition that is driven by a composite "
          },
          {
            "Text": "UIDynamicBehavior",
            "AttrFlags": 2
          },
          {
            "Text": ". We can start by creating a presenting view controller that will present a modal."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550441712888,
        "id": "62487ec5-1f56-4101-9cd4-c8697f87988b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550441712888,
        "parent_id": "b29f520a-f34f-47de-8247-0e132e4f3da9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Swift"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Swift"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550441712888,
        "id": "a4573e95-027a-45cc-9298-e5a67f9183bb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550441712888,
        "parent_id": "b29f520a-f34f-47de-8247-0e132e4f3da9",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class PresentingViewController: UIViewController\n{\n    lazy var button: UIButton =\n    {\n        let button = UIButton()\n        button.translatesAutoresizingMaskIntoConstraints = false\n        self.view.addSubview(button)\n        button.centerXAnchor.constraint(equalTo: self.view.centerXAnchor).isActive\n            = true\n        button.centerYAnchor.constraint(equalTo: self.view.centerYAnchor).isActive = true\n        button.setTitle(\"Present\", for: .normal)\n        button.setTextColor(UIColor.blue, for: .normal)\n        \n        return button\n    }()\n    \n    override func viewDidLoad()\n    {\n        super.viewDidLoad()\n        button.addTarget(self, action: #selector(self.didPressPresent), for: .touchUpInside)\n    }\n    \n    func didPressPresent()\n    {\n        let modal = ModalViewController()\n        modal.view.frame = CGRect(x: 0.0, y: 0.0, width: 200.0, height: 200.0)\n        modal.modalPresentationStyle = .custom\n        modal.transitioningDelegate = modal\n        self.present(modal, animated: true)\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class PresentingViewController: UIViewController\n{\n    lazy var button: UIButton =\n    {\n        let button = UIButton()\n        button.translatesAutoresizingMaskIntoConstraints = false\n        self.view.addSubview(button)\n        button.centerXAnchor.constraint(equalTo: self.view.centerXAnchor).isActive\n            = true\n        button.centerYAnchor.constraint(equalTo: self.view.centerYAnchor).isActive = true\n        button.setTitle(\"Present\", for: .normal)\n        button.setTextColor(UIColor.blue, for: .normal)\n        \n        return button\n    }()\n    \n    override func viewDidLoad()\n    {\n        super.viewDidLoad()\n        button.addTarget(self, action: #selector(self.didPressPresent), for: .touchUpInside)\n    }\n    \n    func didPressPresent()\n    {\n        let modal = ModalViewController()\n        modal.view.frame = CGRect(x: 0.0, y: 0.0, width: 200.0, height: 200.0)\n        modal.modalPresentationStyle = .custom\n        modal.transitioningDelegate = modal\n        self.present(modal, animated: true)\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550441712889,
        "id": "d858a55d-aa9c-478d-9a9e-4b8702717292",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550441712889,
        "parent_id": "b29f520a-f34f-47de-8247-0e132e4f3da9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Objective-C"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Objective-C"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550441712889,
        "id": "8ef74304-8fda-4d96-b3a1-f70cc59c04e8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550441712889,
        "parent_id": "b29f520a-f34f-47de-8247-0e132e4f3da9",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "@interface PresentingViewController ()\n@property (nonatomic, strong) UIButton *button;\n@end\n\n@implementation PresentingViewController\n\n- (void)viewDidLoad\n{\n    [super viewDidLoad];\n    [self.button addTarget:self action:@selector(didPressPresent) forControlEvents:UIControlEventTouchUpInside];\n}\n\n- (void)didPressPresent\n{\n    ModalViewController *modal = [[ModalViewController alloc] init];\n    modal.view.frame = CGRectMake(0.0, 0.0, 200.0, 200.0);\n    modal.modalPresentationStyle = UIModalPresentationCustom;\n    modal.transitioningDelegate = modal;\n    [self presentViewController:modal animated:YES completion:nil];\n}\n\n- (UIButton *)button\n{\n    if (!_button)\n    {\n        _button = [[UIButton alloc] init];\n        _button.translatesAutoresizingMaskIntoConstraints = NO;\n        [self.view addSubview:_button];\n        [_button.centerXAnchor constraintEqualToAnchor:self.view.centerXAnchor].active = YES;\n        [_button.centerYAnchor constraintEqualToAnchor:self.view.centerYAnchor].active = YES;\n        [_button setTitle:@\"Present\" forState:UIControlStateNormal];\n        [_button setTitleColor:[UIColor blueColor] forState:UIControlStateNormal];\n    }\n    return _button;\n}\n\n@end"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "@interface PresentingViewController ()\n@property (nonatomic, strong) UIButton *button;\n@end\n\n@implementation PresentingViewController\n\n- (void)viewDidLoad\n{\n    [super viewDidLoad];\n    [self.button addTarget:self action:@selector(didPressPresent) forControlEvents:UIControlEventTouchUpInside];\n}\n\n- (void)didPressPresent\n{\n    ModalViewController *modal = [[ModalViewController alloc] init];\n    modal.view.frame = CGRectMake(0.0, 0.0, 200.0, 200.0);\n    modal.modalPresentationStyle = UIModalPresentationCustom;\n    modal.transitioningDelegate = modal;\n    [self presentViewController:modal animated:YES completion:nil];\n}\n\n- (UIButton *)button\n{\n    if (!_button)\n    {\n        _button = [[UIButton alloc] init];\n        _button.translatesAutoresizingMaskIntoConstraints = NO;\n        [self.view addSubview:_button];\n        [_button.centerXAnchor constraintEqualToAnchor:self.view.centerXAnchor].active = YES;\n        [_button.centerYAnchor constraintEqualToAnchor:self.view.centerYAnchor].active = YES;\n        [_button setTitle:@\"Present\" forState:UIControlStateNormal];\n        [_button setTitleColor:[UIColor blueColor] forState:UIControlStateNormal];\n    }\n    return _button;\n}\n\n@end",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550441712889,
        "id": "05b7795a-d6eb-4ea5-96a0-6d4a0121ad5e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550441712889,
        "parent_id": "b29f520a-f34f-47de-8247-0e132e4f3da9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When the present button is tapped, we create a "
            ],
            [
              "ModalViewController",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and set its presentation style to "
            ],
            [
              ".custom",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and set its "
            ],
            [
              "transitionDelegate",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to itself. This will allow us to vend an animator that will drive its modal transition. We also set "
            ],
            [
              "modal",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "‘s view’s frame so it will be smaller than the full screen."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When the present button is tapped, we create a "
          },
          {
            "Text": "ModalViewController",
            "AttrFlags": 2
          },
          {
            "Text": " and set its presentation style to "
          },
          {
            "Text": ".custom",
            "AttrFlags": 2
          },
          {
            "Text": " and set its "
          },
          {
            "Text": "transitionDelegate",
            "AttrFlags": 2
          },
          {
            "Text": " to itself. This will allow us to vend an animator that will drive its modal transition. We also set "
          },
          {
            "Text": "modal",
            "AttrFlags": 2
          },
          {
            "Text": "‘s view’s frame so it will be smaller than the full screen."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550441712889,
        "id": "c8193abe-3551-4e16-8cca-1b285494b37e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550441712889,
        "parent_id": "b29f520a-f34f-47de-8247-0e132e4f3da9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Let’s now look at "
            ],
            [
              "ModalViewController",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Let’s now look at "
          },
          {
            "Text": "ModalViewController",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550441712889,
        "id": "0c658cbf-d94e-44e4-b2ea-12deeadb494c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550441712889,
        "parent_id": "b29f520a-f34f-47de-8247-0e132e4f3da9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Swift"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Swift"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550441712889,
        "id": "cb1ee7ad-79b7-4697-897a-1180235102cd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550441712889,
        "parent_id": "b29f520a-f34f-47de-8247-0e132e4f3da9",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class ModalViewController: UIViewController\n{\n    lazy var button: UIButton =\n    {\n        let button = UIButton()\n        button.translatesAutoresizingMaskIntoConstraints = false\n        self.view.addSubview(button)\n        button.centerXAnchor.constraint(equalTo: self.view.centerXAnchor).isActive\n         = true\n        button.centerYAnchor.constraint(equalTo: self.view.centerYAnchor).isActive = true\n        button.setTitle(\"Dismiss\", for: .normal)\n        button.setTitleColor(.white, for: .normal)\n        \n        return button\n    }()\n    \n    override func viewDidLoad()\n    {\n        super.viewDidLoad()\n        button.addTarget(self, action: #selector(self.didPressDismiss), for: .touchUpInside)\n        view.backgroundColor = .red\n        view.layer.cornerRadius = 15.0\n    }\n    \n    func didPressDismiss()\n    {\n        dismiss(animated: true)\n    }\n}\n\nextension ModalViewController: UIViewControllerTransitioningDelegate\n{\n    func animationController(forPresented presented: UIViewController, presenting: UIViewController, source: UIViewController) -\u003e UIViewControllerAnimatedTransitioning?\n    {\n        return DropOutAnimator(duration: 1.5, isAppearing: true)\n    }\n    \n    func animationController(forDismissed dismissed: UIViewController) -\u003e UIViewControllerAnimatedTransitioning?\n    {\n        return DropOutAnimator(duration: 4.0, isAppearing: false)\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class ModalViewController: UIViewController\n{\n    lazy var button: UIButton =\n    {\n        let button = UIButton()\n        button.translatesAutoresizingMaskIntoConstraints = false\n        self.view.addSubview(button)\n        button.centerXAnchor.constraint(equalTo: self.view.centerXAnchor).isActive\n         = true\n        button.centerYAnchor.constraint(equalTo: self.view.centerYAnchor).isActive = true\n        button.setTitle(\"Dismiss\", for: .normal)\n        button.setTitleColor(.white, for: .normal)\n        \n        return button\n    }()\n    \n    override func viewDidLoad()\n    {\n        super.viewDidLoad()\n        button.addTarget(self, action: #selector(self.didPressDismiss), for: .touchUpInside)\n        view.backgroundColor = .red\n        view.layer.cornerRadius = 15.0\n    }\n    \n    func didPressDismiss()\n    {\n        dismiss(animated: true)\n    }\n}\n\nextension ModalViewController: UIViewControllerTransitioningDelegate\n{\n    func animationController(forPresented presented: UIViewController, presenting: UIViewController, source: UIViewController) -\u003e UIViewControllerAnimatedTransitioning?\n    {\n        return DropOutAnimator(duration: 1.5, isAppearing: true)\n    }\n    \n    func animationController(forDismissed dismissed: UIViewController) -\u003e UIViewControllerAnimatedTransitioning?\n    {\n        return DropOutAnimator(duration: 4.0, isAppearing: false)\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550441712889,
        "id": "78b56ea2-43a7-4ae2-9e9b-72668a7f51da",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550441712889,
        "parent_id": "b29f520a-f34f-47de-8247-0e132e4f3da9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Objective-C"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Objective-C"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550441712889,
        "id": "e587be0e-fd14-47c1-96e6-8dc98858e43c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550441712889,
        "parent_id": "b29f520a-f34f-47de-8247-0e132e4f3da9",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "@interface ModalViewController () \u003cUIViewControllerTransitioningDelegate\u003e\n@property (nonatomic, strong) UIButton *button;\n@end\n\n@implementation ModalViewController\n\n- (void)viewDidLoad\n{\n    [super viewDidLoad];\n    [self.button addTarget:self action:@selector(didPressPresent) forControlEvents:UIControlEventTouchUpInside];\n    self.view.backgroundColor = [UIColor redColor];\n    self.view.layer.cornerRadius = 15.0f;\n}\n\n- (void)didPressPresent\n{\n    [self dismissViewControllerAnimated:YES completion:nil];\n}\n\n- (UIButton *)button\n{\n    if (!_button)\n    {\n        _button = [[UIButton alloc] init];\n        _button.translatesAutoresizingMaskIntoConstraints = NO;\n        [self.view addSubview:_button];\n        [_button.centerXAnchor constraintEqualToAnchor:self.view.centerXAnchor].active = YES;\n        [_button.centerYAnchor constraintEqualToAnchor:self.view.centerYAnchor].active = YES;\n        [_button setTitle:@\"Dismiss\" forState:UIControlStateNormal];\n        [_button setTitleColor:[UIColor blueColor] forState:UIControlStateNormal];\n    }\n    return _button;\n}\n\n- (id\u003cUIViewControllerAnimatedTransitioning\u003e)animationControllerForPresentedController:(UIViewController *)presented presentingController:(UIViewController *)presenting sourceController:(UIViewController *)source\n{\n    return [[DropOutAnimator alloc]initWithDuration: 1.5 appearing:YES];\n}\n\n- (id\u003cUIViewControllerAnimatedTransitioning\u003e)animationControllerForDismissedController:(UIViewController *)dismissed\n{\n    return [[DropOutAnimator alloc] initWithDuration:4.0 appearing:NO];\n}\n\n@end"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "@interface ModalViewController () \u003cUIViewControllerTransitioningDelegate\u003e\n@property (nonatomic, strong) UIButton *button;\n@end\n\n@implementation ModalViewController\n\n- (void)viewDidLoad\n{\n    [super viewDidLoad];\n    [self.button addTarget:self action:@selector(didPressPresent) forControlEvents:UIControlEventTouchUpInside];\n    self.view.backgroundColor = [UIColor redColor];\n    self.view.layer.cornerRadius = 15.0f;\n}\n\n- (void)didPressPresent\n{\n    [self dismissViewControllerAnimated:YES completion:nil];\n}\n\n- (UIButton *)button\n{\n    if (!_button)\n    {\n        _button = [[UIButton alloc] init];\n        _button.translatesAutoresizingMaskIntoConstraints = NO;\n        [self.view addSubview:_button];\n        [_button.centerXAnchor constraintEqualToAnchor:self.view.centerXAnchor].active = YES;\n        [_button.centerYAnchor constraintEqualToAnchor:self.view.centerYAnchor].active = YES;\n        [_button setTitle:@\"Dismiss\" forState:UIControlStateNormal];\n        [_button setTitleColor:[UIColor blueColor] forState:UIControlStateNormal];\n    }\n    return _button;\n}\n\n- (id\u003cUIViewControllerAnimatedTransitioning\u003e)animationControllerForPresentedController:(UIViewController *)presented presentingController:(UIViewController *)presenting sourceController:(UIViewController *)source\n{\n    return [[DropOutAnimator alloc]initWithDuration: 1.5 appearing:YES];\n}\n\n- (id\u003cUIViewControllerAnimatedTransitioning\u003e)animationControllerForDismissedController:(UIViewController *)dismissed\n{\n    return [[DropOutAnimator alloc] initWithDuration:4.0 appearing:NO];\n}\n\n@end",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550441712890,
        "id": "ba7d22dd-7da3-47ee-94c9-a266fb6f9f0f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550441712890,
        "parent_id": "b29f520a-f34f-47de-8247-0e132e4f3da9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Here we create the view controller that is presented. Also because "
            ],
            [
              "ModalViewController",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is it’s own "
            ],
            [
              "transitioningDelegate",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " it is also responsible for vending an object that will manage its transition animation. For us that means passing on an instance of our composite "
            ],
            [
              "UIDynamicBehavior",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " subclass."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Here we create the view controller that is presented. Also because "
          },
          {
            "Text": "ModalViewController",
            "AttrFlags": 2
          },
          {
            "Text": " is it’s own "
          },
          {
            "Text": "transitioningDelegate",
            "AttrFlags": 2
          },
          {
            "Text": " it is also responsible for vending an object that will manage its transition animation. For us that means passing on an instance of our composite "
          },
          {
            "Text": "UIDynamicBehavior",
            "AttrFlags": 2
          },
          {
            "Text": " subclass."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550441712890,
        "id": "755d4d95-dbad-40d2-a3ac-4943a54d0920",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550441712890,
        "parent_id": "b29f520a-f34f-47de-8247-0e132e4f3da9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Our animator will have two different transitions: one for presenting and one for dismissing. For presenting, the presenting view controller’s view will drop in from above. And for dismissing, the view will seem to swing from a rope and then drop out. Because "
            ],
            [
              "DropOutAnimator",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " conforms to "
            ],
            [
              "UIViewControllerAnimatedTransitioning",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " most of this work will be done in its implementation of "
            ],
            [
              "func animateTransition(using transitionContext: UIViewControllerContextTransitioning)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Our animator will have two different transitions: one for presenting and one for dismissing. For presenting, the presenting view controller’s view will drop in from above. And for dismissing, the view will seem to swing from a rope and then drop out. Because "
          },
          {
            "Text": "DropOutAnimator",
            "AttrFlags": 2
          },
          {
            "Text": " conforms to "
          },
          {
            "Text": "UIViewControllerAnimatedTransitioning",
            "AttrFlags": 2
          },
          {
            "Text": " most of this work will be done in its implementation of "
          },
          {
            "Text": "func animateTransition(using transitionContext: UIViewControllerContextTransitioning)",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550441712890,
        "id": "d2a15ec6-eb9e-48f7-bed8-d9faf01b05e9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550441712890,
        "parent_id": "b29f520a-f34f-47de-8247-0e132e4f3da9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Swift"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Swift"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550441712890,
        "id": "43027e85-4bb9-40ad-b781-877055f8f708",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550441712890,
        "parent_id": "b29f520a-f34f-47de-8247-0e132e4f3da9",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class DropOutAnimator: UIDynamicBehavior\n{\n    let duration: TimeInterval\n    let isAppearing: Bool\n\n    var transitionContext: UIViewControllerContextTransitioning?\n    var hasElapsedTimeExceededDuration = false\n    var finishTime: TimeInterval = 0.0\n    var collisionBehavior: UICollisionBehavior?\n    var attachmentBehavior: UIAttachmentBehavior?\n    var animator: UIDynamicAnimator?\n\n    init(duration: TimeInterval = 1.0,  isAppearing: Bool)\n    {\n        self.duration = duration\n        self.isAppearing = isAppearing\n        super.init()\n    }\n}\n\nextension DropOutAnimator: UIViewControllerAnimatedTransitioning\n{\n    func animateTransition(using transitionContext: UIViewControllerContextTransitioning)\n    {\n        // Get relevant views and view controllers from transitionContext\n        guard let fromVC = transitionContext.viewController(forKey: .from),\n              let toVC = transitionContext.viewController(forKey: .to),\n              let fromView = fromVC.view,\n              let toView = toVC.view else { return }\n    \n        let containerView = transitionContext.containerView\n        let duration = self.transitionDuration(using: transitionContext)\n    \n        // Hold refrence to transitionContext to notify it of completion\n        self.transitionContext = transitionContext\n    \n        // Create dynamic animator\n        let animator = UIDynamicAnimator(referenceView: containerView)\n        animator.delegate = self\n        self.animator = animator\n    \n        // Presenting Animation\n        if self.isAppearing\n        {\n            fromView.isUserInteractionEnabled = false\n        \n            // Position toView  just off-screen\n            let fromViewInitialFrame = transitionContext.initialFrame(for: fromVC)\n            var toViewInitialFrame = toView.frame\n            toViewInitialFrame.origin.y -= toViewInitialFrame.height\n            toViewInitialFrame.origin.x = fromViewInitialFrame.width * 0.5 - toViewInitialFrame.width * 0.5\n            toView.frame = toViewInitialFrame\n        \n            containerView.addSubview(toView)\n        \n            // Prevent rotation and adjust bounce\n            let bodyBehavior = UIDynamicItemBehavior(items: [toView])\n            bodyBehavior.elasticity = 0.7\n            bodyBehavior.allowsRotation = false\n        \n            // Add gravity at exaggerated magnitude so animation doesn't seem slow\n            let gravityBehavior = UIGravityBehavior(items: [toView])\n            gravityBehavior.magnitude = 10.0\n        \n            // Set collision bounds to include off-screen view and have collision in center \n            // where our final view should come to rest\n            let collisionBehavior = UICollisionBehavior(items: [toView])\n            let insets = UIEdgeInsets(top: toViewInitialFrame.minY, left: 0.0, bottom: fromViewInitialFrame.height * 0.5 - toViewInitialFrame.height * 0.5, right: 0.0)\n            collisionBehavior.setTranslatesReferenceBoundsIntoBoundary(with: insets)\n            self.collisionBehavior = collisionBehavior\n        \n            // Keep track of finish time in case we need to end the animator befor the animator pauses\n            self.finishTime = duration + (self.animator?.elapsedTime ?? 0.0)\n        \n            // Closure that is called after every \"tick\" of the animator\n            // Check if we exceed duration\n            self.action =\n            { [weak self] in\n                guard let strongSelf = self,\n                  (strongSelf.animator?.elapsedTime ?? 0.0) \u003e= strongSelf.finishTime else { return }\n                strongSelf.hasElapsedTimeExceededDuration = true\n                strongSelf.animator?.removeBehavior(strongSelf)\n            }\n        \n            // `DropOutAnimator` is a composit behavior, so add child behaviors to self\n            self.addChildBehavior(collisionBehavior)\n            self.addChildBehavior(bodyBehavior)\n            self.addChildBehavior(gravityBehavior)\n        \n            // Add self to dynamic animator\n            self.animator?.addBehavior(self)\n        }\n        // Dismissing Animation\n        else\n        {\n            // Create allow rotation and have a elastic item\n            let bodyBehavior = UIDynamicItemBehavior(items: [fromView])\n            bodyBehavior.elasticity = 0.8\n            bodyBehavior.angularResistance = 5.0\n            bodyBehavior.allowsRotation = true\n        \n            // Create gravity with exaggerated magnitude\n            let gravityBehavior = UIGravityBehavior(items: [fromView])\n            gravityBehavior.magnitude = 10.0\n        \n            // Collision boundary is set to have a floor just below the bottom of the screen\n            let collisionBehavior = UICollisionBehavior(items: [fromView])\n            let insets = UIEdgeInsets(top: 0.0, left: -1000, bottom: -225, right: -1000)\n            collisionBehavior.setTranslatesReferenceBoundsIntoBoundary(with: insets)\n            self.collisionBehavior = collisionBehavior\n        \n            // Attachment behavior so view will have effect of hanging from a rope\n            let offset = UIOffset(horizontal: 70.0, vertical: fromView.bounds.height * 0.5)\n            var anchorPoint = CGPoint(x: fromView.bounds.maxX - 40.0, y: fromView.bounds.minY)\n            anchorPoint = containerView.convert(anchorPoint, from: fromView)\n            let attachmentBehavior = UIAttachmentBehavior(item: fromView, offsetFromCenter: offset, attachedToAnchor: anchorPoint)\n            attachmentBehavior.frequency = 3.0\n            attachmentBehavior.damping = 3.0\n            self.attachmentBehavior = attachmentBehavior\n        \n            // `DropOutAnimator` is a composit behavior, so add child behaviors to self\n            self.addChildBehavior(collisionBehavior)\n            self.addChildBehavior(bodyBehavior)\n            self.addChildBehavior(gravityBehavior)\n            self.addChildBehavior(attachmentBehavior)\n        \n            // Add self to dynamic animator\n            self.animator?.addBehavior(self)\n        \n            // Animation has two parts part one is hanging from rope. \n            // Part two is bouncying off-screen\n            // Divide duration in two\n            self.finishTime = (2.0 / 3.0) * duration + (self.animator?.elapsedTime ?? 0.0)\n        \n             // After every \"tick\" of animator check if past time limit\n            self.action =\n            { [weak self] in\n                guard let strongSelf = self,\n                  (strongSelf.animator?.elapsedTime ?? 0.0) \u003e= strongSelf.finishTime else { return }\n                strongSelf.hasElapsedTimeExceededDuration = true\n                strongSelf.animator?.removeBehavior(strongSelf)\n            }\n        }\n    \n    }\n\n    func transitionDuration(using transitionContext: UIViewControllerContextTransitioning?) -\u003e TimeInterval\n    {\n        // Return the duration of the animation\n        return self.duration\n    }\n}\n\nextension DropOutAnimator: UIDynamicAnimatorDelegate\n{\n    func dynamicAnimatorDidPause(_ animator: UIDynamicAnimator)\n    {\n      // Animator has reached stasis\n      if self.isAppearing\n      {\n            // Check if we are out of time\n            if self.hasElapsedTimeExceededDuration\n            {\n                // Move to final positions\n                let toView = self.transitionContext?.viewController(forKey: .to)?.view\n                let containerView = self.transitionContext?.containerView\n                toView?.center = containerView?.center ?? .zero\n                self.hasElapsedTimeExceededDuration = false\n            }\n            \n            // Clean up and call completion\n            self.transitionContext?.completeTransition(!(self.transitionContext?.transitionWasCancelled ?? false))\n            self.childBehaviors.forEach { self.removeChildBehavior($0) }\n            animator.removeAllBehaviors()\n            self.transitionContext = nil\n    }\n    else\n    {\n        if let attachmentBehavior = self.attachmentBehavior\n        {\n            // If we have an attachment, we are at the end of part one and start part two.\n            self.removeChildBehavior(attachmentBehavior)\n            self.attachmentBehavior = nil\n            animator.addBehavior(self)\n            let duration = self.transitionDuration(using: self.transitionContext)\n            self.finishTime = 1.0 / 3.0 * duration + animator.elapsedTime\n        }\n        else\n        {\n            // Clean up and call completion\n            let fromView = self.transitionContext?.viewController(forKey: .from)?.view\n            let toView = self.transitionContext?.viewController(forKey: .to)?.view\n            fromView?.removeFromSuperview()\n            toView?.isUserInteractionEnabled = true\n            self.transitionContext?.completeTransition(!(self.transitionContext?.transitionWasCancelled ?? false))\n            self.childBehaviors.forEach { self.removeChildBehavior($0) }\n            animator.removeAllBehaviors()\n            self.transitionContext = nil\n        }\n    }\n}\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class DropOutAnimator: UIDynamicBehavior\n{\n    let duration: TimeInterval\n    let isAppearing: Bool\n\n    var transitionContext: UIViewControllerContextTransitioning?\n    var hasElapsedTimeExceededDuration = false\n    var finishTime: TimeInterval = 0.0\n    var collisionBehavior: UICollisionBehavior?\n    var attachmentBehavior: UIAttachmentBehavior?\n    var animator: UIDynamicAnimator?\n\n    init(duration: TimeInterval = 1.0,  isAppearing: Bool)\n    {\n        self.duration = duration\n        self.isAppearing = isAppearing\n        super.init()\n    }\n}\n\nextension DropOutAnimator: UIViewControllerAnimatedTransitioning\n{\n    func animateTransition(using transitionContext: UIViewControllerContextTransitioning)\n    {\n        // Get relevant views and view controllers from transitionContext\n        guard let fromVC = transitionContext.viewController(forKey: .from),\n              let toVC = transitionContext.viewController(forKey: .to),\n              let fromView = fromVC.view,\n              let toView = toVC.view else { return }\n    \n        let containerView = transitionContext.containerView\n        let duration = self.transitionDuration(using: transitionContext)\n    \n        // Hold refrence to transitionContext to notify it of completion\n        self.transitionContext = transitionContext\n    \n        // Create dynamic animator\n        let animator = UIDynamicAnimator(referenceView: containerView)\n        animator.delegate = self\n        self.animator = animator\n    \n        // Presenting Animation\n        if self.isAppearing\n        {\n            fromView.isUserInteractionEnabled = false\n        \n            // Position toView  just off-screen\n            let fromViewInitialFrame = transitionContext.initialFrame(for: fromVC)\n            var toViewInitialFrame = toView.frame\n            toViewInitialFrame.origin.y -= toViewInitialFrame.height\n            toViewInitialFrame.origin.x = fromViewInitialFrame.width * 0.5 - toViewInitialFrame.width * 0.5\n            toView.frame = toViewInitialFrame\n        \n            containerView.addSubview(toView)\n        \n            // Prevent rotation and adjust bounce\n            let bodyBehavior = UIDynamicItemBehavior(items: [toView])\n            bodyBehavior.elasticity = 0.7\n            bodyBehavior.allowsRotation = false\n        \n            // Add gravity at exaggerated magnitude so animation doesn't seem slow\n            let gravityBehavior = UIGravityBehavior(items: [toView])\n            gravityBehavior.magnitude = 10.0\n        \n            // Set collision bounds to include off-screen view and have collision in center \n            // where our final view should come to rest\n            let collisionBehavior = UICollisionBehavior(items: [toView])\n            let insets = UIEdgeInsets(top: toViewInitialFrame.minY, left: 0.0, bottom: fromViewInitialFrame.height * 0.5 - toViewInitialFrame.height * 0.5, right: 0.0)\n            collisionBehavior.setTranslatesReferenceBoundsIntoBoundary(with: insets)\n            self.collisionBehavior = collisionBehavior\n        \n            // Keep track of finish time in case we need to end the animator befor the animator pauses\n            self.finishTime = duration + (self.animator?.elapsedTime ?? 0.0)\n        \n            // Closure that is called after every \"tick\" of the animator\n            // Check if we exceed duration\n            self.action =\n            { [weak self] in\n                guard let strongSelf = self,\n                  (strongSelf.animator?.elapsedTime ?? 0.0) \u003e= strongSelf.finishTime else { return }\n                strongSelf.hasElapsedTimeExceededDuration = true\n                strongSelf.animator?.removeBehavior(strongSelf)\n            }\n        \n            // `DropOutAnimator` is a composit behavior, so add child behaviors to self\n            self.addChildBehavior(collisionBehavior)\n            self.addChildBehavior(bodyBehavior)\n            self.addChildBehavior(gravityBehavior)\n        \n            // Add self to dynamic animator\n            self.animator?.addBehavior(self)\n        }\n        // Dismissing Animation\n        else\n        {\n            // Create allow rotation and have a elastic item\n            let bodyBehavior = UIDynamicItemBehavior(items: [fromView])\n            bodyBehavior.elasticity = 0.8\n            bodyBehavior.angularResistance = 5.0\n            bodyBehavior.allowsRotation = true\n        \n            // Create gravity with exaggerated magnitude\n            let gravityBehavior = UIGravityBehavior(items: [fromView])\n            gravityBehavior.magnitude = 10.0\n        \n            // Collision boundary is set to have a floor just below the bottom of the screen\n            let collisionBehavior = UICollisionBehavior(items: [fromView])\n            let insets = UIEdgeInsets(top: 0.0, left: -1000, bottom: -225, right: -1000)\n            collisionBehavior.setTranslatesReferenceBoundsIntoBoundary(with: insets)\n            self.collisionBehavior = collisionBehavior\n        \n            // Attachment behavior so view will have effect of hanging from a rope\n            let offset = UIOffset(horizontal: 70.0, vertical: fromView.bounds.height * 0.5)\n            var anchorPoint = CGPoint(x: fromView.bounds.maxX - 40.0, y: fromView.bounds.minY)\n            anchorPoint = containerView.convert(anchorPoint, from: fromView)\n            let attachmentBehavior = UIAttachmentBehavior(item: fromView, offsetFromCenter: offset, attachedToAnchor: anchorPoint)\n            attachmentBehavior.frequency = 3.0\n            attachmentBehavior.damping = 3.0\n            self.attachmentBehavior = attachmentBehavior\n        \n            // `DropOutAnimator` is a composit behavior, so add child behaviors to self\n            self.addChildBehavior(collisionBehavior)\n            self.addChildBehavior(bodyBehavior)\n            self.addChildBehavior(gravityBehavior)\n            self.addChildBehavior(attachmentBehavior)\n        \n            // Add self to dynamic animator\n            self.animator?.addBehavior(self)\n        \n            // Animation has two parts part one is hanging from rope. \n            // Part two is bouncying off-screen\n            // Divide duration in two\n            self.finishTime = (2.0 / 3.0) * duration + (self.animator?.elapsedTime ?? 0.0)\n        \n             // After every \"tick\" of animator check if past time limit\n            self.action =\n            { [weak self] in\n                guard let strongSelf = self,\n                  (strongSelf.animator?.elapsedTime ?? 0.0) \u003e= strongSelf.finishTime else { return }\n                strongSelf.hasElapsedTimeExceededDuration = true\n                strongSelf.animator?.removeBehavior(strongSelf)\n            }\n        }\n    \n    }\n\n    func transitionDuration(using transitionContext: UIViewControllerContextTransitioning?) -\u003e TimeInterval\n    {\n        // Return the duration of the animation\n        return self.duration\n    }\n}\n\nextension DropOutAnimator: UIDynamicAnimatorDelegate\n{\n    func dynamicAnimatorDidPause(_ animator: UIDynamicAnimator)\n    {\n      // Animator has reached stasis\n      if self.isAppearing\n      {\n            // Check if we are out of time\n            if self.hasElapsedTimeExceededDuration\n            {\n                // Move to final positions\n                let toView = self.transitionContext?.viewController(forKey: .to)?.view\n                let containerView = self.transitionContext?.containerView\n                toView?.center = containerView?.center ?? .zero\n                self.hasElapsedTimeExceededDuration = false\n            }\n            \n            // Clean up and call completion\n            self.transitionContext?.completeTransition(!(self.transitionContext?.transitionWasCancelled ?? false))\n            self.childBehaviors.forEach { self.removeChildBehavior($0) }\n            animator.removeAllBehaviors()\n            self.transitionContext = nil\n    }\n    else\n    {\n        if let attachmentBehavior = self.attachmentBehavior\n        {\n            // If we have an attachment, we are at the end of part one and start part two.\n            self.removeChildBehavior(attachmentBehavior)\n            self.attachmentBehavior = nil\n            animator.addBehavior(self)\n            let duration = self.transitionDuration(using: self.transitionContext)\n            self.finishTime = 1.0 / 3.0 * duration + animator.elapsedTime\n        }\n        else\n        {\n            // Clean up and call completion\n            let fromView = self.transitionContext?.viewController(forKey: .from)?.view\n            let toView = self.transitionContext?.viewController(forKey: .to)?.view\n            fromView?.removeFromSuperview()\n            toView?.isUserInteractionEnabled = true\n            self.transitionContext?.completeTransition(!(self.transitionContext?.transitionWasCancelled ?? false))\n            self.childBehaviors.forEach { self.removeChildBehavior($0) }\n            animator.removeAllBehaviors()\n            self.transitionContext = nil\n        }\n    }\n}\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550441712890,
        "id": "1d5f21f4-4f45-4daa-a037-8b4189d270db",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550441712890,
        "parent_id": "b29f520a-f34f-47de-8247-0e132e4f3da9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Objective-C"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Objective-C"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550441712891,
        "id": "7ed8d15b-ed9b-49a4-bc11-f279bd6d94a6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550441712891,
        "parent_id": "b29f520a-f34f-47de-8247-0e132e4f3da9",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "@interface ObjcDropOutAnimator() \u003cUIDynamicAnimatorDelegate, UIViewControllerAnimatedTransitioning\u003e\n@property (nonatomic, strong) id\u003cUIViewControllerContextTransitioning\u003e transitionContext;\n@property (nonatomic, strong) UIDynamicAnimator *animator;\n@property (nonatomic, assign) NSTimeInterval finishTime;\n@property (nonatomic, assign) BOOL elapsedTimeExceededDuration;\n@property (nonatomic, assign, getter=isAppearing) BOOL appearing;\n@property (nonatomic, assign) NSTimeInterval duration;\n@property (nonatomic, strong) UIAttachmentBehavior *attachBehavior;\n@property (nonatomic, strong) UICollisionBehavior * collisionBehavior;\n\n@end\n\n@implementation ObjcDropOutAnimator\n\n- (instancetype)initWithDuration:(NSTimeInterval)duration appearing:(BOOL)appearing\n{\n    self = [super init];\n    if (self)\n    {\n        _duration = duration;\n        _appearing = appearing;\n    }\n    return self;\n}\n\n- (void) animateTransition:(id\u003cUIViewControllerContextTransitioning\u003e)transitionContext\n{\n    // Get relevant views and view controllers from transitionContext\n    UIViewController *fromVC = [transitionContext viewControllerForKey:UITransitionContextFromViewControllerKey];\n    UIViewController *toVC = [transitionContext viewControllerForKey:UITransitionContextToViewControllerKey];\n    UIView *fromView = fromVC.view;\n    UIView *toView = toVC.view;\n    \n    UIView *containerView = transitionContext.containerView;\n    NSTimeInterval duration = [self transitionDuration:transitionContext];\n    \n    // Hold refrence to transitionContext to notify it of completion\n    self.transitionContext = transitionContext;\n    \n    // Create dynamic animator\n    UIDynamicAnimator *animator = [[UIDynamicAnimator alloc]initWithReferenceView:containerView];\n    animator.delegate = self;\n    self.animator = animator;\n    \n    // Presenting Animation\n    if (self.isAppearing)\n    {\n        fromView.userInteractionEnabled = NO;\n        \n        // Position toView  just above screen\n        CGRect fromViewInitialFrame = [transitionContext initialFrameForViewController:fromVC];\n        CGRect toViewInitialFrame = toView.frame;\n        toViewInitialFrame.origin.y -= CGRectGetHeight(toViewInitialFrame);\n        toViewInitialFrame.origin.x = CGRectGetWidth(fromViewInitialFrame) * 0.5 - CGRectGetWidth(toViewInitialFrame) * 0.5;\n        toView.frame = toViewInitialFrame;\n        \n        [containerView addSubview:toView];\n        \n        // Prevent rotation and adjust bounce\n        UIDynamicItemBehavior *bodyBehavior = [[UIDynamicItemBehavior alloc]initWithItems:@[toView]];\n        bodyBehavior.elasticity = 0.7;\n        bodyBehavior.allowsRotation = NO;\n        \n        // Add gravity at exaggerated magnitude so animation doesn't seem slow\n        UIGravityBehavior *gravityBehavior = [[UIGravityBehavior alloc]initWithItems:@[toView]];\n        gravityBehavior.magnitude = 10.0f;\n        \n        // Set collision bounds to include off-screen view and have collision floor in center\n        // where our final view should come to rest\n        UICollisionBehavior *collisionBehavior = [[UICollisionBehavior alloc]initWithItems:@[toView]];\n        UIEdgeInsets insets = UIEdgeInsetsMake(CGRectGetMinY(toViewInitialFrame), 0.0, CGRectGetHeight(fromViewInitialFrame) * 0.5 - CGRectGetHeight(toViewInitialFrame) * 0.5, 0.0);\n        [collisionBehavior setTranslatesReferenceBoundsIntoBoundaryWithInsets:insets];\n        self.collisionBehavior = collisionBehavior;\n        \n        // Keep track of finish time in case we need to end the animator befor the animator pauses\n        self.finishTime = duration + self.animator.elapsedTime;\n        \n        // Closure that is called after every \"tick\" of the animator\n        // Check if we exceed duration\n        __weak ObjcDropOutAnimator *weakSelf = self;\n        self.action = ^{\n            __strong ObjcDropOutAnimator *strongSelf = weakSelf;\n            if (strongSelf)\n            {\n                if (strongSelf.animator.elapsedTime \u003e= strongSelf.finishTime)\n                {\n                    strongSelf.elapsedTimeExceededDuration = YES;\n                    [strongSelf.animator removeBehavior:strongSelf];\n                }\n            }\n        };\n        \n        // `DropOutAnimator` is a composit behavior, so add child behaviors to self\n        [self addChildBehavior:collisionBehavior];\n        [self addChildBehavior:bodyBehavior];\n        [self addChildBehavior:gravityBehavior];\n        \n        // Add self to dynamic animator\n        [self.animator addBehavior:self];\n    }\n    // Dismissing Animation\n    else\n    {\n        // Allow rotation and have a elastic item\n        UIDynamicItemBehavior *bodyBehavior = [[UIDynamicItemBehavior alloc] initWithItems:@[fromView]];\n        bodyBehavior.elasticity = 0.8;\n        bodyBehavior.angularResistance = 5.0;\n        bodyBehavior.allowsRotation = YES;\n        \n        // Create gravity with exaggerated magnitude\n        UIGravityBehavior *gravityBehavior = [[UIGravityBehavior alloc] initWithItems:@[fromView]];\n        gravityBehavior.magnitude = 10.0f;\n        \n        // Collision boundary is set to have a floor just below the bottom of the screen\n        UICollisionBehavior *collisionBehavior = [[UICollisionBehavior alloc] initWithItems:@[fromView]];\n        UIEdgeInsets insets = UIEdgeInsetsMake(0, -1000, -225, -1000);\n        [collisionBehavior setTranslatesReferenceBoundsIntoBoundaryWithInsets:insets];\n        self.collisionBehavior = collisionBehavior;\n        \n        // Attachment behavior so view will have effect of hanging from a rope\n        UIOffset offset = UIOffsetMake(70, -(CGRectGetHeight(fromView.bounds) / 2.0));\n        \n        CGPoint anchorPoint = CGPointMake(CGRectGetMaxX(fromView.bounds) - 40,\n                                          CGRectGetMinY(fromView.bounds));\n        anchorPoint = [containerView convertPoint:anchorPoint fromView:fromView];\n        UIAttachmentBehavior *attachBehavior = [[UIAttachmentBehavior alloc] initWithItem:fromView offsetFromCenter:offset attachedToAnchor:anchorPoint];\n        attachBehavior.frequency = 3.0;\n        attachBehavior.damping = 0.3;\n        attachBehavior.length = 40;\n        self.attachBehavior = attachBehavior;\n        \n        // `DropOutAnimator` is a composit behavior, so add child behaviors to self\n        [self addChildBehavior:collisionBehavior];\n        [self addChildBehavior:bodyBehavior];\n        [self addChildBehavior:gravityBehavior];\n        [self addChildBehavior:attachBehavior];\n        \n        // Add self to dynamic animator\n        [self.animator addBehavior:self];\n        \n        // Animation has two parts part one is hanging from rope.\n        // Part two is bouncying off-screen\n        // Divide duration in two\n        self.finishTime = (2./3.) * duration + [self.animator elapsedTime];\n        \n        // After every \"tick\" of animator check if past time limit\n        __weak ObjcDropOutAnimator *weakSelf = self;\n        self.action = ^{\n            __strong ObjcDropOutAnimator *strongSelf = weakSelf;\n            if (strongSelf)\n            {\n                if ([strongSelf.animator elapsedTime] \u003e= strongSelf.finishTime)\n                {\n                    strongSelf.elapsedTimeExceededDuration = YES;\n                    [strongSelf.animator removeBehavior:strongSelf];\n                }\n            }\n        };\n    }\n}\n\n- (NSTimeInterval)transitionDuration:(id\u003cUIViewControllerContextTransitioning\u003e)transitionContext\n{\n    return self.duration;\n}\n\n- (void)dynamicAnimatorDidPause:(UIDynamicAnimator *)animator\n{\n    // Animator has reached stasis\n    if (self.isAppearing)\n    {\n        // Check if we are out of time\n        if (self.elapsedTimeExceededDuration)\n        {\n            // Move to final positions\n            UIView *toView = [self.transitionContext viewControllerForKey:UITransitionContextToViewControllerKey].view;\n            UIView *containerView = [self.transitionContext containerView];\n            toView.center = containerView.center;\n            self.elapsedTimeExceededDuration = NO;\n        }\n        \n        // Clean up and call completion\n        [self.transitionContext completeTransition:![self.transitionContext transitionWasCancelled]];\n        for (UIDynamicBehavior *behavior in self.childBehaviors)\n        {\n            [self removeChildBehavior:behavior];\n        }\n        [animator removeAllBehaviors];\n        self.transitionContext = nil;\n    }\n    // Dismissing\n    else\n    {\n        if (self.attachBehavior)\n        {\n            // If we have an attachment, we are at the end of part one and start part two.\n            [self removeChildBehavior:self.attachBehavior];\n            self.attachBehavior = nil;\n            [animator addBehavior:self];\n            NSTimeInterval duration = [self transitionDuration:self.transitionContext];\n            self.finishTime = 1./3. * duration + [animator elapsedTime];\n        }\n        else\n        {\n            // Clean up and call completion\n            UIView *fromView = [self.transitionContext viewControllerForKey:UITransitionContextFromViewControllerKey].view;\n            UIView *toView = [self.transitionContext viewControllerForKey:UITransitionContextToViewControllerKey].view;\n            [fromView removeFromSuperview];\n            toView.userInteractionEnabled = YES;\n            \n            [self.transitionContext completeTransition:![self.transitionContext transitionWasCancelled]];\n            for (UIDynamicBehavior *behavior in self.childBehaviors)\n            {\n                [self removeChildBehavior:behavior];\n            }\n            [animator removeAllBehaviors];\n            self.transitionContext = nil;\n        }\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "@interface ObjcDropOutAnimator() \u003cUIDynamicAnimatorDelegate, UIViewControllerAnimatedTransitioning\u003e\n@property (nonatomic, strong) id\u003cUIViewControllerContextTransitioning\u003e transitionContext;\n@property (nonatomic, strong) UIDynamicAnimator *animator;\n@property (nonatomic, assign) NSTimeInterval finishTime;\n@property (nonatomic, assign) BOOL elapsedTimeExceededDuration;\n@property (nonatomic, assign, getter=isAppearing) BOOL appearing;\n@property (nonatomic, assign) NSTimeInterval duration;\n@property (nonatomic, strong) UIAttachmentBehavior *attachBehavior;\n@property (nonatomic, strong) UICollisionBehavior * collisionBehavior;\n\n@end\n\n@implementation ObjcDropOutAnimator\n\n- (instancetype)initWithDuration:(NSTimeInterval)duration appearing:(BOOL)appearing\n{\n    self = [super init];\n    if (self)\n    {\n        _duration = duration;\n        _appearing = appearing;\n    }\n    return self;\n}\n\n- (void) animateTransition:(id\u003cUIViewControllerContextTransitioning\u003e)transitionContext\n{\n    // Get relevant views and view controllers from transitionContext\n    UIViewController *fromVC = [transitionContext viewControllerForKey:UITransitionContextFromViewControllerKey];\n    UIViewController *toVC = [transitionContext viewControllerForKey:UITransitionContextToViewControllerKey];\n    UIView *fromView = fromVC.view;\n    UIView *toView = toVC.view;\n    \n    UIView *containerView = transitionContext.containerView;\n    NSTimeInterval duration = [self transitionDuration:transitionContext];\n    \n    // Hold refrence to transitionContext to notify it of completion\n    self.transitionContext = transitionContext;\n    \n    // Create dynamic animator\n    UIDynamicAnimator *animator = [[UIDynamicAnimator alloc]initWithReferenceView:containerView];\n    animator.delegate = self;\n    self.animator = animator;\n    \n    // Presenting Animation\n    if (self.isAppearing)\n    {\n        fromView.userInteractionEnabled = NO;\n        \n        // Position toView  just above screen\n        CGRect fromViewInitialFrame = [transitionContext initialFrameForViewController:fromVC];\n        CGRect toViewInitialFrame = toView.frame;\n        toViewInitialFrame.origin.y -= CGRectGetHeight(toViewInitialFrame);\n        toViewInitialFrame.origin.x = CGRectGetWidth(fromViewInitialFrame) * 0.5 - CGRectGetWidth(toViewInitialFrame) * 0.5;\n        toView.frame = toViewInitialFrame;\n        \n        [containerView addSubview:toView];\n        \n        // Prevent rotation and adjust bounce\n        UIDynamicItemBehavior *bodyBehavior = [[UIDynamicItemBehavior alloc]initWithItems:@[toView]];\n        bodyBehavior.elasticity = 0.7;\n        bodyBehavior.allowsRotation = NO;\n        \n        // Add gravity at exaggerated magnitude so animation doesn't seem slow\n        UIGravityBehavior *gravityBehavior = [[UIGravityBehavior alloc]initWithItems:@[toView]];\n        gravityBehavior.magnitude = 10.0f;\n        \n        // Set collision bounds to include off-screen view and have collision floor in center\n        // where our final view should come to rest\n        UICollisionBehavior *collisionBehavior = [[UICollisionBehavior alloc]initWithItems:@[toView]];\n        UIEdgeInsets insets = UIEdgeInsetsMake(CGRectGetMinY(toViewInitialFrame), 0.0, CGRectGetHeight(fromViewInitialFrame) * 0.5 - CGRectGetHeight(toViewInitialFrame) * 0.5, 0.0);\n        [collisionBehavior setTranslatesReferenceBoundsIntoBoundaryWithInsets:insets];\n        self.collisionBehavior = collisionBehavior;\n        \n        // Keep track of finish time in case we need to end the animator befor the animator pauses\n        self.finishTime = duration + self.animator.elapsedTime;\n        \n        // Closure that is called after every \"tick\" of the animator\n        // Check if we exceed duration\n        __weak ObjcDropOutAnimator *weakSelf = self;\n        self.action = ^{\n            __strong ObjcDropOutAnimator *strongSelf = weakSelf;\n            if (strongSelf)\n            {\n                if (strongSelf.animator.elapsedTime \u003e= strongSelf.finishTime)\n                {\n                    strongSelf.elapsedTimeExceededDuration = YES;\n                    [strongSelf.animator removeBehavior:strongSelf];\n                }\n            }\n        };\n        \n        // `DropOutAnimator` is a composit behavior, so add child behaviors to self\n        [self addChildBehavior:collisionBehavior];\n        [self addChildBehavior:bodyBehavior];\n        [self addChildBehavior:gravityBehavior];\n        \n        // Add self to dynamic animator\n        [self.animator addBehavior:self];\n    }\n    // Dismissing Animation\n    else\n    {\n        // Allow rotation and have a elastic item\n        UIDynamicItemBehavior *bodyBehavior = [[UIDynamicItemBehavior alloc] initWithItems:@[fromView]];\n        bodyBehavior.elasticity = 0.8;\n        bodyBehavior.angularResistance = 5.0;\n        bodyBehavior.allowsRotation = YES;\n        \n        // Create gravity with exaggerated magnitude\n        UIGravityBehavior *gravityBehavior = [[UIGravityBehavior alloc] initWithItems:@[fromView]];\n        gravityBehavior.magnitude = 10.0f;\n        \n        // Collision boundary is set to have a floor just below the bottom of the screen\n        UICollisionBehavior *collisionBehavior = [[UICollisionBehavior alloc] initWithItems:@[fromView]];\n        UIEdgeInsets insets = UIEdgeInsetsMake(0, -1000, -225, -1000);\n        [collisionBehavior setTranslatesReferenceBoundsIntoBoundaryWithInsets:insets];\n        self.collisionBehavior = collisionBehavior;\n        \n        // Attachment behavior so view will have effect of hanging from a rope\n        UIOffset offset = UIOffsetMake(70, -(CGRectGetHeight(fromView.bounds) / 2.0));\n        \n        CGPoint anchorPoint = CGPointMake(CGRectGetMaxX(fromView.bounds) - 40,\n                                          CGRectGetMinY(fromView.bounds));\n        anchorPoint = [containerView convertPoint:anchorPoint fromView:fromView];\n        UIAttachmentBehavior *attachBehavior = [[UIAttachmentBehavior alloc] initWithItem:fromView offsetFromCenter:offset attachedToAnchor:anchorPoint];\n        attachBehavior.frequency = 3.0;\n        attachBehavior.damping = 0.3;\n        attachBehavior.length = 40;\n        self.attachBehavior = attachBehavior;\n        \n        // `DropOutAnimator` is a composit behavior, so add child behaviors to self\n        [self addChildBehavior:collisionBehavior];\n        [self addChildBehavior:bodyBehavior];\n        [self addChildBehavior:gravityBehavior];\n        [self addChildBehavior:attachBehavior];\n        \n        // Add self to dynamic animator\n        [self.animator addBehavior:self];\n        \n        // Animation has two parts part one is hanging from rope.\n        // Part two is bouncying off-screen\n        // Divide duration in two\n        self.finishTime = (2./3.) * duration + [self.animator elapsedTime];\n        \n        // After every \"tick\" of animator check if past time limit\n        __weak ObjcDropOutAnimator *weakSelf = self;\n        self.action = ^{\n            __strong ObjcDropOutAnimator *strongSelf = weakSelf;\n            if (strongSelf)\n            {\n                if ([strongSelf.animator elapsedTime] \u003e= strongSelf.finishTime)\n                {\n                    strongSelf.elapsedTimeExceededDuration = YES;\n                    [strongSelf.animator removeBehavior:strongSelf];\n                }\n            }\n        };\n    }\n}\n\n- (NSTimeInterval)transitionDuration:(id\u003cUIViewControllerContextTransitioning\u003e)transitionContext\n{\n    return self.duration;\n}\n\n- (void)dynamicAnimatorDidPause:(UIDynamicAnimator *)animator\n{\n    // Animator has reached stasis\n    if (self.isAppearing)\n    {\n        // Check if we are out of time\n        if (self.elapsedTimeExceededDuration)\n        {\n            // Move to final positions\n            UIView *toView = [self.transitionContext viewControllerForKey:UITransitionContextToViewControllerKey].view;\n            UIView *containerView = [self.transitionContext containerView];\n            toView.center = containerView.center;\n            self.elapsedTimeExceededDuration = NO;\n        }\n        \n        // Clean up and call completion\n        [self.transitionContext completeTransition:![self.transitionContext transitionWasCancelled]];\n        for (UIDynamicBehavior *behavior in self.childBehaviors)\n        {\n            [self removeChildBehavior:behavior];\n        }\n        [animator removeAllBehaviors];\n        self.transitionContext = nil;\n    }\n    // Dismissing\n    else\n    {\n        if (self.attachBehavior)\n        {\n            // If we have an attachment, we are at the end of part one and start part two.\n            [self removeChildBehavior:self.attachBehavior];\n            self.attachBehavior = nil;\n            [animator addBehavior:self];\n            NSTimeInterval duration = [self transitionDuration:self.transitionContext];\n            self.finishTime = 1./3. * duration + [animator elapsedTime];\n        }\n        else\n        {\n            // Clean up and call completion\n            UIView *fromView = [self.transitionContext viewControllerForKey:UITransitionContextFromViewControllerKey].view;\n            UIView *toView = [self.transitionContext viewControllerForKey:UITransitionContextToViewControllerKey].view;\n            [fromView removeFromSuperview];\n            toView.userInteractionEnabled = YES;\n            \n            [self.transitionContext completeTransition:![self.transitionContext transitionWasCancelled]];\n            for (UIDynamicBehavior *behavior in self.childBehaviors)\n            {\n                [self removeChildBehavior:behavior];\n            }\n            [animator removeAllBehaviors];\n            self.transitionContext = nil;\n        }\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550441712891,
        "id": "f8ef827a-c1b3-459f-9515-13858cbdb1f9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550441712891,
        "parent_id": "b29f520a-f34f-47de-8247-0e132e4f3da9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As composite behavior, "
            ],
            [
              "DropOutAnimator",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", can combine a number of different behaviors to perform its presenting and dismissing animations. "
            ],
            [
              "DropOutAnimator",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " also demonstrates how to use the "
            ],
            [
              "action",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " block of a behavior to inspect the locations of its items as well as the time elapsed a technique that can be used to remove views that move offscreen or truncate animations that have yet to reach stasis."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "As composite behavior, "
          },
          {
            "Text": "DropOutAnimator",
            "AttrFlags": 2
          },
          {
            "Text": ", can combine a number of different behaviors to perform its presenting and dismissing animations. "
          },
          {
            "Text": "DropOutAnimator",
            "AttrFlags": 2
          },
          {
            "Text": " also demonstrates how to use the "
          },
          {
            "Text": "action",
            "AttrFlags": 2
          },
          {
            "Text": " block of a behavior to inspect the locations of its items as well as the time elapsed a technique that can be used to remove views that move offscreen or truncate animations that have yet to reach stasis."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550441712895,
        "id": "6082ad7c-faf3-4ee1-b286-124a0915f659",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550441712895,
        "parent_id": "b29f520a-f34f-47de-8247-0e132e4f3da9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For more information "
            ],
            [
              "2013 WWDC Session “Advanced Techniques with UIKit Dynamics”",
              [
                [
                  "a",
                  "https://developer.apple.com/videos/play/wwdc2013/221/"
                ]
              ]
            ],
            [
              " as well as "
            ],
            [
              "SOLPresentingFun",
              [
                [
                  "a",
                  "https://github.com/soleares/SOLPresentingFun"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For more information "
          },
          {
            "Text": "2013 WWDC Session “Advanced Techniques with UIKit Dynamics”",
            "Link": "https://developer.apple.com/videos/play/wwdc2013/221/"
          },
          {
            "Text": " as well as "
          },
          {
            "Text": "SOLPresentingFun",
            "Link": "https://github.com/soleares/SOLPresentingFun"
          }
        ]
      }
    ],
    "title": "UIDynamicBehavior Driven Custom Transition",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}