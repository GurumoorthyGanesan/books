{
  "ID": "af859f31-4678-4a92-bcda-e73c9d3fcd67",
  "Root": {
    "alive": true,
    "content": [
      "f918b5c0-5c1a-4efb-af7b-049942702663",
      "d0c81c61-4fcd-461d-be29-1da2db669075",
      "7bee3f7c-867a-46b1-8e17-e50185da9710",
      "5db2cb65-e51a-4ce7-9148-5752f2899ed1",
      "2642916a-d613-43cf-9b62-d7af808de6ce",
      "1884e48c-d35e-4916-bfeb-da8701e15d6a",
      "d369f08f-fbf4-4271-b93e-0fb11cff8fb4",
      "edb308af-c291-4705-880e-19e3ca850d89",
      "243d5825-5728-4463-989b-b398602a43c3",
      "ebc180fc-d50a-41f1-bc1b-3da7c3e3b0f2",
      "9361c60f-74fd-4541-9783-c5ec8416682f",
      "feb6bafb-1415-4325-848f-b4578c2af647",
      "a57f5cef-35fc-411f-8069-1d01b83e89cb",
      "50acbe84-5e1f-40c3-b8e8-5caa4726202c",
      "88ed37f8-826b-44ee-9e4e-5e8a0fbaae62",
      "99b57ca0-c89c-4401-9535-382f954c9643",
      "2e47ad59-24a2-41ff-9d9f-78b8c3f1a925",
      "7030da25-e505-43b8-bf24-276641a8eeb8",
      "0ee520da-4160-46ed-a9d4-2f74e4608899",
      "c2759f72-ee80-4cc8-9cb7-a83c34b56a13",
      "71475516-31b9-40dc-a8db-f84c7d2002b8",
      "9cb07755-22f1-41e4-b2a7-038f271dc7c5"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550396188987,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "af859f31-4678-4a92-bcda-e73c9d3fcd67",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550650260000,
    "parent_id": "2ea198f9-ccd0-48dc-8c00-885293d6cd73",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Sending a POST Request with arguments using NSURLSession in Objective-C"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550396188982,
        "id": "f918b5c0-5c1a-4efb-af7b-049942702663",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550396188982,
        "parent_id": "af859f31-4678-4a92-bcda-e73c9d3fcd67",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "There are two common ways to encode a POST request body: URL encoding (application/x-www-form-urlencoded) and form data (multipart/form-data). Much of the code is similar, but the way you construct the body data is different."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "There are two common ways to encode a POST request body: URL encoding (application/x-www-form-urlencoded) and form data (multipart/form-data). Much of the code is similar, but the way you construct the body data is different."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550396188984,
        "id": "d0c81c61-4fcd-461d-be29-1da2db669075",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550396188984,
        "parent_id": "af859f31-4678-4a92-bcda-e73c9d3fcd67",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Sending a request using URL encoding",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Sending a request using URL encoding",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550396188985,
        "id": "7bee3f7c-867a-46b1-8e17-e50185da9710",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550396188985,
        "parent_id": "af859f31-4678-4a92-bcda-e73c9d3fcd67",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Be it you have a server for your small application or your working in a team with a full out back-end engineer, you’ll want to talk to that server at one point with your iOS application."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Be it you have a server for your small application or your working in a team with a full out back-end engineer, you’ll want to talk to that server at one point with your iOS application."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550396188985,
        "id": "5db2cb65-e51a-4ce7-9148-5752f2899ed1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550396188985,
        "parent_id": "af859f31-4678-4a92-bcda-e73c9d3fcd67",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In the following code we will be composing a string of arguments that the destination server script will use to do something that changes depending on your case. For example we may want to send the string:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In the following code we will be composing a string of arguments that the destination server script will use to do something that changes depending on your case. For example we may want to send the string:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550396188985,
        "id": "2642916a-d613-43cf-9b62-d7af808de6ce",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550396188985,
        "parent_id": "af859f31-4678-4a92-bcda-e73c9d3fcd67",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "name=Brendon\u0026password=abcde"
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "name=Brendon\u0026password=abcde"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550396188985,
        "id": "1884e48c-d35e-4916-bfeb-da8701e15d6a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550396188985,
        "parent_id": "af859f31-4678-4a92-bcda-e73c9d3fcd67",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To the server when a user signs up to your application, so the server can store this information in a database."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To the server when a user signs up to your application, so the server can store this information in a database."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550396188985,
        "id": "d369f08f-fbf4-4271-b93e-0fb11cff8fb4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550396188985,
        "parent_id": "af859f31-4678-4a92-bcda-e73c9d3fcd67",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Let’s get started. You’ll want to create a NSURLSession POST request with the following code."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Let’s get started. You’ll want to create a NSURLSession POST request with the following code."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550396188985,
        "id": "edb308af-c291-4705-880e-19e3ca850d89",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550396188985,
        "parent_id": "af859f31-4678-4a92-bcda-e73c9d3fcd67",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// Create the configuration, which is necessary so we can cancel cacheing amongst other things.\nNSURLSessionConfiguration * defaultConfigObject = [NSURLSessionConfiguration defaultSessionConfiguration];\n// Disables cacheing\ndefaultConfigObject.requestCachePolicy = NSURLRequestReloadIgnoringLocalCacheData;\nNSURLSession * defaultSession = [NSURLSession sessionWithConfiguration:defaultConfigObject delegate:self delegateQueue:[NSOperationQueue mainQueue]];\n\nNSString * scriptURL = [NSString stringWithFormat:@\"https://server.io/api/script.php\"];\n//Converts the URL string to a URL usable by NSURLSession\nNSMutableURLRequest * urlRequest = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:scriptURL]];\nNSString * postDataString = [NSString stringWithFormat:@\"name=%@\u0026password=%@\", [self nameString], [self URLEncode:passwordString]];\n[urlRequest setHTTPMethod:@\"POST\"];\n[urlRequest setHTTPBody:[postDataString dataUsingEncoding:NSUTF8StringEncoding]];\n\nNSURLSessionDataTask * dataTask = [defaultSession dataTaskWithRequest:urlRequest];\n// Fire the data task.\n[dataTask resume];"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// Create the configuration, which is necessary so we can cancel cacheing amongst other things.\nNSURLSessionConfiguration * defaultConfigObject = [NSURLSessionConfiguration defaultSessionConfiguration];\n// Disables cacheing\ndefaultConfigObject.requestCachePolicy = NSURLRequestReloadIgnoringLocalCacheData;\nNSURLSession * defaultSession = [NSURLSession sessionWithConfiguration:defaultConfigObject delegate:self delegateQueue:[NSOperationQueue mainQueue]];\n\nNSString * scriptURL = [NSString stringWithFormat:@\"https://server.io/api/script.php\"];\n//Converts the URL string to a URL usable by NSURLSession\nNSMutableURLRequest * urlRequest = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:scriptURL]];\nNSString * postDataString = [NSString stringWithFormat:@\"name=%@\u0026password=%@\", [self nameString], [self URLEncode:passwordString]];\n[urlRequest setHTTPMethod:@\"POST\"];\n[urlRequest setHTTPBody:[postDataString dataUsingEncoding:NSUTF8StringEncoding]];\n\nNSURLSessionDataTask * dataTask = [defaultSession dataTaskWithRequest:urlRequest];\n// Fire the data task.\n[dataTask resume];",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550396188986,
        "id": "243d5825-5728-4463-989b-b398602a43c3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550396188986,
        "parent_id": "af859f31-4678-4a92-bcda-e73c9d3fcd67",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The above code just created and fired the POST request to the server. Remember that the script URL and the POST data string changes depending on your situation. If you’re reading this, you’ll know what to fill those variables with."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The above code just created and fired the POST request to the server. Remember that the script URL and the POST data string changes depending on your situation. If you’re reading this, you’ll know what to fill those variables with."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550396188986,
        "id": "ebc180fc-d50a-41f1-bc1b-3da7c3e3b0f2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550396188986,
        "parent_id": "af859f31-4678-4a92-bcda-e73c9d3fcd67",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You’ll also need to add a small method that does the URL encoding:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You’ll also need to add a small method that does the URL encoding:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550396188986,
        "id": "9361c60f-74fd-4541-9783-c5ec8416682f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550396188986,
        "parent_id": "af859f31-4678-4a92-bcda-e73c9d3fcd67",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "- (NSString *)URLEncode:(NSString *)originalString encoding:(NSStringEncoding)encoding\n{\n    return (__bridge_transfer NSString *)CFURLCreateStringByAddingPercentEscapes(\n        kCFAllocatorDefault,\n        (__bridge CFStringRef)originalString,\n        NULL,\n        CFSTR(\":/?#[]@!$\u0026'()*+,;=\"),\n        CFStringConvertNSStringEncodingToEncoding(encoding));\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "- (NSString *)URLEncode:(NSString *)originalString encoding:(NSStringEncoding)encoding\n{\n    return (__bridge_transfer NSString *)CFURLCreateStringByAddingPercentEscapes(\n        kCFAllocatorDefault,\n        (__bridge CFStringRef)originalString,\n        NULL,\n        CFSTR(\":/?#[]@!$\u0026'()*+,;=\"),\n        CFStringConvertNSStringEncodingToEncoding(encoding));\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550396188986,
        "id": "feb6bafb-1415-4325-848f-b4578c2af647",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550396188986,
        "parent_id": "af859f31-4678-4a92-bcda-e73c9d3fcd67",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "So, when the server is finished processing this data it will send a return to your iOS app. So we need to process this return, but how?"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "So, when the server is finished processing this data it will send a return to your iOS app. So we need to process this return, but how?"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550396188986,
        "id": "a57f5cef-35fc-411f-8069-1d01b83e89cb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550396188986,
        "parent_id": "af859f31-4678-4a92-bcda-e73c9d3fcd67",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We use event-driven programming and use NSURLSession’s delegate methods. This means as the server sends back a response these methods will start triggering. The following 5 methods are the ones that’ll be triggered throughout the ENTIRE request, each time one is made:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "We use event-driven programming and use NSURLSession’s delegate methods. This means as the server sends back a response these methods will start triggering. The following 5 methods are the ones that’ll be triggered throughout the ENTIRE request, each time one is made:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550396188986,
        "id": "50acbe84-5e1f-40c3-b8e8-5caa4726202c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550396188986,
        "parent_id": "af859f31-4678-4a92-bcda-e73c9d3fcd67",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "- (void)URLSession:(NSURLSession *)session dataTask:(NSURLSessionDataTask *)dataTask didReceiveResponse:(NSURLResponse *)response\n completionHandler:(void (^)(NSURLSessionResponseDisposition disposition))completionHandler;\n\n- (void)URLSession:(NSURLSession *)session dataTask:(NSURLSessionDataTask *)dataTask didReceiveData:(NSData *)data;\n\n- (void)URLSession:(NSURLSession *)session task:(NSURLSessionTask *)task didCompleteWithError:(NSError *)error;\n\n- (void)URLSession:(NSURLSession *)session didReceiveChallenge:(NSURLAuthenticationChallenge *)challenge completionHandler:(void (^)(NSURLSessionAuthChallengeDisposition, NSURLCredential *))completionHandler;\n\n- (void)URLSession:(NSURLSession *)session task:(NSURLSessionTask *)task didReceiveChallenge:(NSURLAuthenticationChallenge *)challenge completionHandler:(void (^)(NSURLSessionAuthChallengeDisposition, NSURLCredential * _Nullable))completionHandler;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "- (void)URLSession:(NSURLSession *)session dataTask:(NSURLSessionDataTask *)dataTask didReceiveResponse:(NSURLResponse *)response\n completionHandler:(void (^)(NSURLSessionResponseDisposition disposition))completionHandler;\n\n- (void)URLSession:(NSURLSession *)session dataTask:(NSURLSessionDataTask *)dataTask didReceiveData:(NSData *)data;\n\n- (void)URLSession:(NSURLSession *)session task:(NSURLSessionTask *)task didCompleteWithError:(NSError *)error;\n\n- (void)URLSession:(NSURLSession *)session didReceiveChallenge:(NSURLAuthenticationChallenge *)challenge completionHandler:(void (^)(NSURLSessionAuthChallengeDisposition, NSURLCredential *))completionHandler;\n\n- (void)URLSession:(NSURLSession *)session task:(NSURLSessionTask *)task didReceiveChallenge:(NSURLAuthenticationChallenge *)challenge completionHandler:(void (^)(NSURLSessionAuthChallengeDisposition, NSURLCredential * _Nullable))completionHandler;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550396188986,
        "id": "88ed37f8-826b-44ee-9e4e-5e8a0fbaae62",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550396188986,
        "parent_id": "af859f31-4678-4a92-bcda-e73c9d3fcd67",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Below you’ll see the above methods used in context. Each of their purposes are pretty self-explanatory thanks to Apple, but I’ve commented their uses anyway:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Below you’ll see the above methods used in context. Each of their purposes are pretty self-explanatory thanks to Apple, but I’ve commented their uses anyway:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550396188986,
        "id": "99b57ca0-c89c-4401-9535-382f954c9643",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550396188986,
        "parent_id": "af859f31-4678-4a92-bcda-e73c9d3fcd67",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// Response handling delegates\n- (void)URLSession:(NSURLSession *)session dataTask:(NSURLSessionDataTask *)dataTask didReceiveResponse:(NSURLResponse *)response\n completionHandler:(void (^)(NSURLSessionResponseDisposition disposition))completionHandler{\n    // Handler allows us to receive and parse responses from the server\n    completionHandler(NSURLSessionResponseAllow);\n}\n\n- (void)URLSession:(NSURLSession *)session dataTask:(NSURLSessionDataTask *)dataTask didReceiveData:(NSData *)data{\n\n    // Parse the JSON that came in into an NSDictionary\n    NSError * err = nil;\n    NSDictionary * jsonDict = [NSJSONSerialization JSONObjectWithData:data options:NSJSONReadingAllowFragments error:\u0026err];\n\n    if (!err){ // if no error occurred, parse the array of objects as normal\n        // Parse the JSON dictionary 'jsonDict' here\n    }else{ // an error occurred so we need to let the user know\n        // Handle your error here\n    }\n}\n\n// Error handling delegate\n- (void)URLSession:(NSURLSession *)session task:(NSURLSessionTask *)task didCompleteWithError:(NSError *)error{\n    if(error == nil){\n        // Download from API was successful\n        NSLog(@\"Data Network Request Did Complete Successfully.\");\n    }else{\n        // Describes and logs the error preventing us from receiving a response\n        NSLog(@\"Error: %@\", [error userInfo]);\n\n        // Handle network error, letting the user know what happened.\n    }\n}\n\n// When the session receives a challenge (because of iOS 9 App Transport Security blocking non-valid SSL certificates) we use the following methods to tell NSURLSession \"Chill out, I can trust me\".\n// The following is not necessary unless your server is using HTTP, not HTTPS\n\n- (void)URLSession:(NSURLSession *)session didReceiveChallenge:(NSURLAuthenticationChallenge *)challenge completionHandler:(void (^)(NSURLSessionAuthChallengeDisposition, NSURLCredential *))completionHandler{\n    if([challenge.protectionSpace.authenticationMethod isEqualToString:NSURLAuthenticationMethodServerTrust]){\n        if([challenge.protectionSpace.host isEqualToString:@\"DomainNameOfServer.io\"]){\n            NSURLCredential * credential = [NSURLCredential credentialForTrust:challenge.protectionSpace.serverTrust];\n            completionHandler(NSURLSessionAuthChallengeUseCredential,credential);\n        }\n    }\n}\n\n- (void)URLSession:(NSURLSession *)session task:(NSURLSessionTask *)task didReceiveChallenge:(NSURLAuthenticationChallenge *)challenge completionHandler:(void (^)(NSURLSessionAuthChallengeDisposition, NSURLCredential * _Nullable))completionHandler{\n    if([challenge.protectionSpace.authenticationMethod isEqualToString:NSURLAuthenticationMethodServerTrust]){\n        if([challenge.protectionSpace.host isEqualToString:@\"DomainNameOfServer.io\"]){\n            NSURLCredential * credential = [NSURLCredential credentialForTrust:challenge.protectionSpace.serverTrust];\n            completionHandler(NSURLSessionAuthChallengeUseCredential,credential);\n        }\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// Response handling delegates\n- (void)URLSession:(NSURLSession *)session dataTask:(NSURLSessionDataTask *)dataTask didReceiveResponse:(NSURLResponse *)response\n completionHandler:(void (^)(NSURLSessionResponseDisposition disposition))completionHandler{\n    // Handler allows us to receive and parse responses from the server\n    completionHandler(NSURLSessionResponseAllow);\n}\n\n- (void)URLSession:(NSURLSession *)session dataTask:(NSURLSessionDataTask *)dataTask didReceiveData:(NSData *)data{\n\n    // Parse the JSON that came in into an NSDictionary\n    NSError * err = nil;\n    NSDictionary * jsonDict = [NSJSONSerialization JSONObjectWithData:data options:NSJSONReadingAllowFragments error:\u0026err];\n\n    if (!err){ // if no error occurred, parse the array of objects as normal\n        // Parse the JSON dictionary 'jsonDict' here\n    }else{ // an error occurred so we need to let the user know\n        // Handle your error here\n    }\n}\n\n// Error handling delegate\n- (void)URLSession:(NSURLSession *)session task:(NSURLSessionTask *)task didCompleteWithError:(NSError *)error{\n    if(error == nil){\n        // Download from API was successful\n        NSLog(@\"Data Network Request Did Complete Successfully.\");\n    }else{\n        // Describes and logs the error preventing us from receiving a response\n        NSLog(@\"Error: %@\", [error userInfo]);\n\n        // Handle network error, letting the user know what happened.\n    }\n}\n\n// When the session receives a challenge (because of iOS 9 App Transport Security blocking non-valid SSL certificates) we use the following methods to tell NSURLSession \"Chill out, I can trust me\".\n// The following is not necessary unless your server is using HTTP, not HTTPS\n\n- (void)URLSession:(NSURLSession *)session didReceiveChallenge:(NSURLAuthenticationChallenge *)challenge completionHandler:(void (^)(NSURLSessionAuthChallengeDisposition, NSURLCredential *))completionHandler{\n    if([challenge.protectionSpace.authenticationMethod isEqualToString:NSURLAuthenticationMethodServerTrust]){\n        if([challenge.protectionSpace.host isEqualToString:@\"DomainNameOfServer.io\"]){\n            NSURLCredential * credential = [NSURLCredential credentialForTrust:challenge.protectionSpace.serverTrust];\n            completionHandler(NSURLSessionAuthChallengeUseCredential,credential);\n        }\n    }\n}\n\n- (void)URLSession:(NSURLSession *)session task:(NSURLSessionTask *)task didReceiveChallenge:(NSURLAuthenticationChallenge *)challenge completionHandler:(void (^)(NSURLSessionAuthChallengeDisposition, NSURLCredential * _Nullable))completionHandler{\n    if([challenge.protectionSpace.authenticationMethod isEqualToString:NSURLAuthenticationMethodServerTrust]){\n        if([challenge.protectionSpace.host isEqualToString:@\"DomainNameOfServer.io\"]){\n            NSURLCredential * credential = [NSURLCredential credentialForTrust:challenge.protectionSpace.serverTrust];\n            completionHandler(NSURLSessionAuthChallengeUseCredential,credential);\n        }\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550396188986,
        "id": "2e47ad59-24a2-41ff-9d9f-78b8c3f1a925",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550396188986,
        "parent_id": "af859f31-4678-4a92-bcda-e73c9d3fcd67",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "So that’s it! That’s all the code you need to send, receive and parse a request for an API in iOS 9! Okay…it was kind of a lot of code. But if implemented right like above, it’ll be fail-safe! Make sure to always handle errors where suggested above."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "So that’s it! That’s all the code you need to send, receive and parse a request for an API in iOS 9! Okay…it was kind of a lot of code. But if implemented right like above, it’ll be fail-safe! Make sure to always handle errors where suggested above."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550396188987,
        "id": "7030da25-e505-43b8-bf24-276641a8eeb8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550396188987,
        "parent_id": "af859f31-4678-4a92-bcda-e73c9d3fcd67",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Sending a request using form encoding",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Sending a request using form encoding",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550396188987,
        "id": "0ee520da-4160-46ed-a9d4-2f74e4608899",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550396188987,
        "parent_id": "af859f31-4678-4a92-bcda-e73c9d3fcd67",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "URL encoding is a broadly compatible way to encode arbitrary data. However, it is relatively inefficient for uploading binary data (such as photos) because every non-ASCII byte turns into a three-character code. It also does not support file attachments, so you would have to pass filenames and file data as separate fields."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "URL encoding is a broadly compatible way to encode arbitrary data. However, it is relatively inefficient for uploading binary data (such as photos) because every non-ASCII byte turns into a three-character code. It also does not support file attachments, so you would have to pass filenames and file data as separate fields."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550396188987,
        "id": "c2759f72-ee80-4cc8-9cb7-a83c34b56a13",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550396188987,
        "parent_id": "af859f31-4678-4a92-bcda-e73c9d3fcd67",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Suppose we want to upload a photograph in a way that is efficient and actually looks like a file on the server side. One way to do that is to use form encoding instead. To do this, edit the code that creates the NSURLSession as follows:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Suppose we want to upload a photograph in a way that is efficient and actually looks like a file on the server side. One way to do that is to use form encoding instead. To do this, edit the code that creates the NSURLSession as follows:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550396188987,
        "id": "71475516-31b9-40dc-a8db-f84c7d2002b8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550396188987,
        "parent_id": "af859f31-4678-4a92-bcda-e73c9d3fcd67",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "UIImage * imgToSend;\n\n// 2nd parameter of UIImageJPEGRepresentation represents compression quality. 0 being most compressed, 1 being the least\n// Using 0.4 likely stops us hitting the servers upload limit and costs us less server space\nNSData * imageData = UIImageJPEGRepresentation(imgToSend, 0.4f);\n\n// Alternatively, if the photo is on disk, you can retrieve it with\n// [NSData dataWithContentsOfURL:...]\n\n// Set up the body of the POST request.\n\n// This boundary serves as a separator between one form field and the next.\n// It must not appear anywhere within the actual data that you intend to\n// upload.\nNSString * boundary = @\"---------------------------14737809831466499882746641449\";\n\n// Body of the POST method\nNSMutableData * body = [NSMutableData data];\n\n// The body must start with the boundary preceded by two hyphens, followed\n// by a carriage return and newline pair.\n//\n// Notice that we prepend two additional hyphens to the boundary when\n// we actually use it as part of the body data.\n//\n[body appendData:[[NSString stringWithFormat:@\"\\r\\n--%@\\r\\n\",boundary] dataUsingEncoding:NSUTF8StringEncoding]];\n\n// This is followed by a series of headers for the first field and then\n// TWO CR-LF pairs.\n[body appendData:[[NSString stringWithFormat:@\"Content-Disposition: form-data; name=\\\"tag_name\\\"\\r\\n\\r\\n\"] dataUsingEncoding:NSUTF8StringEncoding]];\n\n// Next is the actual data for that field (called \"tag_name\") followed by\n// a CR-LF pair, a boundary, and another CR-LF pair.\n[body appendData:[strippedCompanyName dataUsingEncoding:NSUTF8StringEncoding]];\n[body appendData:[[NSString stringWithFormat:@\"\\r\\n--%@\\r\\n\", boundary] dataUsingEncoding:NSUTF8StringEncoding]];\n\n// Encode the filename and image data as the \"userfile\" CGI parameter.\n// This is similar to the previous field, except that it is being sent\n// as an actual file attachment rather than a blob of data, which means\n// it has both a filename and the actual file contents.\n//\n// IMPORTANT: The filename MUST be plain ASCII (and if encoded like this,\n//            must not include quotation marks in the filename).\n//\nNSString * picFileName = [NSString stringWithFormat:@\"photoName\"];\nNSString * appendDataString = [NSString stringWithFormat:@\"Content-Disposition: form-data; name=\\\"userfile\\\"; filename=\\\"%@.jpg\\\"\\r\\n\", picFileName];\n[body appendData:[appendDataString dataUsingEncoding:NSUTF8StringEncoding]];\n[body appendData:[@\"Content-Type: application/octet-stream\\r\\n\\r\\n\" dataUsingEncoding:NSUTF8StringEncoding]];\n[body appendData:[NSData dataWithData:imageData]];\n\n// Close the request body with one last boundary with two\n// additional hyphens prepended **and** two additional hyphens appended.\n[body appendData:[[NSString stringWithFormat:@\"\\r\\n--%@--\\r\\n\", boundary] dataUsingEncoding:NSUTF8StringEncoding]];\n\n// Create the session\n// We can use the delegate to track upload progress and disable cacheing\nNSURLSessionConfiguration * defaultConfigObject = [NSURLSessionConfiguration defaultSessionConfiguration];\ndefaultConfigObject.requestCachePolicy = NSURLRequestReloadIgnoringLocalCacheData;\nNSURLSession * defaultSession = [NSURLSession sessionWithConfiguration: defaultConfigObject delegate: self delegateQueue: [NSOperationQueue mainQueue]];\n\n// Data uploading task.\nNSURL * url = [NSURL URLWithString:@\"https://server.io/api/script.php\"];\nNSMutableURLRequest * request = [NSMutableURLRequest requestWithURL:url];\nNSString * contentType = [NSString stringWithFormat:@\"multipart/form-data; boundary=%@\",boundary];\n[request addValue:contentType forHTTPHeaderField:@\"Content-Type\"];\nrequest.HTTPMethod = @\"POST\";\nrequest.HTTPBody = body;\nNSURLSessionDataTask * uploadTask = [defaultSession dataTaskWithRequest:request];\n[uploadTask resume];"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "UIImage * imgToSend;\n\n// 2nd parameter of UIImageJPEGRepresentation represents compression quality. 0 being most compressed, 1 being the least\n// Using 0.4 likely stops us hitting the servers upload limit and costs us less server space\nNSData * imageData = UIImageJPEGRepresentation(imgToSend, 0.4f);\n\n// Alternatively, if the photo is on disk, you can retrieve it with\n// [NSData dataWithContentsOfURL:...]\n\n// Set up the body of the POST request.\n\n// This boundary serves as a separator between one form field and the next.\n// It must not appear anywhere within the actual data that you intend to\n// upload.\nNSString * boundary = @\"---------------------------14737809831466499882746641449\";\n\n// Body of the POST method\nNSMutableData * body = [NSMutableData data];\n\n// The body must start with the boundary preceded by two hyphens, followed\n// by a carriage return and newline pair.\n//\n// Notice that we prepend two additional hyphens to the boundary when\n// we actually use it as part of the body data.\n//\n[body appendData:[[NSString stringWithFormat:@\"\\r\\n--%@\\r\\n\",boundary] dataUsingEncoding:NSUTF8StringEncoding]];\n\n// This is followed by a series of headers for the first field and then\n// TWO CR-LF pairs.\n[body appendData:[[NSString stringWithFormat:@\"Content-Disposition: form-data; name=\\\"tag_name\\\"\\r\\n\\r\\n\"] dataUsingEncoding:NSUTF8StringEncoding]];\n\n// Next is the actual data for that field (called \"tag_name\") followed by\n// a CR-LF pair, a boundary, and another CR-LF pair.\n[body appendData:[strippedCompanyName dataUsingEncoding:NSUTF8StringEncoding]];\n[body appendData:[[NSString stringWithFormat:@\"\\r\\n--%@\\r\\n\", boundary] dataUsingEncoding:NSUTF8StringEncoding]];\n\n// Encode the filename and image data as the \"userfile\" CGI parameter.\n// This is similar to the previous field, except that it is being sent\n// as an actual file attachment rather than a blob of data, which means\n// it has both a filename and the actual file contents.\n//\n// IMPORTANT: The filename MUST be plain ASCII (and if encoded like this,\n//            must not include quotation marks in the filename).\n//\nNSString * picFileName = [NSString stringWithFormat:@\"photoName\"];\nNSString * appendDataString = [NSString stringWithFormat:@\"Content-Disposition: form-data; name=\\\"userfile\\\"; filename=\\\"%@.jpg\\\"\\r\\n\", picFileName];\n[body appendData:[appendDataString dataUsingEncoding:NSUTF8StringEncoding]];\n[body appendData:[@\"Content-Type: application/octet-stream\\r\\n\\r\\n\" dataUsingEncoding:NSUTF8StringEncoding]];\n[body appendData:[NSData dataWithData:imageData]];\n\n// Close the request body with one last boundary with two\n// additional hyphens prepended **and** two additional hyphens appended.\n[body appendData:[[NSString stringWithFormat:@\"\\r\\n--%@--\\r\\n\", boundary] dataUsingEncoding:NSUTF8StringEncoding]];\n\n// Create the session\n// We can use the delegate to track upload progress and disable cacheing\nNSURLSessionConfiguration * defaultConfigObject = [NSURLSessionConfiguration defaultSessionConfiguration];\ndefaultConfigObject.requestCachePolicy = NSURLRequestReloadIgnoringLocalCacheData;\nNSURLSession * defaultSession = [NSURLSession sessionWithConfiguration: defaultConfigObject delegate: self delegateQueue: [NSOperationQueue mainQueue]];\n\n// Data uploading task.\nNSURL * url = [NSURL URLWithString:@\"https://server.io/api/script.php\"];\nNSMutableURLRequest * request = [NSMutableURLRequest requestWithURL:url];\nNSString * contentType = [NSString stringWithFormat:@\"multipart/form-data; boundary=%@\",boundary];\n[request addValue:contentType forHTTPHeaderField:@\"Content-Type\"];\nrequest.HTTPMethod = @\"POST\";\nrequest.HTTPBody = body;\nNSURLSessionDataTask * uploadTask = [defaultSession dataTaskWithRequest:request];\n[uploadTask resume];",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550396188987,
        "id": "9cb07755-22f1-41e4-b2a7-038f271dc7c5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550396188987,
        "parent_id": "af859f31-4678-4a92-bcda-e73c9d3fcd67",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This creates and fires the NSURLSession request just as before, and as a result the delegate methods will behave exactly the same way. Make sure that the script the image is being sent to (located at the url in the variable "
            ],
            [
              "url",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") is expecting an image and can parse it correctly."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This creates and fires the NSURLSession request just as before, and as a result the delegate methods will behave exactly the same way. Make sure that the script the image is being sent to (located at the url in the variable "
          },
          {
            "Text": "url",
            "AttrFlags": 2
          },
          {
            "Text": ") is expecting an image and can parse it correctly."
          }
        ]
      }
    ],
    "title": "Sending a POST Request with arguments using NSURLSession in Objective-C",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}