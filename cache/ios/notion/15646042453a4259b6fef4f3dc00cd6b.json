{
  "ID": "15646042-453a-4259-b6fe-f4f3dc00cd6b",
  "Root": {
    "alive": true,
    "content": [
      "a51e4a80-2a7d-4500-871c-89085f407164",
      "cc0e8f0b-31d9-4c1c-b152-321d1cd1d35b",
      "8bcc57c6-0c45-4600-bcf4-699a5b5be558",
      "05ca9c45-5ab2-4301-b262-9ee62d07a8ce",
      "cd9d7390-0a7e-428a-85ac-41ea59916a92",
      "9aaff3cc-a2af-4130-a908-3d21fbfd72bb",
      "4d6a66f1-2e5a-476f-a11d-a75f517792e7",
      "605f2755-683e-492c-a07a-5f4dd8f4815b",
      "e8a32264-a94e-405c-80c4-620704591e19",
      "1e3eb887-a047-4e9b-9062-351d9c359fe2",
      "a336db4c-4559-49e5-894b-9505ec571e6f",
      "6ff5f8cd-68d3-4f2a-914e-a491d743123a",
      "0a5960dc-9522-4fd0-87b4-0100fd3a06b4",
      "cf8515ae-5052-4b77-ab1f-6d558d0aae7d",
      "73c11f0e-39da-4cae-a4e9-842221cff7f8",
      "02a8afdf-b0eb-40c9-8724-35cb0ce4b114",
      "447b5a2c-ea3f-44c6-87fb-a56ccce90509",
      "a6358da8-e4ef-4288-b3ba-ec5a6c33d29f",
      "1e2ad68c-1b7b-417b-94b1-6da010156135"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550397591882,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "15646042-453a-4259-b6fe-f4f3dc00cd6b",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550653380000,
    "parent_id": "1a26d681-ef13-46e2-aeb0-df99b8a48186",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Basic CAShapeLayer Operation"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550397591877,
        "id": "a51e4a80-2a7d-4500-871c-89085f407164",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550397591877,
        "parent_id": "15646042-453a-4259-b6fe-f4f3dc00cd6b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "UIBezierPath using to create a circular path ShapeLayer",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "UIBezierPath using to create a circular path ShapeLayer",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550397591880,
        "id": "cc0e8f0b-31d9-4c1c-b152-321d1cd1d35b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550397591880,
        "parent_id": "15646042-453a-4259-b6fe-f4f3dc00cd6b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "CAShapeLayer *circleLayer = [CAShapeLayer layer];\n[circleLayer setPath:[[UIBezierPath bezierPathWithOvalInRect:\nCGRectMake(50, 50, 100, 100)] CGPath]];\ncircleLayer.lineWidth = 2.0;\n[circleLayer setStrokeColor:[[UIColor redColor] CGColor]];\n[circleLayer setFillColor:[[UIColor clearColor] CGColor]];\ncircleLayer.lineJoin = kCALineJoinRound;  //4 types are available to create a line style\ncircleLayer.lineDashPattern = [NSArray arrayWithObjects:\n[NSNumber numberWithInt:2],[NSNumber numberWithInt:3 ], nil];\n// self.origImage is parentView\n[[self.view layer] addSublayer:circleLayer];\nself.currentShapeLayer = circleLayer;  // public value using to keep that reference of the shape Layer\nself.view.layer.borderWidth = 1.0f;\nself.view.layer.borderColor = [[UIColor blueColor]CGColor];  // that will plotted in the mainview"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "CAShapeLayer *circleLayer = [CAShapeLayer layer];\n[circleLayer setPath:[[UIBezierPath bezierPathWithOvalInRect:\nCGRectMake(50, 50, 100, 100)] CGPath]];\ncircleLayer.lineWidth = 2.0;\n[circleLayer setStrokeColor:[[UIColor redColor] CGColor]];\n[circleLayer setFillColor:[[UIColor clearColor] CGColor]];\ncircleLayer.lineJoin = kCALineJoinRound;  //4 types are available to create a line style\ncircleLayer.lineDashPattern = [NSArray arrayWithObjects:\n[NSNumber numberWithInt:2],[NSNumber numberWithInt:3 ], nil];\n// self.origImage is parentView\n[[self.view layer] addSublayer:circleLayer];\nself.currentShapeLayer = circleLayer;  // public value using to keep that reference of the shape Layer\nself.view.layer.borderWidth = 1.0f;\nself.view.layer.borderColor = [[UIColor blueColor]CGColor];  // that will plotted in the mainview",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550397591880,
        "id": "8bcc57c6-0c45-4600-bcf4-699a5b5be558",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550397591880,
        "parent_id": "15646042-453a-4259-b6fe-f4f3dc00cd6b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Remove ShapeLayer",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Remove ShapeLayer",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550397591880,
        "id": "05ca9c45-5ab2-4301-b262-9ee62d07a8ce",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550397591880,
        "parent_id": "15646042-453a-4259-b6fe-f4f3dc00cd6b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Keep a reference to that shape layer. For example, you might have a property currentShapeLayer: Now that you have a reference, you can easily remove the layer:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Keep a reference to that shape layer. For example, you might have a property currentShapeLayer: Now that you have a reference, you can easily remove the layer:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550397591881,
        "id": "cd9d7390-0a7e-428a-85ac-41ea59916a92",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550397591881,
        "parent_id": "15646042-453a-4259-b6fe-f4f3dc00cd6b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Type 1:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Type 1:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550397591881,
        "id": "9aaff3cc-a2af-4130-a908-3d21fbfd72bb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550397591881,
        "parent_id": "15646042-453a-4259-b6fe-f4f3dc00cd6b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "[self.currentShapeLayer removeFromSuperlayer];"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "[self.currentShapeLayer removeFromSuperlayer];",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550397591881,
        "id": "4d6a66f1-2e5a-476f-a11d-a75f517792e7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550397591881,
        "parent_id": "15646042-453a-4259-b6fe-f4f3dc00cd6b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Type 2:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Type 2:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550397591881,
        "id": "605f2755-683e-492c-a07a-5f4dd8f4815b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550397591881,
        "parent_id": "15646042-453a-4259-b6fe-f4f3dc00cd6b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "self.view.layer.sublayers = nil ;                //removed all earlier shapes"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "self.view.layer.sublayers = nil ;                //removed all earlier shapes",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550397591881,
        "id": "e8a32264-a94e-405c-80c4-620704591e19",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550397591881,
        "parent_id": "15646042-453a-4259-b6fe-f4f3dc00cd6b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Other Operation",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Other Operation",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550397591881,
        "id": "1e3eb887-a047-4e9b-9062-351d9c359fe2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550397591881,
        "parent_id": "15646042-453a-4259-b6fe-f4f3dc00cd6b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "//Draw Square Shape\n\nCAShapeLayer *squareLayer = [CAShapeLayer layer];\nsquareLayer.frame = CGRectMake(20, 20, 100, 100);\nsquareLayer.lineWidth = 2.0;\nsquareLayer.fillColor = nil;\nsquareLayer.strokeColor = [[UIColor redColor] CGColor];\nsquareLayer.path = [UIBezierPath bezierPathWithRect:squareLayer.bounds].CGPath;\n[[self.view layer] addSublayer:squareLayer];\n\n\n//Draw Circle Shape\n\nCAShapeLayer *circleShape = [CAShapeLayer layer];\ncircleShape.frame = CGRectMake(160, 20, 120, 120);\ncircleShape.lineWidth = 2.0;\ncircleShape.fillColor = nil;\ncircleShape.strokeColor = [[UIColor redColor] CGColor];\ncircleShape.path = [UIBezierPath bezierPathWithOvalInRect:circleShape.bounds].CGPath;\n[[self.view layer] addSublayer:circleShape];\n\n\n//Subpaths\n//UIBezierPath can have any number of “path segments” (or subpaths) so you can effectively draw as many shapes or lines as you want in a single path object\n\nCAShapeLayer *shapeLayer = [CAShapeLayer layer];\nshapeLayer.frame = CGRectMake(20, 140, 200, 200);\nshapeLayer.lineWidth = 2.0;\nshapeLayer.fillColor = nil;\nshapeLayer.strokeColor = [[UIColor redColor] CGColor];"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "//Draw Square Shape\n\nCAShapeLayer *squareLayer = [CAShapeLayer layer];\nsquareLayer.frame = CGRectMake(20, 20, 100, 100);\nsquareLayer.lineWidth = 2.0;\nsquareLayer.fillColor = nil;\nsquareLayer.strokeColor = [[UIColor redColor] CGColor];\nsquareLayer.path = [UIBezierPath bezierPathWithRect:squareLayer.bounds].CGPath;\n[[self.view layer] addSublayer:squareLayer];\n\n\n//Draw Circle Shape\n\nCAShapeLayer *circleShape = [CAShapeLayer layer];\ncircleShape.frame = CGRectMake(160, 20, 120, 120);\ncircleShape.lineWidth = 2.0;\ncircleShape.fillColor = nil;\ncircleShape.strokeColor = [[UIColor redColor] CGColor];\ncircleShape.path = [UIBezierPath bezierPathWithOvalInRect:circleShape.bounds].CGPath;\n[[self.view layer] addSublayer:circleShape];\n\n\n//Subpaths\n//UIBezierPath can have any number of “path segments” (or subpaths) so you can effectively draw as many shapes or lines as you want in a single path object\n\nCAShapeLayer *shapeLayer = [CAShapeLayer layer];\nshapeLayer.frame = CGRectMake(20, 140, 200, 200);\nshapeLayer.lineWidth = 2.0;\nshapeLayer.fillColor = nil;\nshapeLayer.strokeColor = [[UIColor redColor] CGColor];",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550397591881,
        "id": "a336db4c-4559-49e5-894b-9505ec571e6f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550397591881,
        "parent_id": "15646042-453a-4259-b6fe-f4f3dc00cd6b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "CGMutablePathRef combinedPath= CGPathCreateMutableCopy(circleShape.path);\nCGPathAddPath(combinedPath, NULL, squareLayer.path);\n\nshapeLayer.path = combinedPath;\n[[self.view layer] addSublayer:shapeLayer];\n\n//Open Path\n// Paths do not need to connect their end points back to their starting points. A path that connects back to its starting point is called a closed path, and one that does not is called an open path.\n\nshapeLayer = [CAShapeLayer layer];\nshapeLayer.frame = CGRectMake(160, 140, 300, 300);\nshapeLayer.lineWidth = 2.0;\nshapeLayer.fillColor = nil;\nshapeLayer.strokeColor = [[UIColor redColor] CGColor];\n\nUIBezierPath *linePath=[UIBezierPath bezierPath];\n[linePath moveToPoint:CGPointZero];\n[linePath addLineToPoint:CGPointMake(0 , 120)];\n[linePath addLineToPoint:CGPointMake(120 , 120)];\n[linePath addLineToPoint:CGPointMake(120 , 0)];\nshapeLayer.path = linePath.CGPath;\n[[self.view layer] addSublayer:shapeLayer];"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "CGMutablePathRef combinedPath= CGPathCreateMutableCopy(circleShape.path);\nCGPathAddPath(combinedPath, NULL, squareLayer.path);\n\nshapeLayer.path = combinedPath;\n[[self.view layer] addSublayer:shapeLayer];\n\n//Open Path\n// Paths do not need to connect their end points back to their starting points. A path that connects back to its starting point is called a closed path, and one that does not is called an open path.\n\nshapeLayer = [CAShapeLayer layer];\nshapeLayer.frame = CGRectMake(160, 140, 300, 300);\nshapeLayer.lineWidth = 2.0;\nshapeLayer.fillColor = nil;\nshapeLayer.strokeColor = [[UIColor redColor] CGColor];\n\nUIBezierPath *linePath=[UIBezierPath bezierPath];\n[linePath moveToPoint:CGPointZero];\n[linePath addLineToPoint:CGPointMake(0 , 120)];\n[linePath addLineToPoint:CGPointMake(120 , 120)];\n[linePath addLineToPoint:CGPointMake(120 , 0)];\nshapeLayer.path = linePath.CGPath;\n[[self.view layer] addSublayer:shapeLayer];",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550397591881,
        "id": "6ff5f8cd-68d3-4f2a-914e-a491d743123a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550397591881,
        "parent_id": "15646042-453a-4259-b6fe-f4f3dc00cd6b",
        "parent_table": "block",
        "properties": {
          "source": [
            [
              "http://i.stack.imgur.com/yckVB.png"
            ]
          ]
        },
        "type": "image",
        "version": 1,
        "source": "http://i.stack.imgur.com/yckVB.png",
        "image_url": "https://www.notion.so/image/https:%2F%2Fwww.notion.sohttp:%2F%2Fi.stack.imgur.com%2FyckVB.png"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550397591882,
        "id": "0a5960dc-9522-4fd0-87b4-0100fd3a06b4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550397591882,
        "parent_id": "15646042-453a-4259-b6fe-f4f3dc00cd6b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Fill Concepts",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Fill Concepts",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550397591882,
        "id": "cf8515ae-5052-4b77-ab1f-6d558d0aae7d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550397591882,
        "parent_id": "15646042-453a-4259-b6fe-f4f3dc00cd6b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "//Fill Color\n\nCAShapeLayer *squareLayer = [CAShapeLayer layer];\nsquareLayer.frame = CGRectMake(20, 30, 100, 100);\nsquareLayer.lineWidth = 2.0;\nsquareLayer.fillColor = [[UIColor yellowColor]CGColor];\nsquareLayer.strokeColor = [[UIColor redColor] CGColor];\nsquareLayer.path = [UIBezierPath bezierPathWithRect:squareLayer.bounds].CGPath;\n[[self.view layer] addSublayer:squareLayer];\n\n//Fill Pattern Color\n//images.jpeg\n\nsquareLayer = [CAShapeLayer layer];\nsquareLayer.frame = CGRectMake(140, 30, 100, 100);\nsquareLayer.lineWidth = 2.0;\nsquareLayer.fillColor = [[UIColor colorWithPatternImage:[UIImage imageNamed:@\"images.jpeg\"]]CGColor];\nsquareLayer.strokeColor = [[UIColor redColor] CGColor];\nsquareLayer.path = [UIBezierPath bezierPathWithRect:squareLayer.bounds].CGPath;\n[[self.view layer] addSublayer:squareLayer];"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "//Fill Color\n\nCAShapeLayer *squareLayer = [CAShapeLayer layer];\nsquareLayer.frame = CGRectMake(20, 30, 100, 100);\nsquareLayer.lineWidth = 2.0;\nsquareLayer.fillColor = [[UIColor yellowColor]CGColor];\nsquareLayer.strokeColor = [[UIColor redColor] CGColor];\nsquareLayer.path = [UIBezierPath bezierPathWithRect:squareLayer.bounds].CGPath;\n[[self.view layer] addSublayer:squareLayer];\n\n//Fill Pattern Color\n//images.jpeg\n\nsquareLayer = [CAShapeLayer layer];\nsquareLayer.frame = CGRectMake(140, 30, 100, 100);\nsquareLayer.lineWidth = 2.0;\nsquareLayer.fillColor = [[UIColor colorWithPatternImage:[UIImage imageNamed:@\"images.jpeg\"]]CGColor];\nsquareLayer.strokeColor = [[UIColor redColor] CGColor];\nsquareLayer.path = [UIBezierPath bezierPathWithRect:squareLayer.bounds].CGPath;\n[[self.view layer] addSublayer:squareLayer];",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550397591882,
        "id": "73c11f0e-39da-4cae-a4e9-842221cff7f8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550397591882,
        "parent_id": "15646042-453a-4259-b6fe-f4f3dc00cd6b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "//Fill Rule\n\n//Type 1: kCAFillRuleNonZero\nsquareLayer = [CAShapeLayer layer];\nsquareLayer.frame = CGRectMake(0, 140, 150, 150);\nsquareLayer.lineWidth = 2.0;\nsquareLayer.fillColor = [[UIColor yellowColor]CGColor];\nsquareLayer.fillRule = kCAFillRuleNonZero;   // indicate the rule type\nsquareLayer.strokeColor = [[UIColor redColor] CGColor];\nUIBezierPath *outerPath = [UIBezierPath bezierPathWithRect:CGRectInset(squareLayer.bounds, 20.0, 20.0)];\nUIBezierPath *innerPath = [UIBezierPath bezierPathWithRect:CGRectInset(squareLayer.bounds, 50.0, 50.0)];\nCGMutablePathRef combinedPath= CGPathCreateMutableCopy(outerPath.CGPath);\nCGPathAddPath(combinedPath, NULL, innerPath.CGPath);\nsquareLayer.path = combinedPath;\n[[self.view layer] addSublayer:squareLayer];\n\n\n//Type 2: kCAFillRuleEvenOdd\nsquareLayer = [CAShapeLayer layer];\nsquareLayer.frame = CGRectMake(140, 140, 150, 150);\nsquareLayer.lineWidth = 2.0;\nsquareLayer.fillColor = [[UIColor yellowColor]CGColor];\nsquareLayer.fillRule = kCAFillRuleEvenOdd;   // indicate the rule type\nsquareLayer.strokeColor = [[UIColor redColor] CGColor];\nouterPath = [UIBezierPath bezierPathWithRect:CGRectInset(squareLayer.bounds, 20.0, 20.0)];\ninnerPath = [UIBezierPath bezierPathWithRect:CGRectInset(squareLayer.bounds, 50.0, 50.0)];\ncombinedPath= CGPathCreateMutableCopy(outerPath.CGPath);\nCGPathAddPath(combinedPath, NULL, innerPath.CGPath);\nsquareLayer.path = combinedPath;\n[[self.view layer] addSublayer:squareLayer];"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "//Fill Rule\n\n//Type 1: kCAFillRuleNonZero\nsquareLayer = [CAShapeLayer layer];\nsquareLayer.frame = CGRectMake(0, 140, 150, 150);\nsquareLayer.lineWidth = 2.0;\nsquareLayer.fillColor = [[UIColor yellowColor]CGColor];\nsquareLayer.fillRule = kCAFillRuleNonZero;   // indicate the rule type\nsquareLayer.strokeColor = [[UIColor redColor] CGColor];\nUIBezierPath *outerPath = [UIBezierPath bezierPathWithRect:CGRectInset(squareLayer.bounds, 20.0, 20.0)];\nUIBezierPath *innerPath = [UIBezierPath bezierPathWithRect:CGRectInset(squareLayer.bounds, 50.0, 50.0)];\nCGMutablePathRef combinedPath= CGPathCreateMutableCopy(outerPath.CGPath);\nCGPathAddPath(combinedPath, NULL, innerPath.CGPath);\nsquareLayer.path = combinedPath;\n[[self.view layer] addSublayer:squareLayer];\n\n\n//Type 2: kCAFillRuleEvenOdd\nsquareLayer = [CAShapeLayer layer];\nsquareLayer.frame = CGRectMake(140, 140, 150, 150);\nsquareLayer.lineWidth = 2.0;\nsquareLayer.fillColor = [[UIColor yellowColor]CGColor];\nsquareLayer.fillRule = kCAFillRuleEvenOdd;   // indicate the rule type\nsquareLayer.strokeColor = [[UIColor redColor] CGColor];\nouterPath = [UIBezierPath bezierPathWithRect:CGRectInset(squareLayer.bounds, 20.0, 20.0)];\ninnerPath = [UIBezierPath bezierPathWithRect:CGRectInset(squareLayer.bounds, 50.0, 50.0)];\ncombinedPath= CGPathCreateMutableCopy(outerPath.CGPath);\nCGPathAddPath(combinedPath, NULL, innerPath.CGPath);\nsquareLayer.path = combinedPath;\n[[self.view layer] addSublayer:squareLayer];",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550397591882,
        "id": "02a8afdf-b0eb-40c9-8724-35cb0ce4b114",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550397591882,
        "parent_id": "15646042-453a-4259-b6fe-f4f3dc00cd6b",
        "parent_table": "block",
        "properties": {
          "source": [
            [
              "http://i.stack.imgur.com/zpwzp.png"
            ]
          ]
        },
        "type": "image",
        "version": 1,
        "source": "http://i.stack.imgur.com/zpwzp.png",
        "image_url": "https://www.notion.so/image/https:%2F%2Fwww.notion.sohttp:%2F%2Fi.stack.imgur.com%2Fzpwzp.png"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550397591882,
        "id": "447b5a2c-ea3f-44c6-87fb-a56ccce90509",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550397591882,
        "parent_id": "15646042-453a-4259-b6fe-f4f3dc00cd6b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Listed the accessing Style properties"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Listed the accessing Style properties"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550397591882,
        "id": "a6358da8-e4ef-4288-b3ba-ec5a6c33d29f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550397591882,
        "parent_id": "15646042-453a-4259-b6fe-f4f3dc00cd6b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "fillColor    \n     Fill the color based on the drawed shape.\n\nfillRule\n     Fill Rule the there are two rule is applied to draw the shape.\n     1.  kCAFillRuleNonZero\n     2.  kCAFillRuleEvenOdd\n\nlineCap\n     Below type used to change the style of the line.\n     1.  kCALineCapButt\n     2.  kCALineCapRound\n     3.  kCALineCapSquare"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "fillColor    \n     Fill the color based on the drawed shape.\n\nfillRule\n     Fill Rule the there are two rule is applied to draw the shape.\n     1.  kCAFillRuleNonZero\n     2.  kCAFillRuleEvenOdd\n\nlineCap\n     Below type used to change the style of the line.\n     1.  kCALineCapButt\n     2.  kCALineCapRound\n     3.  kCALineCapSquare",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550397591882,
        "id": "1e2ad68c-1b7b-417b-94b1-6da010156135",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550397591882,
        "parent_id": "15646042-453a-4259-b6fe-f4f3dc00cd6b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "lineDashPattern\n     The dash pattern applied to the shape’s path when stroked.\n     Create DashStyle while you will stroke the line.\n\nlineDashPhase\n     The dash phase applied to the shape’s path when stroked. Animatable.\nlineJoin\n     Line join style for the shape path.Below style use to draw the line join style.\n     1.  kCALineJoinMiter\n     2.  kCALineJoinRound\n     3.  kCALineJoinBevel\n\nlineWidth\n     Which using to set the line width.\n\nmiterLimit\n     The miter limit used when stroking the shape’s path. Animatable.\n\nstrokeColor\n     Set the stroke color based on the path of the line.\n\nstrokeStart\n     When the stroke will start.\n\nstrokeEnd\n    When the stroke will end."
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "lineDashPattern\n     The dash pattern applied to the shape’s path when stroked.\n     Create DashStyle while you will stroke the line.\n\nlineDashPhase\n     The dash phase applied to the shape’s path when stroked. Animatable.\nlineJoin\n     Line join style for the shape path.Below style use to draw the line join style.\n     1.  kCALineJoinMiter\n     2.  kCALineJoinRound\n     3.  kCALineJoinBevel\n\nlineWidth\n     Which using to set the line width.\n\nmiterLimit\n     The miter limit used when stroking the shape’s path. Animatable.\n\nstrokeColor\n     Set the stroke color based on the path of the line.\n\nstrokeStart\n     When the stroke will start.\n\nstrokeEnd\n    When the stroke will end.",
        "code_language": "Plain Text"
      }
    ],
    "title": "Basic CAShapeLayer Operation",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}