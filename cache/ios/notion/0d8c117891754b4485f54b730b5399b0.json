{
  "ID": "0d8c1178-9175-4b44-85f5-4b730b5399b0",
  "Root": {
    "alive": true,
    "content": [
      "d12a0f61-44d3-4d11-8b2b-a1f22a3e4ccf",
      "fb5dfd49-7704-4d14-a049-f8be9f2b70ce",
      "472e7f4b-f5ef-4f9a-9535-0bec8c877675",
      "ce3ce531-4b16-4c6b-a3ab-afaf82eaf045",
      "c268bbf5-ce4e-4a08-b0f8-e8229f65a101",
      "f5c12d8e-764e-4bc9-989d-98595afe77fa",
      "537a6eea-5aff-483c-8670-a1f4310db1b4",
      "3d38d150-e7b8-42fc-91ec-d87fe2d1ba73",
      "24959e31-3abd-4d50-9668-be3602cac29e",
      "31246229-5297-4e75-95c7-41883025d490",
      "ea5373ca-9b01-43a6-8f59-9b443aff9aac",
      "e891e116-cbae-48f3-a826-2204693f5c90",
      "d4b6a3fc-8173-4191-b7a8-52d166fc9499",
      "8a06d7c5-2d1e-4c17-b44c-7bb8410bbe18"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550394210408,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "0d8c1178-9175-4b44-85f5-4b730b5399b0",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550482500000,
    "parent_id": "507d8674-6569-42dd-8593-e80c9a53fdd8",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Calculate Content Bounds for i.e. dynamic cell heights"
        ]
      ]
    },
    "type": "page",
    "version": 7,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550394210401,
        "id": "d12a0f61-44d3-4d11-8b2b-a1f22a3e4ccf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550394210401,
        "parent_id": "0d8c1178-9175-4b44-85f5-4b730b5399b0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A common use case for wanting to calculate the frame a label will take up is for sizing table view cells appropriately. The recommended way of doing this is using the "
            ],
            [
              "NSString",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method "
            ],
            [
              "boundingRectWithSize:options:attributes:context:",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A common use case for wanting to calculate the frame a label will take up is for sizing table view cells appropriately. The recommended way of doing this is using the "
          },
          {
            "Text": "NSString",
            "AttrFlags": 2
          },
          {
            "Text": " method "
          },
          {
            "Text": "boundingRectWithSize:options:attributes:context:",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550394210403,
        "id": "fb5dfd49-7704-4d14-a049-f8be9f2b70ce",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550394210403,
        "parent_id": "0d8c1178-9175-4b44-85f5-4b730b5399b0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "options",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " takes String drawing options:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "options",
            "AttrFlags": 2
          },
          {
            "Text": " takes String drawing options:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550394210404,
        "id": "472e7f4b-f5ef-4f9a-9535-0bec8c877675",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550394210404,
        "parent_id": "0d8c1178-9175-4b44-85f5-4b730b5399b0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "NSStringDrawingUsesLineFragmentOrigin",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " should be used for labels with multiple lines"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "NSStringDrawingUsesLineFragmentOrigin",
            "AttrFlags": 2
          },
          {
            "Text": " should be used for labels with multiple lines"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550394210404,
        "id": "ce3ce531-4b16-4c6b-a3ab-afaf82eaf045",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550394210404,
        "parent_id": "0d8c1178-9175-4b44-85f5-4b730b5399b0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "NSStringDrawingTruncatesLastVisibleLine",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " should be added using the "
            ],
            [
              "|",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " operator if there are a maximum number of lines"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "NSStringDrawingTruncatesLastVisibleLine",
            "AttrFlags": 2
          },
          {
            "Text": " should be added using the "
          },
          {
            "Text": "|",
            "AttrFlags": 2
          },
          {
            "Text": " operator if there are a maximum number of lines"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550394210406,
        "id": "c268bbf5-ce4e-4a08-b0f8-e8229f65a101",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550394210406,
        "parent_id": "0d8c1178-9175-4b44-85f5-4b730b5399b0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "attributes",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is an "
            ],
            [
              "NSDictionary",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " of attributes that effect attributed strings (full list: "
            ],
            [
              "Apple Docs",
              [
                [
                  "a",
                  "https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSAttributedString_Class/index.html#//apple_ref/doc/constant_group/Character_Attributes"
                ]
              ]
            ],
            [
              ") but the factors that effect height include:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "attributes",
            "AttrFlags": 2
          },
          {
            "Text": " is an "
          },
          {
            "Text": "NSDictionary",
            "AttrFlags": 2
          },
          {
            "Text": " of attributes that effect attributed strings (full list: "
          },
          {
            "Text": "Apple Docs",
            "Link": "https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSAttributedString_Class/index.html#//apple_ref/doc/constant_group/Character_Attributes"
          },
          {
            "Text": ") but the factors that effect height include:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550394210407,
        "id": "f5c12d8e-764e-4bc9-989d-98595afe77fa",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550394210407,
        "parent_id": "0d8c1178-9175-4b44-85f5-4b730b5399b0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "NSFontAttributeName",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ": Very important, the size and font family is a critical part of the label’s displayed size."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "NSFontAttributeName",
            "AttrFlags": 1
          },
          {
            "Text": ": Very important, the size and font family is a critical part of the label’s displayed size."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550394210407,
        "id": "537a6eea-5aff-483c-8670-a1f4310db1b4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550394210407,
        "parent_id": "0d8c1178-9175-4b44-85f5-4b730b5399b0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "NSParagraphStyleAttributeName",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ": For customizing how the text is displayed. This includes line spacing, text alignment, truncation style, and a few other options. If you did not explicitly change any of these values you should not have to worry about this much, but may be important if you toggled some values on IB."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "NSParagraphStyleAttributeName",
            "AttrFlags": 1
          },
          {
            "Text": ": For customizing how the text is displayed. This includes line spacing, text alignment, truncation style, and a few other options. If you did not explicitly change any of these values you should not have to worry about this much, but may be important if you toggled some values on IB."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550394210407,
        "id": "3d38d150-e7b8-42fc-91ec-d87fe2d1ba73",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550394210407,
        "parent_id": "0d8c1178-9175-4b44-85f5-4b730b5399b0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "context",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " should be "
            ],
            [
              "nil",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " since the primary "
            ],
            [
              "NSStringDrawingContext",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " use case is for allowing font to resize to fit a specified rect, which shouldn’t be the case if we’re calculating a dynamic height."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "context",
            "AttrFlags": 2
          },
          {
            "Text": " should be "
          },
          {
            "Text": "nil",
            "AttrFlags": 2
          },
          {
            "Text": " since the primary "
          },
          {
            "Text": "NSStringDrawingContext",
            "AttrFlags": 2
          },
          {
            "Text": " use case is for allowing font to resize to fit a specified rect, which shouldn’t be the case if we’re calculating a dynamic height."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550394210407,
        "id": "24959e31-3abd-4d50-9668-be3602cac29e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550394210407,
        "parent_id": "0d8c1178-9175-4b44-85f5-4b730b5399b0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Objective C",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Objective C",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550394210407,
        "id": "31246229-5297-4e75-95c7-41883025d490",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550394210407,
        "parent_id": "0d8c1178-9175-4b44-85f5-4b730b5399b0",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath {\n    \n    UITableViewCell *cell = [tableView cellForRowAtIndexPath:indexPath];\n\n    NSString *labelContent = cell.theLabel.text;\n    // you may choose to get the content directly from the data source if you have done minimal customizations to the font or are comfortable with hardcoding a few values\n//    NSString *labelContent = [self.dataSource objectAtIndexPath:indexPath];\n    \n    // value may be hardcoded if retrieved from data source\n    NSFont *labelFont = [cell.theLabel font];\n    \n    // The NSParagraphStyle, even if you did not code any changes these values may have been altered in IB\n    NSMutableParagraphStyle *paragraphStyle = [NSMutableParagraphStyle new];\n    paragraphStyle.lineBreakMode = NSLineBreakByWordWrapping; \n    paragraphStyle.alignment = NSTextAlignmentCenter;\n\n    NSDictionary *attributes = @{NSFontAttributeName: labelFont,\n                                 NSParagraphStyleAttributeName: paragraphStyle};\n\n    // The width is also important to the height\n    CGFloat labelWidth = CGRectGetWidth(cell.theLabel.frame);\n    // If you have been hardcoding up to this point you will be able to get this value by subtracting the padding on left and right from tableView.bounds.size.width\n//    CGFloat labelWidth = CGRectGetWidth(tableView.frame) - 20.0f - 20.0f;\n\n    CGRect bodyBounds = [labelContent boundingRectWithSize:CGSizeMake(width, CGFLOAT_MAX) options:NSStringDrawingUsesLineFragmentOrigin attributes:attributes context:nil];\n\n    return CGRectGetHeight(bodyBounds) + heightOfObjectsOnTopOfLabel + heightOfObjectBelowLabel;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath {\n    \n    UITableViewCell *cell = [tableView cellForRowAtIndexPath:indexPath];\n\n    NSString *labelContent = cell.theLabel.text;\n    // you may choose to get the content directly from the data source if you have done minimal customizations to the font or are comfortable with hardcoding a few values\n//    NSString *labelContent = [self.dataSource objectAtIndexPath:indexPath];\n    \n    // value may be hardcoded if retrieved from data source\n    NSFont *labelFont = [cell.theLabel font];\n    \n    // The NSParagraphStyle, even if you did not code any changes these values may have been altered in IB\n    NSMutableParagraphStyle *paragraphStyle = [NSMutableParagraphStyle new];\n    paragraphStyle.lineBreakMode = NSLineBreakByWordWrapping; \n    paragraphStyle.alignment = NSTextAlignmentCenter;\n\n    NSDictionary *attributes = @{NSFontAttributeName: labelFont,\n                                 NSParagraphStyleAttributeName: paragraphStyle};\n\n    // The width is also important to the height\n    CGFloat labelWidth = CGRectGetWidth(cell.theLabel.frame);\n    // If you have been hardcoding up to this point you will be able to get this value by subtracting the padding on left and right from tableView.bounds.size.width\n//    CGFloat labelWidth = CGRectGetWidth(tableView.frame) - 20.0f - 20.0f;\n\n    CGRect bodyBounds = [labelContent boundingRectWithSize:CGSizeMake(width, CGFLOAT_MAX) options:NSStringDrawingUsesLineFragmentOrigin attributes:attributes context:nil];\n\n    return CGRectGetHeight(bodyBounds) + heightOfObjectsOnTopOfLabel + heightOfObjectBelowLabel;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550394210407,
        "id": "ea5373ca-9b01-43a6-8f59-9b443aff9aac",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550394210407,
        "parent_id": "0d8c1178-9175-4b44-85f5-4b730b5399b0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Swfit 3",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Swfit 3",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550394210407,
        "id": "e891e116-cbae-48f3-a826-2204693f5c90",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550394210407,
        "parent_id": "0d8c1178-9175-4b44-85f5-4b730b5399b0",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "override func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -\u003e CGFloat {\n    var cell = tableView.cellForRow(atIndexPath: indexPath)!\n    var labelContent = cell.theLabel.text\n    var labelFont = cell.theLabel.font\n    var paragraphStyle = NSMutableParagraphStyle()\n\n    paragraphStyle.lineBreakMode = .byWordWrapping\n    paragraphStyle.alignment = .center\n\n    var attributes = [NSFontAttributeName: labelFont, NSParagraphStyleAttributeName: paragraphStyle]\n\n    var labelWidth: CGFloat = cell.theLabel.frame.width\n\n    var bodyBounds = labelContent.boundingRect(withSize: CGSize(width: width, height: CGFLOAT_MAX), options: .usesLineFragmentOrigin, attributes: attributes, context: nil)\n\n    return bodyBounds.height + heightOfObjectsOnTopOfLabel + heightOfObjectBelowLabel\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "override func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -\u003e CGFloat {\n    var cell = tableView.cellForRow(atIndexPath: indexPath)!\n    var labelContent = cell.theLabel.text\n    var labelFont = cell.theLabel.font\n    var paragraphStyle = NSMutableParagraphStyle()\n\n    paragraphStyle.lineBreakMode = .byWordWrapping\n    paragraphStyle.alignment = .center\n\n    var attributes = [NSFontAttributeName: labelFont, NSParagraphStyleAttributeName: paragraphStyle]\n\n    var labelWidth: CGFloat = cell.theLabel.frame.width\n\n    var bodyBounds = labelContent.boundingRect(withSize: CGSize(width: width, height: CGFLOAT_MAX), options: .usesLineFragmentOrigin, attributes: attributes, context: nil)\n\n    return bodyBounds.height + heightOfObjectsOnTopOfLabel + heightOfObjectBelowLabel\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550394210407,
        "id": "d4b6a3fc-8173-4191-b7a8-52d166fc9499",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550394210408,
        "parent_id": "0d8c1178-9175-4b44-85f5-4b730b5399b0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Conversely, if you do have a set maximum number of lines you will first need calculate the height of a single line to make sure we don’t get a value taller than the allowed size:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Conversely, if you do have a set maximum number of lines you will first need calculate the height of a single line to make sure we don’t get a value taller than the allowed size:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550394210408,
        "id": "8a06d7c5-2d1e-4c17-b44c-7bb8410bbe18",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550394210408,
        "parent_id": "0d8c1178-9175-4b44-85f5-4b730b5399b0",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// We calculate the height of a line by omitting the NSStringDrawingUsesLineFragmentOrigin option, which will assume an infinitely wide label\nCGRect singleLineRect = [labelContent boundingRectWithSize:CGSizeMake(CGFLOAT_MAX, CGFLOAT_MAX)\n                                             options:NSStringDrawingTruncatesLastVisibleLine\n                                             context:nil];\nCGFloat lineHeight = CGRectGetHeight(singleLineRect);\nCGFloat maxHeight = lineHeight * cell.theLabel.numberOfLines;\n\n// Now you can call the method appropriately\nCGRect bodyBounds = [labelContent boundingRectWithSize:CGSizeMake(width, maxHeight) options:(NSStringDrawingUsesLineFragmentOrigin|NSStringDrawingTruncatesLastVisibleLine) attributes:attributes context:nil];\n\nreturn CGRectGetHeight(bodyBounds) + heightOfObjectsOnTopOfLabel + heightOfObjectBelowLabel;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// We calculate the height of a line by omitting the NSStringDrawingUsesLineFragmentOrigin option, which will assume an infinitely wide label\nCGRect singleLineRect = [labelContent boundingRectWithSize:CGSizeMake(CGFLOAT_MAX, CGFLOAT_MAX)\n                                             options:NSStringDrawingTruncatesLastVisibleLine\n                                             context:nil];\nCGFloat lineHeight = CGRectGetHeight(singleLineRect);\nCGFloat maxHeight = lineHeight * cell.theLabel.numberOfLines;\n\n// Now you can call the method appropriately\nCGRect bodyBounds = [labelContent boundingRectWithSize:CGSizeMake(width, maxHeight) options:(NSStringDrawingUsesLineFragmentOrigin|NSStringDrawingTruncatesLastVisibleLine) attributes:attributes context:nil];\n\nreturn CGRectGetHeight(bodyBounds) + heightOfObjectsOnTopOfLabel + heightOfObjectBelowLabel;",
        "code_language": "Plain Text"
      }
    ],
    "title": "Calculate Content Bounds for i.e. dynamic cell heights",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}