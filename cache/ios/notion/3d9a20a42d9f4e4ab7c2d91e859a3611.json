{
  "ID": "3d9a20a4-2d9f-4e4a-b7c2-d91e859a3611",
  "Root": {
    "alive": true,
    "content": [
      "6509f165-f05e-4f94-9dae-ff32700a0b29",
      "f3b84cb7-2d77-4e7e-b476-5f09e78683a5",
      "cb6bdd93-22fc-45c3-9f24-18ffa9e83bec",
      "25e00b92-a2a9-445f-a2a1-c8426034fc85",
      "9e9ffa1e-4945-459f-bb33-f6a797b562ef",
      "4aecc4b6-7b4c-417b-930c-c7cebe5cbe1a"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550441711164,
    "id": "3d9a20a4-2d9f-4e4a-b7c2-d91e859a3611",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550713320000,
    "parent_id": "468b0602-725a-4cb6-810e-ca88f35bd501",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Flick View Based on Gesture Velocity"
        ]
      ]
    },
    "type": "page",
    "version": 6,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550441711160,
        "id": "6509f165-f05e-4f94-9dae-ff32700a0b29",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550441711160,
        "parent_id": "3d9a20a4-2d9f-4e4a-b7c2-d91e859a3611",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This example shows how to have a view track a pan gesture and depart in a physics-based manner."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This example shows how to have a view track a pan gesture and depart in a physics-based manner."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550441711163,
        "id": "f3b84cb7-2d77-4e7e-b476-5f09e78683a5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550441711163,
        "parent_id": "3d9a20a4-2d9f-4e4a-b7c2-d91e859a3611",
        "parent_table": "block",
        "properties": {
          "source": [
            [
              "https://i.stack.imgur.com/niErg.gif"
            ]
          ]
        },
        "type": "image",
        "version": 1,
        "source": "https://i.stack.imgur.com/niErg.gif",
        "image_url": "https://www.notion.so/image/https:%2F%2Fi.stack.imgur.com%2FniErg.gif"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550441711163,
        "id": "cb6bdd93-22fc-45c3-9f24-18ffa9e83bec",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550441711163,
        "parent_id": "3d9a20a4-2d9f-4e4a-b7c2-d91e859a3611",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Swift"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Swift"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550441711163,
        "id": "25e00b92-a2a9-445f-a2a1-c8426034fc85",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550713320000,
        "parent_id": "3d9a20a4-2d9f-4e4a-b7c2-d91e859a3611",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Swift"
            ]
          ],
          "title": [
            [
              "class ViewController: UIViewController\n{\n    // Adjust to change speed of view from flick\n    let magnitudeMultiplier: CGFloat = 0.0008\n    \n    lazy var dynamicAnimator: UIDynamicAnimator =\n    {\n        let dynamicAnimator = UIDynamicAnimator(referenceView: self.view)\n        return dynamicAnimator\n    }()\n\n    lazy var gravity: UIGravityBehavior =\n    {\n        let gravity = UIGravityBehavior(items: [self.orangeView])\n        return gravity\n    }()\n    \n    lazy var collision: UICollisionBehavior =\n    {\n        let collision = UICollisionBehavior(items: [self.orangeView])\n        collision.translatesReferenceBoundsIntoBoundary = true\n        return collision\n    }()\n    \n    lazy var orangeView: UIView =\n    {\n        let widthHeight: CGFloat = 40.0\n        let orangeView = UIView(frame: CGRect(x: 0.0, y: 0.0, width: widthHeight, height: widthHeight))\n        orangeView.backgroundColor = UIColor.orange\n        self.view.addSubview(orangeView)\n        return orangeView\n    }()\n    \n    lazy var panGesture: UIPanGestureRecognizer =\n    {\n        let panGesture = UIPanGestureRecognizer(target: self, action: #selector(self.handlePan(sender:)))\n        return panGesture\n    }()\n    \n    lazy var attachment: UIAttachmentBehavior =\n    {\n        let attachment = UIAttachmentBehavior(item: self.orangeView, attachedToAnchor: .zero)\n        return attachment\n    }()\n\n    override func viewDidLoad()\n    {\n        super.viewDidLoad()\n        dynamicAnimator.addBehavior(gravity)\n        dynamicAnimator.addBehavior(collision)\n        orangeView.addGestureRecognizer(panGesture)\n    }\n    \n    override func viewDidLayoutSubviews()\n    {\n        super.viewDidLayoutSubviews()\n        orangeView.center = view.center\n        dynamicAnimator.updateItem(usingCurrentState: orangeView)\n    }\n    \n    func handlePan(sender: UIPanGestureRecognizer)\n    {\n        let location = sender.location(in: view)\n        let velocity = sender.velocity(in: view)\n        let magnitude = sqrt((velocity.x * velocity.x) + (velocity.y * velocity.y))\n        switch sender.state\n        {\n        case .began:\n            attachment.anchorPoint = location\n            dynamicAnimator.addBehavior(attachment)\n        case .changed:\n            attachment.anchorPoint = location\n        case .cancelled, .ended, .failed, .possible:\n            let push = UIPushBehavior(items: [self.orangeView], mode: .instantaneous)\n            push.pushDirection = CGVector(dx: velocity.x, dy: velocity.y)\n            push.magnitude = magnitude * magnitudeMultiplier\n            dynamicAnimator.removeBehavior(attachment)\n            dynamicAnimator.addBehavior(push)\n        }\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "class ViewController: UIViewController\n{\n    // Adjust to change speed of view from flick\n    let magnitudeMultiplier: CGFloat = 0.0008\n    \n    lazy var dynamicAnimator: UIDynamicAnimator =\n    {\n        let dynamicAnimator = UIDynamicAnimator(referenceView: self.view)\n        return dynamicAnimator\n    }()\n\n    lazy var gravity: UIGravityBehavior =\n    {\n        let gravity = UIGravityBehavior(items: [self.orangeView])\n        return gravity\n    }()\n    \n    lazy var collision: UICollisionBehavior =\n    {\n        let collision = UICollisionBehavior(items: [self.orangeView])\n        collision.translatesReferenceBoundsIntoBoundary = true\n        return collision\n    }()\n    \n    lazy var orangeView: UIView =\n    {\n        let widthHeight: CGFloat = 40.0\n        let orangeView = UIView(frame: CGRect(x: 0.0, y: 0.0, width: widthHeight, height: widthHeight))\n        orangeView.backgroundColor = UIColor.orange\n        self.view.addSubview(orangeView)\n        return orangeView\n    }()\n    \n    lazy var panGesture: UIPanGestureRecognizer =\n    {\n        let panGesture = UIPanGestureRecognizer(target: self, action: #selector(self.handlePan(sender:)))\n        return panGesture\n    }()\n    \n    lazy var attachment: UIAttachmentBehavior =\n    {\n        let attachment = UIAttachmentBehavior(item: self.orangeView, attachedToAnchor: .zero)\n        return attachment\n    }()\n\n    override func viewDidLoad()\n    {\n        super.viewDidLoad()\n        dynamicAnimator.addBehavior(gravity)\n        dynamicAnimator.addBehavior(collision)\n        orangeView.addGestureRecognizer(panGesture)\n    }\n    \n    override func viewDidLayoutSubviews()\n    {\n        super.viewDidLayoutSubviews()\n        orangeView.center = view.center\n        dynamicAnimator.updateItem(usingCurrentState: orangeView)\n    }\n    \n    func handlePan(sender: UIPanGestureRecognizer)\n    {\n        let location = sender.location(in: view)\n        let velocity = sender.velocity(in: view)\n        let magnitude = sqrt((velocity.x * velocity.x) + (velocity.y * velocity.y))\n        switch sender.state\n        {\n        case .began:\n            attachment.anchorPoint = location\n            dynamicAnimator.addBehavior(attachment)\n        case .changed:\n            attachment.anchorPoint = location\n        case .cancelled, .ended, .failed, .possible:\n            let push = UIPushBehavior(items: [self.orangeView], mode: .instantaneous)\n            push.pushDirection = CGVector(dx: velocity.x, dy: velocity.y)\n            push.magnitude = magnitude * magnitudeMultiplier\n            dynamicAnimator.removeBehavior(attachment)\n            dynamicAnimator.addBehavior(push)\n        }\n    }\n}",
        "code_language": "Swift"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550441711163,
        "id": "9e9ffa1e-4945-459f-bb33-f6a797b562ef",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550441711163,
        "parent_id": "3d9a20a4-2d9f-4e4a-b7c2-d91e859a3611",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Objective-C"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Objective-C"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550441711164,
        "id": "4aecc4b6-7b4c-417b-930c-c7cebe5cbe1a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550441711164,
        "parent_id": "3d9a20a4-2d9f-4e4a-b7c2-d91e859a3611",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "@interface ViewController ()\n\n@property (nonatomic, assign) CGFloat magnitudeMultiplier;\n@property (nonatomic, strong) UIDynamicAnimator *dynamicAnimator;\n@property (nonatomic, strong) UIGravityBehavior *gravity;\n@property (nonatomic, strong) UICollisionBehavior *collision;\n@property (nonatomic, strong) UIView *orangeView;\n@property (nonatomic, strong) UIPanGestureRecognizer *panGesture;\n@property (nonatomic, strong) UIAttachmentBehavior *attachment;\n\n@end\n\n@implementation ViewController\n\n- (void)viewDidLoad\n{\n    [super viewDidLoad];\n    [self.dynamicAnimator addBehavior:self.gravity];\n    [self.dynamicAnimator addBehavior:self.collision];\n    [self.orangeView addGestureRecognizer:self.panGesture];\n    // Adjust to change speed of view from flick\n    self.magnitudeMultiplier = 0.0008f;\n}\n\n- (void)viewDidLayoutSubviews\n{\n    [super viewDidLayoutSubviews];\n    self.orangeView.center = self.view.center;\n    [self.dynamicAnimator updateItemUsingCurrentState:self.orangeView];\n}\n\n- (void)handlePan:(UIPanGestureRecognizer *)sender\n{\n    CGPoint location = [sender locationInView:self.view];\n    CGPoint velocity = [sender velocityInView:self.view];\n    CGFloat magnitude = sqrt((velocity.x * velocity.x) + (velocity.y * velocity.y));\n    if (sender.state == UIGestureRecognizerStateBegan)\n    {\n        self.attachment.anchorPoint = location;\n        [self.dynamicAnimator addBehavior:self.attachment];\n    }\n    else if (sender.state == UIGestureRecognizerStateChanged)\n    {\n        self.attachment.anchorPoint = location;\n    }\n    else if (sender.state == UIGestureRecognizerStateCancelled ||\n             sender.state == UIGestureRecognizerStateEnded ||\n             sender.state == UIGestureRecognizerStateFailed ||\n             sender.state == UIGestureRecognizerStatePossible)\n    {\n        UIPushBehavior *push = [[UIPushBehavior alloc] initWithItems:@[self.orangeView] mode:UIPushBehaviorModeInstantaneous];\n        push.pushDirection = CGVectorMake(velocity.x, velocity.y);\n        push.magnitude = magnitude * self.magnitudeMultiplier;\n        [self.dynamicAnimator removeBehavior:self.attachment];\n        [self.dynamicAnimator addBehavior:push];\n    }\n}\n\n#pragma mark - Lazy Init\n- (UIDynamicAnimator *)dynamicAnimator\n{\n    if (!_dynamicAnimator)\n    {\n        _dynamicAnimator = [[UIDynamicAnimator alloc]initWithReferenceView:self.view];\n    }\n    return _dynamicAnimator;\n}\n\n- (UIGravityBehavior *)gravity\n{\n    if (!_gravity)\n    {\n        _gravity = [[UIGravityBehavior alloc]initWithItems:@[self.orangeView]];\n    }\n    return _gravity;\n}\n\n- (UICollisionBehavior *)collision\n{\n    if (!_collision)\n    {\n        _collision = [[UICollisionBehavior alloc]initWithItems:@[self.orangeView]];\n        _collision.translatesReferenceBoundsIntoBoundary = YES;\n    }\n    return _collision;\n}\n\n- (UIView *)orangeView\n{\n    if (!_orangeView)\n    {\n        CGFloat widthHeight = 40.0f;\n        _orangeView = [[UIView alloc]initWithFrame:CGRectMake(0.0, 0.0, widthHeight, widthHeight)];\n        _orangeView.backgroundColor = [UIColor orangeColor];\n        [self.view addSubview:_orangeView];\n    }\n    return _orangeView;\n}\n\n- (UIPanGestureRecognizer *)panGesture\n{\n    if (!_panGesture)\n    {\n        _panGesture = [[UIPanGestureRecognizer alloc]initWithTarget:self action:@selector(handlePan:)];\n    }\n    return _panGesture;\n}\n\n- (UIAttachmentBehavior *)attachment\n{\n    if (!_attachment)\n    {\n        _attachment = [[UIAttachmentBehavior alloc]initWithItem:self.orangeView attachedToAnchor:CGPointZero];\n    }\n    return _attachment;\n}\n\n@end"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "@interface ViewController ()\n\n@property (nonatomic, assign) CGFloat magnitudeMultiplier;\n@property (nonatomic, strong) UIDynamicAnimator *dynamicAnimator;\n@property (nonatomic, strong) UIGravityBehavior *gravity;\n@property (nonatomic, strong) UICollisionBehavior *collision;\n@property (nonatomic, strong) UIView *orangeView;\n@property (nonatomic, strong) UIPanGestureRecognizer *panGesture;\n@property (nonatomic, strong) UIAttachmentBehavior *attachment;\n\n@end\n\n@implementation ViewController\n\n- (void)viewDidLoad\n{\n    [super viewDidLoad];\n    [self.dynamicAnimator addBehavior:self.gravity];\n    [self.dynamicAnimator addBehavior:self.collision];\n    [self.orangeView addGestureRecognizer:self.panGesture];\n    // Adjust to change speed of view from flick\n    self.magnitudeMultiplier = 0.0008f;\n}\n\n- (void)viewDidLayoutSubviews\n{\n    [super viewDidLayoutSubviews];\n    self.orangeView.center = self.view.center;\n    [self.dynamicAnimator updateItemUsingCurrentState:self.orangeView];\n}\n\n- (void)handlePan:(UIPanGestureRecognizer *)sender\n{\n    CGPoint location = [sender locationInView:self.view];\n    CGPoint velocity = [sender velocityInView:self.view];\n    CGFloat magnitude = sqrt((velocity.x * velocity.x) + (velocity.y * velocity.y));\n    if (sender.state == UIGestureRecognizerStateBegan)\n    {\n        self.attachment.anchorPoint = location;\n        [self.dynamicAnimator addBehavior:self.attachment];\n    }\n    else if (sender.state == UIGestureRecognizerStateChanged)\n    {\n        self.attachment.anchorPoint = location;\n    }\n    else if (sender.state == UIGestureRecognizerStateCancelled ||\n             sender.state == UIGestureRecognizerStateEnded ||\n             sender.state == UIGestureRecognizerStateFailed ||\n             sender.state == UIGestureRecognizerStatePossible)\n    {\n        UIPushBehavior *push = [[UIPushBehavior alloc] initWithItems:@[self.orangeView] mode:UIPushBehaviorModeInstantaneous];\n        push.pushDirection = CGVectorMake(velocity.x, velocity.y);\n        push.magnitude = magnitude * self.magnitudeMultiplier;\n        [self.dynamicAnimator removeBehavior:self.attachment];\n        [self.dynamicAnimator addBehavior:push];\n    }\n}\n\n#pragma mark - Lazy Init\n- (UIDynamicAnimator *)dynamicAnimator\n{\n    if (!_dynamicAnimator)\n    {\n        _dynamicAnimator = [[UIDynamicAnimator alloc]initWithReferenceView:self.view];\n    }\n    return _dynamicAnimator;\n}\n\n- (UIGravityBehavior *)gravity\n{\n    if (!_gravity)\n    {\n        _gravity = [[UIGravityBehavior alloc]initWithItems:@[self.orangeView]];\n    }\n    return _gravity;\n}\n\n- (UICollisionBehavior *)collision\n{\n    if (!_collision)\n    {\n        _collision = [[UICollisionBehavior alloc]initWithItems:@[self.orangeView]];\n        _collision.translatesReferenceBoundsIntoBoundary = YES;\n    }\n    return _collision;\n}\n\n- (UIView *)orangeView\n{\n    if (!_orangeView)\n    {\n        CGFloat widthHeight = 40.0f;\n        _orangeView = [[UIView alloc]initWithFrame:CGRectMake(0.0, 0.0, widthHeight, widthHeight)];\n        _orangeView.backgroundColor = [UIColor orangeColor];\n        [self.view addSubview:_orangeView];\n    }\n    return _orangeView;\n}\n\n- (UIPanGestureRecognizer *)panGesture\n{\n    if (!_panGesture)\n    {\n        _panGesture = [[UIPanGestureRecognizer alloc]initWithTarget:self action:@selector(handlePan:)];\n    }\n    return _panGesture;\n}\n\n- (UIAttachmentBehavior *)attachment\n{\n    if (!_attachment)\n    {\n        _attachment = [[UIAttachmentBehavior alloc]initWithItem:self.orangeView attachedToAnchor:CGPointZero];\n    }\n    return _attachment;\n}\n\n@end",
        "code_language": "Plain Text"
      }
    ],
    "title": "Flick View Based on Gesture Velocity"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}