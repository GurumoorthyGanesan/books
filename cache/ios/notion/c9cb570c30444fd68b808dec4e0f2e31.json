{
  "ID": "c9cb570c-3044-4fd6-8b80-8dec4e0f2e31",
  "Root": {
    "alive": true,
    "content": [
      "e9385d08-4290-4e8f-a8c6-d2001b420d1f",
      "04a596ff-90d9-46b6-a4a6-3c303264e2b0",
      "630e1d6a-e6bb-430b-a27f-b01398c11095",
      "3f1371a5-acd9-4a32-9ed5-53dee2c601ff",
      "5004d334-5ccf-465d-be08-1956f8a3d95d",
      "06294432-1fbe-465a-87b4-4c354ecadf21",
      "bc543116-7d01-4347-ba61-4aee289a35c1"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550441712240,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "c9cb570c-3044-4fd6-8b80-8dec4e0f2e31",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550713320000,
    "parent_id": "468b0602-725a-4cb6-810e-ca88f35bd501",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Sticky Corners Effect Using UIFieldBehaviors"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550441712234,
        "id": "e9385d08-4290-4e8f-a8c6-d2001b420d1f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550441712234,
        "parent_id": "c9cb570c-3044-4fd6-8b80-8dec4e0f2e31",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This example shows how to achieve an effect similar to FaceTime were a view is attracted to point once it enters a particular region, in this case two regions a top and bottom."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This example shows how to achieve an effect similar to FaceTime were a view is attracted to point once it enters a particular region, in this case two regions a top and bottom."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550441712237,
        "id": "04a596ff-90d9-46b6-a4a6-3c303264e2b0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550441712237,
        "parent_id": "c9cb570c-3044-4fd6-8b80-8dec4e0f2e31",
        "parent_table": "block",
        "properties": {
          "source": [
            [
              "https://i.stack.imgur.com/ICuEL.gif"
            ]
          ]
        },
        "type": "image",
        "version": 1,
        "source": "https://i.stack.imgur.com/ICuEL.gif",
        "image_url": "https://www.notion.so/image/https:%2F%2Fi.stack.imgur.com%2FICuEL.gif"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550441712237,
        "id": "630e1d6a-e6bb-430b-a27f-b01398c11095",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550441712237,
        "parent_id": "c9cb570c-3044-4fd6-8b80-8dec4e0f2e31",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Swift"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Swift"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550441712237,
        "id": "3f1371a5-acd9-4a32-9ed5-53dee2c601ff",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550713320000,
        "parent_id": "c9cb570c-3044-4fd6-8b80-8dec4e0f2e31",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Swift"
            ]
          ],
          "title": [
            [
              "class ViewController: UIViewController\n{\n    lazy var dynamicAnimator: UIDynamicAnimator =\n    {\n        let dynamicAnimator = UIDynamicAnimator(referenceView: self.view)\n        return dynamicAnimator\n    }()\n    \n    lazy var collision: UICollisionBehavior =\n    {\n        let collision = UICollisionBehavior(items: [self.orangeView])\n        collision.translatesReferenceBoundsIntoBoundary = true\n        return collision\n    }()\n    \n    lazy var fieldBehaviors: [UIFieldBehavior] =\n    {\n        var fieldBehaviors = [UIFieldBehavior]()\n        for _ in 0 ..\u003c 2\n        {\n            let field = UIFieldBehavior.springField()\n            field.addItem(self.orangeView)\n            fieldBehaviors.append(field)\n        }\n        return fieldBehaviors\n    }()\n    \n    lazy var itemBehavior: UIDynamicItemBehavior =\n    {\n        let itemBehavior = UIDynamicItemBehavior(items: [self.orangeView])\n        // Adjust these values to change the \"stickiness\" of the view\n        itemBehavior.density = 0.01\n        itemBehavior.resistance = 10\n        itemBehavior.friction = 0.0\n        itemBehavior.allowsRotation = false\n        return itemBehavior\n    }()\n    \n    lazy var orangeView: UIView =\n    {\n        let widthHeight: CGFloat = 40.0\n        let orangeView = UIView(frame: CGRect(x: 0.0, y: 0.0, width: widthHeight, height: widthHeight))\n        orangeView.backgroundColor = UIColor.orange\n        self.view.addSubview(orangeView)\n        return orangeView\n    }()\n    \n    lazy var panGesture: UIPanGestureRecognizer =\n    {\n        let panGesture = UIPanGestureRecognizer(target: self, action: #selector(self.handlePan(sender:)))\n        return panGesture\n    }()\n    \n    lazy var attachment: UIAttachmentBehavior =\n    {\n        let attachment = UIAttachmentBehavior(item: self.orangeView, attachedToAnchor: .zero)\n        return attachment\n    }()\n\n    override func viewDidLoad()\n    {\n        super.viewDidLoad()\n        dynamicAnimator.addBehavior(collision)\n        dynamicAnimator.addBehavior(itemBehavior)\n        for field in fieldBehaviors\n        {\n            dynamicAnimator.addBehavior(field)\n        }\n        \n        orangeView.addGestureRecognizer(panGesture)\n    }\n    \n    override func viewDidLayoutSubviews()\n    {\n        super.viewDidLayoutSubviews()\n        \n        orangeView.center = view.center\n        dynamicAnimator.updateItem(usingCurrentState: orangeView)\n        \n        for (index, field) in fieldBehaviors.enumerated()\n        {\n            field.position = CGPoint(x: view.bounds\n                .midX, y:  view.bounds.height * (0.25 + 0.5 * CGFloat(index)))\n            field.region = UIRegion(size: CGSize(width: view.bounds.width, height: view.bounds.height * 0.5))\n        }\n    }\n    \n    func handlePan(sender: UIPanGestureRecognizer)\n    {\n        let location = sender.location(in: view)\n        let velocity = sender.velocity(in: view)\n        switch sender.state\n        {\n        case .began:\n            attachment.anchorPoint = location\n            dynamicAnimator.addBehavior(attachment)\n        case .changed:\n            attachment.anchorPoint = location\n        case .cancelled, .ended, .failed, .possible:\n            itemBehavior.addLinearVelocity(velocity, for: self.orangeView)\n            dynamicAnimator.removeBehavior(attachment)\n        }\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "class ViewController: UIViewController\n{\n    lazy var dynamicAnimator: UIDynamicAnimator =\n    {\n        let dynamicAnimator = UIDynamicAnimator(referenceView: self.view)\n        return dynamicAnimator\n    }()\n    \n    lazy var collision: UICollisionBehavior =\n    {\n        let collision = UICollisionBehavior(items: [self.orangeView])\n        collision.translatesReferenceBoundsIntoBoundary = true\n        return collision\n    }()\n    \n    lazy var fieldBehaviors: [UIFieldBehavior] =\n    {\n        var fieldBehaviors = [UIFieldBehavior]()\n        for _ in 0 ..\u003c 2\n        {\n            let field = UIFieldBehavior.springField()\n            field.addItem(self.orangeView)\n            fieldBehaviors.append(field)\n        }\n        return fieldBehaviors\n    }()\n    \n    lazy var itemBehavior: UIDynamicItemBehavior =\n    {\n        let itemBehavior = UIDynamicItemBehavior(items: [self.orangeView])\n        // Adjust these values to change the \"stickiness\" of the view\n        itemBehavior.density = 0.01\n        itemBehavior.resistance = 10\n        itemBehavior.friction = 0.0\n        itemBehavior.allowsRotation = false\n        return itemBehavior\n    }()\n    \n    lazy var orangeView: UIView =\n    {\n        let widthHeight: CGFloat = 40.0\n        let orangeView = UIView(frame: CGRect(x: 0.0, y: 0.0, width: widthHeight, height: widthHeight))\n        orangeView.backgroundColor = UIColor.orange\n        self.view.addSubview(orangeView)\n        return orangeView\n    }()\n    \n    lazy var panGesture: UIPanGestureRecognizer =\n    {\n        let panGesture = UIPanGestureRecognizer(target: self, action: #selector(self.handlePan(sender:)))\n        return panGesture\n    }()\n    \n    lazy var attachment: UIAttachmentBehavior =\n    {\n        let attachment = UIAttachmentBehavior(item: self.orangeView, attachedToAnchor: .zero)\n        return attachment\n    }()\n\n    override func viewDidLoad()\n    {\n        super.viewDidLoad()\n        dynamicAnimator.addBehavior(collision)\n        dynamicAnimator.addBehavior(itemBehavior)\n        for field in fieldBehaviors\n        {\n            dynamicAnimator.addBehavior(field)\n        }\n        \n        orangeView.addGestureRecognizer(panGesture)\n    }\n    \n    override func viewDidLayoutSubviews()\n    {\n        super.viewDidLayoutSubviews()\n        \n        orangeView.center = view.center\n        dynamicAnimator.updateItem(usingCurrentState: orangeView)\n        \n        for (index, field) in fieldBehaviors.enumerated()\n        {\n            field.position = CGPoint(x: view.bounds\n                .midX, y:  view.bounds.height * (0.25 + 0.5 * CGFloat(index)))\n            field.region = UIRegion(size: CGSize(width: view.bounds.width, height: view.bounds.height * 0.5))\n        }\n    }\n    \n    func handlePan(sender: UIPanGestureRecognizer)\n    {\n        let location = sender.location(in: view)\n        let velocity = sender.velocity(in: view)\n        switch sender.state\n        {\n        case .began:\n            attachment.anchorPoint = location\n            dynamicAnimator.addBehavior(attachment)\n        case .changed:\n            attachment.anchorPoint = location\n        case .cancelled, .ended, .failed, .possible:\n            itemBehavior.addLinearVelocity(velocity, for: self.orangeView)\n            dynamicAnimator.removeBehavior(attachment)\n        }\n    }\n}",
        "code_language": "Swift"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550441712237,
        "id": "5004d334-5ccf-465d-be08-1956f8a3d95d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550441712237,
        "parent_id": "c9cb570c-3044-4fd6-8b80-8dec4e0f2e31",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Objective-C"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Objective-C"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550441712237,
        "id": "06294432-1fbe-465a-87b4-4c354ecadf21",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550441712237,
        "parent_id": "c9cb570c-3044-4fd6-8b80-8dec4e0f2e31",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "@interface ViewController ()\n\n@property (nonatomic, strong) UIDynamicAnimator *dynamicAnimator;\n@property (nonatomic, strong) UICollisionBehavior *collision;\n@property (nonatomic, strong) UIAttachmentBehavior *attachment;\n@property (nonatomic, strong) UIDynamicItemBehavior *itemBehavior;\n@property (nonatomic, strong) NSArray \u003cUIFieldBehavior *\u003e *fieldBehaviors;\n@property (nonatomic, strong) UIView *orangeView;\n@property (nonatomic, strong) UIPanGestureRecognizer *panGesture;\n\n@end\n\n@implementation ViewController\n\n- (void)viewDidLoad\n{\n    [super viewDidLoad];\n    [self.dynamicAnimator addBehavior:self.collision];\n    [self.dynamicAnimator addBehavior:self.itemBehavior];\n    for (UIFieldBehavior *field in self.fieldBehaviors)\n    {\n        [self.dynamicAnimator addBehavior:field];\n    }\n    \n    [self.orangeView addGestureRecognizer:self.panGesture];\n}\n\n- (void)viewDidLayoutSubviews\n{\n    [super viewDidLayoutSubviews];\n    self.orangeView.center = self.view.center;\n    [self.dynamicAnimator updateItemUsingCurrentState:self.orangeView];\n    \n    for (NSInteger i = 0; i \u003c self.fieldBehaviors.count; i++)\n    {\n        UIFieldBehavior *field = self.fieldBehaviors[i];\n        field.position = CGPointMake(CGRectGetMidX(self.view.bounds), CGRectGetHeight(self.view.bounds) * (0.25f + 0.5f * i));\n        field.region = [[UIRegion alloc]initWithSize:CGSizeMake(CGRectGetWidth(self.view.bounds), CGRectGetHeight(self.view.bounds) * 0.5)];\n    }\n}\n\n- (void)handlePan:(UIPanGestureRecognizer *)sender\n{\n    CGPoint location = [sender locationInView:self.view];\n    CGPoint velocity = [sender velocityInView:self.view];\n    if (sender.state == UIGestureRecognizerStateBegan)\n    {\n        self.attachment.anchorPoint = location;\n        [self.dynamicAnimator addBehavior:self.attachment];\n    }\n    else if (sender.state == UIGestureRecognizerStateChanged)\n    {\n        self.attachment.anchorPoint = location;\n    }\n    else if (sender.state == UIGestureRecognizerStateCancelled ||\n             sender.state == UIGestureRecognizerStateEnded ||\n             sender.state == UIGestureRecognizerStateFailed ||\n             sender.state == UIGestureRecognizerStatePossible)\n    {\n        [self.itemBehavior addLinearVelocity:velocity forItem:self.orangeView];\n        [self.dynamicAnimator removeBehavior:self.attachment];\n    }\n}\n\n#pragma mark - Lazy Init\n- (UIDynamicAnimator *)dynamicAnimator\n{\n    if (!_dynamicAnimator)\n    {\n        _dynamicAnimator = [[UIDynamicAnimator alloc]initWithReferenceView:self.view];\n    }\n    return _dynamicAnimator;\n}\n\n- (UICollisionBehavior *)collision\n{\n    if (!_collision)\n    {\n        _collision = [[UICollisionBehavior alloc]initWithItems:@[self.orangeView]];\n        _collision.translatesReferenceBoundsIntoBoundary = YES;\n    }\n    return _collision;\n}\n\n- (NSArray \u003cUIFieldBehavior *\u003e *)fieldBehaviors\n{\n    if (!_fieldBehaviors)\n    {\n        NSMutableArray *fields = [[NSMutableArray alloc]init];\n        for (NSInteger i =  0; i \u003c 2; i++)\n        {\n            UIFieldBehavior *field = [UIFieldBehavior springField];\n            [field addItem:self.orangeView];\n            [fields addObject:field];\n        }\n        _fieldBehaviors = fields;\n    }\n    return _fieldBehaviors;\n}\n\n- (UIDynamicItemBehavior *)itemBehavior\n{\n    if (!_itemBehavior)\n    {\n        _itemBehavior = [[UIDynamicItemBehavior alloc]initWithItems:@[self.orangeView]];\n        // Adjust these values to change the \"stickiness\" of the view\n        _itemBehavior.density = 0.01;\n        _itemBehavior.resistance = 10;\n        _itemBehavior.friction = 0.0;\n        _itemBehavior.allowsRotation = NO;\n    }\n    return _itemBehavior;\n}\n\n- (UIView *)orangeView\n{\n    if (!_orangeView)\n    {\n        CGFloat widthHeight = 40.0f;\n        _orangeView = [[UIView alloc]initWithFrame:CGRectMake(0.0, 0.0, widthHeight, widthHeight)];\n        _orangeView.backgroundColor = [UIColor orangeColor];\n        [self.view addSubview:_orangeView];\n    }\n    return _orangeView;\n}\n\n- (UIPanGestureRecognizer *)panGesture\n{\n    if (!_panGesture)\n    {\n        _panGesture = [[UIPanGestureRecognizer alloc]initWithTarget:self action:@selector(handlePan:)];\n    }\n    return _panGesture;\n}\n\n- (UIAttachmentBehavior *)attachment\n{\n    if (!_attachment)\n    {\n        _attachment = [[UIAttachmentBehavior alloc]initWithItem:self.orangeView attachedToAnchor:CGPointZero];\n    }\n    return _attachment;\n}\n\n@end"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "@interface ViewController ()\n\n@property (nonatomic, strong) UIDynamicAnimator *dynamicAnimator;\n@property (nonatomic, strong) UICollisionBehavior *collision;\n@property (nonatomic, strong) UIAttachmentBehavior *attachment;\n@property (nonatomic, strong) UIDynamicItemBehavior *itemBehavior;\n@property (nonatomic, strong) NSArray \u003cUIFieldBehavior *\u003e *fieldBehaviors;\n@property (nonatomic, strong) UIView *orangeView;\n@property (nonatomic, strong) UIPanGestureRecognizer *panGesture;\n\n@end\n\n@implementation ViewController\n\n- (void)viewDidLoad\n{\n    [super viewDidLoad];\n    [self.dynamicAnimator addBehavior:self.collision];\n    [self.dynamicAnimator addBehavior:self.itemBehavior];\n    for (UIFieldBehavior *field in self.fieldBehaviors)\n    {\n        [self.dynamicAnimator addBehavior:field];\n    }\n    \n    [self.orangeView addGestureRecognizer:self.panGesture];\n}\n\n- (void)viewDidLayoutSubviews\n{\n    [super viewDidLayoutSubviews];\n    self.orangeView.center = self.view.center;\n    [self.dynamicAnimator updateItemUsingCurrentState:self.orangeView];\n    \n    for (NSInteger i = 0; i \u003c self.fieldBehaviors.count; i++)\n    {\n        UIFieldBehavior *field = self.fieldBehaviors[i];\n        field.position = CGPointMake(CGRectGetMidX(self.view.bounds), CGRectGetHeight(self.view.bounds) * (0.25f + 0.5f * i));\n        field.region = [[UIRegion alloc]initWithSize:CGSizeMake(CGRectGetWidth(self.view.bounds), CGRectGetHeight(self.view.bounds) * 0.5)];\n    }\n}\n\n- (void)handlePan:(UIPanGestureRecognizer *)sender\n{\n    CGPoint location = [sender locationInView:self.view];\n    CGPoint velocity = [sender velocityInView:self.view];\n    if (sender.state == UIGestureRecognizerStateBegan)\n    {\n        self.attachment.anchorPoint = location;\n        [self.dynamicAnimator addBehavior:self.attachment];\n    }\n    else if (sender.state == UIGestureRecognizerStateChanged)\n    {\n        self.attachment.anchorPoint = location;\n    }\n    else if (sender.state == UIGestureRecognizerStateCancelled ||\n             sender.state == UIGestureRecognizerStateEnded ||\n             sender.state == UIGestureRecognizerStateFailed ||\n             sender.state == UIGestureRecognizerStatePossible)\n    {\n        [self.itemBehavior addLinearVelocity:velocity forItem:self.orangeView];\n        [self.dynamicAnimator removeBehavior:self.attachment];\n    }\n}\n\n#pragma mark - Lazy Init\n- (UIDynamicAnimator *)dynamicAnimator\n{\n    if (!_dynamicAnimator)\n    {\n        _dynamicAnimator = [[UIDynamicAnimator alloc]initWithReferenceView:self.view];\n    }\n    return _dynamicAnimator;\n}\n\n- (UICollisionBehavior *)collision\n{\n    if (!_collision)\n    {\n        _collision = [[UICollisionBehavior alloc]initWithItems:@[self.orangeView]];\n        _collision.translatesReferenceBoundsIntoBoundary = YES;\n    }\n    return _collision;\n}\n\n- (NSArray \u003cUIFieldBehavior *\u003e *)fieldBehaviors\n{\n    if (!_fieldBehaviors)\n    {\n        NSMutableArray *fields = [[NSMutableArray alloc]init];\n        for (NSInteger i =  0; i \u003c 2; i++)\n        {\n            UIFieldBehavior *field = [UIFieldBehavior springField];\n            [field addItem:self.orangeView];\n            [fields addObject:field];\n        }\n        _fieldBehaviors = fields;\n    }\n    return _fieldBehaviors;\n}\n\n- (UIDynamicItemBehavior *)itemBehavior\n{\n    if (!_itemBehavior)\n    {\n        _itemBehavior = [[UIDynamicItemBehavior alloc]initWithItems:@[self.orangeView]];\n        // Adjust these values to change the \"stickiness\" of the view\n        _itemBehavior.density = 0.01;\n        _itemBehavior.resistance = 10;\n        _itemBehavior.friction = 0.0;\n        _itemBehavior.allowsRotation = NO;\n    }\n    return _itemBehavior;\n}\n\n- (UIView *)orangeView\n{\n    if (!_orangeView)\n    {\n        CGFloat widthHeight = 40.0f;\n        _orangeView = [[UIView alloc]initWithFrame:CGRectMake(0.0, 0.0, widthHeight, widthHeight)];\n        _orangeView.backgroundColor = [UIColor orangeColor];\n        [self.view addSubview:_orangeView];\n    }\n    return _orangeView;\n}\n\n- (UIPanGestureRecognizer *)panGesture\n{\n    if (!_panGesture)\n    {\n        _panGesture = [[UIPanGestureRecognizer alloc]initWithTarget:self action:@selector(handlePan:)];\n    }\n    return _panGesture;\n}\n\n- (UIAttachmentBehavior *)attachment\n{\n    if (!_attachment)\n    {\n        _attachment = [[UIAttachmentBehavior alloc]initWithItem:self.orangeView attachedToAnchor:CGPointZero];\n    }\n    return _attachment;\n}\n\n@end",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550441712239,
        "id": "bc543116-7d01-4347-ba61-4aee289a35c1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550441712239,
        "parent_id": "c9cb570c-3044-4fd6-8b80-8dec4e0f2e31",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For more information about "
            ],
            [
              "UIFieldBehaviors",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " you can see the "
            ],
            [
              "2015 WWDC Session “What’s New in UIKit Dynamics and Visual Effects”",
              [
                [
                  "a",
                  "https://developer.apple.com/videos/play/wwdc2015/229/"
                ]
              ]
            ],
            [
              " and accompanying "
            ],
            [
              "sample code",
              [
                [
                  "a",
                  "https://developer.apple.com/library/content/samplecode/StickyCorners/Introduction/Intro.html"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For more information about "
          },
          {
            "Text": "UIFieldBehaviors",
            "AttrFlags": 2
          },
          {
            "Text": " you can see the "
          },
          {
            "Text": "2015 WWDC Session “What’s New in UIKit Dynamics and Visual Effects”",
            "Link": "https://developer.apple.com/videos/play/wwdc2015/229/"
          },
          {
            "Text": " and accompanying "
          },
          {
            "Text": "sample code",
            "Link": "https://developer.apple.com/library/content/samplecode/StickyCorners/Introduction/Intro.html"
          },
          {
            "Text": "."
          }
        ]
      }
    ],
    "title": "Sticky Corners Effect Using UIFieldBehaviors",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}