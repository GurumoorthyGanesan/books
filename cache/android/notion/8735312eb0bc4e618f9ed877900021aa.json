{
  "ID": "8735312e-b0bc-4e61-8f9e-d877900021aa",
  "Root": {
    "alive": true,
    "content": [
      "377cb6fe-32a7-4a4e-9f77-fc4ee0dbc999",
      "286ad376-d65e-469b-aeeb-ea7cdd29b275",
      "9f34619e-81e1-42a6-9768-ffe23ff26fa3",
      "4c041c98-1f6a-49d7-bf0b-39cedc5df528",
      "f6b9933c-8517-495d-932b-407ee481a88c",
      "29f651e5-2252-4818-8e06-8933b1b162cb",
      "6a7f5aef-9cc5-4327-8184-c5ea2042c641",
      "af5941c9-5c94-4713-8dfb-8d92742486f2",
      "328e25d7-3e94-45a2-be40-b7e0a5fb64e8",
      "955ad00f-e58e-43f2-b6fa-6e655e422d9a",
      "a282eec0-4efe-4fe2-a50b-70090cef077f"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550450280975,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "8735312e-b0bc-4e61-8f9e-d877900021aa",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550450280975,
    "parent_id": "963e797e-dea4-4392-8454-e58d4d898886",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Firebase Storage Operations"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550450280971,
        "id": "377cb6fe-32a7-4a4e-9f77-fc4ee0dbc999",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550450280971,
        "parent_id": "8735312e-b0bc-4e61-8f9e-d877900021aa",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "With this example, you will be able to perform following operations:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "With this example, you will be able to perform following operations:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550450280974,
        "id": "286ad376-d65e-469b-aeeb-ea7cdd29b275",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550450280974,
        "parent_id": "8735312e-b0bc-4e61-8f9e-d877900021aa",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Connect to Firebase Storage"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Connect to Firebase Storage"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550450280974,
        "id": "9f34619e-81e1-42a6-9768-ffe23ff26fa3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550450280974,
        "parent_id": "8735312e-b0bc-4e61-8f9e-d877900021aa",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Create a directory named “images”"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Create a directory named “images”"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550450280974,
        "id": "4c041c98-1f6a-49d7-bf0b-39cedc5df528",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550450280974,
        "parent_id": "8735312e-b0bc-4e61-8f9e-d877900021aa",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Upload a file in images directory"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Upload a file in images directory"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550450280974,
        "id": "f6b9933c-8517-495d-932b-407ee481a88c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550450280974,
        "parent_id": "8735312e-b0bc-4e61-8f9e-d877900021aa",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Download a file from images directory"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Download a file from images directory"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550450280975,
        "id": "29f651e5-2252-4818-8e06-8933b1b162cb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550450280975,
        "parent_id": "8735312e-b0bc-4e61-8f9e-d877900021aa",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Delete a file from images directory"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Delete a file from images directory"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550450280975,
        "id": "6a7f5aef-9cc5-4327-8184-c5ea2042c641",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550450280975,
        "parent_id": "8735312e-b0bc-4e61-8f9e-d877900021aa",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class MainActivity extends AppCompatActivity {\n\n    private static final int REQUEST_CODE_PICK_IMAGE = 1;\n    private static final int PERMISSION_READ_WRITE_EXTERNAL_STORAGE = 2;\n\n    private FirebaseStorage mFirebaseStorage;\n    private StorageReference mStorageReference;\n    private StorageReference mStorageReferenceImages;\n    private Uri mUri;\n    private ImageView mImageView;\n    private ProgressDialog mProgressDialog;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);\n        mImageView = (ImageView) findViewById(R.id.imageView);\n        setSupportActionBar(toolbar);\n\n        // Create an instance of Firebase Storage\n        mFirebaseStorage = FirebaseStorage.getInstance();\n    }\n\n    private void pickImage() {\n        Intent intent = new Intent(Intent.ACTION_PICK, android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);\n        intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);\n        intent.addFlags(Intent.FLAG_GRANT_WRITE_URI_PERMISSION);\n        startActivityForResult(intent, REQUEST_CODE_PICK_IMAGE);\n    }\n\n    @Override\n    public void onActivityResult(int requestCode, int resultCode, Intent data) {\n        if (resultCode == RESULT_OK) {\n            if (requestCode == REQUEST_CODE_PICK_IMAGE) {\n                String filePath = FileUtil.getPath(this, data.getData());\n                mUri = Uri.fromFile(new File(filePath));\n                uploadFile(mUri);\n            }\n        }\n    }\n\n    @Override\n    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults);\n        if (requestCode == PERMISSION_READ_WRITE_EXTERNAL_STORAGE) {\n            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\n                pickImage();\n            }\n        }\n    }\n\n    private void showProgressDialog(String title, String message) {\n        if (mProgressDialog != null \u0026\u0026 mProgressDialog.isShowing())\n            mProgressDialog.setMessage(message);\n        else\n            mProgressDialog = ProgressDialog.show(this, title, message, true, false);\n    }\n\n    private void hideProgressDialog() {\n        if (mProgressDialog != null \u0026\u0026 mProgressDialog.isShowing()) {\n            mProgressDialog.dismiss();\n        }\n    }\n\n    private void showToast(String message) {\n        Toast.makeText(this, message, Toast.LENGTH_SHORT).show();\n    }\n\n    public void showHorizontalProgressDialog(String title, String body) {\n\n        if (mProgressDialog != null \u0026\u0026 mProgressDialog.isShowing()) {\n            mProgressDialog.setTitle(title);\n            mProgressDialog.setMessage(body);\n        } else {\n            mProgressDialog = new ProgressDialog(this);\n            mProgressDialog.setTitle(title);\n            mProgressDialog.setMessage(body);\n            mProgressDialog.setIndeterminate(false);\n            mProgressDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);\n            mProgressDialog.setProgress(0);\n            mProgressDialog.setMax(100);\n            mProgressDialog.setCancelable(false);\n            mProgressDialog.show();\n        }\n    }\n\n    public void updateProgress(int progress) {\n        if (mProgressDialog != null \u0026\u0026 mProgressDialog.isShowing()) {\n            mProgressDialog.setProgress(progress);\n        }\n    }\n\n    /**\n     * Step 1: Create a Storage\n     *\n     * @param view\n     */\n    public void onCreateReferenceClick(View view) {\n        mStorageReference = mFirebaseStorage.getReferenceFromUrl(\"gs://**something**.appspot.com\");\n        showToast(\"Reference Created Successfully.\");\n        findViewById(R.id.button_step_2).setEnabled(true);\n    }\n\n    /**\n     * Step 2: Create a directory named \"Images\"\n     *\n     * @param view\n     */\n    public void onCreateDirectoryClick(View view) {\n        mStorageReferenceImages = mStorageReference.child(\"images\");\n        showToast(\"Directory 'images' created Successfully.\");\n        findViewById(R.id.button_step_3).setEnabled(true);\n    }\n\n    /**\n     * Step 3: Upload an Image File and display it on ImageView\n     *\n     * @param view\n     */\n    public void onUploadFileClick(View view) {\n        if (ContextCompat.checkSelfPermission(MainActivity.this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED || ActivityCompat.checkSelfPermission(MainActivity.this, Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)\n            ActivityCompat.requestPermissions(MainActivity.this, new String[]{Manifest.permission.READ_EXTERNAL_STORAGE, Manifest.permission.WRITE_EXTERNAL_STORAGE}, PERMISSION_READ_WRITE_EXTERNAL_STORAGE);\n        else {\n            pickImage();\n        }\n    }\n\n    /**\n     * Step 4: Download an Image File and display it on ImageView\n     *\n     * @param view\n     */\n    public void onDownloadFileClick(View view) {\n        downloadFile(mUri);\n    }\n\n    /**\n     * Step 5: Delete am Image File and remove Image from ImageView\n     *\n     * @param view\n     */\n    public void onDeleteFileClick(View view) {\n        deleteFile(mUri);\n    }\n\n    private void showAlertDialog(Context ctx, String title, String body, DialogInterface.OnClickListener okListener) {\n\n        if (okListener == null) {\n            okListener = new DialogInterface.OnClickListener() {\n\n                public void onClick(DialogInterface dialog, int which) {\n                    dialog.cancel();\n                }\n            };\n        }\n\n        AlertDialog.Builder builder = new AlertDialog.Builder(ctx).setMessage(body).setPositiveButton(\"OK\", okListener).setCancelable(false);\n\n        if (!TextUtils.isEmpty(title)) {\n            builder.setTitle(title);\n        }\n\n        builder.show();\n    }\n\n    private void uploadFile(Uri uri) {\n        mImageView.setImageResource(R.drawable.placeholder_image);\n\n        StorageReference uploadStorageReference = mStorageReferenceImages.child(uri.getLastPathSegment());\n        final UploadTask uploadTask = uploadStorageReference.putFile(uri);\n        showHorizontalProgressDialog(\"Uploading\", \"Please wait...\");\n        uploadTask\n                .addOnSuccessListener(new OnSuccessListener\u003cUploadTask.TaskSnapshot\u003e() {\n                    @Override\n                    public void onSuccess(UploadTask.TaskSnapshot taskSnapshot) {\n                        hideProgressDialog();\n                        Uri downloadUrl = taskSnapshot.getDownloadUrl();\n                        Log.d(\"MainActivity\", downloadUrl.toString());\n                        showAlertDialog(MainActivity.this, \"Upload Complete\", downloadUrl.toString(), new DialogInterface.OnClickListener() {\n                            @Override\n                            public void onClick(DialogInterface dialogInterface, int i) {\n                                findViewById(R.id.button_step_3).setEnabled(false);\n                                findViewById(R.id.button_step_4).setEnabled(true);\n                            }\n                        });\n\n                        Glide.with(MainActivity.this)\n                                .load(downloadUrl)\n                                .into(mImageView);\n                    }\n                })\n                .addOnFailureListener(new OnFailureListener() {\n                    @Override\n                    public void onFailure(@NonNull Exception exception) {\n                        exception.printStackTrace();\n                        // Handle unsuccessful uploads\n                        hideProgressDialog();\n                    }\n                })\n                .addOnProgressListener(MainActivity.this, new OnProgressListener\u003cUploadTask.TaskSnapshot\u003e() {\n                    @Override\n                    public void onProgress(UploadTask.TaskSnapshot taskSnapshot) {\n                        int progress = (int) (100 * (float) taskSnapshot.getBytesTransferred() / taskSnapshot.getTotalByteCount());\n                        Log.i(\"Progress\", progress + \"\");\n                        updateProgress(progress);\n                    }\n                });\n    }\n\n    private void downloadFile(Uri uri) {\n        mImageView.setImageResource(R.drawable.placeholder_image);\n        final StorageReference storageReferenceImage = mStorageReferenceImages.child(uri.getLastPathSegment());\n        File mediaStorageDir = new File(Environment.getExternalStoragePublicDirectory(\n                Environment.DIRECTORY_PICTURES), \"Firebase Storage\");\n        if (!mediaStorageDir.exists()) {\n            if (!mediaStorageDir.mkdirs()) {\n                Log.d(\"MainActivity\", \"failed to create Firebase Storage directory\");\n            }\n        }\n\n        final File localFile = new File(mediaStorageDir, uri.getLastPathSegment());\n        try {\n            localFile.createNewFile();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n        showHorizontalProgressDialog(\"Downloading\", \"Please wait...\");\n        storageReferenceImage.getFile(localFile).addOnSuccessListener(new OnSuccessListener\u003cFileDownloadTask.TaskSnapshot\u003e() {\n            @Override\n            public void onSuccess(FileDownloadTask.TaskSnapshot taskSnapshot) {\n                hideProgressDialog();\n                showAlertDialog(MainActivity.this, \"Download Complete\", localFile.getAbsolutePath(), new DialogInterface.OnClickListener() {\n                    @Override\n                    public void onClick(DialogInterface dialogInterface, int i) {\n                        findViewById(R.id.button_step_4).setEnabled(false);\n                        findViewById(R.id.button_step_5).setEnabled(true);\n                    }\n                });\n\n                Glide.with(MainActivity.this)\n                        .load(localFile)\n                        .into(mImageView);\n            }\n        }).addOnFailureListener(new OnFailureListener() {\n            @Override\n            public void onFailure(@NonNull Exception exception) {\n                // Handle any errors\n                hideProgressDialog();\n                exception.printStackTrace();\n            }\n        }).addOnProgressListener(new OnProgressListener\u003cFileDownloadTask.TaskSnapshot\u003e() {\n            @Override\n            public void onProgress(FileDownloadTask.TaskSnapshot taskSnapshot) {\n                int progress = (int) (100 * (float) taskSnapshot.getBytesTransferred() / taskSnapshot.getTotalByteCount());\n                Log.i(\"Progress\", progress + \"\");\n                updateProgress(progress);\n            }\n        });\n    }\n\n    private void deleteFile(Uri uri) {\n        showProgressDialog(\"Deleting\", \"Please wait...\");\n        StorageReference storageReferenceImage = mStorageReferenceImages.child(uri.getLastPathSegment());\n        storageReferenceImage.delete().addOnSuccessListener(new OnSuccessListener\u003cVoid\u003e() {\n            @Override\n            public void onSuccess(Void aVoid) {\n                hideProgressDialog();\n                showAlertDialog(MainActivity.this, \"Success\", \"File deleted successfully.\", new DialogInterface.OnClickListener() {\n                    @Override\n                    public void onClick(DialogInterface dialogInterface, int i) {\n                        mImageView.setImageResource(R.drawable.placeholder_image);\n                        findViewById(R.id.button_step_3).setEnabled(true);\n                        findViewById(R.id.button_step_4).setEnabled(false);\n                        findViewById(R.id.button_step_5).setEnabled(false);\n                    }\n                });\n                File mediaStorageDir = new File(Environment.getExternalStoragePublicDirectory(\n                        Environment.DIRECTORY_PICTURES), \"Firebase Storage\");\n                if (!mediaStorageDir.exists()) {\n                    if (!mediaStorageDir.mkdirs()) {\n                        Log.d(\"MainActivity\", \"failed to create Firebase Storage directory\");\n                    }\n                }\n                deleteFiles(mediaStorageDir);\n            }\n        }).addOnFailureListener(new OnFailureListener() {\n            @Override\n            public void onFailure(@NonNull Exception exception) {\n                hideProgressDialog();\n                exception.printStackTrace();\n            }\n        });\n    }\n\n    private void deleteFiles(File directory) {\n        if (directory.isDirectory())\n            for (File child : directory.listFiles())\n                child.delete();\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class MainActivity extends AppCompatActivity {\n\n    private static final int REQUEST_CODE_PICK_IMAGE = 1;\n    private static final int PERMISSION_READ_WRITE_EXTERNAL_STORAGE = 2;\n\n    private FirebaseStorage mFirebaseStorage;\n    private StorageReference mStorageReference;\n    private StorageReference mStorageReferenceImages;\n    private Uri mUri;\n    private ImageView mImageView;\n    private ProgressDialog mProgressDialog;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);\n        mImageView = (ImageView) findViewById(R.id.imageView);\n        setSupportActionBar(toolbar);\n\n        // Create an instance of Firebase Storage\n        mFirebaseStorage = FirebaseStorage.getInstance();\n    }\n\n    private void pickImage() {\n        Intent intent = new Intent(Intent.ACTION_PICK, android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);\n        intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);\n        intent.addFlags(Intent.FLAG_GRANT_WRITE_URI_PERMISSION);\n        startActivityForResult(intent, REQUEST_CODE_PICK_IMAGE);\n    }\n\n    @Override\n    public void onActivityResult(int requestCode, int resultCode, Intent data) {\n        if (resultCode == RESULT_OK) {\n            if (requestCode == REQUEST_CODE_PICK_IMAGE) {\n                String filePath = FileUtil.getPath(this, data.getData());\n                mUri = Uri.fromFile(new File(filePath));\n                uploadFile(mUri);\n            }\n        }\n    }\n\n    @Override\n    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults);\n        if (requestCode == PERMISSION_READ_WRITE_EXTERNAL_STORAGE) {\n            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\n                pickImage();\n            }\n        }\n    }\n\n    private void showProgressDialog(String title, String message) {\n        if (mProgressDialog != null \u0026\u0026 mProgressDialog.isShowing())\n            mProgressDialog.setMessage(message);\n        else\n            mProgressDialog = ProgressDialog.show(this, title, message, true, false);\n    }\n\n    private void hideProgressDialog() {\n        if (mProgressDialog != null \u0026\u0026 mProgressDialog.isShowing()) {\n            mProgressDialog.dismiss();\n        }\n    }\n\n    private void showToast(String message) {\n        Toast.makeText(this, message, Toast.LENGTH_SHORT).show();\n    }\n\n    public void showHorizontalProgressDialog(String title, String body) {\n\n        if (mProgressDialog != null \u0026\u0026 mProgressDialog.isShowing()) {\n            mProgressDialog.setTitle(title);\n            mProgressDialog.setMessage(body);\n        } else {\n            mProgressDialog = new ProgressDialog(this);\n            mProgressDialog.setTitle(title);\n            mProgressDialog.setMessage(body);\n            mProgressDialog.setIndeterminate(false);\n            mProgressDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);\n            mProgressDialog.setProgress(0);\n            mProgressDialog.setMax(100);\n            mProgressDialog.setCancelable(false);\n            mProgressDialog.show();\n        }\n    }\n\n    public void updateProgress(int progress) {\n        if (mProgressDialog != null \u0026\u0026 mProgressDialog.isShowing()) {\n            mProgressDialog.setProgress(progress);\n        }\n    }\n\n    /**\n     * Step 1: Create a Storage\n     *\n     * @param view\n     */\n    public void onCreateReferenceClick(View view) {\n        mStorageReference = mFirebaseStorage.getReferenceFromUrl(\"gs://**something**.appspot.com\");\n        showToast(\"Reference Created Successfully.\");\n        findViewById(R.id.button_step_2).setEnabled(true);\n    }\n\n    /**\n     * Step 2: Create a directory named \"Images\"\n     *\n     * @param view\n     */\n    public void onCreateDirectoryClick(View view) {\n        mStorageReferenceImages = mStorageReference.child(\"images\");\n        showToast(\"Directory 'images' created Successfully.\");\n        findViewById(R.id.button_step_3).setEnabled(true);\n    }\n\n    /**\n     * Step 3: Upload an Image File and display it on ImageView\n     *\n     * @param view\n     */\n    public void onUploadFileClick(View view) {\n        if (ContextCompat.checkSelfPermission(MainActivity.this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED || ActivityCompat.checkSelfPermission(MainActivity.this, Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)\n            ActivityCompat.requestPermissions(MainActivity.this, new String[]{Manifest.permission.READ_EXTERNAL_STORAGE, Manifest.permission.WRITE_EXTERNAL_STORAGE}, PERMISSION_READ_WRITE_EXTERNAL_STORAGE);\n        else {\n            pickImage();\n        }\n    }\n\n    /**\n     * Step 4: Download an Image File and display it on ImageView\n     *\n     * @param view\n     */\n    public void onDownloadFileClick(View view) {\n        downloadFile(mUri);\n    }\n\n    /**\n     * Step 5: Delete am Image File and remove Image from ImageView\n     *\n     * @param view\n     */\n    public void onDeleteFileClick(View view) {\n        deleteFile(mUri);\n    }\n\n    private void showAlertDialog(Context ctx, String title, String body, DialogInterface.OnClickListener okListener) {\n\n        if (okListener == null) {\n            okListener = new DialogInterface.OnClickListener() {\n\n                public void onClick(DialogInterface dialog, int which) {\n                    dialog.cancel();\n                }\n            };\n        }\n\n        AlertDialog.Builder builder = new AlertDialog.Builder(ctx).setMessage(body).setPositiveButton(\"OK\", okListener).setCancelable(false);\n\n        if (!TextUtils.isEmpty(title)) {\n            builder.setTitle(title);\n        }\n\n        builder.show();\n    }\n\n    private void uploadFile(Uri uri) {\n        mImageView.setImageResource(R.drawable.placeholder_image);\n\n        StorageReference uploadStorageReference = mStorageReferenceImages.child(uri.getLastPathSegment());\n        final UploadTask uploadTask = uploadStorageReference.putFile(uri);\n        showHorizontalProgressDialog(\"Uploading\", \"Please wait...\");\n        uploadTask\n                .addOnSuccessListener(new OnSuccessListener\u003cUploadTask.TaskSnapshot\u003e() {\n                    @Override\n                    public void onSuccess(UploadTask.TaskSnapshot taskSnapshot) {\n                        hideProgressDialog();\n                        Uri downloadUrl = taskSnapshot.getDownloadUrl();\n                        Log.d(\"MainActivity\", downloadUrl.toString());\n                        showAlertDialog(MainActivity.this, \"Upload Complete\", downloadUrl.toString(), new DialogInterface.OnClickListener() {\n                            @Override\n                            public void onClick(DialogInterface dialogInterface, int i) {\n                                findViewById(R.id.button_step_3).setEnabled(false);\n                                findViewById(R.id.button_step_4).setEnabled(true);\n                            }\n                        });\n\n                        Glide.with(MainActivity.this)\n                                .load(downloadUrl)\n                                .into(mImageView);\n                    }\n                })\n                .addOnFailureListener(new OnFailureListener() {\n                    @Override\n                    public void onFailure(@NonNull Exception exception) {\n                        exception.printStackTrace();\n                        // Handle unsuccessful uploads\n                        hideProgressDialog();\n                    }\n                })\n                .addOnProgressListener(MainActivity.this, new OnProgressListener\u003cUploadTask.TaskSnapshot\u003e() {\n                    @Override\n                    public void onProgress(UploadTask.TaskSnapshot taskSnapshot) {\n                        int progress = (int) (100 * (float) taskSnapshot.getBytesTransferred() / taskSnapshot.getTotalByteCount());\n                        Log.i(\"Progress\", progress + \"\");\n                        updateProgress(progress);\n                    }\n                });\n    }\n\n    private void downloadFile(Uri uri) {\n        mImageView.setImageResource(R.drawable.placeholder_image);\n        final StorageReference storageReferenceImage = mStorageReferenceImages.child(uri.getLastPathSegment());\n        File mediaStorageDir = new File(Environment.getExternalStoragePublicDirectory(\n                Environment.DIRECTORY_PICTURES), \"Firebase Storage\");\n        if (!mediaStorageDir.exists()) {\n            if (!mediaStorageDir.mkdirs()) {\n                Log.d(\"MainActivity\", \"failed to create Firebase Storage directory\");\n            }\n        }\n\n        final File localFile = new File(mediaStorageDir, uri.getLastPathSegment());\n        try {\n            localFile.createNewFile();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n        showHorizontalProgressDialog(\"Downloading\", \"Please wait...\");\n        storageReferenceImage.getFile(localFile).addOnSuccessListener(new OnSuccessListener\u003cFileDownloadTask.TaskSnapshot\u003e() {\n            @Override\n            public void onSuccess(FileDownloadTask.TaskSnapshot taskSnapshot) {\n                hideProgressDialog();\n                showAlertDialog(MainActivity.this, \"Download Complete\", localFile.getAbsolutePath(), new DialogInterface.OnClickListener() {\n                    @Override\n                    public void onClick(DialogInterface dialogInterface, int i) {\n                        findViewById(R.id.button_step_4).setEnabled(false);\n                        findViewById(R.id.button_step_5).setEnabled(true);\n                    }\n                });\n\n                Glide.with(MainActivity.this)\n                        .load(localFile)\n                        .into(mImageView);\n            }\n        }).addOnFailureListener(new OnFailureListener() {\n            @Override\n            public void onFailure(@NonNull Exception exception) {\n                // Handle any errors\n                hideProgressDialog();\n                exception.printStackTrace();\n            }\n        }).addOnProgressListener(new OnProgressListener\u003cFileDownloadTask.TaskSnapshot\u003e() {\n            @Override\n            public void onProgress(FileDownloadTask.TaskSnapshot taskSnapshot) {\n                int progress = (int) (100 * (float) taskSnapshot.getBytesTransferred() / taskSnapshot.getTotalByteCount());\n                Log.i(\"Progress\", progress + \"\");\n                updateProgress(progress);\n            }\n        });\n    }\n\n    private void deleteFile(Uri uri) {\n        showProgressDialog(\"Deleting\", \"Please wait...\");\n        StorageReference storageReferenceImage = mStorageReferenceImages.child(uri.getLastPathSegment());\n        storageReferenceImage.delete().addOnSuccessListener(new OnSuccessListener\u003cVoid\u003e() {\n            @Override\n            public void onSuccess(Void aVoid) {\n                hideProgressDialog();\n                showAlertDialog(MainActivity.this, \"Success\", \"File deleted successfully.\", new DialogInterface.OnClickListener() {\n                    @Override\n                    public void onClick(DialogInterface dialogInterface, int i) {\n                        mImageView.setImageResource(R.drawable.placeholder_image);\n                        findViewById(R.id.button_step_3).setEnabled(true);\n                        findViewById(R.id.button_step_4).setEnabled(false);\n                        findViewById(R.id.button_step_5).setEnabled(false);\n                    }\n                });\n                File mediaStorageDir = new File(Environment.getExternalStoragePublicDirectory(\n                        Environment.DIRECTORY_PICTURES), \"Firebase Storage\");\n                if (!mediaStorageDir.exists()) {\n                    if (!mediaStorageDir.mkdirs()) {\n                        Log.d(\"MainActivity\", \"failed to create Firebase Storage directory\");\n                    }\n                }\n                deleteFiles(mediaStorageDir);\n            }\n        }).addOnFailureListener(new OnFailureListener() {\n            @Override\n            public void onFailure(@NonNull Exception exception) {\n                hideProgressDialog();\n                exception.printStackTrace();\n            }\n        });\n    }\n\n    private void deleteFiles(File directory) {\n        if (directory.isDirectory())\n            for (File child : directory.listFiles())\n                child.delete();\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550450280975,
        "id": "af5941c9-5c94-4713-8dfb-8d92742486f2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550450280975,
        "parent_id": "8735312e-b0bc-4e61-8f9e-d877900021aa",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "By default, Firebase Storage rules applies Authentication restriction. If user is authenticated, only then, he can perform operations on Firebase Storage, else he cannot. I have disabled the authentication part in this demo by updating Storage rules. Previously, rules were looking like:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "By default, Firebase Storage rules applies Authentication restriction. If user is authenticated, only then, he can perform operations on Firebase Storage, else he cannot. I have disabled the authentication part in this demo by updating Storage rules. Previously, rules were looking like:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550450280975,
        "id": "328e25d7-3e94-45a2-be40-b7e0a5fb64e8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550450280975,
        "parent_id": "8735312e-b0bc-4e61-8f9e-d877900021aa",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "service firebase.storage {\n   match /b/**something**.appspot.com/o {\n     match /{allPaths=**} {\n       allow read, write: if request.auth != null;\n     }\n   }\n }"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "service firebase.storage {\n   match /b/**something**.appspot.com/o {\n     match /{allPaths=**} {\n       allow read, write: if request.auth != null;\n     }\n   }\n }",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550450280975,
        "id": "955ad00f-e58e-43f2-b6fa-6e655e422d9a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550450280975,
        "parent_id": "8735312e-b0bc-4e61-8f9e-d877900021aa",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "But I changed to skip the authentication:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "But I changed to skip the authentication:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550450280975,
        "id": "a282eec0-4efe-4fe2-a50b-70090cef077f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550450280975,
        "parent_id": "8735312e-b0bc-4e61-8f9e-d877900021aa",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "service firebase.storage {\n  match /b/**something**.appspot.com/o {\n    match /{allPaths=**} {\n      allow read, write;\n    }\n  }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "service firebase.storage {\n  match /b/**something**.appspot.com/o {\n    match /{allPaths=**} {\n      allow read, write;\n    }\n  }\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "Firebase Storage Operations",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}