{
  "ID": "1fc92901-549a-439b-a219-1fc6415e1abb",
  "Root": {
    "alive": true,
    "content": [
      "4ccba901-cd46-4211-b6af-d234534b173f",
      "eacccf04-0041-4350-8f4a-36a805f2ea40"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550448329841,
    "id": "1fc92901-549a-439b-a219-1fc6415e1abb",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550448329841,
    "parent_id": "b608fb79-1b53-486d-8fde-90d4b61fc2f1",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "020 Retrieving sensor events"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550448329835,
        "id": "4ccba901-cd46-4211-b6af-d234534b173f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550448329835,
        "parent_id": "1fc92901-549a-439b-a219-1fc6415e1abb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Retrieving sensor information from the onboard sensors:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Retrieving sensor information from the onboard sensors:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550448329841,
        "id": "eacccf04-0041-4350-8f4a-36a805f2ea40",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550448329841,
        "parent_id": "1fc92901-549a-439b-a219-1fc6415e1abb",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class MainActivity extends Activity implements SensorEventListener {\n \n    private SensorManager mSensorManager;\n    private Sensor accelerometer;\n    private Sensor gyroscope;\n\n    float[] accelerometerData = new float[3];\n    float[] gyroscopeData = new float[3];\n \n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n \n        mSensorManager = (SensorManager) getSystemService(SENSOR_SERVICE);\n \n        accelerometer = mSensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);\n        gyroscope = mSensorManager.getDefaultSensor(Sensor.TYPE_GYROSCOPE);\n \n    }\n \n    @Override\n    public void onResume() {\n        //Register listeners for your sensors of interest\n        mSensorManager.registerListener(this, accelerometer, SensorManager.SENSOR_DELAY_FASTEST);\n        mSensorManager.registerListener(this, gyroscope, SensorManager.SENSOR_DELAY_FASTEST);\n        super.onResume();\n    }\n \n    @Override\n    protected void onPause() {\n        //Unregister any previously registered listeners\n        mSensorManager.unregisterListener(this);\n        super.onPause();\n    }\n \n    @Override\n    public void onSensorChanged(SensorEvent event) {\n        //Check the type of sensor data being polled and store into corresponding float array\n        if (event.sensor.getType() == Sensor.TYPE_ACCELEROMETER) {\n            accelerometerData = event.values;\n        } else if (event.sensor.getType() == Sensor.TYPE_GYROSCOPE) {\n            gyroscopeData = event.values; \n        }\n    }\n \n    @Override\n    public void onAccuracyChanged(Sensor sensor, int accuracy) {\n        // TODO Auto-generated method stub\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class MainActivity extends Activity implements SensorEventListener {\n \n    private SensorManager mSensorManager;\n    private Sensor accelerometer;\n    private Sensor gyroscope;\n\n    float[] accelerometerData = new float[3];\n    float[] gyroscopeData = new float[3];\n \n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n \n        mSensorManager = (SensorManager) getSystemService(SENSOR_SERVICE);\n \n        accelerometer = mSensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);\n        gyroscope = mSensorManager.getDefaultSensor(Sensor.TYPE_GYROSCOPE);\n \n    }\n \n    @Override\n    public void onResume() {\n        //Register listeners for your sensors of interest\n        mSensorManager.registerListener(this, accelerometer, SensorManager.SENSOR_DELAY_FASTEST);\n        mSensorManager.registerListener(this, gyroscope, SensorManager.SENSOR_DELAY_FASTEST);\n        super.onResume();\n    }\n \n    @Override\n    protected void onPause() {\n        //Unregister any previously registered listeners\n        mSensorManager.unregisterListener(this);\n        super.onPause();\n    }\n \n    @Override\n    public void onSensorChanged(SensorEvent event) {\n        //Check the type of sensor data being polled and store into corresponding float array\n        if (event.sensor.getType() == Sensor.TYPE_ACCELEROMETER) {\n            accelerometerData = event.values;\n        } else if (event.sensor.getType() == Sensor.TYPE_GYROSCOPE) {\n            gyroscopeData = event.values; \n        }\n    }\n \n    @Override\n    public void onAccuracyChanged(Sensor sensor, int accuracy) {\n        // TODO Auto-generated method stub\n    }\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "020 Retrieving sensor events"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}