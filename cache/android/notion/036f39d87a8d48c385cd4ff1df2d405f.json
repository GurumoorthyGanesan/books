{
  "ID": "036f39d8-7a8d-48c3-85cd-4ff1df2d405f",
  "Root": {
    "alive": true,
    "content": [
      "3afacf83-9d13-49c5-b1de-616ace0d529f",
      "7e1b2207-a6cb-4076-b3fc-b5dddd32ebd6",
      "efaaa17f-f20e-4577-bce6-fb81cd824825",
      "4dbe73e6-6307-4441-9d41-029fd4ff35ba",
      "917d22ef-ab8e-45bb-90a5-ce60140d8154",
      "a501eeb5-e1ad-424d-81b9-027ae9633ee2",
      "17b9f9ec-7c2f-46d8-a55c-2a5146ec7562",
      "72eb8b9e-8266-44a8-8429-858e9869b7d8",
      "e4ed96ec-4b08-4171-94c6-0da95950e920",
      "ffd8d79f-a19c-4a60-b92e-95c09ca9ea2a",
      "d35213b7-b96d-442e-817c-c15b5748d15d",
      "55b0d2a8-007c-4cc8-bccf-32ecb1f94b01",
      "065ae288-9b55-4ba1-a97f-870235c386d6",
      "94a9525a-c10a-472b-8761-e489edcbf07c",
      "85dff843-a654-4937-8f24-e47a6e1173fa",
      "e615efca-3da4-4617-a9c1-9f17a3d73a34",
      "fe03bf71-9cb5-44d9-96e2-29c12e0c4ec5",
      "bb4b2b78-cbc2-40f8-b431-66a860ed11dd",
      "0fff87a3-a049-43d9-ab71-53eed4ba32c0",
      "5edb4108-cca9-4ed6-822d-45ef32ef01b0",
      "bc5a9b48-f1cd-41c3-9beb-e97d55c731b2"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550443961152,
    "id": "036f39d8-7a8d-48c3-85cd-4ff1df2d405f",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550443961152,
    "parent_id": "58b149d4-6a66-400d-bae4-6d84bc9e8211",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "030 Download Image using AsyncTask in Android"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550443961146,
        "id": "3afacf83-9d13-49c5-b1de-616ace0d529f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550443961146,
        "parent_id": "036f39d8-7a8d-48c3-85cd-4ff1df2d405f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This tutorial explains how to download Image using AsyncTask in Android. The example below download image while showing progress bar while during download."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This tutorial explains how to download Image using AsyncTask in Android. The example below download image while showing progress bar while during download."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550443961148,
        "id": "7e1b2207-a6cb-4076-b3fc-b5dddd32ebd6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550443961148,
        "parent_id": "036f39d8-7a8d-48c3-85cd-4ff1df2d405f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Understanding Android AsyncTask"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Understanding Android AsyncTask"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550443961149,
        "id": "efaaa17f-f20e-4577-bce6-fb81cd824825",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550443961149,
        "parent_id": "036f39d8-7a8d-48c3-85cd-4ff1df2d405f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Async task enables you to implement MultiThreading without get Hands dirty into threads. AsyncTask enables proper and easy use of the UI thread. It allows performing background operations and passing the results on the UI thread. If you are doing something isolated related to UI, for example downloading data to present in a list, go ahead and use AsyncTask."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Async task enables you to implement MultiThreading without get Hands dirty into threads. AsyncTask enables proper and easy use of the UI thread. It allows performing background operations and passing the results on the UI thread. If you are doing something isolated related to UI, for example downloading data to present in a list, go ahead and use AsyncTask."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550443961149,
        "id": "4dbe73e6-6307-4441-9d41-029fd4ff35ba",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550443961149,
        "parent_id": "036f39d8-7a8d-48c3-85cd-4ff1df2d405f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "\u003cli\u003eAsyncTasks should ideally be used for short operations (a few seconds at the most.)\u003c/li\u003e\n\u003cli\u003eAn asynchronous task is defined by 3 generic types, called Params, Progress and Result, and 4 steps, called \u003ccode\u003eonPreExecute()\u003c/code\u003e, \u003ccode\u003edoInBackground()\u003c/code\u003e, \u003ccode\u003eonProgressUpdate()\u003c/code\u003e and \u003ccode\u003eonPostExecute()\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eIn \u003ccode\u003eonPreExecute()\u003c/code\u003e you can define code, which need to be executed before background processing starts.\u003c/li\u003e\n\u003cli\u003edoInBackground have code which needs to be executed in background, here in \u003ccode\u003edoInBackground()\u003c/code\u003e we can send results to multiple times to event thread by publishProgress() method, to notify background processing has been completed we can return results simply.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eonProgressUpdate()\u003c/code\u003e method receives progress updates from \u003ccode\u003edoInBackground()\u003c/code\u003e method, which is published via \u003ccode\u003epublishProgress()\u003c/code\u003e method, and this method can use this progress update to update event thread\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eonPostExecute()\u003c/code\u003e method handles results returned by \u003ccode\u003edoInBackground()\u003c/code\u003e method.\u003c/li\u003e\n\u003cli\u003eThe generic types used are"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "\u003cli\u003eAsyncTasks should ideally be used for short operations (a few seconds at the most.)\u003c/li\u003e\n\u003cli\u003eAn asynchronous task is defined by 3 generic types, called Params, Progress and Result, and 4 steps, called \u003ccode\u003eonPreExecute()\u003c/code\u003e, \u003ccode\u003edoInBackground()\u003c/code\u003e, \u003ccode\u003eonProgressUpdate()\u003c/code\u003e and \u003ccode\u003eonPostExecute()\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eIn \u003ccode\u003eonPreExecute()\u003c/code\u003e you can define code, which need to be executed before background processing starts.\u003c/li\u003e\n\u003cli\u003edoInBackground have code which needs to be executed in background, here in \u003ccode\u003edoInBackground()\u003c/code\u003e we can send results to multiple times to event thread by publishProgress() method, to notify background processing has been completed we can return results simply.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eonProgressUpdate()\u003c/code\u003e method receives progress updates from \u003ccode\u003edoInBackground()\u003c/code\u003e method, which is published via \u003ccode\u003epublishProgress()\u003c/code\u003e method, and this method can use this progress update to update event thread\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eonPostExecute()\u003c/code\u003e method handles results returned by \u003ccode\u003edoInBackground()\u003c/code\u003e method.\u003c/li\u003e\n\u003cli\u003eThe generic types used are",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550443961149,
        "id": "917d22ef-ab8e-45bb-90a5-ce60140d8154",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550443961149,
        "parent_id": "036f39d8-7a8d-48c3-85cd-4ff1df2d405f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "\u003cli\u003eParams, the type of the parameters sent to the task upon execution\u003c/li\u003e\n\u003cli\u003eProgress, the type of the progress units published during the background computation.\u003c/li\u003e\n\u003cli\u003eResult, the type of the result of the background computation.\u003c/li\u003e"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "\u003cli\u003eParams, the type of the parameters sent to the task upon execution\u003c/li\u003e\n\u003cli\u003eProgress, the type of the progress units published during the background computation.\u003c/li\u003e\n\u003cli\u003eResult, the type of the result of the background computation.\u003c/li\u003e",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550443961149,
        "id": "a501eeb5-e1ad-424d-81b9-027ae9633ee2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550443961149,
        "parent_id": "036f39d8-7a8d-48c3-85cd-4ff1df2d405f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "\u003cli\u003eIf an async task not using any types, then it can be marked as Void type.\u003c/li\u003e\n\u003cli\u003eAn running async task can be cancelled by calling \u003ccode\u003ecancel(boolean)\u003c/code\u003e method.\u003c/li\u003e"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "\u003cli\u003eIf an async task not using any types, then it can be marked as Void type.\u003c/li\u003e\n\u003cli\u003eAn running async task can be cancelled by calling \u003ccode\u003ecancel(boolean)\u003c/code\u003e method.\u003c/li\u003e",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550443961149,
        "id": "17b9f9ec-7c2f-46d8-a55c-2a5146ec7562",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550443961149,
        "parent_id": "036f39d8-7a8d-48c3-85cd-4ff1df2d405f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Downloading image using Android AsyncTask"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Downloading image using Android AsyncTask"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550443961149,
        "id": "72eb8b9e-8266-44a8-8429-858e9869b7d8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550443961149,
        "parent_id": "036f39d8-7a8d-48c3-85cd-4ff1df2d405f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "your .xml layout",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "your .xml layout",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550443961150,
        "id": "e4ed96ec-4b08-4171-94c6-0da95950e920",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550443961150,
        "parent_id": "036f39d8-7a8d-48c3-85cd-4ff1df2d405f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n\n\u003cLinearLayout \n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"fill_parent\"\n    android:layout_height=\"fill_parent\"\n    android:orientation=\"vertical\" \u003e\n\n\u003cButton\n    android:id=\"@+id/downloadButton\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"Click Here to Download\" /\u003e\n\n\u003cImageView\n    android:id=\"@+id/imageView\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:contentDescription=\"Your image will appear here\" /\u003e\n\n\u003c/LinearLayout\u003e"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n\n\u003cLinearLayout \n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"fill_parent\"\n    android:layout_height=\"fill_parent\"\n    android:orientation=\"vertical\" \u003e\n\n\u003cButton\n    android:id=\"@+id/downloadButton\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"Click Here to Download\" /\u003e\n\n\u003cImageView\n    android:id=\"@+id/imageView\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:contentDescription=\"Your image will appear here\" /\u003e\n\n\u003c/LinearLayout\u003e",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550443961150,
        "id": "ffd8d79f-a19c-4a60-b92e-95c09ca9ea2a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550443961150,
        "parent_id": "036f39d8-7a8d-48c3-85cd-4ff1df2d405f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              ".java class",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": ".java class",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550443961150,
        "id": "d35213b7-b96d-442e-817c-c15b5748d15d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550443961150,
        "parent_id": "036f39d8-7a8d-48c3-85cd-4ff1df2d405f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "package com.javatechig.droid;\n\nimport java.io.InputStream;\nimport org.apache.http.HttpEntity;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.HttpStatus;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport android.app.Activity;\nimport android.app.ProgressDialog;\nimport android.graphics.Bitmap;\nimport android.graphics.BitmapFactory;\nimport android.os.AsyncTask;\nimport android.os.Bundle;\nimport android.util.Log;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.widget.Button;\nimport android.widget.ImageView;\n\npublic class ImageDownladerActivity extends Activity {\n\n    private ImageView downloadedImg;\n    private ProgressDialog simpleWaitDialog;\n    private String downloadUrl = \"http://www.9ori.com/store/media/images/8ab579a656.jpg\";\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.asynch);\n        Button imageDownloaderBtn = (Button) findViewById(R.id.downloadButton);\n\n        downloadedImg = (ImageView) findViewById(R.id.imageView);\n\n        imageDownloaderBtn.setOnClickListener(new OnClickListener() {\n\n            @Override\n            public void onClick(View v) {\n                // TODO Auto-generated method stub\n                new ImageDownloader().execute(downloadUrl);\n            }\n\n        });\n    }\n\n    private class ImageDownloader extends AsyncTask {\n\n        @Override\n        protected Bitmap doInBackground(String... param) {\n            // TODO Auto-generated method stub\n            return downloadBitmap(param[0]);\n        }\n\n        @Override\n        protected void onPreExecute() {\n            Log.i(\"Async-Example\", \"onPreExecute Called\");\n            simpleWaitDialog = ProgressDialog.show(ImageDownladerActivity.this,\n                    \"Wait\", \"Downloading Image\");\n\n        }\n\n        @Override\n        protected void onPostExecute(Bitmap result) {\n            Log.i(\"Async-Example\", \"onPostExecute Called\");\n            downloadedImg.setImageBitmap(result);\n            simpleWaitDialog.dismiss();\n\n        }\n\n        private Bitmap downloadBitmap(String url) {\n            // initilize the default HTTP client object\n            final DefaultHttpClient client = new DefaultHttpClient();\n\n            //forming a HttpGet request \n            final HttpGet getRequest = new HttpGet(url);\n            try {\n\n                HttpResponse response = client.execute(getRequest);\n\n                //check 200 OK for success\n                final int statusCode = response.getStatusLine().getStatusCode();\n\n                if (statusCode != HttpStatus.SC_OK) {\n                    Log.w(\"ImageDownloader\", \"Error \" + statusCode + \n                            \" while retrieving bitmap from \" + url);\n                    return null;\n\n                }\n\n                final HttpEntity entity = response.getEntity();\n                if (entity != null) {\n                    InputStream inputStream = null;\n                    try {\n                        // getting contents from the stream \n                        inputStream = entity.getContent();\n\n                        // decoding stream data back into image Bitmap that android understands\n                        final Bitmap bitmap = BitmapFactory.decodeStream(inputStream);\n\n                        return bitmap;\n                    } finally {\n                        if (inputStream != null) {\n                            inputStream.close();\n                        }\n                        entity.consumeContent();\n                    }\n                }\n            } catch (Exception e) {\n                // You Could provide a more explicit error message for IOException\n                getRequest.abort();\n                Log.e(\"ImageDownloader\", \"Something went wrong while\" +\n                        \" retrieving bitmap from \" + url + e.toString());\n            } \n\n            return null;\n        }\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "package com.javatechig.droid;\n\nimport java.io.InputStream;\nimport org.apache.http.HttpEntity;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.HttpStatus;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport android.app.Activity;\nimport android.app.ProgressDialog;\nimport android.graphics.Bitmap;\nimport android.graphics.BitmapFactory;\nimport android.os.AsyncTask;\nimport android.os.Bundle;\nimport android.util.Log;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.widget.Button;\nimport android.widget.ImageView;\n\npublic class ImageDownladerActivity extends Activity {\n\n    private ImageView downloadedImg;\n    private ProgressDialog simpleWaitDialog;\n    private String downloadUrl = \"http://www.9ori.com/store/media/images/8ab579a656.jpg\";\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.asynch);\n        Button imageDownloaderBtn = (Button) findViewById(R.id.downloadButton);\n\n        downloadedImg = (ImageView) findViewById(R.id.imageView);\n\n        imageDownloaderBtn.setOnClickListener(new OnClickListener() {\n\n            @Override\n            public void onClick(View v) {\n                // TODO Auto-generated method stub\n                new ImageDownloader().execute(downloadUrl);\n            }\n\n        });\n    }\n\n    private class ImageDownloader extends AsyncTask {\n\n        @Override\n        protected Bitmap doInBackground(String... param) {\n            // TODO Auto-generated method stub\n            return downloadBitmap(param[0]);\n        }\n\n        @Override\n        protected void onPreExecute() {\n            Log.i(\"Async-Example\", \"onPreExecute Called\");\n            simpleWaitDialog = ProgressDialog.show(ImageDownladerActivity.this,\n                    \"Wait\", \"Downloading Image\");\n\n        }\n\n        @Override\n        protected void onPostExecute(Bitmap result) {\n            Log.i(\"Async-Example\", \"onPostExecute Called\");\n            downloadedImg.setImageBitmap(result);\n            simpleWaitDialog.dismiss();\n\n        }\n\n        private Bitmap downloadBitmap(String url) {\n            // initilize the default HTTP client object\n            final DefaultHttpClient client = new DefaultHttpClient();\n\n            //forming a HttpGet request \n            final HttpGet getRequest = new HttpGet(url);\n            try {\n\n                HttpResponse response = client.execute(getRequest);\n\n                //check 200 OK for success\n                final int statusCode = response.getStatusLine().getStatusCode();\n\n                if (statusCode != HttpStatus.SC_OK) {\n                    Log.w(\"ImageDownloader\", \"Error \" + statusCode + \n                            \" while retrieving bitmap from \" + url);\n                    return null;\n\n                }\n\n                final HttpEntity entity = response.getEntity();\n                if (entity != null) {\n                    InputStream inputStream = null;\n                    try {\n                        // getting contents from the stream \n                        inputStream = entity.getContent();\n\n                        // decoding stream data back into image Bitmap that android understands\n                        final Bitmap bitmap = BitmapFactory.decodeStream(inputStream);\n\n                        return bitmap;\n                    } finally {\n                        if (inputStream != null) {\n                            inputStream.close();\n                        }\n                        entity.consumeContent();\n                    }\n                }\n            } catch (Exception e) {\n                // You Could provide a more explicit error message for IOException\n                getRequest.abort();\n                Log.e(\"ImageDownloader\", \"Something went wrong while\" +\n                        \" retrieving bitmap from \" + url + e.toString());\n            } \n\n            return null;\n        }\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550443961150,
        "id": "55b0d2a8-007c-4cc8-bccf-32ecb1f94b01",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550443961150,
        "parent_id": "036f39d8-7a8d-48c3-85cd-4ff1df2d405f",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550443961150,
        "id": "065ae288-9b55-4ba1-a97f-870235c386d6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550443961150,
        "parent_id": "036f39d8-7a8d-48c3-85cd-4ff1df2d405f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Since there is currently no comment field for examples (or I haven’t found it or I haven’t permission for it) here is some comment about this:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Since there is currently no comment field for examples (or I haven’t found it or I haven’t permission for it) here is some comment about this:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550443961150,
        "id": "94a9525a-c10a-472b-8761-e489edcbf07c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550443961150,
        "parent_id": "036f39d8-7a8d-48c3-85cd-4ff1df2d405f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This is a good example what can be done with AsyncTask."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This is a good example what can be done with AsyncTask."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550443961150,
        "id": "85dff843-a654-4937-8f24-e47a6e1173fa",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550443961150,
        "parent_id": "036f39d8-7a8d-48c3-85cd-4ff1df2d405f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "However the example currently has problems with"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "However the example currently has problems with"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550443961151,
        "id": "e615efca-3da4-4617-a9c1-9f17a3d73a34",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550443961151,
        "parent_id": "036f39d8-7a8d-48c3-85cd-4ff1df2d405f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "possible memory leaks"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "possible memory leaks"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550443961151,
        "id": "fe03bf71-9cb5-44d9-96e2-29c12e0c4ec5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550443961151,
        "parent_id": "036f39d8-7a8d-48c3-85cd-4ff1df2d405f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "app crash if there was a screen rotation shortly before the async task finished."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "app crash if there was a screen rotation shortly before the async task finished."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550443961151,
        "id": "bb4b2b78-cbc2-40f8-b431-66a860ed11dd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550443961151,
        "parent_id": "036f39d8-7a8d-48c3-85cd-4ff1df2d405f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For details see:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For details see:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550443961151,
        "id": "0fff87a3-a049-43d9-ab71-53eed4ba32c0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550443961151,
        "parent_id": "036f39d8-7a8d-48c3-85cd-4ff1df2d405f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "http://stackoverflow.com/documentation/android/117/asynctask/14069/pass-activity-as-weakreference-to-avoid-memory-leaks"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "http://stackoverflow.com/documentation/android/117/asynctask/14069/pass-activity-as-weakreference-to-avoid-memory-leaks"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550443961152,
        "id": "5edb4108-cca9-4ed6-822d-45ef32ef01b0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550443961152,
        "parent_id": "036f39d8-7a8d-48c3-85cd-4ff1df2d405f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "http://stackoverflow.com/documentation/android/117/asynctask/5377/possible-problems-with-inner-async-tasks"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "http://stackoverflow.com/documentation/android/117/asynctask/5377/possible-problems-with-inner-async-tasks"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550443961152,
        "id": "bc5a9b48-f1cd-41c3-9beb-e97d55c731b2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550443961152,
        "parent_id": "036f39d8-7a8d-48c3-85cd-4ff1df2d405f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "http://stackoverflow.com/documentation/android/2687/common-memory-leaks-and-how-to-avoid-them/9248/avoid-leaking-activities-with-asynctask"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "http://stackoverflow.com/documentation/android/2687/common-memory-leaks-and-how-to-avoid-them/9248/avoid-leaking-activities-with-asynctask"
          }
        ]
      }
    ],
    "title": "030 Download Image using AsyncTask in Android"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}