{
  "ID": "14e6ec2e-9119-457f-8a6e-2986c0734a69",
  "Root": {
    "alive": true,
    "content": [
      "bdfad337-8a95-485a-8e0e-e259c83e809a",
      "e15b087d-0196-4073-9129-a73929f6493c",
      "b0a5ebda-9dc1-401d-afe8-49d712688608",
      "a6217e07-1f2d-4eee-866d-a66198fdb05e",
      "4bc9355f-dacf-4b83-84a5-244c43336cc6",
      "0823d3d0-de64-43bd-89ec-33706bb40706",
      "7f7a0c15-30e9-4943-aa60-62ec1c7b038e"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550456150246,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "14e6ec2e-9119-457f-8a6e-2986c0734a69",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550456150246,
    "parent_id": "20896cc4-7e6c-4191-90ca-0fcbaf782a1a",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Observer pattern"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550456150242,
        "id": "bdfad337-8a95-485a-8e0e-e259c83e809a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550456150242,
        "parent_id": "14e6ec2e-9119-457f-8a6e-2986c0734a69",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The observer pattern is a common pattern, which is widely used in many contexts. A real example can be taken from YouTube: When you like a channel and want to get all news and watch new videos from this channel, you have to subscribe to that channel. Then, whenever this channel publishes any news, you (and all other subscribers) will receive a notification."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The observer pattern is a common pattern, which is widely used in many contexts. A real example can be taken from YouTube: When you like a channel and want to get all news and watch new videos from this channel, you have to subscribe to that channel. Then, whenever this channel publishes any news, you (and all other subscribers) will receive a notification."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550456150245,
        "id": "e15b087d-0196-4073-9129-a73929f6493c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550456150245,
        "parent_id": "14e6ec2e-9119-457f-8a6e-2986c0734a69",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "An observer will have two components. One is a broadcaster (channel) and the other is a receiver (you or any other subscriber). The broadcaster will handle all receiver instances that subscribed to it. When the broadcaster fires a new event, it will announce this to all receiver instances. When the receiver receives an event, it will have to react to that event, for example, by turning on YouTube and playing the new video."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "An observer will have two components. One is a broadcaster (channel) and the other is a receiver (you or any other subscriber). The broadcaster will handle all receiver instances that subscribed to it. When the broadcaster fires a new event, it will announce this to all receiver instances. When the receiver receives an event, it will have to react to that event, for example, by turning on YouTube and playing the new video."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550456150245,
        "id": "b0a5ebda-9dc1-401d-afe8-49d712688608",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550456150245,
        "parent_id": "14e6ec2e-9119-457f-8a6e-2986c0734a69",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Implementing the observer pattern"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Implementing the observer pattern"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550456150246,
        "id": "a6217e07-1f2d-4eee-866d-a66198fdb05e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550456150246,
        "parent_id": "14e6ec2e-9119-457f-8a6e-2986c0734a69",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The broadcaster has to provide methods that permit receivers to subscribe and unsubscribe to it. When the broadcaster fires an event, subscribers need to be notified that an event has occurred:"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "The broadcaster has to provide methods that permit receivers to subscribe and unsubscribe to it. When the broadcaster fires an event, subscribers need to be notified that an event has occurred:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550456150246,
        "id": "4bc9355f-dacf-4b83-84a5-244c43336cc6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550456150246,
        "parent_id": "14e6ec2e-9119-457f-8a6e-2986c0734a69",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class Channel{\n    private List\u003cSubscriber\u003e subscribers;\n    public void subscribe(Subscriber sub) {\n        // Add new subscriber.\n    }\n    public void unsubscribe(Subscriber sub) {\n        // Remove subscriber.\n    }\n    public void newEvent() {\n        // Notification event for all subscribers.\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class Channel{\n    private List\u003cSubscriber\u003e subscribers;\n    public void subscribe(Subscriber sub) {\n        // Add new subscriber.\n    }\n    public void unsubscribe(Subscriber sub) {\n        // Remove subscriber.\n    }\n    public void newEvent() {\n        // Notification event for all subscribers.\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550456150246,
        "id": "0823d3d0-de64-43bd-89ec-33706bb40706",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550456150246,
        "parent_id": "14e6ec2e-9119-457f-8a6e-2986c0734a69",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The receiver needs to implement a method that handles the event from the broadcaster:"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "The receiver needs to implement a method that handles the event from the broadcaster:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550456150246,
        "id": "7f7a0c15-30e9-4943-aa60-62ec1c7b038e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550456150246,
        "parent_id": "14e6ec2e-9119-457f-8a6e-2986c0734a69",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "interface Subscriber {\n    void doSubscribe(Channel channel);\n    void doUnsubscribe(Channel channel);\n    void handleEvent();  // Process the new event.\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "interface Subscriber {\n    void doSubscribe(Channel channel);\n    void doUnsubscribe(Channel channel);\n    void handleEvent();  // Process the new event.\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "Observer pattern",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}