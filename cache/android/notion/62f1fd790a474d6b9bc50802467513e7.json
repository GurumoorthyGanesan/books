{
  "ID": "62f1fd79-0a47-4d6b-9bc5-0802467513e7",
  "Root": {
    "alive": true,
    "content": [
      "4cfc963a-521e-4b57-b01d-be1d867bebd2",
      "f432d274-8bd9-4924-9ed3-df69d5a9597f",
      "8c31a9f0-f87f-4e94-9c79-c045a96b3823",
      "a5c1b3c6-18b1-44d6-ad01-16e4e1318dbb",
      "db09956a-56e0-4584-8ac2-6c776d550f33",
      "c6fd7871-f439-4b42-a242-ba9a85c36915",
      "02d9efc9-df17-4a8c-a306-49d3ebf97e20",
      "fc4a4e98-b955-4362-b085-2d8fd5e2f846"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550452533247,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "62f1fd79-0a47-4d6b-9bc5-0802467513e7",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550452533247,
    "parent_id": "acd0006b-0353-4ba6-8a0b-87336f61c97d",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Receiving and handling button events"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550452533244,
        "id": "4cfc963a-521e-4b57-b01d-be1d867bebd2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550452533244,
        "parent_id": "62f1fd79-0a47-4d6b-9bc5-0802467513e7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This example creates a "
            ],
            [
              "MediaSession",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://developer.android.com/reference/android/media/session/MediaSession.html"
                ]
              ]
            ],
            [
              " object when a "
            ],
            [
              "Service",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://developer.android.com/reference/android/app/Service.html"
                ]
              ]
            ],
            [
              " is started. The "
            ],
            [
              "MediaSession",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " object is released when the "
            ],
            [
              "Service",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " gets destroyed:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This example creates a "
          },
          {
            "Text": "MediaSession",
            "AttrFlags": 2,
            "Link": "https://developer.android.com/reference/android/media/session/MediaSession.html"
          },
          {
            "Text": " object when a "
          },
          {
            "Text": "Service",
            "AttrFlags": 2,
            "Link": "https://developer.android.com/reference/android/app/Service.html"
          },
          {
            "Text": " is started. The "
          },
          {
            "Text": "MediaSession",
            "AttrFlags": 2
          },
          {
            "Text": " object is released when the "
          },
          {
            "Text": "Service",
            "AttrFlags": 2
          },
          {
            "Text": " gets destroyed:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550452533245,
        "id": "f432d274-8bd9-4924-9ed3-df69d5a9597f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550452533245,
        "parent_id": "62f1fd79-0a47-4d6b-9bc5-0802467513e7",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public final class MyService extends Service {\n    private static MediaSession s_mediaSession;\n\n    @Override\n    public void onCreate() {\n        // Instantiate new MediaSession object.\n        configureMediaSession();\n    }\n\n    @Override\n    public void onDestroy() {\n        if (s_mediaSession != null)\n            s_mediaSession.release();\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public final class MyService extends Service {\n    private static MediaSession s_mediaSession;\n\n    @Override\n    public void onCreate() {\n        // Instantiate new MediaSession object.\n        configureMediaSession();\n    }\n\n    @Override\n    public void onDestroy() {\n        if (s_mediaSession != null)\n            s_mediaSession.release();\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550452533245,
        "id": "8c31a9f0-f87f-4e94-9c79-c045a96b3823",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550452533245,
        "parent_id": "62f1fd79-0a47-4d6b-9bc5-0802467513e7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The following method instantiates and configures the "
            ],
            [
              "MediaSession",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " button callbacks:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The following method instantiates and configures the "
          },
          {
            "Text": "MediaSession",
            "AttrFlags": 2
          },
          {
            "Text": " button callbacks:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550452533245,
        "id": "a5c1b3c6-18b1-44d6-ad01-16e4e1318dbb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550452533245,
        "parent_id": "62f1fd79-0a47-4d6b-9bc5-0802467513e7",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "private void configureMediaSession {\n    s_mediaSession = new MediaSession(this, \"MyMediaSession\");\n\n    // Overridden methods in the MediaSession.Callback class.\n    s_mediaSession.setCallback(new MediaSession.Callback() {\n        @Override\n        public boolean onMediaButtonEvent(Intent mediaButtonIntent) {\n            Log.d(TAG, \"onMediaButtonEvent called: \" + mediaButtonIntent);\n            KeyEvent ke = mediaButtonIntent.getParcelableExtra(Intent.EXTRA_KEY_EVENT);\n            if (ke != null \u0026\u0026 ke.getAction() == KeyEvent.ACTION_DOWN) {\n                int keyCode = ke.getKeyCode();\n                Log.d(TAG, \"onMediaButtonEvent Received command: \" + ke);\n            }\n            return super.onMediaButtonEvent(mediaButtonIntent);\n        }\n\n        @Override\n        public void onSkipToNext() {\n            Log.d(TAG, \"onSkipToNext called (media button pressed)\");\n            Toast.makeText(getApplicationContext(), \"onSkipToNext called\", Toast.LENGTH_SHORT).show();\n            skipToNextPlaylistItem(); // Handle this button press.\n            super.onSkipToNext();\n        }\n\n        @Override\n        public void onSkipToPrevious() {\n            Log.d(TAG, \"onSkipToPrevious called (media button pressed)\");\n            Toast.makeText(getApplicationContext(), \"onSkipToPrevious called\", Toast.LENGTH_SHORT).show();\n            skipToPreviousPlaylistItem(); // Handle this button press.\n            super.onSkipToPrevious();\n        }\n\n        @Override\n        public void onPause() {\n            Log.d(TAG, \"onPause called (media button pressed)\");\n            Toast.makeText(getApplicationContext(), \"onPause called\", Toast.LENGTH_SHORT).show();\n            mpPause(); // Pause the player.\n            super.onPause();\n        }\n\n        @Override\n        public void onPlay() {\n            Log.d(TAG, \"onPlay called (media button pressed)\");\n            mpStart(); // Start player/playback.\n            super.onPlay();\n        }\n\n        @Override\n        public void onStop() {\n            Log.d(TAG, \"onStop called (media button pressed)\");\n            mpReset(); // Stop and/or reset the player.\n            super.onStop();\n        }\n    });\n\n    s_mediaSession.setFlags(MediaSession.FLAG_HANDLES_MEDIA_BUTTONS | MediaSession.FLAG_HANDLES_TRANSPORT_CONTROLS);\n    s_mediaSession.setActive(true);\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "private void configureMediaSession {\n    s_mediaSession = new MediaSession(this, \"MyMediaSession\");\n\n    // Overridden methods in the MediaSession.Callback class.\n    s_mediaSession.setCallback(new MediaSession.Callback() {\n        @Override\n        public boolean onMediaButtonEvent(Intent mediaButtonIntent) {\n            Log.d(TAG, \"onMediaButtonEvent called: \" + mediaButtonIntent);\n            KeyEvent ke = mediaButtonIntent.getParcelableExtra(Intent.EXTRA_KEY_EVENT);\n            if (ke != null \u0026\u0026 ke.getAction() == KeyEvent.ACTION_DOWN) {\n                int keyCode = ke.getKeyCode();\n                Log.d(TAG, \"onMediaButtonEvent Received command: \" + ke);\n            }\n            return super.onMediaButtonEvent(mediaButtonIntent);\n        }\n\n        @Override\n        public void onSkipToNext() {\n            Log.d(TAG, \"onSkipToNext called (media button pressed)\");\n            Toast.makeText(getApplicationContext(), \"onSkipToNext called\", Toast.LENGTH_SHORT).show();\n            skipToNextPlaylistItem(); // Handle this button press.\n            super.onSkipToNext();\n        }\n\n        @Override\n        public void onSkipToPrevious() {\n            Log.d(TAG, \"onSkipToPrevious called (media button pressed)\");\n            Toast.makeText(getApplicationContext(), \"onSkipToPrevious called\", Toast.LENGTH_SHORT).show();\n            skipToPreviousPlaylistItem(); // Handle this button press.\n            super.onSkipToPrevious();\n        }\n\n        @Override\n        public void onPause() {\n            Log.d(TAG, \"onPause called (media button pressed)\");\n            Toast.makeText(getApplicationContext(), \"onPause called\", Toast.LENGTH_SHORT).show();\n            mpPause(); // Pause the player.\n            super.onPause();\n        }\n\n        @Override\n        public void onPlay() {\n            Log.d(TAG, \"onPlay called (media button pressed)\");\n            mpStart(); // Start player/playback.\n            super.onPlay();\n        }\n\n        @Override\n        public void onStop() {\n            Log.d(TAG, \"onStop called (media button pressed)\");\n            mpReset(); // Stop and/or reset the player.\n            super.onStop();\n        }\n    });\n\n    s_mediaSession.setFlags(MediaSession.FLAG_HANDLES_MEDIA_BUTTONS | MediaSession.FLAG_HANDLES_TRANSPORT_CONTROLS);\n    s_mediaSession.setActive(true);\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550452533246,
        "id": "db09956a-56e0-4584-8ac2-6c776d550f33",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550452533246,
        "parent_id": "62f1fd79-0a47-4d6b-9bc5-0802467513e7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The following method sends meta data (stored in a "
            ],
            [
              "HashMap",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://developer.android.com/reference/java/util/HashMap.html"
                ]
              ]
            ],
            [
              ") to the device using A2DP:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The following method sends meta data (stored in a "
          },
          {
            "Text": "HashMap",
            "AttrFlags": 2,
            "Link": "https://developer.android.com/reference/java/util/HashMap.html"
          },
          {
            "Text": ") to the device using A2DP:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550452533246,
        "id": "c6fd7871-f439-4b42-a242-ba9a85c36915",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550452533246,
        "parent_id": "62f1fd79-0a47-4d6b-9bc5-0802467513e7",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "void sendMetaData(@NonNull final HashMap\u003cString, String\u003e hm) {\n    // Return if Bluetooth A2DP is not in use.\n    if (!((AudioManager) getSystemService(Context.AUDIO_SERVICE)).isBluetoothA2dpOn()) return;\n\n    MediaMetadata metadata = new MediaMetadata.Builder()\n            .putString(MediaMetadata.METADATA_KEY_TITLE, hm.get(\"Title\"))\n            .putString(MediaMetadata.METADATA_KEY_ALBUM, hm.get(\"Album\"))\n            .putString(MediaMetadata.METADATA_KEY_ARTIST, hm.get(\"Artist\"))\n            .putString(MediaMetadata.METADATA_KEY_AUTHOR, hm.get(\"Author\"))\n            .putString(MediaMetadata.METADATA_KEY_COMPOSER, hm.get(\"Composer\"))\n            .putString(MediaMetadata.METADATA_KEY_WRITER, hm.get(\"Writer\"))\n            .putString(MediaMetadata.METADATA_KEY_DATE, hm.get(\"Date\"))\n            .putString(MediaMetadata.METADATA_KEY_GENRE, hm.get(\"Genre\"))\n            .putLong(MediaMetadata.METADATA_KEY_YEAR, tryParse(hm.get(\"Year\")))\n            .putLong(MediaMetadata.METADATA_KEY_DURATION, tryParse(hm.get(\"Raw Duration\")))\n            .putLong(MediaMetadata.METADATA_KEY_TRACK_NUMBER, tryParse(hm.get(\"Track Number\")))\n            .build();\n\n    s_mediaSession.setMetadata(metadata);\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "void sendMetaData(@NonNull final HashMap\u003cString, String\u003e hm) {\n    // Return if Bluetooth A2DP is not in use.\n    if (!((AudioManager) getSystemService(Context.AUDIO_SERVICE)).isBluetoothA2dpOn()) return;\n\n    MediaMetadata metadata = new MediaMetadata.Builder()\n            .putString(MediaMetadata.METADATA_KEY_TITLE, hm.get(\"Title\"))\n            .putString(MediaMetadata.METADATA_KEY_ALBUM, hm.get(\"Album\"))\n            .putString(MediaMetadata.METADATA_KEY_ARTIST, hm.get(\"Artist\"))\n            .putString(MediaMetadata.METADATA_KEY_AUTHOR, hm.get(\"Author\"))\n            .putString(MediaMetadata.METADATA_KEY_COMPOSER, hm.get(\"Composer\"))\n            .putString(MediaMetadata.METADATA_KEY_WRITER, hm.get(\"Writer\"))\n            .putString(MediaMetadata.METADATA_KEY_DATE, hm.get(\"Date\"))\n            .putString(MediaMetadata.METADATA_KEY_GENRE, hm.get(\"Genre\"))\n            .putLong(MediaMetadata.METADATA_KEY_YEAR, tryParse(hm.get(\"Year\")))\n            .putLong(MediaMetadata.METADATA_KEY_DURATION, tryParse(hm.get(\"Raw Duration\")))\n            .putLong(MediaMetadata.METADATA_KEY_TRACK_NUMBER, tryParse(hm.get(\"Track Number\")))\n            .build();\n\n    s_mediaSession.setMetadata(metadata);\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550452533247,
        "id": "02d9efc9-df17-4a8c-a306-49d3ebf97e20",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550452533247,
        "parent_id": "62f1fd79-0a47-4d6b-9bc5-0802467513e7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The following method sets the "
            ],
            [
              "PlaybackState",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://developer.android.com/reference/android/media/session/PlaybackState.html"
                ]
              ]
            ],
            [
              ". It also sets which button actions the "
            ],
            [
              "MediaSession",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will respond to:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The following method sets the "
          },
          {
            "Text": "PlaybackState",
            "AttrFlags": 2,
            "Link": "https://developer.android.com/reference/android/media/session/PlaybackState.html"
          },
          {
            "Text": ". It also sets which button actions the "
          },
          {
            "Text": "MediaSession",
            "AttrFlags": 2
          },
          {
            "Text": " will respond to:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550452533247,
        "id": "fc4a4e98-b955-4362-b085-2d8fd5e2f846",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550452533247,
        "parent_id": "62f1fd79-0a47-4d6b-9bc5-0802467513e7",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "private void setPlaybackState(@NonNull final int stateValue) {\n    PlaybackState state = new PlaybackState.Builder()\n            .setActions(PlaybackState.ACTION_PLAY | PlaybackState.ACTION_SKIP_TO_NEXT\n                    | PlaybackState.ACTION_PAUSE | PlaybackState.ACTION_SKIP_TO_PREVIOUS\n                    | PlaybackState.ACTION_STOP | PlaybackState.ACTION_PLAY_PAUSE)\n            .setState(stateValue, PlaybackState.PLAYBACK_POSITION_UNKNOWN, 0)\n            .build();\n\n    s_mediaSession.setPlaybackState(state);\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "private void setPlaybackState(@NonNull final int stateValue) {\n    PlaybackState state = new PlaybackState.Builder()\n            .setActions(PlaybackState.ACTION_PLAY | PlaybackState.ACTION_SKIP_TO_NEXT\n                    | PlaybackState.ACTION_PAUSE | PlaybackState.ACTION_SKIP_TO_PREVIOUS\n                    | PlaybackState.ACTION_STOP | PlaybackState.ACTION_PLAY_PAUSE)\n            .setState(stateValue, PlaybackState.PLAYBACK_POSITION_UNKNOWN, 0)\n            .build();\n\n    s_mediaSession.setPlaybackState(state);\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "Receiving and handling button events",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}