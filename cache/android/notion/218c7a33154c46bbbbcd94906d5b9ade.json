{
  "ID": "218c7a33-154c-46bb-bbcd-94906d5b9ade",
  "Root": {
    "alive": true,
    "content": [
      "9c2435c7-6010-447d-a255-daa49c883dd9",
      "579f7e86-3ecc-426e-8567-d85e7eeccc1c",
      "c1b35e55-5a1a-49c7-a2ad-fad0e6865e4c",
      "ce8094c4-cab8-448b-b23b-f63415e87879",
      "0a75315e-ecd4-4f4f-9561-f46911061775",
      "b3a41255-e725-46bd-bbf4-cd9244394593",
      "82a94463-b108-48c3-9df1-df7c1550c71b",
      "5589c84e-c959-4057-9c4d-abb691d3fa55",
      "03388bad-55ad-4d97-9208-76fff0eb28af",
      "5cd76fad-889b-43c8-b800-d79868d43c4a",
      "98d858e7-2328-4b14-a20e-43e12f8abb7d",
      "11ba441a-93ab-4c54-83f3-b53c5fe395d2",
      "43cdf212-b6bc-4524-b1ee-7e8c9a511e75",
      "2e039257-d0a7-480d-8c0f-6c93465be67b",
      "519d9de3-057b-4c8b-953f-92e5c219ccfb"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550452574110,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "218c7a33-154c-46bb-bbcd-94906d5b9ade",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550452574110,
    "parent_id": "3360b9ba-8b02-41c9-bd93-6f6a02109330",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "XMPP register login and chat basic example"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550452574107,
        "id": "9c2435c7-6010-447d-a255-daa49c883dd9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550452574107,
        "parent_id": "218c7a33-154c-46bb-bbcd-94906d5b9ade",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Install openfire or any chat server in your system or on server. For more details "
            ],
            [
              "click here.",
              [
                [
                  "a",
                  "https://xmpp.org/software/servers.html"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Install openfire or any chat server in your system or on server. For more details "
          },
          {
            "Text": "click here.",
            "Link": "https://xmpp.org/software/servers.html"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550452574108,
        "id": "579f7e86-3ecc-426e-8567-d85e7eeccc1c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550452574108,
        "parent_id": "218c7a33-154c-46bb-bbcd-94906d5b9ade",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Create android project and add these libraries in gradle:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Create android project and add these libraries in gradle:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550452574108,
        "id": "c1b35e55-5a1a-49c7-a2ad-fad0e6865e4c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550452574108,
        "parent_id": "218c7a33-154c-46bb-bbcd-94906d5b9ade",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "compile 'org.igniterealtime.smack:smack-android:4.2.0'\ncompile 'org.igniterealtime.smack:smack-tcp:4.2.0'\ncompile 'org.igniterealtime.smack:smack-im:4.2.0'\ncompile 'org.igniterealtime.smack:smack-android-extensions:4.2.0'"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "compile 'org.igniterealtime.smack:smack-android:4.2.0'\ncompile 'org.igniterealtime.smack:smack-tcp:4.2.0'\ncompile 'org.igniterealtime.smack:smack-im:4.2.0'\ncompile 'org.igniterealtime.smack:smack-android-extensions:4.2.0'",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550452574108,
        "id": "ce8094c4-cab8-448b-b23b-f63415e87879",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550452574108,
        "parent_id": "218c7a33-154c-46bb-bbcd-94906d5b9ade",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Next create one xmpp class from xmpp connection purpose:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Next create one xmpp class from xmpp connection purpose:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550452574108,
        "id": "0a75315e-ecd4-4f4f-9561-f46911061775",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550452574108,
        "parent_id": "218c7a33-154c-46bb-bbcd-94906d5b9ade",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class XMPP {\n\npublic static final int PORT = 5222;\nprivate static XMPP instance;\nprivate XMPPTCPConnection connection;\nprivate static String TAG = \"XMPP-EXAMPLE\";\npublic static final String ACTION_LOGGED_IN = \"liveapp.loggedin\";\nprivate String HOST = \"192.168.0.10\";\n\nprivate XMPPTCPConnectionConfiguration buildConfiguration() throws XmppStringprepException {\n    XMPPTCPConnectionConfiguration.Builder builder =\n            XMPPTCPConnectionConfiguration.builder();"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class XMPP {\n\npublic static final int PORT = 5222;\nprivate static XMPP instance;\nprivate XMPPTCPConnection connection;\nprivate static String TAG = \"XMPP-EXAMPLE\";\npublic static final String ACTION_LOGGED_IN = \"liveapp.loggedin\";\nprivate String HOST = \"192.168.0.10\";\n\nprivate XMPPTCPConnectionConfiguration buildConfiguration() throws XmppStringprepException {\n    XMPPTCPConnectionConfiguration.Builder builder =\n            XMPPTCPConnectionConfiguration.builder();",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550452574109,
        "id": "b3a41255-e725-46bd-bbf4-cd9244394593",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550452574109,
        "parent_id": "218c7a33-154c-46bb-bbcd-94906d5b9ade",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "builder.setHost(HOST);\nbuilder.setPort(PORT);\nbuilder.setCompressionEnabled(false);\nbuilder.setDebuggerEnabled(true);\nbuilder.setSecurityMode(ConnectionConfiguration.SecurityMode.disabled);\nbuilder.setSendPresence(true);\n\nif (Build.VERSION.SDK_INT \u003e= 14) {\n    builder.setKeystoreType(\"AndroidCAStore\");\n    // config.setTruststorePassword(null);\n    builder.setKeystorePath(null);\n} else {\n    builder.setKeystoreType(\"BKS\");\n    String str = System.getProperty(\"javax.net.ssl.trustStore\");\n    if (str == null) {\n        str = System.getProperty(\"java.home\") + File.separator + \"etc\" + File.separator + \"security\"\n                + File.separator + \"cacerts.bks\";\n    }\n    builder.setKeystorePath(str);\n}\nDomainBareJid serviceName = JidCreate.domainBareFrom(HOST);\nbuilder.setServiceName(serviceName);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "builder.setHost(HOST);\nbuilder.setPort(PORT);\nbuilder.setCompressionEnabled(false);\nbuilder.setDebuggerEnabled(true);\nbuilder.setSecurityMode(ConnectionConfiguration.SecurityMode.disabled);\nbuilder.setSendPresence(true);\n\nif (Build.VERSION.SDK_INT \u003e= 14) {\n    builder.setKeystoreType(\"AndroidCAStore\");\n    // config.setTruststorePassword(null);\n    builder.setKeystorePath(null);\n} else {\n    builder.setKeystoreType(\"BKS\");\n    String str = System.getProperty(\"javax.net.ssl.trustStore\");\n    if (str == null) {\n        str = System.getProperty(\"java.home\") + File.separator + \"etc\" + File.separator + \"security\"\n                + File.separator + \"cacerts.bks\";\n    }\n    builder.setKeystorePath(str);\n}\nDomainBareJid serviceName = JidCreate.domainBareFrom(HOST);\nbuilder.setServiceName(serviceName);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550452574109,
        "id": "82a94463-b108-48c3-9df1-df7c1550c71b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550452574109,
        "parent_id": "218c7a33-154c-46bb-bbcd-94906d5b9ade",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "return builder.build();\n}\n\nprivate XMPPTCPConnection getConnection() throws XMPPException, SmackException, IOException, InterruptedException {\nLog.logDebug(TAG, \"Getting XMPP Connect\");\nif (isConnected()) {\n    Log.logDebug(TAG, \"Returning already existing connection\");\n    return this.connection;\n}\n\nlong l = System.currentTimeMillis();\ntry {\n    if(this.connection != null){\n        Log.logDebug(TAG, \"Connection found, trying to connect\");\n        this.connection.connect();\n    }else{\n        Log.logDebug(TAG, \"No Connection found, trying to create a new connection\");\n        XMPPTCPConnectionConfiguration config = buildConfiguration();\n        SmackConfiguration.DEBUG = true;\n        this.connection = new XMPPTCPConnection(config);\n        this.connection.connect();\n    }\n} catch (Exception e) {\n    Log.logError(TAG,\"some issue with getting connection :\" + e.getMessage());\n   \n}\n\nLog.logDebug(TAG, \"Connection Properties: \" + connection.getHost() + \" \" + connection.getServiceName());\nLog.logDebug(TAG, \"Time taken in first time connect: \" + (System.currentTimeMillis() - l));\nreturn this.connection;\n}\n\npublic static XMPP getInstance() {\nif (instance == null) {\n    synchronized (XMPP.class) {\n        if (instance == null) {\n            instance = new XMPP();\n        }\n    }\n}\nreturn instance;\n}\n\npublic void close() {\nLog.logInfo(TAG, \"Inside XMPP close method\");\nif (this.connection != null) {\n    this.connection.disconnect();\n}\n}\n\nprivate XMPPTCPConnection connectAndLogin(Context context) {\nLog.logDebug(TAG, \"Inside connect and Login\");\nif (!isConnected()) {\n    Log.logDebug(TAG, \"Connection not connected, trying to login and connect\");\n    try { \n       // Save username and password then use here\n        String username = AppSettings.getUser(context);\n        String password = AppSettings.getPassword(context);\n        this.connection = getConnection();\n        Log.logDebug(TAG, \"XMPP username :\" + username);\n        Log.logDebug(TAG, \"XMPP password :\" + password);\n        this.connection.login(username, password);\n        Log.logDebug(TAG, \"Connect and Login method, Login successful\");\n        context.sendBroadcast(new Intent(ACTION_LOGGED_IN));\n    } catch (XMPPException localXMPPException) {\n        Log.logError(TAG, \"Error in Connect and Login Method\");\n        localXMPPException.printStackTrace();\n    } catch (SmackException e) {\n        Log.logError(TAG, \"Error in Connect and Login Method\");\n        e.printStackTrace();\n    } catch (IOException e) {\n        Log.logError(TAG, \"Error in Connect and Login Method\");\n        e.printStackTrace();\n    } catch (InterruptedException e) {\n        Log.logError(TAG, \"Error in Connect and Login Method\");\n        e.printStackTrace();\n    } catch (IllegalArgumentException e) {\n        Log.logError(TAG, \"Error in Connect and Login Method\");\n        e.printStackTrace();\n    } catch (Exception e) {\n        Log.logError(TAG, \"Error in Connect and Login Method\");\n        e.printStackTrace();\n    }\n}\nLog.logInfo(TAG, \"Inside getConnection - Returning connection\");\nreturn this.connection;\n}\n\npublic boolean isConnected() {\nreturn (this.connection != null) \u0026\u0026 (this.connection.isConnected());\n}\n\npublic EntityFullJid getUser() {\nif (isConnected()) {\n    return connection.getUser();\n} else {\n    return null;\n}\n}\n\npublic void login(String user, String pass, String username)\n    throws XMPPException, SmackException, IOException, InterruptedException, PurplKiteXMPPConnectException {\nLog.logInfo(TAG, \"inside XMPP getlogin Method\");\nlong l = System.currentTimeMillis();\nXMPPTCPConnection connect = getConnection();\nif (connect.isAuthenticated()) {\n    Log.logInfo(TAG, \"User already logged in\");\n    return;\n}\n\nLog.logInfo(TAG, \"Time taken to connect: \" + (System.currentTimeMillis() - l));\n\nl = System.currentTimeMillis();\ntry{\n    connect.login(user, pass);\n}catch (Exception e){\n    Log.logError(TAG, \"Issue in login, check the stacktrace\");\n    e.printStackTrace();\n}\n\nLog.logInfo(TAG, \"Time taken to login: \" + (System.currentTimeMillis() - l));\n\nLog.logInfo(TAG, \"login step passed\");\n\nPingManager pingManager = PingManager.getInstanceFor(connect);\npingManager.setPingInterval(5000);\n\n}\n\npublic void register(String user, String pass) throws XMPPException, SmackException.NoResponseException, SmackException.NotConnectedException {\nLog.logInfo(TAG, \"inside XMPP register method, \" + user + \" : \" + pass);\nlong l = System.currentTimeMillis();\ntry {\n    AccountManager accountManager = AccountManager.getInstance(getConnection());\n    accountManager.sensitiveOperationOverInsecureConnection(true);\n    accountManager.createAccount(Localpart.from(user), pass);\n} catch (SmackException e) {\n    e.printStackTrace();\n} catch (IOException e) {\n    e.printStackTrace();\n} catch (InterruptedException e) {\n    e.printStackTrace();\n} catch (PurplKiteXMPPConnectException e) {\n    e.printStackTrace();\n}\nLog.logInfo(TAG, \"Time taken to register: \" + (System.currentTimeMillis() - l));\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "return builder.build();\n}\n\nprivate XMPPTCPConnection getConnection() throws XMPPException, SmackException, IOException, InterruptedException {\nLog.logDebug(TAG, \"Getting XMPP Connect\");\nif (isConnected()) {\n    Log.logDebug(TAG, \"Returning already existing connection\");\n    return this.connection;\n}\n\nlong l = System.currentTimeMillis();\ntry {\n    if(this.connection != null){\n        Log.logDebug(TAG, \"Connection found, trying to connect\");\n        this.connection.connect();\n    }else{\n        Log.logDebug(TAG, \"No Connection found, trying to create a new connection\");\n        XMPPTCPConnectionConfiguration config = buildConfiguration();\n        SmackConfiguration.DEBUG = true;\n        this.connection = new XMPPTCPConnection(config);\n        this.connection.connect();\n    }\n} catch (Exception e) {\n    Log.logError(TAG,\"some issue with getting connection :\" + e.getMessage());\n   \n}\n\nLog.logDebug(TAG, \"Connection Properties: \" + connection.getHost() + \" \" + connection.getServiceName());\nLog.logDebug(TAG, \"Time taken in first time connect: \" + (System.currentTimeMillis() - l));\nreturn this.connection;\n}\n\npublic static XMPP getInstance() {\nif (instance == null) {\n    synchronized (XMPP.class) {\n        if (instance == null) {\n            instance = new XMPP();\n        }\n    }\n}\nreturn instance;\n}\n\npublic void close() {\nLog.logInfo(TAG, \"Inside XMPP close method\");\nif (this.connection != null) {\n    this.connection.disconnect();\n}\n}\n\nprivate XMPPTCPConnection connectAndLogin(Context context) {\nLog.logDebug(TAG, \"Inside connect and Login\");\nif (!isConnected()) {\n    Log.logDebug(TAG, \"Connection not connected, trying to login and connect\");\n    try { \n       // Save username and password then use here\n        String username = AppSettings.getUser(context);\n        String password = AppSettings.getPassword(context);\n        this.connection = getConnection();\n        Log.logDebug(TAG, \"XMPP username :\" + username);\n        Log.logDebug(TAG, \"XMPP password :\" + password);\n        this.connection.login(username, password);\n        Log.logDebug(TAG, \"Connect and Login method, Login successful\");\n        context.sendBroadcast(new Intent(ACTION_LOGGED_IN));\n    } catch (XMPPException localXMPPException) {\n        Log.logError(TAG, \"Error in Connect and Login Method\");\n        localXMPPException.printStackTrace();\n    } catch (SmackException e) {\n        Log.logError(TAG, \"Error in Connect and Login Method\");\n        e.printStackTrace();\n    } catch (IOException e) {\n        Log.logError(TAG, \"Error in Connect and Login Method\");\n        e.printStackTrace();\n    } catch (InterruptedException e) {\n        Log.logError(TAG, \"Error in Connect and Login Method\");\n        e.printStackTrace();\n    } catch (IllegalArgumentException e) {\n        Log.logError(TAG, \"Error in Connect and Login Method\");\n        e.printStackTrace();\n    } catch (Exception e) {\n        Log.logError(TAG, \"Error in Connect and Login Method\");\n        e.printStackTrace();\n    }\n}\nLog.logInfo(TAG, \"Inside getConnection - Returning connection\");\nreturn this.connection;\n}\n\npublic boolean isConnected() {\nreturn (this.connection != null) \u0026\u0026 (this.connection.isConnected());\n}\n\npublic EntityFullJid getUser() {\nif (isConnected()) {\n    return connection.getUser();\n} else {\n    return null;\n}\n}\n\npublic void login(String user, String pass, String username)\n    throws XMPPException, SmackException, IOException, InterruptedException, PurplKiteXMPPConnectException {\nLog.logInfo(TAG, \"inside XMPP getlogin Method\");\nlong l = System.currentTimeMillis();\nXMPPTCPConnection connect = getConnection();\nif (connect.isAuthenticated()) {\n    Log.logInfo(TAG, \"User already logged in\");\n    return;\n}\n\nLog.logInfo(TAG, \"Time taken to connect: \" + (System.currentTimeMillis() - l));\n\nl = System.currentTimeMillis();\ntry{\n    connect.login(user, pass);\n}catch (Exception e){\n    Log.logError(TAG, \"Issue in login, check the stacktrace\");\n    e.printStackTrace();\n}\n\nLog.logInfo(TAG, \"Time taken to login: \" + (System.currentTimeMillis() - l));\n\nLog.logInfo(TAG, \"login step passed\");\n\nPingManager pingManager = PingManager.getInstanceFor(connect);\npingManager.setPingInterval(5000);\n\n}\n\npublic void register(String user, String pass) throws XMPPException, SmackException.NoResponseException, SmackException.NotConnectedException {\nLog.logInfo(TAG, \"inside XMPP register method, \" + user + \" : \" + pass);\nlong l = System.currentTimeMillis();\ntry {\n    AccountManager accountManager = AccountManager.getInstance(getConnection());\n    accountManager.sensitiveOperationOverInsecureConnection(true);\n    accountManager.createAccount(Localpart.from(user), pass);\n} catch (SmackException e) {\n    e.printStackTrace();\n} catch (IOException e) {\n    e.printStackTrace();\n} catch (InterruptedException e) {\n    e.printStackTrace();\n} catch (PurplKiteXMPPConnectException e) {\n    e.printStackTrace();\n}\nLog.logInfo(TAG, \"Time taken to register: \" + (System.currentTimeMillis() - l));\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550452574109,
        "id": "5589c84e-c959-4057-9c4d-abb691d3fa55",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550452574109,
        "parent_id": "218c7a33-154c-46bb-bbcd-94906d5b9ade",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public void addStanzaListener(Context context, StanzaListener stanzaListener){\n    XMPPTCPConnection connection =  connectAndLogin(context);\n    connection.addAsyncStanzaListener(stanzaListener, null);\n}\n\npublic void removeStanzaListener(Context context, StanzaListener stanzaListener){\n    XMPPTCPConnection connection =  connectAndLogin(context);\n    connection.removeAsyncStanzaListener(stanzaListener);\n}\n\npublic void addChatListener(Context context, ChatManagerListener chatManagerListener){\n    ChatManager.getInstanceFor(connectAndLogin(context))\n            .addChatListener(chatManagerListener);\n}\n\npublic void removeChatListener(Context context, ChatManagerListener chatManagerListener){\n    ChatManager.getInstanceFor(connectAndLogin(context)).removeChatListener(chatManagerListener);\n}\n\npublic void getSrvDeliveryManager(Context context){\n    ServiceDiscoveryManager sdm = ServiceDiscoveryManager\n            .getInstanceFor(XMPP.getInstance().connectAndLogin(\n                    context));\n    //sdm.addFeature(\"http://jabber.org/protocol/disco#info\");\n    //sdm.addFeature(\"jabber:iq:privacy\");\n    sdm.addFeature(\"jabber.org/protocol/si\");\n    sdm.addFeature(\"http://jabber.org/protocol/si\");\n    sdm.addFeature(\"http://jabber.org/protocol/disco#info\");\n    sdm.addFeature(\"jabber:iq:privacy\");\n\n}\n\npublic String getUserLocalPart(Context context){\n   return  connectAndLogin(context).getUser().getLocalpart().toString();\n}\n\npublic EntityFullJid getUser(Context context){\n    return  connectAndLogin(context).getUser();\n}\n\npublic Chat getThreadChat(Context context, String party1, String party2){\n    Chat chat = ChatManager.getInstanceFor(\n            XMPP.getInstance().connectAndLogin(context))\n            .getThreadChat(party1 + \"-\" + party2);\n    return chat;\n}\n\npublic Chat createChat(Context context, EntityJid jid, String party1, String party2, ChatMessageListener messageListener){\n    Chat chat = ChatManager.getInstanceFor(\n            XMPP.getInstance().connectAndLogin(context))\n            .createChat(jid, party1 + \"-\" + party2,\n                    messageListener);\n    return chat;\n}\n\npublic void sendPacket(Context context, Stanza packet){\n    try {\n        connectAndLogin(context).sendStanza(packet);\n    } catch (SmackException.NotConnectedException e) {\n        e.printStackTrace();\n    } catch (InterruptedException e) {\n        e.printStackTrace();\n    }\n}\n\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public void addStanzaListener(Context context, StanzaListener stanzaListener){\n    XMPPTCPConnection connection =  connectAndLogin(context);\n    connection.addAsyncStanzaListener(stanzaListener, null);\n}\n\npublic void removeStanzaListener(Context context, StanzaListener stanzaListener){\n    XMPPTCPConnection connection =  connectAndLogin(context);\n    connection.removeAsyncStanzaListener(stanzaListener);\n}\n\npublic void addChatListener(Context context, ChatManagerListener chatManagerListener){\n    ChatManager.getInstanceFor(connectAndLogin(context))\n            .addChatListener(chatManagerListener);\n}\n\npublic void removeChatListener(Context context, ChatManagerListener chatManagerListener){\n    ChatManager.getInstanceFor(connectAndLogin(context)).removeChatListener(chatManagerListener);\n}\n\npublic void getSrvDeliveryManager(Context context){\n    ServiceDiscoveryManager sdm = ServiceDiscoveryManager\n            .getInstanceFor(XMPP.getInstance().connectAndLogin(\n                    context));\n    //sdm.addFeature(\"http://jabber.org/protocol/disco#info\");\n    //sdm.addFeature(\"jabber:iq:privacy\");\n    sdm.addFeature(\"jabber.org/protocol/si\");\n    sdm.addFeature(\"http://jabber.org/protocol/si\");\n    sdm.addFeature(\"http://jabber.org/protocol/disco#info\");\n    sdm.addFeature(\"jabber:iq:privacy\");\n\n}\n\npublic String getUserLocalPart(Context context){\n   return  connectAndLogin(context).getUser().getLocalpart().toString();\n}\n\npublic EntityFullJid getUser(Context context){\n    return  connectAndLogin(context).getUser();\n}\n\npublic Chat getThreadChat(Context context, String party1, String party2){\n    Chat chat = ChatManager.getInstanceFor(\n            XMPP.getInstance().connectAndLogin(context))\n            .getThreadChat(party1 + \"-\" + party2);\n    return chat;\n}\n\npublic Chat createChat(Context context, EntityJid jid, String party1, String party2, ChatMessageListener messageListener){\n    Chat chat = ChatManager.getInstanceFor(\n            XMPP.getInstance().connectAndLogin(context))\n            .createChat(jid, party1 + \"-\" + party2,\n                    messageListener);\n    return chat;\n}\n\npublic void sendPacket(Context context, Stanza packet){\n    try {\n        connectAndLogin(context).sendStanza(packet);\n    } catch (SmackException.NotConnectedException e) {\n        e.printStackTrace();\n    } catch (InterruptedException e) {\n        e.printStackTrace();\n    }\n}\n\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550452574109,
        "id": "03388bad-55ad-4d97-9208-76fff0eb28af",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550452574109,
        "parent_id": "218c7a33-154c-46bb-bbcd-94906d5b9ade",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Finally, add this activiy:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Finally, add this activiy:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550452574109,
        "id": "5cd76fad-889b-43c8-b800-d79868d43c4a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550452574109,
        "parent_id": "218c7a33-154c-46bb-bbcd-94906d5b9ade",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "private UserLoginTask mAuthTask = null;\nprivate ChatManagerListener chatListener;\nprivate Chat chat;\nprivate Jid opt_jid;\nprivate ChatMessageListener messageListener;\nprivate StanzaListener packetListener;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "private UserLoginTask mAuthTask = null;\nprivate ChatManagerListener chatListener;\nprivate Chat chat;\nprivate Jid opt_jid;\nprivate ChatMessageListener messageListener;\nprivate StanzaListener packetListener;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550452574109,
        "id": "98d858e7-2328-4b14-a20e-43e12f8abb7d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550452574109,
        "parent_id": "218c7a33-154c-46bb-bbcd-94906d5b9ade",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "private boolean register(final String paramString1,final String paramString2) {\n    try {\n        XMPP.getInstance().register(paramString1, paramString2);\n        return true;\n\n    } catch (XMPPException localXMPPException) {\n        localXMPPException.printStackTrace();\n    } catch (SmackException.NoResponseException e) {\n        e.printStackTrace();\n    } catch (SmackException.NotConnectedException e) {\n        e.printStackTrace();\n    }\n    return false;\n}\n\nprivate boolean login(final String user,final String pass,final String username) {\n\n    try {\n       \n        XMPP.getInstance().login(user, pass, username);\n        sendBroadcast(new Intent(\"liveapp.loggedin\"));\n\n        return true;\n    } catch (Exception e) {\n        e.printStackTrace();\n        try {\n      \n            XMPP.getInstance()\n                    .login(user, pass, username);\n            sendBroadcast(new Intent(\"liveapp.loggedin\"));\n\n            return true;\n        } catch (XMPPException e1) {\n            e1.printStackTrace();\n        } catch (SmackException e1) {\n            e1.printStackTrace();\n        } catch (InterruptedException e1) {\n            e1.printStackTrace();\n        } catch (IOException e1) {\n            e1.printStackTrace();\n        }catch (Exception e1){\n            e1.printStackTrace();\n        }\n    }\n    return false;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "private boolean register(final String paramString1,final String paramString2) {\n    try {\n        XMPP.getInstance().register(paramString1, paramString2);\n        return true;\n\n    } catch (XMPPException localXMPPException) {\n        localXMPPException.printStackTrace();\n    } catch (SmackException.NoResponseException e) {\n        e.printStackTrace();\n    } catch (SmackException.NotConnectedException e) {\n        e.printStackTrace();\n    }\n    return false;\n}\n\nprivate boolean login(final String user,final String pass,final String username) {\n\n    try {\n       \n        XMPP.getInstance().login(user, pass, username);\n        sendBroadcast(new Intent(\"liveapp.loggedin\"));\n\n        return true;\n    } catch (Exception e) {\n        e.printStackTrace();\n        try {\n      \n            XMPP.getInstance()\n                    .login(user, pass, username);\n            sendBroadcast(new Intent(\"liveapp.loggedin\"));\n\n            return true;\n        } catch (XMPPException e1) {\n            e1.printStackTrace();\n        } catch (SmackException e1) {\n            e1.printStackTrace();\n        } catch (InterruptedException e1) {\n            e1.printStackTrace();\n        } catch (IOException e1) {\n            e1.printStackTrace();\n        }catch (Exception e1){\n            e1.printStackTrace();\n        }\n    }\n    return false;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550452574109,
        "id": "11ba441a-93ab-4c54-83f3-b53c5fe395d2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550452574109,
        "parent_id": "218c7a33-154c-46bb-bbcd-94906d5b9ade",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class UserLoginTask extends AsyncTask\u003cVoid, Void, Boolean\u003e {\n\n    public UserLoginTask() {\n    }\n\n    protected Boolean doInBackground(Void... paramVarArgs) {\n        String mEmail = \"abc\";\n        String mUsername = \"abc\";\n        String mPassword = \"welcome\";\n       \n        if (register(mEmail, mPassword)) {\n            try {\n                XMPP.getInstance().close();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n        return login(mEmail, mPassword, mUsername);\n\n    }\n\n    protected void onCancelled() {\n        mAuthTask = null;\n\n    }\n\n    @Override\n    protected void onPreExecute() {\n        super.onPreExecute();\n\n    }\n\n    protected void onPostExecute(Boolean success) {\n        mAuthTask = null;\n        try {\n            if (success) {\n\n              messageListener = new ChatMessageListener() {\n                @Override\n                public void processMessage(Chat chat, Message message) {\n\n                // here you will get only connected user by you\n\n                }\n        };"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class UserLoginTask extends AsyncTask\u003cVoid, Void, Boolean\u003e {\n\n    public UserLoginTask() {\n    }\n\n    protected Boolean doInBackground(Void... paramVarArgs) {\n        String mEmail = \"abc\";\n        String mUsername = \"abc\";\n        String mPassword = \"welcome\";\n       \n        if (register(mEmail, mPassword)) {\n            try {\n                XMPP.getInstance().close();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n        return login(mEmail, mPassword, mUsername);\n\n    }\n\n    protected void onCancelled() {\n        mAuthTask = null;\n\n    }\n\n    @Override\n    protected void onPreExecute() {\n        super.onPreExecute();\n\n    }\n\n    protected void onPostExecute(Boolean success) {\n        mAuthTask = null;\n        try {\n            if (success) {\n\n              messageListener = new ChatMessageListener() {\n                @Override\n                public void processMessage(Chat chat, Message message) {\n\n                // here you will get only connected user by you\n\n                }\n        };",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550452574109,
        "id": "43cdf212-b6bc-4524-b1ee-7e8c9a511e75",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550452574109,
        "parent_id": "218c7a33-154c-46bb-bbcd-94906d5b9ade",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "packetListener = new StanzaListener() {\n        @Override\n        public void processPacket(Stanza packet) throws SmackException.NotConnectedException, InterruptedException {\n\n            if (packet instanceof Message) {\n                final Message message = (Message) packet;\n              \n         // here you will get all messages send by anybody\n            }\n        }\n};\n\nchatListener = new ChatManagerListener() {\n\n        @Override\n        public void chatCreated(Chat chatCreated, boolean local) {\n            onChatCreated(chatCreated);\n        }\n};\n\n\ntry {\nString opt_jidStr = \"abc\";\n\ntry {\n    opt_jid = JidCreate.bareFrom(Localpart.from(opt_jidStr), Domainpart.from(HOST));\n} catch (XmppStringprepException e) {\n    e.printStackTrace();\n}\nString addr1 = XMPP.getInstance().getUserLocalPart(getActivity());\nString addr2 = opt_jid.toString();\nif (addr1.compareTo(addr2) \u003e 0) {\n    String addr3 = addr2;\n    addr2 = addr1;\n    addr1 = addr3;\n}\nchat = XMPP.getInstance().getThreadChat(getActivity(), addr1, addr2);\nif (chat == null) {\n    chat = XMPP.getInstance().createChat(getActivity(), (EntityJid) opt_jid, addr1, addr2, messageListener);\n    PurplkiteLogs.logInfo(TAG, \"chat value single chat 1 :\" + chat);\n} else {\n    chat.addMessageListener(messageListener);\n    PurplkiteLogs.logInfo(TAG, \"chat value single chat  2:\" + chat);\n}\n\n} catch (Exception e) {\ne.printStackTrace();\n}\n\n\nXMPP.getInstance().addStanzaListener(getActivity(), packetListener);\nXMPP.getInstance().addChatListener(getActivity(), chatListener);\nXMPP.getInstance().getSrvDeliveryManager(getActivity());\n    \n    } else {\n\n    }\n} catch (Exception e) {\n    e.printStackTrace();\n}\n\n}\n}\n\n/**\n* user attemptLogin for xmpp\n*\n*/\n\nprivate void attemptLogin() {\nif (mAuthTask != null) {\nreturn;\n}\n\nboolean cancel = false;\nView focusView = null;\n\nif (cancel) {\nfocusView.requestFocus();\n} else {\ntry {\n    mAuthTask = new UserLoginTask();\n    mAuthTask.execute((Void) null);\n} catch (Exception e) {\n\n}\n\n}\n}\n\nvoid onChatCreated(Chat chatCreated) {\nif (chat != null) {\nif (chat.getParticipant().getLocalpart().toString().equals(\n        chatCreated.getParticipant().getLocalpart().toString())) {\n    chat.removeMessageListener(messageListener);\n    chat = chatCreated;\n    chat.addMessageListener(messageListener);\n}\n} else {\nchat = chatCreated;\nchat.addMessageListener(messageListener);\n}\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "packetListener = new StanzaListener() {\n        @Override\n        public void processPacket(Stanza packet) throws SmackException.NotConnectedException, InterruptedException {\n\n            if (packet instanceof Message) {\n                final Message message = (Message) packet;\n              \n         // here you will get all messages send by anybody\n            }\n        }\n};\n\nchatListener = new ChatManagerListener() {\n\n        @Override\n        public void chatCreated(Chat chatCreated, boolean local) {\n            onChatCreated(chatCreated);\n        }\n};\n\n\ntry {\nString opt_jidStr = \"abc\";\n\ntry {\n    opt_jid = JidCreate.bareFrom(Localpart.from(opt_jidStr), Domainpart.from(HOST));\n} catch (XmppStringprepException e) {\n    e.printStackTrace();\n}\nString addr1 = XMPP.getInstance().getUserLocalPart(getActivity());\nString addr2 = opt_jid.toString();\nif (addr1.compareTo(addr2) \u003e 0) {\n    String addr3 = addr2;\n    addr2 = addr1;\n    addr1 = addr3;\n}\nchat = XMPP.getInstance().getThreadChat(getActivity(), addr1, addr2);\nif (chat == null) {\n    chat = XMPP.getInstance().createChat(getActivity(), (EntityJid) opt_jid, addr1, addr2, messageListener);\n    PurplkiteLogs.logInfo(TAG, \"chat value single chat 1 :\" + chat);\n} else {\n    chat.addMessageListener(messageListener);\n    PurplkiteLogs.logInfo(TAG, \"chat value single chat  2:\" + chat);\n}\n\n} catch (Exception e) {\ne.printStackTrace();\n}\n\n\nXMPP.getInstance().addStanzaListener(getActivity(), packetListener);\nXMPP.getInstance().addChatListener(getActivity(), chatListener);\nXMPP.getInstance().getSrvDeliveryManager(getActivity());\n    \n    } else {\n\n    }\n} catch (Exception e) {\n    e.printStackTrace();\n}\n\n}\n}\n\n/**\n* user attemptLogin for xmpp\n*\n*/\n\nprivate void attemptLogin() {\nif (mAuthTask != null) {\nreturn;\n}\n\nboolean cancel = false;\nView focusView = null;\n\nif (cancel) {\nfocusView.requestFocus();\n} else {\ntry {\n    mAuthTask = new UserLoginTask();\n    mAuthTask.execute((Void) null);\n} catch (Exception e) {\n\n}\n\n}\n}\n\nvoid onChatCreated(Chat chatCreated) {\nif (chat != null) {\nif (chat.getParticipant().getLocalpart().toString().equals(\n        chatCreated.getParticipant().getLocalpart().toString())) {\n    chat.removeMessageListener(messageListener);\n    chat = chatCreated;\n    chat.addMessageListener(messageListener);\n}\n} else {\nchat = chatCreated;\nchat.addMessageListener(messageListener);\n}\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550452574109,
        "id": "2e039257-d0a7-480d-8c0f-6c93465be67b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550452574109,
        "parent_id": "218c7a33-154c-46bb-bbcd-94906d5b9ade",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "private void sendMessage(String message) {\n    if (chat != null) {\n        try {\n            chat.sendMessage(message);\n        } catch (SmackException.NotConnectedException e) {\n            e.printStackTrace();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}    \n\n @Override\npublic void onDestroy() {\n    // TODO Auto-generated method stub\n    super.onDestroy();\n    try {\n        XMPP.getInstance().removeChatListener(getActivity(), chatListener);\n        if (chat != null \u0026\u0026 messageListener != null) {\n            XMPP.getInstance().removeStanzaListener(getActivity(), packetListener);\n            chat.removeMessageListener(messageListener);\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "private void sendMessage(String message) {\n    if (chat != null) {\n        try {\n            chat.sendMessage(message);\n        } catch (SmackException.NotConnectedException e) {\n            e.printStackTrace();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}    \n\n @Override\npublic void onDestroy() {\n    // TODO Auto-generated method stub\n    super.onDestroy();\n    try {\n        XMPP.getInstance().removeChatListener(getActivity(), chatListener);\n        if (chat != null \u0026\u0026 messageListener != null) {\n            XMPP.getInstance().removeStanzaListener(getActivity(), packetListener);\n            chat.removeMessageListener(messageListener);\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550452574110,
        "id": "519d9de3-057b-4c8b-953f-92e5c219ccfb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550452574110,
        "parent_id": "218c7a33-154c-46bb-bbcd-94906d5b9ade",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Make sure the internet permission is added in your manifest file."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Make sure the internet permission is added in your manifest file."
          }
        ]
      }
    ],
    "title": "XMPP register login and chat basic example",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}