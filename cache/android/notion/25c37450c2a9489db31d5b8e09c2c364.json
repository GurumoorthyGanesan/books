{
  "ID": "25c37450-c2a9-489d-b31d-5b8e09c2c364",
  "Root": {
    "alive": true,
    "content": [
      "643352d6-9d9d-410a-a9d2-08f9e000149e",
      "f4a1e2fa-fe01-400c-a4b4-8a767066960d",
      "e6535ee7-1684-4fe9-ab8f-f065d722e978",
      "eadc5fc7-9488-4efb-aab5-d7156cca0128"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550451461984,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "25c37450-c2a9-489d-b31d-5b8e09c2c364",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550451461984,
    "parent_id": "77f833e9-2996-4ded-b5af-7e17de12e8bf",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Blur a View"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550451461981,
        "id": "643352d6-9d9d-410a-a9d2-08f9e000149e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550451461981,
        "parent_id": "25c37450-c2a9-489d-b31d-5b8e09c2c364",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "BlurBitmapTask.java"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "BlurBitmapTask.java"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550451461983,
        "id": "f4a1e2fa-fe01-400c-a4b4-8a767066960d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550451461983,
        "parent_id": "25c37450-c2a9-489d-b31d-5b8e09c2c364",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class BlurBitmapTask extends AsyncTask\u003cBitmap, Void, Bitmap\u003e {\n    private final WeakReference\u003cImageView\u003e imageViewReference;\n    private final RenderScript renderScript;\n\n    private boolean shouldRecycleSource = false;\n\n    public BlurBitmapTask(@NonNull Context context, @NonNull ImageView imageView) {\n        // Use a WeakReference to ensure\n        // the ImageView can be garbage collected\n        imageViewReference = new WeakReference\u003c\u003e(imageView);\n        renderScript = RenderScript.create(context);\n    }\n\n    // Decode image in background.\n    @Override\n    protected Bitmap doInBackground(Bitmap... params) {\n        Bitmap bitmap = params[0];\n        return blurBitmap(bitmap);\n    }\n\n    // Once complete, see if ImageView is still around and set bitmap.\n    @Override\n    protected void onPostExecute(Bitmap bitmap) {\n        if (bitmap == null || isCancelled()) {\n            return;\n        }\n\n        final ImageView imageView = imageViewReference.get();\n        if (imageView == null) {\n            return;\n        }\n\n        imageView.setImageBitmap(bitmap);\n    }\n\n    public Bitmap blurBitmap(Bitmap bitmap) {\n        // https://plus.google.com/+MarioViviani/posts/fhuzYkji9zz\n\n        //Let's create an empty bitmap with the same size of the bitmap we want to blur\n        Bitmap outBitmap = Bitmap.createBitmap(bitmap.getWidth(), bitmap.getHeight(),\n                Bitmap.Config.ARGB_8888);\n\n        //Instantiate a new Renderscript\n\n\n        //Create an Intrinsic Blur Script using the Renderscript\n        ScriptIntrinsicBlur blurScript = ScriptIntrinsicBlur.create(renderScript, Element.U8_4(renderScript));\n\n        //Create the in/out Allocations with the Renderscript and the in/out bitmaps\n        Allocation allIn = Allocation.createFromBitmap(renderScript, bitmap);\n        Allocation allOut = Allocation.createFromBitmap(renderScript, outBitmap);\n\n        //Set the radius of the blur\n        blurScript.setRadius(25.f);\n\n        //Perform the Renderscript\n        blurScript.setInput(allIn);\n        blurScript.forEach(allOut);\n\n        //Copy the final bitmap created by the out Allocation to the outBitmap\n        allOut.copyTo(outBitmap);\n\n        // recycle the original bitmap\n        // nope, we are using the original bitmap as well :/\n        if (shouldRecycleSource) {\n            bitmap.recycle();\n        }\n\n        //After finishing everything, we destroy the Renderscript.\n        renderScript.destroy();\n\n        return outBitmap;\n    }\n\n    public boolean isShouldRecycleSource() {\n        return shouldRecycleSource;\n    }\n\n    public void setShouldRecycleSource(boolean shouldRecycleSource) {\n        this.shouldRecycleSource = shouldRecycleSource;\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class BlurBitmapTask extends AsyncTask\u003cBitmap, Void, Bitmap\u003e {\n    private final WeakReference\u003cImageView\u003e imageViewReference;\n    private final RenderScript renderScript;\n\n    private boolean shouldRecycleSource = false;\n\n    public BlurBitmapTask(@NonNull Context context, @NonNull ImageView imageView) {\n        // Use a WeakReference to ensure\n        // the ImageView can be garbage collected\n        imageViewReference = new WeakReference\u003c\u003e(imageView);\n        renderScript = RenderScript.create(context);\n    }\n\n    // Decode image in background.\n    @Override\n    protected Bitmap doInBackground(Bitmap... params) {\n        Bitmap bitmap = params[0];\n        return blurBitmap(bitmap);\n    }\n\n    // Once complete, see if ImageView is still around and set bitmap.\n    @Override\n    protected void onPostExecute(Bitmap bitmap) {\n        if (bitmap == null || isCancelled()) {\n            return;\n        }\n\n        final ImageView imageView = imageViewReference.get();\n        if (imageView == null) {\n            return;\n        }\n\n        imageView.setImageBitmap(bitmap);\n    }\n\n    public Bitmap blurBitmap(Bitmap bitmap) {\n        // https://plus.google.com/+MarioViviani/posts/fhuzYkji9zz\n\n        //Let's create an empty bitmap with the same size of the bitmap we want to blur\n        Bitmap outBitmap = Bitmap.createBitmap(bitmap.getWidth(), bitmap.getHeight(),\n                Bitmap.Config.ARGB_8888);\n\n        //Instantiate a new Renderscript\n\n\n        //Create an Intrinsic Blur Script using the Renderscript\n        ScriptIntrinsicBlur blurScript = ScriptIntrinsicBlur.create(renderScript, Element.U8_4(renderScript));\n\n        //Create the in/out Allocations with the Renderscript and the in/out bitmaps\n        Allocation allIn = Allocation.createFromBitmap(renderScript, bitmap);\n        Allocation allOut = Allocation.createFromBitmap(renderScript, outBitmap);\n\n        //Set the radius of the blur\n        blurScript.setRadius(25.f);\n\n        //Perform the Renderscript\n        blurScript.setInput(allIn);\n        blurScript.forEach(allOut);\n\n        //Copy the final bitmap created by the out Allocation to the outBitmap\n        allOut.copyTo(outBitmap);\n\n        // recycle the original bitmap\n        // nope, we are using the original bitmap as well :/\n        if (shouldRecycleSource) {\n            bitmap.recycle();\n        }\n\n        //After finishing everything, we destroy the Renderscript.\n        renderScript.destroy();\n\n        return outBitmap;\n    }\n\n    public boolean isShouldRecycleSource() {\n        return shouldRecycleSource;\n    }\n\n    public void setShouldRecycleSource(boolean shouldRecycleSource) {\n        this.shouldRecycleSource = shouldRecycleSource;\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550451461984,
        "id": "e6535ee7-1684-4fe9-ab8f-f065d722e978",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550451461984,
        "parent_id": "25c37450-c2a9-489d-b31d-5b8e09c2c364",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Usage:"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Usage:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550451461984,
        "id": "eadc5fc7-9488-4efb-aab5-d7156cca0128",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550451461984,
        "parent_id": "25c37450-c2a9-489d-b31d-5b8e09c2c364",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "ImageView imageViewOverlayOnViewToBeBlurred\n        .setImageDrawable(ContextCompat.getDrawable(this, android.R.color.transparent));\nView viewToBeBlurred.setDrawingCacheQuality(View.DRAWING_CACHE_QUALITY_LOW);\nviewToBeBlurred.setDrawingCacheEnabled(true);\nBlurBitmapTask blurBitmapTask = new BlurBitmapTask(this, imageViewOverlayOnViewToBeBlurred);\nblurBitmapTask.execute(Bitmap.createBitmap(viewToBeBlurred.getDrawingCache()));\nviewToBeBlurred.setDrawingCacheEnabled(false);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "ImageView imageViewOverlayOnViewToBeBlurred\n        .setImageDrawable(ContextCompat.getDrawable(this, android.R.color.transparent));\nView viewToBeBlurred.setDrawingCacheQuality(View.DRAWING_CACHE_QUALITY_LOW);\nviewToBeBlurred.setDrawingCacheEnabled(true);\nBlurBitmapTask blurBitmapTask = new BlurBitmapTask(this, imageViewOverlayOnViewToBeBlurred);\nblurBitmapTask.execute(Bitmap.createBitmap(viewToBeBlurred.getDrawingCache()));\nviewToBeBlurred.setDrawingCacheEnabled(false);",
        "code_language": "Plain Text"
      }
    ],
    "title": "Blur a View",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}