{
  "ID": "4ec1ae9a-31f6-4e6a-bd09-e7b54f55bc38",
  "Root": {
    "alive": true,
    "content": [
      "7c38609b-99d3-4c67-ba95-c365050a5b73",
      "c91fb367-a9aa-4f85-947e-b50fadc44043",
      "454723c2-6f04-4b9e-9a51-c485fa150a90",
      "1e2301cf-ae1e-4aaa-b5b1-9a08cbced259"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550450335894,
    "id": "4ec1ae9a-31f6-4e6a-bd09-e7b54f55bc38",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550450335894,
    "parent_id": "44d0c151-0367-453d-9879-ef7e4d456c6c",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "030 How to check network strength"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550450335893,
        "id": "7c38609b-99d3-4c67-ba95-c365050a5b73",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550450335893,
        "parent_id": "4ec1ae9a-31f6-4e6a-bd09-e7b54f55bc38",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To check exact strength in decibels use this-",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To check exact strength in decibels use this-",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550450335894,
        "id": "c91fb367-a9aa-4f85-947e-b50fadc44043",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550450335894,
        "parent_id": "4ec1ae9a-31f6-4e6a-bd09-e7b54f55bc38",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "ConnectivityManager cm = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);\n    NetworkInfo Info = cm.getActiveNetworkInfo();\n    if (Info == null || !Info.isConnectedOrConnecting()) {\n        Log.i(TAG, \"No connection\");\n    } else {\n        int netType = Info.getType();\n        int netSubtype = Info.getSubtype();\n\n        if (netType == ConnectivityManager.TYPE_WIFI) {\n            Log.i(TAG, \"Wifi connection\");\n            WifiManager wifiManager = (WifiManager) getApplication().getSystemService(Context.WIFI_SERVICE);\n            List\u003cScanResult\u003e scanResult = wifiManager.getScanResults();\n            for (int i = 0; i \u003c scanResult.size(); i++) {\n                Log.d(\"scanResult\", \"Speed of wifi\"+scanResult.get(i).level);//The db level of signal \n            }\n\n\n            // Need to get wifi strength\n        } else if (netType == ConnectivityManager.TYPE_MOBILE) {\n            Log.i(TAG, \"GPRS/3G connection\");\n            // Need to get differentiate between 3G/GPRS\n        }\n    }"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "ConnectivityManager cm = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);\n    NetworkInfo Info = cm.getActiveNetworkInfo();\n    if (Info == null || !Info.isConnectedOrConnecting()) {\n        Log.i(TAG, \"No connection\");\n    } else {\n        int netType = Info.getType();\n        int netSubtype = Info.getSubtype();\n\n        if (netType == ConnectivityManager.TYPE_WIFI) {\n            Log.i(TAG, \"Wifi connection\");\n            WifiManager wifiManager = (WifiManager) getApplication().getSystemService(Context.WIFI_SERVICE);\n            List\u003cScanResult\u003e scanResult = wifiManager.getScanResults();\n            for (int i = 0; i \u003c scanResult.size(); i++) {\n                Log.d(\"scanResult\", \"Speed of wifi\"+scanResult.get(i).level);//The db level of signal \n            }\n\n\n            // Need to get wifi strength\n        } else if (netType == ConnectivityManager.TYPE_MOBILE) {\n            Log.i(TAG, \"GPRS/3G connection\");\n            // Need to get differentiate between 3G/GPRS\n        }\n    }",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550450335894,
        "id": "454723c2-6f04-4b9e-9a51-c485fa150a90",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550450335894,
        "parent_id": "4ec1ae9a-31f6-4e6a-bd09-e7b54f55bc38",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To check Network type use this Class-",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To check Network type use this Class-",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550450335894,
        "id": "1e2301cf-ae1e-4aaa-b5b1-9a08cbced259",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550450335894,
        "parent_id": "4ec1ae9a-31f6-4e6a-bd09-e7b54f55bc38",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class Connectivity {\n       /*\n        * These constants aren't yet available in my API level (7), but I need to\n        * handle these cases if they come up, on newer versions\n        */\n       public static final int NETWORK_TYPE_EHRPD = 14; // Level 11\n       public static final int NETWORK_TYPE_EVDO_B = 12; // Level 9\n       public static final int NETWORK_TYPE_HSPAP = 15; // Level 13\n       public static final int NETWORK_TYPE_IDEN = 11; // Level 8\n       public static final int NETWORK_TYPE_LTE = 13; // Level 11\n\n   /**\n    * Check if there is any connectivity\n    * \n    * @param context\n    * @return\n    */\n   public static boolean isConnected(Context context) {\n       ConnectivityManager cm = (ConnectivityManager) context\n               .getSystemService(Context.CONNECTIVITY_SERVICE);\n       NetworkInfo info = cm.getActiveNetworkInfo();\n       return (info != null \u0026\u0026 info.isConnected());\n   }\n\n   /**\n    * Check if there is fast connectivity\n    * \n    * @param context\n    * @return\n    */\n   public static String isConnectedFast(Context context) {\n       ConnectivityManager cm = (ConnectivityManager) context\n               .getSystemService(Context.CONNECTIVITY_SERVICE);\n       NetworkInfo info = cm.getActiveNetworkInfo();\n\n       if ((info != null \u0026\u0026 info.isConnected())) {\n           return Connectivity.isConnectionFast(info.getType(),\n                   info.getSubtype());\n       } else\n           return \"No NetWork Access\";\n\n   }\n\n   /**\n    * Check if the connection is fast\n    * \n    * @param type\n    * @param subType\n    * @return\n    */\n   public static String isConnectionFast(int type, int subType) {\n       if (type == ConnectivityManager.TYPE_WIFI) {\n           System.out.println(\"CONNECTED VIA WIFI\");\n           return \"CONNECTED VIA WIFI\";\n       } else if (type == ConnectivityManager.TYPE_MOBILE) {\n           switch (subType) {\n           case TelephonyManager.NETWORK_TYPE_1xRTT:\n               return \"NETWORK TYPE 1xRTT\"; // ~ 50-100 kbps\n           case TelephonyManager.NETWORK_TYPE_CDMA:\n               return \"NETWORK TYPE CDMA (3G) Speed: 2 Mbps\"; // ~ 14-64 kbps\n           case TelephonyManager.NETWORK_TYPE_EDGE:\n\n               return \"NETWORK TYPE EDGE (2.75G) Speed: 100-120 Kbps\"; // ~\n                                                                       // 50-100\n                                                                       // kbps\n           case TelephonyManager.NETWORK_TYPE_EVDO_0:\n               return \"NETWORK TYPE EVDO_0\"; // ~ 400-1000 kbps\n           case TelephonyManager.NETWORK_TYPE_EVDO_A:\n               return \"NETWORK TYPE EVDO_A\"; // ~ 600-1400 kbps\n           case TelephonyManager.NETWORK_TYPE_GPRS:\n               return \"NETWORK TYPE GPRS (2.5G) Speed: 40-50 Kbps\"; // ~ 100\n                                                                       // kbps\n           case TelephonyManager.NETWORK_TYPE_HSDPA:\n               return \"NETWORK TYPE HSDPA (4G) Speed: 2-14 Mbps\"; // ~ 2-14\n                                                                   // Mbps\n           case TelephonyManager.NETWORK_TYPE_HSPA:\n               return \"NETWORK TYPE HSPA (4G) Speed: 0.7-1.7 Mbps\"; // ~\n                                                                       // 700-1700\n                                                                       // kbps\n           case TelephonyManager.NETWORK_TYPE_HSUPA:\n               return \"NETWORK TYPE HSUPA (3G) Speed: 1-23 Mbps\"; // ~ 1-23\n                                                                   // Mbps\n           case TelephonyManager.NETWORK_TYPE_UMTS:\n               return \"NETWORK TYPE UMTS (3G) Speed: 0.4-7 Mbps\"; // ~ 400-7000\n                                                                   // kbps\n               // NOT AVAILABLE YET IN API LEVEL 7\n           case Connectivity.NETWORK_TYPE_EHRPD:\n               return \"NETWORK TYPE EHRPD\"; // ~ 1-2 Mbps\n           case Connectivity.NETWORK_TYPE_EVDO_B:\n               return \"NETWORK_TYPE_EVDO_B\"; // ~ 5 Mbps\n           case Connectivity.NETWORK_TYPE_HSPAP:\n               return \"NETWORK TYPE HSPA+ (4G) Speed: 10-20 Mbps\"; // ~ 10-20\n                                                                   // Mbps\n           case Connectivity.NETWORK_TYPE_IDEN:\n               return \"NETWORK TYPE IDEN\"; // ~25 kbps\n           case Connectivity.NETWORK_TYPE_LTE:\n               return \"NETWORK TYPE LTE (4G) Speed: 10+ Mbps\"; // ~ 10+ Mbps\n               // Unknown\n           case TelephonyManager.NETWORK_TYPE_UNKNOWN:\n               return \"NETWORK TYPE UNKNOWN\";\n           default:\n               return \"\";\n           }\n       } else {\n           return \"\";\n       }\n   }\n\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class Connectivity {\n       /*\n        * These constants aren't yet available in my API level (7), but I need to\n        * handle these cases if they come up, on newer versions\n        */\n       public static final int NETWORK_TYPE_EHRPD = 14; // Level 11\n       public static final int NETWORK_TYPE_EVDO_B = 12; // Level 9\n       public static final int NETWORK_TYPE_HSPAP = 15; // Level 13\n       public static final int NETWORK_TYPE_IDEN = 11; // Level 8\n       public static final int NETWORK_TYPE_LTE = 13; // Level 11\n\n   /**\n    * Check if there is any connectivity\n    * \n    * @param context\n    * @return\n    */\n   public static boolean isConnected(Context context) {\n       ConnectivityManager cm = (ConnectivityManager) context\n               .getSystemService(Context.CONNECTIVITY_SERVICE);\n       NetworkInfo info = cm.getActiveNetworkInfo();\n       return (info != null \u0026\u0026 info.isConnected());\n   }\n\n   /**\n    * Check if there is fast connectivity\n    * \n    * @param context\n    * @return\n    */\n   public static String isConnectedFast(Context context) {\n       ConnectivityManager cm = (ConnectivityManager) context\n               .getSystemService(Context.CONNECTIVITY_SERVICE);\n       NetworkInfo info = cm.getActiveNetworkInfo();\n\n       if ((info != null \u0026\u0026 info.isConnected())) {\n           return Connectivity.isConnectionFast(info.getType(),\n                   info.getSubtype());\n       } else\n           return \"No NetWork Access\";\n\n   }\n\n   /**\n    * Check if the connection is fast\n    * \n    * @param type\n    * @param subType\n    * @return\n    */\n   public static String isConnectionFast(int type, int subType) {\n       if (type == ConnectivityManager.TYPE_WIFI) {\n           System.out.println(\"CONNECTED VIA WIFI\");\n           return \"CONNECTED VIA WIFI\";\n       } else if (type == ConnectivityManager.TYPE_MOBILE) {\n           switch (subType) {\n           case TelephonyManager.NETWORK_TYPE_1xRTT:\n               return \"NETWORK TYPE 1xRTT\"; // ~ 50-100 kbps\n           case TelephonyManager.NETWORK_TYPE_CDMA:\n               return \"NETWORK TYPE CDMA (3G) Speed: 2 Mbps\"; // ~ 14-64 kbps\n           case TelephonyManager.NETWORK_TYPE_EDGE:\n\n               return \"NETWORK TYPE EDGE (2.75G) Speed: 100-120 Kbps\"; // ~\n                                                                       // 50-100\n                                                                       // kbps\n           case TelephonyManager.NETWORK_TYPE_EVDO_0:\n               return \"NETWORK TYPE EVDO_0\"; // ~ 400-1000 kbps\n           case TelephonyManager.NETWORK_TYPE_EVDO_A:\n               return \"NETWORK TYPE EVDO_A\"; // ~ 600-1400 kbps\n           case TelephonyManager.NETWORK_TYPE_GPRS:\n               return \"NETWORK TYPE GPRS (2.5G) Speed: 40-50 Kbps\"; // ~ 100\n                                                                       // kbps\n           case TelephonyManager.NETWORK_TYPE_HSDPA:\n               return \"NETWORK TYPE HSDPA (4G) Speed: 2-14 Mbps\"; // ~ 2-14\n                                                                   // Mbps\n           case TelephonyManager.NETWORK_TYPE_HSPA:\n               return \"NETWORK TYPE HSPA (4G) Speed: 0.7-1.7 Mbps\"; // ~\n                                                                       // 700-1700\n                                                                       // kbps\n           case TelephonyManager.NETWORK_TYPE_HSUPA:\n               return \"NETWORK TYPE HSUPA (3G) Speed: 1-23 Mbps\"; // ~ 1-23\n                                                                   // Mbps\n           case TelephonyManager.NETWORK_TYPE_UMTS:\n               return \"NETWORK TYPE UMTS (3G) Speed: 0.4-7 Mbps\"; // ~ 400-7000\n                                                                   // kbps\n               // NOT AVAILABLE YET IN API LEVEL 7\n           case Connectivity.NETWORK_TYPE_EHRPD:\n               return \"NETWORK TYPE EHRPD\"; // ~ 1-2 Mbps\n           case Connectivity.NETWORK_TYPE_EVDO_B:\n               return \"NETWORK_TYPE_EVDO_B\"; // ~ 5 Mbps\n           case Connectivity.NETWORK_TYPE_HSPAP:\n               return \"NETWORK TYPE HSPA+ (4G) Speed: 10-20 Mbps\"; // ~ 10-20\n                                                                   // Mbps\n           case Connectivity.NETWORK_TYPE_IDEN:\n               return \"NETWORK TYPE IDEN\"; // ~25 kbps\n           case Connectivity.NETWORK_TYPE_LTE:\n               return \"NETWORK TYPE LTE (4G) Speed: 10+ Mbps\"; // ~ 10+ Mbps\n               // Unknown\n           case TelephonyManager.NETWORK_TYPE_UNKNOWN:\n               return \"NETWORK TYPE UNKNOWN\";\n           default:\n               return \"\";\n           }\n       } else {\n           return \"\";\n       }\n   }\n\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "030 How to check network strength"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}