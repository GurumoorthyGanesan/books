{
  "ID": "cd8be69a-4a30-499d-a4b7-401c7ee36d90",
  "Root": {
    "alive": true,
    "content": [
      "9951234d-2f7c-4fbc-ae46-9c622fb1cfd8",
      "4f9ec997-9775-4c28-a985-aa7d7bd18cc9",
      "b5d7acda-1061-4909-9ef2-055cbf7fcf95",
      "ca6137b0-fa5a-4cbd-86a4-b3db828bb42f"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550449700916,
    "id": "cd8be69a-4a30-499d-a4b7-401c7ee36d90",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550449700916,
    "parent_id": "95044da4-c747-4fa5-b31f-4fb3ed5adb6c",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "010 Basic usage example"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550449700912,
        "id": "9951234d-2f7c-4fbc-ae46-9c622fb1cfd8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550449700912,
        "parent_id": "cd8be69a-4a30-499d-a4b7-401c7ee36d90",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "I like to wrap my "
            ],
            [
              "OkHttp",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " into a class called "
            ],
            [
              "HttpClient",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " for example, and in this class I have methods for each of the major HTTP verbs, "
            ],
            [
              "post",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "get",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "put",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "delete",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", most commonly. (I usually include an interface, in order to keep for it to implement, in order to be able to easily change to a different implementation, if need be):"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "I like to wrap my "
          },
          {
            "Text": "OkHttp",
            "AttrFlags": 2
          },
          {
            "Text": " into a class called "
          },
          {
            "Text": "HttpClient",
            "AttrFlags": 2
          },
          {
            "Text": " for example, and in this class I have methods for each of the major HTTP verbs, "
          },
          {
            "Text": "post",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "get",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "put",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "delete",
            "AttrFlags": 2
          },
          {
            "Text": ", most commonly. (I usually include an interface, in order to keep for it to implement, in order to be able to easily change to a different implementation, if need be):"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550449700915,
        "id": "4f9ec997-9775-4c28-a985-aa7d7bd18cc9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550449700915,
        "parent_id": "cd8be69a-4a30-499d-a4b7-401c7ee36d90",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class HttpClient implements HttpClientInterface{\n\nprivate static final String TAG = OkHttpClient.class.getSimpleName();\npublic static final MediaType JSON\n        = MediaType.parse(\"application/json; charset=utf-8\");\n\nOkHttpClient httpClient = new OkHttpClient();\n\n@Override\npublic String post(String url, String json) throws IOException {\n    Log.i(TAG, \"Sending a post request with body:\\n\" + json + \"\\n to URL: \" + url);\n\n    RequestBody body = RequestBody.create(JSON, json);\n    Request request = new Request.Builder()\n            .url(url)\n            .post(body)\n            .build();\n    Response response = httpClient.newCall(request).execute();\n    return response.body().string();\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class HttpClient implements HttpClientInterface{\n\nprivate static final String TAG = OkHttpClient.class.getSimpleName();\npublic static final MediaType JSON\n        = MediaType.parse(\"application/json; charset=utf-8\");\n\nOkHttpClient httpClient = new OkHttpClient();\n\n@Override\npublic String post(String url, String json) throws IOException {\n    Log.i(TAG, \"Sending a post request with body:\\n\" + json + \"\\n to URL: \" + url);\n\n    RequestBody body = RequestBody.create(JSON, json);\n    Request request = new Request.Builder()\n            .url(url)\n            .post(body)\n            .build();\n    Response response = httpClient.newCall(request).execute();\n    return response.body().string();\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550449700915,
        "id": "b5d7acda-1061-4909-9ef2-055cbf7fcf95",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550449700915,
        "parent_id": "cd8be69a-4a30-499d-a4b7-401c7ee36d90",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The syntax is the same for "
            ],
            [
              "put",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "get",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "delete",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " except for 1 word ("
            ],
            [
              ".put(body)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") so it might be obnoxious to post that code as well. Usage is pretty simple, just call the appropriate method on some "
            ],
            [
              "url",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " with some "
            ],
            [
              "json",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " payload and the method will return a string as a result that you can later use and parse. Let’s assume that the response will be a "
            ],
            [
              "json",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", we can create a "
            ],
            [
              "JSONObject",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " easily from it:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The syntax is the same for "
          },
          {
            "Text": "put",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "get",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "delete",
            "AttrFlags": 2
          },
          {
            "Text": " except for 1 word ("
          },
          {
            "Text": ".put(body)",
            "AttrFlags": 2
          },
          {
            "Text": ") so it might be obnoxious to post that code as well. Usage is pretty simple, just call the appropriate method on some "
          },
          {
            "Text": "url",
            "AttrFlags": 2
          },
          {
            "Text": " with some "
          },
          {
            "Text": "json",
            "AttrFlags": 2
          },
          {
            "Text": " payload and the method will return a string as a result that you can later use and parse. Let’s assume that the response will be a "
          },
          {
            "Text": "json",
            "AttrFlags": 2
          },
          {
            "Text": ", we can create a "
          },
          {
            "Text": "JSONObject",
            "AttrFlags": 2
          },
          {
            "Text": " easily from it:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550449700916,
        "id": "ca6137b0-fa5a-4cbd-86a4-b3db828bb42f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550449700916,
        "parent_id": "cd8be69a-4a30-499d-a4b7-401c7ee36d90",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "String response = httpClient.post(MY_URL, JSON_PAYLOAD);\nJSONObject json = new JSONObject(response);\n// continue to parse the response according to it's structure"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "String response = httpClient.post(MY_URL, JSON_PAYLOAD);\nJSONObject json = new JSONObject(response);\n// continue to parse the response according to it's structure",
        "code_language": "Plain Text"
      }
    ],
    "title": "010 Basic usage example"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}