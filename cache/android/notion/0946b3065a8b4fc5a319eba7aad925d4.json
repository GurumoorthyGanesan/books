{
  "ID": "0946b306-5a8b-4fc5-a319-eba7aad925d4",
  "Root": {
    "alive": true,
    "content": [
      "fae207eb-4dc6-4da6-a2dd-a9442a911f63",
      "e0a007f7-99af-4191-be59-0f01e165f3eb",
      "35bca4bf-5497-40ec-a7aa-606a2e11f29a",
      "7628a10a-3435-42cf-9fe5-72dc3fee8fd3",
      "7f51dde6-e9c6-4776-a88f-3d2c457af9b3",
      "c0aa8074-255d-4daf-8362-f09363f5ddd8",
      "000941c2-98b9-4339-855a-5a58c335237d",
      "f82fea88-987b-4efc-bc1b-c0e33fb1fc84",
      "84fb8f13-d8ee-4b04-a1ac-715d9126e419"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550448242984,
    "id": "0946b306-5a8b-4fc5-a319-eba7aad925d4",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550448242984,
    "parent_id": "c78edde1-b73e-43d7-ab97-ddf82241f21f",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "020 Using Realm with RxJava"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550448242980,
        "id": "fae207eb-4dc6-4da6-a2dd-a9442a911f63",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550448242980,
        "parent_id": "0946b306-5a8b-4fc5-a319-eba7aad925d4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For queries, Realm provides the "
            ],
            [
              "realmResults.asObservable()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method. Observing results is only possible on looper threads (typically the UI thread)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For queries, Realm provides the "
          },
          {
            "Text": "realmResults.asObservable()",
            "AttrFlags": 2
          },
          {
            "Text": " method. Observing results is only possible on looper threads (typically the UI thread)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550448242982,
        "id": "e0a007f7-99af-4191-be59-0f01e165f3eb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550448242982,
        "parent_id": "0946b306-5a8b-4fc5-a319-eba7aad925d4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For this to work, your configuration must contain the following"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For this to work, your configuration must contain the following"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550448242983,
        "id": "35bca4bf-5497-40ec-a7aa-606a2e11f29a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550448242983,
        "parent_id": "0946b306-5a8b-4fc5-a319-eba7aad925d4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "realmConfiguration = new RealmConfiguration.Builder(context)       //\n                          .rxFactory(new RealmObservableFactory()) //\n                             //...\n                          .build();"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "realmConfiguration = new RealmConfiguration.Builder(context)       //\n                          .rxFactory(new RealmObservableFactory()) //\n                             //...\n                          .build();",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550448242983,
        "id": "7628a10a-3435-42cf-9fe5-72dc3fee8fd3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550448242983,
        "parent_id": "0946b306-5a8b-4fc5-a319-eba7aad925d4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Afterwards, you can use your results as an observable."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Afterwards, you can use your results as an observable."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550448242983,
        "id": "7f51dde6-e9c6-4776-a88f-3d2c457af9b3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550448242983,
        "parent_id": "0946b306-5a8b-4fc5-a319-eba7aad925d4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Observable\u003cRealmResults\u003cSomeObject\u003e\u003e observable = results.asObservable();"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Observable\u003cRealmResults\u003cSomeObject\u003e\u003e observable = results.asObservable();",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550448242983,
        "id": "c0aa8074-255d-4daf-8362-f09363f5ddd8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550448242983,
        "parent_id": "0946b306-5a8b-4fc5-a319-eba7aad925d4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For asynchronous queries, you should filter the results by "
            ],
            [
              "isLoaded()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", so that you receive an event only when the query has been executed. This "
            ],
            [
              "filter()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is not needed for synchronous queries ("
            ],
            [
              "isLoaded()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " always returns "
            ],
            [
              "true",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " on sync queries)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For asynchronous queries, you should filter the results by "
          },
          {
            "Text": "isLoaded()",
            "AttrFlags": 2
          },
          {
            "Text": ", so that you receive an event only when the query has been executed. This "
          },
          {
            "Text": "filter()",
            "AttrFlags": 2
          },
          {
            "Text": " is not needed for synchronous queries ("
          },
          {
            "Text": "isLoaded()",
            "AttrFlags": 2
          },
          {
            "Text": " always returns "
          },
          {
            "Text": "true",
            "AttrFlags": 2
          },
          {
            "Text": " on sync queries)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550448242983,
        "id": "000941c2-98b9-4339-855a-5a58c335237d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550448242983,
        "parent_id": "0946b306-5a8b-4fc5-a319-eba7aad925d4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Subscription subscription = RxTextView.textChanges(editText).switchMap(charSequence -\u003e \n    realm.where(SomeObject.class)\n         .contains(\"searchField\", charSequence.toString(), Case.INSENSITIVE)\n         .findAllAsync()\n         .asObservable())\n.filter(RealmResults::isLoaded) //\n.subscribe(objects -\u003e adapter.updateData(objects));"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Subscription subscription = RxTextView.textChanges(editText).switchMap(charSequence -\u003e \n    realm.where(SomeObject.class)\n         .contains(\"searchField\", charSequence.toString(), Case.INSENSITIVE)\n         .findAllAsync()\n         .asObservable())\n.filter(RealmResults::isLoaded) //\n.subscribe(objects -\u003e adapter.updateData(objects));",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550448242983,
        "id": "f82fea88-987b-4efc-bc1b-c0e33fb1fc84",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550448242983,
        "parent_id": "0946b306-5a8b-4fc5-a319-eba7aad925d4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For writes, you should either use the "
            ],
            [
              "executeTransactionAsync()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method, or open a Realm instance on the background thread, execute the transaction synchronously, then close the Realm instance."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For writes, you should either use the "
          },
          {
            "Text": "executeTransactionAsync()",
            "AttrFlags": 2
          },
          {
            "Text": " method, or open a Realm instance on the background thread, execute the transaction synchronously, then close the Realm instance."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550448242983,
        "id": "84fb8f13-d8ee-4b04-a1ac-715d9126e419",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550448242983,
        "parent_id": "0946b306-5a8b-4fc5-a319-eba7aad925d4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public Subscription loadObjectsFromNetwork() {\n    return objectApi.getObjects()\n        .subscribeOn(Schedulers.io())\n        .subscribe(response -\u003e {\n            try(Realm realmInstance = Realm.getDefaultInstance()) {\n                realmInstance.executeTransaction(realm -\u003e realm.insertOrUpdate(response.objects));\n            }\n        });\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public Subscription loadObjectsFromNetwork() {\n    return objectApi.getObjects()\n        .subscribeOn(Schedulers.io())\n        .subscribe(response -\u003e {\n            try(Realm realmInstance = Realm.getDefaultInstance()) {\n                realmInstance.executeTransaction(realm -\u003e realm.insertOrUpdate(response.objects));\n            }\n        });\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "020 Using Realm with RxJava"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}