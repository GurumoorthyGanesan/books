{
  "ID": "6baae65d-6952-4332-8ae6-ecf058d26f84",
  "Root": {
    "alive": true,
    "content": [
      "b8a6a430-fcad-41de-8065-1bcb7e9e7b08",
      "c02f32f7-cc53-4944-8389-e014bfc7429e",
      "aa28ff84-32f9-44c1-ae92-022e53b16ba0",
      "9df660e4-147d-422f-a2ad-2398b274e711",
      "f661644b-46f3-4287-9d08-0f93e67ef8d9",
      "60c5592d-c838-4536-b9a9-66f6e58ad897",
      "cb29e435-659c-490f-898e-eab10854f85e"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550444935153,
    "id": "6baae65d-6952-4332-8ae6-ecf058d26f84",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550444935153,
    "parent_id": "1096b9a5-3f3a-425e-ac66-0adc4166be45",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "070 A multi-purpose HttpURLConnection class to handle all types of HTTP requests"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550444935150,
        "id": "b8a6a430-fcad-41de-8065-1bcb7e9e7b08",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550444935150,
        "parent_id": "6baae65d-6952-4332-8ae6-ecf058d26f84",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The following class can be used as a single class that can handle "
            ],
            [
              "GET",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "POST",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "PUT",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "PATCH",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", and other requests:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The following class can be used as a single class that can handle "
          },
          {
            "Text": "GET",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "POST",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "PUT",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "PATCH",
            "AttrFlags": 2
          },
          {
            "Text": ", and other requests:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550444935152,
        "id": "c02f32f7-cc53-4944-8389-e014bfc7429e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550444935152,
        "parent_id": "6baae65d-6952-4332-8ae6-ecf058d26f84",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class APIResponseObject{\n    int responseCode;\n    String response;\n\n    APIResponseObject(int responseCode,String response)\n    {\n         this.responseCode = responseCode;\n         this.response = response;\n    }\n}\n\npublic class APIAccessTask extends AsyncTask\u003cString,Void,APIResponseObject\u003e {\n    URL requestUrl;\n    Context context;\n    HttpURLConnection urlConnection;\n    List\u003cPair\u003cString,String\u003e\u003e postData, headerData;\n    String method;\n    int responseCode = HttpURLConnection.HTTP_OK;\n\n    interface OnCompleteListener{\n        void onComplete(APIResponseObject result);\n    }\n\n    public OnCompleteListener delegate = null;\n\n    APIAccessTask(Context context, String requestUrl, String method, OnCompleteListener delegate){\n        this.context = context;\n        this.delegate = delegate;\n        this.method = method;\n        try {\n            this.requestUrl = new URL(requestUrl);\n        }\n        catch(Exception ex){\n            ex.printStackTrace();\n        }\n    }\n\n    APIAccessTask(Context context, String requestUrl, String method, List\u003cPair\u003cString,String\u003e\u003e postData, OnCompleteListener delegate){\n        this(context, requestUrl, method, delegate);\n        this.postData = postData;\n    }\n\n    APIAccessTask(Context context, String requestUrl, String method, List\u003cPair\u003cString,String\u003e\u003e postData,\n            List\u003cPair\u003cString,String\u003e\u003e headerData, OnCompleteListener delegate ){\n        this(context, requestUrl,method,postData,delegate);\n        this.headerData = headerData;\n    }\n\n    @Override\n    protected void onPreExecute() {\n        super.onPreExecute();\n    }\n\n    @Override\n    protected APIResponseObject doInBackground(String... params) {\n        Log.d(\"debug\", \"url = \"+ requestUrl);\n        try {\n            urlConnection = (HttpURLConnection) requestUrl.openConnection();\n\n            if(headerData != null) {\n                for (Pair pair : headerData) {\n                    urlConnection.setRequestProperty(pair.first.toString(),pair.second.toString());\n                }\n            }\n\n            urlConnection.setDoInput(true);\n            urlConnection.setChunkedStreamingMode(0);\n            urlConnection.setRequestMethod(method);\n            urlConnection.connect();\n\n            StringBuilder sb = new StringBuilder();\n\n            if(!(method.equals(\"GET\"))) {\n                OutputStream out = new BufferedOutputStream(urlConnection.getOutputStream());\n                BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(out, \"UTF-8\"));\n                writer.write(getPostDataString(postData));\n                writer.flush();\n                writer.close();\n                out.close();\n            }\n\n            urlConnection.connect();\n            responseCode = urlConnection.getResponseCode();\n            if (responseCode == HttpURLConnection.HTTP_OK) {\n                InputStream in = new BufferedInputStream(urlConnection.getInputStream());\n                BufferedReader reader = new BufferedReader(new InputStreamReader(in, \"UTF-8\"));\n                String line;\n\n                while ((line = reader.readLine()) != null) {\n                    sb.append(line);\n                }\n            }\n\n            return new APIResponseObject(responseCode, sb.toString());\n        }\n        catch(Exception ex){\n            ex.printStackTrace();\n        }\n        return null;\n    }\n\n    @Override\n    protected void onPostExecute(APIResponseObject result) {\n        delegate.onComplete(result);\n        super.onPostExecute(result);\n    }\n\n    private String getPostDataString(List\u003cPair\u003cString, String\u003e\u003e params) throws UnsupportedEncodingException {\n        StringBuilder result = new StringBuilder();\n        boolean first = true;\n        for(Pair\u003cString,String\u003e pair : params){\n            if (first)\n                first = false;\n            else\n                result.append(\"\u0026\");\n\n            result.append(URLEncoder.encode(pair.first,\"UTF-8\"));\n            result.append(\"=\");\n            result.append(URLEncoder.encode(pair.second, \"UTF-8\"));\n        }\n        return result.toString();\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class APIResponseObject{\n    int responseCode;\n    String response;\n\n    APIResponseObject(int responseCode,String response)\n    {\n         this.responseCode = responseCode;\n         this.response = response;\n    }\n}\n\npublic class APIAccessTask extends AsyncTask\u003cString,Void,APIResponseObject\u003e {\n    URL requestUrl;\n    Context context;\n    HttpURLConnection urlConnection;\n    List\u003cPair\u003cString,String\u003e\u003e postData, headerData;\n    String method;\n    int responseCode = HttpURLConnection.HTTP_OK;\n\n    interface OnCompleteListener{\n        void onComplete(APIResponseObject result);\n    }\n\n    public OnCompleteListener delegate = null;\n\n    APIAccessTask(Context context, String requestUrl, String method, OnCompleteListener delegate){\n        this.context = context;\n        this.delegate = delegate;\n        this.method = method;\n        try {\n            this.requestUrl = new URL(requestUrl);\n        }\n        catch(Exception ex){\n            ex.printStackTrace();\n        }\n    }\n\n    APIAccessTask(Context context, String requestUrl, String method, List\u003cPair\u003cString,String\u003e\u003e postData, OnCompleteListener delegate){\n        this(context, requestUrl, method, delegate);\n        this.postData = postData;\n    }\n\n    APIAccessTask(Context context, String requestUrl, String method, List\u003cPair\u003cString,String\u003e\u003e postData,\n            List\u003cPair\u003cString,String\u003e\u003e headerData, OnCompleteListener delegate ){\n        this(context, requestUrl,method,postData,delegate);\n        this.headerData = headerData;\n    }\n\n    @Override\n    protected void onPreExecute() {\n        super.onPreExecute();\n    }\n\n    @Override\n    protected APIResponseObject doInBackground(String... params) {\n        Log.d(\"debug\", \"url = \"+ requestUrl);\n        try {\n            urlConnection = (HttpURLConnection) requestUrl.openConnection();\n\n            if(headerData != null) {\n                for (Pair pair : headerData) {\n                    urlConnection.setRequestProperty(pair.first.toString(),pair.second.toString());\n                }\n            }\n\n            urlConnection.setDoInput(true);\n            urlConnection.setChunkedStreamingMode(0);\n            urlConnection.setRequestMethod(method);\n            urlConnection.connect();\n\n            StringBuilder sb = new StringBuilder();\n\n            if(!(method.equals(\"GET\"))) {\n                OutputStream out = new BufferedOutputStream(urlConnection.getOutputStream());\n                BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(out, \"UTF-8\"));\n                writer.write(getPostDataString(postData));\n                writer.flush();\n                writer.close();\n                out.close();\n            }\n\n            urlConnection.connect();\n            responseCode = urlConnection.getResponseCode();\n            if (responseCode == HttpURLConnection.HTTP_OK) {\n                InputStream in = new BufferedInputStream(urlConnection.getInputStream());\n                BufferedReader reader = new BufferedReader(new InputStreamReader(in, \"UTF-8\"));\n                String line;\n\n                while ((line = reader.readLine()) != null) {\n                    sb.append(line);\n                }\n            }\n\n            return new APIResponseObject(responseCode, sb.toString());\n        }\n        catch(Exception ex){\n            ex.printStackTrace();\n        }\n        return null;\n    }\n\n    @Override\n    protected void onPostExecute(APIResponseObject result) {\n        delegate.onComplete(result);\n        super.onPostExecute(result);\n    }\n\n    private String getPostDataString(List\u003cPair\u003cString, String\u003e\u003e params) throws UnsupportedEncodingException {\n        StringBuilder result = new StringBuilder();\n        boolean first = true;\n        for(Pair\u003cString,String\u003e pair : params){\n            if (first)\n                first = false;\n            else\n                result.append(\"\u0026\");\n\n            result.append(URLEncoder.encode(pair.first,\"UTF-8\"));\n            result.append(\"=\");\n            result.append(URLEncoder.encode(pair.second, \"UTF-8\"));\n        }\n        return result.toString();\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550444935153,
        "id": "aa28ff84-32f9-44c1-ae92-022e53b16ba0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550444935153,
        "parent_id": "6baae65d-6952-4332-8ae6-ecf058d26f84",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Usage"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Usage"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550444935153,
        "id": "9df660e4-147d-422f-a2ad-2398b274e711",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550444935153,
        "parent_id": "6baae65d-6952-4332-8ae6-ecf058d26f84",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Use any of the given constructors of the class depending on whether you need to send "
            ],
            [
              "POST",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " data or any extra headers."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Use any of the given constructors of the class depending on whether you need to send "
          },
          {
            "Text": "POST",
            "AttrFlags": 2
          },
          {
            "Text": " data or any extra headers."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550444935153,
        "id": "f661644b-46f3-4287-9d08-0f93e67ef8d9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550444935153,
        "parent_id": "6baae65d-6952-4332-8ae6-ecf058d26f84",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "onComplete()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method will be called when the data fetching is complete. The data is returned as an object of the "
            ],
            [
              "APIResponseObject",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " class, which has a status code stating the HTTP status code of the request and a string containing the response. You can parse this response in your class, i.e. XML or JSON."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "onComplete()",
            "AttrFlags": 2
          },
          {
            "Text": " method will be called when the data fetching is complete. The data is returned as an object of the "
          },
          {
            "Text": "APIResponseObject",
            "AttrFlags": 2
          },
          {
            "Text": " class, which has a status code stating the HTTP status code of the request and a string containing the response. You can parse this response in your class, i.e. XML or JSON."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550444935153,
        "id": "60c5592d-c838-4536-b9a9-66f6e58ad897",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550444935153,
        "parent_id": "6baae65d-6952-4332-8ae6-ecf058d26f84",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Call "
            ],
            [
              "execute()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " on the object of the class to execute the request, as shown in the following example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Call "
          },
          {
            "Text": "execute()",
            "AttrFlags": 2
          },
          {
            "Text": " on the object of the class to execute the request, as shown in the following example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550444935153,
        "id": "cb29e435-659c-490f-898e-eab10854f85e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550444935153,
        "parent_id": "6baae65d-6952-4332-8ae6-ecf058d26f84",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class MainClass {\nString url = \"https://example.com./api/v1/ex\";\nString method = \"POST\";    \nList\u003cPair\u003cString,String\u003e\u003e postData = new ArrayList\u003c\u003e();\n\npostData.add(new Pair\u003c\u003e(\"email\",\"whatever\");\npostData.add(new Pair\u003c\u003e(\"password\", \"whatever\");\n\nnew APIAccessTask(MainActivity.this, url, method, postData,\n     new APIAccessTask.OnCompleteListener() {\n @Override\n public void onComplete(APIResponseObject result) {\n     if (result.responseCode == HttpURLConnection.HTTP_OK) {\n         String str = result.response;\n         // Do your XML/JSON parsing here\n     }\n }\n}).execute();\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class MainClass {\nString url = \"https://example.com./api/v1/ex\";\nString method = \"POST\";    \nList\u003cPair\u003cString,String\u003e\u003e postData = new ArrayList\u003c\u003e();\n\npostData.add(new Pair\u003c\u003e(\"email\",\"whatever\");\npostData.add(new Pair\u003c\u003e(\"password\", \"whatever\");\n\nnew APIAccessTask(MainActivity.this, url, method, postData,\n     new APIAccessTask.OnCompleteListener() {\n @Override\n public void onComplete(APIResponseObject result) {\n     if (result.responseCode == HttpURLConnection.HTTP_OK) {\n         String str = result.response;\n         // Do your XML/JSON parsing here\n     }\n }\n}).execute();\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "070 A multi-purpose HttpURLConnection class to handle all types of HTTP requests"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}