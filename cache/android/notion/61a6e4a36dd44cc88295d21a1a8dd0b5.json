{
  "ID": "61a6e4a3-6dd4-4cc8-8295-d21a1a8dd0b5",
  "Root": {
    "alive": true,
    "content": [
      "a0af6171-e291-461d-97b3-3f3d02f57f37",
      "610eddb1-d6d4-4269-918c-96ea37e33b1d",
      "9aeea18a-cd70-4d79-a42d-d8b8658a2fd6",
      "9d975430-2c76-423b-8c46-b0d3132bc7ff",
      "7d8de8e7-89b7-4e4a-9ea0-c68b49287829"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550448330926,
    "id": "61a6e4a3-6dd4-4cc8-8295-d21a1a8dd0b5",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550448330926,
    "parent_id": "b608fb79-1b53-486d-8fde-90d4b61fc2f1",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "030 Sensor transformation to world coordinate system"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550448330923,
        "id": "a0af6171-e291-461d-97b3-3f3d02f57f37",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550448330923,
        "parent_id": "61a6e4a3-6dd4-4cc8-8295-d21a1a8dd0b5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The sensor values returned by Android are with respective to the phone’s coordinate system (e.g. +Y points towards the top of the phone). We can transform these sensor values into a world coordinate system (e.g. +Y points towards magnetic North, tangential to the ground) using the sensor managers rotation matrix"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The sensor values returned by Android are with respective to the phone’s coordinate system (e.g. +Y points towards the top of the phone). We can transform these sensor values into a world coordinate system (e.g. +Y points towards magnetic North, tangential to the ground) using the sensor managers rotation matrix"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550448330926,
        "id": "610eddb1-d6d4-4269-918c-96ea37e33b1d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550448330926,
        "parent_id": "61a6e4a3-6dd4-4cc8-8295-d21a1a8dd0b5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "First, you would need to declare and initialize the matrices/arrays where data will be stored (you can do this in the "
            ],
            [
              "onCreate",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method, for example):"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "First, you would need to declare and initialize the matrices/arrays where data will be stored (you can do this in the "
          },
          {
            "Text": "onCreate",
            "AttrFlags": 2
          },
          {
            "Text": " method, for example):"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550448330926,
        "id": "9aeea18a-cd70-4d79-a42d-d8b8658a2fd6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550448330926,
        "parent_id": "61a6e4a3-6dd4-4cc8-8295-d21a1a8dd0b5",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "float[] accelerometerData = new float[3];\nfloat[] accelerometerWorldData = new float[3];\nfloat[] gravityData = new float[3];\nfloat[] magneticData = new float[3];\nfloat[] rotationMatrix = new float[9];"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "float[] accelerometerData = new float[3];\nfloat[] accelerometerWorldData = new float[3];\nfloat[] gravityData = new float[3];\nfloat[] magneticData = new float[3];\nfloat[] rotationMatrix = new float[9];",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550448330926,
        "id": "9d975430-2c76-423b-8c46-b0d3132bc7ff",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550448330926,
        "parent_id": "61a6e4a3-6dd4-4cc8-8295-d21a1a8dd0b5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Next, we need to detect changes in sensor values, store them into the corresponding arrays (if we want to use them later/elsewhere), then calculate the rotation matrix and resulting transformation into world coordinates:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Next, we need to detect changes in sensor values, store them into the corresponding arrays (if we want to use them later/elsewhere), then calculate the rotation matrix and resulting transformation into world coordinates:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550448330926,
        "id": "7d8de8e7-89b7-4e4a-9ea0-c68b49287829",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550448330926,
        "parent_id": "61a6e4a3-6dd4-4cc8-8295-d21a1a8dd0b5",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public void onSensorChanged(SensorEvent event) {\n    sensor = event.sensor;\n    int i = sensor.getType();\n\n    if (i == Sensor.TYPE_ACCELEROMETER) {\n        accelerometerData = event.values;\n    } else if (i == Sensor.TYPE_GRAVITY) {\n        gravityData = event.values;\n    } else if (i == Sensor.TYPE_MAGNETIC) {\n        magneticData = event.values;\n    }\n\n    //Calculate rotation matrix from gravity and magnetic sensor data\n    SensorManager.getRotationMatrix(rotationMatrix, null, gravityData, magneticData);\n\n    //World coordinate system transformation for acceleration\n    accelerometerWorldData[0] = rotationMatrix[0] * accelerometerData[0] + rotationMatrix[1] * accelerometerData[1] + rotationMatrix[2] * accelerometerData[2];\n    accelerometerWorldData[1] = rotationMatrix[3] * accelerometerData[0] + rotationMatrix[4] * accelerometerData[1] + rotationMatrix[5] * accelerometerData[2];\n    accelerometerWorldData[2] = rotationMatrix[6] * accelerometerData[0] + rotationMatrix[7] * accelerometerData[1] + rotationMatrix[8] * accelerometerData[2];\n\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public void onSensorChanged(SensorEvent event) {\n    sensor = event.sensor;\n    int i = sensor.getType();\n\n    if (i == Sensor.TYPE_ACCELEROMETER) {\n        accelerometerData = event.values;\n    } else if (i == Sensor.TYPE_GRAVITY) {\n        gravityData = event.values;\n    } else if (i == Sensor.TYPE_MAGNETIC) {\n        magneticData = event.values;\n    }\n\n    //Calculate rotation matrix from gravity and magnetic sensor data\n    SensorManager.getRotationMatrix(rotationMatrix, null, gravityData, magneticData);\n\n    //World coordinate system transformation for acceleration\n    accelerometerWorldData[0] = rotationMatrix[0] * accelerometerData[0] + rotationMatrix[1] * accelerometerData[1] + rotationMatrix[2] * accelerometerData[2];\n    accelerometerWorldData[1] = rotationMatrix[3] * accelerometerData[0] + rotationMatrix[4] * accelerometerData[1] + rotationMatrix[5] * accelerometerData[2];\n    accelerometerWorldData[2] = rotationMatrix[6] * accelerometerData[0] + rotationMatrix[7] * accelerometerData[1] + rotationMatrix[8] * accelerometerData[2];\n\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "030 Sensor transformation to world coordinate system"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}