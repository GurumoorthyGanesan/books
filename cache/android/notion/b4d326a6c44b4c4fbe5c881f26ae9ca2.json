{
  "ID": "b4d326a6-c44b-4c4f-be5c-881f26ae9ca2",
  "Root": {
    "alive": true,
    "content": [
      "43beebab-ce24-4b65-9a72-2df08a5ac9e4",
      "f333f63a-b529-413e-b687-8dc7f8038650",
      "4244573f-99cb-45bf-8878-555d839e8f87",
      "da4db34d-a01b-4de9-9ead-0ca4302f81e5",
      "a5b54fa7-a9a3-4021-9dd8-5361857a7c36",
      "af21f05d-cbd8-4e28-90d4-d0096e8e5484",
      "9f94619c-11d6-4c58-8df3-cf4790eca905",
      "1f32e4d1-2e6c-45f2-a388-c79e0125c9c8",
      "b56594fe-1da9-43d0-85f2-3a4d703009e8",
      "a151bf3a-ec2c-4b12-9c2a-9f7e7290112e",
      "6a275f4c-f3c9-44f3-8670-f5ba6c57ddb7",
      "257baf9c-4845-42de-8a02-e10472c9df6b",
      "5114d9b9-6409-47bf-9e13-72ba4d013b8a",
      "4e3d21f6-c55d-403e-aa2d-92a965f3e09a"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550451643989,
    "id": "b4d326a6-c44b-4c4f-be5c-881f26ae9ca2",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550451643989,
    "parent_id": "3d365296-5561-464b-9301-04d4f320fea9",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "040 Denormalization Flat Database Structure"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550451643985,
        "id": "43beebab-ce24-4b65-9a72-2df08a5ac9e4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550451643985,
        "parent_id": "b4d326a6-c44b-4c4f-be5c-881f26ae9ca2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Denormalization and a flat database structure is neccessary to efficiently download separate calls. With the following structure, it is also possible to maintain two-way relationships. The disadvantage of this approach is, that you always need to update the data in multiple places."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Denormalization and a flat database structure is neccessary to efficiently download separate calls. With the following structure, it is also possible to maintain two-way relationships. The disadvantage of this approach is, that you always need to update the data in multiple places."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550451643987,
        "id": "f333f63a-b529-413e-b687-8dc7f8038650",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550451643987,
        "parent_id": "b4d326a6-c44b-4c4f-be5c-881f26ae9ca2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For an example, imagine an app which allows the user to store messages to himself (memos)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For an example, imagine an app which allows the user to store messages to himself (memos)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550451643988,
        "id": "4244573f-99cb-45bf-8878-555d839e8f87",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550451643988,
        "parent_id": "b4d326a6-c44b-4c4f-be5c-881f26ae9ca2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Desired flat database structure:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Desired flat database structure:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550451643988,
        "id": "da4db34d-a01b-4de9-9ead-0ca4302f81e5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550451643988,
        "parent_id": "b4d326a6-c44b-4c4f-be5c-881f26ae9ca2",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "|--database\n  |-- memos\n     |-- memokey1\n       |-- title: \"Title\"\n       |-- content: \"Message\"\n     |-- memokey2\n       |-- title: \"Important Title\"\n       |-- content: \"Important Message\"\n  |-- users\n     |-- userKey1\n       |-- name: \"John Doe\"\n       |-- memos\n         |-- memokey1 : true //The values here don't matter, we only need the keys.\n         |-- memokey2 : true\n     |-- userKey2\n       |-- name: \"Max Doe\""
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "|--database\n  |-- memos\n     |-- memokey1\n       |-- title: \"Title\"\n       |-- content: \"Message\"\n     |-- memokey2\n       |-- title: \"Important Title\"\n       |-- content: \"Important Message\"\n  |-- users\n     |-- userKey1\n       |-- name: \"John Doe\"\n       |-- memos\n         |-- memokey1 : true //The values here don't matter, we only need the keys.\n         |-- memokey2 : true\n     |-- userKey2\n       |-- name: \"Max Doe\"",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550451643988,
        "id": "a5b54fa7-a9a3-4021-9dd8-5361857a7c36",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550451643988,
        "parent_id": "b4d326a6-c44b-4c4f-be5c-881f26ae9ca2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The used memo class",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The used memo class",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550451643988,
        "id": "af21f05d-cbd8-4e28-90d4-d0096e8e5484",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550451643988,
        "parent_id": "b4d326a6-c44b-4c4f-be5c-881f26ae9ca2",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class Memo {\n    private String title, content;\n    //getters and setters ... \n\n    //toMap() is necessary for the push process\n    private Map\u003cString, Object\u003e toMap() {\n        HashMap\u003cString, Object\u003e result = new HashMap\u003c\u003e();\n        result.put(\"title\", title);\n        result.put(\"content\", content);\n        return result;\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class Memo {\n    private String title, content;\n    //getters and setters ... \n\n    //toMap() is necessary for the push process\n    private Map\u003cString, Object\u003e toMap() {\n        HashMap\u003cString, Object\u003e result = new HashMap\u003c\u003e();\n        result.put(\"title\", title);\n        result.put(\"content\", content);\n        return result;\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550451643988,
        "id": "9f94619c-11d6-4c58-8df3-cf4790eca905",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550451643988,
        "parent_id": "b4d326a6-c44b-4c4f-be5c-881f26ae9ca2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Retrieving the memos of a user",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Retrieving the memos of a user",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550451643988,
        "id": "1f32e4d1-2e6c-45f2-a388-c79e0125c9c8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550451643988,
        "parent_id": "b4d326a6-c44b-4c4f-be5c-881f26ae9ca2",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "//We need to store the keys and the memos seperately\nprivate ArrayList\u003cString\u003e mKeys = new ArrayList\u003c\u003e();\nprivate ArrayList\u003cMemo\u003e mMemos = new ArrayList\u003c\u003e();\n\n//The user needs to be logged in to retrieve the uid\nString currentUserId = FirebaseAuth.getInstance().getCurrentUser().getUid();\n\n//This is the reference to the list of memos a user has \nDatabaseReference currentUserMemoReference = FirebaseDatabase.getInstance().getReference()\n    .child(\"users\").child(currentUserId).child(\"memos\");\n\n//This is a reference to the list of all memos\nDatabaseReference memoReference = FirebaseDatabase.getInstance().getReference()\n    .child(\"memos\");\n\n//We start to listen to the users memos, \n//this will also retrieve the memos initially\ncurrentUserMemoReference.addChildEventListener(new ChildEventListener() {\n        @Override\n        public void onChildAdded(DataSnapshot dataSnapshot, String s) {\n            //Here we retrieve the key of the memo the user has.\n            String key = dataSnapshot.getKey(); //for example memokey1\n            //For later manipulations of the lists, we need to store the key in a list\n            mKeys.add(key);\n            //Now that we know which message belongs to the user, \n            //we request it from our memos:\n            memoReference.child(key).addValueEventListener(new ValueEventListener() {\n                @Override\n                    public void onDataChange(DataSnapshot dataSnapshot) {\n                         //Here we retrieve our memo:\n                         Memo memo = dataSnapshot.getValue(Memo.class);\n                         mMemos.add(memo);\n                    }\n\n                @Override\n                public void onCancelled(DatabaseError databaseError) { }\n            });                           \n        }\n\n        @Override\n        public void onChildChanged(DataSnapshot dataSnapshot, String s) { }\n\n        @Override\n        public void onChildRemoved(DataSnapshot dataSnapshot) { }\n\n        @Override\n        public void onChildMoved(DataSnapshot dataSnapshot, String s) { }\n\n        @Override\n        public void onCancelled(DatabaseError databaseError) { }\n    }"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "//We need to store the keys and the memos seperately\nprivate ArrayList\u003cString\u003e mKeys = new ArrayList\u003c\u003e();\nprivate ArrayList\u003cMemo\u003e mMemos = new ArrayList\u003c\u003e();\n\n//The user needs to be logged in to retrieve the uid\nString currentUserId = FirebaseAuth.getInstance().getCurrentUser().getUid();\n\n//This is the reference to the list of memos a user has \nDatabaseReference currentUserMemoReference = FirebaseDatabase.getInstance().getReference()\n    .child(\"users\").child(currentUserId).child(\"memos\");\n\n//This is a reference to the list of all memos\nDatabaseReference memoReference = FirebaseDatabase.getInstance().getReference()\n    .child(\"memos\");\n\n//We start to listen to the users memos, \n//this will also retrieve the memos initially\ncurrentUserMemoReference.addChildEventListener(new ChildEventListener() {\n        @Override\n        public void onChildAdded(DataSnapshot dataSnapshot, String s) {\n            //Here we retrieve the key of the memo the user has.\n            String key = dataSnapshot.getKey(); //for example memokey1\n            //For later manipulations of the lists, we need to store the key in a list\n            mKeys.add(key);\n            //Now that we know which message belongs to the user, \n            //we request it from our memos:\n            memoReference.child(key).addValueEventListener(new ValueEventListener() {\n                @Override\n                    public void onDataChange(DataSnapshot dataSnapshot) {\n                         //Here we retrieve our memo:\n                         Memo memo = dataSnapshot.getValue(Memo.class);\n                         mMemos.add(memo);\n                    }\n\n                @Override\n                public void onCancelled(DatabaseError databaseError) { }\n            });                           \n        }\n\n        @Override\n        public void onChildChanged(DataSnapshot dataSnapshot, String s) { }\n\n        @Override\n        public void onChildRemoved(DataSnapshot dataSnapshot) { }\n\n        @Override\n        public void onChildMoved(DataSnapshot dataSnapshot, String s) { }\n\n        @Override\n        public void onCancelled(DatabaseError databaseError) { }\n    }",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550451643988,
        "id": "b56594fe-1da9-43d0-85f2-3a4d703009e8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550451643988,
        "parent_id": "b4d326a6-c44b-4c4f-be5c-881f26ae9ca2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Creating a memo",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Creating a memo",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550451643988,
        "id": "a151bf3a-ec2c-4b12-9c2a-9f7e7290112e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550451643988,
        "parent_id": "b4d326a6-c44b-4c4f-be5c-881f26ae9ca2",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "//The user needs to be logged in to retrieve the uid\nString currentUserUid = FirebaseAuth.getInstance().getCurrentUser().getUid();\n\n//This is the path to the list of memos a user has \nString userMemoPath = \"users/\" + currentUserUid + \"/memos/\";\n\n//This is the path to the list of all memos\nString memoPath = \"memos/\";\n\n//We need to retrieve an unused key from the memos reference\nDatabaseReference memoReference = FirebaseDatabase.getInstance().getReference().child(\"memos\");\nString key = memoReference.push().getKey();\nMemo newMemo = new Memo(\"Important numbers\", \"1337, 42, 3.14159265359\");\n\nMap\u003cString, Object\u003e childUpdates = new HashMap\u003c\u003e(); \n//The second parameter **here** (the value) does not matter, it's just that the key exists\nchildUpdates.put(userMemoPath + key, true);\nchildUpdates.put(memoPath + key, newMemo.toMap());"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "//The user needs to be logged in to retrieve the uid\nString currentUserUid = FirebaseAuth.getInstance().getCurrentUser().getUid();\n\n//This is the path to the list of memos a user has \nString userMemoPath = \"users/\" + currentUserUid + \"/memos/\";\n\n//This is the path to the list of all memos\nString memoPath = \"memos/\";\n\n//We need to retrieve an unused key from the memos reference\nDatabaseReference memoReference = FirebaseDatabase.getInstance().getReference().child(\"memos\");\nString key = memoReference.push().getKey();\nMemo newMemo = new Memo(\"Important numbers\", \"1337, 42, 3.14159265359\");\n\nMap\u003cString, Object\u003e childUpdates = new HashMap\u003c\u003e(); \n//The second parameter **here** (the value) does not matter, it's just that the key exists\nchildUpdates.put(userMemoPath + key, true);\nchildUpdates.put(memoPath + key, newMemo.toMap());",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550451643989,
        "id": "6a275f4c-f3c9-44f3-8670-f5ba6c57ddb7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550451643989,
        "parent_id": "b4d326a6-c44b-4c4f-be5c-881f26ae9ca2",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "FirebaseDatabase.getInstance().getReference().updateChildren(childUpdates);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "FirebaseDatabase.getInstance().getReference().updateChildren(childUpdates);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550451643989,
        "id": "257baf9c-4845-42de-8a02-e10472c9df6b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550451643989,
        "parent_id": "b4d326a6-c44b-4c4f-be5c-881f26ae9ca2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "After the push, or database looks like this:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "After the push, or database looks like this:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550451643989,
        "id": "5114d9b9-6409-47bf-9e13-72ba4d013b8a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550451643989,
        "parent_id": "b4d326a6-c44b-4c4f-be5c-881f26ae9ca2",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "|--database\n  |-- memos\n     |-- memokey1\n       |-- title: \"Title\"\n       |-- content: \"Message\"\n     |-- memokey2\n       |-- title: \"Important Title\"\n       |-- content: \"Important Message\"\n     |-- generatedMemokey3 \n       |-- title: \"Important numbers\"\n       |-- content: \"1337, 42, 3.14159265359\"\n  |-- users\n     |-- userKey1\n       |-- name: \"John Doe\"\n       |-- memos\n         |-- memokey1 : true //The values here don't matter, we only need the keys.\n         |-- memokey2 : true\n         |-- generatedMemokey3 : true\n     |-- userKey2\n       |-- name: \"Max Doe\""
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "|--database\n  |-- memos\n     |-- memokey1\n       |-- title: \"Title\"\n       |-- content: \"Message\"\n     |-- memokey2\n       |-- title: \"Important Title\"\n       |-- content: \"Important Message\"\n     |-- generatedMemokey3 \n       |-- title: \"Important numbers\"\n       |-- content: \"1337, 42, 3.14159265359\"\n  |-- users\n     |-- userKey1\n       |-- name: \"John Doe\"\n       |-- memos\n         |-- memokey1 : true //The values here don't matter, we only need the keys.\n         |-- memokey2 : true\n         |-- generatedMemokey3 : true\n     |-- userKey2\n       |-- name: \"Max Doe\"",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550451643989,
        "id": "4e3d21f6-c55d-403e-aa2d-92a965f3e09a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550451643989,
        "parent_id": "b4d326a6-c44b-4c4f-be5c-881f26ae9ca2",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code_language": "Plain Text"
      }
    ],
    "title": "040 Denormalization Flat Database Structure"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}