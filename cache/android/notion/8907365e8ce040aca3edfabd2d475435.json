{
  "ID": "8907365e-8ce0-40ac-a3ed-fabd2d475435",
  "Root": {
    "alive": true,
    "content": [
      "51c22173-45e6-4783-8363-9c3f681482ec",
      "31fd726e-ea58-4352-8e1e-21856e5fadfb"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550456160269,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "8907365e-8ce0-40ac-a3ed-fabd2d475435",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550456160269,
    "parent_id": "ac2e3135-2507-45a0-9eb5-eb87267b5aa3",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "PNG decoder"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550456160266,
        "id": "51c22173-45e6-4783-8363-9c3f681482ec",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550456160266,
        "parent_id": "8907365e-8ce0-40ac-a3ed-fabd2d475435",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Decoding the chunks of a PNG file demonstrates Okio in practice."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Decoding the chunks of a PNG file demonstrates Okio in practice."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550456160268,
        "id": "31fd726e-ea58-4352-8e1e-21856e5fadfb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550456160268,
        "parent_id": "8907365e-8ce0-40ac-a3ed-fabd2d475435",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "private static final ByteString PNG_HEADER = ByteString.decodeHex(\"89504e470d0a1a0a\");\n\npublic void decodePng(InputStream in) throws IOException {\n  try (BufferedSource pngSource = Okio.buffer(Okio.source(in))) {\n    ByteString header = pngSource.readByteString(PNG_HEADER.size());\n    if (!header.equals(PNG_HEADER)) {\n      throw new IOException(\"Not a PNG.\");\n    }\n\n    while (true) {\n      Buffer chunk = new Buffer();\n\n      // Each chunk is a length, type, data, and CRC offset.\n      int length = pngSource.readInt();\n      String type = pngSource.readUtf8(4);\n      pngSource.readFully(chunk, length);\n      int crc = pngSource.readInt();\n\n      decodeChunk(type, chunk);\n      if (type.equals(\"IEND\")) break;\n    }\n  }\n}\n\nprivate void decodeChunk(String type, Buffer chunk) {\n  if (type.equals(\"IHDR\")) {\n    int width = chunk.readInt();\n    int height = chunk.readInt();\n    System.out.printf(\"%08x: %s %d x %d%n\", chunk.size(), type, width, height);\n  } else {\n    System.out.printf(\"%08x: %s%n\", chunk.size(), type);\n  }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "private static final ByteString PNG_HEADER = ByteString.decodeHex(\"89504e470d0a1a0a\");\n\npublic void decodePng(InputStream in) throws IOException {\n  try (BufferedSource pngSource = Okio.buffer(Okio.source(in))) {\n    ByteString header = pngSource.readByteString(PNG_HEADER.size());\n    if (!header.equals(PNG_HEADER)) {\n      throw new IOException(\"Not a PNG.\");\n    }\n\n    while (true) {\n      Buffer chunk = new Buffer();\n\n      // Each chunk is a length, type, data, and CRC offset.\n      int length = pngSource.readInt();\n      String type = pngSource.readUtf8(4);\n      pngSource.readFully(chunk, length);\n      int crc = pngSource.readInt();\n\n      decodeChunk(type, chunk);\n      if (type.equals(\"IEND\")) break;\n    }\n  }\n}\n\nprivate void decodeChunk(String type, Buffer chunk) {\n  if (type.equals(\"IHDR\")) {\n    int width = chunk.readInt();\n    int height = chunk.readInt();\n    System.out.printf(\"%08x: %s %d x %d%n\", chunk.size(), type, width, height);\n  } else {\n    System.out.printf(\"%08x: %s%n\", chunk.size(), type);\n  }\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "PNG decoder",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}