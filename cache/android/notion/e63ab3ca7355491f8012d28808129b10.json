{
  "ID": "e63ab3ca-7355-491f-8012-d28808129b10",
  "Root": {
    "alive": true,
    "content": [
      "46902052-949b-4ff2-9a1f-db89387c1176",
      "cc284b00-16c5-4770-864d-72992d51eb1a",
      "b1750bb4-1b46-4d3c-956b-8834d1f765d0",
      "330dc5a4-e696-4405-a7d6-8d69a9c88889"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550448474879,
    "id": "e63ab3ca-7355-491f-8012-d28808129b10",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550448474879,
    "parent_id": "32904bc0-ceb7-4a01-b5ef-8a0bf7941852",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "020 TextToSpeech implementation across the APIs"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550448474876,
        "id": "46902052-949b-4ff2-9a1f-db89387c1176",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550448474876,
        "parent_id": "e63ab3ca-7355-491f-8012-d28808129b10",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Cold observable implementation, emits true when TTS engine finishes speaking, starts speaking when subscribed. Notice that API level 21 introduces different way to perform speaking:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Cold observable implementation, emits true when TTS engine finishes speaking, starts speaking when subscribed. Notice that API level 21 introduces different way to perform speaking:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550448474879,
        "id": "cc284b00-16c5-4770-864d-72992d51eb1a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550448474879,
        "parent_id": "e63ab3ca-7355-491f-8012-d28808129b10",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class RxTextToSpeech {\n\n@Nullable RxTTSObservableOnSubscribe audio;\n\nWeakReference\u003cContext\u003e contextRef;\n\npublic RxTextToSpeech(Context context) {\n    this.contextRef = new WeakReference\u003c\u003e(context);\n}\n\npublic void requestTTS(FragmentActivity activity, int requestCode) {\n    Intent checkTTSIntent = new Intent();\n    checkTTSIntent.setAction(TextToSpeech.Engine.ACTION_CHECK_TTS_DATA);\n    activity.startActivityForResult(checkTTSIntent, requestCode);\n}\n\npublic void cancelCurrent() {\n    if (audio != null) {\n        audio.dispose();\n        audio = null;\n    }\n}\n\npublic Observable\u003cBoolean\u003e speak(String textToRead) {\n    audio = new RxTTSObservableOnSubscribe(contextRef.get(), textToRead, Locale.GERMANY);\n    return Observable.create(audio);\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class RxTextToSpeech {\n\n@Nullable RxTTSObservableOnSubscribe audio;\n\nWeakReference\u003cContext\u003e contextRef;\n\npublic RxTextToSpeech(Context context) {\n    this.contextRef = new WeakReference\u003c\u003e(context);\n}\n\npublic void requestTTS(FragmentActivity activity, int requestCode) {\n    Intent checkTTSIntent = new Intent();\n    checkTTSIntent.setAction(TextToSpeech.Engine.ACTION_CHECK_TTS_DATA);\n    activity.startActivityForResult(checkTTSIntent, requestCode);\n}\n\npublic void cancelCurrent() {\n    if (audio != null) {\n        audio.dispose();\n        audio = null;\n    }\n}\n\npublic Observable\u003cBoolean\u003e speak(String textToRead) {\n    audio = new RxTTSObservableOnSubscribe(contextRef.get(), textToRead, Locale.GERMANY);\n    return Observable.create(audio);\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550448474879,
        "id": "b1750bb4-1b46-4d3c-956b-8834d1f765d0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550448474879,
        "parent_id": "e63ab3ca-7355-491f-8012-d28808129b10",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public static class RxTTSObservableOnSubscribe extends UtteranceProgressListener\n        implements ObservableOnSubscribe\u003cBoolean\u003e,\n        Disposable, Cancellable, TextToSpeech.OnInitListener {\n\n    volatile boolean disposed;\n    ObservableEmitter\u003cBoolean\u003e emitter;\n    TextToSpeech textToSpeech;\n    String text = \"\";\n    Locale selectedLocale;\n    Context context;\n\n    public RxTTSObservableOnSubscribe(Context context, String text, Locale locale) {\n        this.selectedLocale = locale;\n        this.context = context;\n        this.text = text;\n    }\n\n    @Override public void subscribe(ObservableEmitter\u003cBoolean\u003e e) throws Exception {\n        this.emitter = e;\n        if (context == null) {\n            this.emitter.onError(new Throwable(\"nullable context, cannot execute \" + text));\n        } else {\n            this.textToSpeech = new TextToSpeech(context, this);\n        }\n    }\n\n    @Override @DebugLog public void dispose() {\n        if (textToSpeech != null) {\n            textToSpeech.setOnUtteranceProgressListener(null);\n            textToSpeech.stop();\n            textToSpeech.shutdown();\n            textToSpeech = null;\n        }\n        disposed = true;\n    }\n\n    @Override public boolean isDisposed() {\n        return disposed;\n    }\n\n    @Override public void cancel() throws Exception {\n        dispose();\n    }\n\n    @Override public void onInit(int status) {\n\n        int languageCode = textToSpeech.setLanguage(selectedLocale);\n\n        if (languageCode == android.speech.tts.TextToSpeech.LANG_COUNTRY_AVAILABLE) {\n            textToSpeech.setPitch(1);\n            textToSpeech.setSpeechRate(1.0f);\n            textToSpeech.setOnUtteranceProgressListener(this);\n            performSpeak();\n        } else {\n            emitter.onError(new Throwable(\"language \" + selectedLocale.getCountry() + \" is not supported\"));\n        }\n    }\n\n    @Override public void onStart(String utteranceId) {\n        //no-op\n    }\n\n    @Override public void onDone(String utteranceId) {\n        this.emitter.onNext(true);\n        this.emitter.onComplete();\n    }\n\n    @Override public void onError(String utteranceId) {\n        this.emitter.onError(new Throwable(\"error TTS \" + utteranceId));\n    }\n\n    void performSpeak() {\n\n        if (isAtLeastApiLevel(21)) {\n            speakWithNewApi();\n        } else {\n            speakWithOldApi();\n        }\n    }\n\n    @RequiresApi(api = 21) void speakWithNewApi() {\n        Bundle params = new Bundle();\n        params.putString(TextToSpeech.Engine.KEY_PARAM_UTTERANCE_ID, \"\");\n        textToSpeech.speak(text, TextToSpeech.QUEUE_ADD, params, uniqueId());\n    }\n\n    void speakWithOldApi() {\n        HashMap\u003cString, String\u003e map = new HashMap\u003c\u003e();\n        map.put(TextToSpeech.Engine.KEY_PARAM_UTTERANCE_ID, uniqueId());\n        textToSpeech.speak(text, TextToSpeech.QUEUE_ADD, map);\n    }\n\n    private String uniqueId() {\n        return UUID.randomUUID().toString();\n    }\n}\n\npublic static boolean isAtLeastApiLevel(int apiLevel) {\n    return Build.VERSION.SDK_INT \u003e= apiLevel;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public static class RxTTSObservableOnSubscribe extends UtteranceProgressListener\n        implements ObservableOnSubscribe\u003cBoolean\u003e,\n        Disposable, Cancellable, TextToSpeech.OnInitListener {\n\n    volatile boolean disposed;\n    ObservableEmitter\u003cBoolean\u003e emitter;\n    TextToSpeech textToSpeech;\n    String text = \"\";\n    Locale selectedLocale;\n    Context context;\n\n    public RxTTSObservableOnSubscribe(Context context, String text, Locale locale) {\n        this.selectedLocale = locale;\n        this.context = context;\n        this.text = text;\n    }\n\n    @Override public void subscribe(ObservableEmitter\u003cBoolean\u003e e) throws Exception {\n        this.emitter = e;\n        if (context == null) {\n            this.emitter.onError(new Throwable(\"nullable context, cannot execute \" + text));\n        } else {\n            this.textToSpeech = new TextToSpeech(context, this);\n        }\n    }\n\n    @Override @DebugLog public void dispose() {\n        if (textToSpeech != null) {\n            textToSpeech.setOnUtteranceProgressListener(null);\n            textToSpeech.stop();\n            textToSpeech.shutdown();\n            textToSpeech = null;\n        }\n        disposed = true;\n    }\n\n    @Override public boolean isDisposed() {\n        return disposed;\n    }\n\n    @Override public void cancel() throws Exception {\n        dispose();\n    }\n\n    @Override public void onInit(int status) {\n\n        int languageCode = textToSpeech.setLanguage(selectedLocale);\n\n        if (languageCode == android.speech.tts.TextToSpeech.LANG_COUNTRY_AVAILABLE) {\n            textToSpeech.setPitch(1);\n            textToSpeech.setSpeechRate(1.0f);\n            textToSpeech.setOnUtteranceProgressListener(this);\n            performSpeak();\n        } else {\n            emitter.onError(new Throwable(\"language \" + selectedLocale.getCountry() + \" is not supported\"));\n        }\n    }\n\n    @Override public void onStart(String utteranceId) {\n        //no-op\n    }\n\n    @Override public void onDone(String utteranceId) {\n        this.emitter.onNext(true);\n        this.emitter.onComplete();\n    }\n\n    @Override public void onError(String utteranceId) {\n        this.emitter.onError(new Throwable(\"error TTS \" + utteranceId));\n    }\n\n    void performSpeak() {\n\n        if (isAtLeastApiLevel(21)) {\n            speakWithNewApi();\n        } else {\n            speakWithOldApi();\n        }\n    }\n\n    @RequiresApi(api = 21) void speakWithNewApi() {\n        Bundle params = new Bundle();\n        params.putString(TextToSpeech.Engine.KEY_PARAM_UTTERANCE_ID, \"\");\n        textToSpeech.speak(text, TextToSpeech.QUEUE_ADD, params, uniqueId());\n    }\n\n    void speakWithOldApi() {\n        HashMap\u003cString, String\u003e map = new HashMap\u003c\u003e();\n        map.put(TextToSpeech.Engine.KEY_PARAM_UTTERANCE_ID, uniqueId());\n        textToSpeech.speak(text, TextToSpeech.QUEUE_ADD, map);\n    }\n\n    private String uniqueId() {\n        return UUID.randomUUID().toString();\n    }\n}\n\npublic static boolean isAtLeastApiLevel(int apiLevel) {\n    return Build.VERSION.SDK_INT \u003e= apiLevel;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550448474879,
        "id": "330dc5a4-e696-4405-a7d6-8d69a9c88889",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550448474879,
        "parent_id": "e63ab3ca-7355-491f-8012-d28808129b10",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "}"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "}"
          }
        ]
      }
    ],
    "title": "020 TextToSpeech implementation across the APIs"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}