{
  "ID": "800e2be7-dded-48b1-a27c-330abe14d3d4",
  "Root": {
    "alive": true,
    "content": [
      "2d163d6f-a52e-43a7-881e-857e4bae435e",
      "082d067b-22ce-4ac5-8200-887162e7bead",
      "1a39e0b2-f118-4169-a63d-4b210e15aa4a",
      "bb970583-1ae4-4ece-b65f-55f758b0b8b1",
      "b0cef273-7b6a-4bcb-a408-78ec143385eb",
      "28096501-744f-4606-8d68-e94be320f165",
      "6085bbde-03bc-4eae-b4a6-85b28b38dfdf",
      "c7022a5f-ed81-47b5-878a-291381a435ce"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550444967836,
    "id": "800e2be7-dded-48b1-a27c-330abe14d3d4",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550444967836,
    "parent_id": "6190cb6e-dc43-458e-9fc6-34c0e0c69fa6",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "060 Create a Contract Helper and Provider for SQLite in Android"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550444967832,
        "id": "2d163d6f-a52e-43a7-881e-857e4bae435e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550444967832,
        "parent_id": "800e2be7-dded-48b1-a27c-330abe14d3d4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "DBContract.java",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "DBContract.java",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550444967835,
        "id": "082d067b-22ce-4ac5-8200-887162e7bead",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550444967835,
        "parent_id": "800e2be7-dded-48b1-a27c-330abe14d3d4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "//Define the tables and columns of your local database\npublic final class DBContract {\n/*Content Authority its a name for the content provider, is convenient to use the package app name to be unique on the device */\n            \n    public static final String CONTENT_AUTHORITY = \"com.yourdomain.yourapp\";\n            \n    //Use CONTENT_AUTHORITY to create all the database URI's that the app will use to link the content provider.\n    public static final Uri BASE_CONTENT_URI = Uri.parse(\"content://\" + CONTENT_AUTHORITY);\n        \n    /*the name of the uri that can be the same as the name of your table. \n    this will translate to content://com.yourdomain.yourapp/user/ as a valid URI\n    */\n    public static final String PATH_USER = \"User\";\n\n    // To prevent someone from accidentally instantiating the contract class,\n    // give it an empty constructor.\n    public DBContract () {}\n    \n    //Intern class that defines the user table\n    public static final class UserEntry implements BaseColumns {\n        public static final URI CONTENT_URI = BASE_CONTENT_URI.buildUpon().appendPath(PATH_USER).build();\n        \n        public static final String CONTENT_TYPE = ContentResolver.CURSOR_DIR_BASE_TYPE+\"/\"+CONTENT_AUTHORITY+\"/\"+PATH_USER;\n        \n        //Name of the table\n        public static final String TABLE_NAME=\"User\";\n        \n        //Columns of the user table\n        public static final String COLUMN_Name=\"Name\";\n        public static final String COLUMN_Password=\"Password\";\n        \n        public static Uri buildUri(long id){\n            return ContentUris.withAppendedId(CONTENT_URI,id);\n        }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "//Define the tables and columns of your local database\npublic final class DBContract {\n/*Content Authority its a name for the content provider, is convenient to use the package app name to be unique on the device */\n            \n    public static final String CONTENT_AUTHORITY = \"com.yourdomain.yourapp\";\n            \n    //Use CONTENT_AUTHORITY to create all the database URI's that the app will use to link the content provider.\n    public static final Uri BASE_CONTENT_URI = Uri.parse(\"content://\" + CONTENT_AUTHORITY);\n        \n    /*the name of the uri that can be the same as the name of your table. \n    this will translate to content://com.yourdomain.yourapp/user/ as a valid URI\n    */\n    public static final String PATH_USER = \"User\";\n\n    // To prevent someone from accidentally instantiating the contract class,\n    // give it an empty constructor.\n    public DBContract () {}\n    \n    //Intern class that defines the user table\n    public static final class UserEntry implements BaseColumns {\n        public static final URI CONTENT_URI = BASE_CONTENT_URI.buildUpon().appendPath(PATH_USER).build();\n        \n        public static final String CONTENT_TYPE = ContentResolver.CURSOR_DIR_BASE_TYPE+\"/\"+CONTENT_AUTHORITY+\"/\"+PATH_USER;\n        \n        //Name of the table\n        public static final String TABLE_NAME=\"User\";\n        \n        //Columns of the user table\n        public static final String COLUMN_Name=\"Name\";\n        public static final String COLUMN_Password=\"Password\";\n        \n        public static Uri buildUri(long id){\n            return ContentUris.withAppendedId(CONTENT_URI,id);\n        }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550444967835,
        "id": "1a39e0b2-f118-4169-a63d-4b210e15aa4a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550444967835,
        "parent_id": "800e2be7-dded-48b1-a27c-330abe14d3d4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "DBHelper.java",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "DBHelper.java",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550444967836,
        "id": "bb970583-1ae4-4ece-b65f-55f758b0b8b1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550444967836,
        "parent_id": "800e2be7-dded-48b1-a27c-330abe14d3d4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class DBHelper extends SQLiteOpenHelper{\n\n//if you change the schema of the database, you must increment this number\nprivate static final int DATABASE_VERSION=1;\nstatic final String DATABASE_NAME=\"mydatabase.db\";\nprivate static DBHelper mInstance=null;\npublic static DBHelper getInstance(Context ctx){\n    if(mInstance==null){\n    mInstance= new DBHelper(ctx.getApplicationContext());\n    }\n    return mInstance;\n}\n\npublic DBHelper(Context context){\n    super(context,DATABASE_NAME,null,DATABASE_VERSION);\n}\n\npublic int GetDatabase_Version() {\n    return DATABASE_VERSION;\n}\n\n@Override\npublic void onCreate(SQLiteDatabase sqLiteDatabase){\n//Create the table users\nfinal String SQL_CREATE_TABLE_USERS=\"CREATE TABLE \"+UserEntry.TABLE_NAME+ \" (\"+\nUserEntry._ID+\" INTEGER PRIMARY KEY, \"+\nUserEntry.COLUMN_Name+\" TEXT , \"+\nUserEntry.COLUMN_Password+\" TEXT \"+\n\" ); \";\n\nsqLiteDatabase.execSQL(SQL_CREATE_TABLE_USERS);\n\n}\n\n@Override\npublic void onUpgrade(SQLiteDatabase sqLiteDatabase, int oldVersion, int newVersion) {\n    sqLiteDatabase.execSQL(\"DROP TABLE IF EXISTS \" + UserEntry.TABLE_NAME);\n}\n\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class DBHelper extends SQLiteOpenHelper{\n\n//if you change the schema of the database, you must increment this number\nprivate static final int DATABASE_VERSION=1;\nstatic final String DATABASE_NAME=\"mydatabase.db\";\nprivate static DBHelper mInstance=null;\npublic static DBHelper getInstance(Context ctx){\n    if(mInstance==null){\n    mInstance= new DBHelper(ctx.getApplicationContext());\n    }\n    return mInstance;\n}\n\npublic DBHelper(Context context){\n    super(context,DATABASE_NAME,null,DATABASE_VERSION);\n}\n\npublic int GetDatabase_Version() {\n    return DATABASE_VERSION;\n}\n\n@Override\npublic void onCreate(SQLiteDatabase sqLiteDatabase){\n//Create the table users\nfinal String SQL_CREATE_TABLE_USERS=\"CREATE TABLE \"+UserEntry.TABLE_NAME+ \" (\"+\nUserEntry._ID+\" INTEGER PRIMARY KEY, \"+\nUserEntry.COLUMN_Name+\" TEXT , \"+\nUserEntry.COLUMN_Password+\" TEXT \"+\n\" ); \";\n\nsqLiteDatabase.execSQL(SQL_CREATE_TABLE_USERS);\n\n}\n\n@Override\npublic void onUpgrade(SQLiteDatabase sqLiteDatabase, int oldVersion, int newVersion) {\n    sqLiteDatabase.execSQL(\"DROP TABLE IF EXISTS \" + UserEntry.TABLE_NAME);\n}\n\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550444967836,
        "id": "b0cef273-7b6a-4bcb-a408-78ec143385eb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550444967836,
        "parent_id": "800e2be7-dded-48b1-a27c-330abe14d3d4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "DBProvider.java",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "DBProvider.java",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550444967836,
        "id": "28096501-744f-4606-8d68-e94be320f165",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550444967836,
        "parent_id": "800e2be7-dded-48b1-a27c-330abe14d3d4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class DBProvider extends ContentProvider {\n\n    private static final UriMatcher sUriMatcher = buildUriMatcher();\n    private DBHelper mDBHelper;\n    private Context mContext;\n\n    static final int USER = 100;\n\n    static UriMatcher buildUriMatcher() {\n\n        final UriMatcher matcher = new UriMatcher(UriMatcher.NO_MATCH);\n        final String authority = DBContract.CONTENT_AUTHORITY;\n\n        matcher.addURI(authority, DBContract.PATH_USER, USER);\n\n        return matcher;\n    }\n\n    @Override\n    public boolean onCreate() {\n        mDBHelper = new DBHelper(getContext());\n        return false;\n    }\n\n    public PeaberryProvider(Context context) {\n        mDBHelper = DBHelper.getInstance(context);\n        mContext = context;\n    }\n\n    @Override\n    public String getType(Uri uri) {\n        // determine what type of Uri is\n        final int match = sUriMatcher.match(uri);\n\n        switch (match) {\n            case USER:\n                return DBContract.UserEntry.CONTENT_TYPE;\n            \n            default:\n                throw new UnsupportedOperationException(\"Uri unknown: \" + uri);\n        }\n    }\n\n    @Override\n    public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs,\n                        String sortOrder) {\n        Cursor retCursor;\n        try {\n            switch (sUriMatcher.match(uri)) {\n                case USER: {\n                    retCursor = mDBHelper.getReadableDatabase().query(\n                            DBContract.UserEntry.TABLE_NAME,\n                            projection,\n                            selection,\n                            selectionArgs,\n                            null,\n                            null,\n                            sortOrder\n                    );\n                    break;\n                }\n                default:\n                    throw new UnsupportedOperationException(\"Uri unknown: \" + uri);\n            }\n        } catch (Exception ex) {\n            Log.e(\"Cursor\", ex.toString());\n        } finally {\n            mDBHelper.close();\n        }\n        return null;\n    }\n\n    @Override\n    public Uri insert(Uri uri, ContentValues values) {\n        final SQLiteDatabase db = mDBHelper.getWritableDatabase();\n        final int match = sUriMatcher.match(uri);\n        Uri returnUri;\n        try {\n\n            switch (match) {\n                case USER: {\n                    long _id = db.insert(DBContract.UserEntry.TABLE_NAME, null, values);\n                    if (_id \u003e 0)\n                        returnUri = DBContract.UserEntry.buildUri(_id);\n                    else\n                        throw new android.database.SQLException(\"Error at inserting row in \" + uri);\n                    break;\n                }\n                default:\n                    throw new UnsupportedOperationException(\"Uri unknown: \" + uri);\n            }\n            mContext.getContentResolver().notifyChange(uri, null);\n            return returnUri;\n        } catch (Exception ex) {\n            Log.e(\"Insert\", ex.toString());\n            db.close();\n        } finally {\n            db.close();\n        }\n        return null;\n    }\n\n    @Override\n    public int delete(Uri uri, String selection, String[] selectionArgs) {\n        final SQLiteDatabase db = DBHelper.getWritableDatabase();\n        final int match = sUriMatcher.match(uri);\n        int deletedRows;\n        if (null == selection) selection = \"1\";\n        try {\n            switch (match) {\n                case USER:\n                    deletedRows = db.delete(\n                            DBContract.UserEntry.TABLE_NAME, selection, selectionArgs);\n                    break;\n                default:\n                    throw new UnsupportedOperationException(\"Uri unknown: \" + uri);\n            }\n            if (deletedRows != 0) {\n                mContext.getContentResolver().notifyChange(uri, null);\n            }\n            return deletedRows;\n        } catch (Exception ex) {\n            Log.e(\"Insert\", ex.toString());\n        } finally {\n            db.close();\n        }\n        return 0;\n    }\n\n    @Override\n    public int update(Uri uri, ContentValues values, String selection, String[] selectionArgs) {\n        final SQLiteDatabase db = mDBHelper.getWritableDatabase();\n        final int match = sUriMatcher.match(uri);\n        int updatedRows;\n        try {\n            switch (match) {\n                case USER:\n                    updatedRows = db.update(DBContract.UserEntry.TABLE_NAME, values, selection, selectionArgs);\n                    break;\n                default:\n                    throw new UnsupportedOperationException(\"Uri unknown: \" + uri);\n            }\n            if (updatedRows != 0) {\n                mContext.getContentResolver().notifyChange(uri, null);\n            }\n            return updatedRows;\n        } catch (Exception ex) {\n            Log.e(\"Update\", ex.toString());\n        } finally {\n            db.close();\n        }\n        return -1;\n    }\n\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class DBProvider extends ContentProvider {\n\n    private static final UriMatcher sUriMatcher = buildUriMatcher();\n    private DBHelper mDBHelper;\n    private Context mContext;\n\n    static final int USER = 100;\n\n    static UriMatcher buildUriMatcher() {\n\n        final UriMatcher matcher = new UriMatcher(UriMatcher.NO_MATCH);\n        final String authority = DBContract.CONTENT_AUTHORITY;\n\n        matcher.addURI(authority, DBContract.PATH_USER, USER);\n\n        return matcher;\n    }\n\n    @Override\n    public boolean onCreate() {\n        mDBHelper = new DBHelper(getContext());\n        return false;\n    }\n\n    public PeaberryProvider(Context context) {\n        mDBHelper = DBHelper.getInstance(context);\n        mContext = context;\n    }\n\n    @Override\n    public String getType(Uri uri) {\n        // determine what type of Uri is\n        final int match = sUriMatcher.match(uri);\n\n        switch (match) {\n            case USER:\n                return DBContract.UserEntry.CONTENT_TYPE;\n            \n            default:\n                throw new UnsupportedOperationException(\"Uri unknown: \" + uri);\n        }\n    }\n\n    @Override\n    public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs,\n                        String sortOrder) {\n        Cursor retCursor;\n        try {\n            switch (sUriMatcher.match(uri)) {\n                case USER: {\n                    retCursor = mDBHelper.getReadableDatabase().query(\n                            DBContract.UserEntry.TABLE_NAME,\n                            projection,\n                            selection,\n                            selectionArgs,\n                            null,\n                            null,\n                            sortOrder\n                    );\n                    break;\n                }\n                default:\n                    throw new UnsupportedOperationException(\"Uri unknown: \" + uri);\n            }\n        } catch (Exception ex) {\n            Log.e(\"Cursor\", ex.toString());\n        } finally {\n            mDBHelper.close();\n        }\n        return null;\n    }\n\n    @Override\n    public Uri insert(Uri uri, ContentValues values) {\n        final SQLiteDatabase db = mDBHelper.getWritableDatabase();\n        final int match = sUriMatcher.match(uri);\n        Uri returnUri;\n        try {\n\n            switch (match) {\n                case USER: {\n                    long _id = db.insert(DBContract.UserEntry.TABLE_NAME, null, values);\n                    if (_id \u003e 0)\n                        returnUri = DBContract.UserEntry.buildUri(_id);\n                    else\n                        throw new android.database.SQLException(\"Error at inserting row in \" + uri);\n                    break;\n                }\n                default:\n                    throw new UnsupportedOperationException(\"Uri unknown: \" + uri);\n            }\n            mContext.getContentResolver().notifyChange(uri, null);\n            return returnUri;\n        } catch (Exception ex) {\n            Log.e(\"Insert\", ex.toString());\n            db.close();\n        } finally {\n            db.close();\n        }\n        return null;\n    }\n\n    @Override\n    public int delete(Uri uri, String selection, String[] selectionArgs) {\n        final SQLiteDatabase db = DBHelper.getWritableDatabase();\n        final int match = sUriMatcher.match(uri);\n        int deletedRows;\n        if (null == selection) selection = \"1\";\n        try {\n            switch (match) {\n                case USER:\n                    deletedRows = db.delete(\n                            DBContract.UserEntry.TABLE_NAME, selection, selectionArgs);\n                    break;\n                default:\n                    throw new UnsupportedOperationException(\"Uri unknown: \" + uri);\n            }\n            if (deletedRows != 0) {\n                mContext.getContentResolver().notifyChange(uri, null);\n            }\n            return deletedRows;\n        } catch (Exception ex) {\n            Log.e(\"Insert\", ex.toString());\n        } finally {\n            db.close();\n        }\n        return 0;\n    }\n\n    @Override\n    public int update(Uri uri, ContentValues values, String selection, String[] selectionArgs) {\n        final SQLiteDatabase db = mDBHelper.getWritableDatabase();\n        final int match = sUriMatcher.match(uri);\n        int updatedRows;\n        try {\n            switch (match) {\n                case USER:\n                    updatedRows = db.update(DBContract.UserEntry.TABLE_NAME, values, selection, selectionArgs);\n                    break;\n                default:\n                    throw new UnsupportedOperationException(\"Uri unknown: \" + uri);\n            }\n            if (updatedRows != 0) {\n                mContext.getContentResolver().notifyChange(uri, null);\n            }\n            return updatedRows;\n        } catch (Exception ex) {\n            Log.e(\"Update\", ex.toString());\n        } finally {\n            db.close();\n        }\n        return -1;\n    }\n\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550444967836,
        "id": "6085bbde-03bc-4eae-b4a6-85b28b38dfdf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550444967836,
        "parent_id": "800e2be7-dded-48b1-a27c-330abe14d3d4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "How to Use:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "How to Use:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550444967836,
        "id": "c7022a5f-ed81-47b5-878a-291381a435ce",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550444967836,
        "parent_id": "800e2be7-dded-48b1-a27c-330abe14d3d4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public void InsertUser() {\n    try {\n        ContentValues userValues = getUserData(\"Jhon\",\"XXXXX\");\n        DBProvider dbProvider = new DBProvider(mContext);\n        dbProvider.insert(UserEntry.CONTENT_URI, userValues);\n\n    } catch (Exception ex) {\n        Log.e(\"Insert\", ex.toString());\n    }\n}\n\npublic ContentValues getUserData(String name, String pass) {\n    ContentValues userValues = new ContentValues();\n    userValues.put(UserEntry.COLUMN_Name, name);\n    userValues.put(UserEntry.COLUMN_Password, pass);\n    return userValues;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public void InsertUser() {\n    try {\n        ContentValues userValues = getUserData(\"Jhon\",\"XXXXX\");\n        DBProvider dbProvider = new DBProvider(mContext);\n        dbProvider.insert(UserEntry.CONTENT_URI, userValues);\n\n    } catch (Exception ex) {\n        Log.e(\"Insert\", ex.toString());\n    }\n}\n\npublic ContentValues getUserData(String name, String pass) {\n    ContentValues userValues = new ContentValues();\n    userValues.put(UserEntry.COLUMN_Name, name);\n    userValues.put(UserEntry.COLUMN_Password, pass);\n    return userValues;\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "060 Create a Contract Helper and Provider for SQLite in Android"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}