{
  "ID": "a58ac695-f1f6-4b08-bfc0-9e164aaae6d2",
  "Root": {
    "alive": true,
    "content": [
      "266c28e0-b30b-496d-b7eb-5226da0b33ad",
      "be0b2740-7ed8-478c-83df-0798d0749923",
      "0af71000-f93c-412f-b974-e7e8eb822c97",
      "5579cc6a-b631-44df-90cf-53bab307383a",
      "b668435e-7b29-48b9-8c51-b4eda602b419",
      "ff8a6cae-28ff-42cf-8040-11e5592a223a"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550443992277,
    "id": "a58ac695-f1f6-4b08-bfc0-9e164aaae6d2",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550443992277,
    "parent_id": "b81f95e2-9af4-43b2-ae8a-eacf3d61b9e0",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "050 Reading and writing data to SharedPreferences with Singleton"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550443992273,
        "id": "266c28e0-b30b-496d-b7eb-5226da0b33ad",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550443992273,
        "parent_id": "a58ac695-f1f6-4b08-bfc0-9e164aaae6d2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "SharedPreferences Manager (Singleton) class to read and write all types of data."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "SharedPreferences Manager (Singleton) class to read and write all types of data."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550443992276,
        "id": "be0b2740-7ed8-478c-83df-0798d0749923",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550443992276,
        "parent_id": "a58ac695-f1f6-4b08-bfc0-9e164aaae6d2",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "import android.content.Context;\nimport android.content.SharedPreferences;\nimport android.util.Log;\n\nimport com.google.gson.Gson;\n\nimport java.lang.reflect.Type;\n\n/**\n * Singleton Class for accessing SharedPreferences,\n * should be initialized once in the beginning by any application component using static\n * method initialize(applicationContext)\n */\npublic class SharedPrefsManager {\n    \n    private static final String TAG = SharedPrefsManager.class.getName();\n    private SharedPreferences prefs;\n    private static SharedPrefsManager uniqueInstance;\n    public static final String PREF_NAME = \"com.example.app\";\n\n    private SharedPrefsManager(Context appContext) {\n        prefs = appContext.getSharedPreferences(PREF_NAME, Context.MODE_PRIVATE);\n    }\n\n    /**\n     * Throws IllegalStateException if this class is not initialized\n     *\n     * @return unique SharedPrefsManager instance\n     */\n    public static SharedPrefsManager getInstance() {\n        if (uniqueInstance == null) {\n            throw new IllegalStateException(\n                    \"SharedPrefsManager is not initialized, call initialize(applicationContext) \" +\n                            \"static method first\");\n        }\n        return uniqueInstance;\n    }\n\n    /**\n     * Initialize this class using application Context,\n     * should be called once in the beginning by any application Component\n     *\n     * @param appContext application context\n     */\n    public static void initialize(Context appContext) {\n        if (appContext == null) {\n            throw new NullPointerException(\"Provided application context is null\");\n        }\n        if (uniqueInstance == null) {\n            synchronized (SharedPrefsManager.class) {\n                if (uniqueInstance == null) {\n                    uniqueInstance = new SharedPrefsManager(appContext);\n                }\n            }\n        }\n    }\n\n    private SharedPreferences getPrefs() {\n        return prefs;\n    }\n\n    /**\n     * Clears all data in SharedPreferences\n     */\n    public void clearPrefs() {\n        SharedPreferences.Editor editor = getPrefs().edit();\n        editor.clear();\n        editor.commit();\n    }\n\n    public void removeKey(String key) {\n        getPrefs().edit().remove(key).commit();\n    }\n\n    public boolean containsKey(String key) {\n        return getPrefs().contains(key);\n    }\n\n    public String getString(String key, String defValue) {\n        return getPrefs().getString(key, defValue);\n    }\n\n    public String getString(String key) {\n        return getString(key, null);\n    }\n\n    public void setString(String key, String value) {\n        SharedPreferences.Editor editor = getPrefs().edit();\n        editor.putString(key, value);\n        editor.apply();\n    }\n\n    public int getInt(String key, int defValue) {\n        return getPrefs().getInt(key, defValue);\n    }\n\n    public int getInt(String key) {\n        return getInt(key, 0);\n    }\n\n    public void setInt(String key, int value) {\n        SharedPreferences.Editor editor = getPrefs().edit();\n        editor.putInt(key, value);\n        editor.apply();\n    }\n\n    public long getLong(String key, long defValue) {\n        return getPrefs().getLong(key, defValue);\n    }\n\n    public long getLong(String key) {\n        return getLong(key, 0L);\n    }\n\n    public void setLong(String key, long value) {\n        SharedPreferences.Editor editor = getPrefs().edit();\n        editor.putLong(key, value);\n        editor.apply();\n    }\n\n    public boolean getBoolean(String key, boolean defValue) {\n        return getPrefs().getBoolean(key, defValue);\n    }\n\n    public boolean getBoolean(String key) {\n        return getBoolean(key, false);\n    }\n\n    public void setBoolean(String key, boolean value) {\n        SharedPreferences.Editor editor = getPrefs().edit();\n        editor.putBoolean(key, value);\n        editor.apply();\n    }\n\n    public boolean getFloat(String key) {\n        return getFloat(key, 0f);\n    }\n\n    public boolean getFloat(String key, float defValue) {\n        return getFloat(key, defValue);\n    }\n\n    public void setFloat(String key, Float value) {\n        SharedPreferences.Editor editor = getPrefs().edit();\n        editor.putFloat(key, value);\n        editor.apply();\n    }\n\n    /**\n     * Persists an Object in prefs at the specified key, class of given Object must implement Model\n     * interface\n     *\n     * @param key         String\n     * @param modelObject Object to persist\n     * @param \u003cM\u003e         Generic for Object\n     */\n    public \u003cM extends Model\u003e void setObject(String key, M modelObject) {\n        String value = createJSONStringFromObject(modelObject);\n        SharedPreferences.Editor editor = getPrefs().edit();\n        editor.putString(key, value);\n        editor.apply();\n    }\n\n    /**\n     * Fetches the previously stored Object of given Class from prefs\n     *\n     * @param key                String\n     * @param classOfModelObject Class of persisted Object\n     * @param \u003cM\u003e                Generic for Object\n     * @return Object of given class\n     */\n    public \u003cM extends Model\u003e M getObject(String key, Class\u003cM\u003e classOfModelObject) {\n        String jsonData = getPrefs().getString(key, null);\n        if (null != jsonData) {\n            try {\n                Gson gson = new Gson();\n                M customObject = gson.fromJson(jsonData, classOfModelObject);\n                return customObject;\n            } catch (ClassCastException cce) {\n                Log.d(TAG, \"Cannot convert string obtained from prefs into collection of type \" +\n                        classOfModelObject.getName() + \"\\n\" + cce.getMessage());\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Persists a Collection object in prefs at the specified key\n     *\n     * @param key            String\n     * @param dataCollection Collection Object\n     * @param \u003cC\u003e            Generic for Collection object\n     */\n    public \u003cC\u003e void setCollection(String key, C dataCollection) {\n        SharedPreferences.Editor editor = getPrefs().edit();\n        String value = createJSONStringFromObject(dataCollection);\n        editor.putString(key, value);\n        editor.apply();\n    }\n\n    /**\n     * Fetches the previously stored Collection Object of given type from prefs\n     *\n     * @param key     String\n     * @param typeOfC Type of Collection Object\n     * @param \u003cC\u003e     Generic for Collection Object\n     * @return Collection Object which can be casted\n     */\n    public \u003cC\u003e C getCollection(String key, Type typeOfC) {\n        String jsonData = getPrefs().getString(key, null);\n        if (null != jsonData) {\n            try {\n                Gson gson = new Gson();\n                C arrFromPrefs = gson.fromJson(jsonData, typeOfC);\n                return arrFromPrefs;\n            } catch (ClassCastException cce) {\n                Log.d(TAG, \"Cannot convert string obtained from prefs into collection of type \" +\n                        typeOfC.toString() + \"\\n\" + cce.getMessage());\n            }\n        }\n        return null;\n    }\n\n    public void registerPrefsListener(SharedPreferences.OnSharedPreferenceChangeListener listener) {\n        getPrefs().registerOnSharedPreferenceChangeListener(listener);\n    }\n\n    public void unregisterPrefsListener(\n\n            SharedPreferences.OnSharedPreferenceChangeListener listener) {\n        getPrefs().unregisterOnSharedPreferenceChangeListener(listener);\n    }\n\n    public SharedPreferences.Editor getEditor() {\n        return getPrefs().edit();\n    }\n\n    private static String createJSONStringFromObject(Object object) {\n        Gson gson = new Gson();\n        return gson.toJson(object);\n    } \n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "import android.content.Context;\nimport android.content.SharedPreferences;\nimport android.util.Log;\n\nimport com.google.gson.Gson;\n\nimport java.lang.reflect.Type;\n\n/**\n * Singleton Class for accessing SharedPreferences,\n * should be initialized once in the beginning by any application component using static\n * method initialize(applicationContext)\n */\npublic class SharedPrefsManager {\n    \n    private static final String TAG = SharedPrefsManager.class.getName();\n    private SharedPreferences prefs;\n    private static SharedPrefsManager uniqueInstance;\n    public static final String PREF_NAME = \"com.example.app\";\n\n    private SharedPrefsManager(Context appContext) {\n        prefs = appContext.getSharedPreferences(PREF_NAME, Context.MODE_PRIVATE);\n    }\n\n    /**\n     * Throws IllegalStateException if this class is not initialized\n     *\n     * @return unique SharedPrefsManager instance\n     */\n    public static SharedPrefsManager getInstance() {\n        if (uniqueInstance == null) {\n            throw new IllegalStateException(\n                    \"SharedPrefsManager is not initialized, call initialize(applicationContext) \" +\n                            \"static method first\");\n        }\n        return uniqueInstance;\n    }\n\n    /**\n     * Initialize this class using application Context,\n     * should be called once in the beginning by any application Component\n     *\n     * @param appContext application context\n     */\n    public static void initialize(Context appContext) {\n        if (appContext == null) {\n            throw new NullPointerException(\"Provided application context is null\");\n        }\n        if (uniqueInstance == null) {\n            synchronized (SharedPrefsManager.class) {\n                if (uniqueInstance == null) {\n                    uniqueInstance = new SharedPrefsManager(appContext);\n                }\n            }\n        }\n    }\n\n    private SharedPreferences getPrefs() {\n        return prefs;\n    }\n\n    /**\n     * Clears all data in SharedPreferences\n     */\n    public void clearPrefs() {\n        SharedPreferences.Editor editor = getPrefs().edit();\n        editor.clear();\n        editor.commit();\n    }\n\n    public void removeKey(String key) {\n        getPrefs().edit().remove(key).commit();\n    }\n\n    public boolean containsKey(String key) {\n        return getPrefs().contains(key);\n    }\n\n    public String getString(String key, String defValue) {\n        return getPrefs().getString(key, defValue);\n    }\n\n    public String getString(String key) {\n        return getString(key, null);\n    }\n\n    public void setString(String key, String value) {\n        SharedPreferences.Editor editor = getPrefs().edit();\n        editor.putString(key, value);\n        editor.apply();\n    }\n\n    public int getInt(String key, int defValue) {\n        return getPrefs().getInt(key, defValue);\n    }\n\n    public int getInt(String key) {\n        return getInt(key, 0);\n    }\n\n    public void setInt(String key, int value) {\n        SharedPreferences.Editor editor = getPrefs().edit();\n        editor.putInt(key, value);\n        editor.apply();\n    }\n\n    public long getLong(String key, long defValue) {\n        return getPrefs().getLong(key, defValue);\n    }\n\n    public long getLong(String key) {\n        return getLong(key, 0L);\n    }\n\n    public void setLong(String key, long value) {\n        SharedPreferences.Editor editor = getPrefs().edit();\n        editor.putLong(key, value);\n        editor.apply();\n    }\n\n    public boolean getBoolean(String key, boolean defValue) {\n        return getPrefs().getBoolean(key, defValue);\n    }\n\n    public boolean getBoolean(String key) {\n        return getBoolean(key, false);\n    }\n\n    public void setBoolean(String key, boolean value) {\n        SharedPreferences.Editor editor = getPrefs().edit();\n        editor.putBoolean(key, value);\n        editor.apply();\n    }\n\n    public boolean getFloat(String key) {\n        return getFloat(key, 0f);\n    }\n\n    public boolean getFloat(String key, float defValue) {\n        return getFloat(key, defValue);\n    }\n\n    public void setFloat(String key, Float value) {\n        SharedPreferences.Editor editor = getPrefs().edit();\n        editor.putFloat(key, value);\n        editor.apply();\n    }\n\n    /**\n     * Persists an Object in prefs at the specified key, class of given Object must implement Model\n     * interface\n     *\n     * @param key         String\n     * @param modelObject Object to persist\n     * @param \u003cM\u003e         Generic for Object\n     */\n    public \u003cM extends Model\u003e void setObject(String key, M modelObject) {\n        String value = createJSONStringFromObject(modelObject);\n        SharedPreferences.Editor editor = getPrefs().edit();\n        editor.putString(key, value);\n        editor.apply();\n    }\n\n    /**\n     * Fetches the previously stored Object of given Class from prefs\n     *\n     * @param key                String\n     * @param classOfModelObject Class of persisted Object\n     * @param \u003cM\u003e                Generic for Object\n     * @return Object of given class\n     */\n    public \u003cM extends Model\u003e M getObject(String key, Class\u003cM\u003e classOfModelObject) {\n        String jsonData = getPrefs().getString(key, null);\n        if (null != jsonData) {\n            try {\n                Gson gson = new Gson();\n                M customObject = gson.fromJson(jsonData, classOfModelObject);\n                return customObject;\n            } catch (ClassCastException cce) {\n                Log.d(TAG, \"Cannot convert string obtained from prefs into collection of type \" +\n                        classOfModelObject.getName() + \"\\n\" + cce.getMessage());\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Persists a Collection object in prefs at the specified key\n     *\n     * @param key            String\n     * @param dataCollection Collection Object\n     * @param \u003cC\u003e            Generic for Collection object\n     */\n    public \u003cC\u003e void setCollection(String key, C dataCollection) {\n        SharedPreferences.Editor editor = getPrefs().edit();\n        String value = createJSONStringFromObject(dataCollection);\n        editor.putString(key, value);\n        editor.apply();\n    }\n\n    /**\n     * Fetches the previously stored Collection Object of given type from prefs\n     *\n     * @param key     String\n     * @param typeOfC Type of Collection Object\n     * @param \u003cC\u003e     Generic for Collection Object\n     * @return Collection Object which can be casted\n     */\n    public \u003cC\u003e C getCollection(String key, Type typeOfC) {\n        String jsonData = getPrefs().getString(key, null);\n        if (null != jsonData) {\n            try {\n                Gson gson = new Gson();\n                C arrFromPrefs = gson.fromJson(jsonData, typeOfC);\n                return arrFromPrefs;\n            } catch (ClassCastException cce) {\n                Log.d(TAG, \"Cannot convert string obtained from prefs into collection of type \" +\n                        typeOfC.toString() + \"\\n\" + cce.getMessage());\n            }\n        }\n        return null;\n    }\n\n    public void registerPrefsListener(SharedPreferences.OnSharedPreferenceChangeListener listener) {\n        getPrefs().registerOnSharedPreferenceChangeListener(listener);\n    }\n\n    public void unregisterPrefsListener(\n\n            SharedPreferences.OnSharedPreferenceChangeListener listener) {\n        getPrefs().unregisterOnSharedPreferenceChangeListener(listener);\n    }\n\n    public SharedPreferences.Editor getEditor() {\n        return getPrefs().edit();\n    }\n\n    private static String createJSONStringFromObject(Object object) {\n        Gson gson = new Gson();\n        return gson.toJson(object);\n    } \n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550443992277,
        "id": "0af71000-f93c-412f-b974-e7e8eb822c97",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550443992277,
        "parent_id": "a58ac695-f1f6-4b08-bfc0-9e164aaae6d2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Model",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "interface",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " which is implemented by classes going to "
            ],
            [
              "Gson",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to avoid"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Model",
            "AttrFlags": 2
          },
          {
            "Text": " "
          },
          {
            "Text": "interface",
            "AttrFlags": 2
          },
          {
            "Text": " which is implemented by classes going to "
          },
          {
            "Text": "Gson",
            "AttrFlags": 2
          },
          {
            "Text": " to avoid"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550443992277,
        "id": "5579cc6a-b631-44df-90cf-53bab307383a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550443992277,
        "parent_id": "a58ac695-f1f6-4b08-bfc0-9e164aaae6d2",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "proguard obfuscation.\n\npublic interface Model {\n\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "proguard obfuscation.\n\npublic interface Model {\n\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550443992277,
        "id": "b668435e-7b29-48b9-8c51-b4eda602b419",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550443992277,
        "parent_id": "a58ac695-f1f6-4b08-bfc0-9e164aaae6d2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Proguard rules for "
            ],
            [
              "Model",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " interface:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Proguard rules for "
          },
          {
            "Text": "Model",
            "AttrFlags": 2
          },
          {
            "Text": " interface:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550443992277,
        "id": "ff8a6cae-28ff-42cf-8040-11e5592a223a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550443992277,
        "parent_id": "a58ac695-f1f6-4b08-bfc0-9e164aaae6d2",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "-keep interface com.example.app.Model\n-keep class * implements com.example.app.Model { *;}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "-keep interface com.example.app.Model\n-keep class * implements com.example.app.Model { *;}",
        "code_language": "Plain Text"
      }
    ],
    "title": "050 Reading and writing data to SharedPreferences with Singleton"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}