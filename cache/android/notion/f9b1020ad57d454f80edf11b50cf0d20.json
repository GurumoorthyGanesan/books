{
  "ID": "f9b1020a-d57d-454f-80ed-f11b50cf0d20",
  "Root": {
    "alive": true,
    "content": [
      "40104c4b-d091-457d-ba15-39cba83a4da4",
      "cff63d56-092c-4bae-9129-b7dcbacfd912",
      "d9c4a268-b5b2-4cb5-9553-e7c61cb5529d",
      "262b2760-f460-4950-85e9-24691c5e88b5"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550447906337,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "f9b1020a-d57d-454f-80ed-f11b50cf0d20",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550447906337,
    "parent_id": "e8b25d81-c867-4e20-8829-1264867cb1b8",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "060 Using Picasso as ImageGetter for Html.fromHtml"
        ]
      ]
    },
    "type": "page",
    "version": 2,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550447906337,
        "id": "40104c4b-d091-457d-ba15-39cba83a4da4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550447906337,
        "parent_id": "f9b1020a-d57d-454f-80ed-f11b50cf0d20",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Using Picasso as "
            ],
            [
              "ImageGetter",
              [
                [
                  "a",
                  "https://developer.android.com/reference/android/text/Html.ImageGetter.html"
                ]
              ]
            ],
            [
              " for "
            ],
            [
              "Html.fromHtml",
              [
                [
                  "a",
                  "https://developer.android.com/reference/android/text/Html.html#fromHtml(java.lang.String,%20android.text.Html.ImageGetter,%20android.text.Html.TagHandler)"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Using Picasso as "
          },
          {
            "Text": "ImageGetter",
            "Link": "https://developer.android.com/reference/android/text/Html.ImageGetter.html"
          },
          {
            "Text": " for "
          },
          {
            "Text": "Html.fromHtml",
            "Link": "https://developer.android.com/reference/android/text/Html.html#fromHtml(java.lang.String,%20android.text.Html.ImageGetter,%20android.text.Html.TagHandler)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550447906337,
        "id": "cff63d56-092c-4bae-9129-b7dcbacfd912",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550447906337,
        "parent_id": "f9b1020a-d57d-454f-80ed-f11b50cf0d20",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class PicassoImageGetter implements Html.ImageGetter {\n\nprivate TextView textView;\n\nprivate Picasso picasso;\n\npublic PicassoImageGetter(@NonNull Picasso picasso, @NonNull TextView textView) {\n    this.picasso = picasso;\n    this.textView = textView;\n}\n\n@Override\npublic Drawable getDrawable(String source) {\n    Log.d(PicassoImageGetter.class.getName(), \"Start loading url \" + source);\n\n    BitmapDrawablePlaceHolder drawable = new BitmapDrawablePlaceHolder();\n\n    picasso\n            .load(source)\n            .error(R.drawable.connection_error)\n            .into(drawable);\n\n    return drawable;\n}\n\nprivate class BitmapDrawablePlaceHolder extends BitmapDrawable implements Target {\n\n    protected Drawable drawable;\n\n    @Override\n    public void draw(final Canvas canvas) {\n        if (drawable != null) {\n            checkBounds();\n            drawable.draw(canvas);\n        }\n    }\n\n    public void setDrawable(@Nullable Drawable drawable) {\n        if (drawable != null) {\n            this.drawable = drawable;\n            checkBounds();\n        }\n    }\n\n    private void checkBounds() {\n        float defaultProportion = (float) drawable.getIntrinsicWidth() / (float) drawable.getIntrinsicHeight();\n        int width = Math.min(textView.getWidth(), drawable.getIntrinsicWidth());\n        int height = (int) ((float) width / defaultProportion);\n\n        if (getBounds().right != textView.getWidth() || getBounds().bottom != height) {\n\n            setBounds(0, 0, textView.getWidth(), height); //set to full width\n\n            int halfOfPlaceHolderWidth = (int) ((float) getBounds().right / 2f);\n            int halfOfImageWidth = (int) ((float) width / 2f);\n\n            drawable.setBounds(\n                    halfOfPlaceHolderWidth - halfOfImageWidth, //centering an image\n                    0,\n                    halfOfPlaceHolderWidth + halfOfImageWidth,\n                    height);\n\n            textView.setText(textView.getText()); //refresh text\n        }\n    }\n\n    //------------------------------------------------------------------//\n\n    @Override\n    public void onBitmapLoaded(Bitmap bitmap, Picasso.LoadedFrom from) {\n        setDrawable(new BitmapDrawable(Application.getContext().getResources(), bitmap));\n    }\n\n    @Override\n    public void onBitmapFailed(Drawable errorDrawable) {\n        setDrawable(errorDrawable);\n    }\n\n    @Override\n    public void onPrepareLoad(Drawable placeHolderDrawable) {\n        setDrawable(placeHolderDrawable);\n    }\n\n    //------------------------------------------------------------------//\n\n}\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class PicassoImageGetter implements Html.ImageGetter {\n\nprivate TextView textView;\n\nprivate Picasso picasso;\n\npublic PicassoImageGetter(@NonNull Picasso picasso, @NonNull TextView textView) {\n    this.picasso = picasso;\n    this.textView = textView;\n}\n\n@Override\npublic Drawable getDrawable(String source) {\n    Log.d(PicassoImageGetter.class.getName(), \"Start loading url \" + source);\n\n    BitmapDrawablePlaceHolder drawable = new BitmapDrawablePlaceHolder();\n\n    picasso\n            .load(source)\n            .error(R.drawable.connection_error)\n            .into(drawable);\n\n    return drawable;\n}\n\nprivate class BitmapDrawablePlaceHolder extends BitmapDrawable implements Target {\n\n    protected Drawable drawable;\n\n    @Override\n    public void draw(final Canvas canvas) {\n        if (drawable != null) {\n            checkBounds();\n            drawable.draw(canvas);\n        }\n    }\n\n    public void setDrawable(@Nullable Drawable drawable) {\n        if (drawable != null) {\n            this.drawable = drawable;\n            checkBounds();\n        }\n    }\n\n    private void checkBounds() {\n        float defaultProportion = (float) drawable.getIntrinsicWidth() / (float) drawable.getIntrinsicHeight();\n        int width = Math.min(textView.getWidth(), drawable.getIntrinsicWidth());\n        int height = (int) ((float) width / defaultProportion);\n\n        if (getBounds().right != textView.getWidth() || getBounds().bottom != height) {\n\n            setBounds(0, 0, textView.getWidth(), height); //set to full width\n\n            int halfOfPlaceHolderWidth = (int) ((float) getBounds().right / 2f);\n            int halfOfImageWidth = (int) ((float) width / 2f);\n\n            drawable.setBounds(\n                    halfOfPlaceHolderWidth - halfOfImageWidth, //centering an image\n                    0,\n                    halfOfPlaceHolderWidth + halfOfImageWidth,\n                    height);\n\n            textView.setText(textView.getText()); //refresh text\n        }\n    }\n\n    //------------------------------------------------------------------//\n\n    @Override\n    public void onBitmapLoaded(Bitmap bitmap, Picasso.LoadedFrom from) {\n        setDrawable(new BitmapDrawable(Application.getContext().getResources(), bitmap));\n    }\n\n    @Override\n    public void onBitmapFailed(Drawable errorDrawable) {\n        setDrawable(errorDrawable);\n    }\n\n    @Override\n    public void onPrepareLoad(Drawable placeHolderDrawable) {\n        setDrawable(placeHolderDrawable);\n    }\n\n    //------------------------------------------------------------------//\n\n}\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550447906337,
        "id": "d9c4a268-b5b2-4cb5-9553-e7c61cb5529d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550447906337,
        "parent_id": "f9b1020a-d57d-454f-80ed-f11b50cf0d20",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The usage is simple:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The usage is simple:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550447906337,
        "id": "262b2760-f460-4950-85e9-24691c5e88b5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550447906337,
        "parent_id": "f9b1020a-d57d-454f-80ed-f11b50cf0d20",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Html.fromHtml(textToParse, new PicassoImageGetter(picasso, textViewTarget), null);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Html.fromHtml(textToParse, new PicassoImageGetter(picasso, textViewTarget), null);",
        "code_language": "Plain Text"
      }
    ],
    "title": "060 Using Picasso as ImageGetter for Html.fromHtml",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}