{
  "ID": "5877b8b2-b691-4223-9442-645d079814d4",
  "Root": {
    "alive": true,
    "content": [
      "d464cdc4-4c65-415c-92d4-8c8bea6a714c",
      "43ceee6c-61a0-4860-b090-0d589ee45754",
      "a02204e1-e122-439f-9be1-941d246662da",
      "e9688d9f-198e-42fc-8294-23101da60801"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550443725915,
    "id": "5877b8b2-b691-4223-9442-645d079814d4",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550443725915,
    "parent_id": "4b7449f0-077a-4e41-841b-d5c551629808",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "180 Showing a File Chooser and Reading the Result"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550443725914,
        "id": "d464cdc4-4c65-415c-92d4-8c8bea6a714c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550443725914,
        "parent_id": "5877b8b2-b691-4223-9442-645d079814d4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Starting a File Chooser Activity"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Starting a File Chooser Activity"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550443725915,
        "id": "43ceee6c-61a0-4860-b090-0d589ee45754",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550443725915,
        "parent_id": "5877b8b2-b691-4223-9442-645d079814d4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public void showFileChooser() {\n    Intent intent = new Intent(Intent.ACTION_GET_CONTENT);\n\n    // Update with mime types\n    intent.setType(\"*/*\");\n\n    // Update with additional mime types here using a String[]. \n    intent.putExtra(Intent.EXTRA_MIME_TYPES, mimeTypes);\n\n    // Only pick openable and local files. Theoretically we could pull files from google drive\n    // or other applications that have networked files, but that's unnecessary for this example.\n    intent.addCategory(Intent.CATEGORY_OPENABLE);\n    intent.putExtra(Intent.EXTRA_LOCAL_ONLY, true);\n\n    // REQUEST_CODE = \u003csome-integer\u003e\n    startActivityForResult(intent, REQUEST_CODE);\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public void showFileChooser() {\n    Intent intent = new Intent(Intent.ACTION_GET_CONTENT);\n\n    // Update with mime types\n    intent.setType(\"*/*\");\n\n    // Update with additional mime types here using a String[]. \n    intent.putExtra(Intent.EXTRA_MIME_TYPES, mimeTypes);\n\n    // Only pick openable and local files. Theoretically we could pull files from google drive\n    // or other applications that have networked files, but that's unnecessary for this example.\n    intent.addCategory(Intent.CATEGORY_OPENABLE);\n    intent.putExtra(Intent.EXTRA_LOCAL_ONLY, true);\n\n    // REQUEST_CODE = \u003csome-integer\u003e\n    startActivityForResult(intent, REQUEST_CODE);\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550443725915,
        "id": "a02204e1-e122-439f-9be1-941d246662da",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550443725915,
        "parent_id": "5877b8b2-b691-4223-9442-645d079814d4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Reading the Result"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Reading the Result"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550443725915,
        "id": "e9688d9f-198e-42fc-8294-23101da60801",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550443725915,
        "parent_id": "5877b8b2-b691-4223-9442-645d079814d4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "@Override\nprotected void onActivityResult(int requestCode, int resultCode, Intent data) {\n    // If the user doesn't pick a file just return\n    if (requestCode != REQUEST_CODE || resultCode != RESULT_OK) {\n        return;\n    }\n\n    // Import the file\n    importFile(data.getData());\n}\n\npublic void importFile(Uri uri) {\n    String fileName = getFileName(uri);\n\n    // The temp file could be whatever you want\n    File fileCopy = copyToTempFile(uri, File tempFile)\n\n    // Done!\n}\n\n/**\n * Obtains the file name for a URI using content resolvers. Taken from the following link\n * https://developer.android.com/training/secure-file-sharing/retrieve-info.html#RetrieveFileInfo\n *\n * @param uri a uri to query\n * @return the file name with no path\n * @throws IllegalArgumentException if the query is null, empty, or the column doesn't exist\n */\nprivate String getFileName(Uri uri) throws IllegalArgumentException {\n    // Obtain a cursor with information regarding this uri\n    Cursor cursor = getContentResolver().query(uri, null, null, null, null);\n\n    if (cursor.getCount() \u003c= 0) {\n        cursor.close();\n        throw new IllegalArgumentException(\"Can't obtain file name, cursor is empty\");\n    }\n\n    cursor.moveToFirst();\n\n    String fileName = cursor.getString(cursor.getColumnIndexOrThrow(OpenableColumns.DISPLAY_NAME));\n\n    cursor.close();\n\n    return fileName;\n}\n\n/**\n * Copies a uri reference to a temporary file\n *\n * @param uri      the uri used as the input stream\n * @param tempFile the file used as an output stream\n * @return the input tempFile for convenience\n * @throws IOException if an error occurs\n */\nprivate File copyToTempFile(Uri uri, File tempFile) throws IOException {\n    // Obtain an input stream from the uri\n    InputStream inputStream = getContentResolver().openInputStream(uri);\n\n    if (inputStream == null) {\n        throw new IOException(\"Unable to obtain input stream from URI\");\n    }\n\n    // Copy the stream to the temp file\n    FileUtils.copyInputStreamToFile(inputStream, tempFile);\n\n    return tempFile;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "@Override\nprotected void onActivityResult(int requestCode, int resultCode, Intent data) {\n    // If the user doesn't pick a file just return\n    if (requestCode != REQUEST_CODE || resultCode != RESULT_OK) {\n        return;\n    }\n\n    // Import the file\n    importFile(data.getData());\n}\n\npublic void importFile(Uri uri) {\n    String fileName = getFileName(uri);\n\n    // The temp file could be whatever you want\n    File fileCopy = copyToTempFile(uri, File tempFile)\n\n    // Done!\n}\n\n/**\n * Obtains the file name for a URI using content resolvers. Taken from the following link\n * https://developer.android.com/training/secure-file-sharing/retrieve-info.html#RetrieveFileInfo\n *\n * @param uri a uri to query\n * @return the file name with no path\n * @throws IllegalArgumentException if the query is null, empty, or the column doesn't exist\n */\nprivate String getFileName(Uri uri) throws IllegalArgumentException {\n    // Obtain a cursor with information regarding this uri\n    Cursor cursor = getContentResolver().query(uri, null, null, null, null);\n\n    if (cursor.getCount() \u003c= 0) {\n        cursor.close();\n        throw new IllegalArgumentException(\"Can't obtain file name, cursor is empty\");\n    }\n\n    cursor.moveToFirst();\n\n    String fileName = cursor.getString(cursor.getColumnIndexOrThrow(OpenableColumns.DISPLAY_NAME));\n\n    cursor.close();\n\n    return fileName;\n}\n\n/**\n * Copies a uri reference to a temporary file\n *\n * @param uri      the uri used as the input stream\n * @param tempFile the file used as an output stream\n * @return the input tempFile for convenience\n * @throws IOException if an error occurs\n */\nprivate File copyToTempFile(Uri uri, File tempFile) throws IOException {\n    // Obtain an input stream from the uri\n    InputStream inputStream = getContentResolver().openInputStream(uri);\n\n    if (inputStream == null) {\n        throw new IOException(\"Unable to obtain input stream from URI\");\n    }\n\n    // Copy the stream to the temp file\n    FileUtils.copyInputStreamToFile(inputStream, tempFile);\n\n    return tempFile;\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "180 Showing a File Chooser and Reading the Result"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}