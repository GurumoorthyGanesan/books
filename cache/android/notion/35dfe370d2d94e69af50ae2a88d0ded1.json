{
  "ID": "35dfe370-d2d9-4e69-af50-ae2a88d0ded1",
  "Root": {
    "alive": true,
    "content": [
      "b9e05b19-00d9-40ba-acb1-caa8a185a4c7",
      "5d587886-e5ba-49a6-a9b7-8ceb34cada8e",
      "6bcfd3b5-59ad-476b-bdcb-56362b2609b2",
      "95fe1b5b-7b59-4258-b298-b106035c1f9c"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550443637932,
    "id": "35dfe370-d2d9-4e69-af50-ae2a88d0ded1",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550443637932,
    "parent_id": "b9098913-7e61-4386-8d02-ca92ab88b324",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "010 Kotlin and RxJava example"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550443637926,
        "id": "b9e05b19-00d9-40ba-acb1-caa8a185a4c7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550443637926,
        "parent_id": "35dfe370-d2d9-4e69-af50-ae2a88d0ded1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "First example reimplemented in Kotlin and using RxJava for cleaner interaction."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "First example reimplemented in Kotlin and using RxJava for cleaner interaction."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550443637931,
        "id": "5d587886-e5ba-49a6-a9b7-8ceb34cada8e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550443637931,
        "parent_id": "35dfe370-d2d9-4e69-af50-ae2a88d0ded1",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "import android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport android.support.v7.widget.RecyclerView\nimport rx.subjects.PublishSubject\n\npublic class SampleAdapter(private val items: Array\u003cString\u003e) : RecyclerView.Adapter\u003cSampleAdapter.ViewHolder\u003e() {\n\n    // change to different subjects from rx.subjects to get different behavior\n    // BehaviorSubject for example allows to receive last event on subscribe\n    // PublishSubject sends events only after subscribing on the other hand which is desirable for clicks\n    public val itemClickStream: PublishSubject\u003cView\u003e = PublishSubject.create()\n    \n    override fun getItemCount(): Int {\n        return items.size\n    }\n\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder? {\n        val v = LayoutInflater.from(parent.getContext()).inflate(R.layout.text_row_item, parent, false);\n        return ViewHolder(view)\n    }\n\n    override fun onBindViewHolder(holder: ViewHolder, position: Int) {\n        holder.bind(items[position])\n    }\n\n    public inner class ViewHolder(view: View) : RecyclerView.ViewHolder(view) {\n        private val textView: TextView by lazy { view.findViewById(R.id.textView) as TextView }\n\n        init {\n            view.setOnClickListener { v -\u003e itemClickStream.onNext(v) }\n        }\n\n        fun bind(text: String) {\n            textView.text = text\n        }\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "import android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport android.support.v7.widget.RecyclerView\nimport rx.subjects.PublishSubject\n\npublic class SampleAdapter(private val items: Array\u003cString\u003e) : RecyclerView.Adapter\u003cSampleAdapter.ViewHolder\u003e() {\n\n    // change to different subjects from rx.subjects to get different behavior\n    // BehaviorSubject for example allows to receive last event on subscribe\n    // PublishSubject sends events only after subscribing on the other hand which is desirable for clicks\n    public val itemClickStream: PublishSubject\u003cView\u003e = PublishSubject.create()\n    \n    override fun getItemCount(): Int {\n        return items.size\n    }\n\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder? {\n        val v = LayoutInflater.from(parent.getContext()).inflate(R.layout.text_row_item, parent, false);\n        return ViewHolder(view)\n    }\n\n    override fun onBindViewHolder(holder: ViewHolder, position: Int) {\n        holder.bind(items[position])\n    }\n\n    public inner class ViewHolder(view: View) : RecyclerView.ViewHolder(view) {\n        private val textView: TextView by lazy { view.findViewById(R.id.textView) as TextView }\n\n        init {\n            view.setOnClickListener { v -\u003e itemClickStream.onNext(v) }\n        }\n\n        fun bind(text: String) {\n            textView.text = text\n        }\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550443637932,
        "id": "6bcfd3b5-59ad-476b-bdcb-56362b2609b2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550443637932,
        "parent_id": "35dfe370-d2d9-4e69-af50-ae2a88d0ded1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Usage is quite simple then. It’s possible to subscribe on separate thread using RxJava facilities."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Usage is quite simple then. It’s possible to subscribe on separate thread using RxJava facilities."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550443637932,
        "id": "95fe1b5b-7b59-4258-b298-b106035c1f9c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550443637932,
        "parent_id": "35dfe370-d2d9-4e69-af50-ae2a88d0ded1",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "val adapter = SampleAdapter(arrayOf(\"Hello\", \"World\"))\nadapter.itemClickStream.subscribe { v -\u003e\n    if (v.id == R.id.textView) {\n        // do something\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "val adapter = SampleAdapter(arrayOf(\"Hello\", \"World\"))\nadapter.itemClickStream.subscribe { v -\u003e\n    if (v.id == R.id.textView) {\n        // do something\n    }\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "010 Kotlin and RxJava example"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}