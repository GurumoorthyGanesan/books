{
  "ID": "6aff33c6-f6a1-479a-9074-7e77f20e0304",
  "Root": {
    "alive": true,
    "content": [
      "ea5a83ce-eeb5-4b80-915a-f33b49b67fc7",
      "d997cca4-e566-48df-b9be-0aa85ef488aa",
      "2ac2e924-bfa8-4855-8e58-c8f2933ba1fb",
      "03e14218-cc69-4cf3-bdf5-fad6717f56e5",
      "f30a7f89-05f6-434e-8dc0-5787a618432a",
      "0c406ac8-d9ab-4f0a-a94e-e7cf2b5eee20",
      "fd3c5291-7966-4aa0-bc34-595375b30a66",
      "5faa33c5-7265-4654-b18e-7949744fd7c4",
      "65cfdcf2-16ff-4edc-ae62-62c84e052456",
      "2b23139e-fa35-4abc-b6b4-3db616754ed1",
      "0c565ffd-314a-4224-96ec-0ba33061c1ac",
      "fb7a6d43-7bc7-4476-881f-aa5e29d3747e",
      "800db0c7-1e63-4aca-b467-500c32c02589",
      "74763249-dc6c-4cd3-bea5-5dc1b7918076"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550443765852,
    "id": "6aff33c6-f6a1-479a-9074-7e77f20e0304",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550443765852,
    "parent_id": "f7aa3cbf-18e0-4aee-8ec1-725bd9ccb0bc",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "150 Custom JSON Deserializer using Gson"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550443765850,
        "id": "ea5a83ce-eeb5-4b80-915a-f33b49b67fc7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550443765850,
        "parent_id": "6aff33c6-f6a1-479a-9074-7e77f20e0304",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Imagine you have all dates in all responses in some custom format, for instance "
            ],
            [
              "/Date(1465935152)/",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and you want apply general rule to deserialize all Json dates to java "
            ],
            [
              "Date",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " instances. In this case you need to implement custom Json Deserializer."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Imagine you have all dates in all responses in some custom format, for instance "
          },
          {
            "Text": "/Date(1465935152)/",
            "AttrFlags": 2
          },
          {
            "Text": " and you want apply general rule to deserialize all Json dates to java "
          },
          {
            "Text": "Date",
            "AttrFlags": 2
          },
          {
            "Text": " instances. In this case you need to implement custom Json Deserializer."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550443765851,
        "id": "d997cca4-e566-48df-b9be-0aa85ef488aa",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550443765851,
        "parent_id": "6aff33c6-f6a1-479a-9074-7e77f20e0304",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Example of json:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Example of json:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550443765851,
        "id": "2ac2e924-bfa8-4855-8e58-c8f2933ba1fb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550443765851,
        "parent_id": "6aff33c6-f6a1-479a-9074-7e77f20e0304",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "{\n  \"id\": 1,\n  \"created_on\": \"Date(1465935152)\",\n  \"updated_on\": \"Date(1465968945)\",\n  \"name\": \"Oleksandr\"\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "{\n  \"id\": 1,\n  \"created_on\": \"Date(1465935152)\",\n  \"updated_on\": \"Date(1465968945)\",\n  \"name\": \"Oleksandr\"\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550443765851,
        "id": "03e14218-cc69-4cf3-bdf5-fad6717f56e5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550443765851,
        "parent_id": "6aff33c6-f6a1-479a-9074-7e77f20e0304",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Suppose we have this class below:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Suppose we have this class below:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550443765851,
        "id": "f30a7f89-05f6-434e-8dc0-5787a618432a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550443765851,
        "parent_id": "6aff33c6-f6a1-479a-9074-7e77f20e0304",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class User {\n    @SerializedName(\"id\")\n    long id;\n    @SerializedName(\"created_on\")\n    Date createdOn;\n    @SerializedName(\"updated_on\")\n    Date updatedOn;\n    @SerializedName(\"name\")\n    String name;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class User {\n    @SerializedName(\"id\")\n    long id;\n    @SerializedName(\"created_on\")\n    Date createdOn;\n    @SerializedName(\"updated_on\")\n    Date updatedOn;\n    @SerializedName(\"name\")\n    String name;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550443765851,
        "id": "0c406ac8-d9ab-4f0a-a94e-e7cf2b5eee20",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550443765851,
        "parent_id": "6aff33c6-f6a1-479a-9074-7e77f20e0304",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Custom deserializer:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Custom deserializer:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550443765851,
        "id": "fd3c5291-7966-4aa0-bc34-595375b30a66",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550443765851,
        "parent_id": "6aff33c6-f6a1-479a-9074-7e77f20e0304",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class DateDeSerializer implements JsonDeserializer\u003cDate\u003e {\n    private static final String DATE_PREFIX = \"/Date(\";\n    private static final String DATE_SUFFIX = \")/\";\n\n    @Override\n    public Date deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\n        String dateString = json.getAsString();\n        if (dateString.startsWith(DATE_PREFIX) \u0026\u0026 dateString.endsWith(DATE_SUFFIX)) {\n            dateString = dateString.substring(DATE_PREFIX.length(), dateString.length() - DATE_SUFFIX.length());\n        } else {\n            throw new JsonParseException(\"Wrong date format: \" + dateString);\n        }\n        return new Date(Long.parseLong(dateString) - TimeZone.getDefault().getRawOffset());\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class DateDeSerializer implements JsonDeserializer\u003cDate\u003e {\n    private static final String DATE_PREFIX = \"/Date(\";\n    private static final String DATE_SUFFIX = \")/\";\n\n    @Override\n    public Date deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\n        String dateString = json.getAsString();\n        if (dateString.startsWith(DATE_PREFIX) \u0026\u0026 dateString.endsWith(DATE_SUFFIX)) {\n            dateString = dateString.substring(DATE_PREFIX.length(), dateString.length() - DATE_SUFFIX.length());\n        } else {\n            throw new JsonParseException(\"Wrong date format: \" + dateString);\n        }\n        return new Date(Long.parseLong(dateString) - TimeZone.getDefault().getRawOffset());\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550443765851,
        "id": "5faa33c5-7265-4654-b18e-7949744fd7c4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550443765851,
        "parent_id": "6aff33c6-f6a1-479a-9074-7e77f20e0304",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "And the usage:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "And the usage:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550443765851,
        "id": "65cfdcf2-16ff-4edc-ae62-62c84e052456",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550443765851,
        "parent_id": "6aff33c6-f6a1-479a-9074-7e77f20e0304",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Gson gson = new GsonBuilder()\n                .registerTypeAdapter(Date.class, new DateDeSerializer())\n                .create();\nString json = \"....\";\nUser user = gson.fromJson(json, User.class);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Gson gson = new GsonBuilder()\n                .registerTypeAdapter(Date.class, new DateDeSerializer())\n                .create();\nString json = \"....\";\nUser user = gson.fromJson(json, User.class);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550443765852,
        "id": "2b23139e-fa35-4abc-b6b4-3db616754ed1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550443765852,
        "parent_id": "6aff33c6-f6a1-479a-9074-7e77f20e0304",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Serialize and deserialize Jackson JSON strings with Date types",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Serialize and deserialize Jackson JSON strings with Date types",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550443765852,
        "id": "0c565ffd-314a-4224-96ec-0ba33061c1ac",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550443765852,
        "parent_id": "6aff33c6-f6a1-479a-9074-7e77f20e0304",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This also applies to the case where you want to make Gson Date conversion compatible with Jackson, for example."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This also applies to the case where you want to make Gson Date conversion compatible with Jackson, for example."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550443765852,
        "id": "fb7a6d43-7bc7-4476-881f-aa5e29d3747e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550443765852,
        "parent_id": "6aff33c6-f6a1-479a-9074-7e77f20e0304",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Jackson usually serializes Date to “milliseconds since epoch” whereas Gson uses a readable format like "
            ],
            [
              "Aug 31, 2016 10:26:17",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to represent Date. This leads to JsonSyntaxExceptions in Gson when you try to deserialize a Jackson format Date."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Jackson usually serializes Date to “milliseconds since epoch” whereas Gson uses a readable format like "
          },
          {
            "Text": "Aug 31, 2016 10:26:17",
            "AttrFlags": 2
          },
          {
            "Text": " to represent Date. This leads to JsonSyntaxExceptions in Gson when you try to deserialize a Jackson format Date."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550443765852,
        "id": "800db0c7-1e63-4aca-b467-500c32c02589",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550443765852,
        "parent_id": "6aff33c6-f6a1-479a-9074-7e77f20e0304",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To circumvent this, you can add a custom serializer and a custom deserializer:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To circumvent this, you can add a custom serializer and a custom deserializer:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550443765852,
        "id": "74763249-dc6c-4cd3-bea5-5dc1b7918076",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550443765852,
        "parent_id": "6aff33c6-f6a1-479a-9074-7e77f20e0304",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "JsonSerializer\u003cDate\u003e ser = new JsonSerializer\u003cDate\u003e() {\n    @Override\n    public JsonElement serialize(Date src, Type typeOfSrc, JsonSerializationContext\n                context) {\n        return src == null ? null : new JsonPrimitive(src.getTime());\n    }\n};\n\nJsonDeserializer\u003cDate\u003e deser = new JsonDeserializer\u003cDate\u003e() {\n    @Override\n    public Date deserialize(JsonElement json, Type typeOfT,\n                JsonDeserializationContext context) throws JsonParseException {\n        return json == null ? null : new Date(json.getAsLong());\n    }\n};\n\nGson gson = new GsonBuilder()\n                .registerTypeAdapter(Date.class, ser)\n                .registerTypeAdapter(Date.class, deser)\n                .create();"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "JsonSerializer\u003cDate\u003e ser = new JsonSerializer\u003cDate\u003e() {\n    @Override\n    public JsonElement serialize(Date src, Type typeOfSrc, JsonSerializationContext\n                context) {\n        return src == null ? null : new JsonPrimitive(src.getTime());\n    }\n};\n\nJsonDeserializer\u003cDate\u003e deser = new JsonDeserializer\u003cDate\u003e() {\n    @Override\n    public Date deserialize(JsonElement json, Type typeOfT,\n                JsonDeserializationContext context) throws JsonParseException {\n        return json == null ? null : new Date(json.getAsLong());\n    }\n};\n\nGson gson = new GsonBuilder()\n                .registerTypeAdapter(Date.class, ser)\n                .registerTypeAdapter(Date.class, deser)\n                .create();",
        "code_language": "Plain Text"
      }
    ],
    "title": "150 Custom JSON Deserializer using Gson"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}