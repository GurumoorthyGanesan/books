{
  "ID": "b61ce612-0fd1-4a46-b301-cb61ef275416",
  "Root": {
    "alive": true,
    "content": [
      "fa6215a6-a447-461d-8a25-4c36e9985246"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550451303003,
    "id": "b61ce612-0fd1-4a46-b301-cb61ef275416",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550451303003,
    "parent_id": "68e828c6-f314-441c-b64a-ba28f0d1cc35",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "050 Decode bitmap correctly rotated from the uri fetched with the intent"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550451303003,
        "id": "fa6215a6-a447-461d-8a25-4c36e9985246",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550451303003,
        "parent_id": "b61ce612-0fd1-4a46-b301-cb61ef275416",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "private static final String TAG = \"IntentBitmapFetch\";\nprivate static final String COLON_SEPARATOR = \":\";\nprivate static final String IMAGE = \"image\";\n\n@Nullable\npublic Bitmap getBitmap(@NonNull Uri bitmapUri, int maxDimen) {\n    InputStream is = context.getContentResolver().openInputStream(bitmapUri);\n    Bitmap bitmap = BitmapFactory.decodeStream(is, null, getBitmapOptions(bitmapUri, maxDimen));\n    \n    int imgRotation = getImageRotationDegrees(bitmapUri);\n\n    int endRotation = (imgRotation \u003c 0) ? -imgRotation : imgRotation;\n    endRotation %= 360;\n    endRotation = 90 * (endRotation / 90);\n    if (endRotation \u003e 0 \u0026\u0026 bitmap != null) {\n        Matrix m = new Matrix();\n        m.setRotate(endRotation);\n        Bitmap tmp = Bitmap.createBitmap(bitmap, 0, 0, bitmap.getWidth(), bitmap.getHeight(), m, true);\n        if (tmp != null) {\n            bitmap.recycle();\n            bitmap = tmp;\n        }\n    }\n\n    return bitmap;\n}\n\nprivate BitmapFactory.Options getBitmapOptions(Uri uri, int imageMaxDimen){\n    BitmapFactory.Options options = new BitmapFactory.Options();\n    if (imageMaxDimen \u003e 0) {\n        options.inJustDecodeBounds = true;\n        decodeImage(null, uri, options);\n        options.inSampleSize = calculateScaleFactor(options, imageMaxDimen);\n        options.inJustDecodeBounds = false;\n        options.inPreferredConfig = Bitmap.Config.RGB_565;\n        addInBitmapOptions(options);\n    }\n}\n\nprivate int calculateScaleFactor(@NonNull BitmapFactory.Options bitmapOptionsMeasureOnly, int imageMaxDimen) {\n    int inSampleSize = 1;\n    if (bitmapOptionsMeasureOnly.outHeight \u003e imageMaxDimen || bitmapOptionsMeasureOnly.outWidth \u003e imageMaxDimen) {\n        final int halfHeight = bitmapOptionsMeasureOnly.outHeight / 2;\n        final int halfWidth = bitmapOptionsMeasureOnly.outWidth / 2;\n        while ((halfHeight / inSampleSize) \u003e imageMaxDimen \u0026\u0026 (halfWidth / inSampleSize) \u003e imageMaxDimen) {\n            inSampleSize *= 2;\n        }\n    }\n    return inSampleSize;\n}\n\n    public int getImageRotationDegrees(@NonNull Uri imgUri) {\n    int photoRotation = ExifInterface.ORIENTATION_UNDEFINED;\n\n    try {\n        boolean hasRotation = false;\n        //If image comes from the gallery and is not in the folder DCIM (Scheme: content://)\n        String[] projection = {MediaStore.Images.ImageColumns.ORIENTATION};\n        Cursor cursor = context.getContentResolver().query(imgUri, projection, null, null, null);\n        if (cursor != null) {\n            if (cursor.getColumnCount() \u003e 0 \u0026\u0026 cursor.moveToFirst()) {\n                photoRotation = cursor.getInt(cursor.getColumnIndex(projection[0]));\n                hasRotation = photoRotation != 0;\n                Log.d(\"Cursor orientation: \"+ photoRotation);\n            }\n            cursor.close();\n        }\n\n        //If image comes from the camera (Scheme: file://) or is from the folder DCIM (Scheme: content://)\n        if (!hasRotation) {\n            ExifInterface exif = new ExifInterface(getAbsolutePath(imgUri));\n            int exifRotation = exif.getAttributeInt(ExifInterface.TAG_ORIENTATION,\n                    ExifInterface.ORIENTATION_NORMAL);\n            switch (exifRotation) {\n                case ExifInterface.ORIENTATION_ROTATE_90: {\n                    photoRotation = 90;\n                    break;\n                }\n                case ExifInterface.ORIENTATION_ROTATE_180: {\n                    photoRotation = 180;\n                    break;\n                }\n                case ExifInterface.ORIENTATION_ROTATE_270: {\n                    photoRotation = 270;\n                    break;\n                }\n            }\n            Log.d(TAG, \"Exif orientation: \"+ photoRotation);\n        }\n    } catch (IOException e) {\n        Log.e(TAG, \"Error determining rotation for image\"+ imgUri, e);\n    }\n    return photoRotation;\n}\n\n@TargetApi(Build.VERSION_CODES.KITKAT)\nprivate String getAbsolutePath(Uri uri) {\n    //Code snippet edited from: http://stackoverflow.com/a/20559418/2235133\n    String filePath = uri.getPath();\n    if (Build.VERSION.SDK_INT \u003e= Build.VERSION_CODES.KITKAT \u0026\u0026 DocumentsContract.isDocumentUri(context, uri)) {\n        // Will return \"image:x*\"\n        String[] wholeID = TextUtils.split(DocumentsContract.getDocumentId(uri), COLON_SEPARATOR);\n        // Split at colon, use second item in the array\n        String type = wholeID[0];\n        if (IMAGE.equalsIgnoreCase(type)) {//If it not type image, it means it comes from a remote location, like Google Photos\n            String id = wholeID[1];\n            String[] column = {MediaStore.Images.Media.DATA};\n            // where id is equal to\n            String sel = MediaStore.Images.Media._ID + \"=?\";\n            Cursor cursor = context.getContentResolver().\n                    query(MediaStore.Images.Media.EXTERNAL_CONTENT_URI,\n                            column, sel, new String[]{id}, null);\n            if (cursor != null) {\n                int columnIndex = cursor.getColumnIndex(column[0]);\n                if (cursor.moveToFirst()) {\n                    filePath = cursor.getString(columnIndex);\n                }\n                cursor.close();\n            }\n            Log.d(TAG, \"Fetched absolute path for uri\" + uri);\n        }\n    }\n    return filePath;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "private static final String TAG = \"IntentBitmapFetch\";\nprivate static final String COLON_SEPARATOR = \":\";\nprivate static final String IMAGE = \"image\";\n\n@Nullable\npublic Bitmap getBitmap(@NonNull Uri bitmapUri, int maxDimen) {\n    InputStream is = context.getContentResolver().openInputStream(bitmapUri);\n    Bitmap bitmap = BitmapFactory.decodeStream(is, null, getBitmapOptions(bitmapUri, maxDimen));\n    \n    int imgRotation = getImageRotationDegrees(bitmapUri);\n\n    int endRotation = (imgRotation \u003c 0) ? -imgRotation : imgRotation;\n    endRotation %= 360;\n    endRotation = 90 * (endRotation / 90);\n    if (endRotation \u003e 0 \u0026\u0026 bitmap != null) {\n        Matrix m = new Matrix();\n        m.setRotate(endRotation);\n        Bitmap tmp = Bitmap.createBitmap(bitmap, 0, 0, bitmap.getWidth(), bitmap.getHeight(), m, true);\n        if (tmp != null) {\n            bitmap.recycle();\n            bitmap = tmp;\n        }\n    }\n\n    return bitmap;\n}\n\nprivate BitmapFactory.Options getBitmapOptions(Uri uri, int imageMaxDimen){\n    BitmapFactory.Options options = new BitmapFactory.Options();\n    if (imageMaxDimen \u003e 0) {\n        options.inJustDecodeBounds = true;\n        decodeImage(null, uri, options);\n        options.inSampleSize = calculateScaleFactor(options, imageMaxDimen);\n        options.inJustDecodeBounds = false;\n        options.inPreferredConfig = Bitmap.Config.RGB_565;\n        addInBitmapOptions(options);\n    }\n}\n\nprivate int calculateScaleFactor(@NonNull BitmapFactory.Options bitmapOptionsMeasureOnly, int imageMaxDimen) {\n    int inSampleSize = 1;\n    if (bitmapOptionsMeasureOnly.outHeight \u003e imageMaxDimen || bitmapOptionsMeasureOnly.outWidth \u003e imageMaxDimen) {\n        final int halfHeight = bitmapOptionsMeasureOnly.outHeight / 2;\n        final int halfWidth = bitmapOptionsMeasureOnly.outWidth / 2;\n        while ((halfHeight / inSampleSize) \u003e imageMaxDimen \u0026\u0026 (halfWidth / inSampleSize) \u003e imageMaxDimen) {\n            inSampleSize *= 2;\n        }\n    }\n    return inSampleSize;\n}\n\n    public int getImageRotationDegrees(@NonNull Uri imgUri) {\n    int photoRotation = ExifInterface.ORIENTATION_UNDEFINED;\n\n    try {\n        boolean hasRotation = false;\n        //If image comes from the gallery and is not in the folder DCIM (Scheme: content://)\n        String[] projection = {MediaStore.Images.ImageColumns.ORIENTATION};\n        Cursor cursor = context.getContentResolver().query(imgUri, projection, null, null, null);\n        if (cursor != null) {\n            if (cursor.getColumnCount() \u003e 0 \u0026\u0026 cursor.moveToFirst()) {\n                photoRotation = cursor.getInt(cursor.getColumnIndex(projection[0]));\n                hasRotation = photoRotation != 0;\n                Log.d(\"Cursor orientation: \"+ photoRotation);\n            }\n            cursor.close();\n        }\n\n        //If image comes from the camera (Scheme: file://) or is from the folder DCIM (Scheme: content://)\n        if (!hasRotation) {\n            ExifInterface exif = new ExifInterface(getAbsolutePath(imgUri));\n            int exifRotation = exif.getAttributeInt(ExifInterface.TAG_ORIENTATION,\n                    ExifInterface.ORIENTATION_NORMAL);\n            switch (exifRotation) {\n                case ExifInterface.ORIENTATION_ROTATE_90: {\n                    photoRotation = 90;\n                    break;\n                }\n                case ExifInterface.ORIENTATION_ROTATE_180: {\n                    photoRotation = 180;\n                    break;\n                }\n                case ExifInterface.ORIENTATION_ROTATE_270: {\n                    photoRotation = 270;\n                    break;\n                }\n            }\n            Log.d(TAG, \"Exif orientation: \"+ photoRotation);\n        }\n    } catch (IOException e) {\n        Log.e(TAG, \"Error determining rotation for image\"+ imgUri, e);\n    }\n    return photoRotation;\n}\n\n@TargetApi(Build.VERSION_CODES.KITKAT)\nprivate String getAbsolutePath(Uri uri) {\n    //Code snippet edited from: http://stackoverflow.com/a/20559418/2235133\n    String filePath = uri.getPath();\n    if (Build.VERSION.SDK_INT \u003e= Build.VERSION_CODES.KITKAT \u0026\u0026 DocumentsContract.isDocumentUri(context, uri)) {\n        // Will return \"image:x*\"\n        String[] wholeID = TextUtils.split(DocumentsContract.getDocumentId(uri), COLON_SEPARATOR);\n        // Split at colon, use second item in the array\n        String type = wholeID[0];\n        if (IMAGE.equalsIgnoreCase(type)) {//If it not type image, it means it comes from a remote location, like Google Photos\n            String id = wholeID[1];\n            String[] column = {MediaStore.Images.Media.DATA};\n            // where id is equal to\n            String sel = MediaStore.Images.Media._ID + \"=?\";\n            Cursor cursor = context.getContentResolver().\n                    query(MediaStore.Images.Media.EXTERNAL_CONTENT_URI,\n                            column, sel, new String[]{id}, null);\n            if (cursor != null) {\n                int columnIndex = cursor.getColumnIndex(column[0]);\n                if (cursor.moveToFirst()) {\n                    filePath = cursor.getString(columnIndex);\n                }\n                cursor.close();\n            }\n            Log.d(TAG, \"Fetched absolute path for uri\" + uri);\n        }\n    }\n    return filePath;\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "050 Decode bitmap correctly rotated from the uri fetched with the intent"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}