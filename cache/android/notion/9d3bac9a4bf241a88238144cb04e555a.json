{
  "ID": "9d3bac9a-4bf2-41a8-8238-144cb04e555a",
  "Root": {
    "alive": true,
    "content": [
      "7737067d-611e-43ce-95c7-0035f10c9c4b",
      "0a287aa1-d88f-4ce4-b2c8-77af1294d9de",
      "2c592bd5-7848-43ad-a084-6550d5fda5d9",
      "6ffe75b7-fb24-406b-8f35-1ba89ec23d3e",
      "df784f77-eb47-4495-9bac-ad31edb7c450",
      "dbfb9157-83ac-4c86-a5ab-171896d99cff",
      "fb69ef82-0d06-410a-a182-6c5f1eec0d5c",
      "0f927216-adaa-4194-9a48-a85b823b985f",
      "893332d5-394b-4388-ac3d-10a9a33043f9",
      "e2fbd9f6-602b-4627-8f50-70941fac7c80",
      "f093d073-0ade-4809-ac9e-56976536e86a",
      "58f4dc32-4940-4af8-b0cb-25c8330329a2",
      "f736bcd4-afd7-419d-9089-ad41afc78a2e",
      "b135cc55-4660-429b-996f-5c4181173b10",
      "7183e7b6-bf96-47b3-bca2-89060a5eeb21",
      "60a478bb-9d8d-45fb-984a-425b3a58317b"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550449642134,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "9d3bac9a-4bf2-41a8-8238-144cb04e555a",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550449642134,
    "parent_id": "db56e9e4-397a-4b38-a33f-a2324e683304",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "MockWebServer example"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550449642128,
        "id": "7737067d-611e-43ce-95c7-0035f10c9c4b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550449642128,
        "parent_id": "9d3bac9a-4bf2-41a8-8238-144cb04e555a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In case your activities, fragments and UI require some background processing a good thing to use is a MockWebServer which runs localy on an android device which brings a closed and testable enviroment for your UI."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In case your activities, fragments and UI require some background processing a good thing to use is a MockWebServer which runs localy on an android device which brings a closed and testable enviroment for your UI."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550449642131,
        "id": "0a287aa1-d88f-4ce4-b2c8-77af1294d9de",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550449642131,
        "parent_id": "9d3bac9a-4bf2-41a8-8238-144cb04e555a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "https://github.com/square/okhttp/tree/master/mockwebserver"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "https://github.com/square/okhttp/tree/master/mockwebserver"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550449642131,
        "id": "2c592bd5-7848-43ad-a084-6550d5fda5d9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550449642131,
        "parent_id": "9d3bac9a-4bf2-41a8-8238-144cb04e555a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "First step is including the gradle dependency:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "First step is including the gradle dependency:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550449642131,
        "id": "6ffe75b7-fb24-406b-8f35-1ba89ec23d3e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550449642131,
        "parent_id": "9d3bac9a-4bf2-41a8-8238-144cb04e555a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "testCompile 'com.squareup.okhttp3:mockwebserver:(insert latest version)'"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "testCompile 'com.squareup.okhttp3:mockwebserver:(insert latest version)'",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550449642131,
        "id": "df784f77-eb47-4495-9bac-ad31edb7c450",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550449642131,
        "parent_id": "9d3bac9a-4bf2-41a8-8238-144cb04e555a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Now steps for running and using the mock server are:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Now steps for running and using the mock server are:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550449642132,
        "id": "dbfb9157-83ac-4c86-a5ab-171896d99cff",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550449642132,
        "parent_id": "9d3bac9a-4bf2-41a8-8238-144cb04e555a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "create mock server object"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "create mock server object"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550449642132,
        "id": "fb69ef82-0d06-410a-a182-6c5f1eec0d5c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550449642132,
        "parent_id": "9d3bac9a-4bf2-41a8-8238-144cb04e555a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "start it at specific address and port (usually localhost:portnumber)"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "start it at specific address and port (usually localhost:portnumber)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550449642133,
        "id": "0f927216-adaa-4194-9a48-a85b823b985f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550449642133,
        "parent_id": "9d3bac9a-4bf2-41a8-8238-144cb04e555a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "enqueue responses for specific requests"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "enqueue responses for specific requests"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550449642133,
        "id": "893332d5-394b-4388-ac3d-10a9a33043f9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550449642133,
        "parent_id": "9d3bac9a-4bf2-41a8-8238-144cb04e555a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "start the test"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "start the test"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550449642133,
        "id": "e2fbd9f6-602b-4627-8f50-70941fac7c80",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550449642133,
        "parent_id": "9d3bac9a-4bf2-41a8-8238-144cb04e555a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This is nicely explained in the github page of the mockwebserver but in our case we want something nicer and reusable for all tests, and JUnit rules will come nicely into play here:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This is nicely explained in the github page of the mockwebserver but in our case we want something nicer and reusable for all tests, and JUnit rules will come nicely into play here:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550449642133,
        "id": "f093d073-0ade-4809-ac9e-56976536e86a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550449642133,
        "parent_id": "9d3bac9a-4bf2-41a8-8238-144cb04e555a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "/**\n *JUnit  rule that starts and stops a mock web server for test runner\n*/\n public class MockServerRule extends UiThreadTestRule {\n\n private MockWebServer mServer;\n\n public static final int MOCK_WEBSERVER_PORT = 8000;\n\n    @Override\n    public Statement apply(final Statement base, Description description) {\n        return new Statement() {\n            @Override\n            public void evaluate() throws Throwable {\n                startServer();\n                try {\n                    base.evaluate();\n                } finally {\n                    stopServer();\n                }\n            }\n        };\n    }\n\n    /**\n     * Returns the started web server instance\n     *\n     * @return mock server\n     */\n    public MockWebServer server() {\n        return mServer;\n    }\n\n    public void startServer() throws IOException, NoSuchAlgorithmException {\n        mServer = new MockWebServer();\n        try {\n            mServer(MOCK_WEBSERVER_PORT);\n        } catch (IOException e) {\n            throw new IllegalStateException(e,\"mock server start issue\");\n        }\n    }\n\n    public void stopServer() {\n        try {\n            mServer.shutdown();\n        } catch (IOException e) {\n            Timber.e(e, \"mock server shutdown error”);\n        }\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "/**\n *JUnit  rule that starts and stops a mock web server for test runner\n*/\n public class MockServerRule extends UiThreadTestRule {\n\n private MockWebServer mServer;\n\n public static final int MOCK_WEBSERVER_PORT = 8000;\n\n    @Override\n    public Statement apply(final Statement base, Description description) {\n        return new Statement() {\n            @Override\n            public void evaluate() throws Throwable {\n                startServer();\n                try {\n                    base.evaluate();\n                } finally {\n                    stopServer();\n                }\n            }\n        };\n    }\n\n    /**\n     * Returns the started web server instance\n     *\n     * @return mock server\n     */\n    public MockWebServer server() {\n        return mServer;\n    }\n\n    public void startServer() throws IOException, NoSuchAlgorithmException {\n        mServer = new MockWebServer();\n        try {\n            mServer(MOCK_WEBSERVER_PORT);\n        } catch (IOException e) {\n            throw new IllegalStateException(e,\"mock server start issue\");\n        }\n    }\n\n    public void stopServer() {\n        try {\n            mServer.shutdown();\n        } catch (IOException e) {\n            Timber.e(e, \"mock server shutdown error”);\n        }\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550449642133,
        "id": "58f4dc32-4940-4af8-b0cb-25c8330329a2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550449642133,
        "parent_id": "9d3bac9a-4bf2-41a8-8238-144cb04e555a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Now lets assume that we have the exact same activity like in previous example, just in this case when we push the button app will fetch something from the network for example: https://someapi.com/name"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Now lets assume that we have the exact same activity like in previous example, just in this case when we push the button app will fetch something from the network for example: https://someapi.com/name"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550449642133,
        "id": "f736bcd4-afd7-419d-9089-ad41afc78a2e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550449642133,
        "parent_id": "9d3bac9a-4bf2-41a8-8238-144cb04e555a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This would return some text string which would be concatenated in the snackbar text e.g. NAME + text you typed in."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This would return some text string which would be concatenated in the snackbar text e.g. NAME + text you typed in."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550449642133,
        "id": "b135cc55-4660-429b-996f-5c4181173b10",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550449642133,
        "parent_id": "9d3bac9a-4bf2-41a8-8238-144cb04e555a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "/**\n* Testing of the snackbar activity with networking.\n**/\n@RunWith(AndroidJUnit4.class)\n@LargeTest\npublic class SnackbarActivityTest{\n    //espresso rule which tells which activity to start\n    @Rule\n    public final ActivityTestRule\u003cSnackbarActivity\u003e mActivityRule = \n        new ActivityTestRule\u003c\u003e(SnackbarActivity.class, true, false);\n\n    //start mock web server\n    @Rule\n    public final MockServerRule mMockServerRule = new MockServerRule();\n\n    @Override\n    public void tearDown() throws Exception {\n       //same as previous example\n    }\n    \n    @Override\n    public void setUp() throws Exception {\n       //same as previous example\n\n       **//IMPORTANT:** point your application to your mockwebserver endpoint e.g.\n       MyAppConfig.setEndpointURL(\"http://localhost:8000\");\n    }\n    \n    /**\n    *Test methods should always start with \"testXYZ\" and it is a good idea to \n    *name them after the intent what you want to test\n    **/\n    @Test\n    public void testSnackbarIsShown() {\n        //setup mockweb server\n        mMockServerRule.server().setDispatcher(getDispatcher());\n\n        mActivityRule.launchActivity(null);\n        //check is our text entry displayed and enter some text to it\n        String textToType=\"new snackbar text\";\n        onView(withId(R.id.textEntry)).check(matches(isDisplayed()));\n        //we check is our snackbar showing text from mock webserver plus the one we typed\n        onView(withId(R.id.textEntry)).perform(typeText(\"JazzJackTheRabbit\" + textToType));\n        //click the button to show the snackbar\n        onView(withId(R.id.shownSnackbarBtn)).perform(click());\n        //assert that a view with snackbar_id with text which we typed and is displayed\n        onView(allOf(withId(android.support.design.R.id.snackbar_text), \n        withText(textToType))) .check(matches(isDisplayed()));\n    }\n    \n     /**\n     *creates a mock web server dispatcher with prerecorded requests and responses\n     **/\n    private Dispatcher getDispatcher() {\n        final Dispatcher dispatcher = new Dispatcher() {\n            @Override\n            public MockResponse dispatch(RecordedRequest request) throws InterruptedException {\n                if (request.getPath().equals(\"/name\")){\n                    return new MockResponse().setResponseCode(200)\n                            .setBody(\"JazzJackTheRabbit\");\n                }\n                throw new IllegalStateException(\"no mock set up for \" + request.getPath());\n            }\n        };\n        return dispatcher;\n    }"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "/**\n* Testing of the snackbar activity with networking.\n**/\n@RunWith(AndroidJUnit4.class)\n@LargeTest\npublic class SnackbarActivityTest{\n    //espresso rule which tells which activity to start\n    @Rule\n    public final ActivityTestRule\u003cSnackbarActivity\u003e mActivityRule = \n        new ActivityTestRule\u003c\u003e(SnackbarActivity.class, true, false);\n\n    //start mock web server\n    @Rule\n    public final MockServerRule mMockServerRule = new MockServerRule();\n\n    @Override\n    public void tearDown() throws Exception {\n       //same as previous example\n    }\n    \n    @Override\n    public void setUp() throws Exception {\n       //same as previous example\n\n       **//IMPORTANT:** point your application to your mockwebserver endpoint e.g.\n       MyAppConfig.setEndpointURL(\"http://localhost:8000\");\n    }\n    \n    /**\n    *Test methods should always start with \"testXYZ\" and it is a good idea to \n    *name them after the intent what you want to test\n    **/\n    @Test\n    public void testSnackbarIsShown() {\n        //setup mockweb server\n        mMockServerRule.server().setDispatcher(getDispatcher());\n\n        mActivityRule.launchActivity(null);\n        //check is our text entry displayed and enter some text to it\n        String textToType=\"new snackbar text\";\n        onView(withId(R.id.textEntry)).check(matches(isDisplayed()));\n        //we check is our snackbar showing text from mock webserver plus the one we typed\n        onView(withId(R.id.textEntry)).perform(typeText(\"JazzJackTheRabbit\" + textToType));\n        //click the button to show the snackbar\n        onView(withId(R.id.shownSnackbarBtn)).perform(click());\n        //assert that a view with snackbar_id with text which we typed and is displayed\n        onView(allOf(withId(android.support.design.R.id.snackbar_text), \n        withText(textToType))) .check(matches(isDisplayed()));\n    }\n    \n     /**\n     *creates a mock web server dispatcher with prerecorded requests and responses\n     **/\n    private Dispatcher getDispatcher() {\n        final Dispatcher dispatcher = new Dispatcher() {\n            @Override\n            public MockResponse dispatch(RecordedRequest request) throws InterruptedException {\n                if (request.getPath().equals(\"/name\")){\n                    return new MockResponse().setResponseCode(200)\n                            .setBody(\"JazzJackTheRabbit\");\n                }\n                throw new IllegalStateException(\"no mock set up for \" + request.getPath());\n            }\n        };\n        return dispatcher;\n    }",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550449642133,
        "id": "7183e7b6-bf96-47b3-bca2-89060a5eeb21",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550449642133,
        "parent_id": "9d3bac9a-4bf2-41a8-8238-144cb04e555a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "I would suggest wrapping the dispatcher in some sort of a Builder so you can easily chain and add new responses for your screens. e.g."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "I would suggest wrapping the dispatcher in some sort of a Builder so you can easily chain and add new responses for your screens. e.g."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550449642134,
        "id": "60a478bb-9d8d-45fb-984a-425b3a58317b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550449642134,
        "parent_id": "9d3bac9a-4bf2-41a8-8238-144cb04e555a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "return newDispatcherBuilder()\n           .withSerializedJSONBody(\"/authenticate\", Mocks.getAuthenticationResponse())\n           .withSerializedJSONBody(\"/getUserInfo\", Mocks.getUserInfo())\n           .withSerializedJSONBody(\"/checkNotBot\", Mocks.checkNotBot());"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "return newDispatcherBuilder()\n           .withSerializedJSONBody(\"/authenticate\", Mocks.getAuthenticationResponse())\n           .withSerializedJSONBody(\"/getUserInfo\", Mocks.getUserInfo())\n           .withSerializedJSONBody(\"/checkNotBot\", Mocks.checkNotBot());",
        "code_language": "Plain Text"
      }
    ],
    "title": "MockWebServer example",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}