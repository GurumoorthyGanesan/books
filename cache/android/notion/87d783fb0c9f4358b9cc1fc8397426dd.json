{
  "ID": "87d783fb-0c9f-4358-b9cc-1fc8397426dd",
  "Root": {
    "alive": true,
    "content": [
      "b8f67f2e-93f8-40e7-b653-e8fedc193abe",
      "43f4292b-e80e-4bd2-9540-5d1885a19c6c",
      "39304c82-f360-47b5-8945-711ee6299a7f",
      "52c266dc-59b6-4895-bf2f-cbc5098c864d",
      "359e6a68-5692-4141-b78b-79bff4564995",
      "3cda2019-837f-44b4-8ae0-80e55c4087e3",
      "21dd4466-acf5-4a03-a696-b8b3f7161d2f",
      "abaa1b5f-2cef-4fbd-b50a-9f134dde6c42",
      "9ee7097e-81c4-411a-9ce5-5cb5ea68f082",
      "d21ad6aa-8ec9-4232-a105-00fc55f3c909",
      "4b9c1b01-5c2c-4175-92a7-2c1c24889126",
      "749c3d52-dace-498d-8aa2-637af239a950",
      "ea3dd5ea-382d-42a5-b7de-f312ccf0af4d",
      "3e629a3e-3426-4a27-a2bb-9240edada71f",
      "7ac3ebad-a0e5-4d33-9bf3-9cebc087fb77",
      "1d8ee2e5-fb36-4e6f-aea5-7a9fa7281a65",
      "388526b8-658e-4b23-aae1-47653142825e",
      "f8b1588a-65b8-4336-93cb-14832d7e0568",
      "14c6ec61-b133-48bc-8720-31b37b206238",
      "eb710f95-d319-463d-85ba-f44fb123e561",
      "8162abf6-2691-4656-b80a-d47b6ec8b6c4",
      "45e0bcc2-6700-4a26-b1e0-5b6c148132fd",
      "b387b5ba-9ce3-4403-ad96-86c7e50c20e1",
      "9e8d4505-750f-48c6-82ce-48b12aac8f84",
      "251f229c-95c8-4a06-bdfc-30afc23c3c7d"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550456595147,
    "id": "87d783fb-0c9f-4358-b9cc-1fc8397426dd",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550456595147,
    "parent_id": "174f69df-274c-48fb-87c1-579d48cbd326",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "010 Sync adapter with every min requesting value from server."
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550456595141,
        "id": "b8f67f2e-93f8-40e7-b653-e8fedc193abe",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550456595141,
        "parent_id": "87d783fb-0c9f-4358-b9cc-1fc8397426dd",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "\u003cprovider\n        android:name=\".DummyContentProvider\"\n        android:authorities=\"sample.map.com.ipsyncadapter\"\n        android:exported=\"false\" /\u003e\n\n    \u003c!-- This service implements our SyncAdapter. It needs to be exported, so that the system\n    sync framework can access it. --\u003e\n    \u003cservice android:name=\".SyncService\"\n        android:exported=\"true\"\u003e\n        \u003c!-- This intent filter is required. It allows the system to launch our sync service\n        as needed. --\u003e\n        \u003cintent-filter\u003e\n            \u003caction android:name=\"android.content.SyncAdapter\" /\u003e\n        \u003c/intent-filter\u003e\n        \u003c!-- This points to a required XML file which describes our SyncAdapter. --\u003e\n        \u003cmeta-data android:name=\"android.content.SyncAdapter\"\n            android:resource=\"@xml/syncadapter\" /\u003e\n    \u003c/service\u003e\n\n    \u003c!-- This implements the account we'll use as an attachment point for our SyncAdapter. Since\n    our SyncAdapter doesn't need to authenticate the current user (it just fetches a public RSS\n    feed), this account's implementation is largely empty.\n\n    It's also possible to attach a SyncAdapter to an existing account provided by another\n    package. In that case, this element could be omitted here. --\u003e\n    \u003cservice android:name=\".AuthenticatorService\"\n        \u003e\n        \u003c!-- Required filter used by the system to launch our account service. --\u003e\n        \u003cintent-filter\u003e\n            \u003caction android:name=\"android.accounts.AccountAuthenticator\" /\u003e\n        \u003c/intent-filter\u003e\n        \u003c!-- This points to an XMLf ile which describes our account service. --\u003e\n        \u003cmeta-data android:name=\"android.accounts.AccountAuthenticator\"\n            android:resource=\"@xml/authenticator\" /\u003e\n    \u003c/service\u003e"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "\u003cprovider\n        android:name=\".DummyContentProvider\"\n        android:authorities=\"sample.map.com.ipsyncadapter\"\n        android:exported=\"false\" /\u003e\n\n    \u003c!-- This service implements our SyncAdapter. It needs to be exported, so that the system\n    sync framework can access it. --\u003e\n    \u003cservice android:name=\".SyncService\"\n        android:exported=\"true\"\u003e\n        \u003c!-- This intent filter is required. It allows the system to launch our sync service\n        as needed. --\u003e\n        \u003cintent-filter\u003e\n            \u003caction android:name=\"android.content.SyncAdapter\" /\u003e\n        \u003c/intent-filter\u003e\n        \u003c!-- This points to a required XML file which describes our SyncAdapter. --\u003e\n        \u003cmeta-data android:name=\"android.content.SyncAdapter\"\n            android:resource=\"@xml/syncadapter\" /\u003e\n    \u003c/service\u003e\n\n    \u003c!-- This implements the account we'll use as an attachment point for our SyncAdapter. Since\n    our SyncAdapter doesn't need to authenticate the current user (it just fetches a public RSS\n    feed), this account's implementation is largely empty.\n\n    It's also possible to attach a SyncAdapter to an existing account provided by another\n    package. In that case, this element could be omitted here. --\u003e\n    \u003cservice android:name=\".AuthenticatorService\"\n        \u003e\n        \u003c!-- Required filter used by the system to launch our account service. --\u003e\n        \u003cintent-filter\u003e\n            \u003caction android:name=\"android.accounts.AccountAuthenticator\" /\u003e\n        \u003c/intent-filter\u003e\n        \u003c!-- This points to an XMLf ile which describes our account service. --\u003e\n        \u003cmeta-data android:name=\"android.accounts.AccountAuthenticator\"\n            android:resource=\"@xml/authenticator\" /\u003e\n    \u003c/service\u003e",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550456595144,
        "id": "43f4292b-e80e-4bd2-9540-5d1885a19c6c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550456595144,
        "parent_id": "87d783fb-0c9f-4358-b9cc-1fc8397426dd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This code need to be add in manifest file",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This code need to be add in manifest file",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550456595144,
        "id": "39304c82-f360-47b5-8945-711ee6299a7f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550456595144,
        "parent_id": "87d783fb-0c9f-4358-b9cc-1fc8397426dd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In above code we have the syncservice and conteprovider and authenticatorservice."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In above code we have the syncservice and conteprovider and authenticatorservice."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550456595145,
        "id": "52c266dc-59b6-4895-bf2f-cbc5098c864d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550456595145,
        "parent_id": "87d783fb-0c9f-4358-b9cc-1fc8397426dd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In app we need to create the xml package to add syncadpter and authenticator xml files. "
            ],
            [
              "authenticator.xml",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In app we need to create the xml package to add syncadpter and authenticator xml files. "
          },
          {
            "Text": "authenticator.xml",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550456595145,
        "id": "359e6a68-5692-4141-b78b-79bff4564995",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550456595145,
        "parent_id": "87d783fb-0c9f-4358-b9cc-1fc8397426dd",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n\n\u003caccount-authenticator xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:accountType=\"@string/R.String.accountType\"\n    android:icon=\"@mipmap/ic_launcher\"\n    android:smallIcon=\"@mipmap/ic_launcher\"\n    android:label=\"@string/app_name\"\n    /\u003e"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n\n\u003caccount-authenticator xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:accountType=\"@string/R.String.accountType\"\n    android:icon=\"@mipmap/ic_launcher\"\n    android:smallIcon=\"@mipmap/ic_launcher\"\n    android:label=\"@string/app_name\"\n    /\u003e",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550456595145,
        "id": "3cda2019-837f-44b4-8ae0-80e55c4087e3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550456595145,
        "parent_id": "87d783fb-0c9f-4358-b9cc-1fc8397426dd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "syncadapter",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "syncadapter",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550456595145,
        "id": "21dd4466-acf5-4a03-a696-b8b3f7161d2f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550456595145,
        "parent_id": "87d783fb-0c9f-4358-b9cc-1fc8397426dd",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "\u003csync-adapter xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:contentAuthority=\"@string/R.String.contentAuthority\"\n    android:accountType=\"@string/R.String.accountType\"\n    android:userVisible=\"true\"\n    android:allowParallelSyncs=\"true\"\n    android:isAlwaysSyncable=\"true\"\n    android:supportsUploading=\"false\"/\u003e"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "\u003csync-adapter xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:contentAuthority=\"@string/R.String.contentAuthority\"\n    android:accountType=\"@string/R.String.accountType\"\n    android:userVisible=\"true\"\n    android:allowParallelSyncs=\"true\"\n    android:isAlwaysSyncable=\"true\"\n    android:supportsUploading=\"false\"/\u003e",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550456595145,
        "id": "abaa1b5f-2cef-4fbd-b50a-9f134dde6c42",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550456595145,
        "parent_id": "87d783fb-0c9f-4358-b9cc-1fc8397426dd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Authenticator",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Authenticator",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550456595145,
        "id": "9ee7097e-81c4-411a-9ce5-5cb5ea68f082",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550456595145,
        "parent_id": "87d783fb-0c9f-4358-b9cc-1fc8397426dd",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "import android.accounts.AbstractAccountAuthenticator;\nimport android.accounts.Account;\nimport android.accounts.AccountAuthenticatorResponse;\nimport android.accounts.NetworkErrorException;\nimport android.content.Context;\nimport android.os.Bundle;\n\npublic class Authenticator extends AbstractAccountAuthenticator {\n    private Context mContext;\n    public Authenticator(Context context) {\n        super(context);\n         this.mContext=context;\n    }\n\n    @Override\n    public Bundle editProperties(AccountAuthenticatorResponse accountAuthenticatorResponse, String s) {\n        return null;\n    }\n\n    @Override\n    public Bundle addAccount(AccountAuthenticatorResponse accountAuthenticatorResponse, String s, String s1, String[] strings, Bundle bundle) throws NetworkErrorException {\n        return null;\n    }\n\n    @Override\n    public Bundle confirmCredentials(AccountAuthenticatorResponse accountAuthenticatorResponse, Account account, Bundle bundle) throws NetworkErrorException {\n        return null;\n    }\n\n    @Override\n    public Bundle getAuthToken(AccountAuthenticatorResponse accountAuthenticatorResponse, Account account, String s, Bundle bundle) throws NetworkErrorException {\n        return null;\n    }\n\n    @Override\n    public String getAuthTokenLabel(String s) {\n        return null;\n    }\n\n    @Override\n    public Bundle updateCredentials(AccountAuthenticatorResponse accountAuthenticatorResponse, Account account, String s, Bundle bundle) throws NetworkErrorException {\n        return null;\n    }\n\n    @Override\n    public Bundle hasFeatures(AccountAuthenticatorResponse accountAuthenticatorResponse, Account account, String[] strings) throws NetworkErrorException {\n        return null;\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "import android.accounts.AbstractAccountAuthenticator;\nimport android.accounts.Account;\nimport android.accounts.AccountAuthenticatorResponse;\nimport android.accounts.NetworkErrorException;\nimport android.content.Context;\nimport android.os.Bundle;\n\npublic class Authenticator extends AbstractAccountAuthenticator {\n    private Context mContext;\n    public Authenticator(Context context) {\n        super(context);\n         this.mContext=context;\n    }\n\n    @Override\n    public Bundle editProperties(AccountAuthenticatorResponse accountAuthenticatorResponse, String s) {\n        return null;\n    }\n\n    @Override\n    public Bundle addAccount(AccountAuthenticatorResponse accountAuthenticatorResponse, String s, String s1, String[] strings, Bundle bundle) throws NetworkErrorException {\n        return null;\n    }\n\n    @Override\n    public Bundle confirmCredentials(AccountAuthenticatorResponse accountAuthenticatorResponse, Account account, Bundle bundle) throws NetworkErrorException {\n        return null;\n    }\n\n    @Override\n    public Bundle getAuthToken(AccountAuthenticatorResponse accountAuthenticatorResponse, Account account, String s, Bundle bundle) throws NetworkErrorException {\n        return null;\n    }\n\n    @Override\n    public String getAuthTokenLabel(String s) {\n        return null;\n    }\n\n    @Override\n    public Bundle updateCredentials(AccountAuthenticatorResponse accountAuthenticatorResponse, Account account, String s, Bundle bundle) throws NetworkErrorException {\n        return null;\n    }\n\n    @Override\n    public Bundle hasFeatures(AccountAuthenticatorResponse accountAuthenticatorResponse, Account account, String[] strings) throws NetworkErrorException {\n        return null;\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550456595145,
        "id": "d21ad6aa-8ec9-4232-a105-00fc55f3c909",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550456595145,
        "parent_id": "87d783fb-0c9f-4358-b9cc-1fc8397426dd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "AuthenticatorService",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "AuthenticatorService",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550456595145,
        "id": "4b9c1b01-5c2c-4175-92a7-2c1c24889126",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550456595145,
        "parent_id": "87d783fb-0c9f-4358-b9cc-1fc8397426dd",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class AuthenticatorService extends Service {\n\n    private Authenticator authenticator;\n\n    public AuthenticatorService() {\n        super();\n    }\n\n    @Nullable\n    @Override\n    public IBinder onBind(Intent intent) {\n        IBinder ret = null;\n        if (intent.getAction().equals(AccountManager.ACTION_AUTHENTICATOR_INTENT)) ;\n        ret = getAuthenticator().getIBinder();\n        return ret;\n    }\n\n    public Authenticator getAuthenticator() {\n        if (authenticator == null)\n            authenticator = new Authenticator(this);\n        return authenticator;\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class AuthenticatorService extends Service {\n\n    private Authenticator authenticator;\n\n    public AuthenticatorService() {\n        super();\n    }\n\n    @Nullable\n    @Override\n    public IBinder onBind(Intent intent) {\n        IBinder ret = null;\n        if (intent.getAction().equals(AccountManager.ACTION_AUTHENTICATOR_INTENT)) ;\n        ret = getAuthenticator().getIBinder();\n        return ret;\n    }\n\n    public Authenticator getAuthenticator() {\n        if (authenticator == null)\n            authenticator = new Authenticator(this);\n        return authenticator;\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550456595145,
        "id": "749c3d52-dace-498d-8aa2-637af239a950",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550456595145,
        "parent_id": "87d783fb-0c9f-4358-b9cc-1fc8397426dd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "IpDataDBHelper",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "IpDataDBHelper",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550456595145,
        "id": "ea3dd5ea-382d-42a5-b7de-f312ccf0af4d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550456595145,
        "parent_id": "87d783fb-0c9f-4358-b9cc-1fc8397426dd",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class IpDataDBHelper extends SQLiteOpenHelper {\n   private static final int DATABASE_VERSION=1;\n   private static final String DATABASE_NAME=\"ip.db\";\n   public static final String TABLE_IP_DATA=\"ip\";\n\n   public static final String COLUMN_ID=\"_id\";\n   public static final String COLUMN_IP=\"ip\";\n   public static final String COLUMN_COUNTRY_CODE=\"country_code\";\n   public static final String COLUMN_COUNTRY_NAME=\"country_name\";\n   public static final String COLUMN_CITY=\"city\";\n   public static final String COLUMN_LATITUDE=\"latitude\";\n   public static final String COLUMN_LONGITUDE=\"longitude\";\n\n   public IpDataDBHelper(Context context, String name, SQLiteDatabase.CursorFactory factory, int version) {\n       super(context, DATABASE_NAME, factory, DATABASE_VERSION);\n   }\n\n   @Override\n   public void onCreate(SQLiteDatabase sqLiteDatabase) {\n       String CREATE_TABLE=\"CREATE TABLE \" + TABLE_IP_DATA + \"( \" + COLUMN_ID + \" INTEGER PRIMARY KEY ,\"\n               + COLUMN_IP + \" INTEGER ,\" + COLUMN_COUNTRY_CODE + \" INTEGER ,\" + COLUMN_COUNTRY_NAME +\n               \" TEXT ,\" + COLUMN_CITY + \" TEXT ,\" + COLUMN_LATITUDE + \" INTEGER ,\" + COLUMN_LONGITUDE + \" INTEGER)\";\n       sqLiteDatabase.execSQL(CREATE_TABLE);\n       Log.d(\"SQL\",CREATE_TABLE);\n   }\n\n   @Override\n   public void onUpgrade(SQLiteDatabase sqLiteDatabase, int i, int i1) {\n       sqLiteDatabase.execSQL(\"DROP TABLE IF EXISTS \" + TABLE_IP_DATA);\n       onCreate(sqLiteDatabase);\n   }\n\n   public long AddIPData(ContentValues values)\n   {\n       SQLiteDatabase sqLiteDatabase =getWritableDatabase();\n       long insertedRow=sqLiteDatabase.insert(TABLE_IP_DATA,null,values);\n       return insertedRow;\n   }\n\n   public Cursor getAllIpData()\n   {\n       String[] projection={COLUMN_ID,COLUMN_IP,COLUMN_COUNTRY_CODE,COLUMN_COUNTRY_NAME,COLUMN_CITY,COLUMN_LATITUDE,COLUMN_LONGITUDE};\n       SQLiteDatabase sqLiteDatabase =getReadableDatabase();\n       Cursor cursor = sqLiteDatabase.query(TABLE_IP_DATA,projection,null,null,null,null,null);\n       return cursor;\n   }\n\n   public int deleteAllIpData()\n   {\n       SQLiteDatabase sqLiteDatabase=getWritableDatabase();\n       int rowDeleted=sqLiteDatabase.delete(TABLE_IP_DATA,null,null);\n       return rowDeleted;\n   }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class IpDataDBHelper extends SQLiteOpenHelper {\n   private static final int DATABASE_VERSION=1;\n   private static final String DATABASE_NAME=\"ip.db\";\n   public static final String TABLE_IP_DATA=\"ip\";\n\n   public static final String COLUMN_ID=\"_id\";\n   public static final String COLUMN_IP=\"ip\";\n   public static final String COLUMN_COUNTRY_CODE=\"country_code\";\n   public static final String COLUMN_COUNTRY_NAME=\"country_name\";\n   public static final String COLUMN_CITY=\"city\";\n   public static final String COLUMN_LATITUDE=\"latitude\";\n   public static final String COLUMN_LONGITUDE=\"longitude\";\n\n   public IpDataDBHelper(Context context, String name, SQLiteDatabase.CursorFactory factory, int version) {\n       super(context, DATABASE_NAME, factory, DATABASE_VERSION);\n   }\n\n   @Override\n   public void onCreate(SQLiteDatabase sqLiteDatabase) {\n       String CREATE_TABLE=\"CREATE TABLE \" + TABLE_IP_DATA + \"( \" + COLUMN_ID + \" INTEGER PRIMARY KEY ,\"\n               + COLUMN_IP + \" INTEGER ,\" + COLUMN_COUNTRY_CODE + \" INTEGER ,\" + COLUMN_COUNTRY_NAME +\n               \" TEXT ,\" + COLUMN_CITY + \" TEXT ,\" + COLUMN_LATITUDE + \" INTEGER ,\" + COLUMN_LONGITUDE + \" INTEGER)\";\n       sqLiteDatabase.execSQL(CREATE_TABLE);\n       Log.d(\"SQL\",CREATE_TABLE);\n   }\n\n   @Override\n   public void onUpgrade(SQLiteDatabase sqLiteDatabase, int i, int i1) {\n       sqLiteDatabase.execSQL(\"DROP TABLE IF EXISTS \" + TABLE_IP_DATA);\n       onCreate(sqLiteDatabase);\n   }\n\n   public long AddIPData(ContentValues values)\n   {\n       SQLiteDatabase sqLiteDatabase =getWritableDatabase();\n       long insertedRow=sqLiteDatabase.insert(TABLE_IP_DATA,null,values);\n       return insertedRow;\n   }\n\n   public Cursor getAllIpData()\n   {\n       String[] projection={COLUMN_ID,COLUMN_IP,COLUMN_COUNTRY_CODE,COLUMN_COUNTRY_NAME,COLUMN_CITY,COLUMN_LATITUDE,COLUMN_LONGITUDE};\n       SQLiteDatabase sqLiteDatabase =getReadableDatabase();\n       Cursor cursor = sqLiteDatabase.query(TABLE_IP_DATA,projection,null,null,null,null,null);\n       return cursor;\n   }\n\n   public int deleteAllIpData()\n   {\n       SQLiteDatabase sqLiteDatabase=getWritableDatabase();\n       int rowDeleted=sqLiteDatabase.delete(TABLE_IP_DATA,null,null);\n       return rowDeleted;\n   }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550456595146,
        "id": "3e629a3e-3426-4a27-a2bb-9240edada71f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550456595146,
        "parent_id": "87d783fb-0c9f-4358-b9cc-1fc8397426dd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "MainActivity",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "MainActivity",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550456595146,
        "id": "7ac3ebad-a0e5-4d33-9bf3-9cebc087fb77",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550456595146,
        "parent_id": "87d783fb-0c9f-4358-b9cc-1fc8397426dd",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class MainActivity extends AppCompatActivity {\n\n   private static final String ACCOUNT_TYPE=\"sample.map.com.ipsyncadapter\";\n   private static final String AUTHORITY=\"sample.map.com.ipsyncadapter\";\n   private static final String ACCOUNT_NAME=\"Sync\";\n\n   public TextView mIp,mCountryCod,mCountryName,mCity,mLatitude,mLongitude;\n   CursorAdapter cursorAdapter;\n   Account mAccount;\n   private String TAG=this.getClass().getCanonicalName();\n   ListView mListView;\n   public SharedPreferences mSharedPreferences;\n   @Override\n   protected void onCreate(Bundle savedInstanceState) {\n       super.onCreate(savedInstanceState);\n       setContentView(R.layout.activity_main);\n       mListView = (ListView) findViewById(R.id.list);\n       mIp=(TextView)findViewById(R.id.txt_ip);\n       mCountryCod=(TextView)findViewById(R.id.txt_country_code);\n       mCountryName=(TextView)findViewById(R.id.txt_country_name);\n       mCity=(TextView)findViewById(R.id.txt_city);\n       mLatitude=(TextView)findViewById(R.id.txt_latitude);\n       mLongitude=(TextView)findViewById(R.id.txt_longitude);\n       mSharedPreferences=getSharedPreferences(\"MyIp\",0);\n       \n//Using shared preference iam displaying values in text view. \n       String txtIp=mSharedPreferences.getString(\"ipAdr\",\"\");\n       String txtCC=mSharedPreferences.getString(\"CCode\",\"\");\n       String txtCN=mSharedPreferences.getString(\"CName\",\"\");\n       String txtC=mSharedPreferences.getString(\"City\",\"\");\n       String txtLP=mSharedPreferences.getString(\"Latitude\",\"\");\n       String txtLN=mSharedPreferences.getString(\"Longitude\",\"\");\n\n       mIp.setText(txtIp);\n       mCountryCod.setText(txtCC);\n       mCountryName.setText(txtCN);\n       mCity.setText(txtC);\n       mLatitude.setText(txtLP);\n       mLongitude.setText(txtLN);\n\n       mAccount=createSyncAccount(this);\n//In this code i am using content provider to save data.\n      /* Cursor cursor=getContentResolver().query(MyIPContentProvider.CONTENT_URI,null,null,null,null);\n       cursorAdapter=new SimpleCursorAdapter(this,R.layout.list_item,cursor,new String []{\"ip\",\"country_code\",\"country_name\",\"city\",\"latitude\",\"longitude\"},\n                                                           new int[] {R.id.txt_ip,R.id.txt_country_code,R.id.txt_country_name,R.id.txt_city,R.id.txt_latitude,R.id.txt_longitude},0);\n\n       mListView.setAdapter(cursorAdapter);\n       getContentResolver().registerContentObserver(MyIPContentProvider.CONTENT_URI,true,new StockContentObserver(new Handler()));\n*/\n       Bundle settingBundle=new Bundle();\n       settingBundle.putBoolean(ContentResolver.SYNC_EXTRAS_MANUAL,true);\n       settingBundle.putBoolean(ContentResolver.SYNC_EXTRAS_EXPEDITED,true);\n       ContentResolver.requestSync(mAccount,AUTHORITY,settingBundle);\n       ContentResolver.setSyncAutomatically(mAccount,AUTHORITY,true);\n       ContentResolver.addPeriodicSync(mAccount,AUTHORITY,Bundle.EMPTY,60);\n   }\n\n   private Account createSyncAccount(MainActivity mainActivity) {\n       Account account=new Account(ACCOUNT_NAME,ACCOUNT_TYPE);\n       AccountManager accountManager=(AccountManager)mainActivity.getSystemService(ACCOUNT_SERVICE);\n       if(accountManager.addAccountExplicitly(account,null,null))\n       {\n\n       }else\n       {\n\n       }\n       return account;\n   }\n\n\n   private class StockContentObserver extends ContentObserver {\n       @Override\n       public void onChange(boolean selfChange, Uri uri) {\n           Log.d(TAG, \"CHANGE OBSERVED AT URI: \" + uri);\n           cursorAdapter.swapCursor(getContentResolver().query(MyIPContentProvider.CONTENT_URI, null, null, null, null));\n       }\n\n       public StockContentObserver(Handler handler) {\n           super(handler);\n\n       }\n   }\n   @Override\n   protected void onResume() {\n       super.onResume();\n       registerReceiver(syncStaredReceiver, new IntentFilter(SyncAdapter.SYNC_STARTED));\n       registerReceiver(syncFinishedReceiver, new IntentFilter(SyncAdapter.SYNC_FINISHED));\n   }\n\n   @Override\n   protected void onPause() {\n       super.onPause();\n       unregisterReceiver(syncStaredReceiver);\n       unregisterReceiver(syncFinishedReceiver);\n   }\n   private BroadcastReceiver syncFinishedReceiver = new BroadcastReceiver() {\n\n       @Override\n       public void onReceive(Context context, Intent intent) {\n           Log.d(TAG, \"Sync finished!\");\n           Toast.makeText(getApplicationContext(), \"Sync Finished\", Toast.LENGTH_SHORT).show();\n       }\n   };\n   private BroadcastReceiver syncStaredReceiver = new BroadcastReceiver() {\n\n       @Override\n       public void onReceive(Context context, Intent intent) {\n           Log.d(TAG, \"Sync started!\");\n           Toast.makeText(getApplicationContext(), \"Sync started...\", Toast.LENGTH_SHORT).show();\n       }\n   };\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class MainActivity extends AppCompatActivity {\n\n   private static final String ACCOUNT_TYPE=\"sample.map.com.ipsyncadapter\";\n   private static final String AUTHORITY=\"sample.map.com.ipsyncadapter\";\n   private static final String ACCOUNT_NAME=\"Sync\";\n\n   public TextView mIp,mCountryCod,mCountryName,mCity,mLatitude,mLongitude;\n   CursorAdapter cursorAdapter;\n   Account mAccount;\n   private String TAG=this.getClass().getCanonicalName();\n   ListView mListView;\n   public SharedPreferences mSharedPreferences;\n   @Override\n   protected void onCreate(Bundle savedInstanceState) {\n       super.onCreate(savedInstanceState);\n       setContentView(R.layout.activity_main);\n       mListView = (ListView) findViewById(R.id.list);\n       mIp=(TextView)findViewById(R.id.txt_ip);\n       mCountryCod=(TextView)findViewById(R.id.txt_country_code);\n       mCountryName=(TextView)findViewById(R.id.txt_country_name);\n       mCity=(TextView)findViewById(R.id.txt_city);\n       mLatitude=(TextView)findViewById(R.id.txt_latitude);\n       mLongitude=(TextView)findViewById(R.id.txt_longitude);\n       mSharedPreferences=getSharedPreferences(\"MyIp\",0);\n       \n//Using shared preference iam displaying values in text view. \n       String txtIp=mSharedPreferences.getString(\"ipAdr\",\"\");\n       String txtCC=mSharedPreferences.getString(\"CCode\",\"\");\n       String txtCN=mSharedPreferences.getString(\"CName\",\"\");\n       String txtC=mSharedPreferences.getString(\"City\",\"\");\n       String txtLP=mSharedPreferences.getString(\"Latitude\",\"\");\n       String txtLN=mSharedPreferences.getString(\"Longitude\",\"\");\n\n       mIp.setText(txtIp);\n       mCountryCod.setText(txtCC);\n       mCountryName.setText(txtCN);\n       mCity.setText(txtC);\n       mLatitude.setText(txtLP);\n       mLongitude.setText(txtLN);\n\n       mAccount=createSyncAccount(this);\n//In this code i am using content provider to save data.\n      /* Cursor cursor=getContentResolver().query(MyIPContentProvider.CONTENT_URI,null,null,null,null);\n       cursorAdapter=new SimpleCursorAdapter(this,R.layout.list_item,cursor,new String []{\"ip\",\"country_code\",\"country_name\",\"city\",\"latitude\",\"longitude\"},\n                                                           new int[] {R.id.txt_ip,R.id.txt_country_code,R.id.txt_country_name,R.id.txt_city,R.id.txt_latitude,R.id.txt_longitude},0);\n\n       mListView.setAdapter(cursorAdapter);\n       getContentResolver().registerContentObserver(MyIPContentProvider.CONTENT_URI,true,new StockContentObserver(new Handler()));\n*/\n       Bundle settingBundle=new Bundle();\n       settingBundle.putBoolean(ContentResolver.SYNC_EXTRAS_MANUAL,true);\n       settingBundle.putBoolean(ContentResolver.SYNC_EXTRAS_EXPEDITED,true);\n       ContentResolver.requestSync(mAccount,AUTHORITY,settingBundle);\n       ContentResolver.setSyncAutomatically(mAccount,AUTHORITY,true);\n       ContentResolver.addPeriodicSync(mAccount,AUTHORITY,Bundle.EMPTY,60);\n   }\n\n   private Account createSyncAccount(MainActivity mainActivity) {\n       Account account=new Account(ACCOUNT_NAME,ACCOUNT_TYPE);\n       AccountManager accountManager=(AccountManager)mainActivity.getSystemService(ACCOUNT_SERVICE);\n       if(accountManager.addAccountExplicitly(account,null,null))\n       {\n\n       }else\n       {\n\n       }\n       return account;\n   }\n\n\n   private class StockContentObserver extends ContentObserver {\n       @Override\n       public void onChange(boolean selfChange, Uri uri) {\n           Log.d(TAG, \"CHANGE OBSERVED AT URI: \" + uri);\n           cursorAdapter.swapCursor(getContentResolver().query(MyIPContentProvider.CONTENT_URI, null, null, null, null));\n       }\n\n       public StockContentObserver(Handler handler) {\n           super(handler);\n\n       }\n   }\n   @Override\n   protected void onResume() {\n       super.onResume();\n       registerReceiver(syncStaredReceiver, new IntentFilter(SyncAdapter.SYNC_STARTED));\n       registerReceiver(syncFinishedReceiver, new IntentFilter(SyncAdapter.SYNC_FINISHED));\n   }\n\n   @Override\n   protected void onPause() {\n       super.onPause();\n       unregisterReceiver(syncStaredReceiver);\n       unregisterReceiver(syncFinishedReceiver);\n   }\n   private BroadcastReceiver syncFinishedReceiver = new BroadcastReceiver() {\n\n       @Override\n       public void onReceive(Context context, Intent intent) {\n           Log.d(TAG, \"Sync finished!\");\n           Toast.makeText(getApplicationContext(), \"Sync Finished\", Toast.LENGTH_SHORT).show();\n       }\n   };\n   private BroadcastReceiver syncStaredReceiver = new BroadcastReceiver() {\n\n       @Override\n       public void onReceive(Context context, Intent intent) {\n           Log.d(TAG, \"Sync started!\");\n           Toast.makeText(getApplicationContext(), \"Sync started...\", Toast.LENGTH_SHORT).show();\n       }\n   };\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550456595146,
        "id": "1d8ee2e5-fb36-4e6f-aea5-7a9fa7281a65",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550456595146,
        "parent_id": "87d783fb-0c9f-4358-b9cc-1fc8397426dd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "MyIPContentProvider",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "MyIPContentProvider",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550456595146,
        "id": "388526b8-658e-4b23-aae1-47653142825e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550456595146,
        "parent_id": "87d783fb-0c9f-4358-b9cc-1fc8397426dd",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class MyIPContentProvider extends ContentProvider {\n\npublic static final int IP_DATA=1;\nprivate static final String AUTHORITY=\"sample.map.com.ipsyncadapter\";\nprivate static final String TABLE_IP_DATA=\"ip_data\";\npublic static final Uri CONTENT_URI=Uri.parse(\"content://\" + AUTHORITY + '/' + TABLE_IP_DATA);\nprivate static final UriMatcher URI_MATCHER= new UriMatcher(UriMatcher.NO_MATCH);\n\nstatic\n{\n    URI_MATCHER.addURI(AUTHORITY,TABLE_IP_DATA,IP_DATA);\n}\n\nprivate IpDataDBHelper myDB;\n\n@Override\npublic boolean onCreate() {\n    myDB=new IpDataDBHelper(getContext(),null,null,1);\n    return false;\n}\n\n@Nullable\n@Override\npublic Cursor query(Uri uri, String[] strings, String s, String[] strings1, String s1) {\n    int uriType=URI_MATCHER.match(uri);\n    Cursor cursor=null;\n    switch (uriType)\n    {\n        case IP_DATA:\n            cursor=myDB.getAllIpData();\n            break;\n        default:\n            throw new IllegalArgumentException(\"UNKNOWN URL\");\n    }\n    cursor.setNotificationUri(getContext().getContentResolver(), uri);\n    return cursor;\n}\n\n@Nullable\n@Override\npublic String getType(Uri uri) {\n    return null;\n}\n\n@Nullable\n@Override\npublic Uri insert(Uri uri, ContentValues contentValues) {\n    int uriType=URI_MATCHER.match(uri);\n    long id=0;\n    switch (uriType)\n    {\n        case IP_DATA:\n            id=myDB.AddIPData(contentValues);\n            break;\n        default:\n            throw new IllegalArgumentException(\"UNKNOWN URI :\" +uri);\n    }\n    getContext().getContentResolver().notifyChange(uri,null);\n    return Uri.parse(contentValues + \"/\" + id);\n}\n\n@Override\npublic int delete(Uri uri, String s, String[] strings) {\n    int uriType=URI_MATCHER.match(uri);\n    int rowsDeleted=0;\n\n    switch (uriType)\n    {\n        case IP_DATA:\n            rowsDeleted=myDB.deleteAllIpData();\n            break;\n        default:\n            throw new IllegalArgumentException(\"UNKNOWN URI :\" +uri);\n    }\n    getContext().getContentResolver().notifyChange(uri,null);\n    return rowsDeleted;\n}\n\n@Override\npublic int update(Uri uri, ContentValues contentValues, String s, String[] strings) {\n    return 0;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class MyIPContentProvider extends ContentProvider {\n\npublic static final int IP_DATA=1;\nprivate static final String AUTHORITY=\"sample.map.com.ipsyncadapter\";\nprivate static final String TABLE_IP_DATA=\"ip_data\";\npublic static final Uri CONTENT_URI=Uri.parse(\"content://\" + AUTHORITY + '/' + TABLE_IP_DATA);\nprivate static final UriMatcher URI_MATCHER= new UriMatcher(UriMatcher.NO_MATCH);\n\nstatic\n{\n    URI_MATCHER.addURI(AUTHORITY,TABLE_IP_DATA,IP_DATA);\n}\n\nprivate IpDataDBHelper myDB;\n\n@Override\npublic boolean onCreate() {\n    myDB=new IpDataDBHelper(getContext(),null,null,1);\n    return false;\n}\n\n@Nullable\n@Override\npublic Cursor query(Uri uri, String[] strings, String s, String[] strings1, String s1) {\n    int uriType=URI_MATCHER.match(uri);\n    Cursor cursor=null;\n    switch (uriType)\n    {\n        case IP_DATA:\n            cursor=myDB.getAllIpData();\n            break;\n        default:\n            throw new IllegalArgumentException(\"UNKNOWN URL\");\n    }\n    cursor.setNotificationUri(getContext().getContentResolver(), uri);\n    return cursor;\n}\n\n@Nullable\n@Override\npublic String getType(Uri uri) {\n    return null;\n}\n\n@Nullable\n@Override\npublic Uri insert(Uri uri, ContentValues contentValues) {\n    int uriType=URI_MATCHER.match(uri);\n    long id=0;\n    switch (uriType)\n    {\n        case IP_DATA:\n            id=myDB.AddIPData(contentValues);\n            break;\n        default:\n            throw new IllegalArgumentException(\"UNKNOWN URI :\" +uri);\n    }\n    getContext().getContentResolver().notifyChange(uri,null);\n    return Uri.parse(contentValues + \"/\" + id);\n}\n\n@Override\npublic int delete(Uri uri, String s, String[] strings) {\n    int uriType=URI_MATCHER.match(uri);\n    int rowsDeleted=0;\n\n    switch (uriType)\n    {\n        case IP_DATA:\n            rowsDeleted=myDB.deleteAllIpData();\n            break;\n        default:\n            throw new IllegalArgumentException(\"UNKNOWN URI :\" +uri);\n    }\n    getContext().getContentResolver().notifyChange(uri,null);\n    return rowsDeleted;\n}\n\n@Override\npublic int update(Uri uri, ContentValues contentValues, String s, String[] strings) {\n    return 0;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550456595146,
        "id": "f8b1588a-65b8-4336-93cb-14832d7e0568",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550456595146,
        "parent_id": "87d783fb-0c9f-4358-b9cc-1fc8397426dd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "}"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "}"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550456595146,
        "id": "14c6ec61-b133-48bc-8720-31b37b206238",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550456595146,
        "parent_id": "87d783fb-0c9f-4358-b9cc-1fc8397426dd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "SyncAdapter",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "SyncAdapter",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550456595146,
        "id": "eb710f95-d319-463d-85ba-f44fb123e561",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550456595146,
        "parent_id": "87d783fb-0c9f-4358-b9cc-1fc8397426dd",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class SyncAdapter extends AbstractThreadedSyncAdapter {\nContentResolver mContentResolver;\nContext mContext;\npublic static final String SYNC_STARTED=\"Sync Started\";\npublic static final String SYNC_FINISHED=\"Sync Finished\";\nprivate static final String TAG=SyncAdapter.class.getCanonicalName();\npublic SharedPreferences mSharedPreferences;\n\npublic SyncAdapter(Context context, boolean autoInitialize) {\n    super(context, autoInitialize);\n    this.mContext=context;\n    mContentResolver=context.getContentResolver();\n    Log.i(\"SyncAdapter\",\"SyncAdapter\");\n}\n\n@Override\npublic void onPerformSync(Account account, Bundle bundle, String s, ContentProviderClient contentProviderClient, SyncResult syncResult) {\n\n    Intent intent = new Intent(SYNC_STARTED);\n    mContext.sendBroadcast(intent);\n\n    Log.i(TAG, \"onPerformSync\");\n\n    intent = new Intent(SYNC_FINISHED);\n    mContext.sendBroadcast(intent);\n    mSharedPreferences =mContext.getSharedPreferences(\"MyIp\",0);\n    SharedPreferences.Editor editor=mSharedPreferences.edit();\n\n    mContentResolver.delete(MyIPContentProvider.CONTENT_URI,null,null);\n\n    String data=\"\";\n\n    try {\n        URL url =new URL(\"https://freegeoip.net/json/\");\n        Log.d(TAG, \"URL :\"+url);\n        HttpURLConnection connection=(HttpURLConnection)url.openConnection();\n        Log.d(TAG,\"Connection :\"+connection);\n        connection.connect();\n        Log.d(TAG,\"Connection 1:\"+connection);\n        InputStream inputStream=connection.getInputStream();\n        data=getInputData(inputStream);\n        Log.d(TAG,\"Data :\"+data);\n\n        if (data != null || !data.equals(\"null\")) {\n            JSONObject jsonObject = new JSONObject(data);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class SyncAdapter extends AbstractThreadedSyncAdapter {\nContentResolver mContentResolver;\nContext mContext;\npublic static final String SYNC_STARTED=\"Sync Started\";\npublic static final String SYNC_FINISHED=\"Sync Finished\";\nprivate static final String TAG=SyncAdapter.class.getCanonicalName();\npublic SharedPreferences mSharedPreferences;\n\npublic SyncAdapter(Context context, boolean autoInitialize) {\n    super(context, autoInitialize);\n    this.mContext=context;\n    mContentResolver=context.getContentResolver();\n    Log.i(\"SyncAdapter\",\"SyncAdapter\");\n}\n\n@Override\npublic void onPerformSync(Account account, Bundle bundle, String s, ContentProviderClient contentProviderClient, SyncResult syncResult) {\n\n    Intent intent = new Intent(SYNC_STARTED);\n    mContext.sendBroadcast(intent);\n\n    Log.i(TAG, \"onPerformSync\");\n\n    intent = new Intent(SYNC_FINISHED);\n    mContext.sendBroadcast(intent);\n    mSharedPreferences =mContext.getSharedPreferences(\"MyIp\",0);\n    SharedPreferences.Editor editor=mSharedPreferences.edit();\n\n    mContentResolver.delete(MyIPContentProvider.CONTENT_URI,null,null);\n\n    String data=\"\";\n\n    try {\n        URL url =new URL(\"https://freegeoip.net/json/\");\n        Log.d(TAG, \"URL :\"+url);\n        HttpURLConnection connection=(HttpURLConnection)url.openConnection();\n        Log.d(TAG,\"Connection :\"+connection);\n        connection.connect();\n        Log.d(TAG,\"Connection 1:\"+connection);\n        InputStream inputStream=connection.getInputStream();\n        data=getInputData(inputStream);\n        Log.d(TAG,\"Data :\"+data);\n\n        if (data != null || !data.equals(\"null\")) {\n            JSONObject jsonObject = new JSONObject(data);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550456595146,
        "id": "8162abf6-2691-4656-b80a-d47b6ec8b6c4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550456595146,
        "parent_id": "87d783fb-0c9f-4358-b9cc-1fc8397426dd",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "String ipa = jsonObject.getString(\"ip\");\nString country_code = jsonObject.getString(\"country_code\");\nString country_name = jsonObject.getString(\"country_name\");\nString region_code=jsonObject.getString(\"region_code\");\nString region_name=jsonObject.getString(\"region_name\");\nString zip_code=jsonObject.getString(\"zip_code\");\nString time_zone=jsonObject.getString(\"time_zone\");\nString metro_code=jsonObject.getString(\"metro_code\");\n\nString city = jsonObject.getString(\"city\");\nString latitude = jsonObject.getString(\"latitude\");\nString longitude = jsonObject.getString(\"longitude\");\n/* ContentValues values = new ContentValues();\nvalues.put(\"ip\", ipa);\nvalues.put(\"country_code\", country_code);\nvalues.put(\"country_name\", country_name);\nvalues.put(\"city\", city);\nvalues.put(\"latitude\", latitude);\nvalues.put(\"longitude\", longitude);*/\n//Using cursor adapter for results.\n//mContentResolver.insert(MyIPContentProvider.CONTENT_URI, values);\n\n//Using Shared preference for results.\neditor.putString(\"ipAdr\",ipa);\neditor.putString(\"CCode\",country_code);\neditor.putString(\"CName\",country_name);\neditor.putString(\"City\",city);\neditor.putString(\"Latitude\",latitude);\neditor.putString(\"Longitude\",longitude);\neditor.commit();\n\n}\n}catch(Exception e){\ne.printStackTrace();\n}\n\n}\n\nprivate String getInputData(InputStream inputStream) throws IOException {\nStringBuilder builder=new StringBuilder();\nBufferedReader bufferedReader=new BufferedReader(new InputStreamReader(inputStream));\n//String data=null;\n/*Log.d(TAG,\"Builder 2:\"+ bufferedReader.readLine());\nwhile ((data=bufferedReader.readLine())!= null);\n{\nbuilder.append(data);\nLog.d(TAG,\"Builder :\"+data);\n}\nLog.d(TAG,\"Builder 1 :\"+data);\nbufferedReader.close();*/\nString data=bufferedReader.readLine();\nbufferedReader.close();\nreturn data.toString();\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "String ipa = jsonObject.getString(\"ip\");\nString country_code = jsonObject.getString(\"country_code\");\nString country_name = jsonObject.getString(\"country_name\");\nString region_code=jsonObject.getString(\"region_code\");\nString region_name=jsonObject.getString(\"region_name\");\nString zip_code=jsonObject.getString(\"zip_code\");\nString time_zone=jsonObject.getString(\"time_zone\");\nString metro_code=jsonObject.getString(\"metro_code\");\n\nString city = jsonObject.getString(\"city\");\nString latitude = jsonObject.getString(\"latitude\");\nString longitude = jsonObject.getString(\"longitude\");\n/* ContentValues values = new ContentValues();\nvalues.put(\"ip\", ipa);\nvalues.put(\"country_code\", country_code);\nvalues.put(\"country_name\", country_name);\nvalues.put(\"city\", city);\nvalues.put(\"latitude\", latitude);\nvalues.put(\"longitude\", longitude);*/\n//Using cursor adapter for results.\n//mContentResolver.insert(MyIPContentProvider.CONTENT_URI, values);\n\n//Using Shared preference for results.\neditor.putString(\"ipAdr\",ipa);\neditor.putString(\"CCode\",country_code);\neditor.putString(\"CName\",country_name);\neditor.putString(\"City\",city);\neditor.putString(\"Latitude\",latitude);\neditor.putString(\"Longitude\",longitude);\neditor.commit();\n\n}\n}catch(Exception e){\ne.printStackTrace();\n}\n\n}\n\nprivate String getInputData(InputStream inputStream) throws IOException {\nStringBuilder builder=new StringBuilder();\nBufferedReader bufferedReader=new BufferedReader(new InputStreamReader(inputStream));\n//String data=null;\n/*Log.d(TAG,\"Builder 2:\"+ bufferedReader.readLine());\nwhile ((data=bufferedReader.readLine())!= null);\n{\nbuilder.append(data);\nLog.d(TAG,\"Builder :\"+data);\n}\nLog.d(TAG,\"Builder 1 :\"+data);\nbufferedReader.close();*/\nString data=bufferedReader.readLine();\nbufferedReader.close();\nreturn data.toString();\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550456595146,
        "id": "45e0bcc2-6700-4a26-b1e0-5b6c148132fd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550456595146,
        "parent_id": "87d783fb-0c9f-4358-b9cc-1fc8397426dd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "}"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "}"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550456595146,
        "id": "b387b5ba-9ce3-4403-ad96-86c7e50c20e1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550456595146,
        "parent_id": "87d783fb-0c9f-4358-b9cc-1fc8397426dd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "SyncService",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "SyncService",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550456595146,
        "id": "9e8d4505-750f-48c6-82ce-48b12aac8f84",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550456595146,
        "parent_id": "87d783fb-0c9f-4358-b9cc-1fc8397426dd",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class SyncService extends Service {\nprivate static SyncAdapter syncAdapter=null;\nprivate static final Object syncAdapterLock=new Object();\n\n@Override\npublic void onCreate() {\n    synchronized (syncAdapterLock)\n    {\n        if(syncAdapter==null)\n        {\n            syncAdapter =new SyncAdapter(getApplicationContext(),true);\n        }\n    }\n}\n\n@Nullable\n@Override\npublic IBinder onBind(Intent intent) {\n    return syncAdapter.getSyncAdapterBinder();\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class SyncService extends Service {\nprivate static SyncAdapter syncAdapter=null;\nprivate static final Object syncAdapterLock=new Object();\n\n@Override\npublic void onCreate() {\n    synchronized (syncAdapterLock)\n    {\n        if(syncAdapter==null)\n        {\n            syncAdapter =new SyncAdapter(getApplicationContext(),true);\n        }\n    }\n}\n\n@Nullable\n@Override\npublic IBinder onBind(Intent intent) {\n    return syncAdapter.getSyncAdapterBinder();\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550456595147,
        "id": "251f229c-95c8-4a06-bdfc-30afc23c3c7d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550456595147,
        "parent_id": "87d783fb-0c9f-4358-b9cc-1fc8397426dd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "}"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "}"
          }
        ]
      }
    ],
    "title": "010 Sync adapter with every min requesting value from server."
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}