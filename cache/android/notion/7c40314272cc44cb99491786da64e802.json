{
  "ID": "7c403142-72cc-44cb-9949-1786da64e802",
  "Root": {
    "alive": true,
    "content": [
      "a0450cfb-160b-4136-a1e5-de0ae5d5bddd",
      "5aa43c66-6ede-49ad-83f0-2554a92fe8c2",
      "93f4dfde-4d09-47eb-9b06-c051eeccdae4",
      "6df7a422-2240-4452-a246-c199932e899e",
      "761e1dc6-3646-47c1-a799-3637f5ceab3a"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550449566941,
    "id": "7c403142-72cc-44cb-9949-1786da64e802",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550449566941,
    "parent_id": "761f15e8-3ef3-4bb0-bef6-598eb45647a6",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "010 AES encryption of data using password in a secure way"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550449566939,
        "id": "a0450cfb-160b-4136-a1e5-de0ae5d5bddd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550449566939,
        "parent_id": "7c403142-72cc-44cb-9949-1786da64e802",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The following example encrypts a given data block using "
            ],
            [
              "AES",
              [
                [
                  "a",
                  "https://en.wikipedia.org/wiki/Advanced_Encryption_Standard"
                ]
              ]
            ],
            [
              ". The encryption key is derived in a secure way (random salt, 1000 rounds of SHA-256). The encryption uses AES in "
            ],
            [
              "CBC",
              [
                [
                  "a",
                  "https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#CBC"
                ]
              ]
            ],
            [
              " mode with random "
            ],
            [
              "IV",
              [
                [
                  "a",
                  "https://en.wikipedia.org/wiki/Initialization_vector"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The following example encrypts a given data block using "
          },
          {
            "Text": "AES",
            "Link": "https://en.wikipedia.org/wiki/Advanced_Encryption_Standard"
          },
          {
            "Text": ". The encryption key is derived in a secure way (random salt, 1000 rounds of SHA-256). The encryption uses AES in "
          },
          {
            "Text": "CBC",
            "Link": "https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#CBC"
          },
          {
            "Text": " mode with random "
          },
          {
            "Text": "IV",
            "Link": "https://en.wikipedia.org/wiki/Initialization_vector"
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550449566940,
        "id": "5aa43c66-6ede-49ad-83f0-2554a92fe8c2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550449566940,
        "parent_id": "7c403142-72cc-44cb-9949-1786da64e802",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note that the data stored in the class "
            ],
            [
              "EncryptedData",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " ("
            ],
            [
              "salt",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "iv",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", and "
            ],
            [
              "encryptedData",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") can be concatenated to a single byte array. You can then save the data or transmit it to the recipient."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note that the data stored in the class "
          },
          {
            "Text": "EncryptedData",
            "AttrFlags": 2
          },
          {
            "Text": " ("
          },
          {
            "Text": "salt",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "iv",
            "AttrFlags": 2
          },
          {
            "Text": ", and "
          },
          {
            "Text": "encryptedData",
            "AttrFlags": 2
          },
          {
            "Text": ") can be concatenated to a single byte array. You can then save the data or transmit it to the recipient."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550449566941,
        "id": "93f4dfde-4d09-47eb-9b06-c051eeccdae4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550449566941,
        "parent_id": "7c403142-72cc-44cb-9949-1786da64e802",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "private static final int SALT_BYTES = 8;\nprivate static final int PBK_ITERATIONS = 1000;\nprivate static final String ENCRYPTION_ALGORITHM = \"AES/CBC/PKCS5Padding\";\nprivate static final String PBE_ALGORITHM = \"PBEwithSHA256and128BITAES-CBC-BC\";\n\nprivate EncryptedData encrypt(String password, byte[] data) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeySpecException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException, InvalidAlgorithmParameterException {\n    EncryptedData encData = new EncryptedData();\n    SecureRandom rnd = new SecureRandom();\n    encData.salt = new byte[SALT_BYTES];\n    encData.iv = new byte[16]; // AES block size\n    rnd.nextBytes(encData.salt);\n    rnd.nextBytes(encData.iv);\n\n    PBEKeySpec keySpec = new PBEKeySpec(password.toCharArray(), encData.salt, PBK_ITERATIONS);\n    SecretKeyFactory secretKeyFactory = SecretKeyFactory.getInstance(PBE_ALGORITHM);\n    Key key = secretKeyFactory.generateSecret(keySpec);\n    Cipher cipher = Cipher.getInstance(ENCRYPTION_ALGORITHM);\n    IvParameterSpec ivSpec = new IvParameterSpec(encData.iv);\n    cipher.init(Cipher.ENCRYPT_MODE, key, ivSpec);\n    encData.encryptedData = cipher.doFinal(data);\n    return encData;\n}\n\nprivate byte[] decrypt(String password, byte[] salt, byte[] iv, byte[] encryptedData) throws NoSuchAlgorithmException, InvalidKeySpecException, NoSuchPaddingException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException, InvalidAlgorithmParameterException {\n    PBEKeySpec keySpec = new PBEKeySpec(password.toCharArray(), salt, PBK_ITERATIONS);\n    SecretKeyFactory secretKeyFactory = SecretKeyFactory.getInstance(PBE_ALGORITHM);\n    Key key = secretKeyFactory.generateSecret(keySpec);\n    Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n    IvParameterSpec ivSpec = new IvParameterSpec(iv);\n    cipher.init(Cipher.DECRYPT_MODE, key, ivSpec);\n    return cipher.doFinal(encryptedData);\n}\n\nprivate static class EncryptedData {\n    public byte[] salt;\n    public byte[] iv;\n    public byte[] encryptedData;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "private static final int SALT_BYTES = 8;\nprivate static final int PBK_ITERATIONS = 1000;\nprivate static final String ENCRYPTION_ALGORITHM = \"AES/CBC/PKCS5Padding\";\nprivate static final String PBE_ALGORITHM = \"PBEwithSHA256and128BITAES-CBC-BC\";\n\nprivate EncryptedData encrypt(String password, byte[] data) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeySpecException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException, InvalidAlgorithmParameterException {\n    EncryptedData encData = new EncryptedData();\n    SecureRandom rnd = new SecureRandom();\n    encData.salt = new byte[SALT_BYTES];\n    encData.iv = new byte[16]; // AES block size\n    rnd.nextBytes(encData.salt);\n    rnd.nextBytes(encData.iv);\n\n    PBEKeySpec keySpec = new PBEKeySpec(password.toCharArray(), encData.salt, PBK_ITERATIONS);\n    SecretKeyFactory secretKeyFactory = SecretKeyFactory.getInstance(PBE_ALGORITHM);\n    Key key = secretKeyFactory.generateSecret(keySpec);\n    Cipher cipher = Cipher.getInstance(ENCRYPTION_ALGORITHM);\n    IvParameterSpec ivSpec = new IvParameterSpec(encData.iv);\n    cipher.init(Cipher.ENCRYPT_MODE, key, ivSpec);\n    encData.encryptedData = cipher.doFinal(data);\n    return encData;\n}\n\nprivate byte[] decrypt(String password, byte[] salt, byte[] iv, byte[] encryptedData) throws NoSuchAlgorithmException, InvalidKeySpecException, NoSuchPaddingException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException, InvalidAlgorithmParameterException {\n    PBEKeySpec keySpec = new PBEKeySpec(password.toCharArray(), salt, PBK_ITERATIONS);\n    SecretKeyFactory secretKeyFactory = SecretKeyFactory.getInstance(PBE_ALGORITHM);\n    Key key = secretKeyFactory.generateSecret(keySpec);\n    Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n    IvParameterSpec ivSpec = new IvParameterSpec(iv);\n    cipher.init(Cipher.DECRYPT_MODE, key, ivSpec);\n    return cipher.doFinal(encryptedData);\n}\n\nprivate static class EncryptedData {\n    public byte[] salt;\n    public byte[] iv;\n    public byte[] encryptedData;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550449566941,
        "id": "6df7a422-2240-4452-a246-c199932e899e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550449566941,
        "parent_id": "7c403142-72cc-44cb-9949-1786da64e802",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The following example code shows how to test encryption and decryption:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The following example code shows how to test encryption and decryption:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550449566941,
        "id": "761e1dc6-3646-47c1-a799-3637f5ceab3a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550449566941,
        "parent_id": "7c403142-72cc-44cb-9949-1786da64e802",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "try {\n    String password = \"test12345\";\n    byte[] data = \"plaintext11223344556677889900\".getBytes(\"UTF-8\");\n    EncryptedData encData = encrypt(password, data);\n    byte[] decryptedData = decrypt(password, encData.salt, encData.iv, encData.encryptedData);\n    String decDataAsString = new String(decryptedData, \"UTF-8\");\n    Toast.makeText(this, decDataAsString, Toast.LENGTH_LONG).show();\n} catch (Exception e) {\n    e.printStackTrace();\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "try {\n    String password = \"test12345\";\n    byte[] data = \"plaintext11223344556677889900\".getBytes(\"UTF-8\");\n    EncryptedData encData = encrypt(password, data);\n    byte[] decryptedData = decrypt(password, encData.salt, encData.iv, encData.encryptedData);\n    String decDataAsString = new String(decryptedData, \"UTF-8\");\n    Toast.makeText(this, decDataAsString, Toast.LENGTH_LONG).show();\n} catch (Exception e) {\n    e.printStackTrace();\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "010 AES encryption of data using password in a secure way"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}