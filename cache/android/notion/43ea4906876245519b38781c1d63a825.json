{
  "ID": "43ea4906-8762-4551-9b38-781c1d63a825",
  "Root": {
    "alive": true,
    "content": [
      "5b6a9a0a-3a14-46ab-8cfc-b048a705bfc6",
      "4f3d9f95-2a6f-46f7-b8ca-9b64262b888c",
      "46683996-a233-4916-853a-926067f8eacb",
      "5a4125ad-d1b0-4b7f-a449-ea4294e98ee8",
      "760fd7f2-ba29-4a4f-a3bf-532f8ce8af2c",
      "812314ad-77f8-4be1-a965-9b9fe4df986d",
      "8daf2541-5dcc-4ff9-8232-01dc40ef8d8b",
      "87728ff5-1ab1-4f75-9610-4e2a7180e0a2",
      "3f5667e4-5472-4205-9324-0e1f4dcd78fa",
      "e199b2bd-4496-445d-b007-e442f929c200",
      "814c7535-fffe-42a0-810b-efd318e74a8d",
      "c09443ae-e905-4e93-be70-77df445c6fa9",
      "fcf980ff-a065-400e-8fce-cad9437c14f8",
      "eb2bd9fd-fd8d-41a1-abba-46c7f983aa88"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550444687932,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "43ea4906-8762-4551-9b38-781c1d63a825",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551736955803,
    "parent_id": "577ee794-a9c3-4ded-8824-6307ea4044f3",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Animate data change"
        ]
      ]
    },
    "type": "page",
    "version": 5,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550444687924,
        "id": "5b6a9a0a-3a14-46ab-8cfc-b048a705bfc6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550444687924,
        "parent_id": "43ea4906-8762-4551-9b38-781c1d63a825",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "RecyclerView",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will perform a relevant animation if any of the “notify” methods are used except for "
            ],
            [
              "notifyDataSetChanged",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "; this includes "
            ],
            [
              "notifyItemChanged",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "notifyItemInserted",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "notifyItemMoved",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "notifyItemRemoved",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", etc."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "RecyclerView",
            "AttrFlags": 2
          },
          {
            "Text": " will perform a relevant animation if any of the “notify” methods are used except for "
          },
          {
            "Text": "notifyDataSetChanged",
            "AttrFlags": 2
          },
          {
            "Text": "; this includes "
          },
          {
            "Text": "notifyItemChanged",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "notifyItemInserted",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "notifyItemMoved",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "notifyItemRemoved",
            "AttrFlags": 2
          },
          {
            "Text": ", etc."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550444687928,
        "id": "4f3d9f95-2a6f-46f7-b8ca-9b64262b888c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550444687928,
        "parent_id": "43ea4906-8762-4551-9b38-781c1d63a825",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The adapter should extend this class instead of "
            ],
            [
              "RecyclerView.Adapter",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The adapter should extend this class instead of "
          },
          {
            "Text": "RecyclerView.Adapter",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550444687928,
        "id": "46683996-a233-4916-853a-926067f8eacb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550444687928,
        "parent_id": "43ea4906-8762-4551-9b38-781c1d63a825",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "import android.support.annotation.NonNull;\nimport android.support.v7.widget.RecyclerView;\n\nimport java.util.List;\n\npublic abstract class AnimatedRecyclerAdapter\u003cT, VH extends RecyclerView.ViewHolder\u003e\n        extends RecyclerView.Adapter\u003cVH\u003e {\n    protected List\u003cT\u003e models;\n            \n    protected AnimatedRecyclerAdapter(@NonNull List\u003cT\u003e models) {\n        this.models = models;\n    }\n\n    //Set new models.\n    public void setModels(@NonNull final List\u003cT\u003e models) {\n        applyAndAnimateRemovals(models);\n        applyAndAnimateAdditions(models);\n        applyAndAnimateMovedItems(models);\n    }\n\n    //Remove an item at position and notify changes.\n    private T removeItem(int position) {\n        final T model = models.remove(position);\n        notifyItemRemoved(position);\n        return model;\n    }\n\n    //Add an item at position and notify changes.\n    private void addItem(int position, T model) {\n        models.add(position, model);\n        notifyItemInserted(position);\n    }\n\n    //Move an item at fromPosition to toPosition and notify changes.\n    private void moveItem(int fromPosition, int toPosition) {\n        final T model = models.remove(fromPosition);\n        models.add(toPosition, model);\n        notifyItemMoved(fromPosition, toPosition);\n    }\n\n    //Remove items that no longer exist in the new models.\n    private void applyAndAnimateRemovals(@NonNull final List\u003cT\u003e newTs) {\n        for (int i = models.size() - 1; i \u003e= 0; i--) {\n            final T model = models.get(i);\n            if (!newTs.contains(model)) {\n                removeItem(i);\n            }\n        }\n    }\n\n    //Add items that do not exist in the old models.\n    private void applyAndAnimateAdditions(@NonNull final List\u003cT\u003e newTs) {\n        for (int i = 0, count = newTs.size(); i \u003c count; i++) {\n            final T model = newTs.get(i);\n            if (!models.contains(model)) {\n                addItem(i, model);\n            }\n        }\n    }\n\n    //Move items that have changed their position.\n    private void applyAndAnimateMovedItems(@NonNull final List\u003cT\u003e newTs) {\n        for (int toPosition = newTs.size() - 1; toPosition \u003e= 0; toPosition--) {\n            final T model = newTs.get(toPosition);\n            final int fromPosition = models.indexOf(model);\n            if (fromPosition \u003e= 0 \u0026\u0026 fromPosition != toPosition) {\n                moveItem(fromPosition, toPosition);\n            }\n        }\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "import android.support.annotation.NonNull;\nimport android.support.v7.widget.RecyclerView;\n\nimport java.util.List;\n\npublic abstract class AnimatedRecyclerAdapter\u003cT, VH extends RecyclerView.ViewHolder\u003e\n        extends RecyclerView.Adapter\u003cVH\u003e {\n    protected List\u003cT\u003e models;\n            \n    protected AnimatedRecyclerAdapter(@NonNull List\u003cT\u003e models) {\n        this.models = models;\n    }\n\n    //Set new models.\n    public void setModels(@NonNull final List\u003cT\u003e models) {\n        applyAndAnimateRemovals(models);\n        applyAndAnimateAdditions(models);\n        applyAndAnimateMovedItems(models);\n    }\n\n    //Remove an item at position and notify changes.\n    private T removeItem(int position) {\n        final T model = models.remove(position);\n        notifyItemRemoved(position);\n        return model;\n    }\n\n    //Add an item at position and notify changes.\n    private void addItem(int position, T model) {\n        models.add(position, model);\n        notifyItemInserted(position);\n    }\n\n    //Move an item at fromPosition to toPosition and notify changes.\n    private void moveItem(int fromPosition, int toPosition) {\n        final T model = models.remove(fromPosition);\n        models.add(toPosition, model);\n        notifyItemMoved(fromPosition, toPosition);\n    }\n\n    //Remove items that no longer exist in the new models.\n    private void applyAndAnimateRemovals(@NonNull final List\u003cT\u003e newTs) {\n        for (int i = models.size() - 1; i \u003e= 0; i--) {\n            final T model = models.get(i);\n            if (!newTs.contains(model)) {\n                removeItem(i);\n            }\n        }\n    }\n\n    //Add items that do not exist in the old models.\n    private void applyAndAnimateAdditions(@NonNull final List\u003cT\u003e newTs) {\n        for (int i = 0, count = newTs.size(); i \u003c count; i++) {\n            final T model = newTs.get(i);\n            if (!models.contains(model)) {\n                addItem(i, model);\n            }\n        }\n    }\n\n    //Move items that have changed their position.\n    private void applyAndAnimateMovedItems(@NonNull final List\u003cT\u003e newTs) {\n        for (int toPosition = newTs.size() - 1; toPosition \u003e= 0; toPosition--) {\n            final T model = newTs.get(toPosition);\n            final int fromPosition = models.indexOf(model);\n            if (fromPosition \u003e= 0 \u0026\u0026 fromPosition != toPosition) {\n                moveItem(fromPosition, toPosition);\n            }\n        }\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550444687928,
        "id": "5a4125ad-d1b0-4b7f-a449-ea4294e98ee8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550444687928,
        "parent_id": "43ea4906-8762-4551-9b38-781c1d63a825",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You should NOT use the same List for setModels and List in the adapter."
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "You should NOT use the same List for setModels and List in the adapter."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550444687928,
        "id": "760fd7f2-ba29-4a4f-a3bf-532f8ce8af2c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550444687928,
        "parent_id": "43ea4906-8762-4551-9b38-781c1d63a825",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You declare "
            ],
            [
              "models",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " as global variables. "
            ],
            [
              "DataModel",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is a dummy class only."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You declare "
          },
          {
            "Text": "models",
            "AttrFlags": 2
          },
          {
            "Text": " as global variables. "
          },
          {
            "Text": "DataModel",
            "AttrFlags": 2
          },
          {
            "Text": " is a dummy class only."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550444687928,
        "id": "812314ad-77f8-4be1-a965-9b9fe4df986d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550444687928,
        "parent_id": "43ea4906-8762-4551-9b38-781c1d63a825",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "private List\u003cDataModel\u003e models;\nprivate YourAdapter adapter;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "private List\u003cDataModel\u003e models;\nprivate YourAdapter adapter;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550444687929,
        "id": "8daf2541-5dcc-4ff9-8232-01dc40ef8d8b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550444687929,
        "parent_id": "43ea4906-8762-4551-9b38-781c1d63a825",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Initialize "
            ],
            [
              "models",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " before pass it to adapter. "
            ],
            [
              "YourAdapter",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is the implementation of "
            ],
            [
              "AnimatedRecyclerAdapter",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Initialize "
          },
          {
            "Text": "models",
            "AttrFlags": 2
          },
          {
            "Text": " before pass it to adapter. "
          },
          {
            "Text": "YourAdapter",
            "AttrFlags": 2
          },
          {
            "Text": " is the implementation of "
          },
          {
            "Text": "AnimatedRecyclerAdapter",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550444687929,
        "id": "87728ff5-1ab1-4f75-9610-4e2a7180e0a2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550444687929,
        "parent_id": "43ea4906-8762-4551-9b38-781c1d63a825",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "models = new ArrayList\u003c\u003e();\n//Add models\nmodels.add(new DataModel());\n//Do NOT pass the models directly. Otherwise, when you modify global models, \n//you will also modify models in adapter.\n//adapter = new YourAdapter(models); \u003c- This is wrong.\nadapter = new YourAdapter(new ArrayList(models));"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "models = new ArrayList\u003c\u003e();\n//Add models\nmodels.add(new DataModel());\n//Do NOT pass the models directly. Otherwise, when you modify global models, \n//you will also modify models in adapter.\n//adapter = new YourAdapter(models); \u003c- This is wrong.\nadapter = new YourAdapter(new ArrayList(models));",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550444687929,
        "id": "3f5667e4-5472-4205-9324-0e1f4dcd78fa",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550444687929,
        "parent_id": "43ea4906-8762-4551-9b38-781c1d63a825",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Call this after you have updated your global "
            ],
            [
              "models",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Call this after you have updated your global "
          },
          {
            "Text": "models",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550444687929,
        "id": "e199b2bd-4496-445d-b007-e442f929c200",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550444687929,
        "parent_id": "43ea4906-8762-4551-9b38-781c1d63a825",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "adapter.setModels(new ArrayList(models));"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "adapter.setModels(new ArrayList(models));",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550444687929,
        "id": "814c7535-fffe-42a0-810b-efd318e74a8d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550444687929,
        "parent_id": "43ea4906-8762-4551-9b38-781c1d63a825",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If you do not override equals, all the comparison is compared by reference."
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "If you do not override equals, all the comparison is compared by reference."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550444687929,
        "id": "c09443ae-e905-4e93-be70-77df445c6fa9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550444687929,
        "parent_id": "43ea4906-8762-4551-9b38-781c1d63a825",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Example using SortedList"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Example using SortedList"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550444687931,
        "id": "fcf980ff-a065-400e-8fce-cad9437c14f8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550444687931,
        "parent_id": "43ea4906-8762-4551-9b38-781c1d63a825",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Android introduced the "
            ],
            [
              "SortedList",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://developer.android.com/reference/android/support/v7/util/SortedList.html"
                ]
              ]
            ],
            [
              " class soon after "
            ],
            [
              "RecyclerView",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " was introduced. This class handles all ‘notify’ method calls to the "
            ],
            [
              "RecyclerView.Adapter",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to ensure proper animation, and even allows batching multiple changes, so the animations don’t jitter."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Android introduced the "
          },
          {
            "Text": "SortedList",
            "AttrFlags": 2,
            "Link": "https://developer.android.com/reference/android/support/v7/util/SortedList.html"
          },
          {
            "Text": " class soon after "
          },
          {
            "Text": "RecyclerView",
            "AttrFlags": 2
          },
          {
            "Text": " was introduced. This class handles all ‘notify’ method calls to the "
          },
          {
            "Text": "RecyclerView.Adapter",
            "AttrFlags": 2
          },
          {
            "Text": " to ensure proper animation, and even allows batching multiple changes, so the animations don’t jitter."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550444687932,
        "id": "eb2bd9fd-fd8d-41a1-abba-46c7f983aa88",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550444687932,
        "parent_id": "43ea4906-8762-4551-9b38-781c1d63a825",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "import android.support.v7.util.SortedList;\nimport android.support.v7.widget.RecyclerView;\nimport android.support.v7.widget.util.SortedListAdapterCallback;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\n\nimport java.util.List;\n\npublic class MyAdapter extends RecyclerView.Adapter\u003cMyAdapter.ViewHolder\u003e {\n\n    private SortedList\u003cDataModel\u003e mSortedList;\n\n    class ViewHolder extends RecyclerView.ViewHolder {\n\n        TextView text;\n        CheckBox checkBox;\n\n        ViewHolder(View itemView){\n            super(itemView);\n\n            //Initiate your code here...\n\n        }\n\n        void setDataModel(DataModel model) {\n            //Update your UI with the data model passed here...\n            text.setText(modle.getText());\n            checkBox.setChecked(model.isChecked());\n        }\n    }\n\n    public MyAdapter() {\n        mSortedList = new SortedList\u003c\u003e(DataModel.class, new SortedListAdapterCallback\u003cDataModel\u003e(this) {\n            @Override\n            public int compare(DataModel o1, DataModel o2) {\n                //This gets called to find the ordering between objects in the array.\n                if (o1.someValue() \u003c o2.someValue()) {\n                    return -1;\n                } else if (o1.someValue() \u003e o2.someValue()) {\n                    return 1;\n                } else {\n                    return 0;\n                }\n            }\n\n            @Override\n            public boolean areContentsTheSame(DataModel oldItem, DataModel newItem) {\n                //This is to see of the content of this object has changed. These items are only considered equal if areItemsTheSame() returned true.\n\n                //If this returns false, onBindViewHolder() is called with the holder containing the item, and the item's position.\n                return oldItem.getText().equals(newItem.getText()) \u0026\u0026 oldItem.isChecked() == newItem.isChecked();\n            }\n\n            @Override\n            public boolean areItemsTheSame(DataModel item1, DataModel item2) {\n                //Checks to see if these two items are the same. If not, it is added to the list, otherwise, check if content has changed.\n                return item1.equals(item2);\n            }\n        });\n    }\n\n    @Override\n    public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {\n        View itemView = //Initiate your item view here.\n        return new ViewHolder(itemView);\n    }\n\n    @Override\n    public void onBindViewHolder(ViewHolder holder, int position) {\n        //Just update the holder with the object in the sorted list from the given position\n        DataModel model = mSortedList.get(position);\n        if (model != null) {\n            holder.setDataModel(model);\n        }\n    }\n\n    @Override\n    public int getItemCount() {\n        return mSortedList.size();\n    }\n\n    public void resetList(List\u003cDataModel\u003e models) {\n        //If you are performing multiple changes, use the batching methods to ensure proper animation.\n        mSortedList.beginBatchedUpdates();\n        mSortedList.clear();\n        mSortedList.addAll(models);\n        mSortedList.endBatchedUpdates();\n    }\n\n    //The following methods each modify the data set and automatically handles calling the appropriate 'notify' method on the adapter.\n    public void addModel(DataModel model) {\n        mSortedList.add(model);\n    }\n\n    public void addModels(List\u003cDataModel\u003e models) {\n        mSortedList.addAll(models);\n    }\n\n    public void clear() {\n        mSortedList.clear();\n    }\n\n    public void removeModel(DataModel model) {\n        mSortedList.remove(model);\n    }\n\n    public void removeModelAt(int i) {\n        mSortedList.removeItemAt(i);\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "import android.support.v7.util.SortedList;\nimport android.support.v7.widget.RecyclerView;\nimport android.support.v7.widget.util.SortedListAdapterCallback;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\n\nimport java.util.List;\n\npublic class MyAdapter extends RecyclerView.Adapter\u003cMyAdapter.ViewHolder\u003e {\n\n    private SortedList\u003cDataModel\u003e mSortedList;\n\n    class ViewHolder extends RecyclerView.ViewHolder {\n\n        TextView text;\n        CheckBox checkBox;\n\n        ViewHolder(View itemView){\n            super(itemView);\n\n            //Initiate your code here...\n\n        }\n\n        void setDataModel(DataModel model) {\n            //Update your UI with the data model passed here...\n            text.setText(modle.getText());\n            checkBox.setChecked(model.isChecked());\n        }\n    }\n\n    public MyAdapter() {\n        mSortedList = new SortedList\u003c\u003e(DataModel.class, new SortedListAdapterCallback\u003cDataModel\u003e(this) {\n            @Override\n            public int compare(DataModel o1, DataModel o2) {\n                //This gets called to find the ordering between objects in the array.\n                if (o1.someValue() \u003c o2.someValue()) {\n                    return -1;\n                } else if (o1.someValue() \u003e o2.someValue()) {\n                    return 1;\n                } else {\n                    return 0;\n                }\n            }\n\n            @Override\n            public boolean areContentsTheSame(DataModel oldItem, DataModel newItem) {\n                //This is to see of the content of this object has changed. These items are only considered equal if areItemsTheSame() returned true.\n\n                //If this returns false, onBindViewHolder() is called with the holder containing the item, and the item's position.\n                return oldItem.getText().equals(newItem.getText()) \u0026\u0026 oldItem.isChecked() == newItem.isChecked();\n            }\n\n            @Override\n            public boolean areItemsTheSame(DataModel item1, DataModel item2) {\n                //Checks to see if these two items are the same. If not, it is added to the list, otherwise, check if content has changed.\n                return item1.equals(item2);\n            }\n        });\n    }\n\n    @Override\n    public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {\n        View itemView = //Initiate your item view here.\n        return new ViewHolder(itemView);\n    }\n\n    @Override\n    public void onBindViewHolder(ViewHolder holder, int position) {\n        //Just update the holder with the object in the sorted list from the given position\n        DataModel model = mSortedList.get(position);\n        if (model != null) {\n            holder.setDataModel(model);\n        }\n    }\n\n    @Override\n    public int getItemCount() {\n        return mSortedList.size();\n    }\n\n    public void resetList(List\u003cDataModel\u003e models) {\n        //If you are performing multiple changes, use the batching methods to ensure proper animation.\n        mSortedList.beginBatchedUpdates();\n        mSortedList.clear();\n        mSortedList.addAll(models);\n        mSortedList.endBatchedUpdates();\n    }\n\n    //The following methods each modify the data set and automatically handles calling the appropriate 'notify' method on the adapter.\n    public void addModel(DataModel model) {\n        mSortedList.add(model);\n    }\n\n    public void addModels(List\u003cDataModel\u003e models) {\n        mSortedList.addAll(models);\n    }\n\n    public void clear() {\n        mSortedList.clear();\n    }\n\n    public void removeModel(DataModel model) {\n        mSortedList.remove(model);\n    }\n\n    public void removeModelAt(int i) {\n        mSortedList.removeItemAt(i);\n    }\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "Animate data change",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}