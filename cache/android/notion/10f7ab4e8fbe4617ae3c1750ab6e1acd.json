{
  "ID": "10f7ab4e-8fbe-4617-ae3c-1750ab6e1acd",
  "Root": {
    "alive": true,
    "content": [
      "024a2a00-8e91-4dfc-b40f-2d6ec7bc9592",
      "3c808886-5901-4053-828d-434f5407760a"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550443762519,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "10f7ab4e-8fbe-4617-ae3c-1750ab6e1acd",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550443762519,
    "parent_id": "f7aa3cbf-18e0-4aee-8ec1-725bd9ccb0bc",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Using JsonReader to read JSON from a stream"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550443762516,
        "id": "024a2a00-8e91-4dfc-b40f-2d6ec7bc9592",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550443762516,
        "parent_id": "10f7ab4e-8fbe-4617-ae3c-1750ab6e1acd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "JsonReader",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " reads a JSON encoded value as a stream of tokens."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "JsonReader",
            "AttrFlags": 2
          },
          {
            "Text": " reads a JSON encoded value as a stream of tokens."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550443762519,
        "id": "3c808886-5901-4053-828d-434f5407760a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550443762519,
        "parent_id": "10f7ab4e-8fbe-4617-ae3c-1750ab6e1acd",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public List\u003cMessage\u003e readJsonStream(InputStream in) throws IOException {\n  JsonReader reader = new JsonReader(new InputStreamReader(in, \"UTF-8\"));\n  try {\n    return readMessagesArray(reader);\n  } finally {\n    reader.close();\n  }\n}\n\npublic List\u003cMessage\u003e readMessagesArray(JsonReader reader) throws IOException {\n  List\u003cMessage\u003e messages = new ArrayList\u003cMessage\u003e();\n\n  reader.beginArray();\n  while (reader.hasNext()) {\n    messages.add(readMessage(reader));\n  }\n  reader.endArray();\n  return messages;\n}\n\npublic Message readMessage(JsonReader reader) throws IOException {\n  long id = -1;\n  String text = null;\n  User user = null;\n  List\u003cDouble\u003e geo = null;\n\n  reader.beginObject();\n  while (reader.hasNext()) {\n    String name = reader.nextName();\n    if (name.equals(\"id\")) {\n      id = reader.nextLong();\n    } else if (name.equals(\"text\")) {\n      text = reader.nextString();\n    } else if (name.equals(\"geo\") \u0026\u0026 reader.peek() != JsonToken.NULL) {\n      geo = readDoublesArray(reader);\n    } else if (name.equals(\"user\")) {\n      user = readUser(reader);\n    } else {\n      reader.skipValue();\n    }\n  }\n  reader.endObject();\n  return new Message(id, text, user, geo);\n}\n\npublic List\u003cDouble\u003e readDoublesArray(JsonReader reader) throws IOException {\n  List\u003cDouble\u003e doubles = new ArrayList\u003cDouble\u003e();\n\n  reader.beginArray();\n  while (reader.hasNext()) {\n    doubles.add(reader.nextDouble());\n  }\n  reader.endArray();\n  return doubles;\n}\n\npublic User readUser(JsonReader reader) throws IOException {\n  String username = null;\n  int followersCount = -1;\n\n  reader.beginObject();\n  while (reader.hasNext()) {\n    String name = reader.nextName();\n    if (name.equals(\"name\")) {\n      username = reader.nextString();\n    } else if (name.equals(\"followers_count\")) {\n      followersCount = reader.nextInt();\n    } else {\n      reader.skipValue();\n    }\n  }\n  reader.endObject();\n  return new User(username, followersCount);\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public List\u003cMessage\u003e readJsonStream(InputStream in) throws IOException {\n  JsonReader reader = new JsonReader(new InputStreamReader(in, \"UTF-8\"));\n  try {\n    return readMessagesArray(reader);\n  } finally {\n    reader.close();\n  }\n}\n\npublic List\u003cMessage\u003e readMessagesArray(JsonReader reader) throws IOException {\n  List\u003cMessage\u003e messages = new ArrayList\u003cMessage\u003e();\n\n  reader.beginArray();\n  while (reader.hasNext()) {\n    messages.add(readMessage(reader));\n  }\n  reader.endArray();\n  return messages;\n}\n\npublic Message readMessage(JsonReader reader) throws IOException {\n  long id = -1;\n  String text = null;\n  User user = null;\n  List\u003cDouble\u003e geo = null;\n\n  reader.beginObject();\n  while (reader.hasNext()) {\n    String name = reader.nextName();\n    if (name.equals(\"id\")) {\n      id = reader.nextLong();\n    } else if (name.equals(\"text\")) {\n      text = reader.nextString();\n    } else if (name.equals(\"geo\") \u0026\u0026 reader.peek() != JsonToken.NULL) {\n      geo = readDoublesArray(reader);\n    } else if (name.equals(\"user\")) {\n      user = readUser(reader);\n    } else {\n      reader.skipValue();\n    }\n  }\n  reader.endObject();\n  return new Message(id, text, user, geo);\n}\n\npublic List\u003cDouble\u003e readDoublesArray(JsonReader reader) throws IOException {\n  List\u003cDouble\u003e doubles = new ArrayList\u003cDouble\u003e();\n\n  reader.beginArray();\n  while (reader.hasNext()) {\n    doubles.add(reader.nextDouble());\n  }\n  reader.endArray();\n  return doubles;\n}\n\npublic User readUser(JsonReader reader) throws IOException {\n  String username = null;\n  int followersCount = -1;\n\n  reader.beginObject();\n  while (reader.hasNext()) {\n    String name = reader.nextName();\n    if (name.equals(\"name\")) {\n      username = reader.nextString();\n    } else if (name.equals(\"followers_count\")) {\n      followersCount = reader.nextInt();\n    } else {\n      reader.skipValue();\n    }\n  }\n  reader.endObject();\n  return new User(username, followersCount);\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "Using JsonReader to read JSON from a stream",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}