{
  "ID": "02d42fcc-99c9-49a3-8226-1e33342a4e38",
  "Root": {
    "alive": true,
    "content": [
      "9a217c91-fc68-4c1d-a407-24fcf643dddf",
      "3b3c6ce2-58ce-4848-a8b6-347dbded8d3f",
      "37c33541-a45f-4351-a35a-f6b738d4c208",
      "7cffe02e-6374-4d89-9b60-32a8524fc69d",
      "658dc787-b351-4203-8d6c-f28f5c8c0f34",
      "7f9aecb1-5c80-4e28-8c75-357b4a9fc81e"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550450242160,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "02d42fcc-99c9-49a3-8226-1e33342a4e38",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550450242160,
    "parent_id": "c1066830-e268-4ff2-9f0f-37841d485046",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "SurfaceView with drawing thread"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550450242157,
        "id": "9a217c91-fc68-4c1d-a407-24fcf643dddf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550450242157,
        "parent_id": "02d42fcc-99c9-49a3-8226-1e33342a4e38",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This example describes how to create a SurfaceView with a dedicated drawing thread. This implementation also handles edge cases such as manufacture specific issues as well as starting/stopping the thread to save cpu time."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This example describes how to create a SurfaceView with a dedicated drawing thread. This implementation also handles edge cases such as manufacture specific issues as well as starting/stopping the thread to save cpu time."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550450242160,
        "id": "3b3c6ce2-58ce-4848-a8b6-347dbded8d3f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550450242160,
        "parent_id": "02d42fcc-99c9-49a3-8226-1e33342a4e38",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "import android.content.Context;\nimport android.graphics.Canvas;\nimport android.graphics.Paint;\nimport android.util.AttributeSet;\nimport android.util.Log;\nimport android.view.MotionEvent;\nimport android.view.SurfaceHolder;\nimport android.view.SurfaceView;\nimport android.view.View;\n/**\n* Defines a custom SurfaceView class which handles the drawing thread\n**/\npublic class BaseSurface extends SurfaceView implements SurfaceHolder.Callback, View.OnTouchListener, Runnable\n{\n\n    /**\n     * Holds the surface frame\n     */\n    private SurfaceHolder holder;\n\n    /**\n     * Draw thread\n     */\n    private Thread drawThread;\n\n    /**\n     * True when the surface is ready to draw\n     */\n    private boolean surfaceReady = false;\n\n\n    /**\n     * Drawing thread flag\n     */\n\n    private boolean drawingActive = false;\n\n    /**\n     * Paint for drawing the sample rectangle\n     */\n    private Paint samplePaint = new Paint();\n\n    /**\n     * Time per frame for 60 FPS\n     */\n    private static final int MAX_FRAME_TIME = (int) (1000.0 / 60.0);\n\n    private static final String LOGTAG = \"surface\";    \n\n    public BaseSurface(Context context, AttributeSet attrs)\n    {\n        super(context, attrs);\n        SurfaceHolder holder = getHolder();\n        holder.addCallback(this);\n        setOnTouchListener(this);\n\n        // red\n        samplePaint.setColor(0xffff0000);\n        // smooth edges\n        samplePaint.setAntiAlias(true);\n    }\n\n    @Override\n    public void surfaceChanged(SurfaceHolder holder, int format, int width, int height)\n    {\n        if (width == 0 || height == 0)\n        {\n            return;\n        }\n\n        // resize your UI\n    }\n\n    @Override\n    public void surfaceCreated(SurfaceHolder holder)\n    {\n        this.holder = holder;\n\n        if (drawThread != null)\n        {\n            Log.d(LOGTAG, \"draw thread still active..\");\n            drawingActive = false;\n            try\n            {\n                drawThread.join();\n            } catch (InterruptedException e)\n            { // do nothing\n            }\n        }\n\n        surfaceReady = true;\n        startDrawThread();\n        Log.d(LOGTAG, \"Created\");\n    }\n\n    @Override\n    public void surfaceDestroyed(SurfaceHolder holder)\n    {\n        // Surface is not used anymore - stop the drawing thread\n        stopDrawThread();\n        // and release the surface\n        holder.getSurface().release();\n\n        this.holder = null;\n        surfaceReady = false;\n        Log.d(LOGTAG, \"Destroyed\");\n    }\n\n    @Override\n    public boolean onTouch(View v, MotionEvent event)\n    {\n        // Handle touch events\n        return true;\n    }\n\n    /**\n     * Stops the drawing thread\n     */\n    public void stopDrawThread()\n    {\n        if (drawThread == null)\n        {\n            Log.d(LOGTAG, \"DrawThread is null\");\n            return;\n        }\n        drawingActive = false;\n        while (true)\n        {\n            try\n            {\n                Log.d(LOGTAG, \"Request last frame\");\n                drawThread.join(5000);\n                break;\n            } catch (Exception e)\n            {\n                Log.e(LOGTAG, \"Could not join with draw thread\");\n            }\n        }\n        drawThread = null;\n    }\n\n    /**\n     * Creates a new draw thread and starts it.\n     */\n    public void startDrawThread()\n    {\n        if (surfaceReady \u0026\u0026 drawThread == null)\n        {\n            drawThread = new Thread(this, \"Draw thread\");\n            drawingActive = true;\n            drawThread.start();\n        }\n    }\n\n    @Override\n    public void run()\n    {\n        Log.d(LOGTAG, \"Draw thread started\");\n        long frameStartTime;\n        long frameTime;\n\n        /*\n         * In order to work reliable on Nexus 7, we place ~500ms delay at the start of drawing thread\n         * (AOSP - Issue 58385)\n         */\n        if (android.os.Build.BRAND.equalsIgnoreCase(\"google\") \u0026\u0026 android.os.Build.MANUFACTURER.equalsIgnoreCase(\"asus\") \u0026\u0026 android.os.Build.MODEL.equalsIgnoreCase(\"Nexus 7\"))\n        {\n            Log.w(LOGTAG, \"Sleep 500ms (Device: Asus Nexus 7)\");\n            try\n            {\n                Thread.sleep(500);\n            } catch (InterruptedException ignored)\n            {\n            }\n        }\n        try\n        {\n            while (drawingActive)\n            {\n                if (holder == null)\n                {\n                    return;\n                }\n\n                frameStartTime = System.nanoTime();\n                Canvas canvas = holder.lockCanvas();\n                if (canvas != null)\n                {\n                    // clear the screen using black\n                    canvas.drawARGB(255, 0, 0, 0);\n\n                    try\n                    {\n                        // Your drawing here\n                        canvas.drawRect(0, 0, getWidth() / 2, getHeight() / 2, samplePaint);\n                    } finally\n                    {\n\n                        holder.unlockCanvasAndPost(canvas);\n                    }\n                }\n\n                // calculate the time required to draw the frame in ms\n                frameTime = (System.nanoTime() - frameStartTime) / 1000000;\n\n                if (frameTime \u003c MAX_FRAME_TIME) // faster than the max fps - limit the FPS\n                {\n                    try\n                    {\n                        Thread.sleep(MAX_FRAME_TIME - frameTime);\n                    } catch (InterruptedException e)\n                    {\n                        // ignore\n                    }\n                }\n            }\n        } catch (Exception e)\n        {\n            Log.w(LOGTAG, \"Exception while locking/unlocking\");\n        }\n        Log.d(LOGTAG, \"Draw thread finished\");\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "import android.content.Context;\nimport android.graphics.Canvas;\nimport android.graphics.Paint;\nimport android.util.AttributeSet;\nimport android.util.Log;\nimport android.view.MotionEvent;\nimport android.view.SurfaceHolder;\nimport android.view.SurfaceView;\nimport android.view.View;\n/**\n* Defines a custom SurfaceView class which handles the drawing thread\n**/\npublic class BaseSurface extends SurfaceView implements SurfaceHolder.Callback, View.OnTouchListener, Runnable\n{\n\n    /**\n     * Holds the surface frame\n     */\n    private SurfaceHolder holder;\n\n    /**\n     * Draw thread\n     */\n    private Thread drawThread;\n\n    /**\n     * True when the surface is ready to draw\n     */\n    private boolean surfaceReady = false;\n\n\n    /**\n     * Drawing thread flag\n     */\n\n    private boolean drawingActive = false;\n\n    /**\n     * Paint for drawing the sample rectangle\n     */\n    private Paint samplePaint = new Paint();\n\n    /**\n     * Time per frame for 60 FPS\n     */\n    private static final int MAX_FRAME_TIME = (int) (1000.0 / 60.0);\n\n    private static final String LOGTAG = \"surface\";    \n\n    public BaseSurface(Context context, AttributeSet attrs)\n    {\n        super(context, attrs);\n        SurfaceHolder holder = getHolder();\n        holder.addCallback(this);\n        setOnTouchListener(this);\n\n        // red\n        samplePaint.setColor(0xffff0000);\n        // smooth edges\n        samplePaint.setAntiAlias(true);\n    }\n\n    @Override\n    public void surfaceChanged(SurfaceHolder holder, int format, int width, int height)\n    {\n        if (width == 0 || height == 0)\n        {\n            return;\n        }\n\n        // resize your UI\n    }\n\n    @Override\n    public void surfaceCreated(SurfaceHolder holder)\n    {\n        this.holder = holder;\n\n        if (drawThread != null)\n        {\n            Log.d(LOGTAG, \"draw thread still active..\");\n            drawingActive = false;\n            try\n            {\n                drawThread.join();\n            } catch (InterruptedException e)\n            { // do nothing\n            }\n        }\n\n        surfaceReady = true;\n        startDrawThread();\n        Log.d(LOGTAG, \"Created\");\n    }\n\n    @Override\n    public void surfaceDestroyed(SurfaceHolder holder)\n    {\n        // Surface is not used anymore - stop the drawing thread\n        stopDrawThread();\n        // and release the surface\n        holder.getSurface().release();\n\n        this.holder = null;\n        surfaceReady = false;\n        Log.d(LOGTAG, \"Destroyed\");\n    }\n\n    @Override\n    public boolean onTouch(View v, MotionEvent event)\n    {\n        // Handle touch events\n        return true;\n    }\n\n    /**\n     * Stops the drawing thread\n     */\n    public void stopDrawThread()\n    {\n        if (drawThread == null)\n        {\n            Log.d(LOGTAG, \"DrawThread is null\");\n            return;\n        }\n        drawingActive = false;\n        while (true)\n        {\n            try\n            {\n                Log.d(LOGTAG, \"Request last frame\");\n                drawThread.join(5000);\n                break;\n            } catch (Exception e)\n            {\n                Log.e(LOGTAG, \"Could not join with draw thread\");\n            }\n        }\n        drawThread = null;\n    }\n\n    /**\n     * Creates a new draw thread and starts it.\n     */\n    public void startDrawThread()\n    {\n        if (surfaceReady \u0026\u0026 drawThread == null)\n        {\n            drawThread = new Thread(this, \"Draw thread\");\n            drawingActive = true;\n            drawThread.start();\n        }\n    }\n\n    @Override\n    public void run()\n    {\n        Log.d(LOGTAG, \"Draw thread started\");\n        long frameStartTime;\n        long frameTime;\n\n        /*\n         * In order to work reliable on Nexus 7, we place ~500ms delay at the start of drawing thread\n         * (AOSP - Issue 58385)\n         */\n        if (android.os.Build.BRAND.equalsIgnoreCase(\"google\") \u0026\u0026 android.os.Build.MANUFACTURER.equalsIgnoreCase(\"asus\") \u0026\u0026 android.os.Build.MODEL.equalsIgnoreCase(\"Nexus 7\"))\n        {\n            Log.w(LOGTAG, \"Sleep 500ms (Device: Asus Nexus 7)\");\n            try\n            {\n                Thread.sleep(500);\n            } catch (InterruptedException ignored)\n            {\n            }\n        }\n        try\n        {\n            while (drawingActive)\n            {\n                if (holder == null)\n                {\n                    return;\n                }\n\n                frameStartTime = System.nanoTime();\n                Canvas canvas = holder.lockCanvas();\n                if (canvas != null)\n                {\n                    // clear the screen using black\n                    canvas.drawARGB(255, 0, 0, 0);\n\n                    try\n                    {\n                        // Your drawing here\n                        canvas.drawRect(0, 0, getWidth() / 2, getHeight() / 2, samplePaint);\n                    } finally\n                    {\n\n                        holder.unlockCanvasAndPost(canvas);\n                    }\n                }\n\n                // calculate the time required to draw the frame in ms\n                frameTime = (System.nanoTime() - frameStartTime) / 1000000;\n\n                if (frameTime \u003c MAX_FRAME_TIME) // faster than the max fps - limit the FPS\n                {\n                    try\n                    {\n                        Thread.sleep(MAX_FRAME_TIME - frameTime);\n                    } catch (InterruptedException e)\n                    {\n                        // ignore\n                    }\n                }\n            }\n        } catch (Exception e)\n        {\n            Log.w(LOGTAG, \"Exception while locking/unlocking\");\n        }\n        Log.d(LOGTAG, \"Draw thread finished\");\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550450242160,
        "id": "37c33541-a45f-4351-a35a-f6b738d4c208",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550450242160,
        "parent_id": "02d42fcc-99c9-49a3-8226-1e33342a4e38",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This layout only contains the custom SurfaceView and maximizes it to the screen size."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This layout only contains the custom SurfaceView and maximizes it to the screen size."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550450242160,
        "id": "7cffe02e-6374-4d89-9b60-32a8524fc69d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550450242160,
        "parent_id": "02d42fcc-99c9-49a3-8226-1e33342a4e38",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n\u003cLinearLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\"sample.devcore.org.surfaceviewsample.MainActivity\"\u003e\n\n    \u003csample.devcore.org.surfaceviewsample.BaseSurface\n        android:id=\"@+id/baseSurface\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"/\u003e\n\u003c/LinearLayout\u003e"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n\u003cLinearLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\"sample.devcore.org.surfaceviewsample.MainActivity\"\u003e\n\n    \u003csample.devcore.org.surfaceviewsample.BaseSurface\n        android:id=\"@+id/baseSurface\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"/\u003e\n\u003c/LinearLayout\u003e",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550450242160,
        "id": "658dc787-b351-4203-8d6c-f28f5c8c0f34",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550450242160,
        "parent_id": "02d42fcc-99c9-49a3-8226-1e33342a4e38",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The activity which uses the SurfaceView is responsible for starting and stopping the drawing thread. This approach saves battery as the drawing is stopped as soon as the activity gets in the background."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The activity which uses the SurfaceView is responsible for starting and stopping the drawing thread. This approach saves battery as the drawing is stopped as soon as the activity gets in the background."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550450242160,
        "id": "7f9aecb1-5c80-4e28-8c75-357b4a9fc81e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550450242160,
        "parent_id": "02d42fcc-99c9-49a3-8226-1e33342a4e38",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "import android.app.Activity;\nimport android.os.Bundle;\n\npublic class MainActivity extends Activity\n{\n\n    /**\n     * Surface object\n     */\n    private BaseSurface surface;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState)\n    {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        surface = (BaseSurface) findViewById(R.id.baseSurface);\n    }\n\n    @Override\n    protected void onResume()\n    {\n        super.onResume();\n        // start the drawing\n        surface.startDrawThread();\n    }\n\n    @Override\n    protected void onPause()\n    {\n        // stop the drawing to save cpu time\n        surface.stopDrawThread();\n        super.onPause();\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "import android.app.Activity;\nimport android.os.Bundle;\n\npublic class MainActivity extends Activity\n{\n\n    /**\n     * Surface object\n     */\n    private BaseSurface surface;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState)\n    {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        surface = (BaseSurface) findViewById(R.id.baseSurface);\n    }\n\n    @Override\n    protected void onResume()\n    {\n        super.onResume();\n        // start the drawing\n        surface.startDrawThread();\n    }\n\n    @Override\n    protected void onPause()\n    {\n        // stop the drawing to save cpu time\n        surface.stopDrawThread();\n        super.onPause();\n    }\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "SurfaceView with drawing thread",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}