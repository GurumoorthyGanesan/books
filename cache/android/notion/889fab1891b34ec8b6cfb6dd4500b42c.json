{
  "ID": "889fab18-91b3-4ec8-b6cf-b6dd4500b42c",
  "Root": {
    "alive": true,
    "content": [
      "620f34f6-ae15-4fc1-8380-deac14249012",
      "90391375-13a5-45ce-8816-fb1c623622ba",
      "52c4a0c6-76a9-42cb-afcf-a69215395e9e",
      "e0821ad3-89fc-4372-8bbb-21ed3cb1f20c",
      "35105444-cc0a-4589-820a-f76a60581f7e",
      "1b942d48-9fff-448e-8642-54bdbe9b8144",
      "8676377f-ec9b-4321-bdf2-c0be3a345a19",
      "93640c19-1e86-4624-a6a4-e4bc39e3869d",
      "5e8cd48d-48e8-40c9-acf7-91ecc53db0a5",
      "eca53632-846a-480e-8379-c29d8b0617bb",
      "1aa17140-8953-4630-b2e6-8ec008b2fcf1",
      "866ba248-3b54-46f6-81d6-512f46bd5bfb",
      "47549d9f-56c1-4217-aaa2-a0abc72db3b8",
      "6114be92-5b08-4eb1-b8ff-983084cbf7e3",
      "7f2f3d15-9e78-420f-aa1b-25ff8aaf61fd",
      "68407035-3d78-49bd-bf3b-82574420eea6",
      "5d42353e-8493-4f33-a99f-f3c6b33a0448",
      "70428d38-55ed-425e-a6df-218d45137530",
      "0ab44e8d-d29f-40fe-a733-1d6f72d8b8ea",
      "65f36b5a-267a-46c9-90be-d03b07527361",
      "c7633ff6-d8d1-4646-a8e6-19314d6947dc",
      "0daa706d-6d99-4a25-835f-2884f913d62b",
      "452829b6-9071-4ee5-9cee-c03a84f23f2c",
      "e2b5aa24-aeea-495e-bdc6-b1d99632087a",
      "9dd58400-f90b-47e1-849e-56d47379a5fa",
      "5cf892cb-ed9d-452c-a486-60db9e08dc86",
      "5a766c98-cf4a-4ad9-820c-f3944a98568d",
      "c20b1ee4-db34-4e47-921d-b962bb9431c3",
      "a49475af-d480-46c6-b1e6-ce9a226a1e6a",
      "6bf4a653-8844-42fb-bad2-5490dbd25d30",
      "1460bf6e-5130-4b4d-8e3d-2334e1fd0e62",
      "eba26e2f-e9e7-4fbe-b4ab-673f0beb274c"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550452971099,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "889fab18-91b3-4ec8-b6cf-b6dd4500b42c",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550452971099,
    "parent_id": "7fd7fa0a-adbb-469e-be55-da9a0c015ed8",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "MVVM Example using DataBinding Library"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550452971089,
        "id": "620f34f6-ae15-4fc1-8380-deac14249012",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550452971089,
        "parent_id": "889fab18-91b3-4ec8-b6cf-b6dd4500b42c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The whole point of MVVM is to separate layers containing logic from the view layer."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The whole point of MVVM is to separate layers containing logic from the view layer."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550452971093,
        "id": "90391375-13a5-45ce-8816-fb1c623622ba",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550452971093,
        "parent_id": "889fab18-91b3-4ec8-b6cf-b6dd4500b42c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "On Android we can use the "
            ],
            [
              "DataBinding Library",
              [
                [
                  "a",
                  "https://developer.android.com/topic/libraries/data-binding/index.html"
                ]
              ]
            ],
            [
              " to help us with this and make most of our logic Unit-testable without worrying about Android dependencies."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "On Android we can use the "
          },
          {
            "Text": "DataBinding Library",
            "Link": "https://developer.android.com/topic/libraries/data-binding/index.html"
          },
          {
            "Text": " to help us with this and make most of our logic Unit-testable without worrying about Android dependencies."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550452971093,
        "id": "52c4a0c6-76a9-42cb-afcf-a69215395e9e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550452971093,
        "parent_id": "889fab18-91b3-4ec8-b6cf-b6dd4500b42c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In this example I’ll show the central components for a stupid simple App that does the following:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In this example I’ll show the central components for a stupid simple App that does the following:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550452971094,
        "id": "e0821ad3-89fc-4372-8bbb-21ed3cb1f20c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550452971094,
        "parent_id": "889fab18-91b3-4ec8-b6cf-b6dd4500b42c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "At start up fake a network call and show a loading spinner"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "At start up fake a network call and show a loading spinner"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550452971094,
        "id": "35105444-cc0a-4589-820a-f76a60581f7e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550452971094,
        "parent_id": "889fab18-91b3-4ec8-b6cf-b6dd4500b42c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Show a view with a click counter TextView, a message TextView, and a button to increment the counter"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Show a view with a click counter TextView, a message TextView, and a button to increment the counter"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550452971094,
        "id": "1b942d48-9fff-448e-8642-54bdbe9b8144",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550452971094,
        "parent_id": "889fab18-91b3-4ec8-b6cf-b6dd4500b42c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "On button click update counter and update counter color and message text if counter reaches some number"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "On button click update counter and update counter color and message text if counter reaches some number"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550452971094,
        "id": "8676377f-ec9b-4321-bdf2-c0be3a345a19",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550452971094,
        "parent_id": "889fab18-91b3-4ec8-b6cf-b6dd4500b42c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Let’s start with the view layer:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Let’s start with the view layer:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550452971095,
        "id": "93640c19-1e86-4624-a6a4-e4bc39e3869d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550452971095,
        "parent_id": "889fab18-91b3-4ec8-b6cf-b6dd4500b42c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "activity_main.xml",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "activity_main.xml",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550452971095,
        "id": "5e8cd48d-48e8-40c9-acf7-91ecc53db0a5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550452971095,
        "parent_id": "889fab18-91b3-4ec8-b6cf-b6dd4500b42c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If you’re unfamiliar with how DataBinding works you should probably "
            ],
            [
              "take 10 minutes",
              [
                [
                  "a",
                  "https://developer.android.com/topic/libraries/data-binding/index.html"
                ]
              ]
            ],
            [
              " to make yourself familiar with it. As you can see, all fields you would usually update with setters are bound to functions on the viewModel variable."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If you’re unfamiliar with how DataBinding works you should probably "
          },
          {
            "Text": "take 10 minutes",
            "Link": "https://developer.android.com/topic/libraries/data-binding/index.html"
          },
          {
            "Text": " to make yourself familiar with it. As you can see, all fields you would usually update with setters are bound to functions on the viewModel variable."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550452971095,
        "id": "eca53632-846a-480e-8379-c29d8b0617bb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550452971095,
        "parent_id": "889fab18-91b3-4ec8-b6cf-b6dd4500b42c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If you’ve got a question about the "
            ],
            [
              "android:visibility",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "app:textColor",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " properties check the ‘Remarks’ section."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If you’ve got a question about the "
          },
          {
            "Text": "android:visibility",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "app:textColor",
            "AttrFlags": 2
          },
          {
            "Text": " properties check the ‘Remarks’ section."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550452971096,
        "id": "1aa17140-8953-4630-b2e6-8ec008b2fcf1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550452971096,
        "parent_id": "889fab18-91b3-4ec8-b6cf-b6dd4500b42c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "\u003clayout\n   xmlns:android=\"http://schemas.android.com/apk/res/android\"\n   xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n   xmlns:tools=\"http://schemas.android.com/tools\"\u003e\n\n   \u003cdata\u003e\n\n       \u003cimport type=\"android.view.View\" /\u003e\n\n       \u003cvariable\n           name=\"viewModel\"\n           type=\"de.walled.mvvmtest.viewmodel.ClickerViewModel\"/\u003e\n   \u003c/data\u003e\n\n   \u003cRelativeLayout\n       android:id=\"@+id/activity_main\"\n       android:layout_width=\"match_parent\"\n       android:layout_height=\"match_parent\"\n       android:padding=\"@dimen/activity_horizontal_margin\"\n\n       tools:context=\"de.walled.mvvmtest.view.MainActivity\"\u003e\n\n       \u003cLinearLayout\n           android:id=\"@+id/click_counter\"\n           android:layout_width=\"wrap_content\"\n           android:layout_height=\"wrap_content\"\n           android:layout_centerHorizontal=\"true\"\n           android:layout_marginTop=\"60dp\"\n           android:visibility=\"@{viewModel.contentVisible ? View.VISIBLE : View.GONE}\"\n\n           android:padding=\"8dp\"\n\n           android:orientation=\"horizontal\"\u003e\n\n           \u003cTextView\n               android:id=\"@+id/number_of_clicks\"\n               android:layout_width=\"wrap_content\"\n               android:layout_height=\"wrap_content\"\n               style=\"@style/ClickCounter\"\n\n               android:text=\"@{viewModel.numberOfClicks}\"\n               android:textAlignment=\"center\"\n               app:textColor=\"@{viewModel.counterColor}\"\n\n               tools:text=\"8\"\n               tools:textColor=\"@color/red\"\n           /\u003e\n\n           \u003cTextView\n               android:id=\"@+id/static_label\"\n               android:layout_width=\"wrap_content\"\n               android:layout_height=\"wrap_content\"\n               android:layout_marginLeft=\"4dp\"\n               android:layout_marginStart=\"4dp\"\n               style=\"@style/ClickCounter\"\n\n               android:text=\"@string/label.clicks\"\n               app:textColor=\"@{viewModel.counterColor}\"\n               android:textAlignment=\"center\"\n\n               tools:textColor=\"@color/red\"\n           /\u003e\n       \u003c/LinearLayout\u003e\n\n\n       \u003cTextView\n           android:id=\"@+id/message\"\n           android:layout_width=\"wrap_content\"\n           android:layout_height=\"wrap_content\"\n           android:layout_below=\"@id/click_counter\"\n           android:layout_centerHorizontal=\"true\"\n           android:visibility=\"@{viewModel.contentVisible ? View.VISIBLE : View.GONE}\"\n\n           android:text=\"@{viewModel.labelText}\"\n           android:textAlignment=\"center\"\n           android:textSize=\"18sp\"\n\n           tools:text=\"You're bad and you should feel bad!\"\n       /\u003e\n\n       \u003cButton\n           android:id=\"@+id/clicker\"\n           android:layout_width=\"wrap_content\"\n           android:layout_height=\"wrap_content\"\n           android:layout_below=\"@id/message\"\n           android:layout_centerHorizontal=\"true\"\n           android:layout_marginTop=\"8dp\"\n           android:visibility=\"@{viewModel.contentVisible ? View.VISIBLE : View.GONE}\"\n\n           android:padding=\"8dp\"\n\n           android:text=\"@string/label.button\"\n\n           android:onClick=\"@{() -\u003e viewModel.onClickIncrement()}\"\n       /\u003e\n\n       \u003candroid.support.v4.widget.ContentLoadingProgressBar\n           android:layout_width=\"wrap_content\"\n           android:layout_height=\"wrap_content\"\n           android:layout_marginTop=\"90dp\"\n           android:layout_centerHorizontal=\"true\"\n           style=\"@android:style/Widget.ProgressBar.Inverse\"\n           android:visibility=\"@{viewModel.loadingVisible ? View.VISIBLE : View.GONE}\"\n\n           android:indeterminate=\"true\"\n       /\u003e\n\n   \u003c/RelativeLayout\u003e\n\n\u003c/layout\u003e"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "\u003clayout\n   xmlns:android=\"http://schemas.android.com/apk/res/android\"\n   xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n   xmlns:tools=\"http://schemas.android.com/tools\"\u003e\n\n   \u003cdata\u003e\n\n       \u003cimport type=\"android.view.View\" /\u003e\n\n       \u003cvariable\n           name=\"viewModel\"\n           type=\"de.walled.mvvmtest.viewmodel.ClickerViewModel\"/\u003e\n   \u003c/data\u003e\n\n   \u003cRelativeLayout\n       android:id=\"@+id/activity_main\"\n       android:layout_width=\"match_parent\"\n       android:layout_height=\"match_parent\"\n       android:padding=\"@dimen/activity_horizontal_margin\"\n\n       tools:context=\"de.walled.mvvmtest.view.MainActivity\"\u003e\n\n       \u003cLinearLayout\n           android:id=\"@+id/click_counter\"\n           android:layout_width=\"wrap_content\"\n           android:layout_height=\"wrap_content\"\n           android:layout_centerHorizontal=\"true\"\n           android:layout_marginTop=\"60dp\"\n           android:visibility=\"@{viewModel.contentVisible ? View.VISIBLE : View.GONE}\"\n\n           android:padding=\"8dp\"\n\n           android:orientation=\"horizontal\"\u003e\n\n           \u003cTextView\n               android:id=\"@+id/number_of_clicks\"\n               android:layout_width=\"wrap_content\"\n               android:layout_height=\"wrap_content\"\n               style=\"@style/ClickCounter\"\n\n               android:text=\"@{viewModel.numberOfClicks}\"\n               android:textAlignment=\"center\"\n               app:textColor=\"@{viewModel.counterColor}\"\n\n               tools:text=\"8\"\n               tools:textColor=\"@color/red\"\n           /\u003e\n\n           \u003cTextView\n               android:id=\"@+id/static_label\"\n               android:layout_width=\"wrap_content\"\n               android:layout_height=\"wrap_content\"\n               android:layout_marginLeft=\"4dp\"\n               android:layout_marginStart=\"4dp\"\n               style=\"@style/ClickCounter\"\n\n               android:text=\"@string/label.clicks\"\n               app:textColor=\"@{viewModel.counterColor}\"\n               android:textAlignment=\"center\"\n\n               tools:textColor=\"@color/red\"\n           /\u003e\n       \u003c/LinearLayout\u003e\n\n\n       \u003cTextView\n           android:id=\"@+id/message\"\n           android:layout_width=\"wrap_content\"\n           android:layout_height=\"wrap_content\"\n           android:layout_below=\"@id/click_counter\"\n           android:layout_centerHorizontal=\"true\"\n           android:visibility=\"@{viewModel.contentVisible ? View.VISIBLE : View.GONE}\"\n\n           android:text=\"@{viewModel.labelText}\"\n           android:textAlignment=\"center\"\n           android:textSize=\"18sp\"\n\n           tools:text=\"You're bad and you should feel bad!\"\n       /\u003e\n\n       \u003cButton\n           android:id=\"@+id/clicker\"\n           android:layout_width=\"wrap_content\"\n           android:layout_height=\"wrap_content\"\n           android:layout_below=\"@id/message\"\n           android:layout_centerHorizontal=\"true\"\n           android:layout_marginTop=\"8dp\"\n           android:visibility=\"@{viewModel.contentVisible ? View.VISIBLE : View.GONE}\"\n\n           android:padding=\"8dp\"\n\n           android:text=\"@string/label.button\"\n\n           android:onClick=\"@{() -\u003e viewModel.onClickIncrement()}\"\n       /\u003e\n\n       \u003candroid.support.v4.widget.ContentLoadingProgressBar\n           android:layout_width=\"wrap_content\"\n           android:layout_height=\"wrap_content\"\n           android:layout_marginTop=\"90dp\"\n           android:layout_centerHorizontal=\"true\"\n           style=\"@android:style/Widget.ProgressBar.Inverse\"\n           android:visibility=\"@{viewModel.loadingVisible ? View.VISIBLE : View.GONE}\"\n\n           android:indeterminate=\"true\"\n       /\u003e\n\n   \u003c/RelativeLayout\u003e\n\n\u003c/layout\u003e",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550452971096,
        "id": "866ba248-3b54-46f6-81d6-512f46bd5bfb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550452971096,
        "parent_id": "889fab18-91b3-4ec8-b6cf-b6dd4500b42c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Next the model layer. Here I have:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Next the model layer. Here I have:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550452971096,
        "id": "47549d9f-56c1-4217-aaa2-a0abc72db3b8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550452971096,
        "parent_id": "889fab18-91b3-4ec8-b6cf-b6dd4500b42c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "two fields that represent the state of the app"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "two fields that represent the state of the app"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550452971096,
        "id": "6114be92-5b08-4eb1-b8ff-983084cbf7e3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550452971096,
        "parent_id": "889fab18-91b3-4ec8-b6cf-b6dd4500b42c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "getters to read the number of clicks and the state of excitement"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "getters to read the number of clicks and the state of excitement"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550452971096,
        "id": "7f2f3d15-9e78-420f-aa1b-25ff8aaf61fd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550452971096,
        "parent_id": "889fab18-91b3-4ec8-b6cf-b6dd4500b42c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "a method to increment my click count"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "a method to increment my click count"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550452971097,
        "id": "68407035-3d78-49bd-bf3b-82574420eea6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550452971097,
        "parent_id": "889fab18-91b3-4ec8-b6cf-b6dd4500b42c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "a method to restore some previous state (important for orientation changes)"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "a method to restore some previous state (important for orientation changes)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550452971097,
        "id": "5d42353e-8493-4f33-a99f-f3c6b33a0448",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550452971097,
        "parent_id": "889fab18-91b3-4ec8-b6cf-b6dd4500b42c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Also I define here a ‘state of excitement’ that is dependent on the number of clicks. This will later be used to update color and message on the View."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Also I define here a ‘state of excitement’ that is dependent on the number of clicks. This will later be used to update color and message on the View."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550452971097,
        "id": "70428d38-55ed-425e-a6df-218d45137530",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550452971097,
        "parent_id": "889fab18-91b3-4ec8-b6cf-b6dd4500b42c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It is important to note that there are no assumptions made in the model about how the state might be displayed to the user!"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It is important to note that there are no assumptions made in the model about how the state might be displayed to the user!"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550452971097,
        "id": "0ab44e8d-d29f-40fe-a733-1d6f72d8b8ea",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550452971097,
        "parent_id": "889fab18-91b3-4ec8-b6cf-b6dd4500b42c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "ClickerModel.java",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "ClickerModel.java",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550452971097,
        "id": "65f36b5a-267a-46c9-90be-d03b07527361",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550452971097,
        "parent_id": "889fab18-91b3-4ec8-b6cf-b6dd4500b42c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "import com.google.common.base.Optional;\n\nimport de.walled.mvvmtest.viewmodel.ViewState;\n\npublic class ClickerModel implements IClickerModel {\n\n    private int numberOfClicks;\n    private Excitement stateOfExcitement;\n\n    public void incrementClicks() {\n        numberOfClicks += 1;\n        updateStateOfExcitement();\n    }\n\n    public int getNumberOfClicks() {\n        return Optional.fromNullable(numberOfClicks).or(0);\n    }\n\n    public Excitement getStateOfExcitement() {\n        return Optional.fromNullable(stateOfExcitement).or(Excitement.BOO);\n    }\n\n    public void restoreState(ViewState state) {\n        numberOfClicks = state.getNumberOfClicks();\n        updateStateOfExcitement();\n    }\n\n    private void updateStateOfExcitement() {\n        if (numberOfClicks \u003c 10) {\n            stateOfExcitement = Excitement.BOO;\n        } else if (numberOfClicks \u003c= 20) {\n            stateOfExcitement = Excitement.MEH;\n        } else {\n            stateOfExcitement = Excitement.WOOHOO;\n        }\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "import com.google.common.base.Optional;\n\nimport de.walled.mvvmtest.viewmodel.ViewState;\n\npublic class ClickerModel implements IClickerModel {\n\n    private int numberOfClicks;\n    private Excitement stateOfExcitement;\n\n    public void incrementClicks() {\n        numberOfClicks += 1;\n        updateStateOfExcitement();\n    }\n\n    public int getNumberOfClicks() {\n        return Optional.fromNullable(numberOfClicks).or(0);\n    }\n\n    public Excitement getStateOfExcitement() {\n        return Optional.fromNullable(stateOfExcitement).or(Excitement.BOO);\n    }\n\n    public void restoreState(ViewState state) {\n        numberOfClicks = state.getNumberOfClicks();\n        updateStateOfExcitement();\n    }\n\n    private void updateStateOfExcitement() {\n        if (numberOfClicks \u003c 10) {\n            stateOfExcitement = Excitement.BOO;\n        } else if (numberOfClicks \u003c= 20) {\n            stateOfExcitement = Excitement.MEH;\n        } else {\n            stateOfExcitement = Excitement.WOOHOO;\n        }\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550452971097,
        "id": "c7633ff6-d8d1-4646-a8e6-19314d6947dc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550452971097,
        "parent_id": "889fab18-91b3-4ec8-b6cf-b6dd4500b42c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Next the ViewModel."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Next the ViewModel."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550452971097,
        "id": "0daa706d-6d99-4a25-835f-2884f913d62b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550452971097,
        "parent_id": "889fab18-91b3-4ec8-b6cf-b6dd4500b42c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This will trigger changes on the model and format data from the model to show them on the view. Note that it is here where we evaluate which GUI representation is appropriate for the state given by the model ("
            ],
            [
              "resolveCounterColor",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "resolveLabelText",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "). So we could for example easily implement an "
            ],
            [
              "UnderachieverClickerModel",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " that has lower thresholds for the state of excitement without touching any code in the viewModel or view."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This will trigger changes on the model and format data from the model to show them on the view. Note that it is here where we evaluate which GUI representation is appropriate for the state given by the model ("
          },
          {
            "Text": "resolveCounterColor",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "resolveLabelText",
            "AttrFlags": 2
          },
          {
            "Text": "). So we could for example easily implement an "
          },
          {
            "Text": "UnderachieverClickerModel",
            "AttrFlags": 2
          },
          {
            "Text": " that has lower thresholds for the state of excitement without touching any code in the viewModel or view."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550452971098,
        "id": "452829b6-9071-4ee5-9cee-c03a84f23f2c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550452971098,
        "parent_id": "889fab18-91b3-4ec8-b6cf-b6dd4500b42c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Also note that the ViewModel does not hold any references to view objects. All properties are bound via the "
            ],
            [
              "@Bindable",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " annotations and updated when either "
            ],
            [
              "notifyChange()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (signals all properties need to be updated) or "
            ],
            [
              "notifyPropertyChanged(BR.propertyName)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (signals this properties need to be updated)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Also note that the ViewModel does not hold any references to view objects. All properties are bound via the "
          },
          {
            "Text": "@Bindable",
            "AttrFlags": 2
          },
          {
            "Text": " annotations and updated when either "
          },
          {
            "Text": "notifyChange()",
            "AttrFlags": 2
          },
          {
            "Text": " (signals all properties need to be updated) or "
          },
          {
            "Text": "notifyPropertyChanged(BR.propertyName)",
            "AttrFlags": 2
          },
          {
            "Text": " (signals this properties need to be updated)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550452971098,
        "id": "e2b5aa24-aeea-495e-bdc6-b1d99632087a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550452971098,
        "parent_id": "889fab18-91b3-4ec8-b6cf-b6dd4500b42c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "ClickerViewModel.java",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "ClickerViewModel.java",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550452971098,
        "id": "9dd58400-f90b-47e1-849e-56d47379a5fa",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550452971098,
        "parent_id": "889fab18-91b3-4ec8-b6cf-b6dd4500b42c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "import android.databinding.BaseObservable;\n\nimport android.databinding.Bindable;\nimport android.support.annotation.ColorRes;\nimport android.support.annotation.StringRes;\n    \nimport com.android.databinding.library.baseAdapters.BR;\n    \nimport de.walled.mvvmtest.R;\nimport de.walled.mvvmtest.api.IClickerApi;\nimport de.walled.mvvmtest.model.Excitement;\nimport de.walled.mvvmtest.model.IClickerModel;\nimport rx.Observable;\n\npublic class ClickerViewModel extends BaseObservable {\n\n    private final IClickerApi api;\n    boolean isLoading = false;\n    private IClickerModel model;\n\n    public ClickerViewModel(IClickerModel model, IClickerApi api) {\n        this.model = model;\n        this.api = api;\n    }\n\n    public void onClickIncrement() {\n        model.incrementClicks();\n        notifyChange();\n    }\n\n    public ViewState getViewState() {\n        ViewState viewState = new ViewState();\n        viewState.setNumberOfClicks(model.getNumberOfClicks());\n        return viewState;\n    }\n\n    public Observable\u003cViewState\u003e loadData() {\n        isLoading = true;\n        return api.fetchInitialState()\n                .doOnNext(this::initModel)\n                .doOnTerminate(() -\u003e {\n                    isLoading = false;\n                    notifyPropertyChanged(BR.loadingVisible);\n                    notifyPropertyChanged(BR.contentVisible);\n                });\n    }\n\n    public void initFromSavedState(ViewState savedState) {\n        initModel(savedState);\n    }\n\n    @Bindable\n    public String getNumberOfClicks() {\n        final int clicks = model.getNumberOfClicks();\n        return String.valueOf(clicks);\n    }\n\n    @Bindable\n    @StringRes\n    public int getLabelText() {\n        final Excitement stateOfExcitement = model.getStateOfExcitement();\n        return resolveLabelText(stateOfExcitement);\n    }\n\n    @Bindable\n    @ColorRes\n    public int getCounterColor() {\n        final Excitement stateOfExcitement = model.getStateOfExcitement();\n        return resolveCounterColor(stateOfExcitement);\n    }\n\n    @Bindable\n    public boolean isLoadingVisible() {\n        return isLoading;\n    }\n\n    @Bindable\n    public boolean isContentVisible() {\n        return !isLoading;\n    }\n\n    private void initModel(final ViewState viewState) {\n        model.restoreState(viewState);\n        notifyChange();\n    }\n\n    @ColorRes\n    private int resolveCounterColor(Excitement stateOfExcitement) {\n        switch (stateOfExcitement) {\n            case MEH:\n                return R.color.yellow;\n            case WOOHOO:\n                return R.color.green;\n            default:\n                return R.color.red;\n        }\n    }\n\n    @StringRes\n    private int resolveLabelText(Excitement stateOfExcitement) {\n        switch (stateOfExcitement) {\n            case MEH:\n                return R.string.label_indifferent;\n            case WOOHOO:\n                return R.string.label_excited;\n            default:\n                return R.string.label_negative;\n        }\n    }\n\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "import android.databinding.BaseObservable;\n\nimport android.databinding.Bindable;\nimport android.support.annotation.ColorRes;\nimport android.support.annotation.StringRes;\n    \nimport com.android.databinding.library.baseAdapters.BR;\n    \nimport de.walled.mvvmtest.R;\nimport de.walled.mvvmtest.api.IClickerApi;\nimport de.walled.mvvmtest.model.Excitement;\nimport de.walled.mvvmtest.model.IClickerModel;\nimport rx.Observable;\n\npublic class ClickerViewModel extends BaseObservable {\n\n    private final IClickerApi api;\n    boolean isLoading = false;\n    private IClickerModel model;\n\n    public ClickerViewModel(IClickerModel model, IClickerApi api) {\n        this.model = model;\n        this.api = api;\n    }\n\n    public void onClickIncrement() {\n        model.incrementClicks();\n        notifyChange();\n    }\n\n    public ViewState getViewState() {\n        ViewState viewState = new ViewState();\n        viewState.setNumberOfClicks(model.getNumberOfClicks());\n        return viewState;\n    }\n\n    public Observable\u003cViewState\u003e loadData() {\n        isLoading = true;\n        return api.fetchInitialState()\n                .doOnNext(this::initModel)\n                .doOnTerminate(() -\u003e {\n                    isLoading = false;\n                    notifyPropertyChanged(BR.loadingVisible);\n                    notifyPropertyChanged(BR.contentVisible);\n                });\n    }\n\n    public void initFromSavedState(ViewState savedState) {\n        initModel(savedState);\n    }\n\n    @Bindable\n    public String getNumberOfClicks() {\n        final int clicks = model.getNumberOfClicks();\n        return String.valueOf(clicks);\n    }\n\n    @Bindable\n    @StringRes\n    public int getLabelText() {\n        final Excitement stateOfExcitement = model.getStateOfExcitement();\n        return resolveLabelText(stateOfExcitement);\n    }\n\n    @Bindable\n    @ColorRes\n    public int getCounterColor() {\n        final Excitement stateOfExcitement = model.getStateOfExcitement();\n        return resolveCounterColor(stateOfExcitement);\n    }\n\n    @Bindable\n    public boolean isLoadingVisible() {\n        return isLoading;\n    }\n\n    @Bindable\n    public boolean isContentVisible() {\n        return !isLoading;\n    }\n\n    private void initModel(final ViewState viewState) {\n        model.restoreState(viewState);\n        notifyChange();\n    }\n\n    @ColorRes\n    private int resolveCounterColor(Excitement stateOfExcitement) {\n        switch (stateOfExcitement) {\n            case MEH:\n                return R.color.yellow;\n            case WOOHOO:\n                return R.color.green;\n            default:\n                return R.color.red;\n        }\n    }\n\n    @StringRes\n    private int resolveLabelText(Excitement stateOfExcitement) {\n        switch (stateOfExcitement) {\n            case MEH:\n                return R.string.label_indifferent;\n            case WOOHOO:\n                return R.string.label_excited;\n            default:\n                return R.string.label_negative;\n        }\n    }\n\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550452971098,
        "id": "5cf892cb-ed9d-452c-a486-60db9e08dc86",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550452971098,
        "parent_id": "889fab18-91b3-4ec8-b6cf-b6dd4500b42c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Tying it all together in the Activity!"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Tying it all together in the Activity!"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550452971098,
        "id": "5a766c98-cf4a-4ad9-820c-f3944a98568d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550452971098,
        "parent_id": "889fab18-91b3-4ec8-b6cf-b6dd4500b42c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Here we see the view initializing the viewModel with all dependencies it might need, that have to be instantiated from an android context."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Here we see the view initializing the viewModel with all dependencies it might need, that have to be instantiated from an android context."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550452971098,
        "id": "c20b1ee4-db34-4e47-921d-b962bb9431c3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550452971098,
        "parent_id": "889fab18-91b3-4ec8-b6cf-b6dd4500b42c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "After the viewModel is initialized it is bound to the xml layout via the DataBindingUtil (Please check ‘Syntax’ section for naming of generated classes)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "After the viewModel is initialized it is bound to the xml layout via the DataBindingUtil (Please check ‘Syntax’ section for naming of generated classes)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550452971098,
        "id": "a49475af-d480-46c6-b1e6-ce9a226a1e6a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550452971098,
        "parent_id": "889fab18-91b3-4ec8-b6cf-b6dd4500b42c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note subscriptions are subscribed to on this layer because we have to handle unsubscribing them when the activity is paused or destroyed to avoid memory leaks and NPEs. Also persisting and reloading of the viewState on OrientationChanges is triggered here"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note subscriptions are subscribed to on this layer because we have to handle unsubscribing them when the activity is paused or destroyed to avoid memory leaks and NPEs. Also persisting and reloading of the viewState on OrientationChanges is triggered here"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550452971098,
        "id": "6bf4a653-8844-42fb-bad2-5490dbd25d30",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550452971098,
        "parent_id": "889fab18-91b3-4ec8-b6cf-b6dd4500b42c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "MainActivity.java",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "MainActivity.java",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550452971099,
        "id": "1460bf6e-5130-4b4d-8e3d-2334e1fd0e62",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550452971099,
        "parent_id": "889fab18-91b3-4ec8-b6cf-b6dd4500b42c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "import android.databinding.DataBindingUtil;\nimport android.os.Bundle;\nimport android.support.v7.app.AppCompatActivity;\n\nimport de.walled.mvvmtest.R;\nimport de.walled.mvvmtest.api.ClickerApi;\nimport de.walled.mvvmtest.api.IClickerApi;\nimport de.walled.mvvmtest.databinding.ActivityMainBinding;\nimport de.walled.mvvmtest.model.ClickerModel;\nimport de.walled.mvvmtest.viewmodel.ClickerViewModel;\nimport de.walled.mvvmtest.viewmodel.ViewState;\nimport rx.Subscription;\nimport rx.subscriptions.Subscriptions;\n\npublic class MainActivity extends AppCompatActivity {\n\n    private static final String KEY_VIEW_STATE = \"state.view\";\n\n    private ClickerViewModel viewModel;\n    private Subscription fakeLoader = Subscriptions.unsubscribed();\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        // would usually be injected but I feel Dagger would be out of scope\n        final IClickerApi api = new ClickerApi();\n        setupViewModel(savedInstanceState, api);\n\n        ActivityMainBinding binding = DataBindingUtil.setContentView(this, R.layout.activity_main);\n        binding.setViewModel(viewModel);\n    }\n\n    @Override\n    protected void onPause() {\n        fakeLoader.unsubscribe();\n        super.onPause();\n    }\n\n    @Override\n    protected void onDestroy() {\n        fakeLoader.unsubscribe();\n        super.onDestroy();\n    }\n\n    @Override\n    protected void onSaveInstanceState(Bundle outState) {\n        outState.putSerializable(KEY_VIEW_STATE, viewModel.getViewState());\n    }\n\n    private void setupViewModel(Bundle savedInstance, IClickerApi api) {\n        viewModel = new ClickerViewModel(new ClickerModel(), api);\n        final ViewState savedState = getViewStateFromBundle(savedInstance);\n\n        if (savedState == null) {\n            fakeLoader = viewModel.loadData().subscribe();\n        } else {\n            viewModel.initFromSavedState(savedState);\n        }\n    }\n\n    private ViewState getViewStateFromBundle(Bundle savedInstance) {\n        if (savedInstance != null) {\n            return (ViewState) savedInstance.getSerializable(KEY_VIEW_STATE);\n        }\n        return null;\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "import android.databinding.DataBindingUtil;\nimport android.os.Bundle;\nimport android.support.v7.app.AppCompatActivity;\n\nimport de.walled.mvvmtest.R;\nimport de.walled.mvvmtest.api.ClickerApi;\nimport de.walled.mvvmtest.api.IClickerApi;\nimport de.walled.mvvmtest.databinding.ActivityMainBinding;\nimport de.walled.mvvmtest.model.ClickerModel;\nimport de.walled.mvvmtest.viewmodel.ClickerViewModel;\nimport de.walled.mvvmtest.viewmodel.ViewState;\nimport rx.Subscription;\nimport rx.subscriptions.Subscriptions;\n\npublic class MainActivity extends AppCompatActivity {\n\n    private static final String KEY_VIEW_STATE = \"state.view\";\n\n    private ClickerViewModel viewModel;\n    private Subscription fakeLoader = Subscriptions.unsubscribed();\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        // would usually be injected but I feel Dagger would be out of scope\n        final IClickerApi api = new ClickerApi();\n        setupViewModel(savedInstanceState, api);\n\n        ActivityMainBinding binding = DataBindingUtil.setContentView(this, R.layout.activity_main);\n        binding.setViewModel(viewModel);\n    }\n\n    @Override\n    protected void onPause() {\n        fakeLoader.unsubscribe();\n        super.onPause();\n    }\n\n    @Override\n    protected void onDestroy() {\n        fakeLoader.unsubscribe();\n        super.onDestroy();\n    }\n\n    @Override\n    protected void onSaveInstanceState(Bundle outState) {\n        outState.putSerializable(KEY_VIEW_STATE, viewModel.getViewState());\n    }\n\n    private void setupViewModel(Bundle savedInstance, IClickerApi api) {\n        viewModel = new ClickerViewModel(new ClickerModel(), api);\n        final ViewState savedState = getViewStateFromBundle(savedInstance);\n\n        if (savedState == null) {\n            fakeLoader = viewModel.loadData().subscribe();\n        } else {\n            viewModel.initFromSavedState(savedState);\n        }\n    }\n\n    private ViewState getViewStateFromBundle(Bundle savedInstance) {\n        if (savedInstance != null) {\n            return (ViewState) savedInstance.getSerializable(KEY_VIEW_STATE);\n        }\n        return null;\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550452971099,
        "id": "eba26e2f-e9e7-4fbe-b4ab-673f0beb274c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550452971099,
        "parent_id": "889fab18-91b3-4ec8-b6cf-b6dd4500b42c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To see everything in action check out this "
            ],
            [
              "example project",
              [
                [
                  "a",
                  "https://github.com/danielw93/MVVM-Example"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To see everything in action check out this "
          },
          {
            "Text": "example project",
            "Link": "https://github.com/danielw93/MVVM-Example"
          },
          {
            "Text": "."
          }
        ]
      }
    ],
    "title": "MVVM Example using DataBinding Library",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}