{
  "ID": "db9071f8-68e3-4cbe-8362-66fff9dc5300",
  "Root": {
    "alive": true,
    "content": [
      "c0ef578e-bed7-4a19-a737-4c8325091f98",
      "dbcb960b-4c2f-4dfe-b3bb-d80a98ef8ed3",
      "dca60967-53e2-4ab2-88b4-2fe7dbc61166",
      "0502352a-adb3-4e15-ad55-9abea3edf4d6"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550445157241,
    "id": "db9071f8-68e3-4cbe-8362-66fff9dc5300",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550445157241,
    "parent_id": "7145866f-7d62-48b0-a57b-66c494eb5a9f",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "060 Upload multiple file using Retrofit as multipart"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550445157239,
        "id": "c0ef578e-bed7-4a19-a737-4c8325091f98",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550445157239,
        "parent_id": "db9071f8-68e3-4cbe-8362-66fff9dc5300",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Once you have setup the Retrofit environment in your project, you can use the following example that demonstrates how to upload multiple files using Retrofit:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Once you have setup the Retrofit environment in your project, you can use the following example that demonstrates how to upload multiple files using Retrofit:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550445157241,
        "id": "dbcb960b-4c2f-4dfe-b3bb-d80a98ef8ed3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550445157241,
        "parent_id": "db9071f8-68e3-4cbe-8362-66fff9dc5300",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "private void mulipleFileUploadFile(Uri[] fileUri) {\n    OkHttpClient okHttpClient = new OkHttpClient();\n    OkHttpClient clientWith30sTimeout = okHttpClient.newBuilder()\n            .readTimeout(30, TimeUnit.SECONDS)\n            .build();\n\n    Retrofit retrofit = new Retrofit.Builder()\n            .baseUrl(API_URL_BASE)\n            .addConverterFactory(new MultiPartConverter())\n            .client(clientWith30sTimeout)\n            .build();\n\n    WebAPIService service = retrofit.create(WebAPIService.class); //here is the interface which you have created for the call service\n    Map\u003cString, okhttp3.RequestBody\u003e maps = new HashMap\u003c\u003e();\n\n    if (fileUri!=null \u0026\u0026 fileUri.length\u003e0) {\n        for (int i = 0; i \u003c fileUri.length; i++) {\n            String filePath = getRealPathFromUri(fileUri[i]);\n            File file1 = new File(filePath);\n\n            if (filePath != null \u0026\u0026 filePath.length() \u003e 0) {\n                if (file1.exists()) {\n                    okhttp3.RequestBody requestFile = okhttp3.RequestBody.create(okhttp3.MediaType.parse(\"multipart/form-data\"), file1);\n                    String filename = \"imagePath\" + i; //key for upload file like : imagePath0\n                    maps.put(filename + \"\\\"; filename=\\\"\" + file1.getName(), requestFile);\n                }\n            }\n        }\n    }\n\n    String descriptionString = \" string request\";//\n    //hear is the your json request\n    Call\u003cString\u003e call = service.postFile(maps, descriptionString);\n    call.enqueue(new Callback\u003cString\u003e() {\n        @Override\n        public void onResponse(Call\u003cString\u003e call,\n                               Response\u003cString\u003e response) {\n            Log.i(LOG_TAG, \"success\");\n            Log.d(\"body==\u003e\", response.body().toString() + \"\");\n            Log.d(\"isSuccessful==\u003e\", response.isSuccessful() + \"\");\n            Log.d(\"message==\u003e\", response.message() + \"\");\n            Log.d(\"raw==\u003e\", response.raw().toString() + \"\");\n            Log.d(\"raw().networkResponse()\", response.raw().networkResponse().toString() + \"\");\n        }\n\n        @Override\n        public void onFailure(Call\u003cString\u003e call, Throwable t) {\n            Log.e(LOG_TAG, t.getMessage());\n        }\n    });\n}\n    \npublic String getRealPathFromUri(final Uri uri) { // function for file path from uri,\n    if (Build.VERSION.SDK_INT \u003e= Build.VERSION_CODES.KITKAT \u0026\u0026 DocumentsContract.isDocumentUri(mContext, uri)) {\n        // ExternalStorageProvider\n        if (isExternalStorageDocument(uri)) {\n            final String docId = DocumentsContract.getDocumentId(uri);\n            final String[] split = docId.split(\":\");\n            final String type = split[0];\n\n            if (\"primary\".equalsIgnoreCase(type)) {\n                return Environment.getExternalStorageDirectory() + \"/\" + split[1];\n            }\n        }\n        // DownloadsProvider\n        else if (isDownloadsDocument(uri)) {\n\n            final String id = DocumentsContract.getDocumentId(uri);\n            final Uri contentUri = ContentUris.withAppendedId(\n                    Uri.parse(\"content://downloads/public_downloads\"), Long.valueOf(id));\n\n            return getDataColumn(mContext, contentUri, null, null);\n        }\n        // MediaProvider\n        else if (isMediaDocument(uri)) {\n            final String docId = DocumentsContract.getDocumentId(uri);\n            final String[] split = docId.split(\":\");\n            final String type = split[0];\n\n            Uri contentUri = null;\n            if (\"image\".equals(type)) {\n                contentUri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI;\n            } else if (\"video\".equals(type)) {\n                contentUri = MediaStore.Video.Media.EXTERNAL_CONTENT_URI;\n            } else if (\"audio\".equals(type)) {\n                contentUri = MediaStore.Audio.Media.EXTERNAL_CONTENT_URI;\n            }\n\n            final String selection = \"_id=?\";\n            final String[] selectionArgs = new String[]{\n                    split[1]\n            };\n\n            return getDataColumn(mContext, contentUri, selection, selectionArgs);\n        }\n    }\n    // MediaStore (and general)\n    else if (\"content\".equalsIgnoreCase(uri.getScheme())) {\n\n        // Return the remote address\n        if (isGooglePhotosUri(uri))\n            return uri.getLastPathSegment();\n\n        return getDataColumn(mContext, uri, null, null);\n    }\n    // File\n    else if (\"file\".equalsIgnoreCase(uri.getScheme())) {\n        return uri.getPath();\n    }\n\n    return null;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "private void mulipleFileUploadFile(Uri[] fileUri) {\n    OkHttpClient okHttpClient = new OkHttpClient();\n    OkHttpClient clientWith30sTimeout = okHttpClient.newBuilder()\n            .readTimeout(30, TimeUnit.SECONDS)\n            .build();\n\n    Retrofit retrofit = new Retrofit.Builder()\n            .baseUrl(API_URL_BASE)\n            .addConverterFactory(new MultiPartConverter())\n            .client(clientWith30sTimeout)\n            .build();\n\n    WebAPIService service = retrofit.create(WebAPIService.class); //here is the interface which you have created for the call service\n    Map\u003cString, okhttp3.RequestBody\u003e maps = new HashMap\u003c\u003e();\n\n    if (fileUri!=null \u0026\u0026 fileUri.length\u003e0) {\n        for (int i = 0; i \u003c fileUri.length; i++) {\n            String filePath = getRealPathFromUri(fileUri[i]);\n            File file1 = new File(filePath);\n\n            if (filePath != null \u0026\u0026 filePath.length() \u003e 0) {\n                if (file1.exists()) {\n                    okhttp3.RequestBody requestFile = okhttp3.RequestBody.create(okhttp3.MediaType.parse(\"multipart/form-data\"), file1);\n                    String filename = \"imagePath\" + i; //key for upload file like : imagePath0\n                    maps.put(filename + \"\\\"; filename=\\\"\" + file1.getName(), requestFile);\n                }\n            }\n        }\n    }\n\n    String descriptionString = \" string request\";//\n    //hear is the your json request\n    Call\u003cString\u003e call = service.postFile(maps, descriptionString);\n    call.enqueue(new Callback\u003cString\u003e() {\n        @Override\n        public void onResponse(Call\u003cString\u003e call,\n                               Response\u003cString\u003e response) {\n            Log.i(LOG_TAG, \"success\");\n            Log.d(\"body==\u003e\", response.body().toString() + \"\");\n            Log.d(\"isSuccessful==\u003e\", response.isSuccessful() + \"\");\n            Log.d(\"message==\u003e\", response.message() + \"\");\n            Log.d(\"raw==\u003e\", response.raw().toString() + \"\");\n            Log.d(\"raw().networkResponse()\", response.raw().networkResponse().toString() + \"\");\n        }\n\n        @Override\n        public void onFailure(Call\u003cString\u003e call, Throwable t) {\n            Log.e(LOG_TAG, t.getMessage());\n        }\n    });\n}\n    \npublic String getRealPathFromUri(final Uri uri) { // function for file path from uri,\n    if (Build.VERSION.SDK_INT \u003e= Build.VERSION_CODES.KITKAT \u0026\u0026 DocumentsContract.isDocumentUri(mContext, uri)) {\n        // ExternalStorageProvider\n        if (isExternalStorageDocument(uri)) {\n            final String docId = DocumentsContract.getDocumentId(uri);\n            final String[] split = docId.split(\":\");\n            final String type = split[0];\n\n            if (\"primary\".equalsIgnoreCase(type)) {\n                return Environment.getExternalStorageDirectory() + \"/\" + split[1];\n            }\n        }\n        // DownloadsProvider\n        else if (isDownloadsDocument(uri)) {\n\n            final String id = DocumentsContract.getDocumentId(uri);\n            final Uri contentUri = ContentUris.withAppendedId(\n                    Uri.parse(\"content://downloads/public_downloads\"), Long.valueOf(id));\n\n            return getDataColumn(mContext, contentUri, null, null);\n        }\n        // MediaProvider\n        else if (isMediaDocument(uri)) {\n            final String docId = DocumentsContract.getDocumentId(uri);\n            final String[] split = docId.split(\":\");\n            final String type = split[0];\n\n            Uri contentUri = null;\n            if (\"image\".equals(type)) {\n                contentUri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI;\n            } else if (\"video\".equals(type)) {\n                contentUri = MediaStore.Video.Media.EXTERNAL_CONTENT_URI;\n            } else if (\"audio\".equals(type)) {\n                contentUri = MediaStore.Audio.Media.EXTERNAL_CONTENT_URI;\n            }\n\n            final String selection = \"_id=?\";\n            final String[] selectionArgs = new String[]{\n                    split[1]\n            };\n\n            return getDataColumn(mContext, contentUri, selection, selectionArgs);\n        }\n    }\n    // MediaStore (and general)\n    else if (\"content\".equalsIgnoreCase(uri.getScheme())) {\n\n        // Return the remote address\n        if (isGooglePhotosUri(uri))\n            return uri.getLastPathSegment();\n\n        return getDataColumn(mContext, uri, null, null);\n    }\n    // File\n    else if (\"file\".equalsIgnoreCase(uri.getScheme())) {\n        return uri.getPath();\n    }\n\n    return null;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550445157241,
        "id": "dca60967-53e2-4ab2-88b4-2fe7dbc61166",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550445157241,
        "parent_id": "db9071f8-68e3-4cbe-8362-66fff9dc5300",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Following is the interface"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Following is the interface"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550445157241,
        "id": "0502352a-adb3-4e15-ad55-9abea3edf4d6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550445157241,
        "parent_id": "db9071f8-68e3-4cbe-8362-66fff9dc5300",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public interface WebAPIService {\n    @Multipart\n    @POST(\"main.php\")\n    Call\u003cString\u003e postFile(@PartMap Map\u003cString,RequestBody\u003e Files, @Part(\"json\") String description);\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public interface WebAPIService {\n    @Multipart\n    @POST(\"main.php\")\n    Call\u003cString\u003e postFile(@PartMap Map\u003cString,RequestBody\u003e Files, @Part(\"json\") String description);\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "060 Upload multiple file using Retrofit as multipart"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}