{
  "ID": "7e573de1-8381-4f9e-b9ae-4cda9fa7f72e",
  "Root": {
    "alive": true,
    "content": [
      "731cca2c-3790-4223-ae95-3cddecdcf0a7",
      "09f8e89e-f3c4-4869-9bf5-51e1841a684e",
      "d27f9a97-7ff6-41e6-9714-50f8c04aa195",
      "1293b690-5582-4b77-8086-bfdeb9970889",
      "18b9cc3a-9a41-45f7-992b-dc23d8f17f4b",
      "0f7eca36-110b-4e1d-a541-c69251fc37d1"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550456558050,
    "id": "7e573de1-8381-4f9e-b9ae-4cda9fa7f72e",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550456558050,
    "parent_id": "1132475f-3f52-4abc-8b7e-1d1ad503adaa",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "010 Optimized VideoView in ListView"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550456558045,
        "id": "731cca2c-3790-4223-ae95-3cddecdcf0a7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550456558045,
        "parent_id": "7e573de1-8381-4f9e-b9ae-4cda9fa7f72e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This the custom "
            ],
            [
              "VideoView",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " that you need to have it in your package."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This the custom "
          },
          {
            "Text": "VideoView",
            "AttrFlags": 2
          },
          {
            "Text": " that you need to have it in your package."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550456558048,
        "id": "09f8e89e-f3c4-4869-9bf5-51e1841a684e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550456558048,
        "parent_id": "7e573de1-8381-4f9e-b9ae-4cda9fa7f72e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Custom VideoView Layout:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Custom VideoView Layout:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550456558048,
        "id": "d27f9a97-7ff6-41e6-9714-50f8c04aa195",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550456558048,
        "parent_id": "7e573de1-8381-4f9e-b9ae-4cda9fa7f72e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "\u003cyour.packagename.VideoView\n    android:id=\"@+id/video_view\"\n    android:layout_width=\"300dp\"\n    android:layout_height=\"300dp\" /\u003e"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "\u003cyour.packagename.VideoView\n    android:id=\"@+id/video_view\"\n    android:layout_width=\"300dp\"\n    android:layout_height=\"300dp\" /\u003e",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550456558048,
        "id": "1293b690-5582-4b77-8086-bfdeb9970889",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550456558048,
        "parent_id": "7e573de1-8381-4f9e-b9ae-4cda9fa7f72e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Code for custom Optimized "
            ],
            [
              "VideoView",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Code for custom Optimized "
          },
          {
            "Text": "VideoView",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550456558048,
        "id": "18b9cc3a-9a41-45f7-992b-dc23d8f17f4b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550456558048,
        "parent_id": "7e573de1-8381-4f9e-b9ae-4cda9fa7f72e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "package your.package.com.whateveritis;\n\nimport android.content.Context;\nimport android.content.Intent;\nimport android.graphics.SurfaceTexture;\nimport android.media.AudioManager;\nimport android.media.MediaPlayer;\nimport android.media.MediaPlayer.OnCompletionListener;\nimport android.media.MediaPlayer.OnErrorListener;\nimport android.media.MediaPlayer.OnInfoListener;\nimport android.net.Uri;\nimport android.util.AttributeSet;\nimport android.util.Log;\nimport android.view.KeyEvent;\nimport android.view.MotionEvent;\nimport android.view.Surface;\nimport android.view.TextureView;\nimport android.view.View;\nimport android.widget.MediaController;\nimport android.widget.MediaController.MediaPlayerControl;\n\nimport java.io.IOException;\n\n\n/**\n * VideoView is used to play video, just like\n * {@link android.widget.VideoView VideoView}. We define a custom view, because\n * we could not use {@link android.widget.VideoView VideoView} in ListView. \u003cbr/\u003e\n * VideoViews inside ScrollViews do not scroll properly. Even if you use the\n * workaround to set the background color, the MediaController does not scroll\n * along with the VideoView. Also, the scrolling video looks horrendous with the\n * workaround, lots of flickering.\n *\n * @author leo\n */\npublic class VideoView extends TextureView implements MediaPlayerControl {\n\n    private static final String TAG = \"tag\";\n\n    // all possible internal states\n    private static final int STATE_ERROR = -1;\n    private static final int STATE_IDLE = 0;\n    private static final int STATE_PREPARING = 1;\n    private static final int STATE_PREPARED = 2;\n    private static final int STATE_PLAYING = 3;\n    private static final int STATE_PAUSED = 4;\n    private static final int STATE_PLAYBACK_COMPLETED = 5;\n\n    // currentState is a VideoView object's current state.\n    // targetState is the state that a method caller intends to reach.\n    // For instance, regardless the VideoView object's current state,\n    // calling pause() intends to bring the object to a target state\n    // of STATE_PAUSED.\n    private int mCurrentState = STATE_IDLE;\n    private int mTargetState = STATE_IDLE;\n\n    // Stuff we need for playing and showing a video\n    private MediaPlayer mMediaPlayer;\n    private int mVideoWidth;\n    private int mVideoHeight;\n    private int mSurfaceWidth;\n    private int mSurfaceHeight;\n    private SurfaceTexture mSurfaceTexture;\n    private Surface mSurface;\n    private MediaController mMediaController;\n    private MediaPlayer.OnCompletionListener mOnCompletionListener;\n    private MediaPlayer.OnPreparedListener mOnPreparedListener;\n\n    private MediaPlayer.OnErrorListener mOnErrorListener;\n    private MediaPlayer.OnInfoListener mOnInfoListener;\n\n    private int mSeekWhenPrepared; // recording the seek position while\n    // preparing\n    private int mCurrentBufferPercentage;\n    private int mAudioSession;\n    private Uri mUri;\n\n    private Context mContext;\n\n    public VideoView(final Context context) {\n        super(context);\n        mContext = context;\n        initVideoView();\n    }\n\n    public VideoView(final Context context, final AttributeSet attrs) {\n        super(context, attrs);\n        mContext = context;\n        initVideoView();\n    }\n\n    public VideoView(Context context, AttributeSet attrs, int defStyle) {\n        super(context, attrs, defStyle);\n        mContext = context;\n        initVideoView();\n    }\n\n    public void initVideoView() {\n        mVideoHeight = 0;\n        mVideoWidth = 0;\n        setFocusable(false);\n        setSurfaceTextureListener(mSurfaceTextureListener);\n    }\n\n    public int resolveAdjustedSize(int desiredSize, int measureSpec) {\n        int result = desiredSize;\n        int specMode = MeasureSpec.getMode(measureSpec);\n        int specSize = MeasureSpec.getSize(measureSpec);\n\n        switch (specMode) {\n            case MeasureSpec.UNSPECIFIED:\n            /*\n             * Parent says we can be as big as we want. Just don't be larger\n             * than max size imposed on ourselves.\n             */\n                result = desiredSize;\n                break;\n\n            case MeasureSpec.AT_MOST:\n            /*\n             * Parent says we can be as big as we want, up to specSize. Don't be\n             * larger than specSize, and don't be larger than the max size\n             * imposed on ourselves.\n             */\n                result = Math.min(desiredSize, specSize);\n                break;\n\n            case MeasureSpec.EXACTLY:\n                // No choice. Do what we are told.\n                result = specSize;\n                break;\n        }\n        return result;\n    }\n\n    public void setVideoPath(String path) {\n        Log.d(TAG, \"Setting video path to: \" + path);\n        setVideoURI(Uri.parse(path));\n    }\n\n    public void setVideoURI(Uri _videoURI) {\n        mUri = _videoURI;\n        mSeekWhenPrepared = 0;\n        requestLayout();\n        invalidate();\n        openVideo();\n    }\n\n    public Uri getUri() {\n        return mUri;\n    }\n\n    public void setSurfaceTexture(SurfaceTexture _surfaceTexture) {\n        mSurfaceTexture = _surfaceTexture;\n    }\n\n    public void openVideo() {\n        if ((mUri == null) || (mSurfaceTexture == null)) {\n            Log.d(TAG, \"Cannot open video, uri or surface texture is null.\");\n            return;\n        }\n        // Tell the music playback service to pause\n        // TODO: these constants need to be published somewhere in the\n        // framework.\n        Intent i = new Intent(\"com.android.music.musicservicecommand\");\n        i.putExtra(\"command\", \"pause\");\n        mContext.sendBroadcast(i);\n        release(false);\n        try {\n            mSurface = new Surface(mSurfaceTexture);\n            mMediaPlayer = new MediaPlayer();\n            if (mAudioSession != 0) {\n                mMediaPlayer.setAudioSessionId(mAudioSession);\n            } else {\n                mAudioSession = mMediaPlayer.getAudioSessionId();\n            }\n\n            mMediaPlayer.setOnBufferingUpdateListener(mBufferingUpdateListener);\n            mMediaPlayer.setOnCompletionListener(mCompleteListener);\n            mMediaPlayer.setOnPreparedListener(mPreparedListener);\n            mMediaPlayer.setOnErrorListener(mErrorListener);\n            mMediaPlayer.setOnInfoListener(mOnInfoListener);\n            mMediaPlayer.setOnVideoSizeChangedListener(mVideoSizeChangedListener);\n\n            mMediaPlayer.setSurface(mSurface);\n            mCurrentBufferPercentage = 0;\n            mMediaPlayer.setDataSource(mContext, mUri);\n\n            mMediaPlayer.setAudioStreamType(AudioManager.STREAM_MUSIC);\n            mMediaPlayer.setScreenOnWhilePlaying(true);\n\n            mMediaPlayer.prepareAsync();\n            mCurrentState = STATE_PREPARING;\n        } catch (IllegalStateException e) {\n            mCurrentState = STATE_ERROR;\n            mTargetState = STATE_ERROR;\n            String msg = (e.getMessage()==null)?\"\":e.getMessage();\n            Log.i(\"\",msg);  // TODO auto-generated catch block\n        } catch (IOException e) {\n            mCurrentState = STATE_ERROR;\n            mTargetState = STATE_ERROR;\n            String msg = (e.getMessage()==null)?\"\":e.getMessage();\n            Log.i(\"\",msg);  // TODO auto-generated catch block\n        }\n    }\n\n    public void stopPlayback() {\n        if (mMediaPlayer != null) {\n            mMediaPlayer.stop();\n            mMediaPlayer.release();\n            mMediaPlayer = null;\n            if (null != mMediaControllListener) {\n                mMediaControllListener.onStop();\n            }\n        }\n    }\n\n    public void setMediaController(MediaController controller) {\n        if (mMediaController != null) {\n            mMediaController.hide();\n        }\n        mMediaController = controller;\n        attachMediaController();\n    }\n\n    private void attachMediaController() {\n        if (mMediaPlayer != null \u0026\u0026 mMediaController != null) {\n            mMediaController.setMediaPlayer(this);\n            View anchorView = this.getParent() instanceof View ? (View) this.getParent() : this;\n            mMediaController.setAnchorView(anchorView);\n            mMediaController.setEnabled(isInPlaybackState());\n        }\n    }\n\n    private void release(boolean cleartargetstate) {\n        Log.d(TAG, \"Releasing media player.\");\n        if (mMediaPlayer != null) {\n            mMediaPlayer.reset();\n            mMediaPlayer.release();\n            mMediaPlayer = null;\n            mCurrentState = STATE_IDLE;\n            if (cleartargetstate) {\n                mTargetState = STATE_IDLE;\n            }\n        } else {\n            Log.d(TAG, \"Media player was null, did not release.\");\n        }\n    }\n\n    @Override\n    protected void onMeasure(final int widthMeasureSpec, final int heightMeasureSpec) {\n        // Will resize the view if the video dimensions have been found.\n        // video dimensions are found after onPrepared has been called by\n        // MediaPlayer\n        int width = getDefaultSize(mVideoWidth, widthMeasureSpec);\n        int height = getDefaultSize(mVideoHeight, heightMeasureSpec);\n        if ((mVideoWidth \u003e 0) \u0026\u0026 (mVideoHeight \u003e 0)) {\n            if ((mVideoWidth * height) \u003e (width * mVideoHeight)) {\n                Log.d(TAG, \"Video too tall, change size.\");\n                height = (width * mVideoHeight) / mVideoWidth;\n            } else if ((mVideoWidth * height) \u003c (width * mVideoHeight)) {\n                Log.d(TAG, \"Video too wide, change size.\");\n                width = (height * mVideoWidth) / mVideoHeight;\n            } else {\n                Log.d(TAG, \"Aspect ratio is correct.\");\n            }\n        }\n        setMeasuredDimension(width, height);\n    }\n\n    @Override\n    public boolean onTouchEvent(MotionEvent ev) {\n        if (isInPlaybackState() \u0026\u0026 mMediaController != null) {\n            toggleMediaControlsVisiblity();\n        }\n        return false;\n    }\n\n    @Override\n    public boolean onTrackballEvent(MotionEvent ev) {\n        if (isInPlaybackState() \u0026\u0026 mMediaController != null) {\n            toggleMediaControlsVisiblity();\n        }\n        return false;\n    }\n\n    @Override\n    public boolean onKeyDown(int keyCode, KeyEvent event) {\n        boolean isKeyCodeSupported = keyCode != KeyEvent.KEYCODE_BACK \u0026\u0026 keyCode != KeyEvent.KEYCODE_VOLUME_UP \u0026\u0026 keyCode != KeyEvent.KEYCODE_VOLUME_DOWN\n                \u0026\u0026 keyCode != KeyEvent.KEYCODE_VOLUME_MUTE \u0026\u0026 keyCode != KeyEvent.KEYCODE_MENU \u0026\u0026 keyCode != KeyEvent.KEYCODE_CALL\n                \u0026\u0026 keyCode != KeyEvent.KEYCODE_ENDCALL;\n        if (isInPlaybackState() \u0026\u0026 isKeyCodeSupported \u0026\u0026 mMediaController != null) {\n            if (keyCode == KeyEvent.KEYCODE_HEADSETHOOK || keyCode == KeyEvent.KEYCODE_MEDIA_PLAY_PAUSE) {\n                if (mMediaPlayer.isPlaying()) {\n                    pause();\n                    mMediaController.show();\n                } else {\n                    start();\n                    mMediaController.hide();\n                }\n                return true;\n            } else if (keyCode == KeyEvent.KEYCODE_MEDIA_PLAY) {\n                if (!mMediaPlayer.isPlaying()) {\n                    start();\n                    mMediaController.hide();\n                }\n                return true;\n            } else if (keyCode == KeyEvent.KEYCODE_MEDIA_STOP || keyCode == KeyEvent.KEYCODE_MEDIA_PAUSE) {\n                if (mMediaPlayer.isPlaying()) {\n                    pause();\n                    mMediaController.show();\n                }\n                return true;\n            } else {\n                toggleMediaControlsVisiblity();\n            }\n        }\n\n        return super.onKeyDown(keyCode, event);\n    }\n\n    private void toggleMediaControlsVisiblity() {\n        if (mMediaController.isShowing()) {\n            mMediaController.hide();\n        } else {\n            mMediaController.show();\n        }\n    }\n\n    public void start() {\n        // This can potentially be called at several points, it will go through\n        // when all conditions are ready\n        // 1. When setting the video URI\n        // 2. When the surface becomes available\n        // 3. From the activity\n        if (isInPlaybackState()) {\n            mMediaPlayer.start();\n            mCurrentState = STATE_PLAYING;\n            if (null != mMediaControllListener) {\n                mMediaControllListener.onStart();\n            }\n        } else {\n            Log.d(TAG, \"Could not start. Current state \" + mCurrentState);\n        }\n        mTargetState = STATE_PLAYING;\n    }\n\n    public void pause() {\n        if (isInPlaybackState()) {\n            if (mMediaPlayer.isPlaying()) {\n                mMediaPlayer.pause();\n                mCurrentState = STATE_PAUSED;\n                if (null != mMediaControllListener) {\n                    mMediaControllListener.onPause();\n                }\n            }\n        }\n        mTargetState = STATE_PAUSED;\n    }\n\n    public void suspend() {\n        release(false);\n    }\n\n    public void resume() {\n        openVideo();\n    }\n\n    @Override\n    public int getDuration() {\n        if (isInPlaybackState()) {\n            return mMediaPlayer.getDuration();\n        }\n\n        return -1;\n    }\n\n    @Override\n    public int getCurrentPosition() {\n        if (isInPlaybackState()) {\n            return mMediaPlayer.getCurrentPosition();\n        }\n        return 0;\n    }\n\n    @Override\n    public void seekTo(int msec) {\n        if (isInPlaybackState()) {\n            mMediaPlayer.seekTo(msec);\n            mSeekWhenPrepared = 0;\n        } else {\n            mSeekWhenPrepared = msec;\n        }\n    }\n\n    @Override\n    public boolean isPlaying() {\n        return isInPlaybackState() \u0026\u0026 mMediaPlayer.isPlaying();\n    }\n\n    @Override\n    public int getBufferPercentage() {\n        if (mMediaPlayer != null) {\n            return mCurrentBufferPercentage;\n        }\n        return 0;\n    }\n\n    private boolean isInPlaybackState() {\n        return ((mMediaPlayer != null) \u0026\u0026 (mCurrentState != STATE_ERROR) \u0026\u0026 (mCurrentState != STATE_IDLE) \u0026\u0026 (mCurrentState != STATE_PREPARING));\n    }\n\n    @Override\n    public boolean canPause() {\n        return false;\n    }\n\n    @Override\n    public boolean canSeekBackward() {\n        return false;\n    }\n\n    @Override\n    public boolean canSeekForward() {\n        return false;\n    }\n\n    @Override\n    public int getAudioSessionId() {\n        if (mAudioSession == 0) {\n            MediaPlayer foo = new MediaPlayer();\n            mAudioSession = foo.getAudioSessionId();\n            foo.release();\n        }\n        return mAudioSession;\n    }\n\n    // Listeners\n    private MediaPlayer.OnBufferingUpdateListener mBufferingUpdateListener = new MediaPlayer.OnBufferingUpdateListener() {\n        @Override\n        public void onBufferingUpdate(final MediaPlayer mp, final int percent) {\n            mCurrentBufferPercentage = percent;\n        }\n    };\n\n    private MediaPlayer.OnCompletionListener mCompleteListener = new MediaPlayer.OnCompletionListener() {\n        @Override\n        public void onCompletion(final MediaPlayer mp) {\n            mCurrentState = STATE_PLAYBACK_COMPLETED;\n            mTargetState = STATE_PLAYBACK_COMPLETED;\n            mSurface.release();\n\n            if (mMediaController != null) {\n                mMediaController.hide();\n            }\n\n            if (mOnCompletionListener != null) {\n                mOnCompletionListener.onCompletion(mp);\n            }\n\n            if (mMediaControllListener != null) {\n                mMediaControllListener.onComplete();\n            }\n        }\n    };\n\n    private MediaPlayer.OnPreparedListener mPreparedListener = new MediaPlayer.OnPreparedListener() {\n        @Override\n        public void onPrepared(final MediaPlayer mp) {\n            mCurrentState = STATE_PREPARED;\n\n            mMediaController = new MediaController(getContext());\n\n            if (mOnPreparedListener != null) {\n                mOnPreparedListener.onPrepared(mMediaPlayer);\n            }\n            if (mMediaController != null) {\n                mMediaController.setEnabled(true);\n                //mMediaController.setAnchorView(getRootView());\n            }\n\n            mVideoWidth = mp.getVideoWidth();\n            mVideoHeight = mp.getVideoHeight();\n\n            int seekToPosition = mSeekWhenPrepared; // mSeekWhenPrepared may be\n            // changed after seekTo()\n            // call\n            if (seekToPosition != 0) {\n                seekTo(seekToPosition);\n            }\n\n            requestLayout();\n            invalidate();\n            if ((mVideoWidth != 0) \u0026\u0026 (mVideoHeight != 0)) {\n                if (mTargetState == STATE_PLAYING) {\n                    mMediaPlayer.start();\n                    if (null != mMediaControllListener) {\n                        mMediaControllListener.onStart();\n                    }\n                }\n            } else {\n                if (mTargetState == STATE_PLAYING) {\n                    mMediaPlayer.start();\n                    if (null != mMediaControllListener) {\n                        mMediaControllListener.onStart();\n                    }\n                }\n            }\n        }\n    };\n\n    private MediaPlayer.OnVideoSizeChangedListener mVideoSizeChangedListener = new MediaPlayer.OnVideoSizeChangedListener() {\n        @Override\n        public void onVideoSizeChanged(final MediaPlayer mp, final int width, final int height) {\n            mVideoWidth = mp.getVideoWidth();\n            mVideoHeight = mp.getVideoHeight();\n            if (mVideoWidth != 0 \u0026\u0026 mVideoHeight != 0) {\n                requestLayout();\n            }\n        }\n    };\n\n    private MediaPlayer.OnErrorListener mErrorListener = new MediaPlayer.OnErrorListener() {\n        @Override\n        public boolean onError(final MediaPlayer mp, final int what, final int extra) {\n            Log.d(TAG, \"Error: \" + what + \",\" + extra);\n            mCurrentState = STATE_ERROR;\n            mTargetState = STATE_ERROR;\n\n            if (mMediaController != null) {\n                mMediaController.hide();\n            }\n\n            /* If an error handler has been supplied, use it and finish. */\n            if (mOnErrorListener != null) {\n                if (mOnErrorListener.onError(mMediaPlayer, what, extra)) {\n                    return true;\n                }\n            }\n\n            /*\n             * Otherwise, pop up an error dialog so the user knows that\n             * something bad has happened. Only try and pop up the dialog if\n             * we're attached to a window. When we're going away and no longer\n             * have a window, don't bother showing the user an error.\n             */\n            if (getWindowToken() != null) {\n\n//                new AlertDialog.Builder(mContext).setMessage(\"Error: \" + what + \",\" + extra).setPositiveButton(\"OK\", new DialogInterface.OnClickListener() {\n//                    public void onClick(DialogInterface dialog, int whichButton) {\n//                        /*\n//                         * If we get here, there is no onError listener, so at\n//                         * least inform them that the video is over.\n//                         */\n//                        if (mOnCompletionListener != null) {\n//                            mOnCompletionListener.onCompletion(mMediaPlayer);\n//                        }\n//                    }\n//                }).setCancelable(false).show();\n            }\n            return true;\n        }\n    };\n\n    SurfaceTextureListener mSurfaceTextureListener = new SurfaceTextureListener() {\n        @Override\n        public void onSurfaceTextureAvailable(final SurfaceTexture surface, final int width, final int height) {\n            Log.d(TAG, \"onSurfaceTextureAvailable.\");\n            mSurfaceTexture = surface;\n            openVideo();\n        }\n\n        @Override\n        public void onSurfaceTextureSizeChanged(final SurfaceTexture surface, final int width, final int height) {\n            Log.d(TAG, \"onSurfaceTextureSizeChanged: \" + width + '/' + height);\n            mSurfaceWidth = width;\n            mSurfaceHeight = height;\n            boolean isValidState = (mTargetState == STATE_PLAYING);\n            boolean hasValidSize = (mVideoWidth == width \u0026\u0026 mVideoHeight == height);\n            if (mMediaPlayer != null \u0026\u0026 isValidState \u0026\u0026 hasValidSize) {\n                if (mSeekWhenPrepared != 0) {\n                    seekTo(mSeekWhenPrepared);\n                }\n                start();\n            }\n        }\n\n        @Override\n        public boolean onSurfaceTextureDestroyed(final SurfaceTexture surface) {\n\n            mSurface = null;\n            if (mMediaController != null)\n                mMediaController.hide();\n            release(true);\n            return true;\n        }\n\n        @Override\n        public void onSurfaceTextureUpdated(final SurfaceTexture surface) {\n\n        }\n    };\n\n    /**\n     * Register a callback to be invoked when the media file is loaded and ready\n     * to go.\n     *\n     * @param l The callback that will be run\n     */\n    public void setOnPreparedListener(MediaPlayer.OnPreparedListener l) {\n        mOnPreparedListener = l;\n    }\n\n    /**\n     * Register a callback to be invoked when the end of a media file has been\n     * reached during playback.\n     *\n     * @param l The callback that will be run\n     */\n    public void setOnCompletionListener(OnCompletionListener l) {\n        mOnCompletionListener = l;\n    }\n\n    /**\n     * Register a callback to be invoked when an error occurs during playback or\n     * setup. If no listener is specified, or if the listener returned false,\n     * VideoView will inform the user of any errors.\n     *\n     * @param l The callback that will be run\n     */\n    public void setOnErrorListener(OnErrorListener l) {\n        mOnErrorListener = l;\n    }\n\n    /**\n     * Register a callback to be invoked when an informational event occurs\n     * during playback or setup.\n     *\n     * @param l The callback that will be run\n     */\n    public void setOnInfoListener(OnInfoListener l) {\n        mOnInfoListener = l;\n    }\n\n    public static interface MediaControllListener {\n        public void onStart();\n\n        public void onPause();\n\n        public void onStop();\n\n        public void onComplete();\n    }\n\n    MediaControllListener mMediaControllListener;\n\n    public void setMediaControllListener(MediaControllListener mediaControllListener) {\n        mMediaControllListener = mediaControllListener;\n    }\n\n\n    @Override\n    public void setVisibility(int visibility) {\n        System.out.println(\"setVisibility: \" + visibility);\n        super.setVisibility(visibility);\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "package your.package.com.whateveritis;\n\nimport android.content.Context;\nimport android.content.Intent;\nimport android.graphics.SurfaceTexture;\nimport android.media.AudioManager;\nimport android.media.MediaPlayer;\nimport android.media.MediaPlayer.OnCompletionListener;\nimport android.media.MediaPlayer.OnErrorListener;\nimport android.media.MediaPlayer.OnInfoListener;\nimport android.net.Uri;\nimport android.util.AttributeSet;\nimport android.util.Log;\nimport android.view.KeyEvent;\nimport android.view.MotionEvent;\nimport android.view.Surface;\nimport android.view.TextureView;\nimport android.view.View;\nimport android.widget.MediaController;\nimport android.widget.MediaController.MediaPlayerControl;\n\nimport java.io.IOException;\n\n\n/**\n * VideoView is used to play video, just like\n * {@link android.widget.VideoView VideoView}. We define a custom view, because\n * we could not use {@link android.widget.VideoView VideoView} in ListView. \u003cbr/\u003e\n * VideoViews inside ScrollViews do not scroll properly. Even if you use the\n * workaround to set the background color, the MediaController does not scroll\n * along with the VideoView. Also, the scrolling video looks horrendous with the\n * workaround, lots of flickering.\n *\n * @author leo\n */\npublic class VideoView extends TextureView implements MediaPlayerControl {\n\n    private static final String TAG = \"tag\";\n\n    // all possible internal states\n    private static final int STATE_ERROR = -1;\n    private static final int STATE_IDLE = 0;\n    private static final int STATE_PREPARING = 1;\n    private static final int STATE_PREPARED = 2;\n    private static final int STATE_PLAYING = 3;\n    private static final int STATE_PAUSED = 4;\n    private static final int STATE_PLAYBACK_COMPLETED = 5;\n\n    // currentState is a VideoView object's current state.\n    // targetState is the state that a method caller intends to reach.\n    // For instance, regardless the VideoView object's current state,\n    // calling pause() intends to bring the object to a target state\n    // of STATE_PAUSED.\n    private int mCurrentState = STATE_IDLE;\n    private int mTargetState = STATE_IDLE;\n\n    // Stuff we need for playing and showing a video\n    private MediaPlayer mMediaPlayer;\n    private int mVideoWidth;\n    private int mVideoHeight;\n    private int mSurfaceWidth;\n    private int mSurfaceHeight;\n    private SurfaceTexture mSurfaceTexture;\n    private Surface mSurface;\n    private MediaController mMediaController;\n    private MediaPlayer.OnCompletionListener mOnCompletionListener;\n    private MediaPlayer.OnPreparedListener mOnPreparedListener;\n\n    private MediaPlayer.OnErrorListener mOnErrorListener;\n    private MediaPlayer.OnInfoListener mOnInfoListener;\n\n    private int mSeekWhenPrepared; // recording the seek position while\n    // preparing\n    private int mCurrentBufferPercentage;\n    private int mAudioSession;\n    private Uri mUri;\n\n    private Context mContext;\n\n    public VideoView(final Context context) {\n        super(context);\n        mContext = context;\n        initVideoView();\n    }\n\n    public VideoView(final Context context, final AttributeSet attrs) {\n        super(context, attrs);\n        mContext = context;\n        initVideoView();\n    }\n\n    public VideoView(Context context, AttributeSet attrs, int defStyle) {\n        super(context, attrs, defStyle);\n        mContext = context;\n        initVideoView();\n    }\n\n    public void initVideoView() {\n        mVideoHeight = 0;\n        mVideoWidth = 0;\n        setFocusable(false);\n        setSurfaceTextureListener(mSurfaceTextureListener);\n    }\n\n    public int resolveAdjustedSize(int desiredSize, int measureSpec) {\n        int result = desiredSize;\n        int specMode = MeasureSpec.getMode(measureSpec);\n        int specSize = MeasureSpec.getSize(measureSpec);\n\n        switch (specMode) {\n            case MeasureSpec.UNSPECIFIED:\n            /*\n             * Parent says we can be as big as we want. Just don't be larger\n             * than max size imposed on ourselves.\n             */\n                result = desiredSize;\n                break;\n\n            case MeasureSpec.AT_MOST:\n            /*\n             * Parent says we can be as big as we want, up to specSize. Don't be\n             * larger than specSize, and don't be larger than the max size\n             * imposed on ourselves.\n             */\n                result = Math.min(desiredSize, specSize);\n                break;\n\n            case MeasureSpec.EXACTLY:\n                // No choice. Do what we are told.\n                result = specSize;\n                break;\n        }\n        return result;\n    }\n\n    public void setVideoPath(String path) {\n        Log.d(TAG, \"Setting video path to: \" + path);\n        setVideoURI(Uri.parse(path));\n    }\n\n    public void setVideoURI(Uri _videoURI) {\n        mUri = _videoURI;\n        mSeekWhenPrepared = 0;\n        requestLayout();\n        invalidate();\n        openVideo();\n    }\n\n    public Uri getUri() {\n        return mUri;\n    }\n\n    public void setSurfaceTexture(SurfaceTexture _surfaceTexture) {\n        mSurfaceTexture = _surfaceTexture;\n    }\n\n    public void openVideo() {\n        if ((mUri == null) || (mSurfaceTexture == null)) {\n            Log.d(TAG, \"Cannot open video, uri or surface texture is null.\");\n            return;\n        }\n        // Tell the music playback service to pause\n        // TODO: these constants need to be published somewhere in the\n        // framework.\n        Intent i = new Intent(\"com.android.music.musicservicecommand\");\n        i.putExtra(\"command\", \"pause\");\n        mContext.sendBroadcast(i);\n        release(false);\n        try {\n            mSurface = new Surface(mSurfaceTexture);\n            mMediaPlayer = new MediaPlayer();\n            if (mAudioSession != 0) {\n                mMediaPlayer.setAudioSessionId(mAudioSession);\n            } else {\n                mAudioSession = mMediaPlayer.getAudioSessionId();\n            }\n\n            mMediaPlayer.setOnBufferingUpdateListener(mBufferingUpdateListener);\n            mMediaPlayer.setOnCompletionListener(mCompleteListener);\n            mMediaPlayer.setOnPreparedListener(mPreparedListener);\n            mMediaPlayer.setOnErrorListener(mErrorListener);\n            mMediaPlayer.setOnInfoListener(mOnInfoListener);\n            mMediaPlayer.setOnVideoSizeChangedListener(mVideoSizeChangedListener);\n\n            mMediaPlayer.setSurface(mSurface);\n            mCurrentBufferPercentage = 0;\n            mMediaPlayer.setDataSource(mContext, mUri);\n\n            mMediaPlayer.setAudioStreamType(AudioManager.STREAM_MUSIC);\n            mMediaPlayer.setScreenOnWhilePlaying(true);\n\n            mMediaPlayer.prepareAsync();\n            mCurrentState = STATE_PREPARING;\n        } catch (IllegalStateException e) {\n            mCurrentState = STATE_ERROR;\n            mTargetState = STATE_ERROR;\n            String msg = (e.getMessage()==null)?\"\":e.getMessage();\n            Log.i(\"\",msg);  // TODO auto-generated catch block\n        } catch (IOException e) {\n            mCurrentState = STATE_ERROR;\n            mTargetState = STATE_ERROR;\n            String msg = (e.getMessage()==null)?\"\":e.getMessage();\n            Log.i(\"\",msg);  // TODO auto-generated catch block\n        }\n    }\n\n    public void stopPlayback() {\n        if (mMediaPlayer != null) {\n            mMediaPlayer.stop();\n            mMediaPlayer.release();\n            mMediaPlayer = null;\n            if (null != mMediaControllListener) {\n                mMediaControllListener.onStop();\n            }\n        }\n    }\n\n    public void setMediaController(MediaController controller) {\n        if (mMediaController != null) {\n            mMediaController.hide();\n        }\n        mMediaController = controller;\n        attachMediaController();\n    }\n\n    private void attachMediaController() {\n        if (mMediaPlayer != null \u0026\u0026 mMediaController != null) {\n            mMediaController.setMediaPlayer(this);\n            View anchorView = this.getParent() instanceof View ? (View) this.getParent() : this;\n            mMediaController.setAnchorView(anchorView);\n            mMediaController.setEnabled(isInPlaybackState());\n        }\n    }\n\n    private void release(boolean cleartargetstate) {\n        Log.d(TAG, \"Releasing media player.\");\n        if (mMediaPlayer != null) {\n            mMediaPlayer.reset();\n            mMediaPlayer.release();\n            mMediaPlayer = null;\n            mCurrentState = STATE_IDLE;\n            if (cleartargetstate) {\n                mTargetState = STATE_IDLE;\n            }\n        } else {\n            Log.d(TAG, \"Media player was null, did not release.\");\n        }\n    }\n\n    @Override\n    protected void onMeasure(final int widthMeasureSpec, final int heightMeasureSpec) {\n        // Will resize the view if the video dimensions have been found.\n        // video dimensions are found after onPrepared has been called by\n        // MediaPlayer\n        int width = getDefaultSize(mVideoWidth, widthMeasureSpec);\n        int height = getDefaultSize(mVideoHeight, heightMeasureSpec);\n        if ((mVideoWidth \u003e 0) \u0026\u0026 (mVideoHeight \u003e 0)) {\n            if ((mVideoWidth * height) \u003e (width * mVideoHeight)) {\n                Log.d(TAG, \"Video too tall, change size.\");\n                height = (width * mVideoHeight) / mVideoWidth;\n            } else if ((mVideoWidth * height) \u003c (width * mVideoHeight)) {\n                Log.d(TAG, \"Video too wide, change size.\");\n                width = (height * mVideoWidth) / mVideoHeight;\n            } else {\n                Log.d(TAG, \"Aspect ratio is correct.\");\n            }\n        }\n        setMeasuredDimension(width, height);\n    }\n\n    @Override\n    public boolean onTouchEvent(MotionEvent ev) {\n        if (isInPlaybackState() \u0026\u0026 mMediaController != null) {\n            toggleMediaControlsVisiblity();\n        }\n        return false;\n    }\n\n    @Override\n    public boolean onTrackballEvent(MotionEvent ev) {\n        if (isInPlaybackState() \u0026\u0026 mMediaController != null) {\n            toggleMediaControlsVisiblity();\n        }\n        return false;\n    }\n\n    @Override\n    public boolean onKeyDown(int keyCode, KeyEvent event) {\n        boolean isKeyCodeSupported = keyCode != KeyEvent.KEYCODE_BACK \u0026\u0026 keyCode != KeyEvent.KEYCODE_VOLUME_UP \u0026\u0026 keyCode != KeyEvent.KEYCODE_VOLUME_DOWN\n                \u0026\u0026 keyCode != KeyEvent.KEYCODE_VOLUME_MUTE \u0026\u0026 keyCode != KeyEvent.KEYCODE_MENU \u0026\u0026 keyCode != KeyEvent.KEYCODE_CALL\n                \u0026\u0026 keyCode != KeyEvent.KEYCODE_ENDCALL;\n        if (isInPlaybackState() \u0026\u0026 isKeyCodeSupported \u0026\u0026 mMediaController != null) {\n            if (keyCode == KeyEvent.KEYCODE_HEADSETHOOK || keyCode == KeyEvent.KEYCODE_MEDIA_PLAY_PAUSE) {\n                if (mMediaPlayer.isPlaying()) {\n                    pause();\n                    mMediaController.show();\n                } else {\n                    start();\n                    mMediaController.hide();\n                }\n                return true;\n            } else if (keyCode == KeyEvent.KEYCODE_MEDIA_PLAY) {\n                if (!mMediaPlayer.isPlaying()) {\n                    start();\n                    mMediaController.hide();\n                }\n                return true;\n            } else if (keyCode == KeyEvent.KEYCODE_MEDIA_STOP || keyCode == KeyEvent.KEYCODE_MEDIA_PAUSE) {\n                if (mMediaPlayer.isPlaying()) {\n                    pause();\n                    mMediaController.show();\n                }\n                return true;\n            } else {\n                toggleMediaControlsVisiblity();\n            }\n        }\n\n        return super.onKeyDown(keyCode, event);\n    }\n\n    private void toggleMediaControlsVisiblity() {\n        if (mMediaController.isShowing()) {\n            mMediaController.hide();\n        } else {\n            mMediaController.show();\n        }\n    }\n\n    public void start() {\n        // This can potentially be called at several points, it will go through\n        // when all conditions are ready\n        // 1. When setting the video URI\n        // 2. When the surface becomes available\n        // 3. From the activity\n        if (isInPlaybackState()) {\n            mMediaPlayer.start();\n            mCurrentState = STATE_PLAYING;\n            if (null != mMediaControllListener) {\n                mMediaControllListener.onStart();\n            }\n        } else {\n            Log.d(TAG, \"Could not start. Current state \" + mCurrentState);\n        }\n        mTargetState = STATE_PLAYING;\n    }\n\n    public void pause() {\n        if (isInPlaybackState()) {\n            if (mMediaPlayer.isPlaying()) {\n                mMediaPlayer.pause();\n                mCurrentState = STATE_PAUSED;\n                if (null != mMediaControllListener) {\n                    mMediaControllListener.onPause();\n                }\n            }\n        }\n        mTargetState = STATE_PAUSED;\n    }\n\n    public void suspend() {\n        release(false);\n    }\n\n    public void resume() {\n        openVideo();\n    }\n\n    @Override\n    public int getDuration() {\n        if (isInPlaybackState()) {\n            return mMediaPlayer.getDuration();\n        }\n\n        return -1;\n    }\n\n    @Override\n    public int getCurrentPosition() {\n        if (isInPlaybackState()) {\n            return mMediaPlayer.getCurrentPosition();\n        }\n        return 0;\n    }\n\n    @Override\n    public void seekTo(int msec) {\n        if (isInPlaybackState()) {\n            mMediaPlayer.seekTo(msec);\n            mSeekWhenPrepared = 0;\n        } else {\n            mSeekWhenPrepared = msec;\n        }\n    }\n\n    @Override\n    public boolean isPlaying() {\n        return isInPlaybackState() \u0026\u0026 mMediaPlayer.isPlaying();\n    }\n\n    @Override\n    public int getBufferPercentage() {\n        if (mMediaPlayer != null) {\n            return mCurrentBufferPercentage;\n        }\n        return 0;\n    }\n\n    private boolean isInPlaybackState() {\n        return ((mMediaPlayer != null) \u0026\u0026 (mCurrentState != STATE_ERROR) \u0026\u0026 (mCurrentState != STATE_IDLE) \u0026\u0026 (mCurrentState != STATE_PREPARING));\n    }\n\n    @Override\n    public boolean canPause() {\n        return false;\n    }\n\n    @Override\n    public boolean canSeekBackward() {\n        return false;\n    }\n\n    @Override\n    public boolean canSeekForward() {\n        return false;\n    }\n\n    @Override\n    public int getAudioSessionId() {\n        if (mAudioSession == 0) {\n            MediaPlayer foo = new MediaPlayer();\n            mAudioSession = foo.getAudioSessionId();\n            foo.release();\n        }\n        return mAudioSession;\n    }\n\n    // Listeners\n    private MediaPlayer.OnBufferingUpdateListener mBufferingUpdateListener = new MediaPlayer.OnBufferingUpdateListener() {\n        @Override\n        public void onBufferingUpdate(final MediaPlayer mp, final int percent) {\n            mCurrentBufferPercentage = percent;\n        }\n    };\n\n    private MediaPlayer.OnCompletionListener mCompleteListener = new MediaPlayer.OnCompletionListener() {\n        @Override\n        public void onCompletion(final MediaPlayer mp) {\n            mCurrentState = STATE_PLAYBACK_COMPLETED;\n            mTargetState = STATE_PLAYBACK_COMPLETED;\n            mSurface.release();\n\n            if (mMediaController != null) {\n                mMediaController.hide();\n            }\n\n            if (mOnCompletionListener != null) {\n                mOnCompletionListener.onCompletion(mp);\n            }\n\n            if (mMediaControllListener != null) {\n                mMediaControllListener.onComplete();\n            }\n        }\n    };\n\n    private MediaPlayer.OnPreparedListener mPreparedListener = new MediaPlayer.OnPreparedListener() {\n        @Override\n        public void onPrepared(final MediaPlayer mp) {\n            mCurrentState = STATE_PREPARED;\n\n            mMediaController = new MediaController(getContext());\n\n            if (mOnPreparedListener != null) {\n                mOnPreparedListener.onPrepared(mMediaPlayer);\n            }\n            if (mMediaController != null) {\n                mMediaController.setEnabled(true);\n                //mMediaController.setAnchorView(getRootView());\n            }\n\n            mVideoWidth = mp.getVideoWidth();\n            mVideoHeight = mp.getVideoHeight();\n\n            int seekToPosition = mSeekWhenPrepared; // mSeekWhenPrepared may be\n            // changed after seekTo()\n            // call\n            if (seekToPosition != 0) {\n                seekTo(seekToPosition);\n            }\n\n            requestLayout();\n            invalidate();\n            if ((mVideoWidth != 0) \u0026\u0026 (mVideoHeight != 0)) {\n                if (mTargetState == STATE_PLAYING) {\n                    mMediaPlayer.start();\n                    if (null != mMediaControllListener) {\n                        mMediaControllListener.onStart();\n                    }\n                }\n            } else {\n                if (mTargetState == STATE_PLAYING) {\n                    mMediaPlayer.start();\n                    if (null != mMediaControllListener) {\n                        mMediaControllListener.onStart();\n                    }\n                }\n            }\n        }\n    };\n\n    private MediaPlayer.OnVideoSizeChangedListener mVideoSizeChangedListener = new MediaPlayer.OnVideoSizeChangedListener() {\n        @Override\n        public void onVideoSizeChanged(final MediaPlayer mp, final int width, final int height) {\n            mVideoWidth = mp.getVideoWidth();\n            mVideoHeight = mp.getVideoHeight();\n            if (mVideoWidth != 0 \u0026\u0026 mVideoHeight != 0) {\n                requestLayout();\n            }\n        }\n    };\n\n    private MediaPlayer.OnErrorListener mErrorListener = new MediaPlayer.OnErrorListener() {\n        @Override\n        public boolean onError(final MediaPlayer mp, final int what, final int extra) {\n            Log.d(TAG, \"Error: \" + what + \",\" + extra);\n            mCurrentState = STATE_ERROR;\n            mTargetState = STATE_ERROR;\n\n            if (mMediaController != null) {\n                mMediaController.hide();\n            }\n\n            /* If an error handler has been supplied, use it and finish. */\n            if (mOnErrorListener != null) {\n                if (mOnErrorListener.onError(mMediaPlayer, what, extra)) {\n                    return true;\n                }\n            }\n\n            /*\n             * Otherwise, pop up an error dialog so the user knows that\n             * something bad has happened. Only try and pop up the dialog if\n             * we're attached to a window. When we're going away and no longer\n             * have a window, don't bother showing the user an error.\n             */\n            if (getWindowToken() != null) {\n\n//                new AlertDialog.Builder(mContext).setMessage(\"Error: \" + what + \",\" + extra).setPositiveButton(\"OK\", new DialogInterface.OnClickListener() {\n//                    public void onClick(DialogInterface dialog, int whichButton) {\n//                        /*\n//                         * If we get here, there is no onError listener, so at\n//                         * least inform them that the video is over.\n//                         */\n//                        if (mOnCompletionListener != null) {\n//                            mOnCompletionListener.onCompletion(mMediaPlayer);\n//                        }\n//                    }\n//                }).setCancelable(false).show();\n            }\n            return true;\n        }\n    };\n\n    SurfaceTextureListener mSurfaceTextureListener = new SurfaceTextureListener() {\n        @Override\n        public void onSurfaceTextureAvailable(final SurfaceTexture surface, final int width, final int height) {\n            Log.d(TAG, \"onSurfaceTextureAvailable.\");\n            mSurfaceTexture = surface;\n            openVideo();\n        }\n\n        @Override\n        public void onSurfaceTextureSizeChanged(final SurfaceTexture surface, final int width, final int height) {\n            Log.d(TAG, \"onSurfaceTextureSizeChanged: \" + width + '/' + height);\n            mSurfaceWidth = width;\n            mSurfaceHeight = height;\n            boolean isValidState = (mTargetState == STATE_PLAYING);\n            boolean hasValidSize = (mVideoWidth == width \u0026\u0026 mVideoHeight == height);\n            if (mMediaPlayer != null \u0026\u0026 isValidState \u0026\u0026 hasValidSize) {\n                if (mSeekWhenPrepared != 0) {\n                    seekTo(mSeekWhenPrepared);\n                }\n                start();\n            }\n        }\n\n        @Override\n        public boolean onSurfaceTextureDestroyed(final SurfaceTexture surface) {\n\n            mSurface = null;\n            if (mMediaController != null)\n                mMediaController.hide();\n            release(true);\n            return true;\n        }\n\n        @Override\n        public void onSurfaceTextureUpdated(final SurfaceTexture surface) {\n\n        }\n    };\n\n    /**\n     * Register a callback to be invoked when the media file is loaded and ready\n     * to go.\n     *\n     * @param l The callback that will be run\n     */\n    public void setOnPreparedListener(MediaPlayer.OnPreparedListener l) {\n        mOnPreparedListener = l;\n    }\n\n    /**\n     * Register a callback to be invoked when the end of a media file has been\n     * reached during playback.\n     *\n     * @param l The callback that will be run\n     */\n    public void setOnCompletionListener(OnCompletionListener l) {\n        mOnCompletionListener = l;\n    }\n\n    /**\n     * Register a callback to be invoked when an error occurs during playback or\n     * setup. If no listener is specified, or if the listener returned false,\n     * VideoView will inform the user of any errors.\n     *\n     * @param l The callback that will be run\n     */\n    public void setOnErrorListener(OnErrorListener l) {\n        mOnErrorListener = l;\n    }\n\n    /**\n     * Register a callback to be invoked when an informational event occurs\n     * during playback or setup.\n     *\n     * @param l The callback that will be run\n     */\n    public void setOnInfoListener(OnInfoListener l) {\n        mOnInfoListener = l;\n    }\n\n    public static interface MediaControllListener {\n        public void onStart();\n\n        public void onPause();\n\n        public void onStop();\n\n        public void onComplete();\n    }\n\n    MediaControllListener mMediaControllListener;\n\n    public void setMediaControllListener(MediaControllListener mediaControllListener) {\n        mMediaControllListener = mediaControllListener;\n    }\n\n\n    @Override\n    public void setVisibility(int visibility) {\n        System.out.println(\"setVisibility: \" + visibility);\n        super.setVisibility(visibility);\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550456558050,
        "id": "0f7eca36-110b-4e1d-a541-c69251fc37d1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550456558050,
        "parent_id": "7e573de1-8381-4f9e-b9ae-4cda9fa7f72e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Help from this "
            ],
            [
              "gitub repository",
              [
                [
                  "a",
                  "https://github.com/aizhang/Android-VideoView/blob/master/src/com/ai/videoview/widget/VideoView.java"
                ]
              ]
            ],
            [
              ". Though It has some issues as it was written 3 years ago I managed to fix them on my own as written above."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Help from this "
          },
          {
            "Text": "gitub repository",
            "Link": "https://github.com/aizhang/Android-VideoView/blob/master/src/com/ai/videoview/widget/VideoView.java"
          },
          {
            "Text": ". Though It has some issues as it was written 3 years ago I managed to fix them on my own as written above."
          }
        ]
      }
    ],
    "title": "010 Optimized VideoView in ListView"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}