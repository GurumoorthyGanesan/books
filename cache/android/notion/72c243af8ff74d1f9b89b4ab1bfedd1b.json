{
  "ID": "72c243af-8ff7-4d1f-9b89-b4ab1bfedd1b",
  "Root": {
    "alive": true,
    "content": [
      "41b55bf1-68ff-4126-b3f3-7ef730ad1a9a",
      "6172b033-93a2-4220-8407-7be69609c4a0",
      "f71f9c41-03e2-4679-bae8-84d794dda3a4",
      "68697c73-758e-427a-b071-2c8efac357a2",
      "0df87621-e546-4c4e-99cb-7df285cf2ea0"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550450870944,
    "id": "72c243af-8ff7-4d1f-9b89-b4ab1bfedd1b",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550450870944,
    "parent_id": "d6acfbca-5bf9-4a01-93a6-9c974a46400e",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "020 AsyncTaskLoader with cache"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550450870941,
        "id": "41b55bf1-68ff-4126-b3f3-7ef730ad1a9a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550450870941,
        "parent_id": "72c243af-8ff7-4d1f-9b89-b4ab1bfedd1b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It’s a good practice to cache loaded result to avoid multiple loading of same data. To invalidate cache "
            ],
            [
              "onContentChanged()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " should be called. If loader has been already started, "
            ],
            [
              "forceLoad()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will be called, otherwise (if loader in stopped state) loader will be able to understand content change with "
            ],
            [
              "takeContentChanged()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " check."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It’s a good practice to cache loaded result to avoid multiple loading of same data. To invalidate cache "
          },
          {
            "Text": "onContentChanged()",
            "AttrFlags": 2
          },
          {
            "Text": " should be called. If loader has been already started, "
          },
          {
            "Text": "forceLoad()",
            "AttrFlags": 2
          },
          {
            "Text": " will be called, otherwise (if loader in stopped state) loader will be able to understand content change with "
          },
          {
            "Text": "takeContentChanged()",
            "AttrFlags": 2
          },
          {
            "Text": " check."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550450870944,
        "id": "6172b033-93a2-4220-8407-7be69609c4a0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550450870944,
        "parent_id": "72c243af-8ff7-4d1f-9b89-b4ab1bfedd1b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Remark: ",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              "onContentChanged()",
              [
                [
                  "i"
                ],
                [
                  "c"
                ]
              ]
            ],
            [
              " must be called from the process’s main thread.",
              [
                [
                  "i"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Remark: ",
            "AttrFlags": 4
          },
          {
            "Text": "onContentChanged()",
            "AttrFlags": 6
          },
          {
            "Text": " must be called from the process’s main thread.",
            "AttrFlags": 4
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550450870944,
        "id": "f71f9c41-03e2-4679-bae8-84d794dda3a4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550450870944,
        "parent_id": "72c243af-8ff7-4d1f-9b89-b4ab1bfedd1b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Javadocs says about takeContentChanged():",
              [
                [
                  "i"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Javadocs says about takeContentChanged():",
            "AttrFlags": 4
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550450870944,
        "id": "68697c73-758e-427a-b071-2c8efac357a2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550450870944,
        "parent_id": "72c243af-8ff7-4d1f-9b89-b4ab1bfedd1b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Take the current flag indicating whether the loader’s content had changed while it was stopped. If it had, true is returned and the flag is cleared."
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "Take the current flag indicating whether the loader’s content had changed while it was stopped. If it had, true is returned and the flag is cleared."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550450870944,
        "id": "0df87621-e546-4c4e-99cb-7df285cf2ea0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550450870944,
        "parent_id": "72c243af-8ff7-4d1f-9b89-b4ab1bfedd1b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public abstract class BaseLoader\u003cT\u003e extends AsyncTaskLoader\u003cT\u003e {\n\n    // Cached result saved here\n    private final AtomicReference\u003cT\u003e cache = new AtomicReference\u003c\u003e();\n\n    public BaseLoader(@NonNull final Context context) {\n        super(context);\n    }\n\n    @Override\n    public final void deliverResult(final T data) {\n        if (!isReset()) {\n            // Save loaded result\n            cache.set(data);\n            if (isStarted()) {\n                super.deliverResult(data);\n            }\n        }\n    }\n\n    @Override\n    protected final void onStartLoading() {            \n        // Register observers\n        registerObserver();\n\n        final T cached = cache.get();    \n        // Start new loading if content changed in background\n        // or if we never loaded any data\n        if (takeContentChanged() || cached == null) {\n            forceLoad();\n        } else {\n            deliverResult(cached);\n        }\n    }\n\n    @Override\n    public final void onStopLoading() {\n        cancelLoad();\n    }\n\n    @Override\n    protected final void onReset() {\n        super.onReset();\n        onStopLoading();\n        // Clear cache and remove observers\n        cache.set(null);\n        unregisterObserver();\n    }\n\n    /* virtual */\n    protected void registerObserver() {\n        // Register observers here, call onContentChanged() to invalidate cache\n    }\n\n    /* virtual */\n    protected void unregisterObserver() {\n        // Remove observers\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public abstract class BaseLoader\u003cT\u003e extends AsyncTaskLoader\u003cT\u003e {\n\n    // Cached result saved here\n    private final AtomicReference\u003cT\u003e cache = new AtomicReference\u003c\u003e();\n\n    public BaseLoader(@NonNull final Context context) {\n        super(context);\n    }\n\n    @Override\n    public final void deliverResult(final T data) {\n        if (!isReset()) {\n            // Save loaded result\n            cache.set(data);\n            if (isStarted()) {\n                super.deliverResult(data);\n            }\n        }\n    }\n\n    @Override\n    protected final void onStartLoading() {            \n        // Register observers\n        registerObserver();\n\n        final T cached = cache.get();    \n        // Start new loading if content changed in background\n        // or if we never loaded any data\n        if (takeContentChanged() || cached == null) {\n            forceLoad();\n        } else {\n            deliverResult(cached);\n        }\n    }\n\n    @Override\n    public final void onStopLoading() {\n        cancelLoad();\n    }\n\n    @Override\n    protected final void onReset() {\n        super.onReset();\n        onStopLoading();\n        // Clear cache and remove observers\n        cache.set(null);\n        unregisterObserver();\n    }\n\n    /* virtual */\n    protected void registerObserver() {\n        // Register observers here, call onContentChanged() to invalidate cache\n    }\n\n    /* virtual */\n    protected void unregisterObserver() {\n        // Remove observers\n    }\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "020 AsyncTaskLoader with cache"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}