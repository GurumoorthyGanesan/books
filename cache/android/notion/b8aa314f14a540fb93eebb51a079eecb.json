{
  "ID": "b8aa314f-14a5-40fb-93ee-bb51a079eecb",
  "Root": {
    "alive": true,
    "content": [
      "1ba83050-3e37-40a4-9962-2700a7b8e715",
      "a3c2b2fd-b003-4e47-8c8e-1a77214c6c42",
      "8e064fa4-09c9-4d06-91d4-b97276a1e99b",
      "493b1916-7077-4be9-b0f0-c26ce4217f4e"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550448440922,
    "id": "b8aa314f-14a5-40fb-93ee-bb51a079eecb",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550448440922,
    "parent_id": "6068a6db-1477-454d-9131-f7d2eef506e8",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "010 Get changes for location within a certain range using Fence API"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550448440919,
        "id": "1ba83050-3e37-40a4-9962-2700a7b8e715",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550448440919,
        "parent_id": "b8aa314f-14a5-40fb-93ee-bb51a079eecb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If you want to detect when your user enters a specific location, you can create a fence for the specific location with a radius you want and be notified when your user enters or leaves the location."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If you want to detect when your user enters a specific location, you can create a fence for the specific location with a radius you want and be notified when your user enters or leaves the location."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550448440922,
        "id": "a3c2b2fd-b003-4e47-8c8e-1a77214c6c42",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550448440922,
        "parent_id": "b8aa314f-14a5-40fb-93ee-bb51a079eecb",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// Your own action filter, like the ones used in the Manifest\nprivate static final String FENCE_RECEIVER_ACTION = BuildConfig.APPLICATION_ID +\n    \"FENCE_RECEIVER_ACTION\";\nprivate static final String FENCE_KEY = \"locationFenceKey\";\nprivate FenceReceiver mFenceReceiver;\nprivate PendingIntent mPendingIntent;\n\n// Make sure to initialize your client as described in the Remarks section\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    // etc\n\n    // The 0 is a standard Activity request code that can be changed for your needs\n    mPendingIntent = PendingIntent.getBroadcast(this, 0, \n        new Intent(FENCE_RECEIVER_ACTION), 0);\n    registerReceiver(mFenceReceiver, new IntentFilter(FENCE_RECEIVER_ACTION));\n\n    // Create the fence\n    AwarenessFence fence = LocationFence.entering(48.136334, 11.581660, 25);\n    // Register the fence to receive callbacks.\n    Awareness.FenceApi.updateFences(client, new FenceUpdateRequest.Builder()\n        .addFence(FENCE_KEY, fence, mPendingIntent)\n        .build())\n        .setResultCallback(new ResultCallback\u003cStatus\u003e() {\n            @Override\n            public void onResult(@NonNull Status status) {\n                if (status.isSuccess()) {\n                    Log.i(FENCE_KEY, \"Successfully registered.\");\n                } else {\n                    Log.e(FENCE_KEY, \"Could not be registered: \" + status);\n                }\n            }\n        });\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// Your own action filter, like the ones used in the Manifest\nprivate static final String FENCE_RECEIVER_ACTION = BuildConfig.APPLICATION_ID +\n    \"FENCE_RECEIVER_ACTION\";\nprivate static final String FENCE_KEY = \"locationFenceKey\";\nprivate FenceReceiver mFenceReceiver;\nprivate PendingIntent mPendingIntent;\n\n// Make sure to initialize your client as described in the Remarks section\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    // etc\n\n    // The 0 is a standard Activity request code that can be changed for your needs\n    mPendingIntent = PendingIntent.getBroadcast(this, 0, \n        new Intent(FENCE_RECEIVER_ACTION), 0);\n    registerReceiver(mFenceReceiver, new IntentFilter(FENCE_RECEIVER_ACTION));\n\n    // Create the fence\n    AwarenessFence fence = LocationFence.entering(48.136334, 11.581660, 25);\n    // Register the fence to receive callbacks.\n    Awareness.FenceApi.updateFences(client, new FenceUpdateRequest.Builder()\n        .addFence(FENCE_KEY, fence, mPendingIntent)\n        .build())\n        .setResultCallback(new ResultCallback\u003cStatus\u003e() {\n            @Override\n            public void onResult(@NonNull Status status) {\n                if (status.isSuccess()) {\n                    Log.i(FENCE_KEY, \"Successfully registered.\");\n                } else {\n                    Log.e(FENCE_KEY, \"Could not be registered: \" + status);\n                }\n            }\n        });\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550448440922,
        "id": "8e064fa4-09c9-4d06-91d4-b97276a1e99b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550448440922,
        "parent_id": "b8aa314f-14a5-40fb-93ee-bb51a079eecb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Now create a BroadcastReciver to recive updates in user state:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Now create a BroadcastReciver to recive updates in user state:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550448440922,
        "id": "493b1916-7077-4be9-b0f0-c26ce4217f4e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550448440922,
        "parent_id": "b8aa314f-14a5-40fb-93ee-bb51a079eecb",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class FenceReceiver extends BroadcastReceiver {\n\n    private static final String TAG = \"FenceReceiver\";\n\n    @Override\n    public void onReceive(Context context, Intent intent) {\n        // Get the fence state\n        FenceState fenceState = FenceState.extract(intent);\n\n        switch (fenceState.getCurrentState()) {\n            case FenceState.TRUE:\n                Log.i(TAG, \"User is in location\");\n                break;\n            case FenceState.FALSE:\n                Log.i(TAG, \"User is not in location\");\n                break;\n            case FenceState.UNKNOWN:\n                Log.i(TAG, \"User is doing something unknown\");\n                break;\n        }\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class FenceReceiver extends BroadcastReceiver {\n\n    private static final String TAG = \"FenceReceiver\";\n\n    @Override\n    public void onReceive(Context context, Intent intent) {\n        // Get the fence state\n        FenceState fenceState = FenceState.extract(intent);\n\n        switch (fenceState.getCurrentState()) {\n            case FenceState.TRUE:\n                Log.i(TAG, \"User is in location\");\n                break;\n            case FenceState.FALSE:\n                Log.i(TAG, \"User is not in location\");\n                break;\n            case FenceState.UNKNOWN:\n                Log.i(TAG, \"User is doing something unknown\");\n                break;\n        }\n    }\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "010 Get changes for location within a certain range using Fence API"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}