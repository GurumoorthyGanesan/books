{
  "ID": "f18008da-cf37-4d14-a3af-3514eb867103",
  "Root": {
    "alive": true,
    "content": [
      "ab09f191-c424-4e0d-8dde-dfe30a78b772",
      "cfb4af13-c041-4996-97b2-006b4fbf975b"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550448349091,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "f18008da-cf37-4d14-a3af-3514eb867103",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550448349091,
    "parent_id": "862b5ddf-f996-490c-9d71-0fcfa7309bad",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Type of resource directories under the res folder"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550448349085,
        "id": "ab09f191-c424-4e0d-8dde-dfe30a78b772",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550448349085,
        "parent_id": "f18008da-cf37-4d14-a3af-3514eb867103",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When localizing different types of resources are required, each of which has its own home in the android project structure. Following are the different directories that we can place under the "
            ],
            [
              "\\res",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " directory. The resource types placed in each of these directories are explained in the table below:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When localizing different types of resources are required, each of which has its own home in the android project structure. Following are the different directories that we can place under the "
          },
          {
            "Text": "\\res",
            "AttrFlags": 2
          },
          {
            "Text": " directory. The resource types placed in each of these directories are explained in the table below:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550448349090,
        "id": "cfb4af13-c041-4996-97b2-006b4fbf975b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550448349090,
        "parent_id": "f18008da-cf37-4d14-a3af-3514eb867103",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Directory | Resource Type|\n———–– | ———\nanimator/ | XML files that define property animations.|\nanim/ | XML files that define tween animations. (Property animations can also be saved in this directory, but the animator/ directory is preferred for property animations to distinguish between the two types.)|\ncolor/ | XML files that define a state list of colors. See Color State List Resource|\ndrawable/ | “Bitmap files (.png, .9.png, .jpg, .gif) or XML files that are compiled into the following drawable resource subtypes: : "
            ],
            [
              "Bitmap files - Nine-Patches (re-sizable bitmaps) - State lists - Shapes - Animation drawables - Other drawables - \"",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "|\nmipmap/ | Drawable files for different launcher icon densities. For more information on managing launcher icons with mipmap/ folders, see Managing Projects Overview.|\nlayout/ | XML files that define a user interface layout. See Layout Resource.|\nmenu/ | XML files that define application menus, such as an Options Menu, Context Menu, or Sub Menu. See Menu Resource.|\nraw/ | Arbitrary files to save in their raw form. To open these resources with a raw InputStream, call Resources.openRawResource() with the resource ID, which is R.raw.filename.|\n| However, if you need access to original file names and file hierarchy, you might consider saving some resources in the assets/ directory (instead ofres/raw/). Files in assets/ are not given a resource ID, so you can read them only using AssetManager.|\nvalues/ | XML files that contain simple values, such as strings, integers, and colors, as well as styles and themes |\nxml/ | Arbitrary XML files that can be read at runtime by calling Resources.getXML(). Various XML configuration files must be saved here, such as a searchable configuration.|"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Directory | Resource Type|\n———–– | ———\nanimator/ | XML files that define property animations.|\nanim/ | XML files that define tween animations. (Property animations can also be saved in this directory, but the animator/ directory is preferred for property animations to distinguish between the two types.)|\ncolor/ | XML files that define a state list of colors. See Color State List Resource|\ndrawable/ | “Bitmap files (.png, .9.png, .jpg, .gif) or XML files that are compiled into the following drawable resource subtypes: : "
          },
          {
            "Text": "Bitmap files - Nine-Patches (re-sizable bitmaps) - State lists - Shapes - Animation drawables - Other drawables - \"",
            "AttrFlags": 2
          },
          {
            "Text": "|\nmipmap/ | Drawable files for different launcher icon densities. For more information on managing launcher icons with mipmap/ folders, see Managing Projects Overview.|\nlayout/ | XML files that define a user interface layout. See Layout Resource.|\nmenu/ | XML files that define application menus, such as an Options Menu, Context Menu, or Sub Menu. See Menu Resource.|\nraw/ | Arbitrary files to save in their raw form. To open these resources with a raw InputStream, call Resources.openRawResource() with the resource ID, which is R.raw.filename.|\n| However, if you need access to original file names and file hierarchy, you might consider saving some resources in the assets/ directory (instead ofres/raw/). Files in assets/ are not given a resource ID, so you can read them only using AssetManager.|\nvalues/ | XML files that contain simple values, such as strings, integers, and colors, as well as styles and themes |\nxml/ | Arbitrary XML files that can be read at runtime by calling Resources.getXML(). Various XML configuration files must be saved here, such as a searchable configuration.|"
          }
        ]
      }
    ],
    "title": "Type of resource directories under the res folder",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}