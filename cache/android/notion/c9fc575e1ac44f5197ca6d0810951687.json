{
  "ID": "c9fc575e-1ac4-4f51-97ca-6d0810951687",
  "Root": {
    "alive": true,
    "content": [
      "6eb70cfd-bfb0-46c5-867a-28a73ae2fd41",
      "5a20aaa1-d512-4876-89af-e939ba93b0ab",
      "c4d718b1-e391-4e21-a311-5d27cb4ab22c",
      "e2f5b080-c1d0-4db9-90d6-11a174d52752",
      "01907cb3-ca00-4481-b2c5-856e38775380",
      "a3954b89-5dd7-4fa4-b55b-31630f0cbd9f",
      "0c0d32af-b03a-4df1-980c-10afa577746e",
      "5e74f40f-e0d6-41a0-8ea7-3de37431061a",
      "47141807-444c-4a6c-b0da-d603556ca7cc",
      "84d0c90e-eda9-4828-b661-4725ed71704b",
      "3caf447b-8a70-4439-b5a5-1c135da903d3",
      "f5c5fc85-023c-4524-99fa-22144045fcea",
      "8b151a70-d011-45cf-b255-c7fe893a0fd6",
      "d8986cd3-6fbd-459e-8362-1b8e16c370df"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550448264931,
    "id": "c9fc575e-1ac4-4f51-97ca-6d0810951687",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550448264931,
    "parent_id": "a50a635e-1226-4210-baec-32b24d8676e4",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "020 Moving Business Logic Out of Android Componenets"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550448264928,
        "id": "6eb70cfd-bfb0-46c5-867a-28a73ae2fd41",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550448264928,
        "parent_id": "c9fc575e-1ac4-4f51-97ca-6d0810951687",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A lot of the value from local JVM unit tests comes from the way you design your application. You have to design it in such a way where you can decouple your business logic from your Android Components. Here is an example of such a way using the "
            ],
            [
              "Model-View-Presenter pattern",
              [
                [
                  "a",
                  "https://codelabs.developers.google.com/codelabs/android-testing/#4"
                ]
              ]
            ],
            [
              ". Lets practice this out by implementing a basic sign up screen that only takes a username and password. Our Android app is responsible for validating that the username the user supplies is not blank and that the password is at least eight characters long and contains at least one digit. If the username/password is valid we perform our sign up api call, otherwise we display an error message."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A lot of the value from local JVM unit tests comes from the way you design your application. You have to design it in such a way where you can decouple your business logic from your Android Components. Here is an example of such a way using the "
          },
          {
            "Text": "Model-View-Presenter pattern",
            "Link": "https://codelabs.developers.google.com/codelabs/android-testing/#4"
          },
          {
            "Text": ". Lets practice this out by implementing a basic sign up screen that only takes a username and password. Our Android app is responsible for validating that the username the user supplies is not blank and that the password is at least eight characters long and contains at least one digit. If the username/password is valid we perform our sign up api call, otherwise we display an error message."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550448264929,
        "id": "5a20aaa1-d512-4876-89af-e939ba93b0ab",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550448264929,
        "parent_id": "c9fc575e-1ac4-4f51-97ca-6d0810951687",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Example where business logic is highly coupled with Android Component.",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Example where business logic is highly coupled with Android Component.",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550448264929,
        "id": "c4d718b1-e391-4e21-a311-5d27cb4ab22c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550448264929,
        "parent_id": "c9fc575e-1ac4-4f51-97ca-6d0810951687",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class LoginActivity extends Activity{\n    ...\n    private void onSubmitButtonClicked(){\n        String username = findViewById(R.id.username).getText().toString();\n        String password = findViewById(R.id.password).getText().toString();\n        boolean isUsernameValid = username != null \u0026\u0026 username.trim().length() != 0;\n        boolean isPasswordValid = password != null \u0026\u0026 password.trim().length() \u003e= 8 \u0026\u0026 password.matches(\".*\\\\d+.*\");\n        if(isUsernameValid \u0026\u0026 isPasswordValid){\n            performSignUpApiCall(username, password);\n        } else {\n            displayInvalidCredentialsErrorMessage();\n        }\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class LoginActivity extends Activity{\n    ...\n    private void onSubmitButtonClicked(){\n        String username = findViewById(R.id.username).getText().toString();\n        String password = findViewById(R.id.password).getText().toString();\n        boolean isUsernameValid = username != null \u0026\u0026 username.trim().length() != 0;\n        boolean isPasswordValid = password != null \u0026\u0026 password.trim().length() \u003e= 8 \u0026\u0026 password.matches(\".*\\\\d+.*\");\n        if(isUsernameValid \u0026\u0026 isPasswordValid){\n            performSignUpApiCall(username, password);\n        } else {\n            displayInvalidCredentialsErrorMessage();\n        }\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550448264929,
        "id": "e2f5b080-c1d0-4db9-90d6-11a174d52752",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550448264929,
        "parent_id": "c9fc575e-1ac4-4f51-97ca-6d0810951687",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Example where business logic is decoupled from Android Component.",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Example where business logic is decoupled from Android Component.",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550448264929,
        "id": "01907cb3-ca00-4481-b2c5-856e38775380",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550448264929,
        "parent_id": "c9fc575e-1ac4-4f51-97ca-6d0810951687",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Here we define in a single class, LoginContract, that will house the various interactions between our various classes."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Here we define in a single class, LoginContract, that will house the various interactions between our various classes."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550448264930,
        "id": "a3954b89-5dd7-4fa4-b55b-31630f0cbd9f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550448264930,
        "parent_id": "c9fc575e-1ac4-4f51-97ca-6d0810951687",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public interface LoginContract {\n    public interface View {\n        performSignUpApiCall(String username, String password);\n        displayInvalidCredentialsErrorMessage();\n    }\n    public interface Presenter {\n        void validateUserCredentials(String username, String password);\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public interface LoginContract {\n    public interface View {\n        performSignUpApiCall(String username, String password);\n        displayInvalidCredentialsErrorMessage();\n    }\n    public interface Presenter {\n        void validateUserCredentials(String username, String password);\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550448264930,
        "id": "0c0d32af-b03a-4df1-980c-10afa577746e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550448264930,
        "parent_id": "c9fc575e-1ac4-4f51-97ca-6d0810951687",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Our LoginActivity is for the most part the same except that we have removed the responsibility of having to know how to validate a user’s sign up form (our business logic). The LoginActivity will now rely on our new LoginPresenter to perform validation."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Our LoginActivity is for the most part the same except that we have removed the responsibility of having to know how to validate a user’s sign up form (our business logic). The LoginActivity will now rely on our new LoginPresenter to perform validation."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550448264930,
        "id": "5e74f40f-e0d6-41a0-8ea7-3de37431061a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550448264930,
        "parent_id": "c9fc575e-1ac4-4f51-97ca-6d0810951687",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class LoginActivity extends Activity implements LoginContract.View{\n    private LoginContract.Presenter presenter;\n\n    protected void onCreate(Bundle savedInstanceState) {\n            super.onCreate(savedInstanceState);\n            presenter = new LoginPresenter(this);\n            ....\n        }\n        ...\n\n        private void onSubmitButtonClicked(){\n            String username = findViewById(R.id.username).getText().toString();\n            String password = findViewById(R.id.password).getText().toString();\n            presenter.validateUserCredentials(username, password);\n    }\n    ...\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class LoginActivity extends Activity implements LoginContract.View{\n    private LoginContract.Presenter presenter;\n\n    protected void onCreate(Bundle savedInstanceState) {\n            super.onCreate(savedInstanceState);\n            presenter = new LoginPresenter(this);\n            ....\n        }\n        ...\n\n        private void onSubmitButtonClicked(){\n            String username = findViewById(R.id.username).getText().toString();\n            String password = findViewById(R.id.password).getText().toString();\n            presenter.validateUserCredentials(username, password);\n    }\n    ...\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550448264930,
        "id": "47141807-444c-4a6c-b0da-d603556ca7cc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550448264930,
        "parent_id": "c9fc575e-1ac4-4f51-97ca-6d0810951687",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Now your business logic will reside in your new LoginPresenter class."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Now your business logic will reside in your new LoginPresenter class."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550448264930,
        "id": "84d0c90e-eda9-4828-b661-4725ed71704b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550448264930,
        "parent_id": "c9fc575e-1ac4-4f51-97ca-6d0810951687",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class LoginPresenter implements LoginContract.Presenter{\n    private LoginContract.View view;\n\n    public LoginPresenter(LoginContract.View view){\n        this.view = view;\n    }\n\n    public void validateUserCredentials(String username, String password){\n        boolean isUsernameValid = username != null \u0026\u0026 username.trim().length() != 0;\n        boolean isPasswordValid = password != null \u0026\u0026 password.trim().length() \u003e= 8 \u0026\u0026 password.matches(\".*\\\\d+.*\");\n        if(isUsernameValid \u0026\u0026 isPasswordValid){\n            view.performSignUpApiCall(username, password);\n        } else {\n            view.displayInvalidCredentialsErrorMessage();\n        }\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class LoginPresenter implements LoginContract.Presenter{\n    private LoginContract.View view;\n\n    public LoginPresenter(LoginContract.View view){\n        this.view = view;\n    }\n\n    public void validateUserCredentials(String username, String password){\n        boolean isUsernameValid = username != null \u0026\u0026 username.trim().length() != 0;\n        boolean isPasswordValid = password != null \u0026\u0026 password.trim().length() \u003e= 8 \u0026\u0026 password.matches(\".*\\\\d+.*\");\n        if(isUsernameValid \u0026\u0026 isPasswordValid){\n            view.performSignUpApiCall(username, password);\n        } else {\n            view.displayInvalidCredentialsErrorMessage();\n        }\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550448264930,
        "id": "3caf447b-8a70-4439-b5a5-1c135da903d3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550448264930,
        "parent_id": "c9fc575e-1ac4-4f51-97ca-6d0810951687",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "And now we can create local JVM unit tests against your new LoginPresenter class."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "And now we can create local JVM unit tests against your new LoginPresenter class."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550448264930,
        "id": "f5c5fc85-023c-4524-99fa-22144045fcea",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550448264930,
        "parent_id": "c9fc575e-1ac4-4f51-97ca-6d0810951687",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class LoginPresenterTest {\n\n    @Mock\n    LoginContract.View view;\n\n    private LoginPresenter presenter;\n\n    @Before\n    public void setUp() throws Exception {\n        MockitoAnnotations.initMocks(this);\n        presenter = new LoginPresenter(view);\n    }\n\n    @Test\n    public void test_validateUserCredentials_userDidNotEnterUsername_displayErrorMessage() throws Exception {\n        String username = \"\";\n        String password = \"kingslayer1\";\n        presenter.validateUserCredentials(username, password);\n        Mockito.verify(view). displayInvalidCredentialsErrorMessage();\n    }\n\n    @Test\n    public void test_validateUserCredentials_userEnteredFourLettersAndOneDigitPassword_displayErrorMessage() throws Exception {\n        String username = \"Jaime Lanninster\";\n        String password = \"king1\";\n        presenter.validateUserCredentials(username, password);\n        Mockito.verify(view). displayInvalidCredentialsErrorMessage();\n    }\n\n    @Test\n    public void test_validateUserCredentials_userEnteredNineLettersButNoDigitsPassword_displayErrorMessage() throws Exception {\n        String username = \"Jaime Lanninster\";\n        String password = \"kingslayer\";\n        presenter.validateUserCredentials(username, password);\n        Mockito.verify(view). displayInvalidCredentialsErrorMessage();\n    }\n\n    @Test\n    public void test_validateUserCredentials_userEnteredNineLettersButOneDigitPassword_performApiCallToSignUpUser() throws Exception {\n        String username = \"Jaime Lanninster\";\n        String password = \"kingslayer1\";\n        presenter.validateUserCredentials(username, password);\n        Mockito.verify(view).performSignUpApiCall(username, password);\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class LoginPresenterTest {\n\n    @Mock\n    LoginContract.View view;\n\n    private LoginPresenter presenter;\n\n    @Before\n    public void setUp() throws Exception {\n        MockitoAnnotations.initMocks(this);\n        presenter = new LoginPresenter(view);\n    }\n\n    @Test\n    public void test_validateUserCredentials_userDidNotEnterUsername_displayErrorMessage() throws Exception {\n        String username = \"\";\n        String password = \"kingslayer1\";\n        presenter.validateUserCredentials(username, password);\n        Mockito.verify(view). displayInvalidCredentialsErrorMessage();\n    }\n\n    @Test\n    public void test_validateUserCredentials_userEnteredFourLettersAndOneDigitPassword_displayErrorMessage() throws Exception {\n        String username = \"Jaime Lanninster\";\n        String password = \"king1\";\n        presenter.validateUserCredentials(username, password);\n        Mockito.verify(view). displayInvalidCredentialsErrorMessage();\n    }\n\n    @Test\n    public void test_validateUserCredentials_userEnteredNineLettersButNoDigitsPassword_displayErrorMessage() throws Exception {\n        String username = \"Jaime Lanninster\";\n        String password = \"kingslayer\";\n        presenter.validateUserCredentials(username, password);\n        Mockito.verify(view). displayInvalidCredentialsErrorMessage();\n    }\n\n    @Test\n    public void test_validateUserCredentials_userEnteredNineLettersButOneDigitPassword_performApiCallToSignUpUser() throws Exception {\n        String username = \"Jaime Lanninster\";\n        String password = \"kingslayer1\";\n        presenter.validateUserCredentials(username, password);\n        Mockito.verify(view).performSignUpApiCall(username, password);\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550448264931,
        "id": "8b151a70-d011-45cf-b255-c7fe893a0fd6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550448264931,
        "parent_id": "c9fc575e-1ac4-4f51-97ca-6d0810951687",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As you can see, when we extracted our business logic out of the LoginActivity and placed it in the LoginPresenter "
            ],
            [
              "POJO",
              [
                [
                  "a",
                  "https://en.wikipedia.org/wiki/Plain_Old_Java_Object"
                ]
              ]
            ],
            [
              ". We can now create local JVM unit tests against our business logic."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "As you can see, when we extracted our business logic out of the LoginActivity and placed it in the LoginPresenter "
          },
          {
            "Text": "POJO",
            "Link": "https://en.wikipedia.org/wiki/Plain_Old_Java_Object"
          },
          {
            "Text": ". We can now create local JVM unit tests against our business logic."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550448264931,
        "id": "d8986cd3-6fbd-459e-8362-1b8e16c370df",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550448264931,
        "parent_id": "c9fc575e-1ac4-4f51-97ca-6d0810951687",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It should be noted that there are various other implications from our change in architecture such as we are close to adhering to each class having a single responsibility, additional classes, etc. These are just side effects of the way I choose to go about performing this decoupling via the MVP style. MVP is just one way to go about this but there are other alternatives that you may want to look at such as "
            ],
            [
              "MVVM",
              [
                [
                  "a",
                  "https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93viewmodel"
                ]
              ]
            ],
            [
              ". You just have to pick the best system that works for you."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It should be noted that there are various other implications from our change in architecture such as we are close to adhering to each class having a single responsibility, additional classes, etc. These are just side effects of the way I choose to go about performing this decoupling via the MVP style. MVP is just one way to go about this but there are other alternatives that you may want to look at such as "
          },
          {
            "Text": "MVVM",
            "Link": "https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93viewmodel"
          },
          {
            "Text": ". You just have to pick the best system that works for you."
          }
        ]
      }
    ],
    "title": "020 Moving Business Logic Out of Android Componenets"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}