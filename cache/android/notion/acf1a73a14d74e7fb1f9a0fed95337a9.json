{
  "ID": "acf1a73a-14d7-4e7f-b1f9-a0fed95337a9",
  "Root": {
    "alive": true,
    "content": [
      "113edc7b-336e-494a-889b-4ec1375bc311",
      "b6e76ad1-c548-42e7-83bb-c2cf787e6d4d",
      "bf36101b-ac0b-439d-aee1-b13632e77f18",
      "93a1ef8f-bcce-488a-b4d8-f1ec596431ab",
      "fc72a403-38b8-4134-b26b-0d19a398841a",
      "bf9589df-1dd5-40f7-bb62-e000f7cdc5b2",
      "58079764-fa06-4bcf-b7be-808bb6615e2e",
      "28f530c5-ac50-4c26-8634-5a6b929eea86",
      "c1fb5fdd-d2ad-4ab4-b88f-8eaf7dc46d66",
      "26d7dc50-4725-430d-b7a7-593815a52513",
      "9d570505-c4bf-4ebe-98b6-cfc0c44cdb05",
      "40e86983-e874-47cc-a583-90ef98837fad",
      "0f9734a8-911f-47b0-a997-2aac392355f1",
      "20652a0e-fe70-491f-9001-ad960567f6c3",
      "f7ac211c-def9-406a-ba7f-4bef3c61020d",
      "9cbc5022-e36d-44ab-93f1-690b64726823",
      "33b2d5d9-a88d-48d4-9273-c75d10bfe17f",
      "fbee6bf2-1296-4ccb-940c-db9af42d093a",
      "bc439801-ee38-4e17-8db3-7a1a00374d8f",
      "44e6f9b6-16a4-4402-a905-d18f922e90a6",
      "2fb90402-c861-42a2-bd14-4911b20de243",
      "163f0651-a8ce-4860-9510-08f3e34a031b",
      "a381beba-f5b2-4fbf-826e-c729518339b8",
      "7259a3e9-4608-4d26-8586-a248f7eb2a23",
      "96496cea-b587-4275-bc0b-8f2cc0da4f34",
      "5447c575-916e-4fb8-b8b8-98b1edff61be",
      "b9997dea-655a-428f-81e2-724421bbfae0",
      "121759d5-377b-4d96-8d18-b62bef520329",
      "e849bf75-82bf-431f-9454-8d2223149a9d"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550447980943,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "acf1a73a-14d7-4e7f-b1f9-a0fed95337a9",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550447980943,
    "parent_id": "9c91430d-940a-46b8-894c-258836f7d0f4",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Avoid leaking Activities with Listeners"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550447980934,
        "id": "113edc7b-336e-494a-889b-4ec1375bc311",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550447980934,
        "parent_id": "acf1a73a-14d7-4e7f-b1f9-a0fed95337a9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If you implement or create a listener in an Activity, always pay attention to the lifecycle of the object that has the listener registered."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If you implement or create a listener in an Activity, always pay attention to the lifecycle of the object that has the listener registered."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550447980937,
        "id": "b6e76ad1-c548-42e7-83bb-c2cf787e6d4d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550447980937,
        "parent_id": "acf1a73a-14d7-4e7f-b1f9-a0fed95337a9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Consider an application where we have several different activities/fragments interested in when a user is logged in or out. One way of doing this would be to have a singleton instance of a "
            ],
            [
              "UserController",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " that can be subscribed to in order to get notified when the state of the user changes:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Consider an application where we have several different activities/fragments interested in when a user is logged in or out. One way of doing this would be to have a singleton instance of a "
          },
          {
            "Text": "UserController",
            "AttrFlags": 2
          },
          {
            "Text": " that can be subscribed to in order to get notified when the state of the user changes:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550447980937,
        "id": "bf36101b-ac0b-439d-aee1-b13632e77f18",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550447980937,
        "parent_id": "acf1a73a-14d7-4e7f-b1f9-a0fed95337a9",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class UserController {\n    private static UserController instance;\n    private List\u003cStateListener\u003e listeners;\n\n    public static synchronized UserController getInstance() {\n        if (instance == null) {\n            instance = new UserController();\n        }\n        return instance;\n    }\n\n    private UserController() {\n        // Init\n    }\n\n    public void registerUserStateChangeListener(StateListener listener) {\n        listeners.add(listener);\n    }\n\n    public void logout() {\n        for (StateListener listener : listeners) {\n            listener.userLoggedOut();\n        }\n    }\n\n    public void login() {\n        for (StateListener listener : listeners) {\n            listener.userLoggedIn();\n        }\n    }\n\n    public interface StateListener {\n        void userLoggedIn();\n        void userLoggedOut();\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class UserController {\n    private static UserController instance;\n    private List\u003cStateListener\u003e listeners;\n\n    public static synchronized UserController getInstance() {\n        if (instance == null) {\n            instance = new UserController();\n        }\n        return instance;\n    }\n\n    private UserController() {\n        // Init\n    }\n\n    public void registerUserStateChangeListener(StateListener listener) {\n        listeners.add(listener);\n    }\n\n    public void logout() {\n        for (StateListener listener : listeners) {\n            listener.userLoggedOut();\n        }\n    }\n\n    public void login() {\n        for (StateListener listener : listeners) {\n            listener.userLoggedIn();\n        }\n    }\n\n    public interface StateListener {\n        void userLoggedIn();\n        void userLoggedOut();\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550447980937,
        "id": "93a1ef8f-bcce-488a-b4d8-f1ec596431ab",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550447980937,
        "parent_id": "acf1a73a-14d7-4e7f-b1f9-a0fed95337a9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Then there are two activities, "
            ],
            [
              "SignInActivity",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Then there are two activities, "
          },
          {
            "Text": "SignInActivity",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550447980937,
        "id": "fc72a403-38b8-4134-b26b-0d19a398841a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550447980937,
        "parent_id": "acf1a73a-14d7-4e7f-b1f9-a0fed95337a9",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class SignInActivity extends Activity implements UserController.StateListener{\n\n    UserController userController;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        this.userController = UserController.getInstance();\n        this.userController.registerUserStateChangeListener(this);\n    }\n\n    @Override\n    public void userLoggedIn() {\n        startMainActivity();\n    }\n\n    @Override\n    public void userLoggedOut() {\n        showLoginForm();\n    }\n\n    ...\n\n    public void onLoginClicked(View v) {\n        userController.login();\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class SignInActivity extends Activity implements UserController.StateListener{\n\n    UserController userController;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        this.userController = UserController.getInstance();\n        this.userController.registerUserStateChangeListener(this);\n    }\n\n    @Override\n    public void userLoggedIn() {\n        startMainActivity();\n    }\n\n    @Override\n    public void userLoggedOut() {\n        showLoginForm();\n    }\n\n    ...\n\n    public void onLoginClicked(View v) {\n        userController.login();\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550447980937,
        "id": "bf9589df-1dd5-40f7-bb62-e000f7cdc5b2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550447980937,
        "parent_id": "acf1a73a-14d7-4e7f-b1f9-a0fed95337a9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "And "
            ],
            [
              "MainActivity",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "And "
          },
          {
            "Text": "MainActivity",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550447980937,
        "id": "58079764-fa06-4bcf-b7be-808bb6615e2e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550447980937,
        "parent_id": "acf1a73a-14d7-4e7f-b1f9-a0fed95337a9",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class MainActivity extends Activity implements UserController.StateListener{\n    UserController userController;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        this.userController = UserController.getInstance();\n        this.userController.registerUserStateChangeListener(this);\n    }\n\n    @Override\n    public void userLoggedIn() {\n        showUserAccount();\n    }\n\n    @Override\n    public void userLoggedOut() {\n        finish();\n    }\n\n    ...\n\n    public void onLogoutClicked(View v) {\n        userController.logout();\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class MainActivity extends Activity implements UserController.StateListener{\n    UserController userController;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        this.userController = UserController.getInstance();\n        this.userController.registerUserStateChangeListener(this);\n    }\n\n    @Override\n    public void userLoggedIn() {\n        showUserAccount();\n    }\n\n    @Override\n    public void userLoggedOut() {\n        finish();\n    }\n\n    ...\n\n    public void onLogoutClicked(View v) {\n        userController.logout();\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550447980937,
        "id": "28f530c5-ac50-4c26-8634-5a6b929eea86",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550447980937,
        "parent_id": "acf1a73a-14d7-4e7f-b1f9-a0fed95337a9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "What happens with this example is that every time the user logs in and then logs out again, a "
            ],
            [
              "MainActivity",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " instance is leaked. The leak occurs because there is a reference to the activity in "
            ],
            [
              "UserController#listeners",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "What happens with this example is that every time the user logs in and then logs out again, a "
          },
          {
            "Text": "MainActivity",
            "AttrFlags": 2
          },
          {
            "Text": " instance is leaked. The leak occurs because there is a reference to the activity in "
          },
          {
            "Text": "UserController#listeners",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550447980938,
        "id": "c1fb5fdd-d2ad-4ab4-b88f-8eaf7dc46d66",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550447980938,
        "parent_id": "acf1a73a-14d7-4e7f-b1f9-a0fed95337a9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Please note:",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " Even if we use an anonymous inner class as a listener, the activity would still leak:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Please note:",
            "AttrFlags": 1
          },
          {
            "Text": " Even if we use an anonymous inner class as a listener, the activity would still leak:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550447980938,
        "id": "26d7dc50-4725-430d-b7a7-593815a52513",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550447980938,
        "parent_id": "acf1a73a-14d7-4e7f-b1f9-a0fed95337a9",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "...\nthis.userController.registerUserStateChangeListener(new UserController.StateListener() {\n    @Override\n    public void userLoggedIn() {\n        showUserAccount();\n    }\n\n    @Override\n    public void userLoggedOut() {\n        finish();\n    }\n});    \n..."
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "...\nthis.userController.registerUserStateChangeListener(new UserController.StateListener() {\n    @Override\n    public void userLoggedIn() {\n        showUserAccount();\n    }\n\n    @Override\n    public void userLoggedOut() {\n        finish();\n    }\n});    \n...",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550447980938,
        "id": "9d570505-c4bf-4ebe-98b6-cfc0c44cdb05",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550447980938,
        "parent_id": "acf1a73a-14d7-4e7f-b1f9-a0fed95337a9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The activity would still leak, because the anonymous inner class has an implicit reference to the outer class (in this case the activity). This is why it is possible to call instance methods in the outer class from the inner class. In fact, the only type of inner classes that do not have a reference to the outer class are "
            ],
            [
              "static",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " inner classes."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The activity would still leak, because the anonymous inner class has an implicit reference to the outer class (in this case the activity). This is why it is possible to call instance methods in the outer class from the inner class. In fact, the only type of inner classes that do not have a reference to the outer class are "
          },
          {
            "Text": "static",
            "AttrFlags": 1
          },
          {
            "Text": " inner classes."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550447980938,
        "id": "40e86983-e874-47cc-a583-90ef98837fad",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550447980938,
        "parent_id": "acf1a73a-14d7-4e7f-b1f9-a0fed95337a9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In short, all instances of non-static inner classes hold an implicit reference to the instance of the outer class that created them."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In short, all instances of non-static inner classes hold an implicit reference to the instance of the outer class that created them."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550447980940,
        "id": "0f9734a8-911f-47b0-a997-2aac392355f1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550447980940,
        "parent_id": "acf1a73a-14d7-4e7f-b1f9-a0fed95337a9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "There are two main approaches to solving this, either by adding a method to remove a listener from "
            ],
            [
              "UserController#listeners",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or using a "
            ],
            [
              "WeakReference",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://developer.android.com/reference/java/lang/ref/WeakReference.html"
                ]
              ]
            ],
            [
              " to hold the reference of the listeners."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "There are two main approaches to solving this, either by adding a method to remove a listener from "
          },
          {
            "Text": "UserController#listeners",
            "AttrFlags": 2
          },
          {
            "Text": " or using a "
          },
          {
            "Text": "WeakReference",
            "AttrFlags": 2,
            "Link": "https://developer.android.com/reference/java/lang/ref/WeakReference.html"
          },
          {
            "Text": " to hold the reference of the listeners."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550447980940,
        "id": "20652a0e-fe70-491f-9001-ad960567f6c3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550447980940,
        "parent_id": "acf1a73a-14d7-4e7f-b1f9-a0fed95337a9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Alternative 1: Removing listeners"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Alternative 1: Removing listeners"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550447980940,
        "id": "f7ac211c-def9-406a-ba7f-4bef3c61020d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550447980940,
        "parent_id": "acf1a73a-14d7-4e7f-b1f9-a0fed95337a9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Let us start by creating a new method "
            ],
            [
              "removeUserStateChangeListener(StateListener listener)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Let us start by creating a new method "
          },
          {
            "Text": "removeUserStateChangeListener(StateListener listener)",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550447980940,
        "id": "9cbc5022-e36d-44ab-93f1-690b64726823",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550447980940,
        "parent_id": "acf1a73a-14d7-4e7f-b1f9-a0fed95337a9",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class UserController {\n\n    ...\n\n    public void registerUserStateChangeListener(StateListener listener) {\n        listeners.add(listener);\n    }\n\n    public void removeUserStateChangeListener(StateListener listener) {\n        listeners.remove(listener);\n    }\n\n    ...\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class UserController {\n\n    ...\n\n    public void registerUserStateChangeListener(StateListener listener) {\n        listeners.add(listener);\n    }\n\n    public void removeUserStateChangeListener(StateListener listener) {\n        listeners.remove(listener);\n    }\n\n    ...\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550447980940,
        "id": "33b2d5d9-a88d-48d4-9273-c75d10bfe17f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550447980940,
        "parent_id": "acf1a73a-14d7-4e7f-b1f9-a0fed95337a9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Then let us call this method in the activity’s "
            ],
            [
              "onDestroy",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Then let us call this method in the activity’s "
          },
          {
            "Text": "onDestroy",
            "AttrFlags": 2
          },
          {
            "Text": " method:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550447980940,
        "id": "fbee6bf2-1296-4ccb-940c-db9af42d093a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550447980940,
        "parent_id": "acf1a73a-14d7-4e7f-b1f9-a0fed95337a9",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class MainActivity extends Activity implements UserController.StateListener{\n    ...\n\n    @Override\n    protected void onDestroy() {\n        super.onDestroy();\n        userController.removeUserStateChangeListener(this);\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class MainActivity extends Activity implements UserController.StateListener{\n    ...\n\n    @Override\n    protected void onDestroy() {\n        super.onDestroy();\n        userController.removeUserStateChangeListener(this);\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550447980940,
        "id": "bc439801-ee38-4e17-8db3-7a1a00374d8f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550447980940,
        "parent_id": "acf1a73a-14d7-4e7f-b1f9-a0fed95337a9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "With this modification the instances of "
            ],
            [
              "MainActivity",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " are no longer leaked when the user logs in and out. However, if the documentation isn’t clear, chances are that the next developer that starts using "
            ],
            [
              "UserController",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " might miss that it is required to unregister the listener when the activity is destroyed, which leads us to the second method of avoiding these types of leaks."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "With this modification the instances of "
          },
          {
            "Text": "MainActivity",
            "AttrFlags": 2
          },
          {
            "Text": " are no longer leaked when the user logs in and out. However, if the documentation isn’t clear, chances are that the next developer that starts using "
          },
          {
            "Text": "UserController",
            "AttrFlags": 2
          },
          {
            "Text": " might miss that it is required to unregister the listener when the activity is destroyed, which leads us to the second method of avoiding these types of leaks."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550447980940,
        "id": "44e6f9b6-16a4-4402-a905-d18f922e90a6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550447980940,
        "parent_id": "acf1a73a-14d7-4e7f-b1f9-a0fed95337a9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Alternative 2: Using weak references"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Alternative 2: Using weak references"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550447980941,
        "id": "2fb90402-c861-42a2-bd14-4911b20de243",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550447980941,
        "parent_id": "acf1a73a-14d7-4e7f-b1f9-a0fed95337a9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "First off, let us start by explaining what a weak reference is. A weak reference, as the name suggests, holds a weak reference to an object. Compared to a normal instance field, which is a strong reference, a weak references does not stop the garbage collector, GC, from removing the objects. In the example above this would allow "
            ],
            [
              "MainActivity",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to be garbage-collected after it has been destroyed if the "
            ],
            [
              "UserController",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " used "
            ],
            [
              "WeakReference",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://developer.android.com/reference/java/lang/ref/WeakReference.html"
                ]
              ]
            ],
            [
              " to the reference the listeners."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "First off, let us start by explaining what a weak reference is. A weak reference, as the name suggests, holds a weak reference to an object. Compared to a normal instance field, which is a strong reference, a weak references does not stop the garbage collector, GC, from removing the objects. In the example above this would allow "
          },
          {
            "Text": "MainActivity",
            "AttrFlags": 2
          },
          {
            "Text": " to be garbage-collected after it has been destroyed if the "
          },
          {
            "Text": "UserController",
            "AttrFlags": 2
          },
          {
            "Text": " used "
          },
          {
            "Text": "WeakReference",
            "AttrFlags": 2,
            "Link": "https://developer.android.com/reference/java/lang/ref/WeakReference.html"
          },
          {
            "Text": " to the reference the listeners."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550447980941,
        "id": "163f0651-a8ce-4860-9510-08f3e34a031b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550447980941,
        "parent_id": "acf1a73a-14d7-4e7f-b1f9-a0fed95337a9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In short, a weak reference is telling the GC that if no one else has a strong reference to this object, go ahead and remove it."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In short, a weak reference is telling the GC that if no one else has a strong reference to this object, go ahead and remove it."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550447980941,
        "id": "a381beba-f5b2-4fbf-826e-c729518339b8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550447980941,
        "parent_id": "acf1a73a-14d7-4e7f-b1f9-a0fed95337a9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Let us modify the "
            ],
            [
              "UserController",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to use a list of "
            ],
            [
              "WeakReference",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://developer.android.com/reference/java/lang/ref/WeakReference.html"
                ]
              ]
            ],
            [
              " to keep track of it’s listeners:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Let us modify the "
          },
          {
            "Text": "UserController",
            "AttrFlags": 2
          },
          {
            "Text": " to use a list of "
          },
          {
            "Text": "WeakReference",
            "AttrFlags": 2,
            "Link": "https://developer.android.com/reference/java/lang/ref/WeakReference.html"
          },
          {
            "Text": " to keep track of it’s listeners:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550447980942,
        "id": "7259a3e9-4608-4d26-8586-a248f7eb2a23",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550447980942,
        "parent_id": "acf1a73a-14d7-4e7f-b1f9-a0fed95337a9",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class UserController {\n\n    ...\n    private List\u003cWeakReference\u003cStateListener\u003e\u003e listeners;\n    ...\n\n    public void registerUserStateChangeListener(StateListener listener) {\n        listeners.add(new WeakReference\u003c\u003e(listener));\n    }\n\n    public void removeUserStateChangeListener(StateListener listenerToRemove) {\n        WeakReference referencesToRemove = null;\n        for (WeakReference\u003cStateListener\u003e listenerRef : listeners) {\n            StateListener listener = listenerRef.get();\n            if (listener != null \u0026\u0026 listener == listenerToRemove) {\n                referencesToRemove = listenerRef;\n                break;\n            }\n        }\n        listeners.remove(referencesToRemove);\n    }\n\n    public void logout() {\n        List referencesToRemove = new LinkedList();\n        for (WeakReference\u003cStateListener\u003e listenerRef : listeners) {\n            StateListener listener = listenerRef.get();\n            if (listener != null) {\n                listener.userLoggedOut();\n            } else {\n                referencesToRemove.add(listenerRef);\n            }\n        }\n    }\n\n    public void login() {\n        List referencesToRemove = new LinkedList();\n        for (WeakReference\u003cStateListener\u003e listenerRef : listeners) {\n            StateListener listener = listenerRef.get();\n            if (listener != null) {\n                listener.userLoggedIn();\n            } else {\n                referencesToRemove.add(listenerRef);\n            }\n        }\n    }\n    ...    \n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class UserController {\n\n    ...\n    private List\u003cWeakReference\u003cStateListener\u003e\u003e listeners;\n    ...\n\n    public void registerUserStateChangeListener(StateListener listener) {\n        listeners.add(new WeakReference\u003c\u003e(listener));\n    }\n\n    public void removeUserStateChangeListener(StateListener listenerToRemove) {\n        WeakReference referencesToRemove = null;\n        for (WeakReference\u003cStateListener\u003e listenerRef : listeners) {\n            StateListener listener = listenerRef.get();\n            if (listener != null \u0026\u0026 listener == listenerToRemove) {\n                referencesToRemove = listenerRef;\n                break;\n            }\n        }\n        listeners.remove(referencesToRemove);\n    }\n\n    public void logout() {\n        List referencesToRemove = new LinkedList();\n        for (WeakReference\u003cStateListener\u003e listenerRef : listeners) {\n            StateListener listener = listenerRef.get();\n            if (listener != null) {\n                listener.userLoggedOut();\n            } else {\n                referencesToRemove.add(listenerRef);\n            }\n        }\n    }\n\n    public void login() {\n        List referencesToRemove = new LinkedList();\n        for (WeakReference\u003cStateListener\u003e listenerRef : listeners) {\n            StateListener listener = listenerRef.get();\n            if (listener != null) {\n                listener.userLoggedIn();\n            } else {\n                referencesToRemove.add(listenerRef);\n            }\n        }\n    }\n    ...    \n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550447980942,
        "id": "96496cea-b587-4275-bc0b-8f2cc0da4f34",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550447980942,
        "parent_id": "acf1a73a-14d7-4e7f-b1f9-a0fed95337a9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "With this modification it doesn’t matter whether or not the listeners are removed, since "
            ],
            [
              "UserController",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " holds no strong references to any of the listeners. However, writing this boilerplate code every time is cumbersome. Therefore, let us create a generic class called "
            ],
            [
              "WeakCollection",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "With this modification it doesn’t matter whether or not the listeners are removed, since "
          },
          {
            "Text": "UserController",
            "AttrFlags": 2
          },
          {
            "Text": " holds no strong references to any of the listeners. However, writing this boilerplate code every time is cumbersome. Therefore, let us create a generic class called "
          },
          {
            "Text": "WeakCollection",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550447980942,
        "id": "5447c575-916e-4fb8-b8b8-98b1edff61be",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550447980942,
        "parent_id": "acf1a73a-14d7-4e7f-b1f9-a0fed95337a9",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class WeakCollection\u003cT\u003e {\n    private LinkedList\u003cWeakReference\u003cT\u003e\u003e list;\n\n    public WeakCollection() {\n        this.list = new LinkedList\u003c\u003e();\n    }\n    public void put(T item){\n        //Make sure that we don't re add an item if we already have the reference.\n        List\u003cT\u003e currentList = get();\n        for(T oldItem : currentList){\n            if(item == oldItem){\n                return;\n            }\n        }\n        list.add(new WeakReference\u003cT\u003e(item));\n    }\n\n    public List\u003cT\u003e get() {\n        List\u003cT\u003e ret = new ArrayList\u003c\u003e(list.size());\n        List\u003cWeakReference\u003cT\u003e\u003e itemsToRemove = new LinkedList\u003c\u003e();\n        for (WeakReference\u003cT\u003e ref : list) {\n            T item = ref.get();\n            if (item == null) {\n                itemsToRemove.add(ref);\n            } else {\n                ret.add(item);\n            }\n        }\n        for (WeakReference ref : itemsToRemove) {\n            this.list.remove(ref);\n        }\n        return ret;\n    }\n\n    public void remove(T listener) {\n        WeakReference\u003cT\u003e refToRemove = null;\n        for (WeakReference\u003cT\u003e ref : list) {\n            T item = ref.get();\n            if (item == listener) {\n                refToRemove = ref;\n            }\n        }\n        if(refToRemove != null){\n            list.remove(refToRemove);\n        }\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class WeakCollection\u003cT\u003e {\n    private LinkedList\u003cWeakReference\u003cT\u003e\u003e list;\n\n    public WeakCollection() {\n        this.list = new LinkedList\u003c\u003e();\n    }\n    public void put(T item){\n        //Make sure that we don't re add an item if we already have the reference.\n        List\u003cT\u003e currentList = get();\n        for(T oldItem : currentList){\n            if(item == oldItem){\n                return;\n            }\n        }\n        list.add(new WeakReference\u003cT\u003e(item));\n    }\n\n    public List\u003cT\u003e get() {\n        List\u003cT\u003e ret = new ArrayList\u003c\u003e(list.size());\n        List\u003cWeakReference\u003cT\u003e\u003e itemsToRemove = new LinkedList\u003c\u003e();\n        for (WeakReference\u003cT\u003e ref : list) {\n            T item = ref.get();\n            if (item == null) {\n                itemsToRemove.add(ref);\n            } else {\n                ret.add(item);\n            }\n        }\n        for (WeakReference ref : itemsToRemove) {\n            this.list.remove(ref);\n        }\n        return ret;\n    }\n\n    public void remove(T listener) {\n        WeakReference\u003cT\u003e refToRemove = null;\n        for (WeakReference\u003cT\u003e ref : list) {\n            T item = ref.get();\n            if (item == listener) {\n                refToRemove = ref;\n            }\n        }\n        if(refToRemove != null){\n            list.remove(refToRemove);\n        }\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550447980942,
        "id": "b9997dea-655a-428f-81e2-724421bbfae0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550447980942,
        "parent_id": "acf1a73a-14d7-4e7f-b1f9-a0fed95337a9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Now let us re-write "
            ],
            [
              "UserController",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to use "
            ],
            [
              "WeakCollection\u003cT\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " instead:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Now let us re-write "
          },
          {
            "Text": "UserController",
            "AttrFlags": 2
          },
          {
            "Text": " to use "
          },
          {
            "Text": "WeakCollection\u003cT\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " instead:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550447980942,
        "id": "121759d5-377b-4d96-8d18-b62bef520329",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550447980942,
        "parent_id": "acf1a73a-14d7-4e7f-b1f9-a0fed95337a9",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class UserController {\n    ...\n    private WeakCollection\u003cStateListener\u003e listenerRefs;\n    ...\n\n    public void registerUserStateChangeListener(StateListener listener) {\n        listenerRefs.put(listener);\n    }\n\n    public void removeUserStateChangeListener(StateListener listenerToRemove) {\n        listenerRefs.remove(listenerToRemove);\n    }\n\n    public void logout() {\n        for (StateListener listener : listenerRefs.get()) {\n            listener.userLoggedOut();\n        }\n    }\n\n    public void login() {\n        for (StateListener listener : listenerRefs.get()) {\n            listener.userLoggedIn();\n        }\n    }\n\n    ...\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class UserController {\n    ...\n    private WeakCollection\u003cStateListener\u003e listenerRefs;\n    ...\n\n    public void registerUserStateChangeListener(StateListener listener) {\n        listenerRefs.put(listener);\n    }\n\n    public void removeUserStateChangeListener(StateListener listenerToRemove) {\n        listenerRefs.remove(listenerToRemove);\n    }\n\n    public void logout() {\n        for (StateListener listener : listenerRefs.get()) {\n            listener.userLoggedOut();\n        }\n    }\n\n    public void login() {\n        for (StateListener listener : listenerRefs.get()) {\n            listener.userLoggedIn();\n        }\n    }\n\n    ...\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550447980942,
        "id": "e849bf75-82bf-431f-9454-8d2223149a9d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550447980942,
        "parent_id": "acf1a73a-14d7-4e7f-b1f9-a0fed95337a9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As shown in the code example above, the "
            ],
            [
              "WeakCollection\u003cT\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " removes all of the boilerplate code needed to use "
            ],
            [
              "WeakReference",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://developer.android.com/reference/java/lang/ref/WeakReference.html"
                ]
              ]
            ],
            [
              " instead of a normal list. To top it all off: If a call to "
            ],
            [
              "UserController#removeUserStateChangeListener(StateListener)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is missed, the listener, and all the objects it is referencing, will not leak."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "As shown in the code example above, the "
          },
          {
            "Text": "WeakCollection\u003cT\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " removes all of the boilerplate code needed to use "
          },
          {
            "Text": "WeakReference",
            "AttrFlags": 2,
            "Link": "https://developer.android.com/reference/java/lang/ref/WeakReference.html"
          },
          {
            "Text": " instead of a normal list. To top it all off: If a call to "
          },
          {
            "Text": "UserController#removeUserStateChangeListener(StateListener)",
            "AttrFlags": 2
          },
          {
            "Text": " is missed, the listener, and all the objects it is referencing, will not leak."
          }
        ]
      }
    ],
    "title": "Avoid leaking Activities with Listeners",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}