{
  "ID": "f77b4b55-6fdd-4ff5-ab9a-6c980ea37761",
  "Root": {
    "alive": true,
    "content": [
      "85fd36bd-5851-4b51-b35e-3d6c471b01b6",
      "7bc58f2d-c1e1-4a6a-9d4e-53eaee7cfc58",
      "0ab1d1d6-a832-4f39-944c-adf379593df5",
      "1a6508e2-efd3-4a24-b9bd-ad0d69b0d3aa",
      "0f51422d-f98e-4b50-ab73-28f0f291c9b6",
      "16e36267-8391-4019-a206-e71a08789b62",
      "079cf5e7-0231-4397-a36f-573f849f86a0",
      "7509483b-546e-4703-b651-3a6bc64aba0a",
      "f8e76edf-ed6f-40e9-8838-a6bc21e1e738"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550451651998,
    "id": "f77b4b55-6fdd-4ff5-ab9a-6c980ea37761",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550451651998,
    "parent_id": "7948e7ab-b399-4557-8504-4f81f50dc8ec",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "010 How to compress image without size change"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550451651994,
        "id": "85fd36bd-5851-4b51-b35e-3d6c471b01b6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550451651994,
        "parent_id": "f77b4b55-6fdd-4ff5-ab9a-6c980ea37761",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Get "
            ],
            [
              "Compressed Bitmap",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " from Singleton class:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Get "
          },
          {
            "Text": "Compressed Bitmap",
            "AttrFlags": 1
          },
          {
            "Text": " from Singleton class:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550451651996,
        "id": "7bc58f2d-c1e1-4a6a-9d4e-53eaee7cfc58",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550451651996,
        "parent_id": "f77b4b55-6fdd-4ff5-ab9a-6c980ea37761",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "ImageView imageView = (ImageView)findViewById(R.id.imageView);\nBitmap bitmap = ImageUtils.getInstant().getCompressedBitmap(\"Your_Image_Path_Here\");\nimageView.setImageBitmap(bitmap);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "ImageView imageView = (ImageView)findViewById(R.id.imageView);\nBitmap bitmap = ImageUtils.getInstant().getCompressedBitmap(\"Your_Image_Path_Here\");\nimageView.setImageBitmap(bitmap);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550451651997,
        "id": "0ab1d1d6-a832-4f39-944c-adf379593df5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550451651997,
        "parent_id": "f77b4b55-6fdd-4ff5-ab9a-6c980ea37761",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "ImageUtils.java",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "ImageUtils.java",
            "AttrFlags": 1
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550451651997,
        "id": "1a6508e2-efd3-4a24-b9bd-ad0d69b0d3aa",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550451651997,
        "parent_id": "f77b4b55-6fdd-4ff5-ab9a-6c980ea37761",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class ImageUtils {\n\n    public static ImageUtils mInstant;\n\n    public static ImageUtils getInstant(){\n        if(mInstant==null){\n            mInstant = new ImageUtils();\n        }\n        return mInstant;\n    }\n\n    public  Bitmap getCompressedBitmap(String imagePath) {\n        float maxHeight = 1920.0f;\n        float maxWidth = 1080.0f;\n        Bitmap scaledBitmap = null;\n        BitmapFactory.Options options = new BitmapFactory.Options();\n        options.inJustDecodeBounds = true;\n        Bitmap bmp = BitmapFactory.decodeFile(imagePath, options);\n\n        int actualHeight = options.outHeight;\n        int actualWidth = options.outWidth;\n        float imgRatio = (float) actualWidth / (float) actualHeight;\n        float maxRatio = maxWidth / maxHeight;\n\n        if (actualHeight \u003e maxHeight || actualWidth \u003e maxWidth) {\n            if (imgRatio \u003c maxRatio) {\n                imgRatio = maxHeight / actualHeight;\n                actualWidth = (int) (imgRatio * actualWidth);\n                actualHeight = (int) maxHeight;\n            } else if (imgRatio \u003e maxRatio) {\n                imgRatio = maxWidth / actualWidth;\n                actualHeight = (int) (imgRatio * actualHeight);\n                actualWidth = (int) maxWidth;\n            } else {\n                actualHeight = (int) maxHeight;\n                actualWidth = (int) maxWidth;\n\n            }\n        }\n\n        options.inSampleSize = calculateInSampleSize(options, actualWidth, actualHeight);\n        options.inJustDecodeBounds = false;\n        options.inDither = false;\n        options.inPurgeable = true;\n        options.inInputShareable = true;\n        options.inTempStorage = new byte[16 * 1024];\n\n        try {\n            bmp = BitmapFactory.decodeFile(imagePath, options);\n        } catch (OutOfMemoryError exception) {\n            exception.printStackTrace();\n\n        }\n        try {\n            scaledBitmap = Bitmap.createBitmap(actualWidth, actualHeight, Bitmap.Config.ARGB_8888);\n        } catch (OutOfMemoryError exception) {\n            exception.printStackTrace();\n        }\n\n        float ratioX = actualWidth / (float) options.outWidth;\n        float ratioY = actualHeight / (float) options.outHeight;\n        float middleX = actualWidth / 2.0f;\n        float middleY = actualHeight / 2.0f;\n\n        Matrix scaleMatrix = new Matrix();\n        scaleMatrix.setScale(ratioX, ratioY, middleX, middleY);\n\n        Canvas canvas = new Canvas(scaledBitmap);\n        canvas.setMatrix(scaleMatrix);\n        canvas.drawBitmap(bmp, middleX - bmp.getWidth() / 2, middleY - bmp.getHeight() / 2, new Paint(Paint.FILTER_BITMAP_FLAG));\n\n        ExifInterface exif = null;\n        try {\n            exif = new ExifInterface(imagePath);\n            int orientation = exif.getAttributeInt(ExifInterface.TAG_ORIENTATION, 0);\n            Matrix matrix = new Matrix();\n            if (orientation == 6) {\n                matrix.postRotate(90);\n            } else if (orientation == 3) {\n                matrix.postRotate(180);\n            } else if (orientation == 8) {\n                matrix.postRotate(270);\n            }\n            scaledBitmap = Bitmap.createBitmap(scaledBitmap, 0, 0, scaledBitmap.getWidth(), scaledBitmap.getHeight(), matrix, true);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        ByteArrayOutputStream out = new ByteArrayOutputStream();\n        scaledBitmap.compress(Bitmap.CompressFormat.JPEG, 85, out);\n\n        byte[] byteArray = out.toByteArray();\n\n        Bitmap updatedBitmap = BitmapFactory.decodeByteArray(byteArray, 0, byteArray.length);\n\n        return updatedBitmap;\n    }\n\n    private int calculateInSampleSize(BitmapFactory.Options options, int reqWidth, int reqHeight) {\n        final int height = options.outHeight;\n        final int width = options.outWidth;\n        int inSampleSize = 1;\n\n        if (height \u003e reqHeight || width \u003e reqWidth) {\n            final int heightRatio = Math.round((float) height / (float) reqHeight);\n            final int widthRatio = Math.round((float) width / (float) reqWidth);\n            inSampleSize = heightRatio \u003c widthRatio ? heightRatio : widthRatio;\n        }\n        final float totalPixels = width * height;\n        final float totalReqPixelsCap = reqWidth * reqHeight * 2;\n\n        while (totalPixels / (inSampleSize * inSampleSize) \u003e totalReqPixelsCap) {\n            inSampleSize++;\n        }\n        return inSampleSize;\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class ImageUtils {\n\n    public static ImageUtils mInstant;\n\n    public static ImageUtils getInstant(){\n        if(mInstant==null){\n            mInstant = new ImageUtils();\n        }\n        return mInstant;\n    }\n\n    public  Bitmap getCompressedBitmap(String imagePath) {\n        float maxHeight = 1920.0f;\n        float maxWidth = 1080.0f;\n        Bitmap scaledBitmap = null;\n        BitmapFactory.Options options = new BitmapFactory.Options();\n        options.inJustDecodeBounds = true;\n        Bitmap bmp = BitmapFactory.decodeFile(imagePath, options);\n\n        int actualHeight = options.outHeight;\n        int actualWidth = options.outWidth;\n        float imgRatio = (float) actualWidth / (float) actualHeight;\n        float maxRatio = maxWidth / maxHeight;\n\n        if (actualHeight \u003e maxHeight || actualWidth \u003e maxWidth) {\n            if (imgRatio \u003c maxRatio) {\n                imgRatio = maxHeight / actualHeight;\n                actualWidth = (int) (imgRatio * actualWidth);\n                actualHeight = (int) maxHeight;\n            } else if (imgRatio \u003e maxRatio) {\n                imgRatio = maxWidth / actualWidth;\n                actualHeight = (int) (imgRatio * actualHeight);\n                actualWidth = (int) maxWidth;\n            } else {\n                actualHeight = (int) maxHeight;\n                actualWidth = (int) maxWidth;\n\n            }\n        }\n\n        options.inSampleSize = calculateInSampleSize(options, actualWidth, actualHeight);\n        options.inJustDecodeBounds = false;\n        options.inDither = false;\n        options.inPurgeable = true;\n        options.inInputShareable = true;\n        options.inTempStorage = new byte[16 * 1024];\n\n        try {\n            bmp = BitmapFactory.decodeFile(imagePath, options);\n        } catch (OutOfMemoryError exception) {\n            exception.printStackTrace();\n\n        }\n        try {\n            scaledBitmap = Bitmap.createBitmap(actualWidth, actualHeight, Bitmap.Config.ARGB_8888);\n        } catch (OutOfMemoryError exception) {\n            exception.printStackTrace();\n        }\n\n        float ratioX = actualWidth / (float) options.outWidth;\n        float ratioY = actualHeight / (float) options.outHeight;\n        float middleX = actualWidth / 2.0f;\n        float middleY = actualHeight / 2.0f;\n\n        Matrix scaleMatrix = new Matrix();\n        scaleMatrix.setScale(ratioX, ratioY, middleX, middleY);\n\n        Canvas canvas = new Canvas(scaledBitmap);\n        canvas.setMatrix(scaleMatrix);\n        canvas.drawBitmap(bmp, middleX - bmp.getWidth() / 2, middleY - bmp.getHeight() / 2, new Paint(Paint.FILTER_BITMAP_FLAG));\n\n        ExifInterface exif = null;\n        try {\n            exif = new ExifInterface(imagePath);\n            int orientation = exif.getAttributeInt(ExifInterface.TAG_ORIENTATION, 0);\n            Matrix matrix = new Matrix();\n            if (orientation == 6) {\n                matrix.postRotate(90);\n            } else if (orientation == 3) {\n                matrix.postRotate(180);\n            } else if (orientation == 8) {\n                matrix.postRotate(270);\n            }\n            scaledBitmap = Bitmap.createBitmap(scaledBitmap, 0, 0, scaledBitmap.getWidth(), scaledBitmap.getHeight(), matrix, true);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        ByteArrayOutputStream out = new ByteArrayOutputStream();\n        scaledBitmap.compress(Bitmap.CompressFormat.JPEG, 85, out);\n\n        byte[] byteArray = out.toByteArray();\n\n        Bitmap updatedBitmap = BitmapFactory.decodeByteArray(byteArray, 0, byteArray.length);\n\n        return updatedBitmap;\n    }\n\n    private int calculateInSampleSize(BitmapFactory.Options options, int reqWidth, int reqHeight) {\n        final int height = options.outHeight;\n        final int width = options.outWidth;\n        int inSampleSize = 1;\n\n        if (height \u003e reqHeight || width \u003e reqWidth) {\n            final int heightRatio = Math.round((float) height / (float) reqHeight);\n            final int widthRatio = Math.round((float) width / (float) reqWidth);\n            inSampleSize = heightRatio \u003c widthRatio ? heightRatio : widthRatio;\n        }\n        final float totalPixels = width * height;\n        final float totalReqPixelsCap = reqWidth * reqHeight * 2;\n\n        while (totalPixels / (inSampleSize * inSampleSize) \u003e totalReqPixelsCap) {\n            inSampleSize++;\n        }\n        return inSampleSize;\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550451651997,
        "id": "0f51422d-f98e-4b50-ab73-28f0f291c9b6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550451651997,
        "parent_id": "f77b4b55-6fdd-4ff5-ab9a-6c980ea37761",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Dimensions are same after compressing Bitmap",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Dimensions are same after compressing Bitmap",
            "AttrFlags": 1
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550451651997,
        "id": "16e36267-8391-4019-a206-e71a08789b62",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550451651997,
        "parent_id": "f77b4b55-6fdd-4ff5-ab9a-6c980ea37761",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "How did I checked ?",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "How did I checked ?",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550451651997,
        "id": "079cf5e7-0231-4397-a36f-573f849f86a0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550451651997,
        "parent_id": "f77b4b55-6fdd-4ff5-ab9a-6c980ea37761",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Bitmap beforeBitmap = BitmapFactory.decodeFile(\"Your_Image_Path_Here\");\nLog.i(\"Before Compress Dimension\", beforeBitmap.getWidth()+\"-\"+beforeBitmap.getHeight());\n\nBitmap afterBitmap = ImageUtils.getInstant().getCompressedBitmap(\"Your_Image_Path_Here\");\nLog.i(\"After Compress Dimension\", afterBitmap.getWidth() + \"-\" + afterBitmap.getHeight());"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Bitmap beforeBitmap = BitmapFactory.decodeFile(\"Your_Image_Path_Here\");\nLog.i(\"Before Compress Dimension\", beforeBitmap.getWidth()+\"-\"+beforeBitmap.getHeight());\n\nBitmap afterBitmap = ImageUtils.getInstant().getCompressedBitmap(\"Your_Image_Path_Here\");\nLog.i(\"After Compress Dimension\", afterBitmap.getWidth() + \"-\" + afterBitmap.getHeight());",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550451651997,
        "id": "7509483b-546e-4703-b651-3a6bc64aba0a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550451651997,
        "parent_id": "f77b4b55-6fdd-4ff5-ab9a-6c980ea37761",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Output:",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Output:",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550451651998,
        "id": "f8e76edf-ed6f-40e9-8838-a6bc21e1e738",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550451651998,
        "parent_id": "f77b4b55-6fdd-4ff5-ab9a-6c980ea37761",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Before Compress : Dimension: 1080-1452\nAfter Compress : Dimension: 1080-1452"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Before Compress : Dimension: 1080-1452\nAfter Compress : Dimension: 1080-1452",
        "code_language": "Plain Text"
      }
    ],
    "title": "010 How to compress image without size change"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}