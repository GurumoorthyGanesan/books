{
  "ID": "540c344e-1358-419f-b62f-f4cc35e604b8",
  "Root": {
    "alive": true,
    "content": [
      "238eaa51-8680-4de2-9ec1-35c314492fd8",
      "ac148009-469e-4084-b8e7-a9593be57c8c",
      "88747bc0-e7dc-465f-955e-c32fb7c07f46",
      "e387f840-2424-4a10-a814-576335e94628",
      "5e9fffbe-445e-4e4b-b114-32d7694b83c9",
      "298b5bb0-d206-472b-8ac5-82a053d1e601",
      "a50e06f1-4cce-45a4-977c-00cab3b53702",
      "01717086-b140-4529-9074-89a828b17779",
      "b79e285d-f09e-4c7a-9803-c361d68f1e63",
      "73a88d61-f935-4e9a-abf2-1b46ee53dac6",
      "1f021307-d2d3-451d-90d3-a8308a863b79",
      "96b4a5cf-bc88-4f7d-8303-f3cbe92a01cf",
      "6ca0fe1e-df60-4bfa-97fc-52ed3fe3d596"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552515097421,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "540c344e-1358-419f-b62f-f4cc35e604b8",
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552517460000,
    "parent_id": "34f80a6d-d2c8-4337-9515-97d48e342fec",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "SET"
        ]
      ]
    },
    "type": "page",
    "version": 33,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552515106773,
        "id": "238eaa51-8680-4de2-9ec1-35c314492fd8",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552515060000,
        "parent_id": "540c344e-1358-419f-b62f-f4cc35e604b8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Displays or sets environment variables. With /P switch, it asks the user for input, storing the result in the variable. With /A switch, it performs simple arithmetic calculations, storing the result in the variable. With string assignments, there must be no spaces before and after the equality sign; thus, \"set name = Peter\" does not work, while \"set name=Peter\" does."
            ]
          ]
        },
        "type": "text",
        "version": 2,
        "inline_content": [
          {
            "Text": "Displays or sets environment variables. With /P switch, it asks the user for input, storing the result in the variable. With /A switch, it performs simple arithmetic calculations, storing the result in the variable. With string assignments, there must be no spaces before and after the equality sign; thus, \"set name = Peter\" does not work, while \"set name=Peter\" does."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552515106773,
        "id": "ac148009-469e-4084-b8e7-a9593be57c8c",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552515060000,
        "parent_id": "540c344e-1358-419f-b62f-f4cc35e604b8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Examples:"
            ]
          ]
        },
        "type": "text",
        "version": 2,
        "inline_content": [
          {
            "Text": "Examples:"
          }
        ]
      },
      {
        "alive": true,
        "content": [
          "38931590-a9ed-4e5f-909b-cb4e8b4a010c"
        ],
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552515106773,
        "id": "88747bc0-e7dc-465f-955e-c32fb7c07f46",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552515060000,
        "parent_id": "540c344e-1358-419f-b62f-f4cc35e604b8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "set"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 2,
        "content_resolved": [
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1552515106773,
            "id": "38931590-a9ed-4e5f-909b-cb4e8b4a010c",
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1552515060000,
            "parent_id": "88747bc0-e7dc-465f-955e-c32fb7c07f46",
            "parent_table": "block",
            "properties": {
              "title": [
                [
                  "Displays a list of environment variables"
                ]
              ]
            },
            "type": "bulleted_list",
            "version": 2,
            "inline_content": [
              {
                "Text": "Displays a list of environment variables"
              }
            ]
          }
        ],
        "inline_content": [
          {
            "Text": "set"
          }
        ]
      },
      {
        "alive": true,
        "content": [
          "63c6f821-18b6-48e5-be69-51c6982f624f"
        ],
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552515106773,
        "id": "e387f840-2424-4a10-a814-576335e94628",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552515060000,
        "parent_id": "540c344e-1358-419f-b62f-f4cc35e604b8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "set HOME"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 2,
        "content_resolved": [
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1552515106773,
            "id": "63c6f821-18b6-48e5-be69-51c6982f624f",
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1552515060000,
            "parent_id": "e387f840-2424-4a10-a814-576335e94628",
            "parent_table": "block",
            "properties": {
              "title": [
                [
                  "Displays the values of the environment variables whose names start with \"HOME\""
                ]
              ]
            },
            "type": "bulleted_list",
            "version": 2,
            "inline_content": [
              {
                "Text": "Displays the values of the environment variables whose names start with \"HOME\""
              }
            ]
          }
        ],
        "inline_content": [
          {
            "Text": "set HOME"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552515106773,
        "id": "5e9fffbe-445e-4e4b-b114-32d7694b83c9",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552515060000,
        "parent_id": "540c344e-1358-419f-b62f-f4cc35e604b8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "set MYNUMBER=56"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 2,
        "inline_content": [
          {
            "Text": "set MYNUMBER=56"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552515106773,
        "id": "298b5bb0-d206-472b-8ac5-82a053d1e601",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552515060000,
        "parent_id": "540c344e-1358-419f-b62f-f4cc35e604b8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "set HOME=%HOME%;C:\\Program Files\\My Bin Folder"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 2,
        "inline_content": [
          {
            "Text": "set HOME=%HOME%;C:\\Program Files\\My Bin Folder"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552515106773,
        "id": "a50e06f1-4cce-45a4-977c-00cab3b53702",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552515060000,
        "parent_id": "540c344e-1358-419f-b62f-f4cc35e604b8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "set /P user_input=Enter an integer:"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 2,
        "inline_content": [
          {
            "Text": "set /P user_input=Enter an integer:"
          }
        ]
      },
      {
        "alive": true,
        "content": [
          "88116d67-e9f5-4efb-a864-c4e6b522171b"
        ],
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552515106774,
        "id": "01717086-b140-4529-9074-89a828b17779",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552515060000,
        "parent_id": "540c344e-1358-419f-b62f-f4cc35e604b8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "set /A result = 4 * ( 6 / 3 )"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 2,
        "content_resolved": [
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1552515106774,
            "id": "88116d67-e9f5-4efb-a864-c4e6b522171b",
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1552515060000,
            "parent_id": "01717086-b140-4529-9074-89a828b17779",
            "parent_table": "block",
            "properties": {
              "title": [
                [
                  "Sets the result variable with the result of a calculation. See also "
                ],
                [
                  "#Calculation",
                  [
                    [
                      "a",
                      "https://en.wikibooks.org/wiki/Windows_Batch_Scripting#Calculation"
                    ]
                  ]
                ],
                [
                  "."
                ]
              ]
            },
            "type": "bulleted_list",
            "version": 2,
            "inline_content": [
              {
                "Text": "Sets the result variable with the result of a calculation. See also "
              },
              {
                "Text": "#Calculation",
                "Link": "https://en.wikibooks.org/wiki/Windows_Batch_Scripting#Calculation"
              },
              {
                "Text": "."
              }
            ]
          }
        ],
        "inline_content": [
          {
            "Text": "set /A result = 4 * ( 6 / 3 )"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552515106774,
        "id": "b79e285d-f09e-4c7a-9803-c361d68f1e63",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552515060000,
        "parent_id": "540c344e-1358-419f-b62f-f4cc35e604b8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Links:"
            ]
          ]
        },
        "type": "text",
        "version": 2,
        "inline_content": [
          {
            "Text": "Links:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552515106774,
        "id": "73a88d61-f935-4e9a-abf2-1b46ee53dac6",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552515060000,
        "parent_id": "540c344e-1358-419f-b62f-f4cc35e604b8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "set at ss64.com",
              [
                [
                  "a",
                  "http://ss64.com/nt/set.html"
                ]
              ]
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 2,
        "inline_content": [
          {
            "Text": "set at ss64.com",
            "Link": "http://ss64.com/nt/set.html"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552515106774,
        "id": "1f021307-d2d3-451d-90d3-a8308a863b79",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552515180000,
        "parent_id": "540c344e-1358-419f-b62f-f4cc35e604b8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "set at Microsoft",
              [
                [
                  "a",
                  "https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/set_1"
                ]
              ]
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 4,
        "inline_content": [
          {
            "Text": "set at Microsoft",
            "Link": "https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/set_1"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552515180000,
        "id": "96b4a5cf-bc88-4f7d-8303-f3cbe92a01cf",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552515180000,
        "parent_id": "540c344e-1358-419f-b62f-f4cc35e604b8",
        "parent_table": "block",
        "type": "text",
        "version": 5
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552515172172,
        "id": "6ca0fe1e-df60-4bfa-97fc-52ed3fe3d596",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552515180000,
        "parent_id": "540c344e-1358-419f-b62f-f4cc35e604b8",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Shell"
            ]
          ],
          "title": [
            [
              "$ SET /?\nDisplays, sets, or removes cmd.exe environment variables.\n\nSET [variable=[string]]\n\n  variable  Specifies the environment-variable name.\n  string    Specifies a series of characters to assign to the variable.\n\nType SET without parameters to display the current environment variables.\n\nIf Command Extensions are enabled SET changes as follows:\n\nSET command invoked with just a variable name, no equal sign or value\nwill display the value of all variables whose prefix matches the name\ngiven to the SET command.  For example:\n\n    SET P\n\nwould display all variables that begin with the letter 'P'\n\nSET command will set the ERRORLEVEL to 1 if the variable name is not\nfound in the current environment.\n\nSET command will not allow an equal sign to be part of the name of\na variable.\n\nTwo new switches have been added to the SET command:\n\n    SET /A expression\n    SET /P variable=[promptString]\n\nThe /A switch specifies that the string to the right of the equal sign\nis a numerical expression that is evaluated.  The expression evaluator\nis pretty simple and supports the following operations, in decreasing\norder of precedence:\n\n    ()                  - grouping\n    ! ~ -               - unary operators\n    * / %               - arithmetic operators\n    + -                 - arithmetic operators\n    \u003c\u003c \u003e\u003e               - logical shift\n    \u0026                   - bitwise and\n    ^                   - bitwise exclusive or\n    |                   - bitwise or\n    = *= /= %= += -=    - assignment\n      \u0026= ^= |= \u003c\u003c= \u003e\u003e=\n    ,                   - expression separator\n\nIf you use any of the logical or modulus operators, you will need to\nenclose the expression string in quotes.  Any non-numeric strings in the\nexpression are treated as environment variable names whose values are\nconverted to numbers before using them.  If an environment variable name\nis specified but is not defined in the current environment, then a value\nof zero is used.  This allows you to do arithmetic with environment\nvariable values without having to type all those % signs to get their\nvalues.  If SET /A is executed from the command line outside of a\ncommand script, then it displays the final value of the expression.  The\nassignment operator requires an environment variable name to the left of\nthe assignment operator.  Numeric values are decimal numbers, unless\nprefixed by 0x for hexadecimal numbers, and 0 for octal numbers.\nSo 0x12 is the same as 18 is the same as 022. Please note that the octal\nnotation can be confusing: 08 and 09 are not valid numbers because 8 and\n9 are not valid octal digits.\n\nThe /P switch allows you to set the value of a variable to a line of input\nentered by the user.  Displays the specified promptString before reading\nthe line of input.  The promptString can be empty.\n\nEnvironment variable substitution has been enhanced as follows:\n\n    %PATH:str1=str2%\n\nwould expand the PATH environment variable, substituting each occurrence\nof \"str1\" in the expanded result with \"str2\".  \"str2\" can be the empty\nstring to effectively delete all occurrences of \"str1\" from the expanded\noutput.  \"str1\" can begin with an asterisk, in which case it will match\neverything from the beginning of the expanded output to the first\noccurrence of the remaining portion of str1.\n\nMay also specify substrings for an expansion.\n\n    %PATH:~10,5%\n\nwould expand the PATH environment variable, and then use only the 5\ncharacters that begin at the 11th (offset 10) character of the expanded\nresult.  If the length is not specified, then it defaults to the\nremainder of the variable value.  If either number (offset or length) is\nnegative, then the number used is the length of the environment variable\nvalue added to the offset or length specified.\n\n    %PATH:~-10%\n\nwould extract the last 10 characters of the PATH variable.\n\n    %PATH:~0,-2%\n\nwould extract all but the last 2 characters of the PATH variable.\n\nFinally, support for delayed environment variable expansion has been\nadded.  This support is always disabled by default, but may be\nenabled/disabled via the /V command line switch to CMD.EXE.  See CMD /?\n\nDelayed environment variable expansion is useful for getting around\nthe limitations of the current expansion which happens when a line\nof text is read, not when it is executed.  The following example\ndemonstrates the problem with immediate variable expansion:\n\n    set VAR=before\n    if \"%VAR%\" == \"before\" (\n        set VAR=after\n        if \"%VAR%\" == \"after\" @echo If you see this, it worked\n    )\n\nwould never display the message, since the %VAR% in BOTH IF statements\nis substituted when the first IF statement is read, since it logically\nincludes the body of the IF, which is a compound statement.  So the\nIF inside the compound statement is really comparing \"before\" with\n\"after\" which will never be equal.  Similarly, the following example\nwill not work as expected:\n\n    set LIST=\n    for %i in (*) do set LIST=%LIST% %i\n    echo %LIST%\n\nin that it will NOT build up a list of files in the current directory,\nbut instead will just set the LIST variable to the last file found.\nAgain, this is because the %LIST% is expanded just once when the\nFOR statement is read, and at that time the LIST variable is empty.\nSo the actual FOR loop we are executing is:\n\n    for %i in (*) do set LIST= %i\n\nwhich just keeps setting LIST to the last file found.\n\nDelayed environment variable expansion allows you to use a different\ncharacter (the exclamation mark) to expand environment variables at\nexecution time.  If delayed variable expansion is enabled, the above\nexamples could be written as follows to work as intended:\n\n    set VAR=before\n    if \"%VAR%\" == \"before\" (\n        set VAR=after\n        if \"!VAR!\" == \"after\" @echo If you see this, it worked\n    )\n\n    set LIST=\n    for %i in (*) do set LIST=!LIST! %i\n    echo %LIST%\n\nIf Command Extensions are enabled, then there are several dynamic\nenvironment variables that can be expanded but which don't show up in\nthe list of variables displayed by SET.  These variable values are\ncomputed dynamically each time the value of the variable is expanded.\nIf the user explicitly defines a variable with one of these names, then\nthat definition will override the dynamic one described below:\n\n%CD% - expands to the current directory string.\n\n%DATE% - expands to current date using same format as DATE command.\n\n%TIME% - expands to current time using same format as TIME command.\n\n%RANDOM% - expands to a random decimal number between 0 and 32767.\n\n%ERRORLEVEL% - expands to the current ERRORLEVEL value\n\n%CMDEXTVERSION% - expands to the current Command Processor Extensions\n    version number.\n\n%CMDCMDLINE% - expands to the original command line that invoked the\n    Command Processor.\n\n%HIGHESTNUMANODENUMBER% - expands to the highest NUMA node number\n    on this machine."
            ]
          ]
        },
        "type": "code",
        "version": 22,
        "code": "$ SET /?\nDisplays, sets, or removes cmd.exe environment variables.\n\nSET [variable=[string]]\n\n  variable  Specifies the environment-variable name.\n  string    Specifies a series of characters to assign to the variable.\n\nType SET without parameters to display the current environment variables.\n\nIf Command Extensions are enabled SET changes as follows:\n\nSET command invoked with just a variable name, no equal sign or value\nwill display the value of all variables whose prefix matches the name\ngiven to the SET command.  For example:\n\n    SET P\n\nwould display all variables that begin with the letter 'P'\n\nSET command will set the ERRORLEVEL to 1 if the variable name is not\nfound in the current environment.\n\nSET command will not allow an equal sign to be part of the name of\na variable.\n\nTwo new switches have been added to the SET command:\n\n    SET /A expression\n    SET /P variable=[promptString]\n\nThe /A switch specifies that the string to the right of the equal sign\nis a numerical expression that is evaluated.  The expression evaluator\nis pretty simple and supports the following operations, in decreasing\norder of precedence:\n\n    ()                  - grouping\n    ! ~ -               - unary operators\n    * / %               - arithmetic operators\n    + -                 - arithmetic operators\n    \u003c\u003c \u003e\u003e               - logical shift\n    \u0026                   - bitwise and\n    ^                   - bitwise exclusive or\n    |                   - bitwise or\n    = *= /= %= += -=    - assignment\n      \u0026= ^= |= \u003c\u003c= \u003e\u003e=\n    ,                   - expression separator\n\nIf you use any of the logical or modulus operators, you will need to\nenclose the expression string in quotes.  Any non-numeric strings in the\nexpression are treated as environment variable names whose values are\nconverted to numbers before using them.  If an environment variable name\nis specified but is not defined in the current environment, then a value\nof zero is used.  This allows you to do arithmetic with environment\nvariable values without having to type all those % signs to get their\nvalues.  If SET /A is executed from the command line outside of a\ncommand script, then it displays the final value of the expression.  The\nassignment operator requires an environment variable name to the left of\nthe assignment operator.  Numeric values are decimal numbers, unless\nprefixed by 0x for hexadecimal numbers, and 0 for octal numbers.\nSo 0x12 is the same as 18 is the same as 022. Please note that the octal\nnotation can be confusing: 08 and 09 are not valid numbers because 8 and\n9 are not valid octal digits.\n\nThe /P switch allows you to set the value of a variable to a line of input\nentered by the user.  Displays the specified promptString before reading\nthe line of input.  The promptString can be empty.\n\nEnvironment variable substitution has been enhanced as follows:\n\n    %PATH:str1=str2%\n\nwould expand the PATH environment variable, substituting each occurrence\nof \"str1\" in the expanded result with \"str2\".  \"str2\" can be the empty\nstring to effectively delete all occurrences of \"str1\" from the expanded\noutput.  \"str1\" can begin with an asterisk, in which case it will match\neverything from the beginning of the expanded output to the first\noccurrence of the remaining portion of str1.\n\nMay also specify substrings for an expansion.\n\n    %PATH:~10,5%\n\nwould expand the PATH environment variable, and then use only the 5\ncharacters that begin at the 11th (offset 10) character of the expanded\nresult.  If the length is not specified, then it defaults to the\nremainder of the variable value.  If either number (offset or length) is\nnegative, then the number used is the length of the environment variable\nvalue added to the offset or length specified.\n\n    %PATH:~-10%\n\nwould extract the last 10 characters of the PATH variable.\n\n    %PATH:~0,-2%\n\nwould extract all but the last 2 characters of the PATH variable.\n\nFinally, support for delayed environment variable expansion has been\nadded.  This support is always disabled by default, but may be\nenabled/disabled via the /V command line switch to CMD.EXE.  See CMD /?\n\nDelayed environment variable expansion is useful for getting around\nthe limitations of the current expansion which happens when a line\nof text is read, not when it is executed.  The following example\ndemonstrates the problem with immediate variable expansion:\n\n    set VAR=before\n    if \"%VAR%\" == \"before\" (\n        set VAR=after\n        if \"%VAR%\" == \"after\" @echo If you see this, it worked\n    )\n\nwould never display the message, since the %VAR% in BOTH IF statements\nis substituted when the first IF statement is read, since it logically\nincludes the body of the IF, which is a compound statement.  So the\nIF inside the compound statement is really comparing \"before\" with\n\"after\" which will never be equal.  Similarly, the following example\nwill not work as expected:\n\n    set LIST=\n    for %i in (*) do set LIST=%LIST% %i\n    echo %LIST%\n\nin that it will NOT build up a list of files in the current directory,\nbut instead will just set the LIST variable to the last file found.\nAgain, this is because the %LIST% is expanded just once when the\nFOR statement is read, and at that time the LIST variable is empty.\nSo the actual FOR loop we are executing is:\n\n    for %i in (*) do set LIST= %i\n\nwhich just keeps setting LIST to the last file found.\n\nDelayed environment variable expansion allows you to use a different\ncharacter (the exclamation mark) to expand environment variables at\nexecution time.  If delayed variable expansion is enabled, the above\nexamples could be written as follows to work as intended:\n\n    set VAR=before\n    if \"%VAR%\" == \"before\" (\n        set VAR=after\n        if \"!VAR!\" == \"after\" @echo If you see this, it worked\n    )\n\n    set LIST=\n    for %i in (*) do set LIST=!LIST! %i\n    echo %LIST%\n\nIf Command Extensions are enabled, then there are several dynamic\nenvironment variables that can be expanded but which don't show up in\nthe list of variables displayed by SET.  These variable values are\ncomputed dynamically each time the value of the variable is expanded.\nIf the user explicitly defines a variable with one of these names, then\nthat definition will override the dynamic one described below:\n\n%CD% - expands to the current directory string.\n\n%DATE% - expands to current date using same format as DATE command.\n\n%TIME% - expands to current time using same format as TIME command.\n\n%RANDOM% - expands to a random decimal number between 0 and 32767.\n\n%ERRORLEVEL% - expands to the current ERRORLEVEL value\n\n%CMDEXTVERSION% - expands to the current Command Processor Extensions\n    version number.\n\n%CMDCMDLINE% - expands to the original command line that invoked the\n    Command Processor.\n\n%HIGHESTNUMANODENUMBER% - expands to the highest NUMA node number\n    on this machine.",
        "code_language": "Shell"
      }
    ],
    "title": "SET",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 20
    }
  ],
  "Tables": null
}