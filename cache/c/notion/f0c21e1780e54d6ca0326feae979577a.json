{
  "ID": "f0c21e17-80e5-4d6c-a032-6feae979577a",
  "Root": {
    "alive": true,
    "content": [
      "f4a81331-4c8e-428e-b765-ac5f72047ecf",
      "f783816c-a47a-4975-8aab-d04c505757ba",
      "27ad9c8b-f37f-4da6-83e1-94fdffed8683",
      "13984687-22fe-4404-9c74-eeff9196a8e4",
      "9fda3f4d-3a8d-47bd-8bde-c3b3aa388e25",
      "ba79ef71-e5b4-45ee-9b8f-a9eb0d3d6ef6",
      "3312fa34-68d4-4a1a-816d-b63696d965ce",
      "060ab578-1493-40b2-8bfe-c3e5342f32f3",
      "0e08c05f-bf9d-4328-a420-1aca0b289612",
      "fce640a9-b910-4cc6-8ac1-a0070b77f2bc",
      "10e5efad-eed1-4174-bfd3-a7b022a20ed5",
      "c26056d8-9f45-4163-8d46-87cb89fa2f00",
      "d06a088d-122b-4cfa-978a-6b5fd22eef36",
      "44cbaa3c-337e-4401-adbd-b75c20656b13",
      "7f2d225a-0b63-41e2-8dbb-a583c77ddf36",
      "b60cca7a-00f5-404c-86d3-73f9a9993559",
      "d37420f4-8853-437f-81f1-8ec4f7badd1b",
      "517eaab7-622a-4cac-919c-d18e5009a480",
      "e8396e24-666c-4665-a6ab-cd917f8aaca5",
      "fce6a48b-c35d-4666-8a79-e9391e5131f4",
      "160b9c1d-de86-4ecd-9f6e-d892b7072374",
      "73c4fcdc-f238-4137-86e9-6bc7b8a02b98",
      "eaa4ed8a-17f3-4e5b-92e1-9755932df765",
      "b3ce41f7-e236-4280-89cb-dde498fb6be3",
      "74f53ca0-34b4-4604-a39f-60660d200e53"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551935641170,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "f0c21e17-80e5-4d6c-a032-6feae979577a",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551935641170,
    "parent_id": "218cbf42-b3ba-4b2a-bdab-e522009865b7",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Arithmetic Operators"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935641164,
        "id": "f4a81331-4c8e-428e-b765-ac5f72047ecf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935641164,
        "parent_id": "f0c21e17-80e5-4d6c-a032-6feae979577a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Basic Arithmetic"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Basic Arithmetic"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935641166,
        "id": "f783816c-a47a-4975-8aab-d04c505757ba",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935641166,
        "parent_id": "f0c21e17-80e5-4d6c-a032-6feae979577a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Return a value that is the result of applying the left hand operand to the right hand operand, using the associated mathematical operation. Normal mathematical rules of commutation apply (i.e. addition and multiplication are commutative, subtraction, division and modulus are not)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Return a value that is the result of applying the left hand operand to the right hand operand, using the associated mathematical operation. Normal mathematical rules of commutation apply (i.e. addition and multiplication are commutative, subtraction, division and modulus are not)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935641166,
        "id": "27ad9c8b-f37f-4da6-83e1-94fdffed8683",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935641166,
        "parent_id": "f0c21e17-80e5-4d6c-a032-6feae979577a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Addition Operator"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Addition Operator"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935641167,
        "id": "13984687-22fe-4404-9c74-eeff9196a8e4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935641167,
        "parent_id": "f0c21e17-80e5-4d6c-a032-6feae979577a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The addition operator ("
            ],
            [
              "\\+",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") is used to add two operands together. Example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The addition operator ("
          },
          {
            "Text": "\\+",
            "AttrFlags": 2
          },
          {
            "Text": ") is used to add two operands together. Example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935641167,
        "id": "9fda3f4d-3a8d-47bd-8bde-c3b3aa388e25",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935641167,
        "parent_id": "f0c21e17-80e5-4d6c-a032-6feae979577a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cstdio.h\u003e\n\nint main(void)\n{\n    int a = 5;\n    int b = 7;\n\n    int c = a + b; /* c now holds the value 12 */\n\n    printf(\"%d + %d = %d\",a,b,c); /* will output \"5 + 7 = 12\" */\n\n    return 0;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cstdio.h\u003e\n\nint main(void)\n{\n    int a = 5;\n    int b = 7;\n\n    int c = a + b; /* c now holds the value 12 */\n\n    printf(\"%d + %d = %d\",a,b,c); /* will output \"5 + 7 = 12\" */\n\n    return 0;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935641168,
        "id": "ba79ef71-e5b4-45ee-9b8f-a9eb0d3d6ef6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935641168,
        "parent_id": "f0c21e17-80e5-4d6c-a032-6feae979577a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Subtraction Operator"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Subtraction Operator"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935641168,
        "id": "3312fa34-68d4-4a1a-816d-b63696d965ce",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935641168,
        "parent_id": "f0c21e17-80e5-4d6c-a032-6feae979577a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The subtraction operator ("
            ],
            [
              "\\-",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") is used to subtract the second operand from the first. Example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The subtraction operator ("
          },
          {
            "Text": "\\-",
            "AttrFlags": 2
          },
          {
            "Text": ") is used to subtract the second operand from the first. Example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935641168,
        "id": "060ab578-1493-40b2-8bfe-c3e5342f32f3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935641168,
        "parent_id": "f0c21e17-80e5-4d6c-a032-6feae979577a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cstdio.h\u003e\n\nint main(void)\n{\n    int a = 10;\n    int b = 7;\n\n    int c = a - b; /* c now holds the value 3 */\n\n    printf(\"%d - %d = %d\",a,b,c); /* will output \"10 - 7 = 3\" */\n\n    return 0;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cstdio.h\u003e\n\nint main(void)\n{\n    int a = 10;\n    int b = 7;\n\n    int c = a - b; /* c now holds the value 3 */\n\n    printf(\"%d - %d = %d\",a,b,c); /* will output \"10 - 7 = 3\" */\n\n    return 0;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935641168,
        "id": "0e08c05f-bf9d-4328-a420-1aca0b289612",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935641168,
        "parent_id": "f0c21e17-80e5-4d6c-a032-6feae979577a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Multiplication Operator"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Multiplication Operator"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935641168,
        "id": "fce640a9-b910-4cc6-8ac1-a0070b77f2bc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935641168,
        "parent_id": "f0c21e17-80e5-4d6c-a032-6feae979577a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The multiplication operator ("
            ],
            [
              "\\*",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") is used to multiply both operands. Example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The multiplication operator ("
          },
          {
            "Text": "\\*",
            "AttrFlags": 2
          },
          {
            "Text": ") is used to multiply both operands. Example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935641168,
        "id": "10e5efad-eed1-4174-bfd3-a7b022a20ed5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935641168,
        "parent_id": "f0c21e17-80e5-4d6c-a032-6feae979577a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cstdio.h\u003e\n\nint main(void)\n{    \n    int a = 5;\n    int b = 7;\n\n    int c = a * b; /* c now holds the value 35 */\n\n    printf(\"%d * %d = %d\",a,b,c); /* will output \"5 * 7 = 35\" */\n\n    return 0;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cstdio.h\u003e\n\nint main(void)\n{    \n    int a = 5;\n    int b = 7;\n\n    int c = a * b; /* c now holds the value 35 */\n\n    printf(\"%d * %d = %d\",a,b,c); /* will output \"5 * 7 = 35\" */\n\n    return 0;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935641168,
        "id": "c26056d8-9f45-4163-8d46-87cb89fa2f00",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935641168,
        "parent_id": "f0c21e17-80e5-4d6c-a032-6feae979577a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Not to be confused with the ",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              "\\*",
              [
                [
                  "i"
                ],
                [
                  "c"
                ]
              ]
            ],
            [
              " dereference operator.",
              [
                [
                  "i"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Not to be confused with the ",
            "AttrFlags": 4
          },
          {
            "Text": "\\*",
            "AttrFlags": 6
          },
          {
            "Text": " dereference operator.",
            "AttrFlags": 4
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935641168,
        "id": "d06a088d-122b-4cfa-978a-6b5fd22eef36",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935641168,
        "parent_id": "f0c21e17-80e5-4d6c-a032-6feae979577a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Division Operator"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Division Operator"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935641169,
        "id": "44cbaa3c-337e-4401-adbd-b75c20656b13",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935641169,
        "parent_id": "f0c21e17-80e5-4d6c-a032-6feae979577a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The division operator ("
            ],
            [
              "/",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") divides the first operand by the second. If both operands of the division are integers, it will return an integer value and discard the remainder (use the modulo operator "
            ],
            [
              "%",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " for calculating and acquiring the remainder)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The division operator ("
          },
          {
            "Text": "/",
            "AttrFlags": 2
          },
          {
            "Text": ") divides the first operand by the second. If both operands of the division are integers, it will return an integer value and discard the remainder (use the modulo operator "
          },
          {
            "Text": "%",
            "AttrFlags": 2
          },
          {
            "Text": " for calculating and acquiring the remainder)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935641169,
        "id": "7f2d225a-0b63-41e2-8dbb-a583c77ddf36",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935641169,
        "parent_id": "f0c21e17-80e5-4d6c-a032-6feae979577a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If one of the operands is a floating point value, the result is an approximation of the fraction."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If one of the operands is a floating point value, the result is an approximation of the fraction."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935641169,
        "id": "b60cca7a-00f5-404c-86d3-73f9a9993559",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935641169,
        "parent_id": "f0c21e17-80e5-4d6c-a032-6feae979577a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935641169,
        "id": "d37420f4-8853-437f-81f1-8ec4f7badd1b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935641169,
        "parent_id": "f0c21e17-80e5-4d6c-a032-6feae979577a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cstdio.h\u003e\n\nint main (void)\n{\n    int a = 19 / 2 ; /* a holds value 9   */\n    int b = 18 / 2 ; /* b holds value 9   */\n    int c = 255 / 2; /* c holds value 127 */\n    int d = 44 / 4 ; /* d holds value 11  */\n    double e = 19 / 2.0 ; /* e holds value 9.5   */\n    double f = 18.0 / 2 ; /* f holds value 9.0   */\n    double g = 255 / 2.0; /* g holds value 127.5 */\n    double h = 45.0 / 4 ; /* h holds value 11.25 */\n\n    printf(\"19 / 2 = %d\\n\", a);    /* Will output \"19 / 2 = 9\"    */\n    printf(\"18 / 2 = %d\\n\", b);    /* Will output \"18 / 2 = 9\"    */\n    printf(\"255 / 2 = %d\\n\", c);   /* Will output \"255 / 2 = 127\" */\n    printf(\"44 / 4 = %d\\n\", d);    /* Will output \"44 / 4 = 11\"   */\n    printf(\"19 / 2.0 = %g\\n\", e);  /* Will output \"19 / 2.0 = 9.5\"    */\n    printf(\"18.0 / 2 = %g\\n\", f);  /* Will output \"18.0 / 2 = 9\"      */\n    printf(\"255 / 2.0 = %g\\n\", g); /* Will output \"255 / 2.0 = 127.5\" */\n    printf(\"45.0 / 4 = %g\\n\", h);  /* Will output \"45.0 / 4 = 11.25\"  */\n\n    return 0;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cstdio.h\u003e\n\nint main (void)\n{\n    int a = 19 / 2 ; /* a holds value 9   */\n    int b = 18 / 2 ; /* b holds value 9   */\n    int c = 255 / 2; /* c holds value 127 */\n    int d = 44 / 4 ; /* d holds value 11  */\n    double e = 19 / 2.0 ; /* e holds value 9.5   */\n    double f = 18.0 / 2 ; /* f holds value 9.0   */\n    double g = 255 / 2.0; /* g holds value 127.5 */\n    double h = 45.0 / 4 ; /* h holds value 11.25 */\n\n    printf(\"19 / 2 = %d\\n\", a);    /* Will output \"19 / 2 = 9\"    */\n    printf(\"18 / 2 = %d\\n\", b);    /* Will output \"18 / 2 = 9\"    */\n    printf(\"255 / 2 = %d\\n\", c);   /* Will output \"255 / 2 = 127\" */\n    printf(\"44 / 4 = %d\\n\", d);    /* Will output \"44 / 4 = 11\"   */\n    printf(\"19 / 2.0 = %g\\n\", e);  /* Will output \"19 / 2.0 = 9.5\"    */\n    printf(\"18.0 / 2 = %g\\n\", f);  /* Will output \"18.0 / 2 = 9\"      */\n    printf(\"255 / 2.0 = %g\\n\", g); /* Will output \"255 / 2.0 = 127.5\" */\n    printf(\"45.0 / 4 = %g\\n\", h);  /* Will output \"45.0 / 4 = 11.25\"  */\n\n    return 0;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935641169,
        "id": "517eaab7-622a-4cac-919c-d18e5009a480",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935641169,
        "parent_id": "f0c21e17-80e5-4d6c-a032-6feae979577a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Modulo Operator"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Modulo Operator"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935641169,
        "id": "e8396e24-666c-4665-a6ab-cd917f8aaca5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935641169,
        "parent_id": "f0c21e17-80e5-4d6c-a032-6feae979577a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The modulo operator ("
            ],
            [
              "%",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") receives integer operands only, and is used to calculate the remainder after the first operand is divided by the second. Example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The modulo operator ("
          },
          {
            "Text": "%",
            "AttrFlags": 2
          },
          {
            "Text": ") receives integer operands only, and is used to calculate the remainder after the first operand is divided by the second. Example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935641169,
        "id": "fce6a48b-c35d-4666-8a79-e9391e5131f4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935641169,
        "parent_id": "f0c21e17-80e5-4d6c-a032-6feae979577a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cstdio.h\u003e\n\nint main (void) {\n    int a = 25 % 2;    /* a holds value 1  */\n    int b = 24 % 2;    /* b holds value 0  */\n    int c = 155 % 5;   /* c holds value 0  */\n    int d = 49 % 25;   /* d holds value 24 */\n\n    printf(\"25 % 2 = %d\\n\", a);     /* Will output \"25 % 2 = 1\"    */\n    printf(\"24 % 2 = %d\\n\", b);     /* Will output \"24 % 2 = 0\"    */\n    printf(\"155 % 5 = %d\\n\", c);    /* Will output \"155 % 5 = 0\"   */\n    printf(\"49 % 25 = %d\\n\", d);    /* Will output \"49 % 25 = 24\"  */\n\n    return 0;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cstdio.h\u003e\n\nint main (void) {\n    int a = 25 % 2;    /* a holds value 1  */\n    int b = 24 % 2;    /* b holds value 0  */\n    int c = 155 % 5;   /* c holds value 0  */\n    int d = 49 % 25;   /* d holds value 24 */\n\n    printf(\"25 % 2 = %d\\n\", a);     /* Will output \"25 % 2 = 1\"    */\n    printf(\"24 % 2 = %d\\n\", b);     /* Will output \"24 % 2 = 0\"    */\n    printf(\"155 % 5 = %d\\n\", c);    /* Will output \"155 % 5 = 0\"   */\n    printf(\"49 % 25 = %d\\n\", d);    /* Will output \"49 % 25 = 24\"  */\n\n    return 0;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935641169,
        "id": "160b9c1d-de86-4ecd-9f6e-d892b7072374",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935641169,
        "parent_id": "f0c21e17-80e5-4d6c-a032-6feae979577a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Increment / Decrement Operators"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Increment / Decrement Operators"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935641170,
        "id": "73c4fcdc-f238-4137-86e9-6bc7b8a02b98",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935641170,
        "parent_id": "f0c21e17-80e5-4d6c-a032-6feae979577a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The increment ("
            ],
            [
              "a++",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") and decrement ("
            ],
            [
              "a--",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") operators are different in that they change the value of the variable you apply them to without an assignment operator. You can use increment and decrement operators either before or after the variable. The placement of the operator changes the timing of the incrementation/decrementation of the value to before or after assigning it to the variable. Example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The increment ("
          },
          {
            "Text": "a++",
            "AttrFlags": 2
          },
          {
            "Text": ") and decrement ("
          },
          {
            "Text": "a--",
            "AttrFlags": 2
          },
          {
            "Text": ") operators are different in that they change the value of the variable you apply them to without an assignment operator. You can use increment and decrement operators either before or after the variable. The placement of the operator changes the timing of the incrementation/decrementation of the value to before or after assigning it to the variable. Example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935641170,
        "id": "eaa4ed8a-17f3-4e5b-92e1-9755932df765",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935641170,
        "parent_id": "f0c21e17-80e5-4d6c-a032-6feae979577a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cstdio.h\u003e\n\nint main(void)\n{\n    int a = 1;\n    int b = 4;\n    int c = 1;\n    int d = 4;\n\n    a++;\n    printf(\"a = %d\\n\",a);    /* Will output \"a = 2\" */\n    b--;\n    printf(\"b = %d\\n\",b);    /* Will output \"b = 3\" */\n\n    if (++c \u003e 1) { /* c is incremented by 1 before being compared in the condition */\n        printf(\"This will print\\n\");    /* This is printed */\n    } else {\n        printf(\"This will never print\\n\");    /* This is not printed */\n    }\n\n    if (d-- \u003c 4) {  /* d is decremented after being compared */\n        printf(\"This will never print\\n\");    /* This is not printed */\n    } else {\n        printf(\"This will print\\n\");    /* This is printed */\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cstdio.h\u003e\n\nint main(void)\n{\n    int a = 1;\n    int b = 4;\n    int c = 1;\n    int d = 4;\n\n    a++;\n    printf(\"a = %d\\n\",a);    /* Will output \"a = 2\" */\n    b--;\n    printf(\"b = %d\\n\",b);    /* Will output \"b = 3\" */\n\n    if (++c \u003e 1) { /* c is incremented by 1 before being compared in the condition */\n        printf(\"This will print\\n\");    /* This is printed */\n    } else {\n        printf(\"This will never print\\n\");    /* This is not printed */\n    }\n\n    if (d-- \u003c 4) {  /* d is decremented after being compared */\n        printf(\"This will never print\\n\");    /* This is not printed */\n    } else {\n        printf(\"This will print\\n\");    /* This is printed */\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935641170,
        "id": "b3ce41f7-e236-4280-89cb-dde498fb6be3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935641170,
        "parent_id": "f0c21e17-80e5-4d6c-a032-6feae979577a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As the example for "
            ],
            [
              "c",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "d",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " shows, both operators have two forms, as prefix notation and postfix notation. Both have the same effect in incrementing ("
            ],
            [
              "++",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") or decrementing ("
            ],
            [
              "--",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") the variable, but differ by the value they return: prefix operations do the operation first and then return the value, whereas postfix operations first determine the value that is to be returned, and then do the operation."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "As the example for "
          },
          {
            "Text": "c",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "d",
            "AttrFlags": 2
          },
          {
            "Text": " shows, both operators have two forms, as prefix notation and postfix notation. Both have the same effect in incrementing ("
          },
          {
            "Text": "++",
            "AttrFlags": 2
          },
          {
            "Text": ") or decrementing ("
          },
          {
            "Text": "--",
            "AttrFlags": 2
          },
          {
            "Text": ") the variable, but differ by the value they return: prefix operations do the operation first and then return the value, whereas postfix operations first determine the value that is to be returned, and then do the operation."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935641170,
        "id": "74f53ca0-34b4-4604-a39f-60660d200e53",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935641170,
        "parent_id": "f0c21e17-80e5-4d6c-a032-6feae979577a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Because of this potentially counter-intuitive behaviour, the use of increment/decrement operators inside expressions is controversial."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Because of this potentially counter-intuitive behaviour, the use of increment/decrement operators inside expressions is controversial."
          }
        ]
      }
    ],
    "title": "Arithmetic Operators",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}