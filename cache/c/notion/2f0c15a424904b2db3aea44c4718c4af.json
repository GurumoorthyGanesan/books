{
  "ID": "2f0c15a4-2490-4b2d-b3ae-a44c4718c4af",
  "Root": {
    "alive": true,
    "content": [
      "1b3a4b3a-8b31-4aec-8d54-bc3fc93203a7",
      "72c7da5f-eadf-4721-841c-bfe1cd07bbc6",
      "a58d182b-63d5-4c84-b881-b4b8da39f671",
      "431fa37b-d2b9-4303-87ad-e617ff60af59",
      "416cdaa4-b69e-4077-af14-cd731e0dae7c",
      "68048f7a-50a5-4c93-9a11-75d9b7a3e801",
      "0cdfcabd-efdb-4103-a018-6e3b40cb697c",
      "53f910b1-c2da-41a0-b45a-26c05105a4bc",
      "57c5ab35-f36f-410a-9a52-d0975827a075",
      "8b5b3e19-647d-4225-b68e-e5c12db1f828",
      "63303f88-2b7a-4e19-939a-e1a64b5366a3",
      "401552c8-0fff-46e2-8638-981d38e7938d",
      "fa779cca-d81e-4098-a649-f481f60413a5",
      "e60b6de7-5837-4b7b-b1cf-e36a8da8ef0a",
      "3d678857-6145-4ba6-9b1a-56a67be8afde",
      "3f4fd42d-9a77-41b0-bf20-a06888d6abdf",
      "d35a07e0-0e40-49b0-a1a0-03f8ef350957",
      "c93ec3dc-1903-4c54-928e-cb30912ca015",
      "7644ba88-1791-4a20-aea4-736f21d360c6",
      "dfbb9b4d-7e02-42c5-9501-bbfacb09a591",
      "e8798cfc-61bb-439f-8182-dc258dbd3ab4",
      "da2dfb71-74da-49fc-a61e-e85581eab495",
      "a4a7cb1a-c6e2-423e-8a6c-7c1a464e1288",
      "3f61841e-70e1-4797-a530-3d0a28d8246c",
      "74aded9b-a1ce-4fe4-8394-74146454fced",
      "c37ee97c-efb3-4a32-a3c3-966c2be2f352",
      "b986d7e1-d27f-43e4-8a13-1697438f782e",
      "a652733f-4cee-4ce4-be18-99a7b38f9f37",
      "48ee608e-0fbc-4608-a071-c559b8690061",
      "6b98c625-3a5a-4a09-a41e-1f4ce2ccfcdd",
      "19f169ba-af64-4038-bafc-99d4bf8ad7a6"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551936325450,
    "id": "2f0c15a4-2490-4b2d-b3ae-a44c4718c4af",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551936325450,
    "parent_id": "f3ac34eb-110d-486b-9e30-6bd30082bba0",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "050 Copying strings"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936325442,
        "id": "1b3a4b3a-8b31-4aec-8d54-bc3fc93203a7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936325442,
        "parent_id": "2f0c15a4-2490-4b2d-b3ae-a44c4718c4af",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Pointer assignments do not copy strings"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Pointer assignments do not copy strings"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936325443,
        "id": "72c7da5f-eadf-4721-841c-bfe1cd07bbc6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936325443,
        "parent_id": "2f0c15a4-2490-4b2d-b3ae-a44c4718c4af",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You can use the "
            ],
            [
              "=",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " operator to copy integers, but you cannot use the "
            ],
            [
              "=",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " operator to copy strings in C. Strings in C are represented as arrays of characters with a terminating null-character, so using the "
            ],
            [
              "=",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " operator will only save the address (pointer) of a string."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You can use the "
          },
          {
            "Text": "=",
            "AttrFlags": 2
          },
          {
            "Text": " operator to copy integers, but you cannot use the "
          },
          {
            "Text": "=",
            "AttrFlags": 2
          },
          {
            "Text": " operator to copy strings in C. Strings in C are represented as arrays of characters with a terminating null-character, so using the "
          },
          {
            "Text": "=",
            "AttrFlags": 2
          },
          {
            "Text": " operator will only save the address (pointer) of a string."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936325443,
        "id": "a58d182b-63d5-4c84-b881-b4b8da39f671",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936325443,
        "parent_id": "2f0c15a4-2490-4b2d-b3ae-a44c4718c4af",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cstdio.h\u003e\n\nint main(void) {\n    int a = 10, b;\n    char c[] = \"abc\", *d;\n\n    b = a; /* Integer is copied */\n    a = 20; /* Modifying a leaves b unchanged - b is a 'deep copy' of a */\n    printf(\"%d %d\\n\", a, b); /* \"20 10\" will be printed */\n\n    d = c; \n    /* Only copies the address of the string - \n    there is still only one string stored in memory */\n    \n    c[1] = 'x';\n    /* Modifies the original string - d[1] = 'x' will do exactly the same thing */\n\n    printf(\"%s %s\\n\", c, d); /* \"axc axc\" will be printed */\n\n    return 0;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cstdio.h\u003e\n\nint main(void) {\n    int a = 10, b;\n    char c[] = \"abc\", *d;\n\n    b = a; /* Integer is copied */\n    a = 20; /* Modifying a leaves b unchanged - b is a 'deep copy' of a */\n    printf(\"%d %d\\n\", a, b); /* \"20 10\" will be printed */\n\n    d = c; \n    /* Only copies the address of the string - \n    there is still only one string stored in memory */\n    \n    c[1] = 'x';\n    /* Modifies the original string - d[1] = 'x' will do exactly the same thing */\n\n    printf(\"%s %s\\n\", c, d); /* \"axc axc\" will be printed */\n\n    return 0;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936325443,
        "id": "431fa37b-d2b9-4303-87ad-e617ff60af59",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936325443,
        "parent_id": "2f0c15a4-2490-4b2d-b3ae-a44c4718c4af",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The above example compiled because we used "
            ],
            [
              "char *d",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " rather than "
            ],
            [
              "char d[3]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Using the latter would cause a compiler error. You cannot assign to arrays in C."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The above example compiled because we used "
          },
          {
            "Text": "char *d",
            "AttrFlags": 2
          },
          {
            "Text": " rather than "
          },
          {
            "Text": "char d[3]",
            "AttrFlags": 2
          },
          {
            "Text": ". Using the latter would cause a compiler error. You cannot assign to arrays in C."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936325443,
        "id": "416cdaa4-b69e-4077-af14-cd731e0dae7c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936325443,
        "parent_id": "2f0c15a4-2490-4b2d-b3ae-a44c4718c4af",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cstdio.h\u003e\n\nint main(void) {\n    char a[] = \"abc\";\n    char b[8];\n\n    b = a; /* compile error */\n    printf(\"%s\\n\", b);\n\n    return 0;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cstdio.h\u003e\n\nint main(void) {\n    char a[] = \"abc\";\n    char b[8];\n\n    b = a; /* compile error */\n    printf(\"%s\\n\", b);\n\n    return 0;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936325443,
        "id": "68048f7a-50a5-4c93-9a11-75d9b7a3e801",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936325443,
        "parent_id": "2f0c15a4-2490-4b2d-b3ae-a44c4718c4af",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Copying strings using standard functions"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Copying strings using standard functions"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936325444,
        "id": "0cdfcabd-efdb-4103-a018-6e3b40cb697c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936325444,
        "parent_id": "2f0c15a4-2490-4b2d-b3ae-a44c4718c4af",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "strcpy()",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "sub_sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "strcpy()",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936325444,
        "id": "53f910b1-c2da-41a0-b45a-26c05105a4bc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936325444,
        "parent_id": "2f0c15a4-2490-4b2d-b3ae-a44c4718c4af",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To actually copy strings, "
            ],
            [
              "strcpy()",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://linux.die.net/man/3/strcpy"
                ]
              ]
            ],
            [
              " function is available in "
            ],
            [
              "string.h",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Enough space must be allocated for the destination before copying."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To actually copy strings, "
          },
          {
            "Text": "strcpy()",
            "AttrFlags": 2,
            "Link": "http://linux.die.net/man/3/strcpy"
          },
          {
            "Text": " function is available in "
          },
          {
            "Text": "string.h",
            "AttrFlags": 2
          },
          {
            "Text": ". Enough space must be allocated for the destination before copying."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936325444,
        "id": "57c5ab35-f36f-410a-9a52-d0975827a075",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936325444,
        "parent_id": "2f0c15a4-2490-4b2d-b3ae-a44c4718c4af",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cstdio.h\u003e\n#include \u003cstring.h\u003e\n\nint main(void) {\n    char a[] = \"abc\";\n    char b[8];\n\n    strcpy(b, a); /* think \"b special equals a\" */\n    printf(\"%s\\n\", b); /* \"abc\" will be printed */\n\n    return 0;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cstdio.h\u003e\n#include \u003cstring.h\u003e\n\nint main(void) {\n    char a[] = \"abc\";\n    char b[8];\n\n    strcpy(b, a); /* think \"b special equals a\" */\n    printf(\"%s\\n\", b); /* \"abc\" will be printed */\n\n    return 0;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936325444,
        "id": "8b5b3e19-647d-4225-b68e-e5c12db1f828",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936325444,
        "parent_id": "2f0c15a4-2490-4b2d-b3ae-a44c4718c4af",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "snprintf()",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "sub_sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "snprintf()",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936325445,
        "id": "63303f88-2b7a-4e19-939a-e1a64b5366a3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936325445,
        "parent_id": "2f0c15a4-2490-4b2d-b3ae-a44c4718c4af",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To avoid buffer overrun, "
            ],
            [
              "snprintf()",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://pubs.opengroup.org/onlinepubs/9699919799/functions/snprintf.html"
                ]
              ]
            ],
            [
              " may be used. It is not the best solution performance-wise since it has to parse the template string, but it is the only buffer limit-safe function for copying strings readily-available in standard library, that can be used without any extra steps."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To avoid buffer overrun, "
          },
          {
            "Text": "snprintf()",
            "AttrFlags": 2,
            "Link": "http://pubs.opengroup.org/onlinepubs/9699919799/functions/snprintf.html"
          },
          {
            "Text": " may be used. It is not the best solution performance-wise since it has to parse the template string, but it is the only buffer limit-safe function for copying strings readily-available in standard library, that can be used without any extra steps."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936325445,
        "id": "401552c8-0fff-46e2-8638-981d38e7938d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936325445,
        "parent_id": "2f0c15a4-2490-4b2d-b3ae-a44c4718c4af",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cstdio.h\u003e\n#include \u003cstring.h\u003e\n\nint main(void) {\n    char a[] = \"012345678901234567890\";\n    char b[8];\n\n#if 0\n    strcpy(b, a); /* causes buffer overrun (undefined behavior), so do not execute this here! */\n#endif\n\n    snprintf(b, sizeof(b), \"%s\", a); /* does not cause buffer overrun */\n    printf(\"%s\\n\", b); /* \"0123456\" will be printed */\n\n    return 0;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cstdio.h\u003e\n#include \u003cstring.h\u003e\n\nint main(void) {\n    char a[] = \"012345678901234567890\";\n    char b[8];\n\n#if 0\n    strcpy(b, a); /* causes buffer overrun (undefined behavior), so do not execute this here! */\n#endif\n\n    snprintf(b, sizeof(b), \"%s\", a); /* does not cause buffer overrun */\n    printf(\"%s\\n\", b); /* \"0123456\" will be printed */\n\n    return 0;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936325445,
        "id": "fa779cca-d81e-4098-a649-f481f60413a5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936325445,
        "parent_id": "2f0c15a4-2490-4b2d-b3ae-a44c4718c4af",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "strncat()",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "sub_sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "strncat()",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936325446,
        "id": "e60b6de7-5837-4b7b-b1cf-e36a8da8ef0a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936325446,
        "parent_id": "2f0c15a4-2490-4b2d-b3ae-a44c4718c4af",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A second option, with better performance, is to use "
            ],
            [
              "strncat()",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://pubs.opengroup.org/onlinepubs/9699919799/functions/strncat.html"
                ]
              ]
            ],
            [
              " (a buffer overflow checking version of "
            ],
            [
              "strcat()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") - it takes a third argument that tells it the maximum number of bytes to copy:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A second option, with better performance, is to use "
          },
          {
            "Text": "strncat()",
            "AttrFlags": 2,
            "Link": "http://pubs.opengroup.org/onlinepubs/9699919799/functions/strncat.html"
          },
          {
            "Text": " (a buffer overflow checking version of "
          },
          {
            "Text": "strcat()",
            "AttrFlags": 2
          },
          {
            "Text": ") - it takes a third argument that tells it the maximum number of bytes to copy:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936325446,
        "id": "3d678857-6145-4ba6-9b1a-56a67be8afde",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936325446,
        "parent_id": "2f0c15a4-2490-4b2d-b3ae-a44c4718c4af",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "char dest[32];\n\ndest[0] = '\\0';\nstrncat(dest, source, sizeof(dest) - 1);\n    /* copies up to the first (sizeof(dest) - 1) elements of source into dest,\n    then puts a \\0 on the end of dest */"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "char dest[32];\n\ndest[0] = '\\0';\nstrncat(dest, source, sizeof(dest) - 1);\n    /* copies up to the first (sizeof(dest) - 1) elements of source into dest,\n    then puts a \\0 on the end of dest */",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936325446,
        "id": "3f4fd42d-9a77-41b0-bf20-a06888d6abdf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936325446,
        "parent_id": "2f0c15a4-2490-4b2d-b3ae-a44c4718c4af",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note that this formulation use "
            ],
            [
              "sizeof(dest) - 1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "; this is crucial because "
            ],
            [
              "strncat()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " always adds a null byte (good), but doesn’t count that in the size of the string (a cause of confusion and buffer overwrites)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note that this formulation use "
          },
          {
            "Text": "sizeof(dest) - 1",
            "AttrFlags": 2
          },
          {
            "Text": "; this is crucial because "
          },
          {
            "Text": "strncat()",
            "AttrFlags": 2
          },
          {
            "Text": " always adds a null byte (good), but doesn’t count that in the size of the string (a cause of confusion and buffer overwrites)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936325446,
        "id": "d35a07e0-0e40-49b0-a1a0-03f8ef350957",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936325446,
        "parent_id": "2f0c15a4-2490-4b2d-b3ae-a44c4718c4af",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Also note that the alternative — concatenating after a non-empty string — is even more fraught. Consider:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Also note that the alternative — concatenating after a non-empty string — is even more fraught. Consider:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936325446,
        "id": "c93ec3dc-1903-4c54-928e-cb30912ca015",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936325446,
        "parent_id": "2f0c15a4-2490-4b2d-b3ae-a44c4718c4af",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "char dst[24] = \"Clownfish: \";\nchar src[] = \"Marvin and Nemo\";\nsize_t len = strlen(dst);\n\nstrncat(dst, src, sizeof(dst) - len - 1);\nprintf(\"%zu: [%s]\\n\", strlen(dst), dst);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "char dst[24] = \"Clownfish: \";\nchar src[] = \"Marvin and Nemo\";\nsize_t len = strlen(dst);\n\nstrncat(dst, src, sizeof(dst) - len - 1);\nprintf(\"%zu: [%s]\\n\", strlen(dst), dst);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936325447,
        "id": "7644ba88-1791-4a20-aea4-736f21d360c6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936325447,
        "parent_id": "2f0c15a4-2490-4b2d-b3ae-a44c4718c4af",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The output is:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The output is:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936325447,
        "id": "dfbb9b4d-7e02-42c5-9501-bbfacb09a591",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936325447,
        "parent_id": "2f0c15a4-2490-4b2d-b3ae-a44c4718c4af",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "23: [Clownfish: Marvin and N]"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "23: [Clownfish: Marvin and N]",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936325447,
        "id": "e8798cfc-61bb-439f-8182-dc258dbd3ab4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936325447,
        "parent_id": "2f0c15a4-2490-4b2d-b3ae-a44c4718c4af",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note, though, that the size specified as the length was "
            ],
            [
              "not",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " the size of the destination array, but the amount of space left in it, not counting the terminal null byte. This can cause big overwriting problems. It is also a bit wasteful; to specify the length argument correctly, you know the length of the data in the destination, so you could instead specify the address of the null byte at the end of the existing content, saving "
            ],
            [
              "strncat()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " from rescanning it:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note, though, that the size specified as the length was "
          },
          {
            "Text": "not",
            "AttrFlags": 4
          },
          {
            "Text": " the size of the destination array, but the amount of space left in it, not counting the terminal null byte. This can cause big overwriting problems. It is also a bit wasteful; to specify the length argument correctly, you know the length of the data in the destination, so you could instead specify the address of the null byte at the end of the existing content, saving "
          },
          {
            "Text": "strncat()",
            "AttrFlags": 2
          },
          {
            "Text": " from rescanning it:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936325447,
        "id": "da2dfb71-74da-49fc-a61e-e85581eab495",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936325447,
        "parent_id": "2f0c15a4-2490-4b2d-b3ae-a44c4718c4af",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "strcpy(dst, \"Clownfish: \");\nassert(len \u003c sizeof(dst) - 1);\nstrncat(dst + len, src, sizeof(dst) - len - 1);\nprintf(\"%zu: [%s]\\n\", strlen(dst), dst);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "strcpy(dst, \"Clownfish: \");\nassert(len \u003c sizeof(dst) - 1);\nstrncat(dst + len, src, sizeof(dst) - len - 1);\nprintf(\"%zu: [%s]\\n\", strlen(dst), dst);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936325447,
        "id": "a4a7cb1a-c6e2-423e-8a6c-7c1a464e1288",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936325447,
        "parent_id": "2f0c15a4-2490-4b2d-b3ae-a44c4718c4af",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This produces the same output as before, but "
            ],
            [
              "strncat()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " doesn’t have to scan over the existing content of "
            ],
            [
              "dst",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " before it starts copying."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This produces the same output as before, but "
          },
          {
            "Text": "strncat()",
            "AttrFlags": 2
          },
          {
            "Text": " doesn’t have to scan over the existing content of "
          },
          {
            "Text": "dst",
            "AttrFlags": 2
          },
          {
            "Text": " before it starts copying."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936325447,
        "id": "3f61841e-70e1-4797-a530-3d0a28d8246c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936325447,
        "parent_id": "2f0c15a4-2490-4b2d-b3ae-a44c4718c4af",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "strncpy()",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "sub_sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "strncpy()",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936325448,
        "id": "74aded9b-a1ce-4fe4-8394-74146454fced",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936325448,
        "parent_id": "2f0c15a4-2490-4b2d-b3ae-a44c4718c4af",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The last option is the "
            ],
            [
              "strncpy()",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://pubs.opengroup.org/onlinepubs/9699919799/functions/strncpy.html"
                ]
              ]
            ],
            [
              " function. Although you might think it should come first, it is a rather deceptive function that has two main gotchas:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The last option is the "
          },
          {
            "Text": "strncpy()",
            "AttrFlags": 2,
            "Link": "http://pubs.opengroup.org/onlinepubs/9699919799/functions/strncpy.html"
          },
          {
            "Text": " function. Although you might think it should come first, it is a rather deceptive function that has two main gotchas:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936325448,
        "id": "c37ee97c-efb3-4a32-a3c3-966c2be2f352",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936325448,
        "parent_id": "2f0c15a4-2490-4b2d-b3ae-a44c4718c4af",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If copying via "
            ],
            [
              "strncpy()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " hits the buffer limit, a terminating null-character won’t be written."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "If copying via "
          },
          {
            "Text": "strncpy()",
            "AttrFlags": 2
          },
          {
            "Text": " hits the buffer limit, a terminating null-character won’t be written."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936325449,
        "id": "b986d7e1-d27f-43e4-8a13-1697438f782e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936325449,
        "parent_id": "2f0c15a4-2490-4b2d-b3ae-a44c4718c4af",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "strncpy()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " always completely fills the destination, with null bytes if necessary."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "strncpy()",
            "AttrFlags": 2
          },
          {
            "Text": " always completely fills the destination, with null bytes if necessary."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936325449,
        "id": "a652733f-4cee-4ce4-be18-99a7b38f9f37",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936325449,
        "parent_id": "2f0c15a4-2490-4b2d-b3ae-a44c4718c4af",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "(Such quirky implementation is historical and "
            ],
            [
              "was initially intended for handling UNIX file names",
              [
                [
                  "a",
                  "https://blogs.msdn.microsoft.com/oldnewthing/20050107-00/?p=36773/"
                ]
              ]
            ],
            [
              ")"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "(Such quirky implementation is historical and "
          },
          {
            "Text": "was initially intended for handling UNIX file names",
            "Link": "https://blogs.msdn.microsoft.com/oldnewthing/20050107-00/?p=36773/"
          },
          {
            "Text": ")"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936325449,
        "id": "48ee608e-0fbc-4608-a071-c559b8690061",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936325449,
        "parent_id": "2f0c15a4-2490-4b2d-b3ae-a44c4718c4af",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The only correct way to use it is to manually ensure null-termination:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The only correct way to use it is to manually ensure null-termination:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936325450,
        "id": "6b98c625-3a5a-4a09-a41e-1f4ce2ccfcdd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936325450,
        "parent_id": "2f0c15a4-2490-4b2d-b3ae-a44c4718c4af",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "strncpy(b, a, sizeof(b)); /* the third parameter is destination buffer size */\nb[sizeof(b)/sizeof(*b) - 1] = '\\0'; /* terminate the string */\nprintf(\"%s\\n\", b); /* \"0123456\" will be printed */"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "strncpy(b, a, sizeof(b)); /* the third parameter is destination buffer size */\nb[sizeof(b)/sizeof(*b) - 1] = '\\0'; /* terminate the string */\nprintf(\"%s\\n\", b); /* \"0123456\" will be printed */",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936325450,
        "id": "19f169ba-af64-4038-bafc-99d4bf8ad7a6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936325450,
        "parent_id": "2f0c15a4-2490-4b2d-b3ae-a44c4718c4af",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Even then, if you have a big buffer it becomes very inefficient to use "
            ],
            [
              "strncpy()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " because of additional null padding."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Even then, if you have a big buffer it becomes very inefficient to use "
          },
          {
            "Text": "strncpy()",
            "AttrFlags": 2
          },
          {
            "Text": " because of additional null padding."
          }
        ]
      }
    ],
    "title": "050 Copying strings"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}