{
  "ID": "6d09aa27-02ad-4fb2-b1c1-7f86f0820b26",
  "Root": {
    "alive": true,
    "content": [
      "08adb44d-8445-4017-a584-4c05ab31fcdc",
      "eaaa0afd-743f-4b5a-b332-488ea2fd50a0",
      "fca0f239-62f6-4491-b257-41a57add66b5",
      "90b11871-b0e3-4b18-bcc2-5df390657bab",
      "affc9e52-c658-4bff-adb3-c8f8921ba2cf",
      "25559f00-c1d2-4730-b064-de6da0ba6cdd",
      "4ca0128a-5a71-4443-b0d2-880832e4400c"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551935835615,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "6d09aa27-02ad-4fb2-b1c1-7f86f0820b26",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551935835615,
    "parent_id": "b81cd45f-aa26-4f19-8238-7b90dd64a769",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Static Assertion"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935835613,
        "id": "08adb44d-8445-4017-a584-4c05ab31fcdc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935835613,
        "parent_id": "6d09aa27-02ad-4fb2-b1c1-7f86f0820b26",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Static assertions are used to check if a condition is true when the code is compiled. If it isn’t, the compiler is required to issue an error message and stop the compiling process."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Static assertions are used to check if a condition is true when the code is compiled. If it isn’t, the compiler is required to issue an error message and stop the compiling process."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935835614,
        "id": "eaaa0afd-743f-4b5a-b332-488ea2fd50a0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935835614,
        "parent_id": "6d09aa27-02ad-4fb2-b1c1-7f86f0820b26",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A static assertion is one that is checked at compile time, not run time. The condition must be a constant expression, and if false will result in a compiler error. The first argument, the condition that is checked, must be a constant expression, and the second a string literal."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A static assertion is one that is checked at compile time, not run time. The condition must be a constant expression, and if false will result in a compiler error. The first argument, the condition that is checked, must be a constant expression, and the second a string literal."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935835614,
        "id": "fca0f239-62f6-4491-b257-41a57add66b5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935835614,
        "parent_id": "6d09aa27-02ad-4fb2-b1c1-7f86f0820b26",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Unlike assert, "
            ],
            [
              "_Static_assert",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is a keyword. A convenience macro "
            ],
            [
              "static_assert",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is defined in "
            ],
            [
              "\u003cassert.h\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Unlike assert, "
          },
          {
            "Text": "_Static_assert",
            "AttrFlags": 2
          },
          {
            "Text": " is a keyword. A convenience macro "
          },
          {
            "Text": "static_assert",
            "AttrFlags": 2
          },
          {
            "Text": " is defined in "
          },
          {
            "Text": "\u003cassert.h\u003e",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935835614,
        "id": "90b11871-b0e3-4b18-bcc2-5df390657bab",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935835614,
        "parent_id": "6d09aa27-02ad-4fb2-b1c1-7f86f0820b26",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cassert.h\u003e\n\nenum {N = 5};\n_Static_assert(N == 5, \"N does not equal 5\");\nstatic_assert(N \u003e 10, \"N is not greater than 10\");  /* compiler error */"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cassert.h\u003e\n\nenum {N = 5};\n_Static_assert(N == 5, \"N does not equal 5\");\nstatic_assert(N \u003e 10, \"N is not greater than 10\");  /* compiler error */",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935835615,
        "id": "affc9e52-c658-4bff-adb3-c8f8921ba2cf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935835615,
        "parent_id": "6d09aa27-02ad-4fb2-b1c1-7f86f0820b26",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Prior to C11, there was no direct support for static assertions. However, in C99, static assertions could be emulated with macros that would trigger a compilation failure if the compile time condition was false. Unlike "
            ],
            [
              "_Static_assert",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", the second parameter needs to be a proper token name so that a variable name can be created with it. If the assertion fails, the variable name is seen in the compiler error, since that variable was used in a syntactically incorrect array declaration."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Prior to C11, there was no direct support for static assertions. However, in C99, static assertions could be emulated with macros that would trigger a compilation failure if the compile time condition was false. Unlike "
          },
          {
            "Text": "_Static_assert",
            "AttrFlags": 2
          },
          {
            "Text": ", the second parameter needs to be a proper token name so that a variable name can be created with it. If the assertion fails, the variable name is seen in the compiler error, since that variable was used in a syntactically incorrect array declaration."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935835615,
        "id": "25559f00-c1d2-4730-b064-de6da0ba6cdd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935835615,
        "parent_id": "6d09aa27-02ad-4fb2-b1c1-7f86f0820b26",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#define STATIC_MSG(msg, l) STATIC_MSG2(msg, l)\n#define STATIC_MSG2(msg,l) on_line_##l##__##msg\n#define STATIC_ASSERT(x, msg) extern char STATIC_MSG(msg, __LINE__) [(x)?1:-1]\n \nenum { N = 5 };\nSTATIC_ASSERT(N == 5, N_must_equal_5);\nSTATIC_ASSERT(N \u003e 5, N_must_be_greater_than_5); /* compile error */"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#define STATIC_MSG(msg, l) STATIC_MSG2(msg, l)\n#define STATIC_MSG2(msg,l) on_line_##l##__##msg\n#define STATIC_ASSERT(x, msg) extern char STATIC_MSG(msg, __LINE__) [(x)?1:-1]\n \nenum { N = 5 };\nSTATIC_ASSERT(N == 5, N_must_equal_5);\nSTATIC_ASSERT(N \u003e 5, N_must_be_greater_than_5); /* compile error */",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935835615,
        "id": "4ca0128a-5a71-4443-b0d2-880832e4400c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935835615,
        "parent_id": "6d09aa27-02ad-4fb2-b1c1-7f86f0820b26",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Before C99, you could not declare variables at arbitrary locations in a block, so you would have to be extremely cautious about using this macro, ensuring that it only appears where a variable declaration would be valid."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Before C99, you could not declare variables at arbitrary locations in a block, so you would have to be extremely cautious about using this macro, ensuring that it only appears where a variable declaration would be valid."
          }
        ]
      }
    ],
    "title": "Static Assertion",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}