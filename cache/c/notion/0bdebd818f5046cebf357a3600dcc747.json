{
  "ID": "0bdebd81-8f50-46ce-bf35-7a3600dcc747",
  "Root": {
    "alive": true,
    "content": [
      "47183ca8-b946-4b4a-9c1f-6a74a9bd6105",
      "19c3e0f6-c319-4aab-8969-54804796aed0",
      "e2730fb1-ae37-4f47-819e-21f86ad49400",
      "fc63599a-95a3-4fac-8531-a05751a999ec",
      "7582fe8b-6f1e-4fc0-af20-46eed5eeea69",
      "b282b49f-43d5-4bfb-b693-8686e6e4925f",
      "884ab40a-83be-4406-99f2-3dd580458603",
      "ca9cf7bb-f0ff-4e5f-b1bd-d94f18a3ca44",
      "d8150c6e-d221-410e-a441-3fc7d641cfe5",
      "6a8fa31d-7eed-431e-99ad-f7fb1f2ba5a0"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551936654261,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "0bdebd81-8f50-46ce-bf35-7a3600dcc747",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551936654261,
    "parent_id": "70e63802-c8af-4573-9d30-82507679f19d",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Integers and pointers in Boolean expressions."
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936654257,
        "id": "47183ca8-b946-4b4a-9c1f-6a74a9bd6105",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936654257,
        "parent_id": "0bdebd81-8f50-46ce-bf35-7a3600dcc747",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "All integers or pointers can be used in an expression that is interpreted as “truth value”."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "All integers or pointers can be used in an expression that is interpreted as “truth value”."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936654259,
        "id": "19c3e0f6-c319-4aab-8969-54804796aed0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936654259,
        "parent_id": "0bdebd81-8f50-46ce-bf35-7a3600dcc747",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int main(int argc, char* argv[]) {\n  if (argc % 4) {\n    puts(\"arguments number is not divisible by 4\");\n  } else {\n    puts(\"argument number is divisible by 4\");\n  }\n..."
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int main(int argc, char* argv[]) {\n  if (argc % 4) {\n    puts(\"arguments number is not divisible by 4\");\n  } else {\n    puts(\"argument number is divisible by 4\");\n  }\n...",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936654260,
        "id": "e2730fb1-ae37-4f47-819e-21f86ad49400",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936654260,
        "parent_id": "0bdebd81-8f50-46ce-bf35-7a3600dcc747",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The expression "
            ],
            [
              "argc % 4",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is evaluated and leads to one of the values "
            ],
            [
              "0",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "3",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". The first, "
            ],
            [
              "0",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is the only value that is “false” and brings execution into the "
            ],
            [
              "else",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " part. All other values are “true” and go into the "
            ],
            [
              "if",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " part."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The expression "
          },
          {
            "Text": "argc % 4",
            "AttrFlags": 2
          },
          {
            "Text": " is evaluated and leads to one of the values "
          },
          {
            "Text": "0",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "1",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "2",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "3",
            "AttrFlags": 2
          },
          {
            "Text": ". The first, "
          },
          {
            "Text": "0",
            "AttrFlags": 2
          },
          {
            "Text": " is the only value that is “false” and brings execution into the "
          },
          {
            "Text": "else",
            "AttrFlags": 2
          },
          {
            "Text": " part. All other values are “true” and go into the "
          },
          {
            "Text": "if",
            "AttrFlags": 2
          },
          {
            "Text": " part."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936654260,
        "id": "fc63599a-95a3-4fac-8531-a05751a999ec",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936654260,
        "parent_id": "0bdebd81-8f50-46ce-bf35-7a3600dcc747",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "double* A = malloc(n*sizeof *A);\nif (!A) {\n   perror(\"allocation problems\");\n   exit(EXIT_FAILURE);\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "double* A = malloc(n*sizeof *A);\nif (!A) {\n   perror(\"allocation problems\");\n   exit(EXIT_FAILURE);\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936654260,
        "id": "7582fe8b-6f1e-4fc0-af20-46eed5eeea69",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936654260,
        "parent_id": "0bdebd81-8f50-46ce-bf35-7a3600dcc747",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Here the pointer "
            ],
            [
              "A",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is evaluated and if it is a null pointer, an error is detected and the program exits."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Here the pointer "
          },
          {
            "Text": "A",
            "AttrFlags": 2
          },
          {
            "Text": " is evaluated and if it is a null pointer, an error is detected and the program exits."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936654260,
        "id": "b282b49f-43d5-4bfb-b693-8686e6e4925f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936654260,
        "parent_id": "0bdebd81-8f50-46ce-bf35-7a3600dcc747",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Many people prefer to write something as "
            ],
            [
              "A == NULL",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", instead, but if you have such pointer comparisons as part of other complicated expressions, things become quickly difficult to read."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Many people prefer to write something as "
          },
          {
            "Text": "A == NULL",
            "AttrFlags": 2
          },
          {
            "Text": ", instead, but if you have such pointer comparisons as part of other complicated expressions, things become quickly difficult to read."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936654260,
        "id": "884ab40a-83be-4406-99f2-3dd580458603",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936654260,
        "parent_id": "0bdebd81-8f50-46ce-bf35-7a3600dcc747",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "char const* s = ....;   /* some pointer that we receive */\nif (s != NULL \u0026\u0026 s[0] != '\\0' \u0026\u0026 isalpha(s[0])) {\n   printf(\"this starts well, %c is alphabetic\\n\", s[0]);\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "char const* s = ....;   /* some pointer that we receive */\nif (s != NULL \u0026\u0026 s[0] != '\\0' \u0026\u0026 isalpha(s[0])) {\n   printf(\"this starts well, %c is alphabetic\\n\", s[0]);\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936654261,
        "id": "ca9cf7bb-f0ff-4e5f-b1bd-d94f18a3ca44",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936654261,
        "parent_id": "0bdebd81-8f50-46ce-bf35-7a3600dcc747",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For this to check, you’d have to scan a complicated code in the expression and be sure about operator preference."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For this to check, you’d have to scan a complicated code in the expression and be sure about operator preference."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936654261,
        "id": "d8150c6e-d221-410e-a441-3fc7d641cfe5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936654261,
        "parent_id": "0bdebd81-8f50-46ce-bf35-7a3600dcc747",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "char const* s = ....;   /* some pointer that we receive */\nif (s \u0026\u0026 s[0] \u0026\u0026 isalpha(s[0])) {\n   printf(\"this starts well, %c is alphabetic\\n\", s[0]);\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "char const* s = ....;   /* some pointer that we receive */\nif (s \u0026\u0026 s[0] \u0026\u0026 isalpha(s[0])) {\n   printf(\"this starts well, %c is alphabetic\\n\", s[0]);\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936654261,
        "id": "6a8fa31d-7eed-431e-99ad-f7fb1f2ba5a0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936654261,
        "parent_id": "0bdebd81-8f50-46ce-bf35-7a3600dcc747",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "is relatively easy to capture: if the pointer is valid we check if the first character is non-zero and then check if it is a letter."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "is relatively easy to capture: if the pointer is valid we check if the first character is non-zero and then check if it is a letter."
          }
        ]
      }
    ],
    "title": "Integers and pointers in Boolean expressions.",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}