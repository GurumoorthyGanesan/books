{
  "ID": "47c59829-31af-495b-a690-33a4e45ffa18",
  "Root": {
    "alive": true,
    "content": [
      "50797156-f816-45e2-996c-12b2e46035fa",
      "71119cf3-7a44-47db-b8e5-a99edaa6ab1d",
      "8ce3ec87-b963-473c-aec3-2e65e08da83b",
      "e5c4d61e-0e8c-4e99-a395-fba34a947d7d",
      "1bee40e2-66e6-43fb-bc12-07df5e66119f",
      "3507e9ea-a9aa-4679-927c-017858f856f4",
      "c0ae7baf-988f-4720-88ab-4e1a2e3bcf49",
      "97b746d0-763a-43a9-9694-71f56c096d88",
      "438ccdbf-abd2-4a8d-816a-674b901c5ff7",
      "e7a7ed6c-df35-4ddc-80b3-c226d06d0af4",
      "3486552b-6cdb-4a63-bb92-6762e37912a4",
      "5e1fdb2f-2538-4c69-8d37-973035c7966f",
      "0c817ce2-4065-4a3a-95a5-d02cfa4f3f6c",
      "89483d4e-4421-4510-91e3-a0330fb7bfc7",
      "e2d0a749-4481-4fec-bde5-8a5bcc31448a",
      "d4478d42-def1-466e-be7a-a955f2185556",
      "214d3f70-ddeb-4aeb-b971-800250807287",
      "2c15a6d7-26c9-407f-be9a-988fae54698c",
      "18b0eafa-0752-4efb-8cf9-860572921391",
      "a7772d97-259f-422e-836d-b3c61998b1da"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551937270703,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "47c59829-31af-495b-a690-33a4e45ffa18",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551937270703,
    "parent_id": "d4a53a79-3ec2-426e-ac50-24d51d19d403",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Pass a 2D-array to a function"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551937270698,
        "id": "50797156-f816-45e2-996c-12b2e46035fa",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551937270698,
        "parent_id": "47c59829-31af-495b-a690-33a4e45ffa18",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Passing a 2d array to a functions seems simple and obvious and we happily write:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Passing a 2d array to a functions seems simple and obvious and we happily write:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551937270700,
        "id": "71119cf3-7a44-47db-b8e5-a99edaa6ab1d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551937270700,
        "parent_id": "47c59829-31af-495b-a690-33a4e45ffa18",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cstdio.h\u003e\n#include \u003cstdlib.h\u003e\n\n#define ROWS 3\n#define COLS 2\n\nvoid fun1(int **, int, int);\n\nint main()\n{\n  int array_2D[ROWS][COLS] = { {1, 2}, {3, 4}, {5, 6} };\n  int n = ROWS;\n  int m = COLS;\n\n  fun1(array_2D, n, m);\n\n  return EXIT_SUCCESS;\n}\n\nvoid fun1(int **a, int n, int m)\n{\n  int i, j;\n  for (i = 0; i \u003c n; i++) {\n    for (j = 0; j \u003c m; j++) {\n      printf(\"array[%d][%d]=%d\\n\", i, j, a[i][j]);\n    }\n  }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cstdio.h\u003e\n#include \u003cstdlib.h\u003e\n\n#define ROWS 3\n#define COLS 2\n\nvoid fun1(int **, int, int);\n\nint main()\n{\n  int array_2D[ROWS][COLS] = { {1, 2}, {3, 4}, {5, 6} };\n  int n = ROWS;\n  int m = COLS;\n\n  fun1(array_2D, n, m);\n\n  return EXIT_SUCCESS;\n}\n\nvoid fun1(int **a, int n, int m)\n{\n  int i, j;\n  for (i = 0; i \u003c n; i++) {\n    for (j = 0; j \u003c m; j++) {\n      printf(\"array[%d][%d]=%d\\n\", i, j, a[i][j]);\n    }\n  }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551937270701,
        "id": "8ce3ec87-b963-473c-aec3-2e65e08da83b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551937270701,
        "parent_id": "47c59829-31af-495b-a690-33a4e45ffa18",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "But the compiler, here GCC in version 4.9.4 , does not appreciate it well."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "But the compiler, here GCC in version 4.9.4 , does not appreciate it well."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551937270701,
        "id": "e5c4d61e-0e8c-4e99-a395-fba34a947d7d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551937270701,
        "parent_id": "47c59829-31af-495b-a690-33a4e45ffa18",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "$ gcc-4.9 -O3 -g3  -W -Wall -Wextra  -std=c11 passarr.c -o passarr\npassarr.c: In function ‘main’:\npassarr.c:16:8: warning: passing argument 1 of ‘fun1’ from incompatible pointer type\n   fun1(array_2D, n, m);\n        ^\npassarr.c:8:6: note: expected ‘int **’ but argument is of type ‘int (*)[2]’\n void fun1(int **, int, int);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "$ gcc-4.9 -O3 -g3  -W -Wall -Wextra  -std=c11 passarr.c -o passarr\npassarr.c: In function ‘main’:\npassarr.c:16:8: warning: passing argument 1 of ‘fun1’ from incompatible pointer type\n   fun1(array_2D, n, m);\n        ^\npassarr.c:8:6: note: expected ‘int **’ but argument is of type ‘int (*)[2]’\n void fun1(int **, int, int);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551937270701,
        "id": "1bee40e2-66e6-43fb-bc12-07df5e66119f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551937270701,
        "parent_id": "47c59829-31af-495b-a690-33a4e45ffa18",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The reasons for this are twofold: the main problem is that arrays are not pointers and the second inconvenience is the so called "
            ],
            [
              "pointer decay",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ". Passing an array to a function will decay the array to a pointer to the first element of the array–in the case of a 2d array it decays to a pointer to the first row because in C arrays are sorted row-first."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The reasons for this are twofold: the main problem is that arrays are not pointers and the second inconvenience is the so called "
          },
          {
            "Text": "pointer decay",
            "AttrFlags": 4
          },
          {
            "Text": ". Passing an array to a function will decay the array to a pointer to the first element of the array–in the case of a 2d array it decays to a pointer to the first row because in C arrays are sorted row-first."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551937270701,
        "id": "3507e9ea-a9aa-4679-927c-017858f856f4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551937270701,
        "parent_id": "47c59829-31af-495b-a690-33a4e45ffa18",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cstdio.h\u003e\n#include \u003cstdlib.h\u003e\n\n#define ROWS 3\n#define COLS 2\n\nvoid fun1(int (*)[COLS], int, int);\n\nint main()\n{\n  int array_2D[ROWS][COLS] = { {1, 2}, {3, 4}, {5, 6} };\n  int n = ROWS;\n  int m = COLS;\n\n  fun1(array_2D, n, m);\n\n  return EXIT_SUCCESS;\n}\n\nvoid fun1(int (*a)[COLS], int n, int m)\n{\n  int i, j;\n  for (i = 0; i \u003c n; i++) {\n    for (j = 0; j \u003c m; j++) {\n      printf(\"array[%d][%d]=%d\\n\", i, j, a[i][j]);\n    }\n  }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cstdio.h\u003e\n#include \u003cstdlib.h\u003e\n\n#define ROWS 3\n#define COLS 2\n\nvoid fun1(int (*)[COLS], int, int);\n\nint main()\n{\n  int array_2D[ROWS][COLS] = { {1, 2}, {3, 4}, {5, 6} };\n  int n = ROWS;\n  int m = COLS;\n\n  fun1(array_2D, n, m);\n\n  return EXIT_SUCCESS;\n}\n\nvoid fun1(int (*a)[COLS], int n, int m)\n{\n  int i, j;\n  for (i = 0; i \u003c n; i++) {\n    for (j = 0; j \u003c m; j++) {\n      printf(\"array[%d][%d]=%d\\n\", i, j, a[i][j]);\n    }\n  }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551937270701,
        "id": "c0ae7baf-988f-4720-88ab-4e1a2e3bcf49",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551937270701,
        "parent_id": "47c59829-31af-495b-a690-33a4e45ffa18",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It "
            ],
            [
              "is",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " necessary to pass the number of rows, they cannot be computed."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It "
          },
          {
            "Text": "is",
            "AttrFlags": 4
          },
          {
            "Text": " necessary to pass the number of rows, they cannot be computed."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551937270701,
        "id": "97b746d0-763a-43a9-9694-71f56c096d88",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551937270701,
        "parent_id": "47c59829-31af-495b-a690-33a4e45ffa18",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cstdio.h\u003e\n#include \u003cstdlib.h\u003e\n\n#define ROWS 3\n#define COLS 2\n\nvoid fun1(int (*)[COLS], int);\n\nint main()\n{\n  int array_2D[ROWS][COLS] = { {1, 2}, {3, 4}, {5, 6} };\n  int rows = ROWS;\n\n  /* works here because array_2d is still in scope and still an array */\n  printf(\"MAIN: %zu\\n\",sizeof(array_2D)/sizeof(array_2D[0]));\n\n  fun1(array_2D, rows);\n\n  return EXIT_SUCCESS;\n}\n\nvoid fun1(int (*a)[COLS], int rows)\n{\n  int i, j;\n  int n, m;\n\n  n = rows;\n  /* Works, because that information is passed (as \"COLS\").\n     It is also redundant because that value is known at compile time (in \"COLS\"). */\n  m = (int) (sizeof(a[0])/sizeof(a[0][0]));\n \n  /* Does not work here because the \"decay\" in \"pointer decay\" is meant\n     literally--information is lost. */\n  printf(\"FUN1: %zu\\n\",sizeof(a)/sizeof(a[0]));\n\n  for (i = 0; i \u003c n; i++) {\n    for (j = 0; j \u003c m; j++) {\n      printf(\"array[%d][%d]=%d\\n\", i, j, a[i][j]);\n    }\n  }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cstdio.h\u003e\n#include \u003cstdlib.h\u003e\n\n#define ROWS 3\n#define COLS 2\n\nvoid fun1(int (*)[COLS], int);\n\nint main()\n{\n  int array_2D[ROWS][COLS] = { {1, 2}, {3, 4}, {5, 6} };\n  int rows = ROWS;\n\n  /* works here because array_2d is still in scope and still an array */\n  printf(\"MAIN: %zu\\n\",sizeof(array_2D)/sizeof(array_2D[0]));\n\n  fun1(array_2D, rows);\n\n  return EXIT_SUCCESS;\n}\n\nvoid fun1(int (*a)[COLS], int rows)\n{\n  int i, j;\n  int n, m;\n\n  n = rows;\n  /* Works, because that information is passed (as \"COLS\").\n     It is also redundant because that value is known at compile time (in \"COLS\"). */\n  m = (int) (sizeof(a[0])/sizeof(a[0][0]));\n \n  /* Does not work here because the \"decay\" in \"pointer decay\" is meant\n     literally--information is lost. */\n  printf(\"FUN1: %zu\\n\",sizeof(a)/sizeof(a[0]));\n\n  for (i = 0; i \u003c n; i++) {\n    for (j = 0; j \u003c m; j++) {\n      printf(\"array[%d][%d]=%d\\n\", i, j, a[i][j]);\n    }\n  }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551937270702,
        "id": "438ccdbf-abd2-4a8d-816a-674b901c5ff7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551937270702,
        "parent_id": "47c59829-31af-495b-a690-33a4e45ffa18",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The number of columns is predefined and hence fixed at compile time, but the predecessor to the current C-standard (that was ISO/IEC 9899:1999, current is ISO/IEC 9899:2011) implemented VLAs (TODO: link it) and although the current standard made it optional, almost all modern C-compilers support it (TODO: check if MS Visual Studio supports it now)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The number of columns is predefined and hence fixed at compile time, but the predecessor to the current C-standard (that was ISO/IEC 9899:1999, current is ISO/IEC 9899:2011) implemented VLAs (TODO: link it) and although the current standard made it optional, almost all modern C-compilers support it (TODO: check if MS Visual Studio supports it now)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551937270702,
        "id": "e7a7ed6c-df35-4ddc-80b3-c226d06d0af4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551937270702,
        "parent_id": "47c59829-31af-495b-a690-33a4e45ffa18",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cstdio.h\u003e\n#include \u003cstdlib.h\u003e\n\n/* ALL CHECKS OMMITTED!*/\n\nvoid fun1(int (*)[], int rows, int cols);\n\nint main(int argc, char **argv)\n{\n  int rows, cols, i, j;\n\n  if(argc != 3){\n     fprintf(stderr,\"Usage: %s rows cols\\n\",argv[0]);\n     exit(EXIT_FAILURE);\n  }\n\n  rows = atoi(argv[1]);\n  cols = atoi(argv[2]);\n\n  int array_2D[rows][cols];\n\n  for (i = 0; i \u003c rows; i++) {\n    for (j = 0; j \u003c cols; j++) {\n      array_2D[i][j] = (i + 1) * (j + 1);\n      printf(\"array[%d][%d]=%d\\n\", i, j, array_2D[i][j]);\n    }\n  }\n\n  fun1(array_2D, rows, cols);\n\n  exit(EXIT_SUCCESS);\n}\n\nvoid fun1(int (*a)[], int rows, int cols)\n{\n  int i, j;\n  int n, m;\n\n  n = rows;\n  /* Does not work anymore, no sizes are specified anymore\n  m = (int) (sizeof(a[0])/sizeof(a[0][0])); */\n  m = cols;\n\n\n  for (i = 0; i \u003c n; i++) {\n    for (j = 0; j \u003c m; j++) {\n      printf(\"array[%d][%d]=%d\\n\", i, j, a[i][j]);\n    }\n  }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cstdio.h\u003e\n#include \u003cstdlib.h\u003e\n\n/* ALL CHECKS OMMITTED!*/\n\nvoid fun1(int (*)[], int rows, int cols);\n\nint main(int argc, char **argv)\n{\n  int rows, cols, i, j;\n\n  if(argc != 3){\n     fprintf(stderr,\"Usage: %s rows cols\\n\",argv[0]);\n     exit(EXIT_FAILURE);\n  }\n\n  rows = atoi(argv[1]);\n  cols = atoi(argv[2]);\n\n  int array_2D[rows][cols];\n\n  for (i = 0; i \u003c rows; i++) {\n    for (j = 0; j \u003c cols; j++) {\n      array_2D[i][j] = (i + 1) * (j + 1);\n      printf(\"array[%d][%d]=%d\\n\", i, j, array_2D[i][j]);\n    }\n  }\n\n  fun1(array_2D, rows, cols);\n\n  exit(EXIT_SUCCESS);\n}\n\nvoid fun1(int (*a)[], int rows, int cols)\n{\n  int i, j;\n  int n, m;\n\n  n = rows;\n  /* Does not work anymore, no sizes are specified anymore\n  m = (int) (sizeof(a[0])/sizeof(a[0][0])); */\n  m = cols;\n\n\n  for (i = 0; i \u003c n; i++) {\n    for (j = 0; j \u003c m; j++) {\n      printf(\"array[%d][%d]=%d\\n\", i, j, a[i][j]);\n    }\n  }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551937270702,
        "id": "3486552b-6cdb-4a63-bb92-6762e37912a4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551937270702,
        "parent_id": "47c59829-31af-495b-a690-33a4e45ffa18",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This does not work, the compiler complains:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This does not work, the compiler complains:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551937270702,
        "id": "5e1fdb2f-2538-4c69-8d37-973035c7966f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551937270702,
        "parent_id": "47c59829-31af-495b-a690-33a4e45ffa18",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "$ gcc-4.9 -O3 -g3  -W -Wall -Wextra  -std=c99 passarr.c -o passarr\npassarr.c: In function ‘fun1’:\npassarr.c:168:7: error: invalid use of array with unspecified bounds\n       printf(\"array[%d][%d]=%d\\n\", i, j, a[i][j]);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "$ gcc-4.9 -O3 -g3  -W -Wall -Wextra  -std=c99 passarr.c -o passarr\npassarr.c: In function ‘fun1’:\npassarr.c:168:7: error: invalid use of array with unspecified bounds\n       printf(\"array[%d][%d]=%d\\n\", i, j, a[i][j]);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551937270702,
        "id": "0c817ce2-4065-4a3a-95a5-d02cfa4f3f6c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551937270702,
        "parent_id": "47c59829-31af-495b-a690-33a4e45ffa18",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It becomes a bit clearer if we intentionally make an error in the call of the function by changing the declaration to "
            ],
            [
              "void fun1(int **a, int rows, int cols)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". That causes the compiler to complain in a different, but equally nebulous way"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It becomes a bit clearer if we intentionally make an error in the call of the function by changing the declaration to "
          },
          {
            "Text": "void fun1(int **a, int rows, int cols)",
            "AttrFlags": 2
          },
          {
            "Text": ". That causes the compiler to complain in a different, but equally nebulous way"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551937270702,
        "id": "89483d4e-4421-4510-91e3-a0330fb7bfc7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551937270702,
        "parent_id": "47c59829-31af-495b-a690-33a4e45ffa18",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "$ gcc-4.9 -O3 -g3  -W -Wall -Wextra  -std=c99 passarr.c -o passarr\npassarr.c: In function ‘main’:\npassarr.c:208:8: warning: passing argument 1 of ‘fun1’ from incompatible pointer type\n   fun1(array_2D, rows, cols);\n        ^\npassarr.c:185:6: note: expected ‘int **’ but argument is of type ‘int (*)[(sizetype)(cols)]’\n void fun1(int **, int rows, int cols);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "$ gcc-4.9 -O3 -g3  -W -Wall -Wextra  -std=c99 passarr.c -o passarr\npassarr.c: In function ‘main’:\npassarr.c:208:8: warning: passing argument 1 of ‘fun1’ from incompatible pointer type\n   fun1(array_2D, rows, cols);\n        ^\npassarr.c:185:6: note: expected ‘int **’ but argument is of type ‘int (*)[(sizetype)(cols)]’\n void fun1(int **, int rows, int cols);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551937270702,
        "id": "e2d0a749-4481-4fec-bde5-8a5bcc31448a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551937270702,
        "parent_id": "47c59829-31af-495b-a690-33a4e45ffa18",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We can react in several ways, one of it is to ignore all of it and do some illegible pointer juggling:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "We can react in several ways, one of it is to ignore all of it and do some illegible pointer juggling:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551937270702,
        "id": "d4478d42-def1-466e-be7a-a955f2185556",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551937270702,
        "parent_id": "47c59829-31af-495b-a690-33a4e45ffa18",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cstdio.h\u003e\n#include \u003cstdlib.h\u003e\n\n/* ALL CHECKS OMMITTED!*/\n\nvoid fun1(int (*)[], int rows, int cols);\n\nint main(int argc, char **argv)\n{\n  int rows, cols, i, j;\n\n  if(argc != 3){\n     fprintf(stderr,\"Usage: %s rows cols\\n\",argv[0]);\n     exit(EXIT_FAILURE);\n  }\n\n  rows = atoi(argv[1]);\n  cols = atoi(argv[2]);\n\n  int array_2D[rows][cols];\n  printf(\"Make array with %d rows and %d columns\\n\", rows, cols);\n  for (i = 0; i \u003c rows; i++) {\n    for (j = 0; j \u003c cols; j++) {\n      array_2D[i][j] = i * cols + j;\n      printf(\"array[%d][%d]=%d\\n\", i, j, array_2D[i][j]);\n    }\n  }\n\n  fun1(array_2D, rows, cols);\n\n  exit(EXIT_SUCCESS);\n}\n\nvoid fun1(int (*a)[], int rows, int cols)\n{\n  int i, j;\n  int n, m;\n\n  n = rows;\n  m = cols;\n\n  printf(\"\\nPrint array with %d rows and %d columns\\n\", rows, cols);\n  for (i = 0; i \u003c n; i++) {\n    for (j = 0; j \u003c m; j++) {\n      printf(\"array[%d][%d]=%d\\n\", i, j, *( (*a) + (i * cols + j)));\n    }\n  }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cstdio.h\u003e\n#include \u003cstdlib.h\u003e\n\n/* ALL CHECKS OMMITTED!*/\n\nvoid fun1(int (*)[], int rows, int cols);\n\nint main(int argc, char **argv)\n{\n  int rows, cols, i, j;\n\n  if(argc != 3){\n     fprintf(stderr,\"Usage: %s rows cols\\n\",argv[0]);\n     exit(EXIT_FAILURE);\n  }\n\n  rows = atoi(argv[1]);\n  cols = atoi(argv[2]);\n\n  int array_2D[rows][cols];\n  printf(\"Make array with %d rows and %d columns\\n\", rows, cols);\n  for (i = 0; i \u003c rows; i++) {\n    for (j = 0; j \u003c cols; j++) {\n      array_2D[i][j] = i * cols + j;\n      printf(\"array[%d][%d]=%d\\n\", i, j, array_2D[i][j]);\n    }\n  }\n\n  fun1(array_2D, rows, cols);\n\n  exit(EXIT_SUCCESS);\n}\n\nvoid fun1(int (*a)[], int rows, int cols)\n{\n  int i, j;\n  int n, m;\n\n  n = rows;\n  m = cols;\n\n  printf(\"\\nPrint array with %d rows and %d columns\\n\", rows, cols);\n  for (i = 0; i \u003c n; i++) {\n    for (j = 0; j \u003c m; j++) {\n      printf(\"array[%d][%d]=%d\\n\", i, j, *( (*a) + (i * cols + j)));\n    }\n  }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551937270703,
        "id": "214d3f70-ddeb-4aeb-b971-800250807287",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551937270703,
        "parent_id": "47c59829-31af-495b-a690-33a4e45ffa18",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Or we do it right and pass the needed information to "
            ],
            [
              "fun1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". To do so wee need to rearrange the arguments to "
            ],
            [
              "fun1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ": the size of the column must come before the declaration of the array. To keep it more readable the variable holding the number of rows has changed its place, too, and is first now."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Or we do it right and pass the needed information to "
          },
          {
            "Text": "fun1",
            "AttrFlags": 2
          },
          {
            "Text": ". To do so wee need to rearrange the arguments to "
          },
          {
            "Text": "fun1",
            "AttrFlags": 2
          },
          {
            "Text": ": the size of the column must come before the declaration of the array. To keep it more readable the variable holding the number of rows has changed its place, too, and is first now."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551937270703,
        "id": "2c15a6d7-26c9-407f-be9a-988fae54698c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551937270703,
        "parent_id": "47c59829-31af-495b-a690-33a4e45ffa18",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cstdio.h\u003e\n#include \u003cstdlib.h\u003e\n\n/* ALL CHECKS OMMITTED!*/\n\nvoid fun1(int rows, int cols, int (*)[]);\n\nint main(int argc, char **argv)\n{\n  int rows, cols, i, j;\n\n  if(argc != 3){\n     fprintf(stderr,\"Usage: %s rows cols\\n\",argv[0]);\n     exit(EXIT_FAILURE);\n  }\n\n  rows = atoi(argv[1]);\n  cols = atoi(argv[2]);\n\n  int array_2D[rows][cols];\n  printf(\"Make array with %d rows and %d columns\\n\", rows, cols);\n  for (i = 0; i \u003c rows; i++) {\n    for (j = 0; j \u003c cols; j++) {\n      array_2D[i][j] = i * cols + j;\n      printf(\"array[%d][%d]=%d\\n\", i, j, array_2D[i][j]);\n    }\n  }\n\n  fun1(rows, cols, array_2D);\n\n  exit(EXIT_SUCCESS);\n}\n\nvoid fun1(int rows, int cols, int (*a)[cols])\n{\n  int i, j;\n  int n, m;\n\n  n = rows;\n  m = cols;\n\n  printf(\"\\nPrint array with %d rows and %d columns\\n\", rows, cols);\n  for (i = 0; i \u003c n; i++) {\n    for (j = 0; j \u003c m; j++) {\n      printf(\"array[%d][%d]=%d\\n\", i, j, a[i][j]);\n    }\n  }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cstdio.h\u003e\n#include \u003cstdlib.h\u003e\n\n/* ALL CHECKS OMMITTED!*/\n\nvoid fun1(int rows, int cols, int (*)[]);\n\nint main(int argc, char **argv)\n{\n  int rows, cols, i, j;\n\n  if(argc != 3){\n     fprintf(stderr,\"Usage: %s rows cols\\n\",argv[0]);\n     exit(EXIT_FAILURE);\n  }\n\n  rows = atoi(argv[1]);\n  cols = atoi(argv[2]);\n\n  int array_2D[rows][cols];\n  printf(\"Make array with %d rows and %d columns\\n\", rows, cols);\n  for (i = 0; i \u003c rows; i++) {\n    for (j = 0; j \u003c cols; j++) {\n      array_2D[i][j] = i * cols + j;\n      printf(\"array[%d][%d]=%d\\n\", i, j, array_2D[i][j]);\n    }\n  }\n\n  fun1(rows, cols, array_2D);\n\n  exit(EXIT_SUCCESS);\n}\n\nvoid fun1(int rows, int cols, int (*a)[cols])\n{\n  int i, j;\n  int n, m;\n\n  n = rows;\n  m = cols;\n\n  printf(\"\\nPrint array with %d rows and %d columns\\n\", rows, cols);\n  for (i = 0; i \u003c n; i++) {\n    for (j = 0; j \u003c m; j++) {\n      printf(\"array[%d][%d]=%d\\n\", i, j, a[i][j]);\n    }\n  }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551937270703,
        "id": "18b0eafa-0752-4efb-8cf9-860572921391",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551937270703,
        "parent_id": "47c59829-31af-495b-a690-33a4e45ffa18",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This looks awkward to some people, who hold the opinion that the order of variables should not matter. That is not much of a problem, just declare a pointer and let it point to the array."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This looks awkward to some people, who hold the opinion that the order of variables should not matter. That is not much of a problem, just declare a pointer and let it point to the array."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551937270703,
        "id": "a7772d97-259f-422e-836d-b3c61998b1da",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551937270703,
        "parent_id": "47c59829-31af-495b-a690-33a4e45ffa18",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cstdio.h\u003e\n#include \u003cstdlib.h\u003e\n\n/* ALL CHECKS OMMITTED!*/\n\nvoid fun1(int rows, int cols, int **);\n\nint main(int argc, char **argv)\n{\n  int rows, cols, i, j;\n\n\n  if(argc != 3){\n     fprintf(stderr,\"Usage: %s rows cols\\n\",argv[0]);\n     exit(EXIT_FAILURE);\n  }\n\n  rows = atoi(argv[1]);\n  cols = atoi(argv[2]);\n\n  int array_2D[rows][cols];\n  printf(\"Make array with %d rows and %d columns\\n\", rows, cols);\n  for (i = 0; i \u003c rows; i++) {\n    for (j = 0; j \u003c cols; j++) {\n      array_2D[i][j] = i * cols + j;\n      printf(\"array[%d][%d]=%d\\n\", i, j, array_2D[i][j]);\n    }\n  }\n  // a \"rows\" number of pointers to \"int\". Again a VLA\n  int *a[rows];\n  // initialize them to point to the individual rows\n  for (i = 0; i \u003c rows; i++) {\n      a[i] = array_2D[i];\n  }\n\n  fun1(rows, cols, a);\n\n  exit(EXIT_SUCCESS);\n}\n\nvoid fun1(int rows, int cols, int **a)\n{\n  int i, j;\n  int n, m;\n\n  n = rows;\n  m = cols;\n\n  printf(\"\\nPrint array with %d rows and %d columns\\n\", rows, cols);\n  for (i = 0; i \u003c n; i++) {\n    for (j = 0; j \u003c m; j++) {\n      printf(\"array[%d][%d]=%d\\n\", i, j, a[i][j]);\n    }\n  }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cstdio.h\u003e\n#include \u003cstdlib.h\u003e\n\n/* ALL CHECKS OMMITTED!*/\n\nvoid fun1(int rows, int cols, int **);\n\nint main(int argc, char **argv)\n{\n  int rows, cols, i, j;\n\n\n  if(argc != 3){\n     fprintf(stderr,\"Usage: %s rows cols\\n\",argv[0]);\n     exit(EXIT_FAILURE);\n  }\n\n  rows = atoi(argv[1]);\n  cols = atoi(argv[2]);\n\n  int array_2D[rows][cols];\n  printf(\"Make array with %d rows and %d columns\\n\", rows, cols);\n  for (i = 0; i \u003c rows; i++) {\n    for (j = 0; j \u003c cols; j++) {\n      array_2D[i][j] = i * cols + j;\n      printf(\"array[%d][%d]=%d\\n\", i, j, array_2D[i][j]);\n    }\n  }\n  // a \"rows\" number of pointers to \"int\". Again a VLA\n  int *a[rows];\n  // initialize them to point to the individual rows\n  for (i = 0; i \u003c rows; i++) {\n      a[i] = array_2D[i];\n  }\n\n  fun1(rows, cols, a);\n\n  exit(EXIT_SUCCESS);\n}\n\nvoid fun1(int rows, int cols, int **a)\n{\n  int i, j;\n  int n, m;\n\n  n = rows;\n  m = cols;\n\n  printf(\"\\nPrint array with %d rows and %d columns\\n\", rows, cols);\n  for (i = 0; i \u003c n; i++) {\n    for (j = 0; j \u003c m; j++) {\n      printf(\"array[%d][%d]=%d\\n\", i, j, a[i][j]);\n    }\n  }\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "Pass a 2D-array to a function",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}