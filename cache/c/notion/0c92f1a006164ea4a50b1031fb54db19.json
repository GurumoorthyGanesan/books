{
  "ID": "0c92f1a0-0616-4ea4-a50b-1031fb54db19",
  "Root": {
    "alive": true,
    "content": [
      "c616b5a5-6f50-4e61-85c0-fc1c378d7c5c",
      "9f4e1261-e520-48b5-bc5e-eef4d2f79c73",
      "289d2f65-2fb4-4c5e-be11-e245f3009e67",
      "c37e21ba-bc42-46f3-a8ab-22e877807397"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551936207270,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "0c92f1a0-0616-4ea4-a50b-1031fb54db19",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551936207270,
    "parent_id": "1e14553b-8aea-44fb-a0fe-fbc893ff529a",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Reallocating Memory"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936207267,
        "id": "c616b5a5-6f50-4e61-85c0-fc1c378d7c5c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936207267,
        "parent_id": "0c92f1a0-0616-4ea4-a50b-1031fb54db19",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You may need to expand or shrink your pointer storage space after you have allocated memory to it. The "
            ],
            [
              "void *realloc(void *ptr, size_t size)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " function deallocates the old object pointed to by "
            ],
            [
              "ptr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and returns a pointer to an object that has the size specified by "
            ],
            [
              "size",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". "
            ],
            [
              "ptr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is the pointer to a memory block previously allocated with "
            ],
            [
              "malloc",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "calloc",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "realloc",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (or a null pointer) to be reallocated. The maximal possible contents of the original memory is preserved. If the new size is larger, any additional memory beyond the old size are uninitialized. If the new size is shorter, the contents of the shrunken part is lost. If "
            ],
            [
              "ptr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is NULL, a new block is allocated and a pointer to it is returned by the function."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You may need to expand or shrink your pointer storage space after you have allocated memory to it. The "
          },
          {
            "Text": "void *realloc(void *ptr, size_t size)",
            "AttrFlags": 2
          },
          {
            "Text": " function deallocates the old object pointed to by "
          },
          {
            "Text": "ptr",
            "AttrFlags": 2
          },
          {
            "Text": " and returns a pointer to an object that has the size specified by "
          },
          {
            "Text": "size",
            "AttrFlags": 2
          },
          {
            "Text": ". "
          },
          {
            "Text": "ptr",
            "AttrFlags": 2
          },
          {
            "Text": " is the pointer to a memory block previously allocated with "
          },
          {
            "Text": "malloc",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "calloc",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "realloc",
            "AttrFlags": 2
          },
          {
            "Text": " (or a null pointer) to be reallocated. The maximal possible contents of the original memory is preserved. If the new size is larger, any additional memory beyond the old size are uninitialized. If the new size is shorter, the contents of the shrunken part is lost. If "
          },
          {
            "Text": "ptr",
            "AttrFlags": 2
          },
          {
            "Text": " is NULL, a new block is allocated and a pointer to it is returned by the function."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936207269,
        "id": "9f4e1261-e520-48b5-bc5e-eef4d2f79c73",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936207269,
        "parent_id": "0c92f1a0-0616-4ea4-a50b-1031fb54db19",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cstdio.h\u003e\n#include \u003cstdlib.h\u003e\n \nint main(void)\n{\n    int *p = malloc(10 * sizeof *p);\n    if (NULL == p) \n    {\n        perror(\"malloc() failed\");\n        return EXIT_FAILURE;\n    }\n \n    p[0] = 42;\n    p[9] = 15;\n\n    /* Reallocate array to a larger size, storing the result into a\n     * temporary pointer in case realloc() fails. */\n    {\n        int *temporary = realloc(p, 1000000 * sizeof *temporary);\n\n        /* realloc() failed, the original allocation was not free'd yet. */\n        if (NULL == temporary)\n        {\n            perror(\"realloc() failed\");\n            free(p); /* Clean up. */\n            return EXIT_FAILURE;\n        }      \n\n        p = temporary;\n    }\n\n    /* From here on, array can be used with the new size it was \n     * realloc'ed to, until it is free'd. */\n\n    /* The values of p[0] to p[9] are preserved, so this will print:\n       42 15\n    */\n    printf(\"%d %d\\n\", p[0], p[9]);\n\n    free(p);\n\n    return EXIT_SUCCESS;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cstdio.h\u003e\n#include \u003cstdlib.h\u003e\n \nint main(void)\n{\n    int *p = malloc(10 * sizeof *p);\n    if (NULL == p) \n    {\n        perror(\"malloc() failed\");\n        return EXIT_FAILURE;\n    }\n \n    p[0] = 42;\n    p[9] = 15;\n\n    /* Reallocate array to a larger size, storing the result into a\n     * temporary pointer in case realloc() fails. */\n    {\n        int *temporary = realloc(p, 1000000 * sizeof *temporary);\n\n        /* realloc() failed, the original allocation was not free'd yet. */\n        if (NULL == temporary)\n        {\n            perror(\"realloc() failed\");\n            free(p); /* Clean up. */\n            return EXIT_FAILURE;\n        }      \n\n        p = temporary;\n    }\n\n    /* From here on, array can be used with the new size it was \n     * realloc'ed to, until it is free'd. */\n\n    /* The values of p[0] to p[9] are preserved, so this will print:\n       42 15\n    */\n    printf(\"%d %d\\n\", p[0], p[9]);\n\n    free(p);\n\n    return EXIT_SUCCESS;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936207270,
        "id": "289d2f65-2fb4-4c5e-be11-e245f3009e67",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936207270,
        "parent_id": "0c92f1a0-0616-4ea4-a50b-1031fb54db19",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The reallocated object may or may not have the same address as "
            ],
            [
              "*p",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Therefore it is important to capture the return value from "
            ],
            [
              "realloc",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " which contains the new address if the call is successful."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The reallocated object may or may not have the same address as "
          },
          {
            "Text": "*p",
            "AttrFlags": 2
          },
          {
            "Text": ". Therefore it is important to capture the return value from "
          },
          {
            "Text": "realloc",
            "AttrFlags": 2
          },
          {
            "Text": " which contains the new address if the call is successful."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936207270,
        "id": "c37e21ba-bc42-46f3-a8ab-22e877807397",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936207270,
        "parent_id": "0c92f1a0-0616-4ea4-a50b-1031fb54db19",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Make sure you assign the return value of "
            ],
            [
              "realloc",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to a "
            ],
            [
              "temporary",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " instead of the original "
            ],
            [
              "p",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". "
            ],
            [
              "realloc",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will return null in case of any failure, which would overwrite the pointer. This would lose your data and create a memory leak."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Make sure you assign the return value of "
          },
          {
            "Text": "realloc",
            "AttrFlags": 2
          },
          {
            "Text": " to a "
          },
          {
            "Text": "temporary",
            "AttrFlags": 2
          },
          {
            "Text": " instead of the original "
          },
          {
            "Text": "p",
            "AttrFlags": 2
          },
          {
            "Text": ". "
          },
          {
            "Text": "realloc",
            "AttrFlags": 2
          },
          {
            "Text": " will return null in case of any failure, which would overwrite the pointer. This would lose your data and create a memory leak."
          }
        ]
      }
    ],
    "title": "Reallocating Memory",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}