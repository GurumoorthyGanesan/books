{
  "ID": "51aa8933-b364-4d85-951f-09eff5dd9f2f",
  "Root": {
    "alive": true,
    "content": [
      "4dfccd27-23ed-481d-b8cc-e1c56956dd88",
      "7ab2414f-e421-4ede-8b7a-1f46ce63ec13",
      "17b1898c-da86-4993-ad31-64392837b725",
      "bd49eb2f-e901-4268-9f01-f990568448d5",
      "a091e850-340d-4601-a8ad-9b70bceec887",
      "45c67c41-0e99-47c1-bfd6-7861f26ddf44",
      "32199ed8-9536-427f-995d-4b8dba0c9f35",
      "1f3139f2-3bc3-4d4b-83ed-4dcc5352ce8a"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551935850665,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "51aa8933-b364-4d85-951f-09eff5dd9f2f",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551935850665,
    "parent_id": "fb6df079-bba6-489e-ac6a-3ea61d24e7af",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "A doubly linked list"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935850661,
        "id": "4dfccd27-23ed-481d-b8cc-e1c56956dd88",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935850661,
        "parent_id": "51aa8933-b364-4d85-951f-09eff5dd9f2f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "An example of code showing how nodes can be inserted at a doubly linked list, how the list can easily be reversed, and how it can be printed in reverse."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "An example of code showing how nodes can be inserted at a doubly linked list, how the list can easily be reversed, and how it can be printed in reverse."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935850664,
        "id": "7ab2414f-e421-4ede-8b7a-1f46ce63ec13",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935850664,
        "parent_id": "51aa8933-b364-4d85-951f-09eff5dd9f2f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cstdio.h\u003e\n#include \u003cstdlib.h\u003e\n\n/* This data is not always stored in a structure, but it is sometimes for ease of use */\nstruct Node {\n  /* Sometimes a key is also stored and used in the functions */\n  int data;\n  struct Node* next;\n  struct Node* previous;\n};\n\nvoid insert_at_beginning(struct Node **pheadNode, int value);\nvoid insert_at_end(struct Node **pheadNode, int value);\n\nvoid print_list(struct Node *headNode);\nvoid print_list_backwards(struct Node *headNode);\n\nvoid free_list(struct Node *headNode);\n\nint main(void) {\n  /* Sometimes in a doubly linked list the last node is also stored */\n  struct Node *head = NULL;\n\n  printf(\"Insert a node at the beginning of the list.\\n\");\n  insert_at_beginning(\u0026head, 5);\n  print_list(head);\n\n  printf(\"Insert a node at the beginning, and then print the list backwards\\n\");\n  insert_at_beginning(\u0026head, 10);\n  print_list_backwards(head);\n\n  printf(\"Insert a node at the end, and then print the list forwards.\\n\");\n\n  insert_at_end(\u0026head, 15);\n  print_list(head);\n\n  free_list(head);\n\n  return 0;\n}\n\nvoid print_list_backwards(struct Node *headNode) {\n  if (NULL == headNode)\n  {\n    return;\n  }\n  /*\n  Iterate through the list, and once we get to the end, iterate backwards to print \n  out the items in reverse order (this is done with the pointer to the previous node).\n  This can be done even more easily if a pointer to the last node is stored.\n  */\n  struct Node *i = headNode;\n  while (i-\u003enext != NULL) {\n    i = i-\u003enext; /* Move to the end of the list */\n  }\n\n  while (i != NULL) {\n    printf(\"Value: %d\\n\", i-\u003edata);\n    i = i-\u003eprevious;\n  }\n}\n\nvoid print_list(struct Node *headNode) {\n  /* Iterate through the list and print out the data member of each node */\n  struct Node *i;\n  for (i = headNode; i != NULL; i = i-\u003enext) {\n    printf(\"Value: %d\\n\", i-\u003edata);\n  }\n}\n\nvoid insert_at_beginning(struct Node **pheadNode, int value) {\n  struct Node *currentNode;\n\n  if (NULL == pheadNode)\n  {\n    return;\n  }\n  /* \n  This is done similarly to how we insert a node at the beginning of a singly linked\n  list, instead we set the previous member of the structure as well\n  */\n  currentNode = malloc(sizeof *currentNode);\n\n  currentNode-\u003enext = NULL;\n  currentNode-\u003eprevious = NULL;\n  currentNode-\u003edata = value;\n\n  if (*pheadNode == NULL) { /* The list is empty */\n    *pheadNode = currentNode;\n    return;\n  }\n\n  currentNode-\u003enext = *pheadNode;\n  (*pheadNode)-\u003eprevious = currentNode;\n  *pheadNode = currentNode;\n}\n\nvoid insert_at_end(struct Node **pheadNode, int value) {\n  struct Node *currentNode;\n\n  if (NULL == pheadNode)\n  {\n    return;\n  }\n\n  /*\n  This can, again be done easily by being able to have the previous element.  It \n  would also be even more useful to have a pointer to the last node, which is commonly\n  used.\n  */\n  \n  currentNode = malloc(sizeof *currentNode);\n  struct Node *i = *pheadNode;\n\n  currentNode-\u003edata = value;\n  currentNode-\u003enext = NULL;\n  currentNode-\u003eprevious = NULL;\n\n  if (*pheadNode == NULL) {\n    *pheadNode = currentNode;\n    return;\n  }\n\n  while (i-\u003enext != NULL) { /* Go to the end of the list */\n    i = i-\u003enext;\n  }\n\n  i-\u003enext = currentNode;\n  currentNode-\u003eprevious = i;\n}\n\nvoid free_list(struct Node *node) {\n  while (node != NULL) {\n    struct Node *next = node-\u003enext;\n    free(node);\n    node = next;\n  }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cstdio.h\u003e\n#include \u003cstdlib.h\u003e\n\n/* This data is not always stored in a structure, but it is sometimes for ease of use */\nstruct Node {\n  /* Sometimes a key is also stored and used in the functions */\n  int data;\n  struct Node* next;\n  struct Node* previous;\n};\n\nvoid insert_at_beginning(struct Node **pheadNode, int value);\nvoid insert_at_end(struct Node **pheadNode, int value);\n\nvoid print_list(struct Node *headNode);\nvoid print_list_backwards(struct Node *headNode);\n\nvoid free_list(struct Node *headNode);\n\nint main(void) {\n  /* Sometimes in a doubly linked list the last node is also stored */\n  struct Node *head = NULL;\n\n  printf(\"Insert a node at the beginning of the list.\\n\");\n  insert_at_beginning(\u0026head, 5);\n  print_list(head);\n\n  printf(\"Insert a node at the beginning, and then print the list backwards\\n\");\n  insert_at_beginning(\u0026head, 10);\n  print_list_backwards(head);\n\n  printf(\"Insert a node at the end, and then print the list forwards.\\n\");\n\n  insert_at_end(\u0026head, 15);\n  print_list(head);\n\n  free_list(head);\n\n  return 0;\n}\n\nvoid print_list_backwards(struct Node *headNode) {\n  if (NULL == headNode)\n  {\n    return;\n  }\n  /*\n  Iterate through the list, and once we get to the end, iterate backwards to print \n  out the items in reverse order (this is done with the pointer to the previous node).\n  This can be done even more easily if a pointer to the last node is stored.\n  */\n  struct Node *i = headNode;\n  while (i-\u003enext != NULL) {\n    i = i-\u003enext; /* Move to the end of the list */\n  }\n\n  while (i != NULL) {\n    printf(\"Value: %d\\n\", i-\u003edata);\n    i = i-\u003eprevious;\n  }\n}\n\nvoid print_list(struct Node *headNode) {\n  /* Iterate through the list and print out the data member of each node */\n  struct Node *i;\n  for (i = headNode; i != NULL; i = i-\u003enext) {\n    printf(\"Value: %d\\n\", i-\u003edata);\n  }\n}\n\nvoid insert_at_beginning(struct Node **pheadNode, int value) {\n  struct Node *currentNode;\n\n  if (NULL == pheadNode)\n  {\n    return;\n  }\n  /* \n  This is done similarly to how we insert a node at the beginning of a singly linked\n  list, instead we set the previous member of the structure as well\n  */\n  currentNode = malloc(sizeof *currentNode);\n\n  currentNode-\u003enext = NULL;\n  currentNode-\u003eprevious = NULL;\n  currentNode-\u003edata = value;\n\n  if (*pheadNode == NULL) { /* The list is empty */\n    *pheadNode = currentNode;\n    return;\n  }\n\n  currentNode-\u003enext = *pheadNode;\n  (*pheadNode)-\u003eprevious = currentNode;\n  *pheadNode = currentNode;\n}\n\nvoid insert_at_end(struct Node **pheadNode, int value) {\n  struct Node *currentNode;\n\n  if (NULL == pheadNode)\n  {\n    return;\n  }\n\n  /*\n  This can, again be done easily by being able to have the previous element.  It \n  would also be even more useful to have a pointer to the last node, which is commonly\n  used.\n  */\n  \n  currentNode = malloc(sizeof *currentNode);\n  struct Node *i = *pheadNode;\n\n  currentNode-\u003edata = value;\n  currentNode-\u003enext = NULL;\n  currentNode-\u003eprevious = NULL;\n\n  if (*pheadNode == NULL) {\n    *pheadNode = currentNode;\n    return;\n  }\n\n  while (i-\u003enext != NULL) { /* Go to the end of the list */\n    i = i-\u003enext;\n  }\n\n  i-\u003enext = currentNode;\n  currentNode-\u003eprevious = i;\n}\n\nvoid free_list(struct Node *node) {\n  while (node != NULL) {\n    struct Node *next = node-\u003enext;\n    free(node);\n    node = next;\n  }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935850664,
        "id": "17b1898c-da86-4993-ad31-64392837b725",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935850664,
        "parent_id": "51aa8933-b364-4d85-951f-09eff5dd9f2f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note that sometimes, storing a pointer to the last node is useful (it is more efficient to simply be able to jump straight to the end of the list than to need to iterate through to the end):"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note that sometimes, storing a pointer to the last node is useful (it is more efficient to simply be able to jump straight to the end of the list than to need to iterate through to the end):"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935850665,
        "id": "bd49eb2f-e901-4268-9f01-f990568448d5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935850665,
        "parent_id": "51aa8933-b364-4d85-951f-09eff5dd9f2f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "struct Node *lastNode = NULL;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "struct Node *lastNode = NULL;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935850665,
        "id": "a091e850-340d-4601-a8ad-9b70bceec887",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935850665,
        "parent_id": "51aa8933-b364-4d85-951f-09eff5dd9f2f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In which case, updating it upon changes to the list is needed."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In which case, updating it upon changes to the list is needed."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935850665,
        "id": "45c67c41-0e99-47c1-bfd6-7861f26ddf44",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935850665,
        "parent_id": "51aa8933-b364-4d85-951f-09eff5dd9f2f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Sometimes, a key is also used to identify elements. It is simply a member of the Node structure:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Sometimes, a key is also used to identify elements. It is simply a member of the Node structure:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935850665,
        "id": "32199ed8-9536-427f-995d-4b8dba0c9f35",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935850665,
        "parent_id": "51aa8933-b364-4d85-951f-09eff5dd9f2f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "struct Node {\n  int data;\n  int key;\n  struct Node* next;\n  struct Node* previous;\n};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "struct Node {\n  int data;\n  int key;\n  struct Node* next;\n  struct Node* previous;\n};",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935850665,
        "id": "1f3139f2-3bc3-4d4b-83ed-4dcc5352ce8a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935850665,
        "parent_id": "51aa8933-b364-4d85-951f-09eff5dd9f2f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The key is then used when any tasks are performed on a specific element, like deleting elements."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The key is then used when any tasks are performed on a specific element, like deleting elements."
          }
        ]
      }
    ],
    "title": "A doubly linked list",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}