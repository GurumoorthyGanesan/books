{
  "ID": "da21964e-af52-416b-9a98-a048af54e2f3",
  "Root": {
    "alive": true,
    "content": [
      "c6b5e022-a57e-42c8-9b3f-d8ff225e1f54",
      "6e260e84-9fd9-4484-a455-afd329455de3",
      "8bbdd66b-d7bd-454b-93e2-65565b0664e1",
      "de4544f4-b4a2-4141-a353-4146535adab1",
      "0e2769a6-3884-4d35-8bde-b5542fec3e2b",
      "862dc933-d8f7-4ee5-bd5d-ec2e7b9f4d56",
      "9e20184b-7a2e-4904-99fb-6047d0bf0f84",
      "9d8b1c5b-5e36-40bd-ba31-54b15f7a81ce",
      "4efeb11b-bfcd-4027-b1d1-fd517a73883f",
      "89b7e345-adcc-45ac-81e8-87492e1fb5c0",
      "0ece6d66-c688-4eba-924d-4aa847a659cc",
      "18d2f945-62b3-49af-bc0c-b7c0a242621e",
      "c7385d59-94f9-4989-9ddb-cfc79dc584b8",
      "efaca6d1-98d5-4afb-bdce-2a213c9544ac",
      "8e4b27e6-50c3-49ef-bff7-e1f6d2bde647",
      "3a24a99f-f3ed-409d-bd1a-a9e049381d51"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551936217530,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "da21964e-af52-416b-9a98-a048af54e2f3",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551936217530,
    "parent_id": "1e14553b-8aea-44fb-a0fe-fbc893ff529a",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Same Asterisk Different Meanings"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936217523,
        "id": "c6b5e022-a57e-42c8-9b3f-d8ff225e1f54",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936217523,
        "parent_id": "da21964e-af52-416b-9a98-a048af54e2f3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Premise"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Premise"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936217523,
        "id": "6e260e84-9fd9-4484-a455-afd329455de3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936217523,
        "parent_id": "da21964e-af52-416b-9a98-a048af54e2f3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The most confusing thing surrounding pointer syntax in C and C++ is that there are actually two different meanings that apply when the pointer symbol, the asterisk ("
            ],
            [
              "\\*",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "), is used with a variable."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The most confusing thing surrounding pointer syntax in C and C++ is that there are actually two different meanings that apply when the pointer symbol, the asterisk ("
          },
          {
            "Text": "\\*",
            "AttrFlags": 2
          },
          {
            "Text": "), is used with a variable."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936217524,
        "id": "8bbdd66b-d7bd-454b-93e2-65565b0664e1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936217524,
        "parent_id": "da21964e-af52-416b-9a98-a048af54e2f3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Example"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Example"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936217524,
        "id": "de4544f4-b4a2-4141-a353-4146535adab1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936217524,
        "parent_id": "da21964e-af52-416b-9a98-a048af54e2f3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Firstly, you use "
            ],
            [
              "\\*",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to "
            ],
            [
              "declare",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " a pointer variable."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Firstly, you use "
          },
          {
            "Text": "\\*",
            "AttrFlags": 2
          },
          {
            "Text": " to "
          },
          {
            "Text": "declare",
            "AttrFlags": 1
          },
          {
            "Text": " a pointer variable."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936217524,
        "id": "0e2769a6-3884-4d35-8bde-b5542fec3e2b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936217524,
        "parent_id": "da21964e-af52-416b-9a98-a048af54e2f3",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int i = 5;\n/* 'p' is a pointer to an integer, initialized as NULL */\nint *p = NULL;\n/* '\u0026i' evaluates into address of 'i', which then assigned to 'p' */\np = \u0026i;\n/* 'p' is now holding the address of 'i' */"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int i = 5;\n/* 'p' is a pointer to an integer, initialized as NULL */\nint *p = NULL;\n/* '\u0026i' evaluates into address of 'i', which then assigned to 'p' */\np = \u0026i;\n/* 'p' is now holding the address of 'i' */",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936217524,
        "id": "862dc933-d8f7-4ee5-bd5d-ec2e7b9f4d56",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936217524,
        "parent_id": "da21964e-af52-416b-9a98-a048af54e2f3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When you’re not declaring (or multiplying), "
            ],
            [
              "\\*",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is used to "
            ],
            [
              "dereference",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " a pointer variable:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When you’re not declaring (or multiplying), "
          },
          {
            "Text": "\\*",
            "AttrFlags": 2
          },
          {
            "Text": " is used to "
          },
          {
            "Text": "dereference",
            "AttrFlags": 1
          },
          {
            "Text": " a pointer variable:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936217524,
        "id": "9e20184b-7a2e-4904-99fb-6047d0bf0f84",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936217524,
        "parent_id": "da21964e-af52-416b-9a98-a048af54e2f3",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "*p = 123;\n/* 'p' was pointing to 'i', so this changes value of 'i' to 123 */"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "*p = 123;\n/* 'p' was pointing to 'i', so this changes value of 'i' to 123 */",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936217524,
        "id": "9d8b1c5b-5e36-40bd-ba31-54b15f7a81ce",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936217524,
        "parent_id": "da21964e-af52-416b-9a98-a048af54e2f3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When you want an existing pointer variable to hold address of other variable, you "
            ],
            [
              "don’t",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " use "
            ],
            [
              "\\*",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", but do it like this:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When you want an existing pointer variable to hold address of other variable, you "
          },
          {
            "Text": "don’t",
            "AttrFlags": 1
          },
          {
            "Text": " use "
          },
          {
            "Text": "\\*",
            "AttrFlags": 2
          },
          {
            "Text": ", but do it like this:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936217524,
        "id": "4efeb11b-bfcd-4027-b1d1-fd517a73883f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936217524,
        "parent_id": "da21964e-af52-416b-9a98-a048af54e2f3",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "p = \u0026another_variable;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "p = \u0026another_variable;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936217525,
        "id": "89b7e345-adcc-45ac-81e8-87492e1fb5c0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936217525,
        "parent_id": "da21964e-af52-416b-9a98-a048af54e2f3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A common confusion among C-programming newbies arises when they declare and initialize a pointer variable at the same time."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A common confusion among C-programming newbies arises when they declare and initialize a pointer variable at the same time."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936217525,
        "id": "0ece6d66-c688-4eba-924d-4aa847a659cc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936217525,
        "parent_id": "da21964e-af52-416b-9a98-a048af54e2f3",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int *p = \u0026i;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int *p = \u0026i;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936217529,
        "id": "18d2f945-62b3-49af-bc0c-b7c0a242621e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936217529,
        "parent_id": "da21964e-af52-416b-9a98-a048af54e2f3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Since "
            ],
            [
              "int i = 5;",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "int i; i = 5;",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " give the same result, some of them might thought "
            ],
            [
              "int *p = \u0026i;",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "int *p; *p = \u0026i;",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " give the same result too. The fact is, no, "
            ],
            [
              "int *p; *p = \u0026i;",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will attempt to deference an "
            ],
            [
              "uninitialized",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " pointer which will result in UB. Never use "
            ],
            [
              "\\*",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " when you’re not declaring nor dereferencing a pointer."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Since "
          },
          {
            "Text": "int i = 5;",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "int i; i = 5;",
            "AttrFlags": 2
          },
          {
            "Text": " give the same result, some of them might thought "
          },
          {
            "Text": "int *p = \u0026i;",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "int *p; *p = \u0026i;",
            "AttrFlags": 2
          },
          {
            "Text": " give the same result too. The fact is, no, "
          },
          {
            "Text": "int *p; *p = \u0026i;",
            "AttrFlags": 2
          },
          {
            "Text": " will attempt to deference an "
          },
          {
            "Text": "uninitialized",
            "AttrFlags": 1
          },
          {
            "Text": " pointer which will result in UB. Never use "
          },
          {
            "Text": "\\*",
            "AttrFlags": 2
          },
          {
            "Text": " when you’re not declaring nor dereferencing a pointer."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936217529,
        "id": "c7385d59-94f9-4989-9ddb-cfc79dc584b8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936217529,
        "parent_id": "da21964e-af52-416b-9a98-a048af54e2f3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Conclusion"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Conclusion"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936217530,
        "id": "efaca6d1-98d5-4afb-bdce-2a213c9544ac",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936217530,
        "parent_id": "da21964e-af52-416b-9a98-a048af54e2f3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The asterisk ("
            ],
            [
              "\\*",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") has two distinct meanings within C in relation to pointers, depending on where it’s used. When used within a "
            ],
            [
              "variable declaration",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", the value on the right hand side of the equals side should be a "
            ],
            [
              "pointer value",
              [
                [
                  "b"
                ],
                [
                  "i"
                ]
              ]
            ],
            [
              " to an "
            ],
            [
              "address",
              [
                [
                  "b"
                ],
                [
                  "i"
                ]
              ]
            ],
            [
              " in memory. When used with an already "
            ],
            [
              "declared variable",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", the asterisk will "
            ],
            [
              "dereference",
              [
                [
                  "b"
                ],
                [
                  "i"
                ]
              ]
            ],
            [
              " the pointer value, following it to the pointed-to place in memory, and allowing the value stored there to be assigned or retrieved."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The asterisk ("
          },
          {
            "Text": "\\*",
            "AttrFlags": 2
          },
          {
            "Text": ") has two distinct meanings within C in relation to pointers, depending on where it’s used. When used within a "
          },
          {
            "Text": "variable declaration",
            "AttrFlags": 1
          },
          {
            "Text": ", the value on the right hand side of the equals side should be a "
          },
          {
            "Text": "pointer value",
            "AttrFlags": 5
          },
          {
            "Text": " to an "
          },
          {
            "Text": "address",
            "AttrFlags": 5
          },
          {
            "Text": " in memory. When used with an already "
          },
          {
            "Text": "declared variable",
            "AttrFlags": 1
          },
          {
            "Text": ", the asterisk will "
          },
          {
            "Text": "dereference",
            "AttrFlags": 5
          },
          {
            "Text": " the pointer value, following it to the pointed-to place in memory, and allowing the value stored there to be assigned or retrieved."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936217530,
        "id": "8e4b27e6-50c3-49ef-bff7-e1f6d2bde647",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936217530,
        "parent_id": "da21964e-af52-416b-9a98-a048af54e2f3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Takeaway"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Takeaway"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936217530,
        "id": "3a24a99f-f3ed-409d-bd1a-a9e049381d51",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936217530,
        "parent_id": "da21964e-af52-416b-9a98-a048af54e2f3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It is important to mind your P’s and Q’s, so to speak, when dealing with pointers. Be mindful of when you’re using the asterisk, and what it means when you use it there. Overlooking this tiny detail could result in buggy and/or undefined behavior that you really don’t want to have to deal with."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It is important to mind your P’s and Q’s, so to speak, when dealing with pointers. Be mindful of when you’re using the asterisk, and what it means when you use it there. Overlooking this tiny detail could result in buggy and/or undefined behavior that you really don’t want to have to deal with."
          }
        ]
      }
    ],
    "title": "Same Asterisk Different Meanings",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}