{
  "ID": "14e4d167-6bf0-4159-ad0d-42b923faadac",
  "Root": {
    "alive": true,
    "content": [
      "0a9adcca-fc1f-4cff-83e9-f74d51247978",
      "35b1ecc3-19d8-46d4-a7d7-2a4aeed1a679",
      "f24e2988-3134-4cee-9adf-dcd1274ad2fe",
      "14e5a0c2-c891-4e12-abcf-5f767c178c21",
      "60b402ec-5a5c-4370-9480-da6b218bc45b",
      "559a0f16-8c1b-4844-8cc3-ba578953b929",
      "e3eba79f-32e9-4ada-89bc-e912c26bb450",
      "f7ee636b-3cd3-4198-9cd1-32dd014338c1",
      "90c6d711-910d-4462-9529-07d7a1f6f61d",
      "70f0e660-6a8c-4380-a3cd-667792f725ab"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551935777841,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "14e4d167-6bf0-4159-ad0d-42b923faadac",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551935777841,
    "parent_id": "68e74303-cec6-4c9d-a46e-83274bc84bf4",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Function-like macros"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935777837,
        "id": "0a9adcca-fc1f-4cff-83e9-f74d51247978",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935777837,
        "parent_id": "14e4d167-6bf0-4159-ad0d-42b923faadac",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Function-like macros are similar to "
            ],
            [
              "inline",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " functions, these are useful in some cases, such as temporary debug log:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Function-like macros are similar to "
          },
          {
            "Text": "inline",
            "AttrFlags": 2
          },
          {
            "Text": " functions, these are useful in some cases, such as temporary debug log:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935777838,
        "id": "35b1ecc3-19d8-46d4-a7d7-2a4aeed1a679",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935777838,
        "parent_id": "14e4d167-6bf0-4159-ad0d-42b923faadac",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#ifdef DEBUG\n# define LOGFILENAME \"/tmp/logfile.log\"\n\n# define LOG(str) do {                            \\\n  FILE *fp = fopen(LOGFILENAME, \"a\");            \\\n  if (fp) {                                       \\\n    fprintf(fp, \"%s:%d %s\\n\", __FILE__, __LINE__, \\\n                 /* don't print null pointer */   \\\n                 str ?str :\"\u003cnull\u003e\");             \\\n    fclose(fp);                                   \\\n  }                                               \\\n  else {                                          \\\n    perror(\"Opening '\" LOGFILENAME \"' failed\");   \\\n  }                                               \\\n} while (0)\n#else\n  /* Make it a NOOP if DEBUG is not defined. */\n# define LOG(LINE) (void)0\n#endif"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#ifdef DEBUG\n# define LOGFILENAME \"/tmp/logfile.log\"\n\n# define LOG(str) do {                            \\\n  FILE *fp = fopen(LOGFILENAME, \"a\");            \\\n  if (fp) {                                       \\\n    fprintf(fp, \"%s:%d %s\\n\", __FILE__, __LINE__, \\\n                 /* don't print null pointer */   \\\n                 str ?str :\"\u003cnull\u003e\");             \\\n    fclose(fp);                                   \\\n  }                                               \\\n  else {                                          \\\n    perror(\"Opening '\" LOGFILENAME \"' failed\");   \\\n  }                                               \\\n} while (0)\n#else\n  /* Make it a NOOP if DEBUG is not defined. */\n# define LOG(LINE) (void)0\n#endif",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935777838,
        "id": "f24e2988-3134-4cee-9adf-dcd1274ad2fe",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935777838,
        "parent_id": "14e4d167-6bf0-4159-ad0d-42b923faadac",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cstdio.h\u003e\n\nint main(int argc, char* argv[])\n{\n    if (argc \u003e 1)\n        LOG(\"There are command line arguments\");\n    else\n        LOG(\"No command line arguments\");\n    return 0;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cstdio.h\u003e\n\nint main(int argc, char* argv[])\n{\n    if (argc \u003e 1)\n        LOG(\"There are command line arguments\");\n    else\n        LOG(\"No command line arguments\");\n    return 0;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935777838,
        "id": "14e5a0c2-c891-4e12-abcf-5f767c178c21",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935777838,
        "parent_id": "14e4d167-6bf0-4159-ad0d-42b923faadac",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Here in both cases (with "
            ],
            [
              "DEBUG",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or not) the call behaves the same way as a function with "
            ],
            [
              "void",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " return type. This ensures that the "
            ],
            [
              "if/else",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " conditionals are interpreted as expected."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Here in both cases (with "
          },
          {
            "Text": "DEBUG",
            "AttrFlags": 2
          },
          {
            "Text": " or not) the call behaves the same way as a function with "
          },
          {
            "Text": "void",
            "AttrFlags": 2
          },
          {
            "Text": " return type. This ensures that the "
          },
          {
            "Text": "if/else",
            "AttrFlags": 2
          },
          {
            "Text": " conditionals are interpreted as expected."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935777839,
        "id": "60b402ec-5a5c-4370-9480-da6b218bc45b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935777839,
        "parent_id": "14e4d167-6bf0-4159-ad0d-42b923faadac",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In the "
            ],
            [
              "DEBUG",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " case this is implemented through a "
            ],
            [
              "do { ... } while(0)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " construct. In the other case, "
            ],
            [
              "(void)0",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is a statement with no side effect that is just ignored."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In the "
          },
          {
            "Text": "DEBUG",
            "AttrFlags": 2
          },
          {
            "Text": " case this is implemented through a "
          },
          {
            "Text": "do { ... } while(0)",
            "AttrFlags": 2
          },
          {
            "Text": " construct. In the other case, "
          },
          {
            "Text": "(void)0",
            "AttrFlags": 2
          },
          {
            "Text": " is a statement with no side effect that is just ignored."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935777839,
        "id": "559a0f16-8c1b-4844-8cc3-ba578953b929",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935777839,
        "parent_id": "14e4d167-6bf0-4159-ad0d-42b923faadac",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "An alternative for the latter would be"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "An alternative for the latter would be"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935777839,
        "id": "e3eba79f-32e9-4ada-89bc-e912c26bb450",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935777839,
        "parent_id": "14e4d167-6bf0-4159-ad0d-42b923faadac",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#define LOG(LINE) do { /* empty */ } while (0)"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#define LOG(LINE) do { /* empty */ } while (0)",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935777839,
        "id": "f7ee636b-3cd3-4198-9cd1-32dd014338c1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935777839,
        "parent_id": "14e4d167-6bf0-4159-ad0d-42b923faadac",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "such that it is in all cases syntactically equivalent to the first."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "such that it is in all cases syntactically equivalent to the first."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935777841,
        "id": "90c6d711-910d-4462-9529-07d7a1f6f61d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935777841,
        "parent_id": "14e4d167-6bf0-4159-ad0d-42b923faadac",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If you use GCC, you can also implement a function-like macro that returns result using a non-standard GNU extension — "
            ],
            [
              "statement expressions",
              [
                [
                  "a",
                  "https://gcc.gnu.org/onlinedocs/gcc-7.1.0/gcc/Statement-Exprs.html#Statement-Exprs"
                ]
              ]
            ],
            [
              ". For example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If you use GCC, you can also implement a function-like macro that returns result using a non-standard GNU extension — "
          },
          {
            "Text": "statement expressions",
            "Link": "https://gcc.gnu.org/onlinedocs/gcc-7.1.0/gcc/Statement-Exprs.html#Statement-Exprs"
          },
          {
            "Text": ". For example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935777841,
        "id": "70f0e660-6a8c-4380-a3cd-667792f725ab",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935777841,
        "parent_id": "14e4d167-6bf0-4159-ad0d-42b923faadac",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cstdio.h\u003e\n\n#define POW(X, Y) \\\n({ \\\n        int i, r = 1; \\\n        for (i = 0; i \u003c Y; ++i) \\\n                r *= X; \\\n        r; \\ // returned value is result of last operation\n})\n\nint main(void)\n{\n        int result;\n\n        result = POW(2, 3); \n        printf(\"Result: %d\\n\", result);\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cstdio.h\u003e\n\n#define POW(X, Y) \\\n({ \\\n        int i, r = 1; \\\n        for (i = 0; i \u003c Y; ++i) \\\n                r *= X; \\\n        r; \\ // returned value is result of last operation\n})\n\nint main(void)\n{\n        int result;\n\n        result = POW(2, 3); \n        printf(\"Result: %d\\n\", result);\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "Function-like macros",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}