{
  "ID": "7ead4c02-b9d2-4e48-b978-974b0890e482",
  "Root": {
    "alive": true,
    "content": [
      "410a7f18-2f1e-4c39-b800-41a9867c5446",
      "000b319c-684e-484a-9edb-a8c29fd430d6",
      "fd8abc24-83a9-46e0-8d05-ab5d93c0350d",
      "8c8e09fc-36a9-4172-bd99-8594a69a905f",
      "0f548a67-5c68-457a-9538-5a4b436ec948"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551937260331,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "7ead4c02-b9d2-4e48-b978-974b0890e482",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551937260331,
    "parent_id": "f4f6d384-72dd-4d02-aa47-f083a22f6481",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Classifying characters read from a stream"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551937260325,
        "id": "410a7f18-2f1e-4c39-b800-41a9867c5446",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551937260325,
        "parent_id": "7ead4c02-b9d2-4e48-b978-974b0890e482",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cctype.h\u003e\n#include \u003cstdio.h\u003e\n\ntypedef struct {\n  size_t space;\n  size_t alnum;\n  size_t punct;\n} chartypes;\n\nchartypes classify(FILE *f) {\n  chartypes types = { 0, 0, 0 };\n  int ch;\n\n  while ((ch = fgetc(f)) != EOF) {\n    types.space += !!isspace(ch);\n    types.alnum += !!isalnum(ch);\n    types.punct += !!ispunct(ch);\n  }\n\n  return types;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cctype.h\u003e\n#include \u003cstdio.h\u003e\n\ntypedef struct {\n  size_t space;\n  size_t alnum;\n  size_t punct;\n} chartypes;\n\nchartypes classify(FILE *f) {\n  chartypes types = { 0, 0, 0 };\n  int ch;\n\n  while ((ch = fgetc(f)) != EOF) {\n    types.space += !!isspace(ch);\n    types.alnum += !!isalnum(ch);\n    types.punct += !!ispunct(ch);\n  }\n\n  return types;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551937260328,
        "id": "000b319c-684e-484a-9edb-a8c29fd430d6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551937260328,
        "parent_id": "7ead4c02-b9d2-4e48-b978-974b0890e482",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "classify",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " function reads characters from a stream and counts the number of spaces, alphanumeric and punctuation characters. It avoids several pitfalls."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "classify",
            "AttrFlags": 2
          },
          {
            "Text": " function reads characters from a stream and counts the number of spaces, alphanumeric and punctuation characters. It avoids several pitfalls."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551937260328,
        "id": "fd8abc24-83a9-46e0-8d05-ab5d93c0350d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551937260328,
        "parent_id": "7ead4c02-b9d2-4e48-b978-974b0890e482",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When reading a character from a stream, the result is saved as an "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", since otherwise there would be an ambiguity between reading "
            ],
            [
              "EOF",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (the end-of-file marker) and a character that has the same bit pattern."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "When reading a character from a stream, the result is saved as an "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": ", since otherwise there would be an ambiguity between reading "
          },
          {
            "Text": "EOF",
            "AttrFlags": 2
          },
          {
            "Text": " (the end-of-file marker) and a character that has the same bit pattern."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551937260330,
        "id": "8c8e09fc-36a9-4172-bd99-8594a69a905f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551937260330,
        "parent_id": "7ead4c02-b9d2-4e48-b978-974b0890e482",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The character classification functions (e.g. "
            ],
            [
              "isspace",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") expect their argument to be "
            ],
            [
              "either representable as an ",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              "unsigned char",
              [
                [
                  "i"
                ],
                [
                  "c"
                ]
              ]
            ],
            [
              ", or the value of the ",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              "EOF",
              [
                [
                  "i"
                ],
                [
                  "c"
                ]
              ]
            ],
            [
              " macro",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ". Since this is exactly what the "
            ],
            [
              "fgetc",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " returns, there is no need for conversion here."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "The character classification functions (e.g. "
          },
          {
            "Text": "isspace",
            "AttrFlags": 2
          },
          {
            "Text": ") expect their argument to be "
          },
          {
            "Text": "either representable as an ",
            "AttrFlags": 4
          },
          {
            "Text": "unsigned char",
            "AttrFlags": 6
          },
          {
            "Text": ", or the value of the ",
            "AttrFlags": 4
          },
          {
            "Text": "EOF",
            "AttrFlags": 6
          },
          {
            "Text": " macro",
            "AttrFlags": 4
          },
          {
            "Text": ". Since this is exactly what the "
          },
          {
            "Text": "fgetc",
            "AttrFlags": 2
          },
          {
            "Text": " returns, there is no need for conversion here."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551937260331,
        "id": "0f548a67-5c68-457a-9538-5a4b436ec948",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551937260331,
        "parent_id": "7ead4c02-b9d2-4e48-b978-974b0890e482",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The return value of the character classification functions only distinguishes between zero (meaning "
            ],
            [
              "false",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") and nonzero (meaning "
            ],
            [
              "true",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "). For counting the number of occurrences, this value needs to be converted to a 1 or 0, which is done by the double negation, "
            ],
            [
              "!!",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "The return value of the character classification functions only distinguishes between zero (meaning "
          },
          {
            "Text": "false",
            "AttrFlags": 2
          },
          {
            "Text": ") and nonzero (meaning "
          },
          {
            "Text": "true",
            "AttrFlags": 2
          },
          {
            "Text": "). For counting the number of occurrences, this value needs to be converted to a 1 or 0, which is done by the double negation, "
          },
          {
            "Text": "!!",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      }
    ],
    "title": "Classifying characters read from a stream",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}