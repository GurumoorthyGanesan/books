{
  "ID": "8155a5e3-7d76-47d0-80ab-66fafc61bf8c",
  "Root": {
    "alive": true,
    "content": [
      "b44ab6d3-7391-4446-b5b9-8e03c2519d34",
      "32ca5197-ddc0-48fa-a218-b2e2142e00f8",
      "be33c881-c65f-4657-b65a-dec310743a34",
      "8c6c99d6-f885-4ef7-b662-f9d57c290cb3",
      "51d190ab-0118-49cf-a527-5a7079ab7f84",
      "15bdfafc-e402-49b0-93c6-7acbfa1d8520",
      "d5c35178-d4d9-4b87-9665-2d795f69fb8e",
      "323946c8-c259-4cfb-b3e8-eca204c62fe0",
      "58d4a523-51c0-4ca8-b4b5-9e36eda0c691",
      "bcef6b99-bdc6-4944-a700-387e8ec6d270",
      "f235e380-4692-4d9a-84c6-000162441aaa",
      "14f3637a-39ab-4e86-af26-fda84c24679d",
      "2e75c6d4-7ebc-4338-9f8f-4687cfb87741",
      "06554a73-cb06-4030-b6bc-fff4c8ccb9df",
      "1527e9be-c685-4f45-9f8b-7d382c765a4a",
      "e9c3887d-3a8a-4cbf-a145-c54dfef0494b",
      "06f0457d-e8f8-4e9a-b49e-606dc759d5ba",
      "d86deaba-8009-411d-8789-39372d618fce",
      "81b86054-a8f6-4a78-8433-d505009d2dfd",
      "84a59b94-2f2a-4c46-928d-85b482ccb07c",
      "518ba7af-19ae-437a-a10b-46d788e73816",
      "833e7b29-cd64-471b-b161-8817ebddbace",
      "dca3d484-3fc8-4485-92d7-827f5098637f"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551936603368,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "8155a5e3-7d76-47d0-80ab-66fafc61bf8c",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551936603368,
    "parent_id": "f9df1d91-a33b-4691-8612-45ec5ebf45e8",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Typedef for Function Pointers"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936603362,
        "id": "b44ab6d3-7391-4446-b5b9-8e03c2519d34",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936603362,
        "parent_id": "8155a5e3-7d76-47d0-80ab-66fafc61bf8c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We can use "
            ],
            [
              "typedef",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to simplify the usage of function pointers. Imagine we have some functions, all having the same signature, that use their argument to print out something in different ways:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "We can use "
          },
          {
            "Text": "typedef",
            "AttrFlags": 2
          },
          {
            "Text": " to simplify the usage of function pointers. Imagine we have some functions, all having the same signature, that use their argument to print out something in different ways:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936603364,
        "id": "32ca5197-ddc0-48fa-a218-b2e2142e00f8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936603364,
        "parent_id": "8155a5e3-7d76-47d0-80ab-66fafc61bf8c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include\u003cstdio.h\u003e\n\nvoid print_to_n(int n)\n{\n    for (int i = 1; i \u003c= n; ++i)\n        printf(\"%d\\n\", i);\n}\n\nvoid print_n(int n)\n{\n    printf(\"%d\\n, n);\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include\u003cstdio.h\u003e\n\nvoid print_to_n(int n)\n{\n    for (int i = 1; i \u003c= n; ++i)\n        printf(\"%d\\n\", i);\n}\n\nvoid print_n(int n)\n{\n    printf(\"%d\\n, n);\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936603364,
        "id": "be33c881-c65f-4657-b65a-dec310743a34",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936603364,
        "parent_id": "8155a5e3-7d76-47d0-80ab-66fafc61bf8c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Now we can use a "
            ],
            [
              "typedef",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to create a named function pointer type called printer:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Now we can use a "
          },
          {
            "Text": "typedef",
            "AttrFlags": 2
          },
          {
            "Text": " to create a named function pointer type called printer:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936603365,
        "id": "8c6c99d6-f885-4ef7-b662-f9d57c290cb3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936603365,
        "parent_id": "8155a5e3-7d76-47d0-80ab-66fafc61bf8c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "typedef void (*printer_t)(int);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "typedef void (*printer_t)(int);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936603365,
        "id": "51d190ab-0118-49cf-a527-5a7079ab7f84",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936603365,
        "parent_id": "8155a5e3-7d76-47d0-80ab-66fafc61bf8c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This creates a type, named "
            ],
            [
              "printer_t",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " for a pointer to a function that takes a single "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " argument and returns nothing, which matches the signature of the functions we have above. To use it we create a variable of the created type and assign it a pointer to one of the functions in question:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This creates a type, named "
          },
          {
            "Text": "printer_t",
            "AttrFlags": 2
          },
          {
            "Text": " for a pointer to a function that takes a single "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": " argument and returns nothing, which matches the signature of the functions we have above. To use it we create a variable of the created type and assign it a pointer to one of the functions in question:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936603365,
        "id": "15bdfafc-e402-49b0-93c6-7acbfa1d8520",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936603365,
        "parent_id": "8155a5e3-7d76-47d0-80ab-66fafc61bf8c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "printer_t p = \u0026print_to_n;\nvoid (*p)(int) = \u0026print_to_n; // This would be required without the type"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "printer_t p = \u0026print_to_n;\nvoid (*p)(int) = \u0026print_to_n; // This would be required without the type",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936603365,
        "id": "d5c35178-d4d9-4b87-9665-2d795f69fb8e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936603365,
        "parent_id": "8155a5e3-7d76-47d0-80ab-66fafc61bf8c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Then to call the function pointed to by the function pointer variable:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Then to call the function pointed to by the function pointer variable:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936603365,
        "id": "323946c8-c259-4cfb-b3e8-eca204c62fe0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936603365,
        "parent_id": "8155a5e3-7d76-47d0-80ab-66fafc61bf8c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "p(5);           // Prints 1 2 3 4 5 on separate lines\n(*p)(5);        // So does this"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "p(5);           // Prints 1 2 3 4 5 on separate lines\n(*p)(5);        // So does this",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936603365,
        "id": "58d4a523-51c0-4ca8-b4b5-9e36eda0c691",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936603365,
        "parent_id": "8155a5e3-7d76-47d0-80ab-66fafc61bf8c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Thus the "
            ],
            [
              "typedef",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " allows a simpler syntax when dealing with function pointers. This becomes more apparent when function pointers are used in more complex situations, such as arguments to functions."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Thus the "
          },
          {
            "Text": "typedef",
            "AttrFlags": 2
          },
          {
            "Text": " allows a simpler syntax when dealing with function pointers. This becomes more apparent when function pointers are used in more complex situations, such as arguments to functions."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936603365,
        "id": "bcef6b99-bdc6-4944-a700-387e8ec6d270",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936603365,
        "parent_id": "8155a5e3-7d76-47d0-80ab-66fafc61bf8c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If you are using a function that takes a function pointer as a parameter without a function pointer type defined the function definition would be,"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If you are using a function that takes a function pointer as a parameter without a function pointer type defined the function definition would be,"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936603366,
        "id": "f235e380-4692-4d9a-84c6-000162441aaa",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936603366,
        "parent_id": "8155a5e3-7d76-47d0-80ab-66fafc61bf8c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "void foo (void (*printer)(int), int y){\n    //code\n    printer(y);\n    //code\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "void foo (void (*printer)(int), int y){\n    //code\n    printer(y);\n    //code\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936603366,
        "id": "14f3637a-39ab-4e86-af26-fda84c24679d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936603366,
        "parent_id": "8155a5e3-7d76-47d0-80ab-66fafc61bf8c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "However, with the "
            ],
            [
              "typedef",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " it is:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "However, with the "
          },
          {
            "Text": "typedef",
            "AttrFlags": 2
          },
          {
            "Text": " it is:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936603366,
        "id": "2e75c6d4-7ebc-4338-9f8f-4687cfb87741",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936603366,
        "parent_id": "8155a5e3-7d76-47d0-80ab-66fafc61bf8c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "void foo (printer_t printer, int y){\n    //code\n    printer(y);\n    //code\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "void foo (printer_t printer, int y){\n    //code\n    printer(y);\n    //code\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936603366,
        "id": "06554a73-cb06-4030-b6bc-fff4c8ccb9df",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936603366,
        "parent_id": "8155a5e3-7d76-47d0-80ab-66fafc61bf8c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Likewise functions can return function pointers and again, the use of a "
            ],
            [
              "typedef",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can make the syntax simpler when doing so."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Likewise functions can return function pointers and again, the use of a "
          },
          {
            "Text": "typedef",
            "AttrFlags": 2
          },
          {
            "Text": " can make the syntax simpler when doing so."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936603366,
        "id": "1527e9be-c685-4f45-9f8b-7d382c765a4a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936603366,
        "parent_id": "8155a5e3-7d76-47d0-80ab-66fafc61bf8c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A classic example is the "
            ],
            [
              "signal",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " function from "
            ],
            [
              "\u003csignal.h\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". The declaration for it (from the C standard) is:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A classic example is the "
          },
          {
            "Text": "signal",
            "AttrFlags": 2
          },
          {
            "Text": " function from "
          },
          {
            "Text": "\u003csignal.h\u003e",
            "AttrFlags": 2
          },
          {
            "Text": ". The declaration for it (from the C standard) is:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936603366,
        "id": "e9c3887d-3a8a-4cbf-a145-c54dfef0494b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936603366,
        "parent_id": "8155a5e3-7d76-47d0-80ab-66fafc61bf8c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "void (*signal(int sig, void (*func)(int)))(int);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "void (*signal(int sig, void (*func)(int)))(int);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936603367,
        "id": "06f0457d-e8f8-4e9a-b49e-606dc759d5ba",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936603367,
        "parent_id": "8155a5e3-7d76-47d0-80ab-66fafc61bf8c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "That’s a function that takes two arguments — an "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and a pointer to a function which takes an "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " as an argument and returns nothing — and which returns a pointer to function like its second argument."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "That’s a function that takes two arguments — an "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": " and a pointer to a function which takes an "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": " as an argument and returns nothing — and which returns a pointer to function like its second argument."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936603367,
        "id": "d86deaba-8009-411d-8789-39372d618fce",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936603367,
        "parent_id": "8155a5e3-7d76-47d0-80ab-66fafc61bf8c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If we defined a type "
            ],
            [
              "SigCatcher",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " as an alias for the pointer to function type:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If we defined a type "
          },
          {
            "Text": "SigCatcher",
            "AttrFlags": 2
          },
          {
            "Text": " as an alias for the pointer to function type:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936603367,
        "id": "81b86054-a8f6-4a78-8433-d505009d2dfd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936603367,
        "parent_id": "8155a5e3-7d76-47d0-80ab-66fafc61bf8c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "typedef void (*SigCatcher)(int);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "typedef void (*SigCatcher)(int);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936603367,
        "id": "84a59b94-2f2a-4c46-928d-85b482ccb07c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936603367,
        "parent_id": "8155a5e3-7d76-47d0-80ab-66fafc61bf8c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "then we could declare "
            ],
            [
              "signal()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " using:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "then we could declare "
          },
          {
            "Text": "signal()",
            "AttrFlags": 2
          },
          {
            "Text": " using:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936603367,
        "id": "518ba7af-19ae-437a-a10b-46d788e73816",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936603367,
        "parent_id": "8155a5e3-7d76-47d0-80ab-66fafc61bf8c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "SigCatcher signal(int sig, SigCatcher func);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "SigCatcher signal(int sig, SigCatcher func);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936603368,
        "id": "833e7b29-cd64-471b-b161-8817ebddbace",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936603368,
        "parent_id": "8155a5e3-7d76-47d0-80ab-66fafc61bf8c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "On the whole, this is easier to understand (even though the C standard did not elect to define a type to do the job). The "
            ],
            [
              "signal",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " function takes two arguments, an "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and a "
            ],
            [
              "SigCatcher",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", and it returns a "
            ],
            [
              "SigCatcher",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " — where a "
            ],
            [
              "SigCatcher",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is a pointer to a function that takes an "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " argument and returns nothing."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "On the whole, this is easier to understand (even though the C standard did not elect to define a type to do the job). The "
          },
          {
            "Text": "signal",
            "AttrFlags": 2
          },
          {
            "Text": " function takes two arguments, an "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": " and a "
          },
          {
            "Text": "SigCatcher",
            "AttrFlags": 2
          },
          {
            "Text": ", and it returns a "
          },
          {
            "Text": "SigCatcher",
            "AttrFlags": 2
          },
          {
            "Text": " — where a "
          },
          {
            "Text": "SigCatcher",
            "AttrFlags": 2
          },
          {
            "Text": " is a pointer to a function that takes an "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": " argument and returns nothing."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936603368,
        "id": "dca3d484-3fc8-4485-92d7-827f5098637f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936603368,
        "parent_id": "8155a5e3-7d76-47d0-80ab-66fafc61bf8c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Although using "
            ],
            [
              "typedef",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " names for pointer to function types makes life easier, it can also lead to confusion for others who will maintain your code later on, so use with caution and proper documentation. See also https://stackoverflow.com/documentation/c/250/function-pointers."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Although using "
          },
          {
            "Text": "typedef",
            "AttrFlags": 2
          },
          {
            "Text": " names for pointer to function types makes life easier, it can also lead to confusion for others who will maintain your code later on, so use with caution and proper documentation. See also https://stackoverflow.com/documentation/c/250/function-pointers."
          }
        ]
      }
    ],
    "title": "Typedef for Function Pointers",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}