{
  "ID": "632e5272-7cc3-466b-abc3-ba97ba450943",
  "Root": {
    "alive": true,
    "content": [
      "b33c15fe-8776-46d1-8784-1e71adea4a97",
      "4ac225ff-f54a-4a4a-9f1c-8dc12adca88c",
      "257aacc6-d36d-4619-be7c-eeb56b0417b7",
      "cf6f10dd-cc5a-44d1-98c2-55a66e3e1758",
      "77f94f22-02f6-4ae6-9349-cc32de2c1d0a",
      "97f56447-5e73-4d71-ada8-8b3eaf26811e",
      "754e7bb6-e3e4-447f-8956-ada40a732bd2",
      "7d2ac380-e9ab-427f-a2f9-855cd3dfc77e",
      "0e2ffdf9-d624-4786-954c-cefc5ee9e041",
      "d26f0e85-572a-41b6-9bea-3cc245cb86ed",
      "e0064bfe-3898-4d7b-a616-78091f6c21e1",
      "81ef99dc-9cd1-4edc-a379-ccb26eee4f74",
      "dd821d7a-a2fe-4642-aa9d-934251703bb6",
      "da8a9232-ba54-4020-8533-2d8ec2821792",
      "89dd69c6-6072-42f1-8544-ac0be7e7ef99",
      "e8328cc8-e284-4d13-930e-45fb2768326d",
      "a71dd64c-0239-4cf2-820a-eaf83692878b",
      "b9829e0d-4e33-4301-ba15-4b41467e0400",
      "30b93ebd-de87-47e3-ad6b-df038e4a047a",
      "6efe847a-13d4-4e47-9844-5e67d7b028ac",
      "7d518dc7-7296-47f9-8279-8131e108ea2d",
      "97495d8d-7267-4e4f-b973-9d8da5c3dcd6",
      "9de33c65-7dd4-46f2-bc5a-18ecb46b5a3c",
      "fefb4bbb-c99f-483a-a2b7-72be634b9f75",
      "0e06c789-d9a6-4bfa-b846-611f55278551",
      "13b39136-ca17-46c8-83b4-3609600bf716",
      "d58472fe-a961-4e24-8502-dad6bba3acfb",
      "3be1e1e2-c7f1-4c79-bc39-666966f2a7d3",
      "23b08da6-2653-4b9a-8dd8-5d6dcfebc2a2",
      "b0d416b6-50cc-475d-8570-54c18deb7435",
      "d8dfce15-4cad-4a8a-a192-a038fee80386",
      "a08ef5b3-6685-4e5b-ac0c-07f1582da1ce",
      "abe192f6-f26e-481f-b9ac-22217e2888c5",
      "5f4398a1-1b6e-4b57-a51f-8ba10f1ecccd",
      "82de3d72-d413-4130-8c41-30879db46787",
      "646eb7ba-8620-49e9-af3f-81dd1ceff81d",
      "e631e456-ce42-4cb8-9070-b154dafd81b1"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551936206198,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "632e5272-7cc3-466b-abc3-ba97ba450943",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551936206198,
    "parent_id": "1e14553b-8aea-44fb-a0fe-fbc893ff529a",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Common errors"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936206186,
        "id": "b33c15fe-8776-46d1-8784-1e71adea4a97",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936206186,
        "parent_id": "632e5272-7cc3-466b-abc3-ba97ba450943",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Improper use of pointers are frequently a source of bugs that can include security bugs or program crashes, most often due to segmentation faults."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Improper use of pointers are frequently a source of bugs that can include security bugs or program crashes, most often due to segmentation faults."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936206189,
        "id": "4ac225ff-f54a-4a4a-9f1c-8dc12adca88c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936206189,
        "parent_id": "632e5272-7cc3-466b-abc3-ba97ba450943",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Not checking for allocation failures"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Not checking for allocation failures"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936206191,
        "id": "257aacc6-d36d-4619-be7c-eeb56b0417b7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936206191,
        "parent_id": "632e5272-7cc3-466b-abc3-ba97ba450943",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Memory allocation is not guaranteed to succeed, and may instead return a "
            ],
            [
              "NULL",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " pointer. Using the returned value, without checking if the allocation is successful, invokes "
            ],
            [
              "undefined behavior",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c/364/undefined-behavior"
                ]
              ]
            ],
            [
              ". This usually leads to a crash, but there is no guarantee that a crash will happen so relying on that can also lead to problems."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Memory allocation is not guaranteed to succeed, and may instead return a "
          },
          {
            "Text": "NULL",
            "AttrFlags": 2
          },
          {
            "Text": " pointer. Using the returned value, without checking if the allocation is successful, invokes "
          },
          {
            "Text": "undefined behavior",
            "Link": "http://stackoverflow.com/documentation/c/364/undefined-behavior"
          },
          {
            "Text": ". This usually leads to a crash, but there is no guarantee that a crash will happen so relying on that can also lead to problems."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936206191,
        "id": "cf6f10dd-cc5a-44d1-98c2-55a66e3e1758",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936206191,
        "parent_id": "632e5272-7cc3-466b-abc3-ba97ba450943",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For example, unsafe way:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For example, unsafe way:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936206191,
        "id": "77f94f22-02f6-4ae6-9349-cc32de2c1d0a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936206191,
        "parent_id": "632e5272-7cc3-466b-abc3-ba97ba450943",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "struct SomeStruct *s = malloc(sizeof *s);\ns-\u003esomeValue = 0; /* UNSAFE, because s might be a null pointer */"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "struct SomeStruct *s = malloc(sizeof *s);\ns-\u003esomeValue = 0; /* UNSAFE, because s might be a null pointer */",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936206191,
        "id": "97f56447-5e73-4d71-ada8-8b3eaf26811e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936206191,
        "parent_id": "632e5272-7cc3-466b-abc3-ba97ba450943",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Safe way:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Safe way:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936206191,
        "id": "754e7bb6-e3e4-447f-8956-ada40a732bd2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936206191,
        "parent_id": "632e5272-7cc3-466b-abc3-ba97ba450943",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "struct SomeStruct *s = malloc(sizeof *s);\nif (s)\n{\n    s-\u003esomeValue = 0; /* This is safe, we have checked that s is valid */\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "struct SomeStruct *s = malloc(sizeof *s);\nif (s)\n{\n    s-\u003esomeValue = 0; /* This is safe, we have checked that s is valid */\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936206191,
        "id": "7d2ac380-e9ab-427f-a2f9-855cd3dfc77e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936206191,
        "parent_id": "632e5272-7cc3-466b-abc3-ba97ba450943",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Using literal numbers instead of sizeof when requesting memory"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Using literal numbers instead of sizeof when requesting memory"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936206192,
        "id": "0e2ffdf9-d624-4786-954c-cefc5ee9e041",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936206192,
        "parent_id": "632e5272-7cc3-466b-abc3-ba97ba450943",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For a given compiler/machine configuration, types have a known size; however, there isn’t any standard which defines that the size of a given type (other than "
            ],
            [
              "char",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") will be the same for all compiler/machine configurations. If the code uses 4 instead of "
            ],
            [
              "sizeof(int)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " for memory allocation, it may work on the original machine, but the code isn’t necessarily portable to other machines or compilers. Fixed sizes for types should be replaced by "
            ],
            [
              "sizeof(that_type)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "sizeof(*var_ptr_to_that_type)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For a given compiler/machine configuration, types have a known size; however, there isn’t any standard which defines that the size of a given type (other than "
          },
          {
            "Text": "char",
            "AttrFlags": 2
          },
          {
            "Text": ") will be the same for all compiler/machine configurations. If the code uses 4 instead of "
          },
          {
            "Text": "sizeof(int)",
            "AttrFlags": 2
          },
          {
            "Text": " for memory allocation, it may work on the original machine, but the code isn’t necessarily portable to other machines or compilers. Fixed sizes for types should be replaced by "
          },
          {
            "Text": "sizeof(that_type)",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "sizeof(*var_ptr_to_that_type)",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936206192,
        "id": "d26f0e85-572a-41b6-9bea-3cc245cb86ed",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936206192,
        "parent_id": "632e5272-7cc3-466b-abc3-ba97ba450943",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Non-portable allocation:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Non-portable allocation:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936206192,
        "id": "e0064bfe-3898-4d7b-a616-78091f6c21e1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936206192,
        "parent_id": "632e5272-7cc3-466b-abc3-ba97ba450943",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int *intPtr = malloc(4*1000);    /* allocating storage for 1000 int */\nlong *longPtr = malloc(8*1000);  /* allocating storage for 1000 long */"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int *intPtr = malloc(4*1000);    /* allocating storage for 1000 int */\nlong *longPtr = malloc(8*1000);  /* allocating storage for 1000 long */",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936206192,
        "id": "81ef99dc-9cd1-4edc-a379-ccb26eee4f74",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936206192,
        "parent_id": "632e5272-7cc3-466b-abc3-ba97ba450943",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Portable allocation:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Portable allocation:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936206192,
        "id": "dd821d7a-a2fe-4642-aa9d-934251703bb6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936206192,
        "parent_id": "632e5272-7cc3-466b-abc3-ba97ba450943",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int *intPtr = malloc(sizeof(int)*1000);     /* allocating storage for 1000 int */\nlong *longPtr = malloc(sizeof(long)*1000);  /* allocating storage for 1000 long */"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int *intPtr = malloc(sizeof(int)*1000);     /* allocating storage for 1000 int */\nlong *longPtr = malloc(sizeof(long)*1000);  /* allocating storage for 1000 long */",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936206192,
        "id": "da8a9232-ba54-4020-8533-2d8ec2821792",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936206192,
        "parent_id": "632e5272-7cc3-466b-abc3-ba97ba450943",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Or, better still:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Or, better still:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936206192,
        "id": "89dd69c6-6072-42f1-8544-ac0be7e7ef99",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936206192,
        "parent_id": "632e5272-7cc3-466b-abc3-ba97ba450943",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int *intPtr = malloc(sizeof(*intPtr)*1000);     /* allocating storage for 1000 int */\nlong *longPtr = malloc(sizeof(*longPtr)*1000);  /* allocating storage for 1000 long */"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int *intPtr = malloc(sizeof(*intPtr)*1000);     /* allocating storage for 1000 int */\nlong *longPtr = malloc(sizeof(*longPtr)*1000);  /* allocating storage for 1000 long */",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936206192,
        "id": "e8328cc8-e284-4d13-930e-45fb2768326d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936206192,
        "parent_id": "632e5272-7cc3-466b-abc3-ba97ba450943",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Memory leaks"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Memory leaks"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936206193,
        "id": "a71dd64c-0239-4cf2-820a-eaf83692878b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936206193,
        "parent_id": "632e5272-7cc3-466b-abc3-ba97ba450943",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Failure to de-allocate memory using "
            ],
            [
              "free",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " leads to a buildup of non-reusable memory, which is no longer used by the program; this is called a "
            ],
            [
              "memory leak",
              [
                [
                  "a",
                  "https://en.wikipedia.org/wiki/Memory_leak"
                ]
              ]
            ],
            [
              ". Memory leaks waste memory resources and can lead to allocation failures."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Failure to de-allocate memory using "
          },
          {
            "Text": "free",
            "AttrFlags": 2
          },
          {
            "Text": " leads to a buildup of non-reusable memory, which is no longer used by the program; this is called a "
          },
          {
            "Text": "memory leak",
            "Link": "https://en.wikipedia.org/wiki/Memory_leak"
          },
          {
            "Text": ". Memory leaks waste memory resources and can lead to allocation failures."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936206193,
        "id": "b9829e0d-4e33-4301-ba15-4b41467e0400",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936206193,
        "parent_id": "632e5272-7cc3-466b-abc3-ba97ba450943",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Logical errors"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Logical errors"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936206193,
        "id": "30b93ebd-de87-47e3-ad6b-df038e4a047a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936206193,
        "parent_id": "632e5272-7cc3-466b-abc3-ba97ba450943",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "All allocations must follow the same pattern:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "All allocations must follow the same pattern:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936206193,
        "id": "6efe847a-13d4-4e47-9844-5e67d7b028ac",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936206193,
        "parent_id": "632e5272-7cc3-466b-abc3-ba97ba450943",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Allocation using "
            ],
            [
              "malloc",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (or "
            ],
            [
              "calloc",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ")"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Allocation using "
          },
          {
            "Text": "malloc",
            "AttrFlags": 2
          },
          {
            "Text": " (or "
          },
          {
            "Text": "calloc",
            "AttrFlags": 2
          },
          {
            "Text": ")"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936206194,
        "id": "7d518dc7-7296-47f9-8279-8131e108ea2d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936206194,
        "parent_id": "632e5272-7cc3-466b-abc3-ba97ba450943",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Usage to store data"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Usage to store data"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936206194,
        "id": "97495d8d-7267-4e4f-b973-9d8da5c3dcd6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936206194,
        "parent_id": "632e5272-7cc3-466b-abc3-ba97ba450943",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "De-allocation using "
            ],
            [
              "free",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "De-allocation using "
          },
          {
            "Text": "free",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936206195,
        "id": "9de33c65-7dd4-46f2-bc5a-18ecb46b5a3c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936206195,
        "parent_id": "632e5272-7cc3-466b-abc3-ba97ba450943",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Failure to adhere to this pattern, such as using memory after a call to "
            ],
            [
              "free",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " ("
            ],
            [
              "dangling pointer",
              [
                [
                  "a",
                  "https://en.wikipedia.org/wiki/Dangling_pointer"
                ]
              ]
            ],
            [
              ") or before a call to "
            ],
            [
              "malloc",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " ("
            ],
            [
              "wild pointer",
              [
                [
                  "a",
                  "http://stackoverflow.com/questions/2583656/what-is-the-meaning-of-wild-pointer-in-c"
                ]
              ]
            ],
            [
              "), calling "
            ],
            [
              "free",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " twice (“double free”), etc., usually causes a segmentation fault and results in a crash of the program."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Failure to adhere to this pattern, such as using memory after a call to "
          },
          {
            "Text": "free",
            "AttrFlags": 2
          },
          {
            "Text": " ("
          },
          {
            "Text": "dangling pointer",
            "Link": "https://en.wikipedia.org/wiki/Dangling_pointer"
          },
          {
            "Text": ") or before a call to "
          },
          {
            "Text": "malloc",
            "AttrFlags": 2
          },
          {
            "Text": " ("
          },
          {
            "Text": "wild pointer",
            "Link": "http://stackoverflow.com/questions/2583656/what-is-the-meaning-of-wild-pointer-in-c"
          },
          {
            "Text": "), calling "
          },
          {
            "Text": "free",
            "AttrFlags": 2
          },
          {
            "Text": " twice (“double free”), etc., usually causes a segmentation fault and results in a crash of the program."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936206195,
        "id": "fefb4bbb-c99f-483a-a2b7-72be634b9f75",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936206195,
        "parent_id": "632e5272-7cc3-466b-abc3-ba97ba450943",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "These errors can be transient and hard to debug – for example, freed memory is usually not immediately reclaimed by the OS, and thus dangling pointers may persist for a while and appear to work."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "These errors can be transient and hard to debug – for example, freed memory is usually not immediately reclaimed by the OS, and thus dangling pointers may persist for a while and appear to work."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936206195,
        "id": "0e06c789-d9a6-4bfa-b846-611f55278551",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936206195,
        "parent_id": "632e5272-7cc3-466b-abc3-ba97ba450943",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "On systems where it works, "
            ],
            [
              "Valgrind",
              [
                [
                  "a",
                  "http://valgrind.org/"
                ]
              ]
            ],
            [
              " is an invaluable tool for identifying what memory is leaked and where it was originally allocated."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "On systems where it works, "
          },
          {
            "Text": "Valgrind",
            "Link": "http://valgrind.org/"
          },
          {
            "Text": " is an invaluable tool for identifying what memory is leaked and where it was originally allocated."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936206195,
        "id": "13b39136-ca17-46c8-83b4-3609600bf716",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936206195,
        "parent_id": "632e5272-7cc3-466b-abc3-ba97ba450943",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Creating pointers to stack variables"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Creating pointers to stack variables"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936206196,
        "id": "d58472fe-a961-4e24-8502-dad6bba3acfb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936206196,
        "parent_id": "632e5272-7cc3-466b-abc3-ba97ba450943",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Creating a pointer does not extend the life of the variable being pointed to. For example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Creating a pointer does not extend the life of the variable being pointed to. For example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936206196,
        "id": "3be1e1e2-c7f1-4c79-bc39-666966f2a7d3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936206196,
        "parent_id": "632e5272-7cc3-466b-abc3-ba97ba450943",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int* myFunction() \n{\n    int x = 10;\n    return \u0026x;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int* myFunction() \n{\n    int x = 10;\n    return \u0026x;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936206196,
        "id": "23b08da6-2653-4b9a-8dd8-5d6dcfebc2a2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936206196,
        "parent_id": "632e5272-7cc3-466b-abc3-ba97ba450943",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Here, "
            ],
            [
              "x",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " has "
            ],
            [
              "automatic storage duration",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " (commonly known as "
            ],
            [
              "stack",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " allocation). Because it is allocated on the stack, its lifetime is only as long as "
            ],
            [
              "myFunction",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is executing; after "
            ],
            [
              "myFunction",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " has exited, the variable "
            ],
            [
              "x",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is destroyed. This function gets the address of "
            ],
            [
              "x",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (using "
            ],
            [
              "\u0026x",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "), and returns it to the caller, leaving the caller with a pointer to a non-existent variable. Attempting to access this variable will then invoke "
            ],
            [
              "undefined behavior",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c/364/undefined-behavior"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Here, "
          },
          {
            "Text": "x",
            "AttrFlags": 2
          },
          {
            "Text": " has "
          },
          {
            "Text": "automatic storage duration",
            "AttrFlags": 4
          },
          {
            "Text": " (commonly known as "
          },
          {
            "Text": "stack",
            "AttrFlags": 4
          },
          {
            "Text": " allocation). Because it is allocated on the stack, its lifetime is only as long as "
          },
          {
            "Text": "myFunction",
            "AttrFlags": 2
          },
          {
            "Text": " is executing; after "
          },
          {
            "Text": "myFunction",
            "AttrFlags": 2
          },
          {
            "Text": " has exited, the variable "
          },
          {
            "Text": "x",
            "AttrFlags": 2
          },
          {
            "Text": " is destroyed. This function gets the address of "
          },
          {
            "Text": "x",
            "AttrFlags": 2
          },
          {
            "Text": " (using "
          },
          {
            "Text": "\u0026x",
            "AttrFlags": 2
          },
          {
            "Text": "), and returns it to the caller, leaving the caller with a pointer to a non-existent variable. Attempting to access this variable will then invoke "
          },
          {
            "Text": "undefined behavior",
            "Link": "http://stackoverflow.com/documentation/c/364/undefined-behavior"
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936206197,
        "id": "b0d416b6-50cc-475d-8570-54c18deb7435",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936206197,
        "parent_id": "632e5272-7cc3-466b-abc3-ba97ba450943",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Most compilers don’t actually clear a stack frame after the function exits, thus dereferencing the returned pointer often gives you the expected data. When another function is called however, the memory being pointed to may be overwritten, and it appears that the data being pointed to has been corrupted."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Most compilers don’t actually clear a stack frame after the function exits, thus dereferencing the returned pointer often gives you the expected data. When another function is called however, the memory being pointed to may be overwritten, and it appears that the data being pointed to has been corrupted."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936206197,
        "id": "d8dfce15-4cad-4a8a-a192-a038fee80386",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936206197,
        "parent_id": "632e5272-7cc3-466b-abc3-ba97ba450943",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To resolve this, either "
            ],
            [
              "malloc",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " the storage for the variable to be returned, and return a pointer to the newly created storage, or require that a valid pointer is passed in to the function instead of returning one, for example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To resolve this, either "
          },
          {
            "Text": "malloc",
            "AttrFlags": 2
          },
          {
            "Text": " the storage for the variable to be returned, and return a pointer to the newly created storage, or require that a valid pointer is passed in to the function instead of returning one, for example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936206197,
        "id": "a08ef5b3-6685-4e5b-ac0c-07f1582da1ce",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936206197,
        "parent_id": "632e5272-7cc3-466b-abc3-ba97ba450943",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cstdlib.h\u003e\n#include \u003cstdio.h\u003e\n\nint *solution1(void) \n{\n    int *x = malloc(sizeof *x);\n    if (x == NULL) \n    {\n        /* Something went wrong */\n        return NULL;\n    }\n\n    *x = 10;\n\n    return x;\n}\n\nvoid solution2(int *x) \n{\n    /* NB: calling this function with an invalid or null pointer \n       causes undefined behaviour. */\n\n    *x = 10;\n}\n\nint main(void) \n{\n    { \n        /* Use solution1() */\n\n        int *foo = solution1();  \n        if (foo == NULL)\n        {\n            /* Something went wrong */\n            return 1;\n        }\n\n        printf(\"The value set by solution1() is %i\\n\", *foo);\n        /* Will output: \"The value set by solution1() is 10\" */\n\n        free(foo);    /* Tidy up */\n    }\n\n    {\n        /* Use solution2() */\n\n        int bar;\n        solution2(\u0026bar); \n\n        printf(\"The value set by solution2() is %i\\n\", bar);\n        /* Will output: \"The value set by solution2() is 10\" */\n    }\n\n    return 0;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cstdlib.h\u003e\n#include \u003cstdio.h\u003e\n\nint *solution1(void) \n{\n    int *x = malloc(sizeof *x);\n    if (x == NULL) \n    {\n        /* Something went wrong */\n        return NULL;\n    }\n\n    *x = 10;\n\n    return x;\n}\n\nvoid solution2(int *x) \n{\n    /* NB: calling this function with an invalid or null pointer \n       causes undefined behaviour. */\n\n    *x = 10;\n}\n\nint main(void) \n{\n    { \n        /* Use solution1() */\n\n        int *foo = solution1();  \n        if (foo == NULL)\n        {\n            /* Something went wrong */\n            return 1;\n        }\n\n        printf(\"The value set by solution1() is %i\\n\", *foo);\n        /* Will output: \"The value set by solution1() is 10\" */\n\n        free(foo);    /* Tidy up */\n    }\n\n    {\n        /* Use solution2() */\n\n        int bar;\n        solution2(\u0026bar); \n\n        printf(\"The value set by solution2() is %i\\n\", bar);\n        /* Will output: \"The value set by solution2() is 10\" */\n    }\n\n    return 0;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936206197,
        "id": "abe192f6-f26e-481f-b9ac-22217e2888c5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936206197,
        "parent_id": "632e5272-7cc3-466b-abc3-ba97ba450943",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Incrementing / decrementing and dereferencing"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Incrementing / decrementing and dereferencing"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936206197,
        "id": "5f4398a1-1b6e-4b57-a51f-8ba10f1ecccd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936206197,
        "parent_id": "632e5272-7cc3-466b-abc3-ba97ba450943",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If you write "
            ],
            [
              "*p++",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to increment what is pointed by "
            ],
            [
              "p",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", you are wrong."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If you write "
          },
          {
            "Text": "*p++",
            "AttrFlags": 2
          },
          {
            "Text": " to increment what is pointed by "
          },
          {
            "Text": "p",
            "AttrFlags": 2
          },
          {
            "Text": ", you are wrong."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936206197,
        "id": "82de3d72-d413-4130-8c41-30879db46787",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936206197,
        "parent_id": "632e5272-7cc3-466b-abc3-ba97ba450943",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Post incrementing / decrementing is executed before dereferencing. Therefore, this expression will increment the pointer "
            ],
            [
              "p",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " itself and return what was pointed by "
            ],
            [
              "p",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " before incrementing without changing it."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Post incrementing / decrementing is executed before dereferencing. Therefore, this expression will increment the pointer "
          },
          {
            "Text": "p",
            "AttrFlags": 2
          },
          {
            "Text": " itself and return what was pointed by "
          },
          {
            "Text": "p",
            "AttrFlags": 2
          },
          {
            "Text": " before incrementing without changing it."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936206198,
        "id": "646eb7ba-8620-49e9-af3f-81dd1ceff81d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936206198,
        "parent_id": "632e5272-7cc3-466b-abc3-ba97ba450943",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You should write "
            ],
            [
              "(*p)++",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to increment what is pointed by "
            ],
            [
              "p",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You should write "
          },
          {
            "Text": "(*p)++",
            "AttrFlags": 2
          },
          {
            "Text": " to increment what is pointed by "
          },
          {
            "Text": "p",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936206198,
        "id": "e631e456-ce42-4cb8-9070-b154dafd81b1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936206198,
        "parent_id": "632e5272-7cc3-466b-abc3-ba97ba450943",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This rule also applies to post decrementing: "
            ],
            [
              "*p--",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will decrement the pointer "
            ],
            [
              "p",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " itself, not what is pointed by "
            ],
            [
              "p",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This rule also applies to post decrementing: "
          },
          {
            "Text": "*p--",
            "AttrFlags": 2
          },
          {
            "Text": " will decrement the pointer "
          },
          {
            "Text": "p",
            "AttrFlags": 2
          },
          {
            "Text": " itself, not what is pointed by "
          },
          {
            "Text": "p",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      }
    ],
    "title": "Common errors",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}