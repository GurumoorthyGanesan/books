{
  "ID": "e69ae29b-673a-409d-8cd3-a11cd3982bd8",
  "Root": {
    "alive": true,
    "content": [
      "e028e232-1d02-4be4-a08a-c898f3c1fab3",
      "ba7ee5ff-0130-4982-b89f-6660fd3aae22",
      "2521791d-cbde-418b-99fd-61c5dcbe98d7",
      "7446cda2-be24-46a8-9d39-9dd724d022bd",
      "8ed7ea83-838c-454c-bbac-1f9882ccab47",
      "fd05ce70-3b3a-4754-9502-d0db2ddddc8f",
      "eac09bda-8c99-46ea-b7dd-55b68d0b3c37",
      "22bc280b-5d2f-4823-a4dc-3441329bf12b",
      "06403895-1206-440c-9229-9869cbf3bcb7",
      "d1bc97c3-e0fc-4bc0-a497-8fe303b4de0d"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551935732470,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "e69ae29b-673a-409d-8cd3-a11cd3982bd8",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551935732470,
    "parent_id": "eff989d8-e4d4-4f97-952e-6c58e46dfb73",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Copying overlapping memory"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935732467,
        "id": "e028e232-1d02-4be4-a08a-c898f3c1fab3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935732467,
        "parent_id": "e69ae29b-673a-409d-8cd3-a11cd3982bd8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A wide variety of standard library functions have among their effects copying byte sequences from one memory region to another. Most of these functions have undefined behavior when the source and destination regions overlap."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A wide variety of standard library functions have among their effects copying byte sequences from one memory region to another. Most of these functions have undefined behavior when the source and destination regions overlap."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935732468,
        "id": "ba7ee5ff-0130-4982-b89f-6660fd3aae22",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935732468,
        "parent_id": "e69ae29b-673a-409d-8cd3-a11cd3982bd8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For example, this …"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For example, this …"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935732468,
        "id": "2521791d-cbde-418b-99fd-61c5dcbe98d7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935732468,
        "parent_id": "e69ae29b-673a-409d-8cd3-a11cd3982bd8",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cstring.h\u003e /* for memcpy() */\n\nchar str[19] = \"This is an example\";\nmemcpy(str + 7, str, 10);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cstring.h\u003e /* for memcpy() */\n\nchar str[19] = \"This is an example\";\nmemcpy(str + 7, str, 10);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935732468,
        "id": "7446cda2-be24-46a8-9d39-9dd724d022bd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935732468,
        "parent_id": "e69ae29b-673a-409d-8cd3-a11cd3982bd8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "… attempts to copy 10 bytes where the source and destination memory areas overlap by three bytes. To visualize:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "… attempts to copy 10 bytes where the source and destination memory areas overlap by three bytes. To visualize:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935732468,
        "id": "8ed7ea83-838c-454c-bbac-1f9882ccab47",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935732468,
        "parent_id": "e69ae29b-673a-409d-8cd3-a11cd3982bd8",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "overlapping area\n|\n_ _\n|   |\nv   v\nT h i s   i s   a n   e x a m p l e \\0\n^             ^\n|             |\n|             destination\n|\nsource"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "overlapping area\n|\n_ _\n|   |\nv   v\nT h i s   i s   a n   e x a m p l e \\0\n^             ^\n|             |\n|             destination\n|\nsource",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935732468,
        "id": "fd05ce70-3b3a-4754-9502-d0db2ddddc8f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935732468,
        "parent_id": "e69ae29b-673a-409d-8cd3-a11cd3982bd8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Because of the overlap, the resulting behavior is undefined."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Because of the overlap, the resulting behavior is undefined."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935732469,
        "id": "eac09bda-8c99-46ea-b7dd-55b68d0b3c37",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935732469,
        "parent_id": "e69ae29b-673a-409d-8cd3-a11cd3982bd8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Among the standard library functions with a limitation of this kind are "
            ],
            [
              "memcpy()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "strcpy()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "strcat()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "sprintf()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", and "
            ],
            [
              "sscanf()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". The standard says of these and several other functions:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Among the standard library functions with a limitation of this kind are "
          },
          {
            "Text": "memcpy()",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "strcpy()",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "strcat()",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "sprintf()",
            "AttrFlags": 2
          },
          {
            "Text": ", and "
          },
          {
            "Text": "sscanf()",
            "AttrFlags": 2
          },
          {
            "Text": ". The standard says of these and several other functions:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935732469,
        "id": "22bc280b-5d2f-4823-a4dc-3441329bf12b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935732469,
        "parent_id": "e69ae29b-673a-409d-8cd3-a11cd3982bd8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If copying takes place between objects that overlap, the behavior is undefined."
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "If copying takes place between objects that overlap, the behavior is undefined."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935732469,
        "id": "06403895-1206-440c-9229-9869cbf3bcb7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935732469,
        "parent_id": "e69ae29b-673a-409d-8cd3-a11cd3982bd8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "memmove()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " function is the principal exception to this rule. Its definition specifies that the function behaves as if the source data were first copied into a temporary buffer and then written to the destination address. There is no exception for overlapping source and destination regions, nor any need for one, so "
            ],
            [
              "memmove()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " has well-defined behavior in such cases."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "memmove()",
            "AttrFlags": 2
          },
          {
            "Text": " function is the principal exception to this rule. Its definition specifies that the function behaves as if the source data were first copied into a temporary buffer and then written to the destination address. There is no exception for overlapping source and destination regions, nor any need for one, so "
          },
          {
            "Text": "memmove()",
            "AttrFlags": 2
          },
          {
            "Text": " has well-defined behavior in such cases."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935732470,
        "id": "d1bc97c3-e0fc-4bc0-a497-8fe303b4de0d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935732470,
        "parent_id": "e69ae29b-673a-409d-8cd3-a11cd3982bd8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The distinction reflects an efficiency "
            ],
            [
              "vs",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ". generality tradeoff. Copying such as these functions perform usually occurs between disjoint regions of memory, and often it is possible to know at development time whether a particular instance of memory copying will be in that category. Assuming non-overlap affords comparatively more efficient implementations that do not reliably produce correct results when the assumption does not hold. Most C library functions are allowed the more efficient implementations, and "
            ],
            [
              "memmove()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " fills in the gaps, serving the cases where the source and destination may or do overlap. To produce the correct effect in all cases, however, it must perform additional tests and / or employ a comparatively less efficient implementation."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The distinction reflects an efficiency "
          },
          {
            "Text": "vs",
            "AttrFlags": 4
          },
          {
            "Text": ". generality tradeoff. Copying such as these functions perform usually occurs between disjoint regions of memory, and often it is possible to know at development time whether a particular instance of memory copying will be in that category. Assuming non-overlap affords comparatively more efficient implementations that do not reliably produce correct results when the assumption does not hold. Most C library functions are allowed the more efficient implementations, and "
          },
          {
            "Text": "memmove()",
            "AttrFlags": 2
          },
          {
            "Text": " fills in the gaps, serving the cases where the source and destination may or do overlap. To produce the correct effect in all cases, however, it must perform additional tests and / or employ a comparatively less efficient implementation."
          }
        ]
      }
    ],
    "title": "Copying overlapping memory",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}