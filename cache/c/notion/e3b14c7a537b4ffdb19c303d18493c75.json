{
  "ID": "e3b14c7a-537b-4ffd-b19c-303d18493c75",
  "Root": {
    "alive": true,
    "content": [
      "38b3c546-8c95-4624-b671-98b4925bc7f8",
      "78b831f5-2852-49e4-aa83-e6a598d81a6e",
      "ca901867-9a32-41ae-992b-b2a5bf45f9d3",
      "82c0ae37-7ec1-4264-86b5-d20445caf349",
      "c99f8c17-7aea-46c3-a12c-c9091d72161b",
      "79f88f0e-78b0-4c73-a97b-123c926dd286",
      "e84bad84-4b25-43dc-a951-db2d7458bc54",
      "0b134d21-ea74-4ec1-9dca-a9b9f7e4e640"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551936337265,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "e3b14c7a-537b-4ffd-b19c-303d18493c75",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551936337266,
    "parent_id": "ce0d7992-bb1e-4e62-ab26-2f99a9a2f78d",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Mixing signed and unsigned integers in arithmetic operations"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936337263,
        "id": "38b3c546-8c95-4624-b671-98b4925bc7f8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936337263,
        "parent_id": "e3b14c7a-537b-4ffd-b19c-303d18493c75",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It is usually not a good idea to mix "
            ],
            [
              "signed",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "unsigned",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " integers in arithmetic operations. For example, what will be output of following example?"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It is usually not a good idea to mix "
          },
          {
            "Text": "signed",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "unsigned",
            "AttrFlags": 2
          },
          {
            "Text": " integers in arithmetic operations. For example, what will be output of following example?"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936337264,
        "id": "78b831f5-2852-49e4-aa83-e6a598d81a6e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936337264,
        "parent_id": "e3b14c7a-537b-4ffd-b19c-303d18493c75",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cstdio.h\u003e\n\nint main(void)\n{ \n    unsigned int a = 1000;\n    signed int b = -1;\n\n    if (a \u003e b) puts(\"a is more than b\");\n    else puts(\"a is less or equal than b\"); \n\n    return 0;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cstdio.h\u003e\n\nint main(void)\n{ \n    unsigned int a = 1000;\n    signed int b = -1;\n\n    if (a \u003e b) puts(\"a is more than b\");\n    else puts(\"a is less or equal than b\"); \n\n    return 0;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936337264,
        "id": "ca901867-9a32-41ae-992b-b2a5bf45f9d3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936337264,
        "parent_id": "e3b14c7a-537b-4ffd-b19c-303d18493c75",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Since 1000 is more than -1 you would expect the output to be "
            ],
            [
              "a is more than b",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", however that will not be the case."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Since 1000 is more than -1 you would expect the output to be "
          },
          {
            "Text": "a is more than b",
            "AttrFlags": 2
          },
          {
            "Text": ", however that will not be the case."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936337264,
        "id": "82c0ae37-7ec1-4264-86b5-d20445caf349",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936337264,
        "parent_id": "e3b14c7a-537b-4ffd-b19c-303d18493c75",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Arithmetic operations between different integral types are performed within a common type defined by the so called usual arithmetic conversions (see the language specification, 6.3.1.8)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Arithmetic operations between different integral types are performed within a common type defined by the so called usual arithmetic conversions (see the language specification, 6.3.1.8)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936337265,
        "id": "c99f8c17-7aea-46c3-a12c-c9091d72161b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936337265,
        "parent_id": "e3b14c7a-537b-4ffd-b19c-303d18493c75",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In this case the “common type” is "
            ],
            [
              "unsigned int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", Because, as stated in "
            ],
            [
              "Usual arithmetic conversions",
              [
                [
                  "a",
                  "http://c0x.coding-guidelines.com/6.3.1.8.html"
                ]
              ]
            ],
            [
              ","
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In this case the “common type” is "
          },
          {
            "Text": "unsigned int",
            "AttrFlags": 2
          },
          {
            "Text": ", Because, as stated in "
          },
          {
            "Text": "Usual arithmetic conversions",
            "Link": "http://c0x.coding-guidelines.com/6.3.1.8.html"
          },
          {
            "Text": ","
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936337265,
        "id": "79f88f0e-78b0-4c73-a97b-123c926dd286",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936337265,
        "parent_id": "e3b14c7a-537b-4ffd-b19c-303d18493c75",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "714  Otherwise, if the operand that has unsigned integer type has rank greater or equal to the rank of the type of the other operand, then the operand with signed integer type is converted to the type of the operand with unsigned integer type."
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "714  Otherwise, if the operand that has unsigned integer type has rank greater or equal to the rank of the type of the other operand, then the operand with signed integer type is converted to the type of the operand with unsigned integer type."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936337265,
        "id": "e84bad84-4b25-43dc-a951-db2d7458bc54",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936337265,
        "parent_id": "e3b14c7a-537b-4ffd-b19c-303d18493c75",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This means that "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " operand "
            ],
            [
              "b",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will get converted to "
            ],
            [
              "unsigned int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " before the comparison."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This means that "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": " operand "
          },
          {
            "Text": "b",
            "AttrFlags": 2
          },
          {
            "Text": " will get converted to "
          },
          {
            "Text": "unsigned int",
            "AttrFlags": 2
          },
          {
            "Text": " before the comparison."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936337265,
        "id": "0b134d21-ea74-4ec1-9dca-a9b9f7e4e640",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936337265,
        "parent_id": "e3b14c7a-537b-4ffd-b19c-303d18493c75",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When -1 is converted to an "
            ],
            [
              "unsigned int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " the result is the maximal possible "
            ],
            [
              "unsigned int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " value, which is greater than 1000, meaning that "
            ],
            [
              "a \u003e b",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is false."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When -1 is converted to an "
          },
          {
            "Text": "unsigned int",
            "AttrFlags": 2
          },
          {
            "Text": " the result is the maximal possible "
          },
          {
            "Text": "unsigned int",
            "AttrFlags": 2
          },
          {
            "Text": " value, which is greater than 1000, meaning that "
          },
          {
            "Text": "a \u003e b",
            "AttrFlags": 2
          },
          {
            "Text": " is false."
          }
        ]
      }
    ],
    "title": "Mixing signed and unsigned integers in arithmetic operations",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}