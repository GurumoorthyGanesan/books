{
  "ID": "23bee620-b925-47b7-ba58-529ef8c0bf46",
  "Root": {
    "alive": true,
    "content": [
      "cbd8d7ca-b6db-4809-b432-b9e7babba34b",
      "67e8524a-cacf-4d79-8be4-a58968b9f4fe",
      "0ceb2891-8fe0-43b5-b6ab-a72190993817",
      "fc82e22b-ee41-4257-9945-404dad139b24"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551935688170,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "23bee620-b925-47b7-ba58-529ef8c0bf46",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551935688170,
    "parent_id": "c613c743-331e-4cb0-8344-4963dbf825f3",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Allocate and zero-initialize an array with user defined size"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935688167,
        "id": "cbd8d7ca-b6db-4809-b432-b9e7babba34b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935688167,
        "parent_id": "23bee620-b925-47b7-ba58-529ef8c0bf46",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cstdio.h\u003e\n#include \u003cstdlib.h\u003e"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cstdio.h\u003e\n#include \u003cstdlib.h\u003e",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935688170,
        "id": "67e8524a-cacf-4d79-8be4-a58968b9f4fe",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935688170,
        "parent_id": "23bee620-b925-47b7-ba58-529ef8c0bf46",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int main (void)\n{\n  int * pdata;\n  size_t n;\n\n  printf (\"Enter the size of the array: \");\n  fflush(stdout); /* Make sure the prompt gets printed to buffered stdout. */\n\n  if (1 != scanf(\"%zu\", \u0026n)) /* If zu is not supported (Windows?) use lu. */\n  {\n    fprintf(\"scanf() did not read a in proper value.\\n\");\n    exit(EXIT_FAILURE);\n  }\n\n  pdata = calloc(n, sizeof *pdata);\n  if (NULL == pdata) \n  {\n    perror(\"calloc() failed\"); /* Print error. */\n    exit(EXIT_FAILURE);\n  }\n\n  free(pdata); /* Clean up. */\n\n  return EXIT_SUCCESS;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int main (void)\n{\n  int * pdata;\n  size_t n;\n\n  printf (\"Enter the size of the array: \");\n  fflush(stdout); /* Make sure the prompt gets printed to buffered stdout. */\n\n  if (1 != scanf(\"%zu\", \u0026n)) /* If zu is not supported (Windows?) use lu. */\n  {\n    fprintf(\"scanf() did not read a in proper value.\\n\");\n    exit(EXIT_FAILURE);\n  }\n\n  pdata = calloc(n, sizeof *pdata);\n  if (NULL == pdata) \n  {\n    perror(\"calloc() failed\"); /* Print error. */\n    exit(EXIT_FAILURE);\n  }\n\n  free(pdata); /* Clean up. */\n\n  return EXIT_SUCCESS;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935688170,
        "id": "0ceb2891-8fe0-43b5-b6ab-a72190993817",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935688170,
        "parent_id": "23bee620-b925-47b7-ba58-529ef8c0bf46",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This program tries to scan in an unsigned integer value from standard input, allocate a block of memory for an array of "
            ],
            [
              "n",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " elements of type "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " by calling the "
            ],
            [
              "calloc()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " function. The memory is initialized to all zeros by the latter."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This program tries to scan in an unsigned integer value from standard input, allocate a block of memory for an array of "
          },
          {
            "Text": "n",
            "AttrFlags": 2
          },
          {
            "Text": " elements of type "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": " by calling the "
          },
          {
            "Text": "calloc()",
            "AttrFlags": 2
          },
          {
            "Text": " function. The memory is initialized to all zeros by the latter."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935688170,
        "id": "fc82e22b-ee41-4257-9945-404dad139b24",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935688170,
        "parent_id": "23bee620-b925-47b7-ba58-529ef8c0bf46",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In case of success the memory is releases by the call to "
            ],
            [
              "free()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In case of success the memory is releases by the call to "
          },
          {
            "Text": "free()",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      }
    ],
    "title": "Allocate and zero-initialize an array with user defined size",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}