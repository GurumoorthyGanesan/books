{
  "ID": "6ae05aa0-6978-4ee5-8e9a-220de84946e4",
  "Root": {
    "alive": true,
    "content": [
      "2a62ab22-8536-4615-9398-e2db7411fffd",
      "874a26dc-f91a-4807-b2be-035c30ff837c",
      "12c8977a-c195-43de-bad5-ae211844a774"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551935806274,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "6ae05aa0-6978-4ee5-8e9a-220de84946e4",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551935806274,
    "parent_id": "f3c54523-5f2c-4d48-a50e-cd230eee34ae",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Using a format string"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935806273,
        "id": "2a62ab22-8536-4615-9398-e2db7411fffd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935806273,
        "parent_id": "6ae05aa0-6978-4ee5-8e9a-220de84946e4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Using a format string provides information about the expected number and type of the subsequent variadic arguments in such a way as to avoid the need for an explicit count argument or a terminator value."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Using a format string provides information about the expected number and type of the subsequent variadic arguments in such a way as to avoid the need for an explicit count argument or a terminator value."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935806273,
        "id": "874a26dc-f91a-4807-b2be-035c30ff837c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935806273,
        "parent_id": "6ae05aa0-6978-4ee5-8e9a-220de84946e4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The example below shows a a function that wraps the standard "
            ],
            [
              "printf()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " function, only allowing for the use of variadic arguments of the type "
            ],
            [
              "char",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "double",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (in decimal floating point format). Here, like with "
            ],
            [
              "printf()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", the first argument to the wrapping function is the format string. As the format string is parsed the function is able to determine if there is another variadic argument expected and what it’s type should be."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The example below shows a a function that wraps the standard "
          },
          {
            "Text": "printf()",
            "AttrFlags": 2
          },
          {
            "Text": " function, only allowing for the use of variadic arguments of the type "
          },
          {
            "Text": "char",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "double",
            "AttrFlags": 2
          },
          {
            "Text": " (in decimal floating point format). Here, like with "
          },
          {
            "Text": "printf()",
            "AttrFlags": 2
          },
          {
            "Text": ", the first argument to the wrapping function is the format string. As the format string is parsed the function is able to determine if there is another variadic argument expected and what it’s type should be."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935806273,
        "id": "12c8977a-c195-43de-bad5-ae211844a774",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935806273,
        "parent_id": "6ae05aa0-6978-4ee5-8e9a-220de84946e4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cstdio.h\u003e\n#include \u003cstdarg.h\u003e\n\nint simple_printf(const char *format, ...)\n{\n    va_list ap; /* hold information about the variadic argument list. */\n    int printed = 0; /* count of printed characters */\n\n    va_start(ap, format); /* start variadic argument processing */\n\n    while (*format != '\\0') /* read format string until string terminator */\n    {\n        int f = 0;\n\n        if (*format == '%')\n        {\n            ++format;\n            switch(*format)\n            {\n                case 'c' :\n                    f = printf(\"%d\", va_arg(ap, int)); /* print next variadic argument, note type promotion from char to int */\n                    break;\n                case 'd' :\n                    f = printf(\"%d\", va_arg(ap, int)); /* print next variadic argument */\n                    break;\n\n                case 'f' :\n                    f = printf(\"%f\", va_arg(ap, double)); /* print next variadic argument */\n                    break;\n                default :\n                    f = -1; /* invalid format specifier */\n                    break;\n            }\n        }\n        else\n        {\n            f = printf(\"%c\", *format); /* print any other characters */\n        }\n\n        if (f \u003c 0) /* check for errors */\n        {\n            printed = f;\n            break;\n        }\n        else\n        {\n            printed += f;\n        }\n        ++format; /* move on to next character in string */\n    }\n\n    va_end(ap); /* end variadic argument processing */\n\n    return printed;\n}\n\nint main (int argc, char *argv[])\n{\n    int x = 40;\n    int y = 0;\n\n    y = simple_printf(\"There are %d characters in this sentence\", x);\n    simple_printf(\"\\n%d were printed\\n\", y);\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cstdio.h\u003e\n#include \u003cstdarg.h\u003e\n\nint simple_printf(const char *format, ...)\n{\n    va_list ap; /* hold information about the variadic argument list. */\n    int printed = 0; /* count of printed characters */\n\n    va_start(ap, format); /* start variadic argument processing */\n\n    while (*format != '\\0') /* read format string until string terminator */\n    {\n        int f = 0;\n\n        if (*format == '%')\n        {\n            ++format;\n            switch(*format)\n            {\n                case 'c' :\n                    f = printf(\"%d\", va_arg(ap, int)); /* print next variadic argument, note type promotion from char to int */\n                    break;\n                case 'd' :\n                    f = printf(\"%d\", va_arg(ap, int)); /* print next variadic argument */\n                    break;\n\n                case 'f' :\n                    f = printf(\"%f\", va_arg(ap, double)); /* print next variadic argument */\n                    break;\n                default :\n                    f = -1; /* invalid format specifier */\n                    break;\n            }\n        }\n        else\n        {\n            f = printf(\"%c\", *format); /* print any other characters */\n        }\n\n        if (f \u003c 0) /* check for errors */\n        {\n            printed = f;\n            break;\n        }\n        else\n        {\n            printed += f;\n        }\n        ++format; /* move on to next character in string */\n    }\n\n    va_end(ap); /* end variadic argument processing */\n\n    return printed;\n}\n\nint main (int argc, char *argv[])\n{\n    int x = 40;\n    int y = 0;\n\n    y = simple_printf(\"There are %d characters in this sentence\", x);\n    simple_printf(\"\\n%d were printed\\n\", y);\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "Using a format string",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}