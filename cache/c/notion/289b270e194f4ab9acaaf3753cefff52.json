{
  "ID": "289b270e-194f-4ab9-acaa-f3753cefff52",
  "Root": {
    "alive": true,
    "content": [
      "2616fdf7-5ee9-4f51-a87b-50ebb2492f82",
      "0396b363-5e1a-429a-9d8f-0f0de77cdf5e",
      "f3a1256e-7f06-4621-b05d-689caf741420",
      "4bae0dd8-efd6-4965-a07f-ac47ddb62ff4",
      "32afd151-3e6f-4392-9063-afac907b5c0a",
      "2e961b29-c3be-47f3-bd98-2fca3472a74d",
      "78c6db0c-9abe-4d8a-9f56-c07da1ef8a48",
      "5958cc41-11ed-4d9e-90db-3f763cc4f984",
      "57111f4e-49fc-43e3-a724-8e732deba985",
      "7e72ab93-46c3-4c50-97e7-e3f2ca9a3723",
      "8f565e52-3de2-4a32-8d32-d0a256fa2d3b"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551936715427,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "289b270e-194f-4ab9-acaa-f3753cefff52",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551936715427,
    "parent_id": "ae1ce0ef-9ced-4caa-9c8d-f14041e087b0",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Printing the Value of a Pointer to an Object"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936715421,
        "id": "2616fdf7-5ee9-4f51-a87b-50ebb2492f82",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936715421,
        "parent_id": "289b270e-194f-4ab9-acaa-f3753cefff52",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To print the value of a pointer to an object (as opposed to a function pointer) use the "
            ],
            [
              "p",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " conversion specifier. It is defined to print "
            ],
            [
              "void",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "-pointers only, so to print out the value of a non "
            ],
            [
              "void",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "-pointer it needs to be explicitly converted (“casted*”) to "
            ],
            [
              "void*",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To print the value of a pointer to an object (as opposed to a function pointer) use the "
          },
          {
            "Text": "p",
            "AttrFlags": 2
          },
          {
            "Text": " conversion specifier. It is defined to print "
          },
          {
            "Text": "void",
            "AttrFlags": 2
          },
          {
            "Text": "-pointers only, so to print out the value of a non "
          },
          {
            "Text": "void",
            "AttrFlags": 2
          },
          {
            "Text": "-pointer it needs to be explicitly converted (“casted*”) to "
          },
          {
            "Text": "void*",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936715424,
        "id": "0396b363-5e1a-429a-9d8f-0f0de77cdf5e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936715424,
        "parent_id": "289b270e-194f-4ab9-acaa-f3753cefff52",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cstdlib.h\u003e /* for EXIT_SUCCESS */\n#include \u003cstdio.h\u003e  /* for printf() */\n\nint main(void)\n{\n  int i;\n  int * p = \u0026i;\n\n  printf(\"The address of i is %p.\\n\", (void*) p);\n\n  return EXIT_SUCCESS;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cstdlib.h\u003e /* for EXIT_SUCCESS */\n#include \u003cstdio.h\u003e  /* for printf() */\n\nint main(void)\n{\n  int i;\n  int * p = \u0026i;\n\n  printf(\"The address of i is %p.\\n\", (void*) p);\n\n  return EXIT_SUCCESS;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936715424,
        "id": "f3a1256e-7f06-4621-b05d-689caf741420",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936715424,
        "parent_id": "289b270e-194f-4ab9-acaa-f3753cefff52",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Using "
            ],
            [
              "\u003cinttypes.h\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "uintptr_t",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "sub_sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Using "
          },
          {
            "Text": "\u003cinttypes.h\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "uintptr_t",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936715424,
        "id": "4bae0dd8-efd6-4965-a07f-ac47ddb62ff4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936715424,
        "parent_id": "289b270e-194f-4ab9-acaa-f3753cefff52",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Another way to print pointers in C99 or later uses the "
            ],
            [
              "uintptr_t",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " type and the macros from "
            ],
            [
              "\u003cinttypes.h\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Another way to print pointers in C99 or later uses the "
          },
          {
            "Text": "uintptr_t",
            "AttrFlags": 2
          },
          {
            "Text": " type and the macros from "
          },
          {
            "Text": "\u003cinttypes.h\u003e",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936715424,
        "id": "32afd151-3e6f-4392-9063-afac907b5c0a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936715424,
        "parent_id": "289b270e-194f-4ab9-acaa-f3753cefff52",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cinttypes.h\u003e /* for uintptr_t and PRIXPTR */\n#include \u003cstdio.h\u003e    /* for printf() */\n\nint main(void)\n{\n  int  i;\n  int *p = \u0026i;\n\n  printf(\"The address of i is 0x%\" PRIXPTR \".\\n\", (uintptr_t)p);\n\n  return 0;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cinttypes.h\u003e /* for uintptr_t and PRIXPTR */\n#include \u003cstdio.h\u003e    /* for printf() */\n\nint main(void)\n{\n  int  i;\n  int *p = \u0026i;\n\n  printf(\"The address of i is 0x%\" PRIXPTR \".\\n\", (uintptr_t)p);\n\n  return 0;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936715424,
        "id": "2e961b29-c3be-47f3-bd98-2fca3472a74d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936715424,
        "parent_id": "289b270e-194f-4ab9-acaa-f3753cefff52",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In theory, there might not be an integer type that can hold any pointer converted to an integer (so the type "
            ],
            [
              "uintptr_t",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " might not exist). In practice, it does exist. Pointers to functions need not be convertible to the "
            ],
            [
              "uintptr_t",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " type — though again they most often are convertible."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In theory, there might not be an integer type that can hold any pointer converted to an integer (so the type "
          },
          {
            "Text": "uintptr_t",
            "AttrFlags": 2
          },
          {
            "Text": " might not exist). In practice, it does exist. Pointers to functions need not be convertible to the "
          },
          {
            "Text": "uintptr_t",
            "AttrFlags": 2
          },
          {
            "Text": " type — though again they most often are convertible."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936715425,
        "id": "78c6db0c-9abe-4d8a-9f56-c07da1ef8a48",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936715425,
        "parent_id": "289b270e-194f-4ab9-acaa-f3753cefff52",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If the "
            ],
            [
              "uintptr_t",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " type exists, so does the "
            ],
            [
              "intptr_t",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " type. It is not clear why you’d ever want to treat addresses as signed integers, though."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If the "
          },
          {
            "Text": "uintptr_t",
            "AttrFlags": 2
          },
          {
            "Text": " type exists, so does the "
          },
          {
            "Text": "intptr_t",
            "AttrFlags": 2
          },
          {
            "Text": " type. It is not clear why you’d ever want to treat addresses as signed integers, though."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936715425,
        "id": "5958cc41-11ed-4d9e-90db-3f763cc4f984",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936715425,
        "parent_id": "289b270e-194f-4ab9-acaa-f3753cefff52",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Pre-Standard History:"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Pre-Standard History:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936715425,
        "id": "57111f4e-49fc-43e3-a724-8e732deba985",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936715425,
        "parent_id": "289b270e-194f-4ab9-acaa-f3753cefff52",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Prior to C89 during K\u0026R-C times there was no type "
            ],
            [
              "void*",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (nor header "
            ],
            [
              "\u003cstdlib.h\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", nor prototypes, and hence no "
            ],
            [
              "int main(void)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " notation), so the pointer was cast to "
            ],
            [
              "long unsigned int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and printed using the "
            ],
            [
              "lx",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " length modifier/conversion specifier."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Prior to C89 during K\u0026R-C times there was no type "
          },
          {
            "Text": "void*",
            "AttrFlags": 2
          },
          {
            "Text": " (nor header "
          },
          {
            "Text": "\u003cstdlib.h\u003e",
            "AttrFlags": 2
          },
          {
            "Text": ", nor prototypes, and hence no "
          },
          {
            "Text": "int main(void)",
            "AttrFlags": 2
          },
          {
            "Text": " notation), so the pointer was cast to "
          },
          {
            "Text": "long unsigned int",
            "AttrFlags": 2
          },
          {
            "Text": " and printed using the "
          },
          {
            "Text": "lx",
            "AttrFlags": 2
          },
          {
            "Text": " length modifier/conversion specifier."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936715427,
        "id": "7e72ab93-46c3-4c50-97e7-e3f2ca9a3723",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936715427,
        "parent_id": "289b270e-194f-4ab9-acaa-f3753cefff52",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The example below is just for informational purpose. Nowadays this is invalid code, which very well might provoke the infamous ",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "Undefined Behaviour",
              [
                [
                  "b"
                ],
                [
                  "a",
                  "http://stackoverflow.com/documentation/c/364/undefined-behavior"
                ]
              ]
            ],
            [
              ".",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The example below is just for informational purpose. Nowadays this is invalid code, which very well might provoke the infamous ",
            "AttrFlags": 1
          },
          {
            "Text": "Undefined Behaviour",
            "AttrFlags": 1,
            "Link": "http://stackoverflow.com/documentation/c/364/undefined-behavior"
          },
          {
            "Text": ".",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936715427,
        "id": "8f565e52-3de2-4a32-8d32-d0a256fa2d3b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936715427,
        "parent_id": "289b270e-194f-4ab9-acaa-f3753cefff52",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cstdio.h\u003e /* optional in pre-standard C - for printf() */\n\nint main()\n{\n  int  i;\n  int *p = \u0026i;\n\n  printf(\"The address of i is 0x%lx.\\n\", (long unsigned) p);\n\n  return 0;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cstdio.h\u003e /* optional in pre-standard C - for printf() */\n\nint main()\n{\n  int  i;\n  int *p = \u0026i;\n\n  printf(\"The address of i is 0x%lx.\\n\", (long unsigned) p);\n\n  return 0;\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "Printing the Value of a Pointer to an Object",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}