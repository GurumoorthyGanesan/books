{
  "ID": "2c5534d1-3267-4e32-8480-7b6e82363cb5",
  "Root": {
    "alive": true,
    "content": [
      "3554cb92-8cbd-47ca-8f7f-830a8930db7b",
      "8a7260be-3e33-46c1-aeb2-223f58eec7fb",
      "22ac146f-ca64-4686-a053-abc010e0395b",
      "0c39eff8-f023-437d-b14d-47f4a0067f1e",
      "4a22e01c-527f-420a-b9b1-1ee7d7df9dd3",
      "7a200e6e-b250-4eae-8c57-778779f4392a",
      "b6ecd009-d2ab-4f0e-8532-a21076178f5c",
      "1e93dfe9-db56-46fd-b6a4-386326bd9dc5",
      "c154c6bf-6ef6-4991-a555-8beb5a9ae6b6",
      "dbcda97d-3c0b-4440-bdd5-b67493d39eb8",
      "b714686e-233a-4dd1-b18c-87e7cf0b6f67",
      "eef542be-aaaa-4c1e-8c8c-8a556f937712",
      "0bdc49f3-085a-4cb7-9b89-0603c232ab53",
      "813660a3-1ecd-4360-b076-a424595c7d55",
      "0cd0d636-090c-4f49-af06-1bcb51c20c45",
      "a464736d-c050-4960-8ac7-e8112ad15fb9",
      "5ceea817-602b-4eae-a84c-136e05fac8f8",
      "a7e848ef-81f3-443c-a93b-e293f99f4a8c",
      "eb48b468-9c7d-4216-80d2-891b1509e8fe",
      "70e288e4-b169-4190-ab43-c56ef839ea7c",
      "37fa470e-05b7-4dbe-babb-73acbd48b3a6",
      "f31bd051-e480-4af4-8ac1-5f6f2e820fee",
      "68d78715-3def-491e-83e8-304752a1f174",
      "d93a3c33-e63c-4708-83de-52004397c1e5",
      "a73ac2e0-1d0e-49db-bdbd-1297f2799fa7",
      "569bd942-38cc-42f6-9561-bd97cdae0b66"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551936220736,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "2c5534d1-3267-4e32-8480-7b6e82363cb5",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551936220736,
    "parent_id": "fceea03f-c65b-4f89-8e06-817d0fcf3348",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Flexible Array Members"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936220729,
        "id": "3554cb92-8cbd-47ca-8f7f-830a8930db7b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936220729,
        "parent_id": "2c5534d1-3267-4e32-8480-7b6e82363cb5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Type Declaration"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Type Declaration"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936220732,
        "id": "8a7260be-3e33-46c1-aeb2-223f58eec7fb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936220732,
        "parent_id": "2c5534d1-3267-4e32-8480-7b6e82363cb5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A structure "
            ],
            [
              "with at least one member",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " may additionally contain a single array member of unspecified length at the end of the structure. This is called a flexible array member:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A structure "
          },
          {
            "Text": "with at least one member",
            "AttrFlags": 4
          },
          {
            "Text": " may additionally contain a single array member of unspecified length at the end of the structure. This is called a flexible array member:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936220732,
        "id": "22ac146f-ca64-4686-a053-abc010e0395b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936220732,
        "parent_id": "2c5534d1-3267-4e32-8480-7b6e82363cb5",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "struct ex1 \n{\n    size_t foo;\n    int flex[];\n};\n\nstruct ex2_header \n{\n    int foo;\n    char bar;\n};\n\nstruct ex2 \n{\n    struct ex2_header hdr;\n    int flex[];\n};\n\n/* Merged ex2_header and ex2 structures. */\nstruct ex3 \n{\n    int foo;\n    char bar;\n    int flex[];\n};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "struct ex1 \n{\n    size_t foo;\n    int flex[];\n};\n\nstruct ex2_header \n{\n    int foo;\n    char bar;\n};\n\nstruct ex2 \n{\n    struct ex2_header hdr;\n    int flex[];\n};\n\n/* Merged ex2_header and ex2 structures. */\nstruct ex3 \n{\n    int foo;\n    char bar;\n    int flex[];\n};",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936220732,
        "id": "0c39eff8-f023-437d-b14d-47f4a0067f1e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936220732,
        "parent_id": "2c5534d1-3267-4e32-8480-7b6e82363cb5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Effects on Size and Padding"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Effects on Size and Padding"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936220732,
        "id": "4a22e01c-527f-420a-b9b1-1ee7d7df9dd3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936220732,
        "parent_id": "2c5534d1-3267-4e32-8480-7b6e82363cb5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A flexible array member is treated as having no size when calculating the size of a structure, though padding between that member and the previous member of the structure may still exist:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A flexible array member is treated as having no size when calculating the size of a structure, though padding between that member and the previous member of the structure may still exist:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936220733,
        "id": "7a200e6e-b250-4eae-8c57-778779f4392a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936220733,
        "parent_id": "2c5534d1-3267-4e32-8480-7b6e82363cb5",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "/* Prints \"8,8\" on my machine, so there is no padding. */\nprintf(\"%zu,%zu\\n\", sizeof(size_t), sizeof(struct ex1));\n\n/* Also prints \"8,8\" on my machine, so there is no padding in the ex2 structure itself. */\nprintf(\"%zu,%zu\\n\", sizeof(struct ex2_header), sizeof(struct ex2));\n\n/* Prints \"5,8\" on my machine, so there are 3 bytes of padding. */\nprintf(\"%zu,%zu\\n\", sizeof(int) + sizeof(char), sizeof(struct ex3));"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "/* Prints \"8,8\" on my machine, so there is no padding. */\nprintf(\"%zu,%zu\\n\", sizeof(size_t), sizeof(struct ex1));\n\n/* Also prints \"8,8\" on my machine, so there is no padding in the ex2 structure itself. */\nprintf(\"%zu,%zu\\n\", sizeof(struct ex2_header), sizeof(struct ex2));\n\n/* Prints \"5,8\" on my machine, so there are 3 bytes of padding. */\nprintf(\"%zu,%zu\\n\", sizeof(int) + sizeof(char), sizeof(struct ex3));",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936220733,
        "id": "b6ecd009-d2ab-4f0e-8532-a21076178f5c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936220733,
        "parent_id": "2c5534d1-3267-4e32-8480-7b6e82363cb5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The flexible array member is considered to have an incomplete array type, so its size cannot be calculated using "
            ],
            [
              "sizeof",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The flexible array member is considered to have an incomplete array type, so its size cannot be calculated using "
          },
          {
            "Text": "sizeof",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936220733,
        "id": "1e93dfe9-db56-46fd-b6a4-386326bd9dc5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936220733,
        "parent_id": "2c5534d1-3267-4e32-8480-7b6e82363cb5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Usage"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Usage"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936220733,
        "id": "c154c6bf-6ef6-4991-a555-8beb5a9ae6b6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936220733,
        "parent_id": "2c5534d1-3267-4e32-8480-7b6e82363cb5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You can declare and initialize an object with a structure type containing a flexible array member, but you must not attempt to initialize the flexible array member since it is treated as if it does not exist. It is forbidden to try to do this, and compile errors will result."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You can declare and initialize an object with a structure type containing a flexible array member, but you must not attempt to initialize the flexible array member since it is treated as if it does not exist. It is forbidden to try to do this, and compile errors will result."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936220733,
        "id": "dbcda97d-3c0b-4440-bdd5-b67493d39eb8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936220733,
        "parent_id": "2c5534d1-3267-4e32-8480-7b6e82363cb5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Similarly, you should not attempt to assign a value to any element of a flexible array member when declaring a structure in this way since there may not be enough padding at the end of the structure to allow for any objects required by the flexible array member. The compiler will not necessarily prevent you from doing this, however, so this can lead to undefined behavior."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Similarly, you should not attempt to assign a value to any element of a flexible array member when declaring a structure in this way since there may not be enough padding at the end of the structure to allow for any objects required by the flexible array member. The compiler will not necessarily prevent you from doing this, however, so this can lead to undefined behavior."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936220733,
        "id": "b714686e-233a-4dd1-b18c-87e7cf0b6f67",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936220733,
        "parent_id": "2c5534d1-3267-4e32-8480-7b6e82363cb5",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "/* invalid: cannot initialize flexible array member */\nstruct ex1 e1 = {1, {2, 3}};\n/* invalid: hdr={foo=1, bar=2} OK, but cannot initialize flexible array member */\nstruct ex2 e2 = {{1, 2}, {3}};\n/* valid: initialize foo=1, bar=2 members */\nstruct ex3 e3 = {1, 2};\n\ne1.flex[0] = 3; /* undefined behavior, in my case */\ne3.flex[0] = 2; /* undefined behavior again */\ne2.flex[0] = e3.flex[0]; /* undefined behavior */"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "/* invalid: cannot initialize flexible array member */\nstruct ex1 e1 = {1, {2, 3}};\n/* invalid: hdr={foo=1, bar=2} OK, but cannot initialize flexible array member */\nstruct ex2 e2 = {{1, 2}, {3}};\n/* valid: initialize foo=1, bar=2 members */\nstruct ex3 e3 = {1, 2};\n\ne1.flex[0] = 3; /* undefined behavior, in my case */\ne3.flex[0] = 2; /* undefined behavior again */\ne2.flex[0] = e3.flex[0]; /* undefined behavior */",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936220733,
        "id": "eef542be-aaaa-4c1e-8c8c-8a556f937712",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936220733,
        "parent_id": "2c5534d1-3267-4e32-8480-7b6e82363cb5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You may instead choose to use "
            ],
            [
              "malloc",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "calloc",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", or "
            ],
            [
              "realloc",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to allocate the structure with extra storage and later free it, which allows you to use the flexible array member as you wish:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You may instead choose to use "
          },
          {
            "Text": "malloc",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "calloc",
            "AttrFlags": 2
          },
          {
            "Text": ", or "
          },
          {
            "Text": "realloc",
            "AttrFlags": 2
          },
          {
            "Text": " to allocate the structure with extra storage and later free it, which allows you to use the flexible array member as you wish:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936220734,
        "id": "0bdc49f3-085a-4cb7-9b89-0603c232ab53",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936220734,
        "parent_id": "2c5534d1-3267-4e32-8480-7b6e82363cb5",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "/* valid: allocate an object of structure type `ex1` along with an array of 2 ints */\nstruct ex1 *pe1 = malloc(sizeof(*pe1) + 2 * sizeof(pe1-\u003eflex[0]));\n\n/* valid: allocate an object of structure type ex2 along with an array of 4 ints */\nstruct ex2 *pe2 = malloc(sizeof(struct ex2) + sizeof(int[4]));\n\n/* valid: allocate 5 structure type ex3 objects along with an array of 3 ints per object */\nstruct ex3 *pe3 = malloc(5 * (sizeof(*pe3) + sizeof(int[3])));\n\npe1-\u003eflex[0] = 3; /* valid */\npe3[0]-\u003eflex[0] = pe1-\u003eflex[0]; /* valid */"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "/* valid: allocate an object of structure type `ex1` along with an array of 2 ints */\nstruct ex1 *pe1 = malloc(sizeof(*pe1) + 2 * sizeof(pe1-\u003eflex[0]));\n\n/* valid: allocate an object of structure type ex2 along with an array of 4 ints */\nstruct ex2 *pe2 = malloc(sizeof(struct ex2) + sizeof(int[4]));\n\n/* valid: allocate 5 structure type ex3 objects along with an array of 3 ints per object */\nstruct ex3 *pe3 = malloc(5 * (sizeof(*pe3) + sizeof(int[3])));\n\npe1-\u003eflex[0] = 3; /* valid */\npe3[0]-\u003eflex[0] = pe1-\u003eflex[0]; /* valid */",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936220734,
        "id": "813660a3-1ecd-4360-b076-a424595c7d55",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936220734,
        "parent_id": "2c5534d1-3267-4e32-8480-7b6e82363cb5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The ‘struct hack’"
            ]
          ]
        },
        "type": "sub_sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "The ‘struct hack’"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936220734,
        "id": "0cd0d636-090c-4f49-af06-1bcb51c20c45",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936220734,
        "parent_id": "2c5534d1-3267-4e32-8480-7b6e82363cb5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Flexible array members did not exist prior to C99 and are treated as errors. A common workaround is to declare an array of length 1, a technique called the ‘struct hack’:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Flexible array members did not exist prior to C99 and are treated as errors. A common workaround is to declare an array of length 1, a technique called the ‘struct hack’:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936220734,
        "id": "a464736d-c050-4960-8ac7-e8112ad15fb9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936220734,
        "parent_id": "2c5534d1-3267-4e32-8480-7b6e82363cb5",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "struct ex1 \n{\n    size_t foo;\n    int flex[1];\n};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "struct ex1 \n{\n    size_t foo;\n    int flex[1];\n};",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936220734,
        "id": "5ceea817-602b-4eae-a84c-136e05fac8f8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936220734,
        "parent_id": "2c5534d1-3267-4e32-8480-7b6e82363cb5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This will affect the size of the structure, however, unlike a true flexible array member:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This will affect the size of the structure, however, unlike a true flexible array member:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936220734,
        "id": "a7e848ef-81f3-443c-a93b-e293f99f4a8c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936220734,
        "parent_id": "2c5534d1-3267-4e32-8480-7b6e82363cb5",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "/* Prints \"8,4,16\" on my machine, signifying that there are 4 bytes of padding. */\nprintf(\"%d,%d,%d\\n\", (int)sizeof(size_t), (int)sizeof(int[1]), (int)sizeof(struct ex1));"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "/* Prints \"8,4,16\" on my machine, signifying that there are 4 bytes of padding. */\nprintf(\"%d,%d,%d\\n\", (int)sizeof(size_t), (int)sizeof(int[1]), (int)sizeof(struct ex1));",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936220734,
        "id": "eb48b468-9c7d-4216-80d2-891b1509e8fe",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936220734,
        "parent_id": "2c5534d1-3267-4e32-8480-7b6e82363cb5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To use the "
            ],
            [
              "flex",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " member as a flexible array member, you’d allocate it with "
            ],
            [
              "malloc",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " as shown above, except that "
            ],
            [
              "sizeof(*pe1)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (or the equivalent "
            ],
            [
              "sizeof(struct ex1)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") would be replaced with "
            ],
            [
              "offsetof(struct ex1, flex)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or the longer, type-agnostic expression "
            ],
            [
              "sizeof(*pe1)-sizeof(pe1-\u003eflex)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Alternatively, you might subtract 1 from the desired length of the “flexible” array since it’s already included in the structure size, assuming the desired length is greater than 0. The same logic may be applied to the other usage examples."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To use the "
          },
          {
            "Text": "flex",
            "AttrFlags": 2
          },
          {
            "Text": " member as a flexible array member, you’d allocate it with "
          },
          {
            "Text": "malloc",
            "AttrFlags": 2
          },
          {
            "Text": " as shown above, except that "
          },
          {
            "Text": "sizeof(*pe1)",
            "AttrFlags": 2
          },
          {
            "Text": " (or the equivalent "
          },
          {
            "Text": "sizeof(struct ex1)",
            "AttrFlags": 2
          },
          {
            "Text": ") would be replaced with "
          },
          {
            "Text": "offsetof(struct ex1, flex)",
            "AttrFlags": 2
          },
          {
            "Text": " or the longer, type-agnostic expression "
          },
          {
            "Text": "sizeof(*pe1)-sizeof(pe1-\u003eflex)",
            "AttrFlags": 2
          },
          {
            "Text": ". Alternatively, you might subtract 1 from the desired length of the “flexible” array since it’s already included in the structure size, assuming the desired length is greater than 0. The same logic may be applied to the other usage examples."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936220735,
        "id": "70e288e4-b169-4190-ab43-c56ef839ea7c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936220735,
        "parent_id": "2c5534d1-3267-4e32-8480-7b6e82363cb5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Compatibility"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Compatibility"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936220735,
        "id": "37fa470e-05b7-4dbe-babb-73acbd48b3a6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936220735,
        "parent_id": "2c5534d1-3267-4e32-8480-7b6e82363cb5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If compatibility with compilers that do not support flexible array members is desired, you may use a macro defined like "
            ],
            [
              "FLEXMEMB_SIZE",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " below:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If compatibility with compilers that do not support flexible array members is desired, you may use a macro defined like "
          },
          {
            "Text": "FLEXMEMB_SIZE",
            "AttrFlags": 2
          },
          {
            "Text": " below:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936220735,
        "id": "f31bd051-e480-4af4-8ac1-5f6f2e820fee",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936220735,
        "parent_id": "2c5534d1-3267-4e32-8480-7b6e82363cb5",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#if __STDC_VERSION__ \u003c 199901L\n#define FLEXMEMB_SIZE 1\n#else\n#define FLEXMEMB_SIZE /* nothing */\n#endif\n\nstruct ex1 \n{\n    size_t foo;\n    int flex[FLEXMEMB_SIZE];\n};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#if __STDC_VERSION__ \u003c 199901L\n#define FLEXMEMB_SIZE 1\n#else\n#define FLEXMEMB_SIZE /* nothing */\n#endif\n\nstruct ex1 \n{\n    size_t foo;\n    int flex[FLEXMEMB_SIZE];\n};",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936220735,
        "id": "68d78715-3def-491e-83e8-304752a1f174",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936220735,
        "parent_id": "2c5534d1-3267-4e32-8480-7b6e82363cb5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When allocating objects, you should use the "
            ],
            [
              "offsetof(struct ex1, flex)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " form to refer to the structure size (excluding the flexible array member) since it is the only expression that will remain consistent between compilers that support flexible array members and compilers that do not:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When allocating objects, you should use the "
          },
          {
            "Text": "offsetof(struct ex1, flex)",
            "AttrFlags": 2
          },
          {
            "Text": " form to refer to the structure size (excluding the flexible array member) since it is the only expression that will remain consistent between compilers that support flexible array members and compilers that do not:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936220735,
        "id": "d93a3c33-e63c-4708-83de-52004397c1e5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936220735,
        "parent_id": "2c5534d1-3267-4e32-8480-7b6e82363cb5",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "struct ex1 *pe10 = malloc(offsetof(struct ex1, flex) + n * sizeof(pe10-\u003eflex[0]));"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "struct ex1 *pe10 = malloc(offsetof(struct ex1, flex) + n * sizeof(pe10-\u003eflex[0]));",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936220735,
        "id": "a73ac2e0-1d0e-49db-bdbd-1297f2799fa7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936220735,
        "parent_id": "2c5534d1-3267-4e32-8480-7b6e82363cb5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The alternative is to use the preprocessor to conditionally subtract 1 from the specified length. Due to the increased potential for inconsistency and general human error in this form, I moved the logic into a separate function:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The alternative is to use the preprocessor to conditionally subtract 1 from the specified length. Due to the increased potential for inconsistency and general human error in this form, I moved the logic into a separate function:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936220735,
        "id": "569bd942-38cc-42f6-9561-bd97cdae0b66",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936220735,
        "parent_id": "2c5534d1-3267-4e32-8480-7b6e82363cb5",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "struct ex1 *ex1_alloc(size_t n)\n{\n    struct ex1 tmp;\n#if __STDC_VERSION__ \u003c 199901L\n    if (n != 0)\n        n--;\n#endif\n    return malloc(sizeof(tmp) + n * sizeof(tmp.flex[0]));\n}\n...\n\n/* allocate an ex1 object with \"flex\" array of length 3 */\nstruct ex1 *pe1 = ex1_alloc(3);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "struct ex1 *ex1_alloc(size_t n)\n{\n    struct ex1 tmp;\n#if __STDC_VERSION__ \u003c 199901L\n    if (n != 0)\n        n--;\n#endif\n    return malloc(sizeof(tmp) + n * sizeof(tmp.flex[0]));\n}\n...\n\n/* allocate an ex1 object with \"flex\" array of length 3 */\nstruct ex1 *pe1 = ex1_alloc(3);",
        "code_language": "Plain Text"
      }
    ],
    "title": "Flexible Array Members",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}