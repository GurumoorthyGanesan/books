{
  "ID": "13b866b8-e774-4ca8-b290-931750015baa",
  "Root": {
    "alive": true,
    "content": [
      "29056a2c-428e-4950-8759-35d4651a9aaf",
      "22b7763a-caab-460d-ae2a-e1c6fe45f57b",
      "7ad18324-e814-4b12-adb1-083dab8472fa",
      "9240e81a-a4ca-43f4-83be-c7d3132a2e2e",
      "c6e944fd-7f98-4fa5-94d6-290ae24db6f0",
      "05a379e5-1eff-43fe-a240-62358343b94c",
      "87a5740f-5c27-477a-8fa5-b9b509b81ca4",
      "c83058bf-53b9-44b8-be3b-6e281eb227e9",
      "f169aa16-f32d-4f75-8699-5914064f1bdb",
      "1ff7d753-ddb7-45f1-8b9b-f209a40c64c2",
      "a821340e-d5ba-46ab-afcf-6dc12e7cea75",
      "141e988a-dddb-4b64-b8f4-318bb081a3b9",
      "7d021eb5-42e9-403a-93bf-49dd3705c9e9",
      "62bf611a-eaf9-4a0e-aef6-67af0c159516",
      "3f167e70-717f-4169-9dde-c6737371b10e",
      "3c5056f5-62eb-4c7a-8208-801da61b57bf",
      "2fa98121-4aa1-4fa1-b91a-7f55aca66f56",
      "9ca89979-0454-4cd8-b633-da50f10b3257",
      "7ce623ee-f47d-4912-b6e8-a810b2379cb3",
      "70e51057-2dd2-4451-97a4-23f70183f4ac"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551936211267,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "13b866b8-e774-4ca8-b290-931750015baa",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551936211267,
    "parent_id": "1e14553b-8aea-44fb-a0fe-fbc893ff529a",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Function pointers"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936211264,
        "id": "29056a2c-428e-4950-8759-35d4651a9aaf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936211264,
        "parent_id": "13b866b8-e774-4ca8-b290-931750015baa",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Pointers can also be used to point at functions."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Pointers can also be used to point at functions."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936211265,
        "id": "22b7763a-caab-460d-ae2a-e1c6fe45f57b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936211265,
        "parent_id": "13b866b8-e774-4ca8-b290-931750015baa",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Let’s take a basic function:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Let’s take a basic function:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936211265,
        "id": "7ad18324-e814-4b12-adb1-083dab8472fa",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936211265,
        "parent_id": "13b866b8-e774-4ca8-b290-931750015baa",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int my_function(int a, int b){    return 2 * a + 3 * b;}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int my_function(int a, int b){    return 2 * a + 3 * b;}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936211265,
        "id": "9240e81a-a4ca-43f4-83be-c7d3132a2e2e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936211265,
        "parent_id": "13b866b8-e774-4ca8-b290-931750015baa",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Now, let’s define a pointer of that function’s type:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Now, let’s define a pointer of that function’s type:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936211265,
        "id": "c6e944fd-7f98-4fa5-94d6-290ae24db6f0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936211265,
        "parent_id": "13b866b8-e774-4ca8-b290-931750015baa",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int (*my_pointer)(int, int);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int (*my_pointer)(int, int);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936211265,
        "id": "05a379e5-1eff-43fe-a240-62358343b94c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936211265,
        "parent_id": "13b866b8-e774-4ca8-b290-931750015baa",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To create one, just use this template:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To create one, just use this template:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936211265,
        "id": "87a5740f-5c27-477a-8fa5-b9b509b81ca4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936211265,
        "parent_id": "13b866b8-e774-4ca8-b290-931750015baa",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "return_type_of_func (*my_func_pointer)(type_arg1, type_arg2, ...)"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "return_type_of_func (*my_func_pointer)(type_arg1, type_arg2, ...)",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936211266,
        "id": "c83058bf-53b9-44b8-be3b-6e281eb227e9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936211266,
        "parent_id": "13b866b8-e774-4ca8-b290-931750015baa",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We then must assign this pointer to the function:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "We then must assign this pointer to the function:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936211266,
        "id": "f169aa16-f32d-4f75-8699-5914064f1bdb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936211266,
        "parent_id": "13b866b8-e774-4ca8-b290-931750015baa",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "my_pointer = \u0026my_function;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "my_pointer = \u0026my_function;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936211266,
        "id": "1ff7d753-ddb7-45f1-8b9b-f209a40c64c2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936211266,
        "parent_id": "13b866b8-e774-4ca8-b290-931750015baa",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This pointer can now be used to call the function:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This pointer can now be used to call the function:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936211266,
        "id": "a821340e-d5ba-46ab-afcf-6dc12e7cea75",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936211266,
        "parent_id": "13b866b8-e774-4ca8-b290-931750015baa",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "/* Calling the pointed function */int result = (*my_pointer)(4, 2);.../* Using the function pointer as an argument to another function */void another_function(int (*another_pointer)(int, int)){    int a = 4;    int b = 2;    int result = (*another_pointer)(a, b);    printf(\"%d\\n\", result);}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "/* Calling the pointed function */int result = (*my_pointer)(4, 2);.../* Using the function pointer as an argument to another function */void another_function(int (*another_pointer)(int, int)){    int a = 4;    int b = 2;    int result = (*another_pointer)(a, b);    printf(\"%d\\n\", result);}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936211266,
        "id": "141e988a-dddb-4b64-b8f4-318bb081a3b9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936211266,
        "parent_id": "13b866b8-e774-4ca8-b290-931750015baa",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Although this syntax seems more natural and coherent with basic types, attributing and dereferencing function pointers don’t require the usage of "
            ],
            [
              "\u0026",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "\\*",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " operators. So the following snippet is equally valid:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Although this syntax seems more natural and coherent with basic types, attributing and dereferencing function pointers don’t require the usage of "
          },
          {
            "Text": "\u0026",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "\\*",
            "AttrFlags": 2
          },
          {
            "Text": " operators. So the following snippet is equally valid:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936211266,
        "id": "7d021eb5-42e9-403a-93bf-49dd3705c9e9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936211266,
        "parent_id": "13b866b8-e774-4ca8-b290-931750015baa",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "/* Attribution without the \u0026 operator */my_pointer = my_function;/* Dereferencing without the * operator */int result = my_pointer(4, 2);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "/* Attribution without the \u0026 operator */my_pointer = my_function;/* Dereferencing without the * operator */int result = my_pointer(4, 2);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936211266,
        "id": "62bf611a-eaf9-4a0e-aef6-67af0c159516",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936211266,
        "parent_id": "13b866b8-e774-4ca8-b290-931750015baa",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To increase the readability of function pointers, typedefs may be used."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To increase the readability of function pointers, typedefs may be used."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936211267,
        "id": "3f167e70-717f-4169-9dde-c6737371b10e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936211267,
        "parent_id": "13b866b8-e774-4ca8-b290-931750015baa",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "typedef void (*Callback)(int a);void some_function(Callback callback){    int a = 4;    callback(a);}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "typedef void (*Callback)(int a);void some_function(Callback callback){    int a = 4;    callback(a);}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936211267,
        "id": "3c5056f5-62eb-4c7a-8208-801da61b57bf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936211267,
        "parent_id": "13b866b8-e774-4ca8-b290-931750015baa",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Another readability trick is that the C standard allows one to simplify a function pointer in arguments like above (but not in variable declaration) to something that looks like a function prototype; thus the following can be equivalently used for function definitions and declarations:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Another readability trick is that the C standard allows one to simplify a function pointer in arguments like above (but not in variable declaration) to something that looks like a function prototype; thus the following can be equivalently used for function definitions and declarations:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936211267,
        "id": "2fa98121-4aa1-4fa1-b91a-7f55aca66f56",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936211267,
        "parent_id": "13b866b8-e774-4ca8-b290-931750015baa",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "void some_function(void callback(int))\n{\n    int a = 4;\n    callback(a);\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "void some_function(void callback(int))\n{\n    int a = 4;\n    callback(a);\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936211267,
        "id": "9ca89979-0454-4cd8-b633-da50f10b3257",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936211267,
        "parent_id": "13b866b8-e774-4ca8-b290-931750015baa",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936211267,
        "id": "7ce623ee-f47d-4912-b6e8-a810b2379cb3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936211267,
        "parent_id": "13b866b8-e774-4ca8-b290-931750015baa",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "See also"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "See also"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936211267,
        "id": "70e51057-2dd2-4451-97a4-23f70183f4ac",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936211267,
        "parent_id": "13b866b8-e774-4ca8-b290-931750015baa",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "http://stackoverflow.com/documentation/c/250/function-pointers#t=201701141235586038319"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "http://stackoverflow.com/documentation/c/250/function-pointers#t=201701141235586038319"
          }
        ]
      }
    ],
    "title": "Function pointers",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}