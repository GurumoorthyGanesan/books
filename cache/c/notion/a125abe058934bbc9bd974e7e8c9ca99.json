{
  "ID": "a125abe0-5893-4bbc-9bd9-74e7e8c9ca99",
  "Root": {
    "alive": true,
    "content": [
      "e2a40feb-76ce-4ad1-9c84-a3c1e1b8bb6d",
      "4b45fc6c-cff8-471b-a140-5e0db4e335af",
      "a899fe14-7f7e-416a-acc4-48773539ab7a",
      "5c0a8979-7aaf-4f67-9b82-26c104a26808",
      "88de50c3-0ddc-43a3-83f9-d929dc262634",
      "ec66747c-6861-4612-bc41-ed98d8eb029f",
      "fd5babad-8e12-487a-8130-76ab3a7ce2ad",
      "949381d3-d570-4d1e-abfe-64597a0cf318",
      "29fc832f-08c5-46a4-8e12-c62652bc320e",
      "17a357f6-9dc0-4f6a-8dad-cb718cbb6c71"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551935861333,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "a125abe0-5893-4bbc-9bd9-74e7e8c9ca99",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551935861333,
    "parent_id": "262dadd4-3655-45db-88b6-06e23e8e3a7b",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Generic selection based on multiple arguments"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935861329,
        "id": "e2a40feb-76ce-4ad1-9c84-a3c1e1b8bb6d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935861329,
        "parent_id": "a125abe0-5893-4bbc-9bd9-74e7e8c9ca99",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If a selection on multiple arguments for a type generic expression is wanted, and all types in question are arithmetic types, an easy way to avoid nested "
            ],
            [
              "_Generic",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " expressions is to use addition of the parameters in the controlling expression:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If a selection on multiple arguments for a type generic expression is wanted, and all types in question are arithmetic types, an easy way to avoid nested "
          },
          {
            "Text": "_Generic",
            "AttrFlags": 2
          },
          {
            "Text": " expressions is to use addition of the parameters in the controlling expression:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935861331,
        "id": "4b45fc6c-cff8-471b-a140-5e0db4e335af",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935861331,
        "parent_id": "a125abe0-5893-4bbc-9bd9-74e7e8c9ca99",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int max_int(int, int);\nunsigned max_unsigned(unsigned, unsigned);\ndouble max_double(double, double);\n\n#define MAX(X, Y) _Generic((X)+(Y),                \\\n                           int:      max_int,      \\\n                           unsigned: max_unsigned, \\\n                           default:  max_double)   \\\n                    ((X), (Y))"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int max_int(int, int);\nunsigned max_unsigned(unsigned, unsigned);\ndouble max_double(double, double);\n\n#define MAX(X, Y) _Generic((X)+(Y),                \\\n                           int:      max_int,      \\\n                           unsigned: max_unsigned, \\\n                           default:  max_double)   \\\n                    ((X), (Y))",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935861332,
        "id": "a899fe14-7f7e-416a-acc4-48773539ab7a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935861332,
        "parent_id": "a125abe0-5893-4bbc-9bd9-74e7e8c9ca99",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Here, the controlling expression "
            ],
            [
              "(X)+(Y)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is only inspected according to its type and not evaluated. The usual conversions for arithmetic operands are performed to determine the selected type."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Here, the controlling expression "
          },
          {
            "Text": "(X)+(Y)",
            "AttrFlags": 2
          },
          {
            "Text": " is only inspected according to its type and not evaluated. The usual conversions for arithmetic operands are performed to determine the selected type."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935861332,
        "id": "5c0a8979-7aaf-4f67-9b82-26c104a26808",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935861332,
        "parent_id": "a125abe0-5893-4bbc-9bd9-74e7e8c9ca99",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For more complex situation, a selection can be made based on more than one argument to the operator, by nesting them together."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For more complex situation, a selection can be made based on more than one argument to the operator, by nesting them together."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935861332,
        "id": "88de50c3-0ddc-43a3-83f9-d929dc262634",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935861332,
        "parent_id": "a125abe0-5893-4bbc-9bd9-74e7e8c9ca99",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This example selects between four externally implemented functions, that take combinations of two int and/or string arguments, and return their sum."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This example selects between four externally implemented functions, that take combinations of two int and/or string arguments, and return their sum."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935861332,
        "id": "ec66747c-6861-4612-bc41-ed98d8eb029f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935861332,
        "parent_id": "a125abe0-5893-4bbc-9bd9-74e7e8c9ca99",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int AddIntInt(int a, int b);\nint AddIntStr(int a, const char* b);\nint AddStrInt(const char*  a, int b );\nint AddStrStr(const char*  a, const char*  b);\n\n#define AddStr(y)                            \\\n   _Generic((y),         int: AddStrInt,     \\\n                        char*: AddStrStr,    \\\n                  const char*: AddStrStr )\n\n#define AddInt(y)                            \\\n   _Generic((y),          int: AddIntInt,    \\\n                        char*: AddIntStr,    \\\n                  const char*: AddIntStr )\n\n#define Add(x, y)                            \\\n   _Generic((x) ,        int: AddInt(y) ,    \\\n                       char*: AddStr(y) ,    \\\n                 const char*: AddStr(y))     \\\n                         ((x), (y))\n\nint main( void )\n{\n    int result = 0;\n    result = Add( 100 , 999 );\n    result = Add( 100 , \"999\" );\n    result = Add( \"100\" , 999 );\n    result = Add( \"100\" , \"999\" );\n\n    const int a = -123;\n    char b[] = \"4321\";\n    result = Add( a , b );\n\n    int c = 1;\n    const char d[] = \"0\";\n    result = Add( d , ++c );\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int AddIntInt(int a, int b);\nint AddIntStr(int a, const char* b);\nint AddStrInt(const char*  a, int b );\nint AddStrStr(const char*  a, const char*  b);\n\n#define AddStr(y)                            \\\n   _Generic((y),         int: AddStrInt,     \\\n                        char*: AddStrStr,    \\\n                  const char*: AddStrStr )\n\n#define AddInt(y)                            \\\n   _Generic((y),          int: AddIntInt,    \\\n                        char*: AddIntStr,    \\\n                  const char*: AddIntStr )\n\n#define Add(x, y)                            \\\n   _Generic((x) ,        int: AddInt(y) ,    \\\n                       char*: AddStr(y) ,    \\\n                 const char*: AddStr(y))     \\\n                         ((x), (y))\n\nint main( void )\n{\n    int result = 0;\n    result = Add( 100 , 999 );\n    result = Add( 100 , \"999\" );\n    result = Add( \"100\" , 999 );\n    result = Add( \"100\" , \"999\" );\n\n    const int a = -123;\n    char b[] = \"4321\";\n    result = Add( a , b );\n\n    int c = 1;\n    const char d[] = \"0\";\n    result = Add( d , ++c );\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935861333,
        "id": "fd5babad-8e12-487a-8130-76ab3a7ce2ad",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935861333,
        "parent_id": "a125abe0-5893-4bbc-9bd9-74e7e8c9ca99",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Even though it appears as if argument "
            ],
            [
              "y",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is evaluated more than once, it isn’t 1. Both arguments are evaluated only once, at the end of macro Add: "
            ],
            [
              "( x , y )",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", just like in an ordinary function call."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Even though it appears as if argument "
          },
          {
            "Text": "y",
            "AttrFlags": 2
          },
          {
            "Text": " is evaluated more than once, it isn’t 1. Both arguments are evaluated only once, at the end of macro Add: "
          },
          {
            "Text": "( x , y )",
            "AttrFlags": 2
          },
          {
            "Text": ", just like in an ordinary function call."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935861333,
        "id": "949381d3-d570-4d1e-abfe-64597a0cf318",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935861333,
        "parent_id": "a125abe0-5893-4bbc-9bd9-74e7e8c9ca99",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935861333,
        "id": "29fc832f-08c5-46a4-8e12-c62652bc320e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935861333,
        "parent_id": "a125abe0-5893-4bbc-9bd9-74e7e8c9ca99",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "1 (Quoted from: ISO:IEC 9899:201X 6.5.1.1 Generic selection 3)"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "1 (Quoted from: ISO:IEC 9899:201X 6.5.1.1 Generic selection 3)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935861333,
        "id": "17a357f6-9dc0-4f6a-8dad-cb718cbb6c71",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935861333,
        "parent_id": "a125abe0-5893-4bbc-9bd9-74e7e8c9ca99",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The controlling expression of a generic selection is not evaluated."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The controlling expression of a generic selection is not evaluated."
          }
        ]
      }
    ],
    "title": "Generic selection based on multiple arguments",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}