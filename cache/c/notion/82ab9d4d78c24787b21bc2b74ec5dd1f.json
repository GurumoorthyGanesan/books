{
  "ID": "82ab9d4d-78c2-4787-b21b-c2b74ec5dd1f",
  "Root": {
    "alive": true,
    "content": [
      "d3ee22ba-785d-4814-b14c-523b023db601",
      "1424d95a-b2aa-44e7-aef4-69a504f9edab",
      "86692a0e-720e-4642-ae11-d9052424335a",
      "844fd587-85fe-4a4e-93bf-99dc325e1a7c",
      "b883e702-47b8-4dbd-b939-a92cae6fd417",
      "52c826cd-37a0-453e-987e-36695d330dc8",
      "411a8b71-b5ad-4275-ab42-5136e8352283",
      "0646eb4c-e1a1-4dc2-8048-15451274418a",
      "fe216072-aa0c-4894-98c3-083fdecd3b35"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551936795196,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "82ab9d4d-78c2-4787-b21b-c2b74ec5dd1f",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551936795196,
    "parent_id": "5e44bd54-3362-4b1a-934b-acecce2afc7f",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "050 Multidimensional arrays of variable size"
        ]
      ]
    },
    "type": "page",
    "version": 2,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936795192,
        "id": "d3ee22ba-785d-4814-b14c-523b023db601",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936795192,
        "parent_id": "82ab9d4d-78c2-4787-b21b-c2b74ec5dd1f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Since C99, C has variable length arrays, VLA, that model arrays with bounds that are only known at initialization time. While you have to be careful not to allocate too large VLA (they might smash your stack), using "
            ],
            [
              "pointers to VLA",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " and using them in "
            ],
            [
              "sizeof",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " expressions is fine."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Since C99, C has variable length arrays, VLA, that model arrays with bounds that are only known at initialization time. While you have to be careful not to allocate too large VLA (they might smash your stack), using "
          },
          {
            "Text": "pointers to VLA",
            "AttrFlags": 4
          },
          {
            "Text": " and using them in "
          },
          {
            "Text": "sizeof",
            "AttrFlags": 2
          },
          {
            "Text": " expressions is fine."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936795194,
        "id": "1424d95a-b2aa-44e7-aef4-69a504f9edab",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936795194,
        "parent_id": "82ab9d4d-78c2-4787-b21b-c2b74ec5dd1f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "double sumAll(size_t n, size_t m, double A[n][m]) {\n    double ret = 0.0;\n    for (size_t i = 0; i \u003c n; ++i)\n       for (size_t j = 0; j \u003c m; ++j)\n          ret += A[i][j]\n    return ret;\n}\n\nint main(int argc, char *argv[argc+1]) {\n   size_t n = argc*10;\n   size_t m = argc*8;\n   double (*matrix)[m] = malloc(sizeof(double[n][m]));\n   // initialize matrix somehow\n   double res = sumAll(n, m, matrix);\n   printf(\"result is %g\\n\", res);\n   free(matrix);\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "double sumAll(size_t n, size_t m, double A[n][m]) {\n    double ret = 0.0;\n    for (size_t i = 0; i \u003c n; ++i)\n       for (size_t j = 0; j \u003c m; ++j)\n          ret += A[i][j]\n    return ret;\n}\n\nint main(int argc, char *argv[argc+1]) {\n   size_t n = argc*10;\n   size_t m = argc*8;\n   double (*matrix)[m] = malloc(sizeof(double[n][m]));\n   // initialize matrix somehow\n   double res = sumAll(n, m, matrix);\n   printf(\"result is %g\\n\", res);\n   free(matrix);\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936795195,
        "id": "86692a0e-720e-4642-ae11-d9052424335a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936795195,
        "parent_id": "82ab9d4d-78c2-4787-b21b-c2b74ec5dd1f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Here "
            ],
            [
              "matrix",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is a pointer to elements of type "
            ],
            [
              "double[m]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", and the "
            ],
            [
              "sizeof",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " expression with "
            ],
            [
              "double[n][m]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " ensures that it contains space for "
            ],
            [
              "n",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " such elements."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Here "
          },
          {
            "Text": "matrix",
            "AttrFlags": 2
          },
          {
            "Text": " is a pointer to elements of type "
          },
          {
            "Text": "double[m]",
            "AttrFlags": 2
          },
          {
            "Text": ", and the "
          },
          {
            "Text": "sizeof",
            "AttrFlags": 2
          },
          {
            "Text": " expression with "
          },
          {
            "Text": "double[n][m]",
            "AttrFlags": 2
          },
          {
            "Text": " ensures that it contains space for "
          },
          {
            "Text": "n",
            "AttrFlags": 2
          },
          {
            "Text": " such elements."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936795195,
        "id": "844fd587-85fe-4a4e-93bf-99dc325e1a7c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936795195,
        "parent_id": "82ab9d4d-78c2-4787-b21b-c2b74ec5dd1f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "All this space is allocated contiguously and can thus be deallocated by a single call to "
            ],
            [
              "free",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "All this space is allocated contiguously and can thus be deallocated by a single call to "
          },
          {
            "Text": "free",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936795195,
        "id": "b883e702-47b8-4dbd-b939-a92cae6fd417",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936795195,
        "parent_id": "82ab9d4d-78c2-4787-b21b-c2b74ec5dd1f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The presence of VLA in the language also affects the possible declarations of arrays and pointers in function headers. Now, a general integer expression is permitted inside the "
            ],
            [
              "[]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " of array parameters. For both functions the expressions in "
            ],
            [
              "[]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " use parameters that have declared before in the parameter list. For "
            ],
            [
              "sumAll",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " these are the lengths that the user code expects for the matrix. As for all array function parameters in C the innermost dimension is rewritten to a pointer type, so this is equivalent to the declaration"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The presence of VLA in the language also affects the possible declarations of arrays and pointers in function headers. Now, a general integer expression is permitted inside the "
          },
          {
            "Text": "[]",
            "AttrFlags": 2
          },
          {
            "Text": " of array parameters. For both functions the expressions in "
          },
          {
            "Text": "[]",
            "AttrFlags": 2
          },
          {
            "Text": " use parameters that have declared before in the parameter list. For "
          },
          {
            "Text": "sumAll",
            "AttrFlags": 2
          },
          {
            "Text": " these are the lengths that the user code expects for the matrix. As for all array function parameters in C the innermost dimension is rewritten to a pointer type, so this is equivalent to the declaration"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936795195,
        "id": "52c826cd-37a0-453e-987e-36695d330dc8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936795195,
        "parent_id": "82ab9d4d-78c2-4787-b21b-c2b74ec5dd1f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "double sumAll(size_t n, size_t m, double (*A)[m]);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "double sumAll(size_t n, size_t m, double (*A)[m]);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936795196,
        "id": "411a8b71-b5ad-4275-ab42-5136e8352283",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936795196,
        "parent_id": "82ab9d4d-78c2-4787-b21b-c2b74ec5dd1f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "That is, "
            ],
            [
              "n",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is not really part of the function interface, but the information can be useful for documentation and it could also be used by bounds checking compilers to warn about out-of-bounds access."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "That is, "
          },
          {
            "Text": "n",
            "AttrFlags": 2
          },
          {
            "Text": " is not really part of the function interface, but the information can be useful for documentation and it could also be used by bounds checking compilers to warn about out-of-bounds access."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936795196,
        "id": "0646eb4c-e1a1-4dc2-8048-15451274418a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936795196,
        "parent_id": "82ab9d4d-78c2-4787-b21b-c2b74ec5dd1f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Likwise, for "
            ],
            [
              "main",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", the expression "
            ],
            [
              "argc+1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is the minimal length that the C standard prescribes for the "
            ],
            [
              "argv",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " argument."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Likwise, for "
          },
          {
            "Text": "main",
            "AttrFlags": 2
          },
          {
            "Text": ", the expression "
          },
          {
            "Text": "argc+1",
            "AttrFlags": 2
          },
          {
            "Text": " is the minimal length that the C standard prescribes for the "
          },
          {
            "Text": "argv",
            "AttrFlags": 2
          },
          {
            "Text": " argument."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936795196,
        "id": "fe216072-aa0c-4894-98c3-083fdecd3b35",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936795196,
        "parent_id": "82ab9d4d-78c2-4787-b21b-c2b74ec5dd1f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note that officially VLA support is optional in C11, but we know of no compiler that implements C11 and that doesn’t have them. You could test with the macro "
            ],
            [
              "__STDC_NO_VLA__",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " if you must."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note that officially VLA support is optional in C11, but we know of no compiler that implements C11 and that doesn’t have them. You could test with the macro "
          },
          {
            "Text": "__STDC_NO_VLA__",
            "AttrFlags": 2
          },
          {
            "Text": " if you must."
          }
        ]
      }
    ],
    "title": "050 Multidimensional arrays of variable size",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}