{
  "ID": "18ebfaed-862e-4220-88df-95d32332e129",
  "Root": {
    "alive": true,
    "content": [
      "2bc1e446-e2a6-4fda-a0c5-2600396295c7",
      "773a2d9b-37eb-499e-9aec-ec800a258f13",
      "3ab72d24-62da-4351-8ba5-d89a6ae30963",
      "3e29a8bd-b5e7-41c4-8268-534b3572319a",
      "593e21aa-b425-43d8-989e-fae5a67e2de8"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551936615360,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "18ebfaed-862e-4220-88df-95d32332e129",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551936615360,
    "parent_id": "218166d2-ae4c-4856-827d-6080353375ec",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Nested if...else VS if..else Ladder"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936615356,
        "id": "2bc1e446-e2a6-4fda-a0c5-2600396295c7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936615356,
        "parent_id": "18ebfaed-862e-4220-88df-95d32332e129",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Nested "
            ],
            [
              "if()...else",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " statements take more execution time (they are slower) in comparison to an "
            ],
            [
              "if()...else",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " ladder because the nested "
            ],
            [
              "if()...else",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " statements check all the inner conditional statements once the outer conditional "
            ],
            [
              "if()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " statement is satisfied, whereas the "
            ],
            [
              "if()..else",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " ladder will stop condition testing once any of the "
            ],
            [
              "if()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or the "
            ],
            [
              "else if()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " conditional statements are true."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Nested "
          },
          {
            "Text": "if()...else",
            "AttrFlags": 2
          },
          {
            "Text": " statements take more execution time (they are slower) in comparison to an "
          },
          {
            "Text": "if()...else",
            "AttrFlags": 2
          },
          {
            "Text": " ladder because the nested "
          },
          {
            "Text": "if()...else",
            "AttrFlags": 2
          },
          {
            "Text": " statements check all the inner conditional statements once the outer conditional "
          },
          {
            "Text": "if()",
            "AttrFlags": 2
          },
          {
            "Text": " statement is satisfied, whereas the "
          },
          {
            "Text": "if()..else",
            "AttrFlags": 2
          },
          {
            "Text": " ladder will stop condition testing once any of the "
          },
          {
            "Text": "if()",
            "AttrFlags": 2
          },
          {
            "Text": " or the "
          },
          {
            "Text": "else if()",
            "AttrFlags": 2
          },
          {
            "Text": " conditional statements are true."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936615359,
        "id": "773a2d9b-37eb-499e-9aec-ec800a258f13",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936615359,
        "parent_id": "18ebfaed-862e-4220-88df-95d32332e129",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "An "
            ],
            [
              "if()...else",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " ladder:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "An "
          },
          {
            "Text": "if()...else",
            "AttrFlags": 2
          },
          {
            "Text": " ladder:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936615359,
        "id": "3ab72d24-62da-4351-8ba5-d89a6ae30963",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936615359,
        "parent_id": "18ebfaed-862e-4220-88df-95d32332e129",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cstdio.h\u003e\n\nint main(int argc, char *argv[])\n{\n  int a, b, c;\n  printf(\"\\nEnter Three numbers = \");\n  scanf(\"%d%d%d\", \u0026a, \u0026b, \u0026c);\n  if ((a \u003c b) \u0026\u0026 (a \u003c c))\n  {\n    printf(\"\\na = %d is the smallest.\", a);\n  }\n  else if ((b \u003c a) \u0026\u0026 (b \u003c c))\n  {\n    printf(\"\\nb = %d is the smallest.\", b);\n  }\n  else if ((c \u003c a) \u0026\u0026 (c \u003c b))\n  {\n    printf(\"\\nc = %d is the smallest.\", c);\n  }\n  else\n  {\n    printf(\"\\nImprove your coding logic\");\n  }\n  return 0;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cstdio.h\u003e\n\nint main(int argc, char *argv[])\n{\n  int a, b, c;\n  printf(\"\\nEnter Three numbers = \");\n  scanf(\"%d%d%d\", \u0026a, \u0026b, \u0026c);\n  if ((a \u003c b) \u0026\u0026 (a \u003c c))\n  {\n    printf(\"\\na = %d is the smallest.\", a);\n  }\n  else if ((b \u003c a) \u0026\u0026 (b \u003c c))\n  {\n    printf(\"\\nb = %d is the smallest.\", b);\n  }\n  else if ((c \u003c a) \u0026\u0026 (c \u003c b))\n  {\n    printf(\"\\nc = %d is the smallest.\", c);\n  }\n  else\n  {\n    printf(\"\\nImprove your coding logic\");\n  }\n  return 0;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936615359,
        "id": "3e29a8bd-b5e7-41c4-8268-534b3572319a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936615359,
        "parent_id": "18ebfaed-862e-4220-88df-95d32332e129",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Is, in the general case, considered to be better than the equivalent nested "
            ],
            [
              "if()...else",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Is, in the general case, considered to be better than the equivalent nested "
          },
          {
            "Text": "if()...else",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936615360,
        "id": "593e21aa-b425-43d8-989e-fae5a67e2de8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936615360,
        "parent_id": "18ebfaed-862e-4220-88df-95d32332e129",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cstdio.h\u003e\n\nint main(int argc, char *argv[])\n{\n  int a, b, c;\n  printf(\"\\nEnter Three numbers = \");\n  scanf(\"%d%d%d\", \u0026a, \u0026b, \u0026c);\n  if (a \u003c b)\n  {\n    if (a \u003c c)\n      {\n        printf(\"\\na = %d is the smallest.\", a);\n      }\n    else\n      {\n        printf(\"\\nc = %d is the smallest.\", c);\n      }\n  }\n  else\n  {\n    if(b \u003c c)\n    {\n      printf(\"\\nb = %d is the smallest.\", b);\n    }\n    else\n    {\n      printf(\"\\nc = %d is the smallest.\", c);\n    }\n  }\n  return 0;  \n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cstdio.h\u003e\n\nint main(int argc, char *argv[])\n{\n  int a, b, c;\n  printf(\"\\nEnter Three numbers = \");\n  scanf(\"%d%d%d\", \u0026a, \u0026b, \u0026c);\n  if (a \u003c b)\n  {\n    if (a \u003c c)\n      {\n        printf(\"\\na = %d is the smallest.\", a);\n      }\n    else\n      {\n        printf(\"\\nc = %d is the smallest.\", c);\n      }\n  }\n  else\n  {\n    if(b \u003c c)\n    {\n      printf(\"\\nb = %d is the smallest.\", b);\n    }\n    else\n    {\n      printf(\"\\nc = %d is the smallest.\", c);\n    }\n  }\n  return 0;  \n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "Nested if...else VS if..else Ladder",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}