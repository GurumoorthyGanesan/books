{
  "ID": "8596ed91-d0c2-40ac-9fe2-fe110e3fc333",
  "Root": {
    "alive": true,
    "content": [
      "c76e78e1-17c7-4992-a8bc-1a5d4cab11bb",
      "a1725919-0222-4612-8dfd-a3b09992e403",
      "d02b09a2-5c30-4c30-af44-29735baebd44",
      "1f5d18e5-5631-4fd1-9a8c-cffed08fedd8",
      "13ce57f6-5382-4095-90c4-b660e3eb7b5b",
      "0c53a800-6d8e-41be-8811-53c6bbaf05c0",
      "53ccaaaa-87d3-4c32-8a7e-60232ae0ee4f"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551935786706,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "8596ed91-d0c2-40ac-9fe2-fe110e3fc333",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551935786706,
    "parent_id": "68e74303-cec6-4c9d-a46e-83274bc84bf4",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "FOREACH implementation"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935786702,
        "id": "c76e78e1-17c7-4992-a8bc-1a5d4cab11bb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935786702,
        "parent_id": "8596ed91-d0c2-40ac-9fe2-fe110e3fc333",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We can also use macros for making code easier to read and write. For example we can implement macros for implementing the "
            ],
            [
              "foreach",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " construct in C for some data structures like singly- and doubly-linked lists, queues, etc."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "We can also use macros for making code easier to read and write. For example we can implement macros for implementing the "
          },
          {
            "Text": "foreach",
            "AttrFlags": 2
          },
          {
            "Text": " construct in C for some data structures like singly- and doubly-linked lists, queues, etc."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935786705,
        "id": "a1725919-0222-4612-8dfd-a3b09992e403",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935786705,
        "parent_id": "8596ed91-d0c2-40ac-9fe2-fe110e3fc333",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Here is a small example."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Here is a small example."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935786705,
        "id": "d02b09a2-5c30-4c30-af44-29735baebd44",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935786705,
        "parent_id": "8596ed91-d0c2-40ac-9fe2-fe110e3fc333",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cstdio.h\u003e\n#include \u003cstdlib.h\u003e\n\nstruct LinkedListNode\n{\n    int data;\n    struct LinkedListNode *next;\n};\n\n#define FOREACH_LIST(node, list) \\\n     for (node=list; node; node=node-\u003enext)\n\n/* Usage */\nint main(void)\n{\n    struct LinkedListNode *list, **plist = \u0026list, *node;\n    int i;\n\n    for (i=0; i\u003c10; i++)\n    {\n         *plist = malloc(sizeof(struct LinkedListNode));\n         (*plist)-\u003edata = i;\n         (*plist)-\u003enext = NULL;\n         plist          = \u0026(*plist)-\u003enext;\n    }\n\n    /* printing the elements here */\n    FOREACH_LIST(node, list)\n    {\n        printf(\"%d\\n\", node-\u003edata);\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cstdio.h\u003e\n#include \u003cstdlib.h\u003e\n\nstruct LinkedListNode\n{\n    int data;\n    struct LinkedListNode *next;\n};\n\n#define FOREACH_LIST(node, list) \\\n     for (node=list; node; node=node-\u003enext)\n\n/* Usage */\nint main(void)\n{\n    struct LinkedListNode *list, **plist = \u0026list, *node;\n    int i;\n\n    for (i=0; i\u003c10; i++)\n    {\n         *plist = malloc(sizeof(struct LinkedListNode));\n         (*plist)-\u003edata = i;\n         (*plist)-\u003enext = NULL;\n         plist          = \u0026(*plist)-\u003enext;\n    }\n\n    /* printing the elements here */\n    FOREACH_LIST(node, list)\n    {\n        printf(\"%d\\n\", node-\u003edata);\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935786706,
        "id": "1f5d18e5-5631-4fd1-9a8c-cffed08fedd8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935786706,
        "parent_id": "8596ed91-d0c2-40ac-9fe2-fe110e3fc333",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You can make a standard interface for such data-structures and write a generic implementation of "
            ],
            [
              "FOREACH",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " as:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You can make a standard interface for such data-structures and write a generic implementation of "
          },
          {
            "Text": "FOREACH",
            "AttrFlags": 2
          },
          {
            "Text": " as:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935786706,
        "id": "13ce57f6-5382-4095-90c4-b660e3eb7b5b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935786706,
        "parent_id": "8596ed91-d0c2-40ac-9fe2-fe110e3fc333",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cstdio.h\u003e\n#include \u003cstdlib.h\u003e\n\ntypedef struct CollectionItem_\n{\n    int data;\n    struct CollectionItem_ *next;\n} CollectionItem;\n\ntypedef struct Collection_\n{\n    /* interface functions */\n    void* (*first)(void *coll);\n    void* (*last) (void *coll);\n    void* (*next) (void *coll, CollectionItem *currItem);\n\n    CollectionItem *collectionHead;\n    /* Other fields */\n} Collection;\n\n/* must implement */\nvoid *first(void *coll)\n{\n    return ((Collection*)coll)-\u003ecollectionHead;\n}\n\n/* must implement */\nvoid *last(void *coll)\n{\n    return NULL;\n}\n\n/* must implement */\nvoid *next(void *coll, CollectionItem *curr)\n{\n    return curr-\u003enext;\n}\n\nCollectionItem *new_CollectionItem(int data)\n{\n    CollectionItem *item = malloc(sizeof(CollectionItem));\n    item-\u003edata = data;\n    item-\u003enext = NULL;\n    return item;\n}\n\nvoid Add_Collection(Collection *coll, int data)\n{\n    CollectionItem **item = \u0026coll-\u003ecollectionHead;\n    while(*item)\n        item = \u0026(*item)-\u003enext;\n    (*item) = new_CollectionItem(data);\n}\n\nCollection *new_Collection()\n{\n    Collection *nc = malloc(sizeof(Collection));\n    nc-\u003efirst = first;\n    nc-\u003elast  = last;\n    nc-\u003enext  = next;\n    return nc;\n}\n\n/* generic implementation */\n#define FOREACH(node, collection)                      \\\n    for (node  = (collection)-\u003efirst(collection);      \\\n         node != (collection)-\u003elast(collection);       \\\n         node  = (collection)-\u003enext(collection, node))\n\nint main(void)\n{\n    Collection *coll = new_Collection();\n    CollectionItem *node;\n    int i;\n\n    for(i=0; i\u003c10; i++)\n    {\n         Add_Collection(coll, i);\n    }\n\n    /* printing the elements here */\n    FOREACH(node, coll)\n    {\n        printf(\"%d\\n\", node-\u003edata);\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cstdio.h\u003e\n#include \u003cstdlib.h\u003e\n\ntypedef struct CollectionItem_\n{\n    int data;\n    struct CollectionItem_ *next;\n} CollectionItem;\n\ntypedef struct Collection_\n{\n    /* interface functions */\n    void* (*first)(void *coll);\n    void* (*last) (void *coll);\n    void* (*next) (void *coll, CollectionItem *currItem);\n\n    CollectionItem *collectionHead;\n    /* Other fields */\n} Collection;\n\n/* must implement */\nvoid *first(void *coll)\n{\n    return ((Collection*)coll)-\u003ecollectionHead;\n}\n\n/* must implement */\nvoid *last(void *coll)\n{\n    return NULL;\n}\n\n/* must implement */\nvoid *next(void *coll, CollectionItem *curr)\n{\n    return curr-\u003enext;\n}\n\nCollectionItem *new_CollectionItem(int data)\n{\n    CollectionItem *item = malloc(sizeof(CollectionItem));\n    item-\u003edata = data;\n    item-\u003enext = NULL;\n    return item;\n}\n\nvoid Add_Collection(Collection *coll, int data)\n{\n    CollectionItem **item = \u0026coll-\u003ecollectionHead;\n    while(*item)\n        item = \u0026(*item)-\u003enext;\n    (*item) = new_CollectionItem(data);\n}\n\nCollection *new_Collection()\n{\n    Collection *nc = malloc(sizeof(Collection));\n    nc-\u003efirst = first;\n    nc-\u003elast  = last;\n    nc-\u003enext  = next;\n    return nc;\n}\n\n/* generic implementation */\n#define FOREACH(node, collection)                      \\\n    for (node  = (collection)-\u003efirst(collection);      \\\n         node != (collection)-\u003elast(collection);       \\\n         node  = (collection)-\u003enext(collection, node))\n\nint main(void)\n{\n    Collection *coll = new_Collection();\n    CollectionItem *node;\n    int i;\n\n    for(i=0; i\u003c10; i++)\n    {\n         Add_Collection(coll, i);\n    }\n\n    /* printing the elements here */\n    FOREACH(node, coll)\n    {\n        printf(\"%d\\n\", node-\u003edata);\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935786706,
        "id": "0c53a800-6d8e-41be-8811-53c6bbaf05c0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935786706,
        "parent_id": "8596ed91-d0c2-40ac-9fe2-fe110e3fc333",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To use this generic implementation just implement these functions for your data structure."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To use this generic implementation just implement these functions for your data structure."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935786706,
        "id": "53ccaaaa-87d3-4c32-8a7e-60232ae0ee4f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935786706,
        "parent_id": "8596ed91-d0c2-40ac-9fe2-fe110e3fc333",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "1.  void* (*first)(void *coll);\n2.  void* (*last) (void *coll);\n3.  void* (*next) (void *coll, CollectionItem *currItem);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "1.  void* (*first)(void *coll);\n2.  void* (*last) (void *coll);\n3.  void* (*next) (void *coll, CollectionItem *currItem);",
        "code_language": "Plain Text"
      }
    ],
    "title": "FOREACH implementation",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}