{
  "ID": "55f9243b-9879-45f7-a90b-5e90b423dcae",
  "Root": {
    "alive": true,
    "content": [
      "ba9e6295-f981-4f7b-99ce-bbc69b481f51",
      "92bc6e6f-09f4-41a3-a7bc-6964330931ed",
      "2b7330f2-1567-43ac-8d17-809c766992b9",
      "d0dbe2f2-0a15-492e-b38f-8616c504a658",
      "6f9fe633-6798-4ab9-9cde-0ce93888bcf7",
      "cd38e691-6046-4952-9871-433e4fa5a08b",
      "dd804977-2512-48cd-a235-e937acae1f99",
      "c8fb7c8b-3245-418f-9650-fca2f10e6ba1",
      "cfb25512-2e12-4f80-b2c7-32105606d977",
      "996425f2-d459-43d1-a150-707426b1e708",
      "40fb0de0-a7c7-4bcb-a295-4466bbe30028",
      "7bdce909-5565-4475-98d1-dc8a8163967e",
      "a0954c31-f4cd-4176-902b-4c81c5affc26",
      "f9670d49-5405-4025-bf26-95061ea97838",
      "50b7e0f6-ac7c-4c9e-a32e-0f4b312eab70",
      "d1d7e41a-27db-4e38-880c-4fc4797c68c3"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551936203307,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "55f9243b-9879-45f7-a90b-5e90b423dcae",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551936203307,
    "parent_id": "1e14553b-8aea-44fb-a0fe-fbc893ff529a",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Allocating Memory"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936203297,
        "id": "ba9e6295-f981-4f7b-99ce-bbc69b481f51",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936203297,
        "parent_id": "55f9243b-9879-45f7-a90b-5e90b423dcae",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Standard Allocation"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Standard Allocation"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936203300,
        "id": "92bc6e6f-09f4-41a3-a7bc-6964330931ed",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936203300,
        "parent_id": "55f9243b-9879-45f7-a90b-5e90b423dcae",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The C dynamic memory allocation functions are defined in the "
            ],
            [
              "\u003cstdlib.h\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " header. If one wishes to allocate memory space for an object dynamically, the following code can be used:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The C dynamic memory allocation functions are defined in the "
          },
          {
            "Text": "\u003cstdlib.h\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " header. If one wishes to allocate memory space for an object dynamically, the following code can be used:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936203300,
        "id": "2b7330f2-1567-43ac-8d17-809c766992b9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936203300,
        "parent_id": "55f9243b-9879-45f7-a90b-5e90b423dcae",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int *p = malloc(10 * sizeof *p);\nif (p == NULL) \n{\n    perror(\"malloc() failed\");\n    return -1;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int *p = malloc(10 * sizeof *p);\nif (p == NULL) \n{\n    perror(\"malloc() failed\");\n    return -1;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936203300,
        "id": "d0dbe2f2-0a15-492e-b38f-8616c504a658",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936203300,
        "parent_id": "55f9243b-9879-45f7-a90b-5e90b423dcae",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This computes the number of bytes that ten "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "s occupy in memory, then requests that many bytes from "
            ],
            [
              "malloc",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and assigns the result (i.e., the starting address of the memory chunk that was just created using "
            ],
            [
              "malloc",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") to a pointer named "
            ],
            [
              "p",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This computes the number of bytes that ten "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": "s occupy in memory, then requests that many bytes from "
          },
          {
            "Text": "malloc",
            "AttrFlags": 2
          },
          {
            "Text": " and assigns the result (i.e., the starting address of the memory chunk that was just created using "
          },
          {
            "Text": "malloc",
            "AttrFlags": 2
          },
          {
            "Text": ") to a pointer named "
          },
          {
            "Text": "p",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936203301,
        "id": "6f9fe633-6798-4ab9-9cde-0ce93888bcf7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936203301,
        "parent_id": "55f9243b-9879-45f7-a90b-5e90b423dcae",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It is good practice to use "
            ],
            [
              "sizeof",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to compute the amount of memory to request since the result of "
            ],
            [
              "sizeof",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is implementation defined (except for "
            ],
            [
              "character types",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ", which are "
            ],
            [
              "char",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "signed char",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "unsigned char",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", for which "
            ],
            [
              "sizeof",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is defined to always give "
            ],
            [
              "1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ")."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It is good practice to use "
          },
          {
            "Text": "sizeof",
            "AttrFlags": 2
          },
          {
            "Text": " to compute the amount of memory to request since the result of "
          },
          {
            "Text": "sizeof",
            "AttrFlags": 2
          },
          {
            "Text": " is implementation defined (except for "
          },
          {
            "Text": "character types",
            "AttrFlags": 4
          },
          {
            "Text": ", which are "
          },
          {
            "Text": "char",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "signed char",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "unsigned char",
            "AttrFlags": 2
          },
          {
            "Text": ", for which "
          },
          {
            "Text": "sizeof",
            "AttrFlags": 2
          },
          {
            "Text": " is defined to always give "
          },
          {
            "Text": "1",
            "AttrFlags": 2
          },
          {
            "Text": ")."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936203301,
        "id": "cd38e691-6046-4952-9871-433e4fa5a08b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936203301,
        "parent_id": "55f9243b-9879-45f7-a90b-5e90b423dcae",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Because ",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "malloc",
              [
                [
                  "b"
                ],
                [
                  "c"
                ]
              ]
            ],
            [
              " might not be able to service the request, it might return a null pointer. It is important to check for this to prevent later attempts to dereference the null pointer.",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Because ",
            "AttrFlags": 1
          },
          {
            "Text": "malloc",
            "AttrFlags": 3
          },
          {
            "Text": " might not be able to service the request, it might return a null pointer. It is important to check for this to prevent later attempts to dereference the null pointer.",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936203301,
        "id": "dd804977-2512-48cd-a235-e937acae1f99",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936203301,
        "parent_id": "55f9243b-9879-45f7-a90b-5e90b423dcae",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Memory dynamically allocated using "
            ],
            [
              "malloc()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " may be resized using "
            ],
            [
              "realloc()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or, when no longer needed, released using "
            ],
            [
              "free()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Memory dynamically allocated using "
          },
          {
            "Text": "malloc()",
            "AttrFlags": 2
          },
          {
            "Text": " may be resized using "
          },
          {
            "Text": "realloc()",
            "AttrFlags": 2
          },
          {
            "Text": " or, when no longer needed, released using "
          },
          {
            "Text": "free()",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936203302,
        "id": "c8fb7c8b-3245-418f-9650-fca2f10e6ba1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936203302,
        "parent_id": "55f9243b-9879-45f7-a90b-5e90b423dcae",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Alternatively, declaring "
            ],
            [
              "int array[10];",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " would allocate the same amount of memory. However, if it is declared inside a function without the keyword "
            ],
            [
              "static",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", it will only be usable within the function it is declared in and the functions it calls (because the array will be allocated on the stack and the space will be released for reuse when the function returns). Alternatively, if it is defined with "
            ],
            [
              "static",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " inside a function, or if it is defined outside any function, then its lifetime is the lifetime of the program. Pointers can also be returned from a function, however a function in C can not return an array."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Alternatively, declaring "
          },
          {
            "Text": "int array[10];",
            "AttrFlags": 2
          },
          {
            "Text": " would allocate the same amount of memory. However, if it is declared inside a function without the keyword "
          },
          {
            "Text": "static",
            "AttrFlags": 2
          },
          {
            "Text": ", it will only be usable within the function it is declared in and the functions it calls (because the array will be allocated on the stack and the space will be released for reuse when the function returns). Alternatively, if it is defined with "
          },
          {
            "Text": "static",
            "AttrFlags": 2
          },
          {
            "Text": " inside a function, or if it is defined outside any function, then its lifetime is the lifetime of the program. Pointers can also be returned from a function, however a function in C can not return an array."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936203302,
        "id": "cfb25512-2e12-4f80-b2c7-32105606d977",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936203302,
        "parent_id": "55f9243b-9879-45f7-a90b-5e90b423dcae",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Zeroed Memory"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Zeroed Memory"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936203302,
        "id": "996425f2-d459-43d1-a150-707426b1e708",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936203302,
        "parent_id": "55f9243b-9879-45f7-a90b-5e90b423dcae",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The memory returned by "
            ],
            [
              "malloc",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " may not be initialized to a reasonable value, and care should be taken to zero the memory with "
            ],
            [
              "memset",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or to immediately copy a suitable value into it. Alternatively, "
            ],
            [
              "calloc",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " returns a block of the desired size where all bits are initialized to "
            ],
            [
              "0",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". This need not be the same as the representation of floating-point zero or a null pointer constant."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The memory returned by "
          },
          {
            "Text": "malloc",
            "AttrFlags": 2
          },
          {
            "Text": " may not be initialized to a reasonable value, and care should be taken to zero the memory with "
          },
          {
            "Text": "memset",
            "AttrFlags": 2
          },
          {
            "Text": " or to immediately copy a suitable value into it. Alternatively, "
          },
          {
            "Text": "calloc",
            "AttrFlags": 2
          },
          {
            "Text": " returns a block of the desired size where all bits are initialized to "
          },
          {
            "Text": "0",
            "AttrFlags": 2
          },
          {
            "Text": ". This need not be the same as the representation of floating-point zero or a null pointer constant."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936203302,
        "id": "40fb0de0-a7c7-4bcb-a295-4466bbe30028",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936203302,
        "parent_id": "55f9243b-9879-45f7-a90b-5e90b423dcae",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int *p = calloc(10, sizeof *p);\nif (p == NULL) \n{\n    perror(\"calloc() failed\");\n    return -1;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int *p = calloc(10, sizeof *p);\nif (p == NULL) \n{\n    perror(\"calloc() failed\");\n    return -1;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936203306,
        "id": "7bdce909-5565-4475-98d1-dc8a8163967e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936203306,
        "parent_id": "55f9243b-9879-45f7-a90b-5e90b423dcae",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A note on ",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              "calloc",
              [
                [
                  "i"
                ],
                [
                  "c"
                ]
              ]
            ],
            [
              ":",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " Most (commonly used) implementations will optimise "
            ],
            [
              "calloc()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " for performance, so it will be "
            ],
            [
              "faster",
              [
                [
                  "a",
                  "http://stackoverflow.com/a/2688522/130580"
                ]
              ]
            ],
            [
              " than calling "
            ],
            [
              "malloc()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", then "
            ],
            [
              "memset()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", even though the net effect is identical."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A note on ",
            "AttrFlags": 4
          },
          {
            "Text": "calloc",
            "AttrFlags": 6
          },
          {
            "Text": ":",
            "AttrFlags": 4
          },
          {
            "Text": " Most (commonly used) implementations will optimise "
          },
          {
            "Text": "calloc()",
            "AttrFlags": 2
          },
          {
            "Text": " for performance, so it will be "
          },
          {
            "Text": "faster",
            "Link": "http://stackoverflow.com/a/2688522/130580"
          },
          {
            "Text": " than calling "
          },
          {
            "Text": "malloc()",
            "AttrFlags": 2
          },
          {
            "Text": ", then "
          },
          {
            "Text": "memset()",
            "AttrFlags": 2
          },
          {
            "Text": ", even though the net effect is identical."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936203306,
        "id": "a0954c31-f4cd-4176-902b-4c81c5affc26",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936203306,
        "parent_id": "55f9243b-9879-45f7-a90b-5e90b423dcae",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Aligned Memory"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Aligned Memory"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936203306,
        "id": "f9670d49-5405-4025-bf26-95061ea97838",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936203306,
        "parent_id": "55f9243b-9879-45f7-a90b-5e90b423dcae",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "C11 introduced a new function "
            ],
            [
              "aligned_alloc()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " which allocates space with the given alignment. It can be used if the memory to be allocated is needed to be aligned at certain boundaries which can’t be satisfied by "
            ],
            [
              "malloc()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "calloc()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". "
            ],
            [
              "malloc()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "calloc()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " functions allocate memory that’s suitably aligned for "
            ],
            [
              "any",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " object type (i.e. the alignment is "
            ],
            [
              "alignof(max_align_t)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "). But with "
            ],
            [
              "aligned_alloc()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " greater alignments can be requested."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "C11 introduced a new function "
          },
          {
            "Text": "aligned_alloc()",
            "AttrFlags": 2
          },
          {
            "Text": " which allocates space with the given alignment. It can be used if the memory to be allocated is needed to be aligned at certain boundaries which can’t be satisfied by "
          },
          {
            "Text": "malloc()",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "calloc()",
            "AttrFlags": 2
          },
          {
            "Text": ". "
          },
          {
            "Text": "malloc()",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "calloc()",
            "AttrFlags": 2
          },
          {
            "Text": " functions allocate memory that’s suitably aligned for "
          },
          {
            "Text": "any",
            "AttrFlags": 4
          },
          {
            "Text": " object type (i.e. the alignment is "
          },
          {
            "Text": "alignof(max_align_t)",
            "AttrFlags": 2
          },
          {
            "Text": "). But with "
          },
          {
            "Text": "aligned_alloc()",
            "AttrFlags": 2
          },
          {
            "Text": " greater alignments can be requested."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936203306,
        "id": "50b7e0f6-ac7c-4c9e-a32e-0f4b312eab70",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936203306,
        "parent_id": "55f9243b-9879-45f7-a90b-5e90b423dcae",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "/* Allocates 1024 bytes with 256 bytes alignment. */\nchar *ptr = aligned_alloc(256, 1024);\nif (ptr) {\n    perror(\"aligned_alloc()\");\n    return -1;\n}\nfree(ptr);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "/* Allocates 1024 bytes with 256 bytes alignment. */\nchar *ptr = aligned_alloc(256, 1024);\nif (ptr) {\n    perror(\"aligned_alloc()\");\n    return -1;\n}\nfree(ptr);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936203307,
        "id": "d1d7e41a-27db-4e38-880c-4fc4797c68c3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936203307,
        "parent_id": "55f9243b-9879-45f7-a90b-5e90b423dcae",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The C11 standard imposes two restrictions: 1) the "
            ],
            [
              "size",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " (second argument) requested must be an integral multiple of the "
            ],
            [
              "alignment",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " (first argument) and 2) the value of "
            ],
            [
              "alignment",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " should be a valid alignment supported by the implementation. Failure to meet either of them results in "
            ],
            [
              "undefined behavior",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c/364/undefined-behavior"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The C11 standard imposes two restrictions: 1) the "
          },
          {
            "Text": "size",
            "AttrFlags": 4
          },
          {
            "Text": " (second argument) requested must be an integral multiple of the "
          },
          {
            "Text": "alignment",
            "AttrFlags": 4
          },
          {
            "Text": " (first argument) and 2) the value of "
          },
          {
            "Text": "alignment",
            "AttrFlags": 4
          },
          {
            "Text": " should be a valid alignment supported by the implementation. Failure to meet either of them results in "
          },
          {
            "Text": "undefined behavior",
            "Link": "http://stackoverflow.com/documentation/c/364/undefined-behavior"
          },
          {
            "Text": "."
          }
        ]
      }
    ],
    "title": "Allocating Memory",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}