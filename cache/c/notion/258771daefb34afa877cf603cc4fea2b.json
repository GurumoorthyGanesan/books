{
  "ID": "258771da-efb3-4afa-877c-f603cc4fea2b",
  "Root": {
    "alive": true,
    "content": [
      "c2b3d91f-9d06-4caa-adea-c4bff2c1b045",
      "d129fa7f-c638-41a5-82a7-d1bec806c2c2",
      "0f551c00-2dc9-422e-ae57-e33cf70e6eed",
      "10383e50-312a-4a62-960f-151f277c8f0e",
      "545e3b0d-31ad-45e1-ac72-7bf9a940babb",
      "e8beadda-2c5b-46e6-8e78-056a7e1bf9d2",
      "233a553d-1d9a-49f3-82c9-45ff8ad6eec3",
      "fa2c213f-64cd-4092-bb38-28e36bea4540",
      "dcb19291-2764-4c01-8e46-3ee2ec533934",
      "30c1f14b-1635-43dc-9ac6-67ae877bc17b",
      "0da7c81b-82e3-4ec1-bd4b-8a7113e710cd",
      "cd241bc4-4a4e-46c9-937d-de56b2eeea87",
      "c6ad7221-9b16-4c35-ba29-d72d9d5bf227",
      "fe75c530-1a1a-4b01-9d86-1763fd04e223",
      "556de9c4-4307-4266-98d6-adcfec7fe249",
      "c283d375-b76e-42cc-8fa4-c36d1f561a47",
      "d333f0ee-f17c-4818-b48b-9341d6ff6387",
      "2fc50f90-9e1f-4493-87b4-fb243db3f1b5",
      "6108699e-a7ad-41e9-81f1-17e521fafc2a",
      "db9cc28a-f2dc-41cf-808b-028ad5cc3cf1",
      "d340b03f-0cf8-4bf5-9222-de1c28f75602",
      "aac67a3e-abb0-4983-b351-2ef10cbc1046",
      "f07160ca-d686-4d0c-8e18-f6acf6c578a2",
      "bb6286e9-4fe5-4d9d-b512-5d580d1c359c",
      "e93a9a3e-8627-436f-a739-5768892ce1de",
      "1ad582dd-3dd4-400a-881a-0777c0b0dc41",
      "994aaf31-c436-4911-98d9-42beede90efa",
      "2b226beb-80c0-476e-810e-7e6ad610a1fa",
      "7301e968-168d-42ec-bf50-42eabf7382dd",
      "e2639ab1-9292-41b9-b1fc-e248e1f26c44",
      "88a47368-c79b-4ca0-814d-1dbae85633dd",
      "57cc1c3c-ba74-4ef4-9cd7-478450b7aeca",
      "fbafcb4f-a610-448e-8a4d-89be7b3e6e98",
      "9c1ecd47-2d51-41d0-bf41-3fdc084c0ec0",
      "53f7988f-33a6-4033-8002-e31635094b77",
      "d1d98b09-a4f2-4c0b-88fc-847b19637517"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551936204324,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "258771da-efb3-4afa-877c-f603cc4fea2b",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551936204324,
    "parent_id": "1e14553b-8aea-44fb-a0fe-fbc893ff529a",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Introduction"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936204314,
        "id": "c2b3d91f-9d06-4caa-adea-c4bff2c1b045",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936204314,
        "parent_id": "258771da-efb3-4afa-877c-f603cc4fea2b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A pointer is declared much like any other variable, except an asterisk ("
            ],
            [
              "\\*",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") is placed between the type and the name of the variable to denote it is a pointer."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A pointer is declared much like any other variable, except an asterisk ("
          },
          {
            "Text": "\\*",
            "AttrFlags": 2
          },
          {
            "Text": ") is placed between the type and the name of the variable to denote it is a pointer."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936204316,
        "id": "d129fa7f-c638-41a5-82a7-d1bec806c2c2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936204316,
        "parent_id": "258771da-efb3-4afa-877c-f603cc4fea2b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int *pointer; /* inside a function, pointer is uninitialized and doesn't point to any valid object yet */"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int *pointer; /* inside a function, pointer is uninitialized and doesn't point to any valid object yet */",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936204317,
        "id": "0f551c00-2dc9-422e-ae57-e33cf70e6eed",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936204317,
        "parent_id": "258771da-efb3-4afa-877c-f603cc4fea2b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To declare two pointer variables of the same type, in the same declaration, use the asterisk symbol before each identifier. For example,"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To declare two pointer variables of the same type, in the same declaration, use the asterisk symbol before each identifier. For example,"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936204317,
        "id": "10383e50-312a-4a62-960f-151f277c8f0e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936204317,
        "parent_id": "258771da-efb3-4afa-877c-f603cc4fea2b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int *iptr1, *iptr2;\nint *iptr3,  iptr4;  /* iptr3 is a pointer variable, whereas iptr4 is misnamed and is an int */"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int *iptr1, *iptr2;\nint *iptr3,  iptr4;  /* iptr3 is a pointer variable, whereas iptr4 is misnamed and is an int */",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936204317,
        "id": "545e3b0d-31ad-45e1-ac72-7bf9a940babb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936204317,
        "parent_id": "258771da-efb3-4afa-877c-f603cc4fea2b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The address-of or reference operator denoted by an ampersand ("
            ],
            [
              "\u0026",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") gives the address of a given variable which can be placed in a pointer of appropriate type."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The address-of or reference operator denoted by an ampersand ("
          },
          {
            "Text": "\u0026",
            "AttrFlags": 2
          },
          {
            "Text": ") gives the address of a given variable which can be placed in a pointer of appropriate type."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936204317,
        "id": "e8beadda-2c5b-46e6-8e78-056a7e1bf9d2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936204317,
        "parent_id": "258771da-efb3-4afa-877c-f603cc4fea2b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int value = 1;\npointer = \u0026value;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int value = 1;\npointer = \u0026value;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936204317,
        "id": "233a553d-1d9a-49f3-82c9-45ff8ad6eec3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936204317,
        "parent_id": "258771da-efb3-4afa-877c-f603cc4fea2b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The indirection or dereference operator denoted by an asterisk ("
            ],
            [
              "\\*",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") gets the contents of an object pointed to by a pointer."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The indirection or dereference operator denoted by an asterisk ("
          },
          {
            "Text": "\\*",
            "AttrFlags": 2
          },
          {
            "Text": ") gets the contents of an object pointed to by a pointer."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936204317,
        "id": "fa2c213f-64cd-4092-bb38-28e36bea4540",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936204317,
        "parent_id": "258771da-efb3-4afa-877c-f603cc4fea2b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "printf(\"Value of pointed to integer: %d\\n\", *pointer);\n/* Value of pointed to integer: 1 */"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "printf(\"Value of pointed to integer: %d\\n\", *pointer);\n/* Value of pointed to integer: 1 */",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936204318,
        "id": "dcb19291-2764-4c01-8e46-3ee2ec533934",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936204318,
        "parent_id": "258771da-efb3-4afa-877c-f603cc4fea2b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If the pointer points to a structure or union type then you can dereference it and access its members directly using the "
            ],
            [
              "-\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " operator:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If the pointer points to a structure or union type then you can dereference it and access its members directly using the "
          },
          {
            "Text": "-\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " operator:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936204318,
        "id": "30c1f14b-1635-43dc-9ac6-67ae877bc17b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936204318,
        "parent_id": "258771da-efb3-4afa-877c-f603cc4fea2b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "SomeStruct *s = \u0026someObject;\ns-\u003esomeMember = 5; /* Equivalent to (*s).someMember = 5 */"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "SomeStruct *s = \u0026someObject;\ns-\u003esomeMember = 5; /* Equivalent to (*s).someMember = 5 */",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936204318,
        "id": "0da7c81b-82e3-4ec1-bd4b-8a7113e710cd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936204318,
        "parent_id": "258771da-efb3-4afa-877c-f603cc4fea2b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In C, a pointer is a distinct value type which can be reassigned and otherwise is treated as a variable in its own right. For example the following example prints the value of the pointer (variable) itself."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In C, a pointer is a distinct value type which can be reassigned and otherwise is treated as a variable in its own right. For example the following example prints the value of the pointer (variable) itself."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936204318,
        "id": "cd241bc4-4a4e-46c9-937d-de56b2eeea87",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936204318,
        "parent_id": "258771da-efb3-4afa-877c-f603cc4fea2b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "printf(\"Value of the pointer itself: %p\\n\", (void *)pointer);\n/* Value of the pointer itself: 0x7ffcd41b06e4 */\n/* This address will be different each time the program is executed */"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "printf(\"Value of the pointer itself: %p\\n\", (void *)pointer);\n/* Value of the pointer itself: 0x7ffcd41b06e4 */\n/* This address will be different each time the program is executed */",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936204318,
        "id": "c6ad7221-9b16-4c35-ba29-d72d9d5bf227",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936204318,
        "parent_id": "258771da-efb3-4afa-877c-f603cc4fea2b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Because a pointer is a mutable variable, it is possible for it to not point to a valid object, either by being set to null"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Because a pointer is a mutable variable, it is possible for it to not point to a valid object, either by being set to null"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936204318,
        "id": "fe75c530-1a1a-4b01-9d86-1763fd04e223",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936204318,
        "parent_id": "258771da-efb3-4afa-877c-f603cc4fea2b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "pointer = 0;     /* or alternatively */\npointer = NULL;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "pointer = 0;     /* or alternatively */\npointer = NULL;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936204318,
        "id": "556de9c4-4307-4266-98d6-adcfec7fe249",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936204318,
        "parent_id": "258771da-efb3-4afa-877c-f603cc4fea2b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "or simply by containing an arbitrary bit pattern that isn’t a valid address. The latter is a very bad situation, because it cannot be tested before the pointer is being dereferenced, there is only a test for the case a pointer is null:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "or simply by containing an arbitrary bit pattern that isn’t a valid address. The latter is a very bad situation, because it cannot be tested before the pointer is being dereferenced, there is only a test for the case a pointer is null:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936204318,
        "id": "c283d375-b76e-42cc-8fa4-c36d1f561a47",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936204318,
        "parent_id": "258771da-efb3-4afa-877c-f603cc4fea2b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "if (!pointer) exit(EXIT_FAILURE);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "if (!pointer) exit(EXIT_FAILURE);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936204320,
        "id": "d333f0ee-f17c-4818-b48b-9341d6ff6387",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936204320,
        "parent_id": "258771da-efb3-4afa-877c-f603cc4fea2b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A pointer may only be dereferenced if it points to a "
            ],
            [
              "valid",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " object, otherwise the behavior is undefined. Many modern implementations may help you by raising some kind of error such as a "
            ],
            [
              "segmentation fault",
              [
                [
                  "a",
                  "https://en.wikipedia.org/wiki/Segmentation_fault"
                ]
              ]
            ],
            [
              " and terminate execution, but others may just leave your program in an invalid state."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A pointer may only be dereferenced if it points to a "
          },
          {
            "Text": "valid",
            "AttrFlags": 4
          },
          {
            "Text": " object, otherwise the behavior is undefined. Many modern implementations may help you by raising some kind of error such as a "
          },
          {
            "Text": "segmentation fault",
            "Link": "https://en.wikipedia.org/wiki/Segmentation_fault"
          },
          {
            "Text": " and terminate execution, but others may just leave your program in an invalid state."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936204320,
        "id": "2fc50f90-9e1f-4493-87b4-fb243db3f1b5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936204320,
        "parent_id": "258771da-efb3-4afa-877c-f603cc4fea2b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The value returned by the dereference operator is a mutable alias to the original variable, so it can be changed, modifying the original variable."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The value returned by the dereference operator is a mutable alias to the original variable, so it can be changed, modifying the original variable."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936204320,
        "id": "6108699e-a7ad-41e9-81f1-17e521fafc2a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936204320,
        "parent_id": "258771da-efb3-4afa-877c-f603cc4fea2b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "*pointer += 1;\nprintf(\"Value of pointed to variable after change: %d\\n\", *pointer);\n/* Value of pointed to variable after change: 2 */"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "*pointer += 1;\nprintf(\"Value of pointed to variable after change: %d\\n\", *pointer);\n/* Value of pointed to variable after change: 2 */",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936204320,
        "id": "db9cc28a-f2dc-41cf-808b-028ad5cc3cf1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936204320,
        "parent_id": "258771da-efb3-4afa-877c-f603cc4fea2b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Pointers are also re-assignable. This means that a pointer pointing to an object can later be used to point to another object of the same type."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Pointers are also re-assignable. This means that a pointer pointing to an object can later be used to point to another object of the same type."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936204321,
        "id": "d340b03f-0cf8-4bf5-9222-de1c28f75602",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936204321,
        "parent_id": "258771da-efb3-4afa-877c-f603cc4fea2b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int value2 = 10;\npointer = \u0026value2;\nprintf(\"Value from pointer: %d\\n\", *pointer);\n/* Value from pointer: 10 */"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int value2 = 10;\npointer = \u0026value2;\nprintf(\"Value from pointer: %d\\n\", *pointer);\n/* Value from pointer: 10 */",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936204321,
        "id": "aac67a3e-abb0-4983-b351-2ef10cbc1046",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936204321,
        "parent_id": "258771da-efb3-4afa-877c-f603cc4fea2b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Like any other variable, pointers have a specific type. You can’t assign the address of a "
            ],
            [
              "short int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to a pointer to a "
            ],
            [
              "long int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", for instance. Such behavior is referred to as type punning and is forbidden in C, though there are a few exceptions."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Like any other variable, pointers have a specific type. You can’t assign the address of a "
          },
          {
            "Text": "short int",
            "AttrFlags": 2
          },
          {
            "Text": " to a pointer to a "
          },
          {
            "Text": "long int",
            "AttrFlags": 2
          },
          {
            "Text": ", for instance. Such behavior is referred to as type punning and is forbidden in C, though there are a few exceptions."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936204321,
        "id": "f07160ca-d686-4d0c-8e18-f6acf6c578a2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936204321,
        "parent_id": "258771da-efb3-4afa-877c-f603cc4fea2b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Although pointer must be of a specific type, the memory allocated for each type of pointer is equal to the memory used by the environment to store addresses, rather than the size of the type that is pointed to."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Although pointer must be of a specific type, the memory allocated for each type of pointer is equal to the memory used by the environment to store addresses, rather than the size of the type that is pointed to."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936204321,
        "id": "bb6286e9-4fe5-4d9d-b512-5d580d1c359c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936204321,
        "parent_id": "258771da-efb3-4afa-877c-f603cc4fea2b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cstdio.h\u003e\n\nint main(void) {\n    printf(\"Size of int pointer: %zu\\n\", sizeof (int*));      /* size 4 bytes */\n    printf(\"Size of int variable: %zu\\n\", sizeof (int));      /* size 4 bytes */\n    printf(\"Size of char pointer: %zu\\n\", sizeof (char*));    /* size 4 bytes */\n    printf(\"Size of char variable: %zu\\n\", sizeof (char));    /* size 1 bytes */\n    printf(\"Size of short pointer: %zu\\n\", sizeof (short*));  /* size 4 bytes */\n    printf(\"Size of short variable: %zu\\n\", sizeof (short));  /* size 2 bytes */\n    return 0;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cstdio.h\u003e\n\nint main(void) {\n    printf(\"Size of int pointer: %zu\\n\", sizeof (int*));      /* size 4 bytes */\n    printf(\"Size of int variable: %zu\\n\", sizeof (int));      /* size 4 bytes */\n    printf(\"Size of char pointer: %zu\\n\", sizeof (char*));    /* size 4 bytes */\n    printf(\"Size of char variable: %zu\\n\", sizeof (char));    /* size 1 bytes */\n    printf(\"Size of short pointer: %zu\\n\", sizeof (short*));  /* size 4 bytes */\n    printf(\"Size of short variable: %zu\\n\", sizeof (short));  /* size 2 bytes */\n    return 0;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936204322,
        "id": "e93a9a3e-8627-436f-a739-5768892ce1de",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936204322,
        "parent_id": "258771da-efb3-4afa-877c-f603cc4fea2b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "(NB: if you are using Microsoft Visual Studio, which does not support the C99 or C11 standards, you must use ",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              "%Iu",
              [
                [
                  "i"
                ],
                [
                  "c"
                ],
                [
                  "a",
                  "https://msdn.microsoft.com/en-us/library/tcxf1dw6.aspx"
                ]
              ]
            ],
            [
              "1 instead of ",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              "%zu",
              [
                [
                  "i"
                ],
                [
                  "c"
                ]
              ]
            ],
            [
              " in the above sample.)",
              [
                [
                  "i"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "(NB: if you are using Microsoft Visual Studio, which does not support the C99 or C11 standards, you must use ",
            "AttrFlags": 4
          },
          {
            "Text": "%Iu",
            "AttrFlags": 6,
            "Link": "https://msdn.microsoft.com/en-us/library/tcxf1dw6.aspx"
          },
          {
            "Text": "1 instead of ",
            "AttrFlags": 4
          },
          {
            "Text": "%zu",
            "AttrFlags": 6
          },
          {
            "Text": " in the above sample.)",
            "AttrFlags": 4
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936204322,
        "id": "1ad582dd-3dd4-400a-881a-0777c0b0dc41",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936204322,
        "parent_id": "258771da-efb3-4afa-877c-f603cc4fea2b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note that the results above can vary from environment to environment in numbers but all environments would show equal sizes for different types of pointer."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note that the results above can vary from environment to environment in numbers but all environments would show equal sizes for different types of pointer."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936204322,
        "id": "994aaf31-c436-4911-98d9-42beede90efa",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936204322,
        "parent_id": "258771da-efb3-4afa-877c-f603cc4fea2b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Extract based on information from "
            ],
            [
              "Cardiff University C Pointers Introduction",
              [
                [
                  "a",
                  "https://www.cs.cf.ac.uk/Dave/C/node10.html"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Extract based on information from "
          },
          {
            "Text": "Cardiff University C Pointers Introduction",
            "Link": "https://www.cs.cf.ac.uk/Dave/C/node10.html"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936204322,
        "id": "2b226beb-80c0-476e-810e-7e6ad610a1fa",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936204322,
        "parent_id": "258771da-efb3-4afa-877c-f603cc4fea2b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Pointers and Arrays"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Pointers and Arrays"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936204323,
        "id": "7301e968-168d-42ec-bf50-42eabf7382dd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936204323,
        "parent_id": "258771da-efb3-4afa-877c-f603cc4fea2b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Pointers and arrays are intimately connected in C. Arrays in C are always held in contiguous locations in memory. Pointer arithmetic is always scaled by the size of the item pointed to. So if we have an array of three doubles, and a pointer to the base, "
            ],
            [
              "*ptr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " refers to the first double, "
            ],
            [
              "*(ptr + 1)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to the second, "
            ],
            [
              "*(ptr + 2)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to the third. A more convenient notation is to use array notation "
            ],
            [
              "[]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Pointers and arrays are intimately connected in C. Arrays in C are always held in contiguous locations in memory. Pointer arithmetic is always scaled by the size of the item pointed to. So if we have an array of three doubles, and a pointer to the base, "
          },
          {
            "Text": "*ptr",
            "AttrFlags": 2
          },
          {
            "Text": " refers to the first double, "
          },
          {
            "Text": "*(ptr + 1)",
            "AttrFlags": 2
          },
          {
            "Text": " to the second, "
          },
          {
            "Text": "*(ptr + 2)",
            "AttrFlags": 2
          },
          {
            "Text": " to the third. A more convenient notation is to use array notation "
          },
          {
            "Text": "[]",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936204323,
        "id": "e2639ab1-9292-41b9-b1fc-e248e1f26c44",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936204323,
        "parent_id": "258771da-efb3-4afa-877c-f603cc4fea2b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "double point[3] = {0.0, 1.0, 2.0};\ndouble *ptr = point;\n\n/* prints x 0.0, y 1.0 z 2.0 */ \nprintf(\"x %f y %f z %f\\n\", ptr[0], ptr[1], ptr[2]);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "double point[3] = {0.0, 1.0, 2.0};\ndouble *ptr = point;\n\n/* prints x 0.0, y 1.0 z 2.0 */ \nprintf(\"x %f y %f z %f\\n\", ptr[0], ptr[1], ptr[2]);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936204323,
        "id": "88a47368-c79b-4ca0-814d-1dbae85633dd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936204323,
        "parent_id": "258771da-efb3-4afa-877c-f603cc4fea2b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "So essentially ptr and the array name are interchangeable. This rule also means that an array decays to a pointer when passed to a subroutine."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "So essentially ptr and the array name are interchangeable. This rule also means that an array decays to a pointer when passed to a subroutine."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936204323,
        "id": "57cc1c3c-ba74-4ef4-9cd7-478450b7aeca",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936204323,
        "parent_id": "258771da-efb3-4afa-877c-f603cc4fea2b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "double point[3] = {0.0, 1.0, 2.0};\n\nprintf(\"length of point is %s\\n\", length(point));"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "double point[3] = {0.0, 1.0, 2.0};\n\nprintf(\"length of point is %s\\n\", length(point));",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936204323,
        "id": "fbafcb4f-a610-448e-8a4d-89be7b3e6e98",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936204323,
        "parent_id": "258771da-efb3-4afa-877c-f603cc4fea2b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "/* get the distance of a 3D point from the origin */ \ndouble length(double *pt)\n{\n   return sqrt(pt[0] * pt[0] + pt[1] * pt[1] + pt[2] * pt[2])\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "/* get the distance of a 3D point from the origin */ \ndouble length(double *pt)\n{\n   return sqrt(pt[0] * pt[0] + pt[1] * pt[1] + pt[2] * pt[2])\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936204323,
        "id": "9c1ecd47-2d51-41d0-bf41-3fdc084c0ec0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936204323,
        "parent_id": "258771da-efb3-4afa-877c-f603cc4fea2b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A pointer may point to any element in an array, or to the element beyond the last element. It is however an error to set a pointer to any other value, including the element before the array. (The reason is that on segmented architectures the address before the first element may cross a segment boundary, the compiler ensures that does not happen for the last element plus one)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A pointer may point to any element in an array, or to the element beyond the last element. It is however an error to set a pointer to any other value, including the element before the array. (The reason is that on segmented architectures the address before the first element may cross a segment boundary, the compiler ensures that does not happen for the last element plus one)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936204323,
        "id": "53f7988f-33a6-4033-8002-e31635094b77",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936204323,
        "parent_id": "258771da-efb3-4afa-877c-f603cc4fea2b",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936204324,
        "id": "d1d98b09-a4f2-4c0b-88fc-847b19637517",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936204324,
        "parent_id": "258771da-efb3-4afa-877c-f603cc4fea2b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Footnote 1: Microsoft format information can be found via "
            ],
            [
              "printf()",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://msdn.microsoft.com/en-us/library/wc7014hz.aspx"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "format specification syntax",
              [
                [
                  "a",
                  "https://msdn.microsoft.com/en-us/library/56e442dc.aspx"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Footnote 1: Microsoft format information can be found via "
          },
          {
            "Text": "printf()",
            "AttrFlags": 2,
            "Link": "https://msdn.microsoft.com/en-us/library/wc7014hz.aspx"
          },
          {
            "Text": " and "
          },
          {
            "Text": "format specification syntax",
            "Link": "https://msdn.microsoft.com/en-us/library/56e442dc.aspx"
          },
          {
            "Text": "."
          }
        ]
      }
    ],
    "title": "Introduction",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}