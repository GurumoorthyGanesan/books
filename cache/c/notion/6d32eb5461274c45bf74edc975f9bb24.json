{
  "ID": "6d32eb54-6127-4c45-bf74-edc975f9bb24",
  "Root": {
    "alive": true,
    "content": [
      "67f189bb-b382-4ff6-9f86-77fc38e3d534",
      "021d0bf0-8f20-491c-9ab1-2edb3b98bda6",
      "54278277-0474-4ab9-b30c-d771a7b63761",
      "61b30f76-450e-40db-ab03-57c1dc4e6130",
      "ba74566e-e0ee-4d07-a611-7a5538e2db3e"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551935685745,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "6d32eb54-6127-4c45-bf74-edc975f9bb24",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551935685745,
    "parent_id": "c613c743-331e-4cb0-8344-4963dbf825f3",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Passing multidimensional arrays to a function"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935685741,
        "id": "67f189bb-b382-4ff6-9f86-77fc38e3d534",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935685741,
        "parent_id": "6d32eb54-6127-4c45-bf74-edc975f9bb24",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Multidimensional arrays follow the same rules as single-dimensional arrays when passing them to a function. However the combination of decay-to-pointer, operator precedence, and the two different ways to declare a multidimensional array (array of arrays vs array of pointers) may make the declaration of such functions non-intuitive. The following example shows the correct ways to pass multidimensional arrays."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Multidimensional arrays follow the same rules as single-dimensional arrays when passing them to a function. However the combination of decay-to-pointer, operator precedence, and the two different ways to declare a multidimensional array (array of arrays vs array of pointers) may make the declaration of such functions non-intuitive. The following example shows the correct ways to pass multidimensional arrays."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935685744,
        "id": "021d0bf0-8f20-491c-9ab1-2edb3b98bda6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935685744,
        "parent_id": "6d32eb54-6127-4c45-bf74-edc975f9bb24",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cassert.h\u003e\n#include \u003cstdlib.h\u003e\n\n/* When passing a multidimensional array (i.e. an array of arrays) to a\n   function, it decays into a pointer to the first element as usual.  But only\n   the top level decays, so what is passed is a pointer to an array of some fixed\n   size (4 in this case). */\nvoid f(int x[][4]) {\n    assert(sizeof(*x) == sizeof(int) * 4);\n}\n\n/* This prototype is equivalent to f(int x[][4]).\n   The parentheses around *x are required because [index] has a higher\n   precedence than *expr, thus int *x[4] would normally be equivalent to int\n   *(x[4]), i.e. an array of 4 pointers to int.  But if it's declared as a\n   function parameter, it decays into a pointer and becomes int **x, \n   which is not compatable with x[2][4]. */\nvoid g(int (*x)[4]) {\n    assert(sizeof(*x) == sizeof(int) * 4);\n}\n\n/* An array of pointers may be passed to this, since it'll decay into a pointer\n   to pointer, but an array of arrays may not. */\nvoid h(int **x) {\n    assert(sizeof(*x) == sizeof(int*));\n}\n\nint main(void) {\n    int foo[2][4];\n    f(foo);\n    g(foo);\n\n    /* Here we're dynamically creating an array of pointers.  Note that the \n       size of each dimension is not part of the datatype, and so the type \n       system just treats it as a pointer to pointer, not a pointer to array\n       or array of arrays. */\n    int **bar = malloc(sizeof(*bar) * 2);\n    assert(bar);\n    for (size_t i = 0; i \u003c 2; i++) {\n        bar[i] = malloc(sizeof(*bar[i]) * 4);\n        assert(bar[i]);\n    }\n\n    h(bar);\n    \n    for (size_t i = 0; i \u003c 2; i++) {\n        free(bar[i]);\n    }\n    free(bar);\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cassert.h\u003e\n#include \u003cstdlib.h\u003e\n\n/* When passing a multidimensional array (i.e. an array of arrays) to a\n   function, it decays into a pointer to the first element as usual.  But only\n   the top level decays, so what is passed is a pointer to an array of some fixed\n   size (4 in this case). */\nvoid f(int x[][4]) {\n    assert(sizeof(*x) == sizeof(int) * 4);\n}\n\n/* This prototype is equivalent to f(int x[][4]).\n   The parentheses around *x are required because [index] has a higher\n   precedence than *expr, thus int *x[4] would normally be equivalent to int\n   *(x[4]), i.e. an array of 4 pointers to int.  But if it's declared as a\n   function parameter, it decays into a pointer and becomes int **x, \n   which is not compatable with x[2][4]. */\nvoid g(int (*x)[4]) {\n    assert(sizeof(*x) == sizeof(int) * 4);\n}\n\n/* An array of pointers may be passed to this, since it'll decay into a pointer\n   to pointer, but an array of arrays may not. */\nvoid h(int **x) {\n    assert(sizeof(*x) == sizeof(int*));\n}\n\nint main(void) {\n    int foo[2][4];\n    f(foo);\n    g(foo);\n\n    /* Here we're dynamically creating an array of pointers.  Note that the \n       size of each dimension is not part of the datatype, and so the type \n       system just treats it as a pointer to pointer, not a pointer to array\n       or array of arrays. */\n    int **bar = malloc(sizeof(*bar) * 2);\n    assert(bar);\n    for (size_t i = 0; i \u003c 2; i++) {\n        bar[i] = malloc(sizeof(*bar[i]) * 4);\n        assert(bar[i]);\n    }\n\n    h(bar);\n    \n    for (size_t i = 0; i \u003c 2; i++) {\n        free(bar[i]);\n    }\n    free(bar);\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935685744,
        "id": "54278277-0474-4ab9-b30c-d771a7b63761",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935685744,
        "parent_id": "6d32eb54-6127-4c45-bf74-edc975f9bb24",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935685744,
        "id": "61b30f76-450e-40db-ab03-57c1dc4e6130",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935685744,
        "parent_id": "6d32eb54-6127-4c45-bf74-edc975f9bb24",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "See also"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "See also"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935685745,
        "id": "ba74566e-e0ee-4d07-a611-7a5538e2db3e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935685745,
        "parent_id": "6d32eb54-6127-4c45-bf74-edc975f9bb24",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "http://stackoverflow.com/documentation/c/1006/function-parameters/3892/passing-in-arrays-to-functions#t=201701141223012644924"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "http://stackoverflow.com/documentation/c/1006/function-parameters/3892/passing-in-arrays-to-functions#t=201701141223012644924"
          }
        ]
      }
    ],
    "title": "Passing multidimensional arrays to a function",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}