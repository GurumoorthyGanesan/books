{
  "ID": "8546e6f5-8411-426e-9a42-e3806e8138b7",
  "Root": {
    "alive": true,
    "content": [
      "22ddf5ba-fac8-46a6-b194-52831a6f2db8",
      "3dca84ae-2bf1-4487-8fb3-6150b58d08a3"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551936221143,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "8546e6f5-8411-426e-9a42-e3806e8138b7",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551936221143,
    "parent_id": "fceea03f-c65b-4f89-8e06-817d0fcf3348",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Pointers to structs"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936221139,
        "id": "22ddf5ba-fac8-46a6-b194-52831a6f2db8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936221139,
        "parent_id": "8546e6f5-8411-426e-9a42-e3806e8138b7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When you have a variable containing a "
            ],
            [
              "struct",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", you can access its fields using the dot operator ("
            ],
            [
              ".",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "). However, if you have a pointer to a "
            ],
            [
              "struct",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", this will not work. You have to use the arrow operator ("
            ],
            [
              "-\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") to access its fields. Here’s an example of a terribly simple (some might say “terrible and simple”) implementation of a stack that uses pointers to "
            ],
            [
              "struct",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "s and demonstrates the arrow operator."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When you have a variable containing a "
          },
          {
            "Text": "struct",
            "AttrFlags": 2
          },
          {
            "Text": ", you can access its fields using the dot operator ("
          },
          {
            "Text": ".",
            "AttrFlags": 2
          },
          {
            "Text": "). However, if you have a pointer to a "
          },
          {
            "Text": "struct",
            "AttrFlags": 2
          },
          {
            "Text": ", this will not work. You have to use the arrow operator ("
          },
          {
            "Text": "-\u003e",
            "AttrFlags": 2
          },
          {
            "Text": ") to access its fields. Here’s an example of a terribly simple (some might say “terrible and simple”) implementation of a stack that uses pointers to "
          },
          {
            "Text": "struct",
            "AttrFlags": 2
          },
          {
            "Text": "s and demonstrates the arrow operator."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936221143,
        "id": "3dca84ae-2bf1-4487-8fb3-6150b58d08a3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936221143,
        "parent_id": "8546e6f5-8411-426e-9a42-e3806e8138b7",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cstdlib.h\u003e\n#include \u003cstdio.h\u003e\n\n/* structs */\nstruct stack\n{\n    struct node *top;\n    int size;\n};\n\nstruct node\n{\n    int data;\n    struct node *next;\n};\n\n/* function declarations */\nint push(int, struct stack*);\nint pop(struct stack*);\nvoid destroy(struct stack*);\n\nint main(void)\n{\n    int result = EXIT_SUCCESS;\n\n    size_t i;\n\n    /* allocate memory for a struct stack and record its pointer */\n    struct stack *stack = malloc(sizeof *stack);\n    if (NULL == stack)\n    {\n        perror(\"malloc() failed\");\n        return EXIT_FAILURE;\n    }\n\n    /* initialize stack */\n    stack-\u003etop = NULL;\n    stack-\u003esize = 0;\n\n    /* push 10 ints */\n    {\n        int data = 0;\n        for(i = 0; i \u003c 10; i++)\n        {\n            printf(\"Pushing: %d\\n\", data);\n            if (-1 == push(data, stack))\n            {\n                perror(\"push() failed\");\n                result = EXIT_FAILURE;\n                break;\n            }\n\n            ++data;\n        }\n    }\n\n    if (EXIT_SUCCESS == result)\n    {\n        /* pop 5 ints */\n        for(i = 0; i \u003c 5; i++)\n        {\n            printf(\"Popped: %i\\n\", pop(stack));\n        }\n    }\n\n    /* destroy stack */\n    destroy(stack);\n\n    return result;\n}\n\n/* Push a value onto the stack. */\n/* Returns 0 on success and -1 on failure. */\nint push(int data, struct stack *stack)\n{\n    int result = 0;\n\n    /* allocate memory for new node */\n    struct node *new_node = malloc(sizeof *new_node);\n    if (NULL == new_node)\n    {\n        result = -1;\n    }\n    else\n    {\n        new_node-\u003edata = data;\n        new_node-\u003enext = stack-\u003etop;\n        stack-\u003etop = new_node;\n        stack-\u003esize++;\n    }\n\n    return result;\n}\n\n/* Pop a value off of the stack. */\n/* Returns the value popped off the stack */\nint pop(struct stack *stack)\n{\n    struct node *top = stack-\u003etop;\n    int data = top-\u003edata;\n    stack-\u003etop = top-\u003enext;\n    stack-\u003esize--;\n    free(top);\n    return data;\n}\n\n/* destroy the stack */\nvoid destroy(struct stack *stack)\n{\n    /* free all pointers */\n    while(stack-\u003etop != NULL)\n    {\n        pop(stack);\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cstdlib.h\u003e\n#include \u003cstdio.h\u003e\n\n/* structs */\nstruct stack\n{\n    struct node *top;\n    int size;\n};\n\nstruct node\n{\n    int data;\n    struct node *next;\n};\n\n/* function declarations */\nint push(int, struct stack*);\nint pop(struct stack*);\nvoid destroy(struct stack*);\n\nint main(void)\n{\n    int result = EXIT_SUCCESS;\n\n    size_t i;\n\n    /* allocate memory for a struct stack and record its pointer */\n    struct stack *stack = malloc(sizeof *stack);\n    if (NULL == stack)\n    {\n        perror(\"malloc() failed\");\n        return EXIT_FAILURE;\n    }\n\n    /* initialize stack */\n    stack-\u003etop = NULL;\n    stack-\u003esize = 0;\n\n    /* push 10 ints */\n    {\n        int data = 0;\n        for(i = 0; i \u003c 10; i++)\n        {\n            printf(\"Pushing: %d\\n\", data);\n            if (-1 == push(data, stack))\n            {\n                perror(\"push() failed\");\n                result = EXIT_FAILURE;\n                break;\n            }\n\n            ++data;\n        }\n    }\n\n    if (EXIT_SUCCESS == result)\n    {\n        /* pop 5 ints */\n        for(i = 0; i \u003c 5; i++)\n        {\n            printf(\"Popped: %i\\n\", pop(stack));\n        }\n    }\n\n    /* destroy stack */\n    destroy(stack);\n\n    return result;\n}\n\n/* Push a value onto the stack. */\n/* Returns 0 on success and -1 on failure. */\nint push(int data, struct stack *stack)\n{\n    int result = 0;\n\n    /* allocate memory for new node */\n    struct node *new_node = malloc(sizeof *new_node);\n    if (NULL == new_node)\n    {\n        result = -1;\n    }\n    else\n    {\n        new_node-\u003edata = data;\n        new_node-\u003enext = stack-\u003etop;\n        stack-\u003etop = new_node;\n        stack-\u003esize++;\n    }\n\n    return result;\n}\n\n/* Pop a value off of the stack. */\n/* Returns the value popped off the stack */\nint pop(struct stack *stack)\n{\n    struct node *top = stack-\u003etop;\n    int data = top-\u003edata;\n    stack-\u003etop = top-\u003enext;\n    stack-\u003esize--;\n    free(top);\n    return data;\n}\n\n/* destroy the stack */\nvoid destroy(struct stack *stack)\n{\n    /* free all pointers */\n    while(stack-\u003etop != NULL)\n    {\n        pop(stack);\n    }\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "Pointers to structs",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}