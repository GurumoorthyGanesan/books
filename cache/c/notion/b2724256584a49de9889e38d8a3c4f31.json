{
  "ID": "b2724256-584a-49de-9889-e38d8a3c4f31",
  "Root": {
    "alive": true,
    "content": [
      "6d9abbce-c241-4de7-abf1-f46b8ff927f8",
      "43618acc-8a70-4ded-9ccb-fb4bbd30185a",
      "b55d807b-eb36-4548-b0b4-dc6198025c81",
      "b92b9fa1-1801-4033-93ce-fd8507e4a06c",
      "42cc7351-5b06-4ea1-88ab-34c5a6583bf9",
      "5b83578f-8e1a-4b4d-ae41-f9a522d622fb",
      "a6900197-d589-46eb-b935-ac0f10c8a5ee",
      "0a0b74eb-c978-422d-b3ef-d09441fbfb11",
      "2658293b-3f3b-433b-9074-74497336adc0"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551935780150,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "b2724256-584a-49de-9889-e38d8a3c4f31",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551935780150,
    "parent_id": "68e74303-cec6-4c9d-a46e-83274bc84bf4",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "cplusplus for using C externals in C code compiled with C - name mangling"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935780146,
        "id": "6d9abbce-c241-4de7-abf1-f46b8ff927f8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935780146,
        "parent_id": "b2724256-584a-49de-9889-e38d8a3c4f31",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "There are times when an include file has to generate different output from the preprocessor depending on whether the compiler is a C compiler or a C++ compiler due to language differences."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "There are times when an include file has to generate different output from the preprocessor depending on whether the compiler is a C compiler or a C++ compiler due to language differences."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935780149,
        "id": "43618acc-8a70-4ded-9ccb-fb4bbd30185a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935780149,
        "parent_id": "b2724256-584a-49de-9889-e38d8a3c4f31",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For example a function or other external is defined in a C source file but is used in a C++ source file. Since C++ uses name mangling (or name decoration) in order to generate unique function names based on function argument types, a C function declaration used in a C++ source file will cause link errors. The C++ compiler will modify the specified external name for the compiler output using the name mangling rules for C++. The result is link errors due to externals not found when the C++ compiler output is linked with the C compiler output."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For example a function or other external is defined in a C source file but is used in a C++ source file. Since C++ uses name mangling (or name decoration) in order to generate unique function names based on function argument types, a C function declaration used in a C++ source file will cause link errors. The C++ compiler will modify the specified external name for the compiler output using the name mangling rules for C++. The result is link errors due to externals not found when the C++ compiler output is linked with the C compiler output."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935780149,
        "id": "b55d807b-eb36-4548-b0b4-dc6198025c81",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935780149,
        "parent_id": "b2724256-584a-49de-9889-e38d8a3c4f31",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Since C compilers do not do name mangling but C++ compilers do for all external labels (function names or variable names) generated by the C++ compiler, a predefined preprocessor macro, "
            ],
            [
              "__cplusplus",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", was introduced to allow for compiler detection."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Since C compilers do not do name mangling but C++ compilers do for all external labels (function names or variable names) generated by the C++ compiler, a predefined preprocessor macro, "
          },
          {
            "Text": "__cplusplus",
            "AttrFlags": 2
          },
          {
            "Text": ", was introduced to allow for compiler detection."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935780149,
        "id": "b92b9fa1-1801-4033-93ce-fd8507e4a06c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935780149,
        "parent_id": "b2724256-584a-49de-9889-e38d8a3c4f31",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In order to work around this problem of incompatible compiler output for external names between C and C++, the macro "
            ],
            [
              "__cplusplus",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is defined in the C++ Preprocessor and is not defined in the C Preprocessor. This macro name can be used with the conditional preprocessor "
            ],
            [
              "#ifdef",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " directive or "
            ],
            [
              "#if",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " with the "
            ],
            [
              "defined()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " operator to tell whether a source code or include file is being compiled as C++ or C."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In order to work around this problem of incompatible compiler output for external names between C and C++, the macro "
          },
          {
            "Text": "__cplusplus",
            "AttrFlags": 2
          },
          {
            "Text": " is defined in the C++ Preprocessor and is not defined in the C Preprocessor. This macro name can be used with the conditional preprocessor "
          },
          {
            "Text": "#ifdef",
            "AttrFlags": 2
          },
          {
            "Text": " directive or "
          },
          {
            "Text": "#if",
            "AttrFlags": 2
          },
          {
            "Text": " with the "
          },
          {
            "Text": "defined()",
            "AttrFlags": 2
          },
          {
            "Text": " operator to tell whether a source code or include file is being compiled as C++ or C."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935780149,
        "id": "42cc7351-5b06-4ea1-88ab-34c5a6583bf9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935780149,
        "parent_id": "b2724256-584a-49de-9889-e38d8a3c4f31",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#ifdef __cplusplus\nprintf(\"C++\\n\");\n#else\nprintf(\"C\\n\");\n#endif"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#ifdef __cplusplus\nprintf(\"C++\\n\");\n#else\nprintf(\"C\\n\");\n#endif",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935780150,
        "id": "5b83578f-8e1a-4b4d-ae41-f9a522d622fb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935780150,
        "parent_id": "b2724256-584a-49de-9889-e38d8a3c4f31",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Or you could use"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Or you could use"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935780150,
        "id": "a6900197-d589-46eb-b935-ac0f10c8a5ee",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935780150,
        "parent_id": "b2724256-584a-49de-9889-e38d8a3c4f31",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#if defined(__cplusplus)\nprintf(\"C++\\n\");\n#else\nprintf(\"C\\n\");\n#endif"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#if defined(__cplusplus)\nprintf(\"C++\\n\");\n#else\nprintf(\"C\\n\");\n#endif",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935780150,
        "id": "0a0b74eb-c978-422d-b3ef-d09441fbfb11",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935780150,
        "parent_id": "b2724256-584a-49de-9889-e38d8a3c4f31",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In order to specify the correct function name of a function from a C source file compiled with the C compiler that is being used in a C++ source file you could check for the "
            ],
            [
              "__cplusplus",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " defined constant in order to cause the "
            ],
            [
              "extern \"C\" { /* ... */ };",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to be used to declare C externals when the header file is included in a C++ source file. However when compiled with a C compiler, the "
            ],
            [
              "extern \"C\" { */ ... */ };",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is not used. This conditional compilation is needed because "
            ],
            [
              "extern \"C\" { /* ... */ };",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is valid in C++ but not in C."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In order to specify the correct function name of a function from a C source file compiled with the C compiler that is being used in a C++ source file you could check for the "
          },
          {
            "Text": "__cplusplus",
            "AttrFlags": 2
          },
          {
            "Text": " defined constant in order to cause the "
          },
          {
            "Text": "extern \"C\" { /* ... */ };",
            "AttrFlags": 2
          },
          {
            "Text": " to be used to declare C externals when the header file is included in a C++ source file. However when compiled with a C compiler, the "
          },
          {
            "Text": "extern \"C\" { */ ... */ };",
            "AttrFlags": 2
          },
          {
            "Text": " is not used. This conditional compilation is needed because "
          },
          {
            "Text": "extern \"C\" { /* ... */ };",
            "AttrFlags": 2
          },
          {
            "Text": " is valid in C++ but not in C."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935780150,
        "id": "2658293b-3f3b-433b-9074-74497336adc0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935780150,
        "parent_id": "b2724256-584a-49de-9889-e38d8a3c4f31",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#ifdef __cplusplus\n// if we are being compiled with a C++ compiler then declare the\n// following functions as C functions to prevent name mangling.\nextern \"C\" {\n#endif\n\n// exported C function list.\nint foo (void);\n\n#ifdef __cplusplus\n// if this is a C++ compiler, we need to close off the extern declaration.\n};\n#endif"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#ifdef __cplusplus\n// if we are being compiled with a C++ compiler then declare the\n// following functions as C functions to prevent name mangling.\nextern \"C\" {\n#endif\n\n// exported C function list.\nint foo (void);\n\n#ifdef __cplusplus\n// if this is a C++ compiler, we need to close off the extern declaration.\n};\n#endif",
        "code_language": "Plain Text"
      }
    ],
    "title": "cplusplus for using C externals in C code compiled with C - name mangling",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}