{
  "ID": "754f618b-9e6f-4642-b3c9-f2d4994f9612",
  "Root": {
    "alive": true,
    "content": [
      "e01e2834-8a3d-4360-9390-b5dfbd5deeba",
      "8fca4da1-3f5b-4dba-a61d-1d3556e1c650",
      "06726639-b2ac-47fe-b198-963c75097fa3",
      "a278766f-f2d1-4efc-9cca-0f737be7f961",
      "a9e14c4a-10e4-408d-a38e-eaf0c13813a2",
      "b8b3b91d-d4fe-4fda-9d62-4a6cec68c0b5",
      "8320724a-1ff4-4ce6-85de-6cd4f0d5f167",
      "c0a717f0-a215-4a22-bf78-1f6fe2d36347"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551936352377,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "754f618b-9e6f-4642-b3c9-f2d4994f9612",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551936352377,
    "parent_id": "ce0d7992-bb1e-4e62-ab26-2f99a9a2f78d",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Checking logical expression against true"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936352375,
        "id": "e01e2834-8a3d-4360-9390-b5dfbd5deeba",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936352375,
        "parent_id": "754f618b-9e6f-4642-b3c9-f2d4994f9612",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The original C standard had no intrinsic Boolean type, so "
            ],
            [
              "bool",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "true",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "false",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " had no inherent meaning and were often defined by programmers. Typically "
            ],
            [
              "true",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " would be defined as 1 and "
            ],
            [
              "false",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " would be defined as 0."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The original C standard had no intrinsic Boolean type, so "
          },
          {
            "Text": "bool",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "true",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "false",
            "AttrFlags": 2
          },
          {
            "Text": " had no inherent meaning and were often defined by programmers. Typically "
          },
          {
            "Text": "true",
            "AttrFlags": 2
          },
          {
            "Text": " would be defined as 1 and "
          },
          {
            "Text": "false",
            "AttrFlags": 2
          },
          {
            "Text": " would be defined as 0."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936352375,
        "id": "8fca4da1-3f5b-4dba-a61d-1d3556e1c650",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936352375,
        "parent_id": "754f618b-9e6f-4642-b3c9-f2d4994f9612",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "C99 adds the built-in type "
            ],
            [
              "_Bool",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and the header "
            ],
            [
              "\u003cstdbool.h\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " which defines "
            ],
            [
              "bool",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (expanding to "
            ],
            [
              "_Bool",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "), "
            ],
            [
              "false",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "true",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". It also allows you to redefine "
            ],
            [
              "bool",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "true",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "false",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", but notes that this is an obsolescent feature."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "C99 adds the built-in type "
          },
          {
            "Text": "_Bool",
            "AttrFlags": 2
          },
          {
            "Text": " and the header "
          },
          {
            "Text": "\u003cstdbool.h\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " which defines "
          },
          {
            "Text": "bool",
            "AttrFlags": 2
          },
          {
            "Text": " (expanding to "
          },
          {
            "Text": "_Bool",
            "AttrFlags": 2
          },
          {
            "Text": "), "
          },
          {
            "Text": "false",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "true",
            "AttrFlags": 2
          },
          {
            "Text": ". It also allows you to redefine "
          },
          {
            "Text": "bool",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "true",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "false",
            "AttrFlags": 2
          },
          {
            "Text": ", but notes that this is an obsolescent feature."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936352376,
        "id": "06726639-b2ac-47fe-b198-963c75097fa3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936352376,
        "parent_id": "754f618b-9e6f-4642-b3c9-f2d4994f9612",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "More importantly, logical expressions treat anything that evaluates to zero as false and any non-zero evaluation as true. For example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "More importantly, logical expressions treat anything that evaluates to zero as false and any non-zero evaluation as true. For example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936352376,
        "id": "a278766f-f2d1-4efc-9cca-0f737be7f961",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936352376,
        "parent_id": "754f618b-9e6f-4642-b3c9-f2d4994f9612",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "/* Return 'true' if the most significant bit is set */\nbool isUpperBitSet(uint8_t bitField)\n{\n    if ((bitField \u0026 0x80) == true)  /* Comparison only succeeds if true is 0x80 and bitField has that bit set */\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "/* Return 'true' if the most significant bit is set */\nbool isUpperBitSet(uint8_t bitField)\n{\n    if ((bitField \u0026 0x80) == true)  /* Comparison only succeeds if true is 0x80 and bitField has that bit set */\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936352376,
        "id": "a9e14c4a-10e4-408d-a38e-eaf0c13813a2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936352376,
        "parent_id": "754f618b-9e6f-4642-b3c9-f2d4994f9612",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In the above example, the function is trying to check if the upper bit is set and return "
            ],
            [
              "true",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " if it is. However, by explicitly checking against "
            ],
            [
              "true",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", the "
            ],
            [
              "if",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " statement will only succeed if "
            ],
            [
              "(bitfield \u0026 0x80)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " evaluates to whatever "
            ],
            [
              "true",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is defined as, which is typically "
            ],
            [
              "1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and very seldom "
            ],
            [
              "0x80",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Either explicitly check against the case you expect:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In the above example, the function is trying to check if the upper bit is set and return "
          },
          {
            "Text": "true",
            "AttrFlags": 2
          },
          {
            "Text": " if it is. However, by explicitly checking against "
          },
          {
            "Text": "true",
            "AttrFlags": 2
          },
          {
            "Text": ", the "
          },
          {
            "Text": "if",
            "AttrFlags": 2
          },
          {
            "Text": " statement will only succeed if "
          },
          {
            "Text": "(bitfield \u0026 0x80)",
            "AttrFlags": 2
          },
          {
            "Text": " evaluates to whatever "
          },
          {
            "Text": "true",
            "AttrFlags": 2
          },
          {
            "Text": " is defined as, which is typically "
          },
          {
            "Text": "1",
            "AttrFlags": 2
          },
          {
            "Text": " and very seldom "
          },
          {
            "Text": "0x80",
            "AttrFlags": 2
          },
          {
            "Text": ". Either explicitly check against the case you expect:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936352376,
        "id": "b8b3b91d-d4fe-4fda-9d62-4a6cec68c0b5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936352376,
        "parent_id": "754f618b-9e6f-4642-b3c9-f2d4994f9612",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "/* Return 'true' if the most significant bit is set */\nbool isUpperBitSet(uint8_t bitField)\n{\n    if ((bitField \u0026 0x80) == 0x80) /* Explicitly test for the case we expect */\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "/* Return 'true' if the most significant bit is set */\nbool isUpperBitSet(uint8_t bitField)\n{\n    if ((bitField \u0026 0x80) == 0x80) /* Explicitly test for the case we expect */\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936352376,
        "id": "8320724a-1ff4-4ce6-85de-6cd4f0d5f167",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936352376,
        "parent_id": "754f618b-9e6f-4642-b3c9-f2d4994f9612",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Or evaluate any non-zero value as true."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Or evaluate any non-zero value as true."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936352377,
        "id": "c0a717f0-a215-4a22-bf78-1f6fe2d36347",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936352377,
        "parent_id": "754f618b-9e6f-4642-b3c9-f2d4994f9612",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "/* Return 'true' if the most significant bit is set */\nbool isUpperBitSet(uint8_t bitField)\n{\n    /* If upper bit is set, result is 0x80 which the if will evaluate as true */\n    if (bitField \u0026 0x80)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "/* Return 'true' if the most significant bit is set */\nbool isUpperBitSet(uint8_t bitField)\n{\n    /* If upper bit is set, result is 0x80 which the if will evaluate as true */\n    if (bitField \u0026 0x80)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "Checking logical expression against true",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}