{
  "ID": "c2ecdceb-2c46-4709-afff-400a35804e58",
  "Root": {
    "alive": true,
    "content": [
      "c64fba1e-37c7-4147-b4d4-c2adaafada3d",
      "468494bf-5d44-4064-9345-ff94acabe381",
      "c2f0f09c-8b2c-4e29-b10d-c92c25e45dfd",
      "bd6a1c17-5c3d-4665-9a65-9698ef26a346",
      "b0386700-7aef-4a64-a2d9-f6eb0b989344",
      "0191179c-1e7e-4afd-ba43-701da265ac7e"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551936291729,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "c2ecdceb-2c46-4709-afff-400a35804e58",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551936291729,
    "parent_id": "92dc051b-09a3-4930-9dda-0fb318b57610",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Function scope"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936291728,
        "id": "c64fba1e-37c7-4147-b4d4-c2adaafada3d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936291728,
        "parent_id": "c2ecdceb-2c46-4709-afff-400a35804e58",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Function scope",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " is the special scope for "
            ],
            [
              "labels",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". This is due to their unusual property. A "
            ],
            [
              "label",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " is visible through the entire function it is defined and one can jump (using instruction "
            ],
            [
              "goto",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "label",
              [
                [
                  "i"
                ],
                [
                  "c"
                ]
              ]
            ],
            [
              ") to it from any point in the same function. While not useful, the following example illustrate the point:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Function scope",
            "AttrFlags": 1
          },
          {
            "Text": " is the special scope for "
          },
          {
            "Text": "labels",
            "AttrFlags": 1
          },
          {
            "Text": ". This is due to their unusual property. A "
          },
          {
            "Text": "label",
            "AttrFlags": 1
          },
          {
            "Text": " is visible through the entire function it is defined and one can jump (using instruction "
          },
          {
            "Text": "goto",
            "AttrFlags": 2
          },
          {
            "Text": "label",
            "AttrFlags": 6
          },
          {
            "Text": ") to it from any point in the same function. While not useful, the following example illustrate the point:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936291728,
        "id": "468494bf-5d44-4064-9345-ff94acabe381",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936291728,
        "parent_id": "c2ecdceb-2c46-4709-afff-400a35804e58",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cstdio.h\u003e\n\nint main(int argc,char *argv[]) {\n    int a = 0;\n    goto INSIDE;\n  OUTSIDE:\n    if (a!=0) {\n        int i=0;\n      INSIDE:\n        printf(\"a=%d\\n\",a);\n        goto OUTSIDE;\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cstdio.h\u003e\n\nint main(int argc,char *argv[]) {\n    int a = 0;\n    goto INSIDE;\n  OUTSIDE:\n    if (a!=0) {\n        int i=0;\n      INSIDE:\n        printf(\"a=%d\\n\",a);\n        goto OUTSIDE;\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936291728,
        "id": "c2f0f09c-8b2c-4e29-b10d-c92c25e45dfd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936291729,
        "parent_id": "c2ecdceb-2c46-4709-afff-400a35804e58",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "INSIDE",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " may seem defined "
            ],
            [
              "inside",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " the "
            ],
            [
              "if",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " block, as it is the case for "
            ],
            [
              "i",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " which scope is the block, but it is not. It is visible in the whole function as the instruction "
            ],
            [
              "goto INSIDE;",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " illustrates. Thus there can’t be two labels with the same identifier in a single function."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "INSIDE",
            "AttrFlags": 2
          },
          {
            "Text": " may seem defined "
          },
          {
            "Text": "inside",
            "AttrFlags": 4
          },
          {
            "Text": " the "
          },
          {
            "Text": "if",
            "AttrFlags": 2
          },
          {
            "Text": " block, as it is the case for "
          },
          {
            "Text": "i",
            "AttrFlags": 2
          },
          {
            "Text": " which scope is the block, but it is not. It is visible in the whole function as the instruction "
          },
          {
            "Text": "goto INSIDE;",
            "AttrFlags": 2
          },
          {
            "Text": " illustrates. Thus there can’t be two labels with the same identifier in a single function."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936291729,
        "id": "bd6a1c17-5c3d-4665-9a65-9698ef26a346",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936291729,
        "parent_id": "c2ecdceb-2c46-4709-afff-400a35804e58",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A possible usage is the following pattern to realize correct complex cleanups of allocated ressources:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A possible usage is the following pattern to realize correct complex cleanups of allocated ressources:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936291729,
        "id": "b0386700-7aef-4a64-a2d9-f6eb0b989344",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936291729,
        "parent_id": "c2ecdceb-2c46-4709-afff-400a35804e58",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cstdlib.h\u003e\n#include \u003cstdio.h\u003e\n\nvoid a_function(void) {\n   double* a = malloc(sizeof(double[34]));\n   if (!a) {\n      fprintf(stderr,\"can't allocate\\n\");\n      return;                 /* No point in freeing a if it is null */\n   }\n   FILE* b = fopen(\"some_file\",\"r\");\n   if (!b) {\n      fprintf(stderr,\"can't open\\n\");\n      goto CLEANUP1;          /* Free a; no point in closing b */\n   }\n   /* do something reasonable */\n   if (error) {\n      fprintf(stderr,\"something's wrong\\n\");\n      goto CLEANUP2;       /* Free a and close b to prevent leaks */\n   }\n   /* do yet something else */\nCLEANUP2:\n   close(b);\nCLEANUP1:\n   free(a);\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cstdlib.h\u003e\n#include \u003cstdio.h\u003e\n\nvoid a_function(void) {\n   double* a = malloc(sizeof(double[34]));\n   if (!a) {\n      fprintf(stderr,\"can't allocate\\n\");\n      return;                 /* No point in freeing a if it is null */\n   }\n   FILE* b = fopen(\"some_file\",\"r\");\n   if (!b) {\n      fprintf(stderr,\"can't open\\n\");\n      goto CLEANUP1;          /* Free a; no point in closing b */\n   }\n   /* do something reasonable */\n   if (error) {\n      fprintf(stderr,\"something's wrong\\n\");\n      goto CLEANUP2;       /* Free a and close b to prevent leaks */\n   }\n   /* do yet something else */\nCLEANUP2:\n   close(b);\nCLEANUP1:\n   free(a);\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936291729,
        "id": "0191179c-1e7e-4afd-ba43-701da265ac7e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936291729,
        "parent_id": "c2ecdceb-2c46-4709-afff-400a35804e58",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Labels such as "
            ],
            [
              "CLEANUP1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "CLEANUP2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " are special identifiers that behave differently from all other identifiers. They are visible from everywhere inside the function, even in places that are executed before the labeled statement, or even in places that could never be reached if none of the "
            ],
            [
              "goto",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is executed. Labels are often written in lower-case rather than upper-case."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Labels such as "
          },
          {
            "Text": "CLEANUP1",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "CLEANUP2",
            "AttrFlags": 2
          },
          {
            "Text": " are special identifiers that behave differently from all other identifiers. They are visible from everywhere inside the function, even in places that are executed before the labeled statement, or even in places that could never be reached if none of the "
          },
          {
            "Text": "goto",
            "AttrFlags": 2
          },
          {
            "Text": " is executed. Labels are often written in lower-case rather than upper-case."
          }
        ]
      }
    ],
    "title": "Function scope",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}