{
  "ID": "a68c6547-a3ab-4818-b50f-9291f89ec25a",
  "Root": {
    "alive": true,
    "content": [
      "feeee35e-3b09-41ed-9b97-4a273dd7c9c6",
      "5cd8f022-db17-44f4-981a-281d7f7e9c10",
      "893b91b0-5db2-4111-95ff-040820049af5"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551936338904,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "a68c6547-a3ab-4818-b50f-9291f89ec25a",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551936338904,
    "parent_id": "f3ac34eb-110d-486b-9e30-6bd30082bba0",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "strstr"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936338903,
        "id": "feeee35e-3b09-41ed-9b97-4a273dd7c9c6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936338903,
        "parent_id": "a68c6547-a3ab-4818-b50f-9291f89ec25a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "/* finds the next instance of needle in haystack \n   zbpos: the zero-based position to begin searching from\n   haystack: the string to search in\n   needle: the string that must be found\n   returns the next match of `needle` in `haystack`, or -1 if not found\n*/\nint findnext(int zbpos, const char *haystack, const char *needle)\n{\n    char *p; \n\n    if (((p = strstr(haystack + zbpos, needle)) != NULL)\n        return p - haystack;\n\n    return -1;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "/* finds the next instance of needle in haystack \n   zbpos: the zero-based position to begin searching from\n   haystack: the string to search in\n   needle: the string that must be found\n   returns the next match of `needle` in `haystack`, or -1 if not found\n*/\nint findnext(int zbpos, const char *haystack, const char *needle)\n{\n    char *p; \n\n    if (((p = strstr(haystack + zbpos, needle)) != NULL)\n        return p - haystack;\n\n    return -1;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936338904,
        "id": "5cd8f022-db17-44f4-981a-281d7f7e9c10",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936338904,
        "parent_id": "a68c6547-a3ab-4818-b50f-9291f89ec25a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "strstr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " searches the "
            ],
            [
              "haystack",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (first) argument for the string pointed to by "
            ],
            [
              "needle",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". If found, "
            ],
            [
              "strstr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " returns the address of the occurrence. If it could not find "
            ],
            [
              "needle",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", it returns NULL. We use "
            ],
            [
              "zbpos",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " so that we don’t keep finding the same needle over and over again. In order to skip the first instance, we add an offset of "
            ],
            [
              "zbpos",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". A Notepad clone might call "
            ],
            [
              "findnext",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " like this, in order to implement its “Find Next” dialogue:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "strstr",
            "AttrFlags": 2
          },
          {
            "Text": " searches the "
          },
          {
            "Text": "haystack",
            "AttrFlags": 2
          },
          {
            "Text": " (first) argument for the string pointed to by "
          },
          {
            "Text": "needle",
            "AttrFlags": 2
          },
          {
            "Text": ". If found, "
          },
          {
            "Text": "strstr",
            "AttrFlags": 2
          },
          {
            "Text": " returns the address of the occurrence. If it could not find "
          },
          {
            "Text": "needle",
            "AttrFlags": 2
          },
          {
            "Text": ", it returns NULL. We use "
          },
          {
            "Text": "zbpos",
            "AttrFlags": 2
          },
          {
            "Text": " so that we don’t keep finding the same needle over and over again. In order to skip the first instance, we add an offset of "
          },
          {
            "Text": "zbpos",
            "AttrFlags": 2
          },
          {
            "Text": ". A Notepad clone might call "
          },
          {
            "Text": "findnext",
            "AttrFlags": 2
          },
          {
            "Text": " like this, in order to implement its “Find Next” dialogue:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936338904,
        "id": "893b91b0-5db2-4111-95ff-040820049af5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936338904,
        "parent_id": "a68c6547-a3ab-4818-b50f-9291f89ec25a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "/*\n    Called when the user clicks \"Find Next\"\n    doc: The text of the document to search\n    findwhat: The string to find\n*/\nvoid onfindnext(const char *doc, const char *findwhat)\n{\n    static int i;\n\n    if ((i = findnext(i, doc, findwhat)) != -1)\n        /* select the text starting from i and ending at i + strlen(findwhat) */\n    else\n        /* display a message box saying \"end of search\" */\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "/*\n    Called when the user clicks \"Find Next\"\n    doc: The text of the document to search\n    findwhat: The string to find\n*/\nvoid onfindnext(const char *doc, const char *findwhat)\n{\n    static int i;\n\n    if ((i = findnext(i, doc, findwhat)) != -1)\n        /* select the text starting from i and ending at i + strlen(findwhat) */\n    else\n        /* display a message box saying \"end of search\" */\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "strstr",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}