{
  "ID": "97f78ed0-2427-4212-b4a7-aad59c70e775",
  "Root": {
    "alive": true,
    "content": [
      "1eb44869-3902-48e6-b04d-aca00ca011d8",
      "5bd70ab6-4d57-4485-9901-c6c8be201c9c",
      "d03cc81b-816c-4b08-829b-6dc8bf2586bd",
      "a093e653-e123-495c-a667-c1f81c378dce",
      "03c68eab-6424-42b1-806f-79b6dff17303",
      "3f974377-c807-4a56-9685-4d33c5797de9",
      "b7a56932-eaeb-436c-a320-538d0c3e73bd",
      "7493e2ba-5bf1-4732-b541-5ab70bba114c",
      "dd1ca242-1791-48ee-b4df-3b9615443fcd",
      "3084c9f4-4025-44df-b832-10d0a1cae1e3",
      "1ba5cd14-2520-498f-8ba5-2a92cf29a2e1"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551935682936,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "97f78ed0-2427-4212-b4a7-aad59c70e775",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551935682936,
    "parent_id": "c613c743-331e-4cb0-8344-4963dbf825f3",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Iterating through an array efficiently and row-major order"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935682932,
        "id": "1eb44869-3902-48e6-b04d-aca00ca011d8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935682932,
        "parent_id": "97f78ed0-2427-4212-b4a7-aad59c70e775",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Arrays in C can be seen as a contiguous chunk of memory. More precisely, the last dimension of the array is the contiguous part. We call this the "
            ],
            [
              "row-major order",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ". Understanding this and the fact that a cache fault loads a complete cache line into the cache when accessing uncached data to prevent subsequent cache faults, we can see why accessing an array of dimension 10000x10000 with "
            ],
            [
              "array[0][0]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " would "
            ],
            [
              "potentially",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " load "
            ],
            [
              "array[0][1]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in cache, but accessing "
            ],
            [
              "array[1][0]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " right after would generate a second cache fault, since it is "
            ],
            [
              "sizeof(type)*10000",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " bytes away from "
            ],
            [
              "array[0][0]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", and therefore certainly not on the same cache line. Which is why iterating like this is inefficient:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Arrays in C can be seen as a contiguous chunk of memory. More precisely, the last dimension of the array is the contiguous part. We call this the "
          },
          {
            "Text": "row-major order",
            "AttrFlags": 4
          },
          {
            "Text": ". Understanding this and the fact that a cache fault loads a complete cache line into the cache when accessing uncached data to prevent subsequent cache faults, we can see why accessing an array of dimension 10000x10000 with "
          },
          {
            "Text": "array[0][0]",
            "AttrFlags": 2
          },
          {
            "Text": " would "
          },
          {
            "Text": "potentially",
            "AttrFlags": 1
          },
          {
            "Text": " load "
          },
          {
            "Text": "array[0][1]",
            "AttrFlags": 2
          },
          {
            "Text": " in cache, but accessing "
          },
          {
            "Text": "array[1][0]",
            "AttrFlags": 2
          },
          {
            "Text": " right after would generate a second cache fault, since it is "
          },
          {
            "Text": "sizeof(type)*10000",
            "AttrFlags": 2
          },
          {
            "Text": " bytes away from "
          },
          {
            "Text": "array[0][0]",
            "AttrFlags": 2
          },
          {
            "Text": ", and therefore certainly not on the same cache line. Which is why iterating like this is inefficient:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935682934,
        "id": "5bd70ab6-4d57-4485-9901-c6c8be201c9c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935682934,
        "parent_id": "97f78ed0-2427-4212-b4a7-aad59c70e775",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#define ARRLEN 10000\nint array[ARRLEN][ARRLEN];\n\nsize_t i, j;\nfor (i = 0; i \u003c ARRLEN; ++i)\n{\n    for(j = 0; j \u003c ARRLEN; ++j)\n    {\n        array[j][i] = 0;\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#define ARRLEN 10000\nint array[ARRLEN][ARRLEN];\n\nsize_t i, j;\nfor (i = 0; i \u003c ARRLEN; ++i)\n{\n    for(j = 0; j \u003c ARRLEN; ++j)\n    {\n        array[j][i] = 0;\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935682934,
        "id": "d03cc81b-816c-4b08-829b-6dc8bf2586bd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935682934,
        "parent_id": "97f78ed0-2427-4212-b4a7-aad59c70e775",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "And iterating like this is more efficient:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "And iterating like this is more efficient:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935682934,
        "id": "a093e653-e123-495c-a667-c1f81c378dce",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935682934,
        "parent_id": "97f78ed0-2427-4212-b4a7-aad59c70e775",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#define ARRLEN 10000\nint array[ARRLEN][ARRLEN];\n\nsize_t i, j;\nfor (i = 0; i \u003c ARRLEN; ++i)\n{\n    for(j = 0; j \u003c ARRLEN; ++j)\n    {\n        array[i][j] = 0;\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#define ARRLEN 10000\nint array[ARRLEN][ARRLEN];\n\nsize_t i, j;\nfor (i = 0; i \u003c ARRLEN; ++i)\n{\n    for(j = 0; j \u003c ARRLEN; ++j)\n    {\n        array[i][j] = 0;\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935682935,
        "id": "03c68eab-6424-42b1-806f-79b6dff17303",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935682935,
        "parent_id": "97f78ed0-2427-4212-b4a7-aad59c70e775",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In the same vein, this is why when dealing with an array with one dimension and multiple indexes (let’s say 2 dimensions here for simplicity with indexes i and j) it is important to iterate through the array like this:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In the same vein, this is why when dealing with an array with one dimension and multiple indexes (let’s say 2 dimensions here for simplicity with indexes i and j) it is important to iterate through the array like this:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935682935,
        "id": "3f974377-c807-4a56-9685-4d33c5797de9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935682935,
        "parent_id": "97f78ed0-2427-4212-b4a7-aad59c70e775",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#define DIM_X 10\n#define DIM_Y 20\n\nint array[DIM_X*DIM_Y];\n\nsize_t i, j;\nfor (i = 0; i \u003c DIM_X; ++i)\n{\n    for(j = 0; j \u003c DIM_Y; ++j)\n    {\n        array[i*DIM_Y+j] = 0;\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#define DIM_X 10\n#define DIM_Y 20\n\nint array[DIM_X*DIM_Y];\n\nsize_t i, j;\nfor (i = 0; i \u003c DIM_X; ++i)\n{\n    for(j = 0; j \u003c DIM_Y; ++j)\n    {\n        array[i*DIM_Y+j] = 0;\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935682935,
        "id": "b7a56932-eaeb-436c-a320-538d0c3e73bd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935682935,
        "parent_id": "97f78ed0-2427-4212-b4a7-aad59c70e775",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Or with 3 dimensions and indexes i,j and k:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Or with 3 dimensions and indexes i,j and k:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935682935,
        "id": "7493e2ba-5bf1-4732-b541-5ab70bba114c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935682935,
        "parent_id": "97f78ed0-2427-4212-b4a7-aad59c70e775",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#define DIM_X 10\n#define DIM_Y 20\n#define DIM_Z 30\n\nint array[DIM_X*DIM_Y*DIM_Z];\n\nsize_t i, j, k;\nfor (i = 0; i \u003c DIM_X; ++i)\n{\n    for(j = 0; j \u003c DIM_Y; ++j)\n    {\n        for (k = 0; k \u003c DIM_Z; ++k)\n        {\n            array[i*DIM_Y*DIM_Z+j*DIM_Z+k] = 0;\n        }\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#define DIM_X 10\n#define DIM_Y 20\n#define DIM_Z 30\n\nint array[DIM_X*DIM_Y*DIM_Z];\n\nsize_t i, j, k;\nfor (i = 0; i \u003c DIM_X; ++i)\n{\n    for(j = 0; j \u003c DIM_Y; ++j)\n    {\n        for (k = 0; k \u003c DIM_Z; ++k)\n        {\n            array[i*DIM_Y*DIM_Z+j*DIM_Z+k] = 0;\n        }\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935682935,
        "id": "dd1ca242-1791-48ee-b4df-3b9615443fcd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935682935,
        "parent_id": "97f78ed0-2427-4212-b4a7-aad59c70e775",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Or in a more generic way, when we have an array with "
            ],
            [
              "N1 x N2 x … x Nd",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " elements, "
            ],
            [
              "d",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " dimensions and indices noted as "
            ],
            [
              "n1,n2,…,nd",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " the offset is calculated like this"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Or in a more generic way, when we have an array with "
          },
          {
            "Text": "N1 x N2 x … x Nd",
            "AttrFlags": 1
          },
          {
            "Text": " elements, "
          },
          {
            "Text": "d",
            "AttrFlags": 1
          },
          {
            "Text": " dimensions and indices noted as "
          },
          {
            "Text": "n1,n2,…,nd",
            "AttrFlags": 1
          },
          {
            "Text": " the offset is calculated like this"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935682935,
        "id": "3084c9f4-4025-44df-b832-10d0a1cae1e3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935682935,
        "parent_id": "97f78ed0-2427-4212-b4a7-aad59c70e775",
        "parent_table": "block",
        "properties": {
          "source": [
            [
              "/tmp/ec4463a2-b5dc-48ee-8625-42c5852a8695/44904106d4e1405b1479db0d4c5869dbd53a6e24.png"
            ]
          ]
        },
        "type": "image",
        "version": 1,
        "source": "/tmp/ec4463a2-b5dc-48ee-8625-42c5852a8695/44904106d4e1405b1479db0d4c5869dbd53a6e24.png",
        "image_url": "https://www.notion.so/image/https:%2F%2Fwww.notion.so%2Ftmp%2Fec4463a2-b5dc-48ee-8625-42c5852a8695%2F44904106d4e1405b1479db0d4c5869dbd53a6e24.png"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935682935,
        "id": "1ba5cd14-2520-498f-8ba5-2a92cf29a2e1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935682935,
        "parent_id": "97f78ed0-2427-4212-b4a7-aad59c70e775",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Picture/formula taken from: https://en.wikipedia.org/wiki/Row-major_order"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Picture/formula taken from: https://en.wikipedia.org/wiki/Row-major_order"
          }
        ]
      }
    ],
    "title": "Iterating through an array efficiently and row-major order",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}