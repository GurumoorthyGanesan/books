{
  "ID": "326b9692-7f7f-4063-8f67-0a6125b785ab",
  "Root": {
    "alive": true,
    "content": [
      "222bce4e-2228-4a11-a0d2-4eda7c888409",
      "9c9bf094-d5fb-402a-b217-2ac56f7252bd",
      "b9bdb10e-150b-4711-b480-781719c451e2",
      "358d5414-005f-48a6-809c-f945f7bdacde",
      "179c7eb5-f04e-44b2-86e3-a06c7996be4c",
      "4b7c045b-9ecd-4604-bf8b-bd6f420553a3",
      "f71d3d6f-37fb-4740-8c0b-033841f2075c",
      "8c185193-c49c-470e-a638-9204d0f05070",
      "a8131567-9562-44b0-8c15-c4462362f6fa",
      "e0a88a92-b7bd-4f25-a9f3-1b9d5c43eb4c",
      "9c07c1fd-bc72-4d63-8100-156c17d6277a",
      "b8379bd8-4254-44b8-ae15-ed65a0449296",
      "04285fbb-0f08-4eee-bf77-cf14c3723d8e",
      "c99374f6-fe86-4b8d-af5d-e9e4ddc5298f",
      "e9a2c82b-a57c-4891-b42a-9757ea5db531",
      "ba2d15ff-749f-4589-a1e1-7764a32970f2",
      "f4a9c619-4884-46a5-9baa-d45a021f636d"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551935851517,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "326b9692-7f7f-4063-8f67-0a6125b785ab",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551935851517,
    "parent_id": "fb6df079-bba6-489e-ac6a-3ea61d24e7af",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Inserting a node at the beginning of a singly linked list"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935851511,
        "id": "222bce4e-2228-4a11-a0d2-4eda7c888409",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935851511,
        "parent_id": "326b9692-7f7f-4063-8f67-0a6125b785ab",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The code below will prompt for numbers and continue to add them to the beginning of a linked list."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The code below will prompt for numbers and continue to add them to the beginning of a linked list."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935851514,
        "id": "9c9bf094-d5fb-402a-b217-2ac56f7252bd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935851514,
        "parent_id": "326b9692-7f7f-4063-8f67-0a6125b785ab",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "/* This program will demonstrate inserting a node at the beginning of a linked list */\n\n#include \u003cstdio.h\u003e\n#include \u003cstdlib.h\u003e\n\nstruct Node {\n  int data;\n  struct Node* next;\n};\n\n\nvoid insert_node (struct Node **head, int nodeValue);\nvoid print_list (struct Node *head);\n\nint main(int argc, char *argv[]) {\n  struct Node* headNode;\n  headNode = NULL; /* Initialize our first node pointer to be NULL. */\n  size_t listSize, i;\n  do {\n    printf(\"How many numbers would you like to input?\\n\");\n  } while(1 != scanf(\"%zu\", \u0026listSize));\n\n  for (i = 0; i \u003c listSize; i++) {\n    int numToAdd;\n    do {\n      printf(\"Enter a number:\\n\");\n    } while (1 != scanf(\"%d\", \u0026numToAdd));\n\n    insert_node (\u0026headNode, numToAdd);\n    printf(\"Current list after your inserted node: \\n\");\n    print_list(headNode);\n  }\n\n  return 0;\n}\n\nvoid print_list (struct Node *head) {\n  struct node* currentNode = head;\n\n  /* Iterate through each link. */\n  while (currentNode != NULL) {\n      printf(\"Value: %d\\n\", currentNode-\u003edata);\n      currentNode = currentNode -\u003e next;\n  }\n}\n\nvoid insert_node (struct Node **head, int nodeValue) {\n  struct Node *currentNode = malloc(sizeof *currentNode);\n  currentNode-\u003edata = nodeValue;\n  currentNode-\u003enext = (*head);\n\n  *head = currentNode;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "/* This program will demonstrate inserting a node at the beginning of a linked list */\n\n#include \u003cstdio.h\u003e\n#include \u003cstdlib.h\u003e\n\nstruct Node {\n  int data;\n  struct Node* next;\n};\n\n\nvoid insert_node (struct Node **head, int nodeValue);\nvoid print_list (struct Node *head);\n\nint main(int argc, char *argv[]) {\n  struct Node* headNode;\n  headNode = NULL; /* Initialize our first node pointer to be NULL. */\n  size_t listSize, i;\n  do {\n    printf(\"How many numbers would you like to input?\\n\");\n  } while(1 != scanf(\"%zu\", \u0026listSize));\n\n  for (i = 0; i \u003c listSize; i++) {\n    int numToAdd;\n    do {\n      printf(\"Enter a number:\\n\");\n    } while (1 != scanf(\"%d\", \u0026numToAdd));\n\n    insert_node (\u0026headNode, numToAdd);\n    printf(\"Current list after your inserted node: \\n\");\n    print_list(headNode);\n  }\n\n  return 0;\n}\n\nvoid print_list (struct Node *head) {\n  struct node* currentNode = head;\n\n  /* Iterate through each link. */\n  while (currentNode != NULL) {\n      printf(\"Value: %d\\n\", currentNode-\u003edata);\n      currentNode = currentNode -\u003e next;\n  }\n}\n\nvoid insert_node (struct Node **head, int nodeValue) {\n  struct Node *currentNode = malloc(sizeof *currentNode);\n  currentNode-\u003edata = nodeValue;\n  currentNode-\u003enext = (*head);\n\n  *head = currentNode;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935851514,
        "id": "b9bdb10e-150b-4711-b480-781719c451e2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935851514,
        "parent_id": "326b9692-7f7f-4063-8f67-0a6125b785ab",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Explanation for the Insertion of Nodes"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Explanation for the Insertion of Nodes"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935851514,
        "id": "358d5414-005f-48a6-809c-f945f7bdacde",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935851514,
        "parent_id": "326b9692-7f7f-4063-8f67-0a6125b785ab",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In order to understand how we add nodes at the beginning, let’s take a look at possible scenarios:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In order to understand how we add nodes at the beginning, let’s take a look at possible scenarios:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935851515,
        "id": "179c7eb5-f04e-44b2-86e3-a06c7996be4c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935851515,
        "parent_id": "326b9692-7f7f-4063-8f67-0a6125b785ab",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The list is empty, so we need to add a new node. In which case, our memory looks like this where "
            ],
            [
              "HEAD",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is a pointer to the first node:"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "The list is empty, so we need to add a new node. In which case, our memory looks like this where "
          },
          {
            "Text": "HEAD",
            "AttrFlags": 2
          },
          {
            "Text": " is a pointer to the first node:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935851515,
        "id": "4b7c045b-9ecd-4604-bf8b-bd6f420553a3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935851515,
        "parent_id": "326b9692-7f7f-4063-8f67-0a6125b785ab",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "HEAD | –\u003e NULL"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "HEAD | –\u003e NULL"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935851516,
        "id": "f71d3d6f-37fb-4740-8c0b-033841f2075c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935851516,
        "parent_id": "326b9692-7f7f-4063-8f67-0a6125b785ab",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The line "
            ],
            [
              "currentNode-\u003enext = *headNode;",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will assign the value of "
            ],
            [
              "currentNode-\u003enext",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to be "
            ],
            [
              "NULL",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " since "
            ],
            [
              "headNode",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " originally starts out at a value of "
            ],
            [
              "NULL",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The line "
          },
          {
            "Text": "currentNode-\u003enext = *headNode;",
            "AttrFlags": 2
          },
          {
            "Text": " will assign the value of "
          },
          {
            "Text": "currentNode-\u003enext",
            "AttrFlags": 2
          },
          {
            "Text": " to be "
          },
          {
            "Text": "NULL",
            "AttrFlags": 2
          },
          {
            "Text": " since "
          },
          {
            "Text": "headNode",
            "AttrFlags": 2
          },
          {
            "Text": " originally starts out at a value of "
          },
          {
            "Text": "NULL",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935851516,
        "id": "8c185193-c49c-470e-a638-9204d0f05070",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935851516,
        "parent_id": "326b9692-7f7f-4063-8f67-0a6125b785ab",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Now, we want to set our head node pointer to point to our current node."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Now, we want to set our head node pointer to point to our current node."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935851516,
        "id": "a8131567-9562-44b0-8c15-c4462362f6fa",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935851516,
        "parent_id": "326b9692-7f7f-4063-8f67-0a6125b785ab",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "-----      -------------\n|HEAD | --\u003e |CURRENTNODE| --\u003e NULL /* The head node points to the current node */\n-----      -------------"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "-----      -------------\n|HEAD | --\u003e |CURRENTNODE| --\u003e NULL /* The head node points to the current node */\n-----      -------------",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935851516,
        "id": "e0a88a92-b7bd-4f25-a9f3-1b9d5c43eb4c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935851516,
        "parent_id": "326b9692-7f7f-4063-8f67-0a6125b785ab",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This is done with "
            ],
            [
              "*headNode = currentNode;",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This is done with "
          },
          {
            "Text": "*headNode = currentNode;",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935851516,
        "id": "9c07c1fd-bc72-4d63-8100-156c17d6277a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935851516,
        "parent_id": "326b9692-7f7f-4063-8f67-0a6125b785ab",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The list is already populated; we need to add a new node to the beginning. For the sake of simplicity, let’s start out with 1 node:"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "The list is already populated; we need to add a new node to the beginning. For the sake of simplicity, let’s start out with 1 node:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935851516,
        "id": "b8379bd8-4254-44b8-ae15-ed65a0449296",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935851516,
        "parent_id": "326b9692-7f7f-4063-8f67-0a6125b785ab",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "-----    -----------\nHEAD --\u003e FIRST NODE --\u003e NULL\n-----    -----------"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "-----    -----------\nHEAD --\u003e FIRST NODE --\u003e NULL\n-----    -----------",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935851517,
        "id": "04285fbb-0f08-4eee-bf77-cf14c3723d8e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935851517,
        "parent_id": "326b9692-7f7f-4063-8f67-0a6125b785ab",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "With "
            ],
            [
              "currentNode-\u003enext = *headNode",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", the data structure looks like this:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "With "
          },
          {
            "Text": "currentNode-\u003enext = *headNode",
            "AttrFlags": 2
          },
          {
            "Text": ", the data structure looks like this:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935851517,
        "id": "c99374f6-fe86-4b8d-af5d-e9e4ddc5298f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935851517,
        "parent_id": "326b9692-7f7f-4063-8f67-0a6125b785ab",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "---------        -----    ---------------------\ncurrentNode --\u003e  HEAD --\u003e POINTER TO FIRST NODE --\u003e NULL\n---------        -----    ---------------------"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "---------        -----    ---------------------\ncurrentNode --\u003e  HEAD --\u003e POINTER TO FIRST NODE --\u003e NULL\n---------        -----    ---------------------",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935851517,
        "id": "e9a2c82b-a57c-4891-b42a-9757ea5db531",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935851517,
        "parent_id": "326b9692-7f7f-4063-8f67-0a6125b785ab",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Which, obviously needs to be altered since "
            ],
            [
              "*headNode",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " should point to "
            ],
            [
              "currentNode",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Which, obviously needs to be altered since "
          },
          {
            "Text": "*headNode",
            "AttrFlags": 2
          },
          {
            "Text": " should point to "
          },
          {
            "Text": "currentNode",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935851517,
        "id": "ba2d15ff-749f-4589-a1e1-7764a32970f2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935851517,
        "parent_id": "326b9692-7f7f-4063-8f67-0a6125b785ab",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "----    -----------    ---------------\nHEAD -\u003e currentNode --\u003e     NODE       -\u003e NULL\n----    -----------    ---------------"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "----    -----------    ---------------\nHEAD -\u003e currentNode --\u003e     NODE       -\u003e NULL\n----    -----------    ---------------",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935851517,
        "id": "f4a9c619-4884-46a5-9baa-d45a021f636d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935851517,
        "parent_id": "326b9692-7f7f-4063-8f67-0a6125b785ab",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This is done with "
            ],
            [
              "*headNode = currentNode;",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This is done with "
          },
          {
            "Text": "*headNode = currentNode;",
            "AttrFlags": 2
          }
        ]
      }
    ],
    "title": "Inserting a node at the beginning of a singly linked list",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}