{
  "ID": "d733fce4-c4e1-4004-ab23-19f98ce5e19a",
  "Root": {
    "alive": true,
    "content": [
      "aecd204e-d9ba-449f-a50b-3f001cef2710",
      "468c3683-e907-4f52-8f2b-8ddd31ff0577",
      "d2974b01-844c-4957-b677-13e569689e97",
      "25a06737-5b16-41d7-a913-568bf21281a7",
      "55dab72d-2a19-483a-9978-2e0f767189e2",
      "2075830f-f65a-42c4-9c7c-447dbe7e586f",
      "36080f56-a426-4ed2-ad6f-bc87533824a3",
      "54319756-8a88-438d-a593-673c927020e8",
      "31377940-d942-4e22-8a9d-efe60289d39a",
      "8968635e-f2bf-444f-934b-554bd85d4540",
      "eb4c5dd1-c43a-42b7-9bf3-aae18225fa46",
      "48cb44a2-3d96-4518-917d-2c56eb0b9496",
      "8477befe-3f9e-4162-802a-aebf1e107613"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551936331483,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "d733fce4-c4e1-4004-ab23-19f98ce5e19a",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551936331483,
    "parent_id": "f3ac34eb-110d-486b-9e30-6bd30082bba0",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Comparsion strcmp strncmp strcasecmp strncasecmp"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936331478,
        "id": "aecd204e-d9ba-449f-a50b-3f001cef2710",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936331478,
        "parent_id": "d733fce4-c4e1-4004-ab23-19f98ce5e19a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "strcase*",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "-functions are not Standard C, but a POSIX extension."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "strcase*",
            "AttrFlags": 2
          },
          {
            "Text": "-functions are not Standard C, but a POSIX extension."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936331481,
        "id": "468c3683-e907-4f52-8f2b-8ddd31ff0577",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936331481,
        "parent_id": "d733fce4-c4e1-4004-ab23-19f98ce5e19a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "strcmp",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " function lexicographically compare two null-terminated character arrays. The functions return a negative value if the first argument appears before the second in lexicographical order, zero if they compare equal, or positive if the first argument appears after the second in lexicographical order."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "strcmp",
            "AttrFlags": 2
          },
          {
            "Text": " function lexicographically compare two null-terminated character arrays. The functions return a negative value if the first argument appears before the second in lexicographical order, zero if they compare equal, or positive if the first argument appears after the second in lexicographical order."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936331481,
        "id": "d2974b01-844c-4957-b677-13e569689e97",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936331481,
        "parent_id": "d733fce4-c4e1-4004-ab23-19f98ce5e19a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cstdio.h\u003e\n#include \u003cstring.h\u003e\n\nvoid compare(char const *lhs, char const *rhs)\n{\n    int result = strcmp(lhs, rhs); // compute comparison once\n    if (result \u003c 0) {\n        printf(\"%s comes before %s\\n\", lhs, rhs);\n    } else if (result == 0) {\n        printf(\"%s equals %s\\n\", lhs, rhs);\n    } else { // last case: result \u003e 0\n        printf(\"%s comes after %s\\n\", lhs, rhs);\n    }\n}\n\nint main(void)\n{\n    compare(\"BBB\", \"BBB\");\n    compare(\"BBB\", \"CCCCC\");\n    compare(\"BBB\", \"AAAAAA\");\n    return 0;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cstdio.h\u003e\n#include \u003cstring.h\u003e\n\nvoid compare(char const *lhs, char const *rhs)\n{\n    int result = strcmp(lhs, rhs); // compute comparison once\n    if (result \u003c 0) {\n        printf(\"%s comes before %s\\n\", lhs, rhs);\n    } else if (result == 0) {\n        printf(\"%s equals %s\\n\", lhs, rhs);\n    } else { // last case: result \u003e 0\n        printf(\"%s comes after %s\\n\", lhs, rhs);\n    }\n}\n\nint main(void)\n{\n    compare(\"BBB\", \"BBB\");\n    compare(\"BBB\", \"CCCCC\");\n    compare(\"BBB\", \"AAAAAA\");\n    return 0;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936331481,
        "id": "25a06737-5b16-41d7-a913-568bf21281a7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936331481,
        "parent_id": "d733fce4-c4e1-4004-ab23-19f98ce5e19a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Outputs:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Outputs:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936331482,
        "id": "55dab72d-2a19-483a-9978-2e0f767189e2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936331482,
        "parent_id": "d733fce4-c4e1-4004-ab23-19f98ce5e19a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "BBB equals BBB\nBBB comes before CCCCC\nBBB comes after AAAAAA"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "BBB equals BBB\nBBB comes before CCCCC\nBBB comes after AAAAAA",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936331482,
        "id": "2075830f-f65a-42c4-9c7c-447dbe7e586f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936331482,
        "parent_id": "d733fce4-c4e1-4004-ab23-19f98ce5e19a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As "
            ],
            [
              "strcmp",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "strcasecmp",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " function also compares lexicographically its arguments after translating each character to its lowercase correspondent:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "As "
          },
          {
            "Text": "strcmp",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "strcasecmp",
            "AttrFlags": 2
          },
          {
            "Text": " function also compares lexicographically its arguments after translating each character to its lowercase correspondent:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936331482,
        "id": "36080f56-a426-4ed2-ad6f-bc87533824a3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936331482,
        "parent_id": "d733fce4-c4e1-4004-ab23-19f98ce5e19a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cstdio.h\u003e\n#include \u003cstring.h\u003e\n\nvoid compare(char const *lhs, char const *rhs)\n{\n    int result = strcasecmp(lhs, rhs); // compute case-insensitive comparison once\n    if (result \u003c 0) {\n        printf(\"%s comes before %s\\n\", lhs, rhs);\n    } else if (result == 0) {\n        printf(\"%s equals %s\\n\", lhs, rhs);\n    } else { // last case: result \u003e 0\n        printf(\"%s comes after %s\\n\", lhs, rhs);\n    }\n}\n\nint main(void)\n{\n    compare(\"BBB\", \"bBB\");\n    compare(\"BBB\", \"ccCCC\");\n    compare(\"BBB\", \"aaaaaa\");\n    return 0;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cstdio.h\u003e\n#include \u003cstring.h\u003e\n\nvoid compare(char const *lhs, char const *rhs)\n{\n    int result = strcasecmp(lhs, rhs); // compute case-insensitive comparison once\n    if (result \u003c 0) {\n        printf(\"%s comes before %s\\n\", lhs, rhs);\n    } else if (result == 0) {\n        printf(\"%s equals %s\\n\", lhs, rhs);\n    } else { // last case: result \u003e 0\n        printf(\"%s comes after %s\\n\", lhs, rhs);\n    }\n}\n\nint main(void)\n{\n    compare(\"BBB\", \"bBB\");\n    compare(\"BBB\", \"ccCCC\");\n    compare(\"BBB\", \"aaaaaa\");\n    return 0;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936331482,
        "id": "54319756-8a88-438d-a593-673c927020e8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936331482,
        "parent_id": "d733fce4-c4e1-4004-ab23-19f98ce5e19a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Outputs:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Outputs:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936331482,
        "id": "31377940-d942-4e22-8a9d-efe60289d39a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936331482,
        "parent_id": "d733fce4-c4e1-4004-ab23-19f98ce5e19a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "BBB equals bBB\nBBB comes before ccCCC\nBBB comes after aaaaaa"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "BBB equals bBB\nBBB comes before ccCCC\nBBB comes after aaaaaa",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936331482,
        "id": "8968635e-f2bf-444f-934b-554bd85d4540",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936331482,
        "parent_id": "d733fce4-c4e1-4004-ab23-19f98ce5e19a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "strncmp",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "strncasecmp",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " compare at most n characters:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "strncmp",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "strncasecmp",
            "AttrFlags": 2
          },
          {
            "Text": " compare at most n characters:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936331482,
        "id": "eb4c5dd1-c43a-42b7-9bf3-aae18225fa46",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936331482,
        "parent_id": "d733fce4-c4e1-4004-ab23-19f98ce5e19a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cstdio.h\u003e\n#include \u003cstring.h\u003e\n\nvoid compare(char const *lhs, char const *rhs, int n)\n{\n    int result = strncmp(lhs, rhs, n); // compute comparison once\n    if (result \u003c 0) {\n        printf(\"%s comes before %s\\n\", lhs, rhs);\n    } else if (result == 0) {\n        printf(\"%s equals %s\\n\", lhs, rhs);\n    } else { // last case: result \u003e 0\n        printf(\"%s comes after %s\\n\", lhs, rhs);\n    }\n}\n\nint main(void)\n{\n    compare(\"BBB\", \"Bb\", 1);\n    compare(\"BBB\", \"Bb\", 2);\n    compare(\"BBB\", \"Bb\", 3);\n    return 0;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cstdio.h\u003e\n#include \u003cstring.h\u003e\n\nvoid compare(char const *lhs, char const *rhs, int n)\n{\n    int result = strncmp(lhs, rhs, n); // compute comparison once\n    if (result \u003c 0) {\n        printf(\"%s comes before %s\\n\", lhs, rhs);\n    } else if (result == 0) {\n        printf(\"%s equals %s\\n\", lhs, rhs);\n    } else { // last case: result \u003e 0\n        printf(\"%s comes after %s\\n\", lhs, rhs);\n    }\n}\n\nint main(void)\n{\n    compare(\"BBB\", \"Bb\", 1);\n    compare(\"BBB\", \"Bb\", 2);\n    compare(\"BBB\", \"Bb\", 3);\n    return 0;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936331482,
        "id": "48cb44a2-3d96-4518-917d-2c56eb0b9496",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936331482,
        "parent_id": "d733fce4-c4e1-4004-ab23-19f98ce5e19a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Outputs:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Outputs:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936331483,
        "id": "8477befe-3f9e-4162-802a-aebf1e107613",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936331483,
        "parent_id": "d733fce4-c4e1-4004-ab23-19f98ce5e19a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "BBB equals Bb\nBBB comes before Bb\nBBB comes before Bb"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "BBB equals Bb\nBBB comes before Bb\nBBB comes before Bb",
        "code_language": "Plain Text"
      }
    ],
    "title": "Comparsion strcmp strncmp strcasecmp strncasecmp",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}