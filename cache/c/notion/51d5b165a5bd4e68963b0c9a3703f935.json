{
  "ID": "51d5b165-a5bd-4e68-963b-0c9a3703f935",
  "Root": {
    "alive": true,
    "content": [
      "303a83d3-832b-4a9b-a63b-fb4f120ad489",
      "0ff13033-d397-4468-a5db-e7028aab9992",
      "1e9a30fe-a05b-466a-995c-ce1e9e03e572",
      "27d369f7-32da-437d-b09e-b48865c2b023",
      "eb85c65e-9b10-4009-a8fb-0cb166d6a701",
      "99abf0a3-3805-4fbb-9737-7acba3ed2347"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551936356176,
    "id": "51d5b165-a5bd-4e68-963b-0c9a3703f935",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551936356176,
    "parent_id": "ce0d7992-bb1e-4e62-ab26-2f99a9a2f78d",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "160 Comparing floating point numbers"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936356172,
        "id": "303a83d3-832b-4a9b-a63b-fb4f120ad489",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936356172,
        "parent_id": "51d5b165-a5bd-4e68-963b-0c9a3703f935",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Floating point types ("
            ],
            [
              "float",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "double",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "long double",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") cannot precisely represent some numbers because they have finite precision and represent the values in a binary format. Just like we have repeating decimals in base 10 for fractions such as 1/3, there are fractions that cannot be represented finitely in binary too (such as 1/3, but also, more importantly, 1/10). Do not directly compare floating point values; use a delta instead."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Floating point types ("
          },
          {
            "Text": "float",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "double",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "long double",
            "AttrFlags": 2
          },
          {
            "Text": ") cannot precisely represent some numbers because they have finite precision and represent the values in a binary format. Just like we have repeating decimals in base 10 for fractions such as 1/3, there are fractions that cannot be represented finitely in binary too (such as 1/3, but also, more importantly, 1/10). Do not directly compare floating point values; use a delta instead."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936356175,
        "id": "0ff13033-d397-4468-a5db-e7028aab9992",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936356175,
        "parent_id": "51d5b165-a5bd-4e68-963b-0c9a3703f935",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cfloat.h\u003e // for DBL_EPSILON and FLT_EPSILON\n#include \u003cmath.h\u003e  // for fabs()\n\nint main(void)\n{\n    double a = 0.1; // imprecise: (binary) 0.000110...\n\n    // may be false or true\n    if (a + a + a + a + a + a + a + a + a + a == 1.0) {\n        printf(\"10 * 0.1 is indeed 1.0. This is not guaranteed in the general case.\\n\");\n    }\n\n    // Using a small delta value.\n    if (fabs(a + a + a + a + a + a + a + a + a + a - 1.0) \u003c 0.000001) {\n        // C99 5.2.4.2.2p8 guarantees at least 10 decimal digits\n        // of precision for the double type.\n        printf(\"10 * 0.1 is almost 1.0.\\n\");\n    }\n\n    return 0;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cfloat.h\u003e // for DBL_EPSILON and FLT_EPSILON\n#include \u003cmath.h\u003e  // for fabs()\n\nint main(void)\n{\n    double a = 0.1; // imprecise: (binary) 0.000110...\n\n    // may be false or true\n    if (a + a + a + a + a + a + a + a + a + a == 1.0) {\n        printf(\"10 * 0.1 is indeed 1.0. This is not guaranteed in the general case.\\n\");\n    }\n\n    // Using a small delta value.\n    if (fabs(a + a + a + a + a + a + a + a + a + a - 1.0) \u003c 0.000001) {\n        // C99 5.2.4.2.2p8 guarantees at least 10 decimal digits\n        // of precision for the double type.\n        printf(\"10 * 0.1 is almost 1.0.\\n\");\n    }\n\n    return 0;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936356175,
        "id": "1e9a30fe-a05b-466a-995c-ce1e9e03e572",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936356175,
        "parent_id": "51d5b165-a5bd-4e68-963b-0c9a3703f935",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Another example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Another example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936356175,
        "id": "27d369f7-32da-437d-b09e-b48865c2b023",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936356175,
        "parent_id": "51d5b165-a5bd-4e68-963b-0c9a3703f935",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "gcc -O3   -g   -I./inc   -std=c11   -Wall -Wextra -Werror -Wmissing-prototypes -Wstrict-prototypes  -Wold-style-definition       rd11.c -o rd11 -L./lib -lsoq \n#include \u003cstdio.h\u003e\n#include \u003cmath.h\u003e\n\nstatic inline double rel_diff(double a, double b)\n{\n    return fabs(a - b) / fmax(fabs(a), fabs(b));\n}\n\nint main(void)\n{\n    double d1 = 3.14159265358979;\n    double d2 = 355.0 / 113.0;\n\n    double epsilon = 1.0;\n    for (int i = 0; i \u003c 10; i++)\n    {\n        if (rel_diff(d1, d2) \u003c epsilon)\n            printf(\"%d:%.10f \u003c=\u003e %.10f within tolerance %.10f (rel diff %.4E)\\n\",\n                   i, d1, d2, epsilon, rel_diff(d1, d2));\n        else\n            printf(\"%d:%.10f \u003c=\u003e %.10f out of tolerance %.10f (rel diff %.4E)\\n\",\n                   i, d1, d2, epsilon, rel_diff(d1, d2));\n        epsilon /= 10.0;\n    }\n    return 0;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "gcc -O3   -g   -I./inc   -std=c11   -Wall -Wextra -Werror -Wmissing-prototypes -Wstrict-prototypes  -Wold-style-definition       rd11.c -o rd11 -L./lib -lsoq \n#include \u003cstdio.h\u003e\n#include \u003cmath.h\u003e\n\nstatic inline double rel_diff(double a, double b)\n{\n    return fabs(a - b) / fmax(fabs(a), fabs(b));\n}\n\nint main(void)\n{\n    double d1 = 3.14159265358979;\n    double d2 = 355.0 / 113.0;\n\n    double epsilon = 1.0;\n    for (int i = 0; i \u003c 10; i++)\n    {\n        if (rel_diff(d1, d2) \u003c epsilon)\n            printf(\"%d:%.10f \u003c=\u003e %.10f within tolerance %.10f (rel diff %.4E)\\n\",\n                   i, d1, d2, epsilon, rel_diff(d1, d2));\n        else\n            printf(\"%d:%.10f \u003c=\u003e %.10f out of tolerance %.10f (rel diff %.4E)\\n\",\n                   i, d1, d2, epsilon, rel_diff(d1, d2));\n        epsilon /= 10.0;\n    }\n    return 0;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936356176,
        "id": "eb85c65e-9b10-4009-a8fb-0cb166d6a701",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936356176,
        "parent_id": "51d5b165-a5bd-4e68-963b-0c9a3703f935",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Output:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Output:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936356176,
        "id": "99abf0a3-3805-4fbb-9737-7acba3ed2347",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936356176,
        "parent_id": "51d5b165-a5bd-4e68-963b-0c9a3703f935",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "0:3.1415926536 \u003c=\u003e 3.1415929204 within tolerance 1.0000000000 (rel diff 8.4914E-08)\n1:3.1415926536 \u003c=\u003e 3.1415929204 within tolerance 0.1000000000 (rel diff 8.4914E-08)\n2:3.1415926536 \u003c=\u003e 3.1415929204 within tolerance 0.0100000000 (rel diff 8.4914E-08)\n3:3.1415926536 \u003c=\u003e 3.1415929204 within tolerance 0.0010000000 (rel diff 8.4914E-08)\n4:3.1415926536 \u003c=\u003e 3.1415929204 within tolerance 0.0001000000 (rel diff 8.4914E-08)\n5:3.1415926536 \u003c=\u003e 3.1415929204 within tolerance 0.0000100000 (rel diff 8.4914E-08)\n6:3.1415926536 \u003c=\u003e 3.1415929204 within tolerance 0.0000010000 (rel diff 8.4914E-08)\n7:3.1415926536 \u003c=\u003e 3.1415929204 within tolerance 0.0000001000 (rel diff 8.4914E-08)\n8:3.1415926536 \u003c=\u003e 3.1415929204 out of tolerance 0.0000000100 (rel diff 8.4914E-08)\n9:3.1415926536 \u003c=\u003e 3.1415929204 out of tolerance 0.0000000010 (rel diff 8.4914E-08)"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "0:3.1415926536 \u003c=\u003e 3.1415929204 within tolerance 1.0000000000 (rel diff 8.4914E-08)\n1:3.1415926536 \u003c=\u003e 3.1415929204 within tolerance 0.1000000000 (rel diff 8.4914E-08)\n2:3.1415926536 \u003c=\u003e 3.1415929204 within tolerance 0.0100000000 (rel diff 8.4914E-08)\n3:3.1415926536 \u003c=\u003e 3.1415929204 within tolerance 0.0010000000 (rel diff 8.4914E-08)\n4:3.1415926536 \u003c=\u003e 3.1415929204 within tolerance 0.0001000000 (rel diff 8.4914E-08)\n5:3.1415926536 \u003c=\u003e 3.1415929204 within tolerance 0.0000100000 (rel diff 8.4914E-08)\n6:3.1415926536 \u003c=\u003e 3.1415929204 within tolerance 0.0000010000 (rel diff 8.4914E-08)\n7:3.1415926536 \u003c=\u003e 3.1415929204 within tolerance 0.0000001000 (rel diff 8.4914E-08)\n8:3.1415926536 \u003c=\u003e 3.1415929204 out of tolerance 0.0000000100 (rel diff 8.4914E-08)\n9:3.1415926536 \u003c=\u003e 3.1415929204 out of tolerance 0.0000000010 (rel diff 8.4914E-08)",
        "code_language": "Plain Text"
      }
    ],
    "title": "160 Comparing floating point numbers"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}