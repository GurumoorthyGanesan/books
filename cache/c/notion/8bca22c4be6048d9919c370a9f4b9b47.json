{
  "ID": "8bca22c4-be60-48d9-919c-370a9f4b9b47",
  "Root": {
    "alive": true,
    "content": [
      "8d2fd8f0-f3f6-477c-a27e-d7be9f045de0",
      "6c4e21e7-cb0e-4e2b-9250-096f7ef477f6",
      "942a3c3d-0515-490f-8664-140ef95460da",
      "9331266e-5c2c-4f9e-90ea-e11c5c1176d6",
      "96ca1b32-250e-4a23-9f91-dbc95c63dcd8",
      "d6b1c112-7e89-4ec5-bb31-e190ef9ac874",
      "1b88a5a3-f8d4-40a7-a106-24a9070561b9",
      "7a7499b7-ad24-4980-bacf-bc38617554b1",
      "806a8269-485b-499a-afca-421644d3f840",
      "e278db10-1c53-4958-838c-a6df60095a0c",
      "456eb5b6-7d84-48c4-b20c-79739ee99acc",
      "7aba965b-cb79-4888-b227-246e3a8557ba",
      "9055dc4b-b334-4f99-8b72-d5aa2c5aad1b",
      "12b0b305-ec05-440d-8833-888396b21c5e",
      "da429473-5913-4149-9b17-00e2b6a82eff"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551936342427,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "8bca22c4-be60-48d9-919c-370a9f4b9b47",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551936342427,
    "parent_id": "ce0d7992-bb1e-4e62-ab26-2f99a9a2f78d",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Misunderstanding array decay"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936342421,
        "id": "8d2fd8f0-f3f6-477c-a27e-d7be9f045de0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936342421,
        "parent_id": "8bca22c4-be60-48d9-919c-370a9f4b9b47",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A common problem in code that uses multidimensional arrays, arrays of pointers, etc. is the fact that "
            ],
            [
              "Type**",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "Type[M][N]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " are fundamentally different types:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A common problem in code that uses multidimensional arrays, arrays of pointers, etc. is the fact that "
          },
          {
            "Text": "Type**",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "Type[M][N]",
            "AttrFlags": 2
          },
          {
            "Text": " are fundamentally different types:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936342424,
        "id": "6c4e21e7-cb0e-4e2b-9250-096f7ef477f6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936342424,
        "parent_id": "8bca22c4-be60-48d9-919c-370a9f4b9b47",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cstdio.h\u003e\n\nvoid print_strings(char **strings, size_t n)\n{\n    size_t i;\n    for (i = 0; i \u003c n; i++)\n        puts(strings[i]);\n}\n\nint main(void)\n{\n    char s[4][20] = {\"Example 1\", \"Example 2\", \"Example 3\", \"Example 4\"};\n    print_strings(s, 4);\n    return 0;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cstdio.h\u003e\n\nvoid print_strings(char **strings, size_t n)\n{\n    size_t i;\n    for (i = 0; i \u003c n; i++)\n        puts(strings[i]);\n}\n\nint main(void)\n{\n    char s[4][20] = {\"Example 1\", \"Example 2\", \"Example 3\", \"Example 4\"};\n    print_strings(s, 4);\n    return 0;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936342424,
        "id": "942a3c3d-0515-490f-8664-140ef95460da",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936342424,
        "parent_id": "8bca22c4-be60-48d9-919c-370a9f4b9b47",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Sample compiler output:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Sample compiler output:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936342424,
        "id": "9331266e-5c2c-4f9e-90ea-e11c5c1176d6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936342424,
        "parent_id": "8bca22c4-be60-48d9-919c-370a9f4b9b47",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "file1.c: In function 'main':\nfile1.c:13:23: error: passing argument 1 of 'print_strings' from incompatible pointer type [-Wincompatible-pointer-types]\n         print_strings(strings, 4);\n                       ^\nfile1.c:3:10: note: expected 'char **' but argument is of type 'char (*)[20]'\n     void print_strings(char **strings, size_t n)"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "file1.c: In function 'main':\nfile1.c:13:23: error: passing argument 1 of 'print_strings' from incompatible pointer type [-Wincompatible-pointer-types]\n         print_strings(strings, 4);\n                       ^\nfile1.c:3:10: note: expected 'char **' but argument is of type 'char (*)[20]'\n     void print_strings(char **strings, size_t n)",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936342424,
        "id": "96ca1b32-250e-4a23-9f91-dbc95c63dcd8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936342424,
        "parent_id": "8bca22c4-be60-48d9-919c-370a9f4b9b47",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The error states that the "
            ],
            [
              "s",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " array in the "
            ],
            [
              "main",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " function is passed to the function "
            ],
            [
              "print_strings",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", which expects a different pointer type than it received. It also includes a note expressing the type that is expected by "
            ],
            [
              "print_strings",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and the type that was passed to it from "
            ],
            [
              "main",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The error states that the "
          },
          {
            "Text": "s",
            "AttrFlags": 2
          },
          {
            "Text": " array in the "
          },
          {
            "Text": "main",
            "AttrFlags": 2
          },
          {
            "Text": " function is passed to the function "
          },
          {
            "Text": "print_strings",
            "AttrFlags": 2
          },
          {
            "Text": ", which expects a different pointer type than it received. It also includes a note expressing the type that is expected by "
          },
          {
            "Text": "print_strings",
            "AttrFlags": 2
          },
          {
            "Text": " and the type that was passed to it from "
          },
          {
            "Text": "main",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936342425,
        "id": "d6b1c112-7e89-4ec5-bb31-e190ef9ac874",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936342425,
        "parent_id": "8bca22c4-be60-48d9-919c-370a9f4b9b47",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The problem is due to something called "
            ],
            [
              "array decay",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ". What happens when "
            ],
            [
              "s",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " with its type "
            ],
            [
              "char[4][20]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (array of 4 arrays of 20 chars) is passed to the function is it turns into a pointer to its first element as if you had written "
            ],
            [
              "\u0026s[0]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", which has the type "
            ],
            [
              "char (*)[20]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (pointer to 1 array of 20 chars). This occurs for any array, including an array of pointers, an array of arrays of arrays (3-D arrays), and an array of pointers to an array. Below is a table illustrating what happens when an array decays. Changes in the type description are highlighted to illustrate what happens:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The problem is due to something called "
          },
          {
            "Text": "array decay",
            "AttrFlags": 4
          },
          {
            "Text": ". What happens when "
          },
          {
            "Text": "s",
            "AttrFlags": 2
          },
          {
            "Text": " with its type "
          },
          {
            "Text": "char[4][20]",
            "AttrFlags": 2
          },
          {
            "Text": " (array of 4 arrays of 20 chars) is passed to the function is it turns into a pointer to its first element as if you had written "
          },
          {
            "Text": "\u0026s[0]",
            "AttrFlags": 2
          },
          {
            "Text": ", which has the type "
          },
          {
            "Text": "char (*)[20]",
            "AttrFlags": 2
          },
          {
            "Text": " (pointer to 1 array of 20 chars). This occurs for any array, including an array of pointers, an array of arrays of arrays (3-D arrays), and an array of pointers to an array. Below is a table illustrating what happens when an array decays. Changes in the type description are highlighted to illustrate what happens:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936342426,
        "id": "1b88a5a3-f8d4-40a7-a106-24a9070561b9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936342426,
        "parent_id": "8bca22c4-be60-48d9-919c-370a9f4b9b47",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Before Decay | | After Decay | |\n—————– | ———————————————— | —————– | ––––––––––––––––––––––––– |"
            ],
            [
              "char [20]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | "
            ],
            [
              "array of (20 chars)",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " | "
            ],
            [
              "char *",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | "
            ],
            [
              "pointer to (1 char)",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " |"
            ],
            [
              "char [4][20]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | "
            ],
            [
              "array of (4 arrays",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " of 20 chars) | "
            ],
            [
              "char (*)[20]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | "
            ],
            [
              "pointer to (1 array",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " of 20 chars) |"
            ],
            [
              "char *[4]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | "
            ],
            [
              "array of (4 pointers",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " to 1 char) | "
            ],
            [
              "char **",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | "
            ],
            [
              "pointer to (1 pointer",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " to 1 char) |"
            ],
            [
              "char [3][4][20]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | "
            ],
            [
              "array of (3 arrays",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " of 4 arrays of 20 chars) | "
            ],
            [
              "char (*)[4][20]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | "
            ],
            [
              "pointer to (1 array",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " of 4 arrays of 20 chars) |"
            ],
            [
              "char (*[4])[20]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | "
            ],
            [
              "array of (4 pointers",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " to 1 array of 20 chars) | "
            ],
            [
              "char (**)[20]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | "
            ],
            [
              "pointer to (1 pointer",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " to 1 array of 20 chars) |"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Before Decay | | After Decay | |\n—————– | ———————————————— | —————– | ––––––––––––––––––––––––– |"
          },
          {
            "Text": "char [20]",
            "AttrFlags": 2
          },
          {
            "Text": " | "
          },
          {
            "Text": "array of (20 chars)",
            "AttrFlags": 1
          },
          {
            "Text": " | "
          },
          {
            "Text": "char *",
            "AttrFlags": 2
          },
          {
            "Text": " | "
          },
          {
            "Text": "pointer to (1 char)",
            "AttrFlags": 1
          },
          {
            "Text": " |"
          },
          {
            "Text": "char [4][20]",
            "AttrFlags": 2
          },
          {
            "Text": " | "
          },
          {
            "Text": "array of (4 arrays",
            "AttrFlags": 1
          },
          {
            "Text": " of 20 chars) | "
          },
          {
            "Text": "char (*)[20]",
            "AttrFlags": 2
          },
          {
            "Text": " | "
          },
          {
            "Text": "pointer to (1 array",
            "AttrFlags": 1
          },
          {
            "Text": " of 20 chars) |"
          },
          {
            "Text": "char *[4]",
            "AttrFlags": 2
          },
          {
            "Text": " | "
          },
          {
            "Text": "array of (4 pointers",
            "AttrFlags": 1
          },
          {
            "Text": " to 1 char) | "
          },
          {
            "Text": "char **",
            "AttrFlags": 2
          },
          {
            "Text": " | "
          },
          {
            "Text": "pointer to (1 pointer",
            "AttrFlags": 1
          },
          {
            "Text": " to 1 char) |"
          },
          {
            "Text": "char [3][4][20]",
            "AttrFlags": 2
          },
          {
            "Text": " | "
          },
          {
            "Text": "array of (3 arrays",
            "AttrFlags": 1
          },
          {
            "Text": " of 4 arrays of 20 chars) | "
          },
          {
            "Text": "char (*)[4][20]",
            "AttrFlags": 2
          },
          {
            "Text": " | "
          },
          {
            "Text": "pointer to (1 array",
            "AttrFlags": 1
          },
          {
            "Text": " of 4 arrays of 20 chars) |"
          },
          {
            "Text": "char (*[4])[20]",
            "AttrFlags": 2
          },
          {
            "Text": " | "
          },
          {
            "Text": "array of (4 pointers",
            "AttrFlags": 1
          },
          {
            "Text": " to 1 array of 20 chars) | "
          },
          {
            "Text": "char (**)[20]",
            "AttrFlags": 2
          },
          {
            "Text": " | "
          },
          {
            "Text": "pointer to (1 pointer",
            "AttrFlags": 1
          },
          {
            "Text": " to 1 array of 20 chars) |"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936342426,
        "id": "7a7499b7-ad24-4980-bacf-bc38617554b1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936342426,
        "parent_id": "8bca22c4-be60-48d9-919c-370a9f4b9b47",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If an array can decay to a pointer, then it can be said that a pointer may be considered an array of at least 1 element. An exception to this is a null pointer, which points to nothing and is consequently not an array."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If an array can decay to a pointer, then it can be said that a pointer may be considered an array of at least 1 element. An exception to this is a null pointer, which points to nothing and is consequently not an array."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936342426,
        "id": "806a8269-485b-499a-afca-421644d3f840",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936342426,
        "parent_id": "8bca22c4-be60-48d9-919c-370a9f4b9b47",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Array decay only happens once. If an array has decayed to a pointer, it is now a pointer, not an array. Even if you have a pointer to an array, remember that the pointer might be considered an array of at least one element, so array decay has already occurred."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Array decay only happens once. If an array has decayed to a pointer, it is now a pointer, not an array. Even if you have a pointer to an array, remember that the pointer might be considered an array of at least one element, so array decay has already occurred."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936342427,
        "id": "e278db10-1c53-4958-838c-a6df60095a0c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936342427,
        "parent_id": "8bca22c4-be60-48d9-919c-370a9f4b9b47",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In other words, a pointer to an array ("
            ],
            [
              "char (*)[20]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") will never become a pointer to a pointer ("
            ],
            [
              "char **",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "). To fix the "
            ],
            [
              "print_strings",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " function, simply make it receive the correct type:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In other words, a pointer to an array ("
          },
          {
            "Text": "char (*)[20]",
            "AttrFlags": 2
          },
          {
            "Text": ") will never become a pointer to a pointer ("
          },
          {
            "Text": "char **",
            "AttrFlags": 2
          },
          {
            "Text": "). To fix the "
          },
          {
            "Text": "print_strings",
            "AttrFlags": 2
          },
          {
            "Text": " function, simply make it receive the correct type:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936342427,
        "id": "456eb5b6-7d84-48c4-b20c-79739ee99acc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936342427,
        "parent_id": "8bca22c4-be60-48d9-919c-370a9f4b9b47",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "void print_strings(char (*strings)[20], size_t n)\n/* OR */\nvoid print_strings(char strings[][20], size_t n)"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "void print_strings(char (*strings)[20], size_t n)\n/* OR */\nvoid print_strings(char strings[][20], size_t n)",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936342427,
        "id": "7aba965b-cb79-4888-b227-246e3a8557ba",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936342427,
        "parent_id": "8bca22c4-be60-48d9-919c-370a9f4b9b47",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A problem arises when you want the "
            ],
            [
              "print_strings",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " function to be generic for any array of chars: what if there are 30 chars instead of 20? Or 50? The answer is to add another parameter before the array parameter:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A problem arises when you want the "
          },
          {
            "Text": "print_strings",
            "AttrFlags": 2
          },
          {
            "Text": " function to be generic for any array of chars: what if there are 30 chars instead of 20? Or 50? The answer is to add another parameter before the array parameter:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936342427,
        "id": "9055dc4b-b334-4f99-8b72-d5aa2c5aad1b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936342427,
        "parent_id": "8bca22c4-be60-48d9-919c-370a9f4b9b47",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cstdio.h\u003e\n\n/*\n * Note the rearranged parameters and the change in the parameter name\n * from the previous definitions:\n *      n (number of strings)\n *   =\u003e scount (string count)\n *\n * Of course, you could also use one of the following highly recommended forms\n * for the `strings` parameter instead:\n *\n *    char strings[scount][ccount]\n *    char strings[][ccount]\n */\nvoid print_strings(size_t scount, size_t ccount, char (*strings)[ccount])\n{\n    size_t i;\n    for (i = 0; i \u003c scount; i++)\n        puts(strings[i]);\n}\n\nint main(void)\n{\n    char s[4][20] = {\"Example 1\", \"Example 2\", \"Example 3\", \"Example 4\"};\n    print_strings(4, 20, s);\n    return 0;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cstdio.h\u003e\n\n/*\n * Note the rearranged parameters and the change in the parameter name\n * from the previous definitions:\n *      n (number of strings)\n *   =\u003e scount (string count)\n *\n * Of course, you could also use one of the following highly recommended forms\n * for the `strings` parameter instead:\n *\n *    char strings[scount][ccount]\n *    char strings[][ccount]\n */\nvoid print_strings(size_t scount, size_t ccount, char (*strings)[ccount])\n{\n    size_t i;\n    for (i = 0; i \u003c scount; i++)\n        puts(strings[i]);\n}\n\nint main(void)\n{\n    char s[4][20] = {\"Example 1\", \"Example 2\", \"Example 3\", \"Example 4\"};\n    print_strings(4, 20, s);\n    return 0;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936342427,
        "id": "12b0b305-ec05-440d-8833-888396b21c5e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936342427,
        "parent_id": "8bca22c4-be60-48d9-919c-370a9f4b9b47",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Compiling it produces no errors and results in the expected output:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Compiling it produces no errors and results in the expected output:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936342427,
        "id": "da429473-5913-4149-9b17-00e2b6a82eff",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936342427,
        "parent_id": "8bca22c4-be60-48d9-919c-370a9f4b9b47",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Example 1\nExample 2\nExample 3\nExample 4"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Example 1\nExample 2\nExample 3\nExample 4",
        "code_language": "Plain Text"
      }
    ],
    "title": "Misunderstanding array decay",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}