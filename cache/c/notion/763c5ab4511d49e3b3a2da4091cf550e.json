{
  "ID": "763c5ab4-511d-49e3-b3a2-da4091cf550e",
  "Root": {
    "alive": true,
    "content": [
      "815cc2e0-03fa-42d8-8b83-f8d26fc4a1c2",
      "4d8f807e-fb08-460f-8434-898ab00d5695",
      "c208086f-8c28-40fa-8078-89c8b537ddf0",
      "8fa5900a-7f7c-4fcd-8e45-249bbdb2b54b",
      "75b3df10-095c-4e38-bdd0-fee840e6e93b",
      "642b3c4f-9e30-4aa8-8396-13d7811a039a",
      "46e20c10-ab13-4eca-984d-53fa474e8076",
      "29077177-7d96-48eb-b0ba-5e381b105de6",
      "e1cf2762-e0a4-4358-bb6a-7799119f196e",
      "fa71dbc3-58a5-4322-99b1-36f41e55790b",
      "4ce227ed-c5ed-455b-b127-40ba3359c369",
      "5b2ea38f-eb7d-4834-a873-53f119787cf5",
      "079c5ab4-b05c-4e58-be30-e95cbdfc447b",
      "e66434cb-b06a-4550-8aa0-2a23f2523c11",
      "309e2200-7005-4dc5-9f51-15aafa4384f8",
      "6c390f6b-aba5-48b7-b769-578f259d1bfb",
      "7ef92e2e-3013-4aac-a2e6-3d00eff8165d",
      "71e4cdf4-9f42-4561-af1c-35d1a6950b55",
      "5d893f8c-dce4-4251-9f36-b34701d147f9",
      "89543069-a5fb-4242-99ee-cc9988a0f69f",
      "662c2961-e035-4fa4-90bf-8b1de50f713b",
      "91ebd7c8-d79e-4ffc-9b4e-58dc62ee4704",
      "d186b2da-fdeb-44f9-9e3e-336213441dc8",
      "cfcc19e3-535f-4c3f-bf3d-83e07f3c778f",
      "28effc76-1732-4d46-8716-67033bd1fecb"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551936616775,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "763c5ab4-511d-49e3-b3a2-da4091cf550e",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551936616775,
    "parent_id": "218166d2-ae4c-4856-827d-6080353375ec",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "switch Statements"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936616764,
        "id": "815cc2e0-03fa-42d8-8b83-f8d26fc4a1c2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936616764,
        "parent_id": "763c5ab4-511d-49e3-b3a2-da4091cf550e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "switch",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " statements are useful when you want to have your program do many different things according to the value of a particular test variable."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "switch",
            "AttrFlags": 2
          },
          {
            "Text": " statements are useful when you want to have your program do many different things according to the value of a particular test variable."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936616767,
        "id": "4d8f807e-fb08-460f-8434-898ab00d5695",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936616767,
        "parent_id": "763c5ab4-511d-49e3-b3a2-da4091cf550e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "An example usage of "
            ],
            [
              "switch",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " statement is like this:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "An example usage of "
          },
          {
            "Text": "switch",
            "AttrFlags": 2
          },
          {
            "Text": " statement is like this:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936616767,
        "id": "c208086f-8c28-40fa-8078-89c8b537ddf0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936616767,
        "parent_id": "763c5ab4-511d-49e3-b3a2-da4091cf550e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int a = 1;\n\nswitch (a) {\ncase 1:\n    puts(\"a is 1\");\n    break;\ncase 2:\n    puts(\"a is 2\");\n    break;\ndefault:\n    puts(\"a is neither 1 nor 2\");\n    break;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int a = 1;\n\nswitch (a) {\ncase 1:\n    puts(\"a is 1\");\n    break;\ncase 2:\n    puts(\"a is 2\");\n    break;\ndefault:\n    puts(\"a is neither 1 nor 2\");\n    break;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936616767,
        "id": "8fa5900a-7f7c-4fcd-8e45-249bbdb2b54b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936616767,
        "parent_id": "763c5ab4-511d-49e3-b3a2-da4091cf550e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This example is equivalent to"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This example is equivalent to"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936616767,
        "id": "75b3df10-095c-4e38-bdd0-fee840e6e93b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936616767,
        "parent_id": "763c5ab4-511d-49e3-b3a2-da4091cf550e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int a = 1;\n\nif (a == 1) {\n    puts(\"a is 1\");\n} else if (a == 2) {\n    puts(\"a is 2\");\n} else {\n    puts(\"a is neither 1 nor 2\");\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int a = 1;\n\nif (a == 1) {\n    puts(\"a is 1\");\n} else if (a == 2) {\n    puts(\"a is 2\");\n} else {\n    puts(\"a is neither 1 nor 2\");\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936616768,
        "id": "642b3c4f-9e30-4aa8-8396-13d7811a039a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936616768,
        "parent_id": "763c5ab4-511d-49e3-b3a2-da4091cf550e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If the value of "
            ],
            [
              "a",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is 1 when the "
            ],
            [
              "switch",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " statement is used, "
            ],
            [
              "a is 1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will be printed. If the value of "
            ],
            [
              "a",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is 2 then, "
            ],
            [
              "a is 2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will be printed. Otherwise, "
            ],
            [
              "a is neither 1 nor 2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will be printed."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If the value of "
          },
          {
            "Text": "a",
            "AttrFlags": 2
          },
          {
            "Text": " is 1 when the "
          },
          {
            "Text": "switch",
            "AttrFlags": 2
          },
          {
            "Text": " statement is used, "
          },
          {
            "Text": "a is 1",
            "AttrFlags": 2
          },
          {
            "Text": " will be printed. If the value of "
          },
          {
            "Text": "a",
            "AttrFlags": 2
          },
          {
            "Text": " is 2 then, "
          },
          {
            "Text": "a is 2",
            "AttrFlags": 2
          },
          {
            "Text": " will be printed. Otherwise, "
          },
          {
            "Text": "a is neither 1 nor 2",
            "AttrFlags": 2
          },
          {
            "Text": " will be printed."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936616768,
        "id": "46e20c10-ab13-4eca-984d-53fa474e8076",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936616768,
        "parent_id": "763c5ab4-511d-49e3-b3a2-da4091cf550e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "case n:",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is used to describe where the execution flow will jump in when the value passed to "
            ],
            [
              "switch",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " statement is "
            ],
            [
              "n",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ". "
            ],
            [
              "n",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " must be compile-time constant and the same "
            ],
            [
              "n",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " can exist at most once in one "
            ],
            [
              "switch",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " statement."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "case n:",
            "AttrFlags": 2
          },
          {
            "Text": " is used to describe where the execution flow will jump in when the value passed to "
          },
          {
            "Text": "switch",
            "AttrFlags": 2
          },
          {
            "Text": " statement is "
          },
          {
            "Text": "n",
            "AttrFlags": 4
          },
          {
            "Text": ". "
          },
          {
            "Text": "n",
            "AttrFlags": 4
          },
          {
            "Text": " must be compile-time constant and the same "
          },
          {
            "Text": "n",
            "AttrFlags": 4
          },
          {
            "Text": " can exist at most once in one "
          },
          {
            "Text": "switch",
            "AttrFlags": 2
          },
          {
            "Text": " statement."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936616768,
        "id": "29077177-7d96-48eb-b0ba-5e381b105de6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936616768,
        "parent_id": "763c5ab4-511d-49e3-b3a2-da4091cf550e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "default:",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is used to describe that when the value didn’t match any of the choices for "
            ],
            [
              "case n:",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". It is a good practice to include a "
            ],
            [
              "default",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " case in every switch statement to catch unexpected behavior."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "default:",
            "AttrFlags": 2
          },
          {
            "Text": " is used to describe that when the value didn’t match any of the choices for "
          },
          {
            "Text": "case n:",
            "AttrFlags": 2
          },
          {
            "Text": ". It is a good practice to include a "
          },
          {
            "Text": "default",
            "AttrFlags": 2
          },
          {
            "Text": " case in every switch statement to catch unexpected behavior."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936616770,
        "id": "e1cf2762-e0a4-4358-bb6a-7799119f196e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936616770,
        "parent_id": "763c5ab4-511d-49e3-b3a2-da4091cf550e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A "
            ],
            [
              "break;",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " statement is required to "
            ],
            [
              "jump out",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c/5568/jump-statements"
                ]
              ]
            ],
            [
              " of the "
            ],
            [
              "switch",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " block."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A "
          },
          {
            "Text": "break;",
            "AttrFlags": 2
          },
          {
            "Text": " statement is required to "
          },
          {
            "Text": "jump out",
            "Link": "http://stackoverflow.com/documentation/c/5568/jump-statements"
          },
          {
            "Text": " of the "
          },
          {
            "Text": "switch",
            "AttrFlags": 2
          },
          {
            "Text": " block."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936616771,
        "id": "fa71dbc3-58a5-4322-99b1-36f41e55790b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936616771,
        "parent_id": "763c5ab4-511d-49e3-b3a2-da4091cf550e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note:",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " If you accidentally forget to add a "
            ],
            [
              "break",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " after the end of a "
            ],
            [
              "case",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", the compiler will assume that you intend to "
            ],
            [
              "“fall through”",
              [
                [
                  "a",
                  "https://en.wikipedia.org/wiki/Switch_statement#Fallthrough"
                ]
              ]
            ],
            [
              " and all the subsequent case statements, if any, will be executed (unless a "
            ],
            [
              "break",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " statement is found in any of the subsequent cases), regardless of whether the subsequent case statement(s) match or not. This particular property is used to implement "
            ],
            [
              "Duff’s Device",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c/5151/iteration-statements-loops-for-while-do-while/28504/loop-unrolling-and-duffs-device"
                ]
              ]
            ],
            [
              ". This behavior is often considered a flaw in the C language specification."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note:",
            "AttrFlags": 1
          },
          {
            "Text": " If you accidentally forget to add a "
          },
          {
            "Text": "break",
            "AttrFlags": 2
          },
          {
            "Text": " after the end of a "
          },
          {
            "Text": "case",
            "AttrFlags": 2
          },
          {
            "Text": ", the compiler will assume that you intend to "
          },
          {
            "Text": "“fall through”",
            "Link": "https://en.wikipedia.org/wiki/Switch_statement#Fallthrough"
          },
          {
            "Text": " and all the subsequent case statements, if any, will be executed (unless a "
          },
          {
            "Text": "break",
            "AttrFlags": 4
          },
          {
            "Text": " statement is found in any of the subsequent cases), regardless of whether the subsequent case statement(s) match or not. This particular property is used to implement "
          },
          {
            "Text": "Duff’s Device",
            "Link": "http://stackoverflow.com/documentation/c/5151/iteration-statements-loops-for-while-do-while/28504/loop-unrolling-and-duffs-device"
          },
          {
            "Text": ". This behavior is often considered a flaw in the C language specification."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936616772,
        "id": "4ce227ed-c5ed-455b-b127-40ba3359c369",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936616772,
        "parent_id": "763c5ab4-511d-49e3-b3a2-da4091cf550e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Below is an example that shows effects of the absence of "
            ],
            [
              "break;",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Below is an example that shows effects of the absence of "
          },
          {
            "Text": "break;",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936616772,
        "id": "5b2ea38f-eb7d-4834-a873-53f119787cf5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936616772,
        "parent_id": "763c5ab4-511d-49e3-b3a2-da4091cf550e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int a = 1;\n\nswitch (a) {\ncase 1:\ncase 2:\n    puts(\"a is 1 or 2\");\ncase 3:\n    puts(\"a is 1, 2 or 3\");\n    break;\ndefault:\n    puts(\"a is neither 1, 2 nor 3\");\n    break;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int a = 1;\n\nswitch (a) {\ncase 1:\ncase 2:\n    puts(\"a is 1 or 2\");\ncase 3:\n    puts(\"a is 1, 2 or 3\");\n    break;\ndefault:\n    puts(\"a is neither 1, 2 nor 3\");\n    break;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936616772,
        "id": "079c5ab4-b05c-4e58-be30-e95cbdfc447b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936616772,
        "parent_id": "763c5ab4-511d-49e3-b3a2-da4091cf550e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When the value of "
            ],
            [
              "a",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is 1 or 2, "
            ],
            [
              "a is 1 or 2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "a is 1, 2 or 3",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will both be printed. When "
            ],
            [
              "a",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is 3, only "
            ],
            [
              "a is 1, 2 or 3",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will be printed. Otherwise, "
            ],
            [
              "a is neither 1, 2 nor 3",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will be printed."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When the value of "
          },
          {
            "Text": "a",
            "AttrFlags": 2
          },
          {
            "Text": " is 1 or 2, "
          },
          {
            "Text": "a is 1 or 2",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "a is 1, 2 or 3",
            "AttrFlags": 2
          },
          {
            "Text": " will both be printed. When "
          },
          {
            "Text": "a",
            "AttrFlags": 2
          },
          {
            "Text": " is 3, only "
          },
          {
            "Text": "a is 1, 2 or 3",
            "AttrFlags": 2
          },
          {
            "Text": " will be printed. Otherwise, "
          },
          {
            "Text": "a is neither 1, 2 nor 3",
            "AttrFlags": 2
          },
          {
            "Text": " will be printed."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936616772,
        "id": "e66434cb-b06a-4550-8aa0-2a23f2523c11",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936616772,
        "parent_id": "763c5ab4-511d-49e3-b3a2-da4091cf550e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note that the "
            ],
            [
              "default",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " case is not necessary, especially when the set of values you get in the "
            ],
            [
              "switch",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is finished and known at compile time."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note that the "
          },
          {
            "Text": "default",
            "AttrFlags": 2
          },
          {
            "Text": " case is not necessary, especially when the set of values you get in the "
          },
          {
            "Text": "switch",
            "AttrFlags": 2
          },
          {
            "Text": " is finished and known at compile time."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936616773,
        "id": "309e2200-7005-4dc5-9f51-15aafa4384f8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936616773,
        "parent_id": "763c5ab4-511d-49e3-b3a2-da4091cf550e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The best example is using a "
            ],
            [
              "switch",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " on an "
            ],
            [
              "enum",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The best example is using a "
          },
          {
            "Text": "switch",
            "AttrFlags": 2
          },
          {
            "Text": " on an "
          },
          {
            "Text": "enum",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936616773,
        "id": "6c390f6b-aba5-48b7-b769-578f259d1bfb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936616773,
        "parent_id": "763c5ab4-511d-49e3-b3a2-da4091cf550e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "enum msg_type { ACK, PING, ERROR };\nvoid f(enum msg_type t)\n{\n  switch (t) {\n  case ACK:\n    // do nothing\n    break;\n  case PING:\n    // do something\n    break;\n  case ERROR:\n    // do something else\n    break;\n  }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "enum msg_type { ACK, PING, ERROR };\nvoid f(enum msg_type t)\n{\n  switch (t) {\n  case ACK:\n    // do nothing\n    break;\n  case PING:\n    // do something\n    break;\n  case ERROR:\n    // do something else\n    break;\n  }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936616773,
        "id": "7ef92e2e-3013-4aac-a2e6-3d00eff8165d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936616773,
        "parent_id": "763c5ab4-511d-49e3-b3a2-da4091cf550e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "There are multiple advantages of doing this:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "There are multiple advantages of doing this:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936616774,
        "id": "71e4cdf4-9f42-4561-af1c-35d1a6950b55",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936616774,
        "parent_id": "763c5ab4-511d-49e3-b3a2-da4091cf550e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "most compilers will report a warning if you don’t handle a value (this would not be reported if a "
            ],
            [
              "default",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " case were present)"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "most compilers will report a warning if you don’t handle a value (this would not be reported if a "
          },
          {
            "Text": "default",
            "AttrFlags": 2
          },
          {
            "Text": " case were present)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936616774,
        "id": "5d893f8c-dce4-4251-9f36-b34701d147f9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936616774,
        "parent_id": "763c5ab4-511d-49e3-b3a2-da4091cf550e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "for the same reason, if you add a new value to the "
            ],
            [
              "enum",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", you will be notified of all the places where you forgot to handle the new value (with a "
            ],
            [
              "default",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " case, you would need to manually explore your code searching for such cases)"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "for the same reason, if you add a new value to the "
          },
          {
            "Text": "enum",
            "AttrFlags": 2
          },
          {
            "Text": ", you will be notified of all the places where you forgot to handle the new value (with a "
          },
          {
            "Text": "default",
            "AttrFlags": 2
          },
          {
            "Text": " case, you would need to manually explore your code searching for such cases)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936616775,
        "id": "89543069-a5fb-4242-99ee-cc9988a0f69f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936616775,
        "parent_id": "763c5ab4-511d-49e3-b3a2-da4091cf550e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The reader does not need to figure out “what is hidden by the "
            ],
            [
              "default:",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "”, whether there other "
            ],
            [
              "enum",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " values or whether it is a protection for “just in case”. And if there are other "
            ],
            [
              "enum",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " values, did the coder intentionally use the "
            ],
            [
              "default",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " case for them or is there a bug that was introduced when he added the value?"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "The reader does not need to figure out “what is hidden by the "
          },
          {
            "Text": "default:",
            "AttrFlags": 2
          },
          {
            "Text": "”, whether there other "
          },
          {
            "Text": "enum",
            "AttrFlags": 2
          },
          {
            "Text": " values or whether it is a protection for “just in case”. And if there are other "
          },
          {
            "Text": "enum",
            "AttrFlags": 2
          },
          {
            "Text": " values, did the coder intentionally use the "
          },
          {
            "Text": "default",
            "AttrFlags": 2
          },
          {
            "Text": " case for them or is there a bug that was introduced when he added the value?"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936616775,
        "id": "662c2961-e035-4fa4-90bf-8b1de50f713b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936616775,
        "parent_id": "763c5ab4-511d-49e3-b3a2-da4091cf550e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "handling each "
            ],
            [
              "enum",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " value makes the code self explanatory as you can’t hide behind a wild card, you must explicitly handle each of them."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "handling each "
          },
          {
            "Text": "enum",
            "AttrFlags": 2
          },
          {
            "Text": " value makes the code self explanatory as you can’t hide behind a wild card, you must explicitly handle each of them."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936616775,
        "id": "91ebd7c8-d79e-4ffc-9b4e-58dc62ee4704",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936616775,
        "parent_id": "763c5ab4-511d-49e3-b3a2-da4091cf550e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Nevertheless, you can’t prevent someone to write evil code like:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Nevertheless, you can’t prevent someone to write evil code like:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936616775,
        "id": "d186b2da-fdeb-44f9-9e3e-336213441dc8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936616775,
        "parent_id": "763c5ab4-511d-49e3-b3a2-da4091cf550e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "enum msg_type t = (enum msg_type)666; // I'm evil"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "enum msg_type t = (enum msg_type)666; // I'm evil",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936616775,
        "id": "cfcc19e3-535f-4c3f-bf3d-83e07f3c778f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936616775,
        "parent_id": "763c5ab4-511d-49e3-b3a2-da4091cf550e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Thus you may add an extra check before your switch to detect it, if you really need it."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Thus you may add an extra check before your switch to detect it, if you really need it."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936616775,
        "id": "28effc76-1732-4d46-8716-67033bd1fecb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936616775,
        "parent_id": "763c5ab4-511d-49e3-b3a2-da4091cf550e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "void f(enum msg_type t)\n{\n   if (!is_msg_type_valid(t)) {\n      // Handle this unlikely error\n   }\n\n   switch(t) { \n    // Same code than before\n   }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "void f(enum msg_type t)\n{\n   if (!is_msg_type_valid(t)) {\n      // Handle this unlikely error\n   }\n\n   switch(t) { \n    // Same code than before\n   }\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "switch Statements",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}