{
  "ID": "d3c1d60c-8ead-49ad-aaf1-adbac6c61a10",
  "Root": {
    "alive": true,
    "content": [
      "5d3d81ba-2cf2-4c0c-bdd3-094c5ff1ed44",
      "e30cb52d-fea6-4ff7-93ff-6c48dcdb54e4"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551935852146,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "d3c1d60c-8ead-49ad-aaf1-adbac6c61a10",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551935852146,
    "parent_id": "fb6df079-bba6-489e-ac6a-3ea61d24e7af",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Inserting a node at the nth position"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935852145,
        "id": "5d3d81ba-2cf2-4c0c-bdd3-094c5ff1ed44",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935852145,
        "parent_id": "d3c1d60c-8ead-49ad-aaf1-adbac6c61a10",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "So far, we have looked at "
            ],
            [
              "inserting a node at the beginning of a singly linked list",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c/560/linked-lists/10931/inserting-a-node-at-the-beginning-of-a-singly-linked-list#t=201607260122178444607"
                ]
              ]
            ],
            [
              ". However, most of the times you will want to be able to insert nodes elsewhere as well. The code written below shows how it is possible to write an "
            ],
            [
              "insert()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " function to insert nodes "
            ],
            [
              "anywhere",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " in the linked lists."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "So far, we have looked at "
          },
          {
            "Text": "inserting a node at the beginning of a singly linked list",
            "Link": "http://stackoverflow.com/documentation/c/560/linked-lists/10931/inserting-a-node-at-the-beginning-of-a-singly-linked-list#t=201607260122178444607"
          },
          {
            "Text": ". However, most of the times you will want to be able to insert nodes elsewhere as well. The code written below shows how it is possible to write an "
          },
          {
            "Text": "insert()",
            "AttrFlags": 2
          },
          {
            "Text": " function to insert nodes "
          },
          {
            "Text": "anywhere",
            "AttrFlags": 4
          },
          {
            "Text": " in the linked lists."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935852146,
        "id": "e30cb52d-fea6-4ff7-93ff-6c48dcdb54e4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935852146,
        "parent_id": "d3c1d60c-8ead-49ad-aaf1-adbac6c61a10",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cstdio.h\u003e\n#include \u003cstdlib.h\u003e\n\nstruct Node {\n  int data;\n  struct Node* next;\n};\n\nstruct Node* insert(struct Node* head, int value, size_t position);\nvoid print_list (struct Node* head);\n\nint main(int argc, char *argv[]) {\n  struct Node *head = NULL; /* Initialize the list to be empty */\n\n  /* Insert nodes at positions with values: */\n  head = insert(head, 1, 0);\n  head = insert(head, 100, 1);\n  head = insert(head, 21, 2);\n  head = insert(head, 2, 3);\n  head = insert(head, 5, 4);\n  head = insert(head, 42, 2);\n\n  print_list(head);\n  return 0;\n}\n\nstruct Node* insert(struct Node* head, int value, size_t position) {\n  size_t i = 0;\n  struct Node *currentNode;\n\n  /* Create our node */\n  currentNode = malloc(sizeof *currentNode);\n  /* Check for success of malloc() here! */\n\n  /* Assign data */\n  currentNode-\u003edata = value;\n\n  /* Holds a pointer to the 'next' field that we have to link to the new node.\n     By initializing it to \u0026head we handle the case of insertion at the beginning. */\n  struct Node **nextForPosition = \u0026head;\n  /* Iterate to get the 'next' field we are looking for.\n     Note: Insert at the end if position is larger than current number of elements. */\n  for (i = 0; i \u003c position \u0026\u0026 *nextForPosition != NULL; i++) {\n      /* nextForPosition is pointing to the 'next' field of the node.\n         So *nextForPosition is a pointer to the next node.\n         Update it with a pointer to the 'next' field of the next node. */\n      nextForPosition = \u0026(*nextForPosition)-\u003enext;\n  }\n\n  /* Here, we are taking the link to the next node (the one our newly inserted node should\n  point to) by dereferencing nextForPosition, which points to the 'next' field of the node\n  that is in the position we want to insert our node at.\n  We assign this link to our next value. */\n  currentNode-\u003enext = *nextForPosition;\n\n  /* Now, we want to correct the link of the node before the position of our\n  new node: it will be changed to be a pointer to our new node. */\n  *nextForPosition = currentNode;\n\n  return head;\n}\n\nvoid print_list (struct Node* head) {\n  /* Go through the list of nodes and print out the data in each node */\n  struct Node* i = head;\n  while (i != NULL) {\n    printf(\"%d\\n\", i-\u003edata);\n    i = i-\u003enext;\n  }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cstdio.h\u003e\n#include \u003cstdlib.h\u003e\n\nstruct Node {\n  int data;\n  struct Node* next;\n};\n\nstruct Node* insert(struct Node* head, int value, size_t position);\nvoid print_list (struct Node* head);\n\nint main(int argc, char *argv[]) {\n  struct Node *head = NULL; /* Initialize the list to be empty */\n\n  /* Insert nodes at positions with values: */\n  head = insert(head, 1, 0);\n  head = insert(head, 100, 1);\n  head = insert(head, 21, 2);\n  head = insert(head, 2, 3);\n  head = insert(head, 5, 4);\n  head = insert(head, 42, 2);\n\n  print_list(head);\n  return 0;\n}\n\nstruct Node* insert(struct Node* head, int value, size_t position) {\n  size_t i = 0;\n  struct Node *currentNode;\n\n  /* Create our node */\n  currentNode = malloc(sizeof *currentNode);\n  /* Check for success of malloc() here! */\n\n  /* Assign data */\n  currentNode-\u003edata = value;\n\n  /* Holds a pointer to the 'next' field that we have to link to the new node.\n     By initializing it to \u0026head we handle the case of insertion at the beginning. */\n  struct Node **nextForPosition = \u0026head;\n  /* Iterate to get the 'next' field we are looking for.\n     Note: Insert at the end if position is larger than current number of elements. */\n  for (i = 0; i \u003c position \u0026\u0026 *nextForPosition != NULL; i++) {\n      /* nextForPosition is pointing to the 'next' field of the node.\n         So *nextForPosition is a pointer to the next node.\n         Update it with a pointer to the 'next' field of the next node. */\n      nextForPosition = \u0026(*nextForPosition)-\u003enext;\n  }\n\n  /* Here, we are taking the link to the next node (the one our newly inserted node should\n  point to) by dereferencing nextForPosition, which points to the 'next' field of the node\n  that is in the position we want to insert our node at.\n  We assign this link to our next value. */\n  currentNode-\u003enext = *nextForPosition;\n\n  /* Now, we want to correct the link of the node before the position of our\n  new node: it will be changed to be a pointer to our new node. */\n  *nextForPosition = currentNode;\n\n  return head;\n}\n\nvoid print_list (struct Node* head) {\n  /* Go through the list of nodes and print out the data in each node */\n  struct Node* i = head;\n  while (i != NULL) {\n    printf(\"%d\\n\", i-\u003edata);\n    i = i-\u003enext;\n  }\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "Inserting a node at the nth position",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}