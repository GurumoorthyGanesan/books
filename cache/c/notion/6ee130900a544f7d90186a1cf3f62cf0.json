{
  "ID": "6ee13090-0a54-4f7d-9018-6a1cf3f62cf0",
  "Root": {
    "alive": true,
    "content": [
      "9ce695eb-39b3-4ff6-a150-257270341324",
      "926faeb7-8883-4ea6-947c-93a71386f190",
      "830dec8f-d1a3-4ead-b030-86e77b12bd88",
      "083400d8-fe69-4df5-8ecb-c7d50864da43",
      "5e336d1f-3ee1-4ebc-909a-606bfa9cdfc2",
      "aa6faa0e-08af-4123-ae0c-d7bb10f72134",
      "c72e7244-dffd-49b0-965d-3ffd7f7b37d1",
      "86498269-40a9-449a-b61e-85cd36ebec25",
      "ac96aa0a-f256-4526-9fe4-38396b393e2b",
      "e54def7b-be4d-4c96-95e8-4d09171b6f53"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551936350388,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "6ee13090-0a54-4f7d-9018-6a1cf3f62cf0",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551936350388,
    "parent_id": "ce0d7992-bb1e-4e62-ab26-2f99a9a2f78d",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Newline character is not consumed in typical scanf call"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936350382,
        "id": "9ce695eb-39b3-4ff6-a150-257270341324",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936350382,
        "parent_id": "6ee13090-0a54-4f7d-9018-6a1cf3f62cf0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When this program"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When this program"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936350385,
        "id": "926faeb7-8883-4ea6-947c-93a71386f190",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936350385,
        "parent_id": "6ee13090-0a54-4f7d-9018-6a1cf3f62cf0",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cstdio.h\u003e\n#include \u003cstring.h\u003e\n\nint main(void) {\n    int num = 0;\n    char str[128], *lf;\n\n    scanf(\"%d\", \u0026num);\n    fgets(str, sizeof(str), stdin);\n\n    if ((lf = strchr(str, '\\n')) != NULL) *lf = '\\0';\n    printf(\"%d \\\"%s\\\"\\n\", num, str);\n    return 0;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cstdio.h\u003e\n#include \u003cstring.h\u003e\n\nint main(void) {\n    int num = 0;\n    char str[128], *lf;\n\n    scanf(\"%d\", \u0026num);\n    fgets(str, sizeof(str), stdin);\n\n    if ((lf = strchr(str, '\\n')) != NULL) *lf = '\\0';\n    printf(\"%d \\\"%s\\\"\\n\", num, str);\n    return 0;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936350385,
        "id": "830dec8f-d1a3-4ead-b030-86e77b12bd88",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936350385,
        "parent_id": "6ee13090-0a54-4f7d-9018-6a1cf3f62cf0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "is executed with this input"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "is executed with this input"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936350385,
        "id": "083400d8-fe69-4df5-8ecb-c7d50864da43",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936350385,
        "parent_id": "6ee13090-0a54-4f7d-9018-6a1cf3f62cf0",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "42\nlife"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "42\nlife",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936350385,
        "id": "5e336d1f-3ee1-4ebc-909a-606bfa9cdfc2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936350385,
        "parent_id": "6ee13090-0a54-4f7d-9018-6a1cf3f62cf0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "the output will be "
            ],
            [
              "42 \"\"",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " instead of expected "
            ],
            [
              "42 \"life\"",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "the output will be "
          },
          {
            "Text": "42 \"\"",
            "AttrFlags": 2
          },
          {
            "Text": " instead of expected "
          },
          {
            "Text": "42 \"life\"",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936350386,
        "id": "aa6faa0e-08af-4123-ae0c-d7bb10f72134",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936350386,
        "parent_id": "6ee13090-0a54-4f7d-9018-6a1cf3f62cf0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This is because a newline character after "
            ],
            [
              "42",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is not consumed in the call of "
            ],
            [
              "scanf()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and it is consumed by "
            ],
            [
              "fgets()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " before it reads "
            ],
            [
              "life",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Then, "
            ],
            [
              "fgets()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " stop reading before reading "
            ],
            [
              "life",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This is because a newline character after "
          },
          {
            "Text": "42",
            "AttrFlags": 2
          },
          {
            "Text": " is not consumed in the call of "
          },
          {
            "Text": "scanf()",
            "AttrFlags": 2
          },
          {
            "Text": " and it is consumed by "
          },
          {
            "Text": "fgets()",
            "AttrFlags": 2
          },
          {
            "Text": " before it reads "
          },
          {
            "Text": "life",
            "AttrFlags": 2
          },
          {
            "Text": ". Then, "
          },
          {
            "Text": "fgets()",
            "AttrFlags": 2
          },
          {
            "Text": " stop reading before reading "
          },
          {
            "Text": "life",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936350387,
        "id": "c72e7244-dffd-49b0-965d-3ffd7f7b37d1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936350387,
        "parent_id": "6ee13090-0a54-4f7d-9018-6a1cf3f62cf0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To avoid this problem, one way that is useful when the maximum length of a line is known – when solving problems in online judge syste, for example – is avoiding using "
            ],
            [
              "scanf()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " directly and reading all lines via "
            ],
            [
              "fgets()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". You can use "
            ],
            [
              "sscanf()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to parse the lines read."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To avoid this problem, one way that is useful when the maximum length of a line is known – when solving problems in online judge syste, for example – is avoiding using "
          },
          {
            "Text": "scanf()",
            "AttrFlags": 2
          },
          {
            "Text": " directly and reading all lines via "
          },
          {
            "Text": "fgets()",
            "AttrFlags": 2
          },
          {
            "Text": ". You can use "
          },
          {
            "Text": "sscanf()",
            "AttrFlags": 2
          },
          {
            "Text": " to parse the lines read."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936350387,
        "id": "86498269-40a9-449a-b61e-85cd36ebec25",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936350387,
        "parent_id": "6ee13090-0a54-4f7d-9018-6a1cf3f62cf0",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cstdio.h\u003e\n#include \u003cstring.h\u003e\n\nint main(void) {\n    int num = 0;\n    char line_buffer[128] = \"\", str[128], *lf;\n\n    fgets(line_buffer, sizeof(line_buffer), stdin);\n    sscanf(line_buffer, \"%d\", \u0026num);\n    fgets(str, sizeof(str), stdin);\n\n    if ((lf = strchr(str, '\\n')) != NULL) *lf = '\\0';\n    printf(\"%d \\\"%s\\\"\\n\", num, str);\n    return 0;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cstdio.h\u003e\n#include \u003cstring.h\u003e\n\nint main(void) {\n    int num = 0;\n    char line_buffer[128] = \"\", str[128], *lf;\n\n    fgets(line_buffer, sizeof(line_buffer), stdin);\n    sscanf(line_buffer, \"%d\", \u0026num);\n    fgets(str, sizeof(str), stdin);\n\n    if ((lf = strchr(str, '\\n')) != NULL) *lf = '\\0';\n    printf(\"%d \\\"%s\\\"\\n\", num, str);\n    return 0;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936350387,
        "id": "ac96aa0a-f256-4526-9fe4-38396b393e2b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936350387,
        "parent_id": "6ee13090-0a54-4f7d-9018-6a1cf3f62cf0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Another way is to read until you hit a newline character after using "
            ],
            [
              "scanf()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and before using "
            ],
            [
              "fgets()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Another way is to read until you hit a newline character after using "
          },
          {
            "Text": "scanf()",
            "AttrFlags": 2
          },
          {
            "Text": " and before using "
          },
          {
            "Text": "fgets()",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936350387,
        "id": "e54def7b-be4d-4c96-95e8-4d09171b6f53",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936350387,
        "parent_id": "6ee13090-0a54-4f7d-9018-6a1cf3f62cf0",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cstdio.h\u003e\n#include \u003cstring.h\u003e\n\nint main(void) {\n    int num = 0;\n    char str[128], *lf;\n    int c;\n\n    scanf(\"%d\", \u0026num);\n    while ((c = getchar()) != '\\n' \u0026\u0026 c != EOF);\n    fgets(str, sizeof(str), stdin);\n\n    if ((lf = strchr(str, '\\n')) != NULL) *lf = '\\0';\n    printf(\"%d \\\"%s\\\"\\n\", num, str);\n    return 0;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cstdio.h\u003e\n#include \u003cstring.h\u003e\n\nint main(void) {\n    int num = 0;\n    char str[128], *lf;\n    int c;\n\n    scanf(\"%d\", \u0026num);\n    while ((c = getchar()) != '\\n' \u0026\u0026 c != EOF);\n    fgets(str, sizeof(str), stdin);\n\n    if ((lf = strchr(str, '\\n')) != NULL) *lf = '\\0';\n    printf(\"%d \\\"%s\\\"\\n\", num, str);\n    return 0;\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "Newline character is not consumed in typical scanf call",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}