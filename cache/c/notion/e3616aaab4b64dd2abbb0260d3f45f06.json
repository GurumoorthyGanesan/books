{
  "ID": "e3616aaa-b4b6-4dd2-abbb-0260d3f45f06",
  "Root": {
    "alive": true,
    "content": [
      "145bcf01-5908-4c96-93d0-0cff0f344048",
      "c2e85498-a3a4-48f2-888c-b26db64eb436",
      "42a32156-52de-4f06-a9a8-0cb300dba550",
      "25e6df45-fa48-4423-a430-bc94d492d7bf",
      "504cda5b-0f33-440d-808a-73cea8000a77",
      "e01722e6-e261-450e-a2af-968d8c1e4625",
      "14404158-aaa5-4846-b90c-389f2aa1e700",
      "cdc692d9-f31b-4c35-9227-c148b646b172",
      "109c684e-0a81-4c9b-8a88-ffd542e5da44"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551936745646,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "e3616aaa-b4b6-4dd2-abbb-0260d3f45f06",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551936745646,
    "parent_id": "a32e93b8-a175-40b5-b72f-e58c30d058bb",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "030 gcc Inline assembly in macros"
        ]
      ]
    },
    "type": "page",
    "version": 2,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936745642,
        "id": "145bcf01-5908-4c96-93d0-0cff0f344048",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936745642,
        "parent_id": "e3616aaa-b4b6-4dd2-abbb-0260d3f45f06",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We can put assembly instructions inside a macro and use the macro like you would call a function."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "We can put assembly instructions inside a macro and use the macro like you would call a function."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936745644,
        "id": "c2e85498-a3a4-48f2-888c-b26db64eb436",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936745644,
        "parent_id": "e3616aaa-b4b6-4dd2-abbb-0260d3f45f06",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#define mov(x,y) \\\n{ \\\n    __asm__ (\"l.cmov %0,%1,%2\" : \"=r\" (x) : \"r\" (y), \"r\" (0x0000000F)); \\\n}\n\n/// some definition and assignment\nunsigned char sbox[size][size];\nunsigned char sbox[size][size];\n\n///Using\nmov(state[0][1], sbox[si][sj]);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#define mov(x,y) \\\n{ \\\n    __asm__ (\"l.cmov %0,%1,%2\" : \"=r\" (x) : \"r\" (y), \"r\" (0x0000000F)); \\\n}\n\n/// some definition and assignment\nunsigned char sbox[size][size];\nunsigned char sbox[size][size];\n\n///Using\nmov(state[0][1], sbox[si][sj]);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936745645,
        "id": "42a32156-52de-4f06-a9a8-0cb300dba550",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936745645,
        "parent_id": "e3616aaa-b4b6-4dd2-abbb-0260d3f45f06",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Using inline assembly instructions embedded in C code can improve the run time of a program. This is very helpful in time critical situations like cryptographic algorithms such as AES. For example, for a simple shift operation that is needed in the AES algorithm, we can substitute a direct "
            ],
            [
              "Rotate Right",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " assembly instruction with C shift operator "
            ],
            [
              "\u003e\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Using inline assembly instructions embedded in C code can improve the run time of a program. This is very helpful in time critical situations like cryptographic algorithms such as AES. For example, for a simple shift operation that is needed in the AES algorithm, we can substitute a direct "
          },
          {
            "Text": "Rotate Right",
            "AttrFlags": 2
          },
          {
            "Text": " assembly instruction with C shift operator "
          },
          {
            "Text": "\u003e\u003e",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936745645,
        "id": "25e6df45-fa48-4423-a430-bc94d492d7bf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936745645,
        "parent_id": "e3616aaa-b4b6-4dd2-abbb-0260d3f45f06",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In an implementation of ‘AES256’, in ‘AddRoundKey()’ function we have some statements like this:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In an implementation of ‘AES256’, in ‘AddRoundKey()’ function we have some statements like this:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936745645,
        "id": "504cda5b-0f33-440d-808a-73cea8000a77",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936745645,
        "parent_id": "e3616aaa-b4b6-4dd2-abbb-0260d3f45f06",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "unsigned int w;          // 32-bit\nunsigned char subkey[4]; // 8-bit, 4*8 = 32 \n\nsubkey[0] = w \u003e\u003e 24;     // hold 8 bit, MSB, leftmost group of 8-bits \nsubkey[1] = w \u003e\u003e 16;     // hold 8 bit, second group of 8-bit from left    \nsubkey[2] = w \u003e\u003e 8;      // hold 8 bit, second group of 8-bit from right\nsubkey[3] = w;           // hold 8 bit, LSB, rightmost group of 8-bits\n\n/// subkey \u003c- w"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "unsigned int w;          // 32-bit\nunsigned char subkey[4]; // 8-bit, 4*8 = 32 \n\nsubkey[0] = w \u003e\u003e 24;     // hold 8 bit, MSB, leftmost group of 8-bits \nsubkey[1] = w \u003e\u003e 16;     // hold 8 bit, second group of 8-bit from left    \nsubkey[2] = w \u003e\u003e 8;      // hold 8 bit, second group of 8-bit from right\nsubkey[3] = w;           // hold 8 bit, LSB, rightmost group of 8-bits\n\n/// subkey \u003c- w",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936745645,
        "id": "e01722e6-e261-450e-a2af-968d8c1e4625",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936745645,
        "parent_id": "e3616aaa-b4b6-4dd2-abbb-0260d3f45f06",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "They simply assign the bit value of "
            ],
            [
              "w",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to "
            ],
            [
              "subkey",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " array."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "They simply assign the bit value of "
          },
          {
            "Text": "w",
            "AttrFlags": 2
          },
          {
            "Text": " to "
          },
          {
            "Text": "subkey",
            "AttrFlags": 2
          },
          {
            "Text": " array."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936745645,
        "id": "14404158-aaa5-4846-b90c-389f2aa1e700",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936745645,
        "parent_id": "e3616aaa-b4b6-4dd2-abbb-0260d3f45f06",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We can change three shift + assign and one assign C expression with only one assembly "
            ],
            [
              "Rotate Right",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " operation."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "We can change three shift + assign and one assign C expression with only one assembly "
          },
          {
            "Text": "Rotate Right",
            "AttrFlags": 2
          },
          {
            "Text": " operation."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936745646,
        "id": "cdc692d9-f31b-4c35-9227-c148b646b172",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936745646,
        "parent_id": "e3616aaa-b4b6-4dd2-abbb-0260d3f45f06",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "__asm__ (\"l.ror  %0,%1,%2\" : \"=r\" (* (unsigned int *) subkey)  : \"r\" (w), \"r\" (0x10));"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "__asm__ (\"l.ror  %0,%1,%2\" : \"=r\" (* (unsigned int *) subkey)  : \"r\" (w), \"r\" (0x10));",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936745646,
        "id": "109c684e-0a81-4c9b-8a88-ffd542e5da44",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936745646,
        "parent_id": "e3616aaa-b4b6-4dd2-abbb-0260d3f45f06",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The final result is exactly same."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The final result is exactly same."
          }
        ]
      }
    ],
    "title": "030 gcc Inline assembly in macros",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}