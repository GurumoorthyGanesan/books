{
  "ID": "2a324a11-fccf-45af-9ce2-2891a7e76085",
  "Root": {
    "alive": true,
    "content": [
      "74a6552f-ecaa-4ca6-bc53-885229784744",
      "48e0f03d-657b-4261-8c0e-329c7ff07e1b",
      "bc82a8bc-4548-43cb-9cb2-e3d63700c746",
      "716c3ebd-d545-461a-b2e3-c344633bad01",
      "378d278c-59c4-4e2f-b247-5a30464e4606",
      "497fe7f3-12e1-4441-8766-e58c9656d6ea",
      "5ab691a2-fd62-4a14-90f2-7ef43d636f12",
      "a01d6dd9-f9e8-480a-8068-a494ef78a6c6",
      "d33afad7-33ca-47fb-9ff0-1b25639f6d79",
      "fc90aae6-bac3-46fd-b718-a0826c645223"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551935733227,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "2a324a11-fccf-45af-9ce2-2891a7e76085",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551935733227,
    "parent_id": "eff989d8-e4d4-4f97-952e-6c58e46dfb73",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Signed integer overflow"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935733223,
        "id": "74a6552f-ecaa-4ca6-bc53-885229784744",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935733223,
        "parent_id": "2a324a11-fccf-45af-9ce2-2891a7e76085",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Per paragraph 6.5/5 of both C99 and C11, evaluation of an expression produces undefined behavior if the result is not a representable value of the expression’s type. For arithmetic types, that’s called an "
            ],
            [
              "overflow",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ". Unsigned integer arithmetic does not overflow because paragraph 6.2.5/9 applies, causing any unsigned result that otherwise would be out of range to be reduced to an in-range value. There is no analogous provision for "
            ],
            [
              "signed",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " integer types, however; these can and do overflow, producing undefined behavior. For example,"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Per paragraph 6.5/5 of both C99 and C11, evaluation of an expression produces undefined behavior if the result is not a representable value of the expression’s type. For arithmetic types, that’s called an "
          },
          {
            "Text": "overflow",
            "AttrFlags": 4
          },
          {
            "Text": ". Unsigned integer arithmetic does not overflow because paragraph 6.2.5/9 applies, causing any unsigned result that otherwise would be out of range to be reduced to an in-range value. There is no analogous provision for "
          },
          {
            "Text": "signed",
            "AttrFlags": 4
          },
          {
            "Text": " integer types, however; these can and do overflow, producing undefined behavior. For example,"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935733225,
        "id": "48e0f03d-657b-4261-8c0e-329c7ff07e1b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935733225,
        "parent_id": "2a324a11-fccf-45af-9ce2-2891a7e76085",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003climits.h\u003e      /* to get INT_MAX */\n\nint main(void) {\n    int i = INT_MAX + 1; /* Overflow happens here */\n    return 0;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003climits.h\u003e      /* to get INT_MAX */\n\nint main(void) {\n    int i = INT_MAX + 1; /* Overflow happens here */\n    return 0;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935733226,
        "id": "bc82a8bc-4548-43cb-9cb2-e3d63700c746",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935733226,
        "parent_id": "2a324a11-fccf-45af-9ce2-2891a7e76085",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Most instances of this type of undefined behavior are more difficult to recognize or predict. Overflow can in principle arise from any addition, subtraction, or multiplication operation on signed integers (subject to the usual arithmetic conversions) where there are not effective bounds on or a relationship between the operands to prevent it. For example, this function:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Most instances of this type of undefined behavior are more difficult to recognize or predict. Overflow can in principle arise from any addition, subtraction, or multiplication operation on signed integers (subject to the usual arithmetic conversions) where there are not effective bounds on or a relationship between the operands to prevent it. For example, this function:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935733226,
        "id": "716c3ebd-d545-461a-b2e3-c344633bad01",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935733226,
        "parent_id": "2a324a11-fccf-45af-9ce2-2891a7e76085",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int square(int x) {\n    return x * x;  /* overflows for some values of x */\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int square(int x) {\n    return x * x;  /* overflows for some values of x */\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935733226,
        "id": "378d278c-59c4-4e2f-b247-5a30464e4606",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935733226,
        "parent_id": "2a324a11-fccf-45af-9ce2-2891a7e76085",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "is reasonable, and it does the right thing for small enough argument values, but its behavior is undefined for larger argument values. You cannot judge from the function alone whether programs that call it exhibit undefined behavior as a result. It depends on what arguments they pass to it."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "is reasonable, and it does the right thing for small enough argument values, but its behavior is undefined for larger argument values. You cannot judge from the function alone whether programs that call it exhibit undefined behavior as a result. It depends on what arguments they pass to it."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935733226,
        "id": "497fe7f3-12e1-4441-8766-e58c9656d6ea",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935733226,
        "parent_id": "2a324a11-fccf-45af-9ce2-2891a7e76085",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "On the other hand, consider this trivial example of overflow-safe signed integer arithmetic:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "On the other hand, consider this trivial example of overflow-safe signed integer arithmetic:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935733226,
        "id": "5ab691a2-fd62-4a14-90f2-7ef43d636f12",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935733226,
        "parent_id": "2a324a11-fccf-45af-9ce2-2891a7e76085",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int zero(int x) {\n    return x - x;  /* Cannot overflow */\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int zero(int x) {\n    return x - x;  /* Cannot overflow */\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935733226,
        "id": "a01d6dd9-f9e8-480a-8068-a494ef78a6c6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935733226,
        "parent_id": "2a324a11-fccf-45af-9ce2-2891a7e76085",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The relationship between the operands of the subtraction operator ensures that the subtraction never overflows. Or consider this somewhat more practical example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The relationship between the operands of the subtraction operator ensures that the subtraction never overflows. Or consider this somewhat more practical example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935733226,
        "id": "d33afad7-33ca-47fb-9ff0-1b25639f6d79",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935733226,
        "parent_id": "2a324a11-fccf-45af-9ce2-2891a7e76085",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int sizeDelta(FILE *f1, FILE *f2) {\n    int count1 = 0;\n    int count2 = 0;\n    while (fgetc(f1) != EOF) count1++;  /* might overflow */\n    while (fgetc(f2) != EOF) count2++;  /* might overflow */\n\n    return count1 - count2; /* provided no UB to this point, will not overflow */\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int sizeDelta(FILE *f1, FILE *f2) {\n    int count1 = 0;\n    int count2 = 0;\n    while (fgetc(f1) != EOF) count1++;  /* might overflow */\n    while (fgetc(f2) != EOF) count2++;  /* might overflow */\n\n    return count1 - count2; /* provided no UB to this point, will not overflow */\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935733227,
        "id": "fc90aae6-bac3-46fd-b718-a0826c645223",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935733227,
        "parent_id": "2a324a11-fccf-45af-9ce2-2891a7e76085",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As long as that the counters do not overflow individually, the operands of the final subtraction will both be non-negative. All differences between any two such values are representable as "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "As long as that the counters do not overflow individually, the operands of the final subtraction will both be non-negative. All differences between any two such values are representable as "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      }
    ],
    "title": "Signed integer overflow",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}