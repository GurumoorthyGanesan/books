{
  "ID": "9821b013-062c-4182-9931-e80357d6d790",
  "Root": {
    "alive": true,
    "content": [
      "17a76000-d70b-422d-b8a2-06a0e6f1387f",
      "d1e0800b-a2ca-4a47-afb7-28f859260f00",
      "56547ec6-5f02-4ff9-8feb-17153e5cb1fb"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551936652338,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "9821b013-062c-4182-9931-e80357d6d790",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551936652338,
    "parent_id": "70e63802-c8af-4573-9d30-82507679f19d",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Using define"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936652335,
        "id": "17a76000-d70b-422d-b8a2-06a0e6f1387f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936652335,
        "parent_id": "9821b013-062c-4182-9931-e80357d6d790",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "C of all versions, will effectively treat any integer value other than "
            ],
            [
              "0",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " as "
            ],
            [
              "true",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " for comparison operators and the integer value "
            ],
            [
              "0",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " as "
            ],
            [
              "false",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". If you don’t have "
            ],
            [
              "_Bool",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "bool",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " as of C99 available, you could simulate a Boolean data type in C using "
            ],
            [
              "#define",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " macros, and you might still find such things in legacy code."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "C of all versions, will effectively treat any integer value other than "
          },
          {
            "Text": "0",
            "AttrFlags": 2
          },
          {
            "Text": " as "
          },
          {
            "Text": "true",
            "AttrFlags": 2
          },
          {
            "Text": " for comparison operators and the integer value "
          },
          {
            "Text": "0",
            "AttrFlags": 2
          },
          {
            "Text": " as "
          },
          {
            "Text": "false",
            "AttrFlags": 2
          },
          {
            "Text": ". If you don’t have "
          },
          {
            "Text": "_Bool",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "bool",
            "AttrFlags": 2
          },
          {
            "Text": " as of C99 available, you could simulate a Boolean data type in C using "
          },
          {
            "Text": "#define",
            "AttrFlags": 2
          },
          {
            "Text": " macros, and you might still find such things in legacy code."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936652337,
        "id": "d1e0800b-a2ca-4a47-afb7-28f859260f00",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936652337,
        "parent_id": "9821b013-062c-4182-9931-e80357d6d790",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cstdio.h\u003e\n\n#define bool int\n#define true 1\n#define false 0\n\nint main(void) {\n    bool x = true;  /* Equivalent to int x = 1; */\n    bool y = false; /* Equivalent to int y = 0; */\n    if (x) /* Functionally equivalent to if (x != 0) or if (x != false) */\n    {\n        puts(\"This will print!\");\n    }\n    if (!y) /* Functionally equivalent to if (y == 0) or if (y == false) */\n    {\n        puts(\"This will also print!\");\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cstdio.h\u003e\n\n#define bool int\n#define true 1\n#define false 0\n\nint main(void) {\n    bool x = true;  /* Equivalent to int x = 1; */\n    bool y = false; /* Equivalent to int y = 0; */\n    if (x) /* Functionally equivalent to if (x != 0) or if (x != false) */\n    {\n        puts(\"This will print!\");\n    }\n    if (!y) /* Functionally equivalent to if (y == 0) or if (y == false) */\n    {\n        puts(\"This will also print!\");\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936652338,
        "id": "56547ec6-5f02-4ff9-8feb-17153e5cb1fb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936652338,
        "parent_id": "9821b013-062c-4182-9931-e80357d6d790",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Don’t introduce this in new code since the definition of these macros might clash with modern uses of "
            ],
            [
              "\u003cstdbool.h\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Don’t introduce this in new code since the definition of these macros might clash with modern uses of "
          },
          {
            "Text": "\u003cstdbool.h\u003e",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      }
    ],
    "title": "Using define",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}