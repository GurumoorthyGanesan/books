{
  "ID": "e016b469-3c6c-4612-9ecd-9a3908995b8a",
  "Root": {
    "alive": true,
    "content": [
      "d63b9bf7-aadd-4f4c-a128-012152345b81",
      "6ae29522-5db8-4adb-bb68-7ee0c2377048",
      "f9d98d13-7e70-4467-b4eb-3f335f903d71",
      "6d6d4c9f-7fd5-4752-9ff3-b6e6d98981e7",
      "93c80fbd-cff1-4e95-8aa2-7cd78655778f",
      "b7e866f3-9096-45dd-946b-091785fd1fe4",
      "4ec278d2-1dab-43bb-bef9-33c65a8a7a76",
      "bbc091cb-2809-4d03-ac49-b69e465999b8",
      "afc548da-35f8-4a4d-a02a-fb0032d8a33f"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551936363162,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "e016b469-3c6c-4612-9ecd-9a3908995b8a",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551936363162,
    "parent_id": "042e8ddf-c9c4-4b73-8432-0a569a4f0a8a",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Integer Conversions in Function Calls"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936363161,
        "id": "d63b9bf7-aadd-4f4c-a128-012152345b81",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936363161,
        "parent_id": "e016b469-3c6c-4612-9ecd-9a3908995b8a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Given that the function has a proper prototype, integers are widened for calls to functions according to the rules of integer conversion, C11 6.3.1.3."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Given that the function has a proper prototype, integers are widened for calls to functions according to the rules of integer conversion, C11 6.3.1.3."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936363161,
        "id": "6ae29522-5db8-4adb-bb68-7ee0c2377048",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936363161,
        "parent_id": "e016b469-3c6c-4612-9ecd-9a3908995b8a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "6.3.1.3 Signed and unsigned integers"
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "6.3.1.3 Signed and unsigned integers"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936363161,
        "id": "f9d98d13-7e70-4467-b4eb-3f335f903d71",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936363161,
        "parent_id": "e016b469-3c6c-4612-9ecd-9a3908995b8a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When a value with integer type is converted to another integer type other than _Bool, if the value can \u003e be represented by the new type, it is unchanged."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When a value with integer type is converted to another integer type other than _Bool, if the value can \u003e be represented by the new type, it is unchanged."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936363162,
        "id": "6d6d4c9f-7fd5-4752-9ff3-b6e6d98981e7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936363162,
        "parent_id": "e016b469-3c6c-4612-9ecd-9a3908995b8a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Otherwise, if the new type is unsigned, the value is converted by \u003e repeatedly adding or subtracting one more than the maximum value that \u003e can be represented in the new type until the value is in the range of \u003e the new type."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Otherwise, if the new type is unsigned, the value is converted by \u003e repeatedly adding or subtracting one more than the maximum value that \u003e can be represented in the new type until the value is in the range of \u003e the new type."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936363162,
        "id": "93c80fbd-cff1-4e95-8aa2-7cd78655778f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936363162,
        "parent_id": "e016b469-3c6c-4612-9ecd-9a3908995b8a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Otherwise, the new type is signed and the value cannot be represented \u003e in it; either the result is implementation-defined or an \u003e implementation-defined signal is raised."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Otherwise, the new type is signed and the value cannot be represented \u003e in it; either the result is implementation-defined or an \u003e implementation-defined signal is raised."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936363162,
        "id": "b7e866f3-9096-45dd-946b-091785fd1fe4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936363162,
        "parent_id": "e016b469-3c6c-4612-9ecd-9a3908995b8a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Usually you should not truncate a wide signed type to a narrower signed type, because obviously the values can’t fit and there is no clear meaning that this should have. The C standard cited above defines these cases to be “implementation-defined”, that is, they are not portable."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Usually you should not truncate a wide signed type to a narrower signed type, because obviously the values can’t fit and there is no clear meaning that this should have. The C standard cited above defines these cases to be “implementation-defined”, that is, they are not portable."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936363162,
        "id": "4ec278d2-1dab-43bb-bef9-33c65a8a7a76",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936363162,
        "parent_id": "e016b469-3c6c-4612-9ecd-9a3908995b8a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The following example supposes that "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is 32 bit wide."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The following example supposes that "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": " is 32 bit wide."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936363162,
        "id": "bbc091cb-2809-4d03-ac49-b69e465999b8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936363162,
        "parent_id": "e016b469-3c6c-4612-9ecd-9a3908995b8a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cstdio.h\u003e\n#include \u003cstdint.h\u003e\n\nvoid param_u8(uint8_t val) {\n    printf(\"%s val is %d\\n\", __func__, val);  /* val is promoted to int */\n}\n\nvoid param_u16(uint16_t val) {\n    printf(\"%s val is %d\\n\", __func__, val);  /* val is promoted to int */\n}\n\nvoid param_u32(uint32_t val) {\n    printf(\"%s val is %u\\n\", __func__, val);  /* here val fits into unsigned */\n}\n\nvoid param_u64(uint64_t val) {\n    printf(\"%s val is \" PRI64u \"\\n\", __func__, val); /* Fixed with format string */\n}\n\nvoid param_s8(int8_t val) {\n    printf(\"%s val is %d\\n\", __func__, val);  /* val is promoted to int */\n}\n\nvoid param_s16(int16_t val) {\n    printf(\"%s val is %d\\n\", __func__, val);  /* val is promoted to int */\n}\n\nvoid param_s32(int32_t val) {\n    printf(\"%s val is %d\\n\", __func__, val); /* val has same width as int */\n}\n\nvoid param_s64(int64_t val) {\n    printf(\"%s val is \" PRI64d \"\\n\", __func__, val); /* Fixed with format string */\n}\n\nint main(void) {"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cstdio.h\u003e\n#include \u003cstdint.h\u003e\n\nvoid param_u8(uint8_t val) {\n    printf(\"%s val is %d\\n\", __func__, val);  /* val is promoted to int */\n}\n\nvoid param_u16(uint16_t val) {\n    printf(\"%s val is %d\\n\", __func__, val);  /* val is promoted to int */\n}\n\nvoid param_u32(uint32_t val) {\n    printf(\"%s val is %u\\n\", __func__, val);  /* here val fits into unsigned */\n}\n\nvoid param_u64(uint64_t val) {\n    printf(\"%s val is \" PRI64u \"\\n\", __func__, val); /* Fixed with format string */\n}\n\nvoid param_s8(int8_t val) {\n    printf(\"%s val is %d\\n\", __func__, val);  /* val is promoted to int */\n}\n\nvoid param_s16(int16_t val) {\n    printf(\"%s val is %d\\n\", __func__, val);  /* val is promoted to int */\n}\n\nvoid param_s32(int32_t val) {\n    printf(\"%s val is %d\\n\", __func__, val); /* val has same width as int */\n}\n\nvoid param_s64(int64_t val) {\n    printf(\"%s val is \" PRI64d \"\\n\", __func__, val); /* Fixed with format string */\n}\n\nint main(void) {",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936363162,
        "id": "afc548da-35f8-4a4d-a02a-fb0032d8a33f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936363162,
        "parent_id": "e016b469-3c6c-4612-9ecd-9a3908995b8a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "/* Declare integers of various widths */\nuint8_t  u8  = 127;\nuint8_t  s64  = INT64_MAX;\n\n/* Integer argument is widened when function parameter is wider */\nparam_u8(u8);   /* param_u8 val is 127 */\nparam_u16(u8);  /* param_u16 val is 127 */\nparam_u32(u8);  /* param_u32 val is 127 */\nparam_u64(u8);  /* param_u64 val is 127 */\nparam_s8(u8);   /* param_s8 val is 127 */\nparam_s16(u8);  /* param_s16 val is 127 */\nparam_s32(u8);  /* param_s32 val is 127 */\nparam_s64(u8);  /* param_s64 val is 127 */\n\n/* Integer argument is truncated when function parameter is narrower */\nparam_u8(s64);  /* param_u8 val is 255 */\nparam_u16(s64); /* param_u16 val is 65535 */\nparam_u32(s64); /* param_u32 val is 4294967295 */\nparam_u64(s64); /* param_u64 val is 9223372036854775807 */\nparam_s8(s64);  /* param_s8 val is implementation defined */\nparam_s16(s64); /* param_s16 val is implementation defined */\nparam_s32(s64); /* param_s32 val is implementation defined */\nparam_s64(s64); /* param_s64 val is 9223372036854775807 */\n\nreturn 0;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "/* Declare integers of various widths */\nuint8_t  u8  = 127;\nuint8_t  s64  = INT64_MAX;\n\n/* Integer argument is widened when function parameter is wider */\nparam_u8(u8);   /* param_u8 val is 127 */\nparam_u16(u8);  /* param_u16 val is 127 */\nparam_u32(u8);  /* param_u32 val is 127 */\nparam_u64(u8);  /* param_u64 val is 127 */\nparam_s8(u8);   /* param_s8 val is 127 */\nparam_s16(u8);  /* param_s16 val is 127 */\nparam_s32(u8);  /* param_s32 val is 127 */\nparam_s64(u8);  /* param_s64 val is 127 */\n\n/* Integer argument is truncated when function parameter is narrower */\nparam_u8(s64);  /* param_u8 val is 255 */\nparam_u16(s64); /* param_u16 val is 65535 */\nparam_u32(s64); /* param_u32 val is 4294967295 */\nparam_u64(s64); /* param_u64 val is 9223372036854775807 */\nparam_s8(s64);  /* param_s8 val is implementation defined */\nparam_s16(s64); /* param_s16 val is implementation defined */\nparam_s32(s64); /* param_s32 val is implementation defined */\nparam_s64(s64); /* param_s64 val is 9223372036854775807 */\n\nreturn 0;\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "Integer Conversions in Function Calls",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}