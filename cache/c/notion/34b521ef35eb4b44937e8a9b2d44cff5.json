{
  "ID": "34b521ef-35eb-4b44-937e-8a9b2d44cff5",
  "Root": {
    "alive": true,
    "content": [
      "b420d9dc-7d08-4168-9e47-8bd01e7fd933",
      "385d8d4d-50c0-47bb-9a6f-662a32214fa4",
      "e28117e1-ba73-4fd2-a035-0ef30a404085",
      "f394769e-1627-4385-93b7-14e052d86867",
      "367e7e74-75fa-4610-9f59-229016d129cd",
      "a1d659d3-202b-4551-9d80-1b157c296b92"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551937175160,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "34b521ef-35eb-4b44-937e-8a9b2d44cff5",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551937175160,
    "parent_id": "ae726a5e-8d12-41b2-9bd8-209da2cca404",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "atomics and operators"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551937175156,
        "id": "b420d9dc-7d08-4168-9e47-8bd01e7fd933",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551937175156,
        "parent_id": "34b521ef-35eb-4b44-937e-8a9b2d44cff5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Atomic variables can be accessed concurrently between different threads without creating race conditions."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Atomic variables can be accessed concurrently between different threads without creating race conditions."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551937175158,
        "id": "385d8d4d-50c0-47bb-9a6f-662a32214fa4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551937175158,
        "parent_id": "34b521ef-35eb-4b44-937e-8a9b2d44cff5",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "/* a global static variable that is visible by all threads */\nstatic unsigned _Atomic active = ATOMIC_VAR_INIT(0);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "/* a global static variable that is visible by all threads */\nstatic unsigned _Atomic active = ATOMIC_VAR_INIT(0);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551937175158,
        "id": "e28117e1-ba73-4fd2-a035-0ef30a404085",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551937175158,
        "parent_id": "34b521ef-35eb-4b44-937e-8a9b2d44cff5",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int myThread(void* a) {\n  ++active;         // increment active race free\n  // do something\n  --active;         // decrement active race free\n  return 0;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int myThread(void* a) {\n  ++active;         // increment active race free\n  // do something\n  --active;         // decrement active race free\n  return 0;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551937175159,
        "id": "f394769e-1627-4385-93b7-14e052d86867",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551937175159,
        "parent_id": "34b521ef-35eb-4b44-937e-8a9b2d44cff5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "All lvalue operations (operations that modify the object) that are allowed for the base type are allowed and will not lead to race conditions between different threads that access them."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "All lvalue operations (operations that modify the object) that are allowed for the base type are allowed and will not lead to race conditions between different threads that access them."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551937175159,
        "id": "367e7e74-75fa-4610-9f59-229016d129cd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551937175159,
        "parent_id": "34b521ef-35eb-4b44-937e-8a9b2d44cff5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Operations on atomic objects are generally orders of magnitude slower than normal arithmetic operations. This also includes simple load or store operations. So you should only use them for critical tasks."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Operations on atomic objects are generally orders of magnitude slower than normal arithmetic operations. This also includes simple load or store operations. So you should only use them for critical tasks."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551937175159,
        "id": "a1d659d3-202b-4551-9d80-1b157c296b92",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551937175159,
        "parent_id": "34b521ef-35eb-4b44-937e-8a9b2d44cff5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Usual arithmetic operations and assignment such as "
            ],
            [
              "a = a+1;",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " are in fact three operations on "
            ],
            [
              "a",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ": first a load, then addition and finally a store. This is "
            ],
            [
              "not",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " race free. Only the operation "
            ],
            [
              "a += 1;",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "a++;",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " are."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Usual arithmetic operations and assignment such as "
          },
          {
            "Text": "a = a+1;",
            "AttrFlags": 2
          },
          {
            "Text": " are in fact three operations on "
          },
          {
            "Text": "a",
            "AttrFlags": 2
          },
          {
            "Text": ": first a load, then addition and finally a store. This is "
          },
          {
            "Text": "not",
            "AttrFlags": 4
          },
          {
            "Text": " race free. Only the operation "
          },
          {
            "Text": "a += 1;",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "a++;",
            "AttrFlags": 2
          },
          {
            "Text": " are."
          }
        ]
      }
    ],
    "title": "atomics and operators",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}