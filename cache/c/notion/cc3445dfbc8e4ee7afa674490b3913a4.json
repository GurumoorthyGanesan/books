{
  "ID": "cc3445df-bc8e-4ee7-afa6-74490b3913a4",
  "Root": {
    "alive": true,
    "content": [
      "682a53c2-ab2a-49dd-b120-66094227b934",
      "1bdcdd39-a65b-4d82-9b5e-70c7ff7b89c9",
      "1fce3982-7119-4436-9ab3-cd52daa0670c",
      "efa43d9d-927c-480e-93aa-38fb2a557a7b",
      "f5ce0146-5fa6-4a04-8c2b-463d64fac650",
      "84e1613c-d8ba-4eda-9273-88ae424da961",
      "816dee68-0c12-4d3b-b185-5ce8b87b011d",
      "b988f883-f278-4016-aa6a-b7bcb896c82d",
      "f80c12b7-0c40-42af-82a6-3a95d2127880",
      "42e3d7f4-3450-4a91-ae7f-76a870429fe2",
      "3764af17-5453-4c87-9b60-ef04928b7b7e",
      "52d67441-d948-41bd-a823-212cbd2873ca",
      "e5ce28db-9e36-470e-9130-2283a279c6e7",
      "cb1f1a1c-26df-47b7-9014-638b2ac2664c",
      "4b162b68-3de4-442b-85b5-5ffb26a6ca6e",
      "0a7729a0-ee85-40bb-8cfc-060787d1408a",
      "b5d03d93-f8a3-4a86-9cb5-0beedd0c2179",
      "58187479-8d9a-4540-bc7b-230baea24342",
      "e830acb1-91e4-440c-99f3-87f3b8b21f2f",
      "4d27e914-14f0-411a-9388-78fd21c5937f",
      "46aa724b-fce4-43b2-aa9e-ceb6427b38c1"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551935642356,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "cc3445df-bc8e-4ee7-afa6-74490b3913a4",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551935642356,
    "parent_id": "218cbf42-b3ba-4b2a-bdab-e522009865b7",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Access Operators"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935642351,
        "id": "682a53c2-ab2a-49dd-b120-66094227b934",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935642351,
        "parent_id": "cc3445df-bc8e-4ee7-afa6-74490b3913a4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The member access operators (dot "
            ],
            [
              ".",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and arrow "
            ],
            [
              "-\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") are used to access a member of a "
            ],
            [
              "struct",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The member access operators (dot "
          },
          {
            "Text": ".",
            "AttrFlags": 2
          },
          {
            "Text": " and arrow "
          },
          {
            "Text": "-\u003e",
            "AttrFlags": 2
          },
          {
            "Text": ") are used to access a member of a "
          },
          {
            "Text": "struct",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935642354,
        "id": "1bdcdd39-a65b-4d82-9b5e-70c7ff7b89c9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935642354,
        "parent_id": "cc3445df-bc8e-4ee7-afa6-74490b3913a4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Member of object"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Member of object"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935642354,
        "id": "1fce3982-7119-4436-9ab3-cd52daa0670c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935642354,
        "parent_id": "cc3445df-bc8e-4ee7-afa6-74490b3913a4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Evaluates into the lvalue denoting the object that is a member of the accessed object."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Evaluates into the lvalue denoting the object that is a member of the accessed object."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935642354,
        "id": "efa43d9d-927c-480e-93aa-38fb2a557a7b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935642354,
        "parent_id": "cc3445df-bc8e-4ee7-afa6-74490b3913a4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "struct MyStruct\n{\n    int x;\n    int y;\n};\n\nstruct MyStruct myObject;\nmyObject.x = 42;\nmyObject.y = 123;\n\nprintf(\".x = %i, .y = %i\\n\", myObject.x, myObject.y); /* Outputs \".x = 42, .y = 123\". */"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "struct MyStruct\n{\n    int x;\n    int y;\n};\n\nstruct MyStruct myObject;\nmyObject.x = 42;\nmyObject.y = 123;\n\nprintf(\".x = %i, .y = %i\\n\", myObject.x, myObject.y); /* Outputs \".x = 42, .y = 123\". */",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935642354,
        "id": "f5ce0146-5fa6-4a04-8c2b-463d64fac650",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935642354,
        "parent_id": "cc3445df-bc8e-4ee7-afa6-74490b3913a4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Member of pointed-to object"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Member of pointed-to object"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935642354,
        "id": "84e1613c-d8ba-4eda-9273-88ae424da961",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935642354,
        "parent_id": "cc3445df-bc8e-4ee7-afa6-74490b3913a4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Syntactic sugar for dereferencing followed by member access. Effectively, an expression of the form "
            ],
            [
              "x-\u003ey",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is shorthand for "
            ],
            [
              "(*x).y",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " — but the arrow operator is much clearer, especially if the structure pointers are nested."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Syntactic sugar for dereferencing followed by member access. Effectively, an expression of the form "
          },
          {
            "Text": "x-\u003ey",
            "AttrFlags": 2
          },
          {
            "Text": " is shorthand for "
          },
          {
            "Text": "(*x).y",
            "AttrFlags": 2
          },
          {
            "Text": " — but the arrow operator is much clearer, especially if the structure pointers are nested."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935642355,
        "id": "816dee68-0c12-4d3b-b185-5ce8b87b011d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935642355,
        "parent_id": "cc3445df-bc8e-4ee7-afa6-74490b3913a4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "struct MyStruct\n{\n    int x;\n    int y;\n};\n\nstruct MyStruct myObject;\nstruct MyStruct *p = \u0026myObject;\n\np-\u003ex = 42;\np-\u003ey = 123;\n\nprintf(\".x = %i, .y = %i\\n\", p-\u003ex, p-\u003ey); /* Outputs \".x = 42, .y = 123\". */\nprintf(\".x = %i, .y = %i\\n\", myObject.x, myObject.y); /* Also outputs \".x = 42, .y = 123\". */"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "struct MyStruct\n{\n    int x;\n    int y;\n};\n\nstruct MyStruct myObject;\nstruct MyStruct *p = \u0026myObject;\n\np-\u003ex = 42;\np-\u003ey = 123;\n\nprintf(\".x = %i, .y = %i\\n\", p-\u003ex, p-\u003ey); /* Outputs \".x = 42, .y = 123\". */\nprintf(\".x = %i, .y = %i\\n\", myObject.x, myObject.y); /* Also outputs \".x = 42, .y = 123\". */",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935642355,
        "id": "b988f883-f278-4016-aa6a-b7bcb896c82d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935642355,
        "parent_id": "cc3445df-bc8e-4ee7-afa6-74490b3913a4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Address-of"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Address-of"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935642355,
        "id": "f80c12b7-0c40-42af-82a6-3a95d2127880",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935642355,
        "parent_id": "cc3445df-bc8e-4ee7-afa6-74490b3913a4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The unary "
            ],
            [
              "\u0026",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " operator is the address of operator. It evaluates the given expression, where the resulting object must be an lvalue. Then, it evaluates into an object whose type is a pointer to the resulting object’s type, and contains the address of the resulting object."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The unary "
          },
          {
            "Text": "\u0026",
            "AttrFlags": 2
          },
          {
            "Text": " operator is the address of operator. It evaluates the given expression, where the resulting object must be an lvalue. Then, it evaluates into an object whose type is a pointer to the resulting object’s type, and contains the address of the resulting object."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935642355,
        "id": "42e3d7f4-3450-4a91-ae7f-76a870429fe2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935642355,
        "parent_id": "cc3445df-bc8e-4ee7-afa6-74490b3913a4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int x = 3;\nint *p = \u0026x;\nprintf(\"%p = %p\\n\", （void *)\u0026x, (void *)p); /* Outputs \"A = A\", for some implementation-defined A. */"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int x = 3;\nint *p = \u0026x;\nprintf(\"%p = %p\\n\", （void *)\u0026x, (void *)p); /* Outputs \"A = A\", for some implementation-defined A. */",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935642355,
        "id": "3764af17-5453-4c87-9b60-ef04928b7b7e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935642355,
        "parent_id": "cc3445df-bc8e-4ee7-afa6-74490b3913a4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Dereference"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Dereference"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935642355,
        "id": "52d67441-d948-41bd-a823-212cbd2873ca",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935642355,
        "parent_id": "cc3445df-bc8e-4ee7-afa6-74490b3913a4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The unary "
            ],
            [
              "\\*",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " operator dereferences a pointer. It evaluates into the lvalue resulting from dereferencing the pointer that results from evaluating the given expression."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The unary "
          },
          {
            "Text": "\\*",
            "AttrFlags": 2
          },
          {
            "Text": " operator dereferences a pointer. It evaluates into the lvalue resulting from dereferencing the pointer that results from evaluating the given expression."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935642355,
        "id": "e5ce28db-9e36-470e-9130-2283a279c6e7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935642355,
        "parent_id": "cc3445df-bc8e-4ee7-afa6-74490b3913a4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int x = 42;\nint *p = \u0026x;\nprintf(\"x = %d, *p = %d\\n\", x, *p); /* Outputs \"x = 42, *p = 42\". */\n\n*p = 123;\nprintf(\"x = %d, *p = %d\\n\", x, *p); /* Outputs \"x = 123, *p = 123\". */"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int x = 42;\nint *p = \u0026x;\nprintf(\"x = %d, *p = %d\\n\", x, *p); /* Outputs \"x = 42, *p = 42\". */\n\n*p = 123;\nprintf(\"x = %d, *p = %d\\n\", x, *p); /* Outputs \"x = 123, *p = 123\". */",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935642355,
        "id": "cb1f1a1c-26df-47b7-9014-638b2ac2664c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935642355,
        "parent_id": "cc3445df-bc8e-4ee7-afa6-74490b3913a4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Indexing"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Indexing"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935642356,
        "id": "4b162b68-3de4-442b-85b5-5ffb26a6ca6e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935642356,
        "parent_id": "cc3445df-bc8e-4ee7-afa6-74490b3913a4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Indexing is syntactic sugar for pointer addition followed by dereferencing. Effectively, an expression of the form "
            ],
            [
              "a[i]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is equivalent to "
            ],
            [
              "*(a + i)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " — but the explicit subscript notation is preferred."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Indexing is syntactic sugar for pointer addition followed by dereferencing. Effectively, an expression of the form "
          },
          {
            "Text": "a[i]",
            "AttrFlags": 2
          },
          {
            "Text": " is equivalent to "
          },
          {
            "Text": "*(a + i)",
            "AttrFlags": 2
          },
          {
            "Text": " — but the explicit subscript notation is preferred."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935642356,
        "id": "0a7729a0-ee85-40bb-8cfc-060787d1408a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935642356,
        "parent_id": "cc3445df-bc8e-4ee7-afa6-74490b3913a4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int arr[] = { 1, 2, 3, 4, 5 };\nprintf(\"arr[2] = %i\\n\", arr[2]); /* Outputs \"arr[2] = 3\". */"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int arr[] = { 1, 2, 3, 4, 5 };\nprintf(\"arr[2] = %i\\n\", arr[2]); /* Outputs \"arr[2] = 3\". */",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935642356,
        "id": "b5d03d93-f8a3-4a86-9cb5-0beedd0c2179",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935642356,
        "parent_id": "cc3445df-bc8e-4ee7-afa6-74490b3913a4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Interchangeability of indexing"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Interchangeability of indexing"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935642356,
        "id": "58187479-8d9a-4540-bc7b-230baea24342",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935642356,
        "parent_id": "cc3445df-bc8e-4ee7-afa6-74490b3913a4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Adding a pointer to an integer is a commutative operation (i.e. the order of the operands does not change the result) so "
            ],
            [
              "pointer + integer == integer + pointer",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Adding a pointer to an integer is a commutative operation (i.e. the order of the operands does not change the result) so "
          },
          {
            "Text": "pointer + integer == integer + pointer",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935642356,
        "id": "e830acb1-91e4-440c-99f3-87f3b8b21f2f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935642356,
        "parent_id": "cc3445df-bc8e-4ee7-afa6-74490b3913a4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A consequence of this is that "
            ],
            [
              "arr[3]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "3[arr]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " are equivalent."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A consequence of this is that "
          },
          {
            "Text": "arr[3]",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "3[arr]",
            "AttrFlags": 2
          },
          {
            "Text": " are equivalent."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935642356,
        "id": "4d27e914-14f0-411a-9388-78fd21c5937f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935642356,
        "parent_id": "cc3445df-bc8e-4ee7-afa6-74490b3913a4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "printf(\"3[arr] = %i\\n\", 3[arr]); /* Outputs \"3[arr] = 4\". */"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "printf(\"3[arr] = %i\\n\", 3[arr]); /* Outputs \"3[arr] = 4\". */",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935642356,
        "id": "46aa724b-fce4-43b2-aa9e-ceb6427b38c1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935642356,
        "parent_id": "cc3445df-bc8e-4ee7-afa6-74490b3913a4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Usage of an expression "
            ],
            [
              "3[arr]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " instead of "
            ],
            [
              "arr[3]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is generally not recommended, as it affects code readability. It tends to be a popular in obfuscated programming contests."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Usage of an expression "
          },
          {
            "Text": "3[arr]",
            "AttrFlags": 2
          },
          {
            "Text": " instead of "
          },
          {
            "Text": "arr[3]",
            "AttrFlags": 2
          },
          {
            "Text": " is generally not recommended, as it affects code readability. It tends to be a popular in obfuscated programming contests."
          }
        ]
      }
    ],
    "title": "Access Operators",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}