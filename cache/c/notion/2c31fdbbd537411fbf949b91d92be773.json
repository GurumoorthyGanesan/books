{
  "ID": "2c31fdbb-d537-411f-bf94-9b91d92be773",
  "Root": {
    "alive": true,
    "content": [
      "de639905-6c70-4202-abf9-6dd4c21a6af5",
      "55ae37ea-51ed-44a6-8419-efda0771314d",
      "bf0f7b1c-39c3-4e09-ae49-043cf215b72c",
      "51fb4ebb-c229-4c2a-8afd-7f246e6c1fed",
      "94a73070-1af9-4863-b89a-bf3cf65a827a",
      "723dc61d-fd4c-44a1-8fec-6f034476602e",
      "0242caf2-a379-4861-8130-c8a17ad9b765",
      "ff238291-bf75-4ab8-8b0c-b268bbea153f"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551936264838,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "2c31fdbb-d537-411f-bf94-9b91d92be773",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551936264838,
    "parent_id": "fb1c49da-f858-420f-804f-317776d975e9",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Character types cannot be accessed through non-character types."
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936264836,
        "id": "de639905-6c70-4202-abf9-6dd4c21a6af5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936264836,
        "parent_id": "2c31fdbb-d537-411f-bf94-9b91d92be773",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If an object is defined with static, thread, or automatic storage duration, and it has a character type, either: "
            ],
            [
              "char",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "unsigned char",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", or "
            ],
            [
              "signed char",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", it may not be accessed by a non-character type. In the below example a "
            ],
            [
              "char",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " array is reinterpreted as the type "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", and the behavior is undefined on every dereference of the "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " pointer "
            ],
            [
              "b",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If an object is defined with static, thread, or automatic storage duration, and it has a character type, either: "
          },
          {
            "Text": "char",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "unsigned char",
            "AttrFlags": 2
          },
          {
            "Text": ", or "
          },
          {
            "Text": "signed char",
            "AttrFlags": 2
          },
          {
            "Text": ", it may not be accessed by a non-character type. In the below example a "
          },
          {
            "Text": "char",
            "AttrFlags": 2
          },
          {
            "Text": " array is reinterpreted as the type "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": ", and the behavior is undefined on every dereference of the "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": " pointer "
          },
          {
            "Text": "b",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936264836,
        "id": "55ae37ea-51ed-44a6-8419-efda0771314d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936264836,
        "parent_id": "2c31fdbb-d537-411f-bf94-9b91d92be773",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int main( void )\n{\n    char a[100];\n    int* b = ( int* )\u0026a;\n    *b = 1;      \n\n    static char c[100];\n    b = ( int* )\u0026c;\n    *b = 2;\n\n    _Thread_local char d[100];\n    b = ( int* )\u0026d;\n    *b = 3;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int main( void )\n{\n    char a[100];\n    int* b = ( int* )\u0026a;\n    *b = 1;      \n\n    static char c[100];\n    b = ( int* )\u0026c;\n    *b = 2;\n\n    _Thread_local char d[100];\n    b = ( int* )\u0026d;\n    *b = 3;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936264837,
        "id": "bf0f7b1c-39c3-4e09-ae49-043cf215b72c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936264837,
        "parent_id": "2c31fdbb-d537-411f-bf94-9b91d92be773",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This is undefined because it violates the “effective type” rule, no data object that has an effective type may be accessed through another type that is not a character type. Since the other type here is "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", this is not allowed."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This is undefined because it violates the “effective type” rule, no data object that has an effective type may be accessed through another type that is not a character type. Since the other type here is "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": ", this is not allowed."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936264837,
        "id": "51fb4ebb-c229-4c2a-8afd-7f246e6c1fed",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936264837,
        "parent_id": "2c31fdbb-d537-411f-bf94-9b91d92be773",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Even if alignment and pointer sizes would be known to fit, this would not exempt from this rule, behavior would still be undefined."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Even if alignment and pointer sizes would be known to fit, this would not exempt from this rule, behavior would still be undefined."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936264837,
        "id": "94a73070-1af9-4863-b89a-bf3cf65a827a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936264837,
        "parent_id": "2c31fdbb-d537-411f-bf94-9b91d92be773",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This means in particular that there is no way in standard C to reserve a buffer object of character type that can be used through pointers with different types, as you would use a buffer that was received by "
            ],
            [
              "malloc",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or similar function."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This means in particular that there is no way in standard C to reserve a buffer object of character type that can be used through pointers with different types, as you would use a buffer that was received by "
          },
          {
            "Text": "malloc",
            "AttrFlags": 2
          },
          {
            "Text": " or similar function."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936264837,
        "id": "723dc61d-fd4c-44a1-8fec-6f034476602e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936264837,
        "parent_id": "2c31fdbb-d537-411f-bf94-9b91d92be773",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A correct way to achieve the same goal as in the above example would be to use a "
            ],
            [
              "union",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A correct way to achieve the same goal as in the above example would be to use a "
          },
          {
            "Text": "union",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936264837,
        "id": "0242caf2-a379-4861-8130-c8a17ad9b765",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936264837,
        "parent_id": "2c31fdbb-d537-411f-bf94-9b91d92be773",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "typedef union bufType bufType;\nunion bufType {\n   char c[sizeof(int[25])];\n   int i[25];\n};\n\nint main( void )\n{\n    bufType a = { .c = { 0 } }; // reserve a buffer and initialize\n    int* b = a.i;      // no cast necessary\n    *b = 1;      \n\n    static bufType a = { .c = { 0 } };\n    int* b = a.i;\n    *b = 2;\n\n    _Thread_local bufType a = { .c = { 0 } };\n    int* b = a.i;\n    *b = 3;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "typedef union bufType bufType;\nunion bufType {\n   char c[sizeof(int[25])];\n   int i[25];\n};\n\nint main( void )\n{\n    bufType a = { .c = { 0 } }; // reserve a buffer and initialize\n    int* b = a.i;      // no cast necessary\n    *b = 1;      \n\n    static bufType a = { .c = { 0 } };\n    int* b = a.i;\n    *b = 2;\n\n    _Thread_local bufType a = { .c = { 0 } };\n    int* b = a.i;\n    *b = 3;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936264838,
        "id": "ff238291-bf75-4ab8-8b0c-b268bbea153f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936264838,
        "parent_id": "2c31fdbb-d537-411f-bf94-9b91d92be773",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Here, the "
            ],
            [
              "union",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " ensures that the compiler knows from the start that the buffer could be accessed through different views. This also has the advantage that now the buffer has a “view” "
            ],
            [
              "a.i",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " that already is of type "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and no pointer conversion is needed."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Here, the "
          },
          {
            "Text": "union",
            "AttrFlags": 2
          },
          {
            "Text": " ensures that the compiler knows from the start that the buffer could be accessed through different views. This also has the advantage that now the buffer has a “view” "
          },
          {
            "Text": "a.i",
            "AttrFlags": 2
          },
          {
            "Text": " that already is of type "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": " and no pointer conversion is needed."
          }
        ]
      }
    ],
    "title": "Character types cannot be accessed through non-character types.",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}