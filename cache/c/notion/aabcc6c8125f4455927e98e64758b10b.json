{
  "ID": "aabcc6c8-125f-4455-927e-98e64758b10b",
  "Root": {
    "alive": true,
    "content": [
      "fff533d8-3421-4551-b2ed-9c984bce8252",
      "b51e87cd-6899-4c57-8570-e142ace67474",
      "781642bf-f85a-40dc-938e-b07cc78b3d89"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551936364178,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "aabcc6c8-125f-4455-927e-98e64758b10b",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551936364178,
    "parent_id": "042e8ddf-c9c4-4b73-8432-0a569a4f0a8a",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Pointer Conversions in Function Calls"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936364175,
        "id": "fff533d8-3421-4551-b2ed-9c984bce8252",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936364175,
        "parent_id": "aabcc6c8-125f-4455-927e-98e64758b10b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Pointer conversions to "
            ],
            [
              "void*",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " are implicit, but any other pointer conversion must be explicit. While the compiler allows an explicit conversion from any pointer-to-data type to any other pointer-to-data type, accessing an object through a wrongly typed pointer is erroneous and leads to undefined behavior. The only case that these are allowed are if the types are compatible or if the pointer with which your are looking at the object is a character type."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Pointer conversions to "
          },
          {
            "Text": "void*",
            "AttrFlags": 2
          },
          {
            "Text": " are implicit, but any other pointer conversion must be explicit. While the compiler allows an explicit conversion from any pointer-to-data type to any other pointer-to-data type, accessing an object through a wrongly typed pointer is erroneous and leads to undefined behavior. The only case that these are allowed are if the types are compatible or if the pointer with which your are looking at the object is a character type."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936364177,
        "id": "b51e87cd-6899-4c57-8570-e142ace67474",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936364177,
        "parent_id": "aabcc6c8-125f-4455-927e-98e64758b10b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cstdio.h\u003e\n\nvoid func_voidp(void* voidp) {\n    printf(\"%s Address of ptr is %p\\n\", __func__, voidp);\n}\n\n/* Structures have same shape, but not same type */\nstruct struct_a {\n    int a;\n    int b;\n} data_a;\n\nstruct struct_b {\n    int a;\n    int b;\n} data_b;\n\nvoid func_struct_b(struct struct_b* bp) {\n    printf(\"%s Address of ptr is %p\\n\", __func__, (void*) bp);\n}\n\nint main(void) {"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cstdio.h\u003e\n\nvoid func_voidp(void* voidp) {\n    printf(\"%s Address of ptr is %p\\n\", __func__, voidp);\n}\n\n/* Structures have same shape, but not same type */\nstruct struct_a {\n    int a;\n    int b;\n} data_a;\n\nstruct struct_b {\n    int a;\n    int b;\n} data_b;\n\nvoid func_struct_b(struct struct_b* bp) {\n    printf(\"%s Address of ptr is %p\\n\", __func__, (void*) bp);\n}\n\nint main(void) {",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936364178,
        "id": "781642bf-f85a-40dc-938e-b07cc78b3d89",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936364178,
        "parent_id": "aabcc6c8-125f-4455-927e-98e64758b10b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "/* Implicit ptr conversion allowed for void* */\nfunc_voidp(\u0026data_a);\n\n/*\n * Explicit ptr conversion for other types\n *\n * Note that here although the have identical definitions,\n * the types are not compatible, and that the this call is\n * erroneous and leads to undefined behavior on execution.\n */\nfunc_struct_b((struct struct_b*)\u0026data_a);\n\n/* My output shows: */\n/* func_charp Address of ptr is 0x601030 */\n/* func_voidp Address of ptr is 0x601030 */\n/* func_struct_b Address of ptr is 0x601030 */\n\nreturn 0;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "/* Implicit ptr conversion allowed for void* */\nfunc_voidp(\u0026data_a);\n\n/*\n * Explicit ptr conversion for other types\n *\n * Note that here although the have identical definitions,\n * the types are not compatible, and that the this call is\n * erroneous and leads to undefined behavior on execution.\n */\nfunc_struct_b((struct struct_b*)\u0026data_a);\n\n/* My output shows: */\n/* func_charp Address of ptr is 0x601030 */\n/* func_voidp Address of ptr is 0x601030 */\n/* func_struct_b Address of ptr is 0x601030 */\n\nreturn 0;\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "Pointer Conversions in Function Calls",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}