{
  "ID": "dc9a544f-49a5-43c1-a2d3-ca24c0a52a3c",
  "Root": {
    "alive": true,
    "content": [
      "d0865825-2acf-4d88-b78e-17ba596c22f2",
      "4dadf9ab-85e0-4b4c-8ce7-f9e02dab18dd",
      "a00f9718-13d3-4918-8f85-6f4fc3f0caf3",
      "f6525922-d927-4eca-b602-b189875768f4",
      "1d6985ca-9bc7-4c6b-90ff-9814247e763e",
      "fec2761d-d96c-4b7f-99d3-e7e143cff422",
      "6a50aaf2-429f-4255-b550-4de3ba556d94",
      "ede44f83-9355-441b-8810-2cb43a9c6da2",
      "a0d30f75-f884-4c6f-abeb-a37a8be9bba1",
      "066e62b8-d60d-4fb9-8b28-56152d8419d4",
      "f1a96861-fcaf-4147-909f-2a84fed72f58",
      "2d19ca34-a95c-4b16-b5fc-6da7da4bc556",
      "cb0df4fa-086c-4dce-9bb3-ec281cee5706",
      "9c5535fa-54ae-4cff-8ef9-3b3c4acb5655",
      "9ef4b6b5-38f1-4dcd-8321-c9b81b1ffced",
      "a39bcd47-884e-46f0-832f-0541de8de5bc",
      "8407ee28-1061-41a4-bdfe-326652b329f3",
      "67db37e7-c9f3-4d3c-8d3a-e820d284286f"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551935639624,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "dc9a544f-49a5-43c1-a2d3-ca24c0a52a3c",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551935639624,
    "parent_id": "218cbf42-b3ba-4b2a-bdab-e522009865b7",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Bitwise Operators"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935639618,
        "id": "d0865825-2acf-4d88-b78e-17ba596c22f2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935639618,
        "parent_id": "dc9a544f-49a5-43c1-a2d3-ca24c0a52a3c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Bitwise operators can be used to perform bit level operation on variables."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Bitwise operators can be used to perform bit level operation on variables."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935639621,
        "id": "4dadf9ab-85e0-4b4c-8ce7-f9e02dab18dd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935639621,
        "parent_id": "dc9a544f-49a5-43c1-a2d3-ca24c0a52a3c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Below is a list of all six bitwise operators supported in C:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Below is a list of all six bitwise operators supported in C:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935639621,
        "id": "a00f9718-13d3-4918-8f85-6f4fc3f0caf3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935639621,
        "parent_id": "dc9a544f-49a5-43c1-a2d3-ca24c0a52a3c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Symbol | Operator |\n—— | —————————––|\n\u0026 | bitwise AND |\n| | bitwise inclusive OR |\n^ | bitwise exclusive OR (XOR) |\n~ | bitwise not (one’s complement) |\n\u003c\u003c | logical left shift |\n\u003e\u003e | logical right shift |"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Symbol | Operator |\n—— | —————————––|\n\u0026 | bitwise AND |\n| | bitwise inclusive OR |\n^ | bitwise exclusive OR (XOR) |\n~ | bitwise not (one’s complement) |\n\u003c\u003c | logical left shift |\n\u003e\u003e | logical right shift |"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935639621,
        "id": "f6525922-d927-4eca-b602-b189875768f4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935639621,
        "parent_id": "dc9a544f-49a5-43c1-a2d3-ca24c0a52a3c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Following program illustrates the use of all bitwise operators:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Following program illustrates the use of all bitwise operators:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935639621,
        "id": "1d6985ca-9bc7-4c6b-90ff-9814247e763e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935639621,
        "parent_id": "dc9a544f-49a5-43c1-a2d3-ca24c0a52a3c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cstdio.h\u003e\n\nint main(void)\n{\n   unsigned int a = 29;    /* 29 = 0001 1101 */  \n   unsigned int b = 48;    /* 48 = 0011 0000 */\n   int c = 0;           \n\n   c = a \u0026 b;              /* 32 = 0001 0000 */ \n   printf(\"%d \u0026 %d = %d\\n\", a, b, c );\n\n   c = a | b;              /* 61 = 0011 1101 */\n   printf(\"%d | %d = %d\\n\", a, b, c );\n\n   c = a ^ b;              /* 45 = 0010 1101 */\n   printf(\"%d ^ %d = %d\\n\", a, b, c );\n\n   c = ~a;                 /* -30 = 1110 0010 */\n   printf(\"~%d = %d\\n\", a, c );\n\n   c = a \u003c\u003c 2;             /* 116 = 0111 0100 */\n   printf(\"%d \u003c\u003c 2 = %d\\n\", a, c );\n\n   c = a \u003e\u003e 2;             /* 7 = 0000 0111 */\n   printf(\"%d \u003e\u003e 2 = %d\\n\", a, c );\n\n   return 0;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cstdio.h\u003e\n\nint main(void)\n{\n   unsigned int a = 29;    /* 29 = 0001 1101 */  \n   unsigned int b = 48;    /* 48 = 0011 0000 */\n   int c = 0;           \n\n   c = a \u0026 b;              /* 32 = 0001 0000 */ \n   printf(\"%d \u0026 %d = %d\\n\", a, b, c );\n\n   c = a | b;              /* 61 = 0011 1101 */\n   printf(\"%d | %d = %d\\n\", a, b, c );\n\n   c = a ^ b;              /* 45 = 0010 1101 */\n   printf(\"%d ^ %d = %d\\n\", a, b, c );\n\n   c = ~a;                 /* -30 = 1110 0010 */\n   printf(\"~%d = %d\\n\", a, c );\n\n   c = a \u003c\u003c 2;             /* 116 = 0111 0100 */\n   printf(\"%d \u003c\u003c 2 = %d\\n\", a, c );\n\n   c = a \u003e\u003e 2;             /* 7 = 0000 0111 */\n   printf(\"%d \u003e\u003e 2 = %d\\n\", a, c );\n\n   return 0;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935639621,
        "id": "fec2761d-d96c-4b7f-99d3-e7e143cff422",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935639621,
        "parent_id": "dc9a544f-49a5-43c1-a2d3-ca24c0a52a3c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Bitwise operations with signed types should be avoided because the sign bit of such a bit representation has a particular meaning. Particular restrictions apply to the shift operators:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Bitwise operations with signed types should be avoided because the sign bit of such a bit representation has a particular meaning. Particular restrictions apply to the shift operators:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935639622,
        "id": "6a50aaf2-429f-4255-b550-4de3ba556d94",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935639622,
        "parent_id": "dc9a544f-49a5-43c1-a2d3-ca24c0a52a3c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Left shifting a 1 bit into the signed bit is erroneous and leads to undefined behavior."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Left shifting a 1 bit into the signed bit is erroneous and leads to undefined behavior."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935639622,
        "id": "ede44f83-9355-441b-8810-2cb43a9c6da2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935639622,
        "parent_id": "dc9a544f-49a5-43c1-a2d3-ca24c0a52a3c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Right shifting a negative value (with sign bit 1) is implementation defined and therefore not portable."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Right shifting a negative value (with sign bit 1) is implementation defined and therefore not portable."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935639623,
        "id": "a0d30f75-f884-4c6f-abeb-a37a8be9bba1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935639623,
        "parent_id": "dc9a544f-49a5-43c1-a2d3-ca24c0a52a3c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If the value of the right operand of a shift operator is negative or is greater than or equal to the width of the promoted left operand, the behavior is undefined."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "If the value of the right operand of a shift operator is negative or is greater than or equal to the width of the promoted left operand, the behavior is undefined."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935639623,
        "id": "066e62b8-d60d-4fb9-8b28-56152d8419d4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935639623,
        "parent_id": "dc9a544f-49a5-43c1-a2d3-ca24c0a52a3c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Masking:",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Masking:",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935639623,
        "id": "f1a96861-fcaf-4147-909f-2a84fed72f58",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935639623,
        "parent_id": "dc9a544f-49a5-43c1-a2d3-ca24c0a52a3c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Masking refers to the process of extracting the desired bits from (or transforming the desired bits in) a variable by using logical bitwise operations. The operand (a constant or variable) that is used to perform masking is called a "
            ],
            [
              "mask",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Masking refers to the process of extracting the desired bits from (or transforming the desired bits in) a variable by using logical bitwise operations. The operand (a constant or variable) that is used to perform masking is called a "
          },
          {
            "Text": "mask",
            "AttrFlags": 4
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935639623,
        "id": "2d19ca34-a95c-4b16-b5fc-6da7da4bc556",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935639623,
        "parent_id": "dc9a544f-49a5-43c1-a2d3-ca24c0a52a3c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Masking is used in many different ways:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Masking is used in many different ways:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935639623,
        "id": "cb0df4fa-086c-4dce-9bb3-ec281cee5706",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935639623,
        "parent_id": "dc9a544f-49a5-43c1-a2d3-ca24c0a52a3c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To decide the bit pattern of an integer variable."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "To decide the bit pattern of an integer variable."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935639623,
        "id": "9c5535fa-54ae-4cff-8ef9-3b3c4acb5655",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935639623,
        "parent_id": "dc9a544f-49a5-43c1-a2d3-ca24c0a52a3c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To copy a portion of a given bit pattern to a new variable, while the remainder of the new variable is filled with 0s (using bitwise AND)"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "To copy a portion of a given bit pattern to a new variable, while the remainder of the new variable is filled with 0s (using bitwise AND)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935639624,
        "id": "9ef4b6b5-38f1-4dcd-8321-c9b81b1ffced",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935639624,
        "parent_id": "dc9a544f-49a5-43c1-a2d3-ca24c0a52a3c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To copy a portion of a given bit pattern to a new variable, while the remainder of the new variable is filled with 1s (using bitwise OR)."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "To copy a portion of a given bit pattern to a new variable, while the remainder of the new variable is filled with 1s (using bitwise OR)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935639624,
        "id": "a39bcd47-884e-46f0-832f-0541de8de5bc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935639624,
        "parent_id": "dc9a544f-49a5-43c1-a2d3-ca24c0a52a3c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To copy a portion of a given bit pattern to a new variable, while the remainder of the original bit pattern is inverted within the new variable (using bitwise exclusive OR)."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "To copy a portion of a given bit pattern to a new variable, while the remainder of the original bit pattern is inverted within the new variable (using bitwise exclusive OR)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935639624,
        "id": "8407ee28-1061-41a4-bdfe-326652b329f3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935639624,
        "parent_id": "dc9a544f-49a5-43c1-a2d3-ca24c0a52a3c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The following function uses a mask to display the bit pattern of a variable:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The following function uses a mask to display the bit pattern of a variable:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935639624,
        "id": "67db37e7-c9f3-4d3c-8d3a-e820d284286f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935639624,
        "parent_id": "dc9a544f-49a5-43c1-a2d3-ca24c0a52a3c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003climits.h\u003e\nvoid bit_pattern(int u)\n{\n    int i, x, word;\n    unsigned mask = 1;\n    word = CHAR_BIT * sizeof(int);\n    mask = mask \u003c\u003c (word - 1);    /* shift 1 to the leftmost position */\n    for(i = 1; i \u003c= word; i++)\n    {\n        x = (u \u0026 mask) ? 1 : 0;  /* identify the bit */\n        printf(\"%d\", x);         /* print bit value */\n        mask \u003e\u003e= 1;              /* shift mask to the right by 1 bit */\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003climits.h\u003e\nvoid bit_pattern(int u)\n{\n    int i, x, word;\n    unsigned mask = 1;\n    word = CHAR_BIT * sizeof(int);\n    mask = mask \u003c\u003c (word - 1);    /* shift 1 to the leftmost position */\n    for(i = 1; i \u003c= word; i++)\n    {\n        x = (u \u0026 mask) ? 1 : 0;  /* identify the bit */\n        printf(\"%d\", x);         /* print bit value */\n        mask \u003e\u003e= 1;              /* shift mask to the right by 1 bit */\n    }\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "Bitwise Operators",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}