{
  "ID": "251e87b1-c338-4886-ba8b-6c6604653d40",
  "Root": {
    "alive": true,
    "content": [
      "ef4cd61a-0e16-4287-86ad-bfa83100c931",
      "8cdc07bc-4907-4421-9b87-c673ccda1034",
      "74c2a1c9-ab9a-4629-9393-8f65d41c98b6",
      "ec4275a6-aa14-4656-b815-fc08e0cac752",
      "2c8cbcdd-afa1-4a96-8504-489d2be4245d",
      "78ab7166-9830-40d4-b8a3-efb520e274cd",
      "47b3696c-3b3b-48f7-b8f1-19171a42c6b3",
      "ca9a9ca0-c9f1-4fe9-a678-088470e72f69"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551936361346,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "251e87b1-c338-4886-ba8b-6c6604653d40",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551936361346,
    "parent_id": "ce0d7992-bb1e-4e62-ab26-2f99a9a2f78d",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "200 Using character constants instead of string literals and vice versa"
        ]
      ]
    },
    "type": "page",
    "version": 2,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936361344,
        "id": "ef4cd61a-0e16-4287-86ad-bfa83100c931",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936361344,
        "parent_id": "251e87b1-c338-4886-ba8b-6c6604653d40",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In C, character constants and string literals are different things."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In C, character constants and string literals are different things."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936361345,
        "id": "8cdc07bc-4907-4421-9b87-c673ccda1034",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936361345,
        "parent_id": "251e87b1-c338-4886-ba8b-6c6604653d40",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A character surrounded by single quotes like "
            ],
            [
              "'a'",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is a "
            ],
            [
              "character constant",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ". A character constant is an integer whose value is the character code that stands for the character. How to interpret character constants with multiple characters like "
            ],
            [
              "'abc'",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is implementation-defined."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A character surrounded by single quotes like "
          },
          {
            "Text": "'a'",
            "AttrFlags": 2
          },
          {
            "Text": " is a "
          },
          {
            "Text": "character constant",
            "AttrFlags": 4
          },
          {
            "Text": ". A character constant is an integer whose value is the character code that stands for the character. How to interpret character constants with multiple characters like "
          },
          {
            "Text": "'abc'",
            "AttrFlags": 2
          },
          {
            "Text": " is implementation-defined."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936361345,
        "id": "74c2a1c9-ab9a-4629-9393-8f65d41c98b6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936361345,
        "parent_id": "251e87b1-c338-4886-ba8b-6c6604653d40",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Zero or more characters surrounded by double quotes like "
            ],
            [
              "\"abc\"",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is a "
            ],
            [
              "string literal",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ". A string literal is an unmodifiable array whose elements are type "
            ],
            [
              "char",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". The string in the double quotes plus terminating null-character are the contents, so "
            ],
            [
              "\"abc\"",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " has 4 elements ("
            ],
            [
              "{'a', 'b', 'c', '\\0'}",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ")"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Zero or more characters surrounded by double quotes like "
          },
          {
            "Text": "\"abc\"",
            "AttrFlags": 2
          },
          {
            "Text": " is a "
          },
          {
            "Text": "string literal",
            "AttrFlags": 4
          },
          {
            "Text": ". A string literal is an unmodifiable array whose elements are type "
          },
          {
            "Text": "char",
            "AttrFlags": 2
          },
          {
            "Text": ". The string in the double quotes plus terminating null-character are the contents, so "
          },
          {
            "Text": "\"abc\"",
            "AttrFlags": 2
          },
          {
            "Text": " has 4 elements ("
          },
          {
            "Text": "{'a', 'b', 'c', '\\0'}",
            "AttrFlags": 2
          },
          {
            "Text": ")"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936361346,
        "id": "ec4275a6-aa14-4656-b815-fc08e0cac752",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936361346,
        "parent_id": "251e87b1-c338-4886-ba8b-6c6604653d40",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In this example, a character constant is used where a string literal should be used. This character constant will be converted to a pointer in an implementation-defined manner and there is little chance for the converted pointer to be valid, so this example will invoke "
            ],
            [
              "undefined behavior",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In this example, a character constant is used where a string literal should be used. This character constant will be converted to a pointer in an implementation-defined manner and there is little chance for the converted pointer to be valid, so this example will invoke "
          },
          {
            "Text": "undefined behavior",
            "AttrFlags": 4
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936361346,
        "id": "2c8cbcdd-afa1-4a96-8504-489d2be4245d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936361346,
        "parent_id": "251e87b1-c338-4886-ba8b-6c6604653d40",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cstdio.h\u003e\n\nint main(void) {\n    const char *hello = 'hello, world'; /* bad */\n    puts(hello);\n    return 0;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cstdio.h\u003e\n\nint main(void) {\n    const char *hello = 'hello, world'; /* bad */\n    puts(hello);\n    return 0;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936361346,
        "id": "78ab7166-9830-40d4-b8a3-efb520e274cd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936361346,
        "parent_id": "251e87b1-c338-4886-ba8b-6c6604653d40",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In this example, a string literal is used where a character constant should be used. The pointer converted from the string literal will be converted to an integer in an implementation-defined manner, and it will be converted to "
            ],
            [
              "char",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in an implementation-defined manner. (How to convert an integer to a signed type which cannot represent the value to convert is implementation-defined, and whether "
            ],
            [
              "char",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is signed is also implementation-defined.) The output will be some meaningless thing."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In this example, a string literal is used where a character constant should be used. The pointer converted from the string literal will be converted to an integer in an implementation-defined manner, and it will be converted to "
          },
          {
            "Text": "char",
            "AttrFlags": 2
          },
          {
            "Text": " in an implementation-defined manner. (How to convert an integer to a signed type which cannot represent the value to convert is implementation-defined, and whether "
          },
          {
            "Text": "char",
            "AttrFlags": 2
          },
          {
            "Text": " is signed is also implementation-defined.) The output will be some meaningless thing."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936361346,
        "id": "47b3696c-3b3b-48f7-b8f1-19171a42c6b3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936361346,
        "parent_id": "251e87b1-c338-4886-ba8b-6c6604653d40",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cstdio.h\u003e\n\nint main(void) {\n    char c = \"a\"; /* bad */\n    printf(\"%c\\n\", c);\n    return 0;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cstdio.h\u003e\n\nint main(void) {\n    char c = \"a\"; /* bad */\n    printf(\"%c\\n\", c);\n    return 0;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936361346,
        "id": "ca9a9ca0-c9f1-4fe9-a678-088470e72f69",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936361346,
        "parent_id": "251e87b1-c338-4886-ba8b-6c6604653d40",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In almost all cases, the compiler will complain about these mix-ups. If it doesn’t, you need to use more compiler warning options, or it is recommended that you use a better compiler."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In almost all cases, the compiler will complain about these mix-ups. If it doesn’t, you need to use more compiler warning options, or it is recommended that you use a better compiler."
          }
        ]
      }
    ],
    "title": "200 Using character constants instead of string literals and vice versa",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}