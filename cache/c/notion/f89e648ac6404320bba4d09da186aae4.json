{
  "ID": "f89e648a-c640-4320-bba4-d09da186aae4",
  "Root": {
    "alive": true,
    "content": [
      "2367d855-8ae2-4c31-8e93-0131eb7902c1",
      "29c201a1-ceef-4475-98e5-2ab325fa9608",
      "44410d71-c0ff-477b-a8b5-a229feec518c",
      "64c4c1f2-2145-433d-96f0-4089a2e77097",
      "ee956458-81ce-42bd-92c7-4e30b92e19ee",
      "3c7bb9e3-d11e-4197-beb7-52eb9be5c7f4",
      "0fa13fd6-efde-4106-8333-1301a504263a",
      "026ff30f-46e9-4be0-b1ab-fb76f2308b91",
      "08dee84b-571e-4f22-945a-97bb4bc081b7",
      "c5fa27f5-08ce-4c14-a93c-d01c85d4f7af"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551936213813,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "f89e648a-c640-4320-bba4-d09da186aae4",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551936213813,
    "parent_id": "1e14553b-8aea-44fb-a0fe-fbc893ff529a",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Initializing Pointers"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936213807,
        "id": "2367d855-8ae2-4c31-8e93-0131eb7902c1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936213807,
        "parent_id": "f89e648a-c640-4320-bba4-d09da186aae4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Pointer initialization is a good way to avoid wild pointers. The initialization is simple and is no different from initialization of a variable."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Pointer initialization is a good way to avoid wild pointers. The initialization is simple and is no different from initialization of a variable."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936213809,
        "id": "29c201a1-ceef-4475-98e5-2ab325fa9608",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936213809,
        "parent_id": "f89e648a-c640-4320-bba4-d09da186aae4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cstddef.h\u003e\n\nint main()\n{\n    int *p1 = NULL; \n    char *p2 = NULL;\n    float *p3 = NULL;\n\n         /* NULL is a macro defined in stddef.h, stdio.h, stdlib.h, and string.h */\n\n    ...\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cstddef.h\u003e\n\nint main()\n{\n    int *p1 = NULL; \n    char *p2 = NULL;\n    float *p3 = NULL;\n\n         /* NULL is a macro defined in stddef.h, stdio.h, stdlib.h, and string.h */\n\n    ...\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936213810,
        "id": "44410d71-c0ff-477b-a8b5-a229feec518c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936213810,
        "parent_id": "f89e648a-c640-4320-bba4-d09da186aae4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In most operating systems, inadvertently using a pointer that has been initialized to "
            ],
            [
              "NULL",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will often result in the program crashing immediately, making it easy to identify the cause of the problem. Using an uninitialized pointer can often cause hard-to-diagnose bugs."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In most operating systems, inadvertently using a pointer that has been initialized to "
          },
          {
            "Text": "NULL",
            "AttrFlags": 2
          },
          {
            "Text": " will often result in the program crashing immediately, making it easy to identify the cause of the problem. Using an uninitialized pointer can often cause hard-to-diagnose bugs."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936213810,
        "id": "64c4c1f2-2145-433d-96f0-4089a2e77097",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936213810,
        "parent_id": "f89e648a-c640-4320-bba4-d09da186aae4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Caution:"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Caution:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936213810,
        "id": "ee956458-81ce-42bd-92c7-4e30b92e19ee",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936213810,
        "parent_id": "f89e648a-c640-4320-bba4-d09da186aae4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The result of dereferencing a "
            ],
            [
              "NULL",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " pointer is undefined, so it "
            ],
            [
              "will not necessarily cause a crash",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " even if that is the natural behaviour of the operating system the program is running on. Compiler optimizations may mask the crash, cause the crash to occur before or after the point in the source code at which the null pointer dereference occurred, or cause parts of the code that contains the null pointer dereference to be unexpectedly removed from the program. Debug builds will not usually exhibit these behaviours, but this is not guaranteed by the language standard. Other unexpected and/or undesirable behaviour is also allowed."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The result of dereferencing a "
          },
          {
            "Text": "NULL",
            "AttrFlags": 2
          },
          {
            "Text": " pointer is undefined, so it "
          },
          {
            "Text": "will not necessarily cause a crash",
            "AttrFlags": 4
          },
          {
            "Text": " even if that is the natural behaviour of the operating system the program is running on. Compiler optimizations may mask the crash, cause the crash to occur before or after the point in the source code at which the null pointer dereference occurred, or cause parts of the code that contains the null pointer dereference to be unexpectedly removed from the program. Debug builds will not usually exhibit these behaviours, but this is not guaranteed by the language standard. Other unexpected and/or undesirable behaviour is also allowed."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936213810,
        "id": "3c7bb9e3-d11e-4197-beb7-52eb9be5c7f4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936213810,
        "parent_id": "f89e648a-c640-4320-bba4-d09da186aae4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Because "
            ],
            [
              "NULL",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " never points to a variable, to allocated memory, or to a function, it is safe to use as a guard value."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Because "
          },
          {
            "Text": "NULL",
            "AttrFlags": 2
          },
          {
            "Text": " never points to a variable, to allocated memory, or to a function, it is safe to use as a guard value."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936213810,
        "id": "0fa13fd6-efde-4106-8333-1301a504263a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936213810,
        "parent_id": "f89e648a-c640-4320-bba4-d09da186aae4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Caution:"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Caution:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936213812,
        "id": "026ff30f-46e9-4be0-b1ab-fb76f2308b91",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936213812,
        "parent_id": "f89e648a-c640-4320-bba4-d09da186aae4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Usually "
            ],
            [
              "NULL",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is defined as "
            ],
            [
              "(void *)0",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". But this does not imply that the assigned memory address is "
            ],
            [
              "0x0",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". For more clarification refer to "
            ],
            [
              "C-faq for NULL pointers",
              [
                [
                  "a",
                  "http://c-faq.com/null/"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Usually "
          },
          {
            "Text": "NULL",
            "AttrFlags": 2
          },
          {
            "Text": " is defined as "
          },
          {
            "Text": "(void *)0",
            "AttrFlags": 2
          },
          {
            "Text": ". But this does not imply that the assigned memory address is "
          },
          {
            "Text": "0x0",
            "AttrFlags": 2
          },
          {
            "Text": ". For more clarification refer to "
          },
          {
            "Text": "C-faq for NULL pointers",
            "Link": "http://c-faq.com/null/"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936213812,
        "id": "08dee84b-571e-4f22-945a-97bb4bc081b7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936213812,
        "parent_id": "f89e648a-c640-4320-bba4-d09da186aae4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note that you can also initialize pointers to contain values other than NULL."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note that you can also initialize pointers to contain values other than NULL."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936213812,
        "id": "c5fa27f5-08ce-4c14-a93c-d01c85d4f7af",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936213812,
        "parent_id": "f89e648a-c640-4320-bba4-d09da186aae4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int i1;\n\nint main()\n{\n   int *p1 = \u0026i1;\n   const char *p2 = \"A constant string to point to\";\n   float *p3 = malloc(10 * sizeof(float));\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int i1;\n\nint main()\n{\n   int *p1 = \u0026i1;\n   const char *p2 = \"A constant string to point to\";\n   float *p3 = malloc(10 * sizeof(float));\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "Initializing Pointers",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}