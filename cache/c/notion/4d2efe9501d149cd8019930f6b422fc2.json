{
  "ID": "4d2efe95-01d1-49cd-8019-930f6b422fc2",
  "Root": {
    "alive": true,
    "content": [
      "72a348f6-0fc9-420f-be40-69cc3bcbeda9",
      "a5563b5d-ad6b-4c73-940c-f573b92cb720",
      "43f12a8c-7182-429f-b2a2-5a754d536642",
      "03eed9ec-bb28-4406-8345-673ea8693351",
      "5b024224-41b0-493a-94b3-3e05151a0a0f",
      "e8964c5b-1523-44ae-9830-d88f99992a6b",
      "5af4ab24-bc36-45b4-b846-677f62dbb51e",
      "d59ea512-d534-4ee6-a085-a13ef704181d"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551936344292,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "4d2efe95-01d1-49cd-8019-930f6b422fc2",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551936344292,
    "parent_id": "ce0d7992-bb1e-4e62-ab26-2f99a9a2f78d",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Forgetting to free memory memory leaks"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936344290,
        "id": "72a348f6-0fc9-420f-be40-69cc3bcbeda9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936344290,
        "parent_id": "4d2efe95-01d1-49cd-8019-930f6b422fc2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A programming best practice is to free any memory that has been allocated directly by your own code, or implicitly by calling an internal or external function, such as a library API like "
            ],
            [
              "strdup()",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://linux.die.net/man/3/strdup"
                ]
              ]
            ],
            [
              ". Failing to free memory can introduce a memory leak, which could accumulate into a substantial amount of wasted memory that is unavailable to your program (or the system), possibly leading to crashes or undefined behavior. Problems are more likely to occur if the leak is incurred repeatedly in a loop or recursive function. The risk of program failure increases the longer a leaking program runs. Sometimes problems appear instantly; other times problems won’t be seen for hours or even years of constant operation. Memory exhaustion failures can be catastrophic, depending on the circumstances."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A programming best practice is to free any memory that has been allocated directly by your own code, or implicitly by calling an internal or external function, such as a library API like "
          },
          {
            "Text": "strdup()",
            "AttrFlags": 2,
            "Link": "https://linux.die.net/man/3/strdup"
          },
          {
            "Text": ". Failing to free memory can introduce a memory leak, which could accumulate into a substantial amount of wasted memory that is unavailable to your program (or the system), possibly leading to crashes or undefined behavior. Problems are more likely to occur if the leak is incurred repeatedly in a loop or recursive function. The risk of program failure increases the longer a leaking program runs. Sometimes problems appear instantly; other times problems won’t be seen for hours or even years of constant operation. Memory exhaustion failures can be catastrophic, depending on the circumstances."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936344290,
        "id": "a5563b5d-ad6b-4c73-940c-f573b92cb720",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936344290,
        "parent_id": "4d2efe95-01d1-49cd-8019-930f6b422fc2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The following infinite loop is an example of a leak that will eventually exhaust available memory leak by calling "
            ],
            [
              "getline()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", a function that implicitly allocates new memory, without freeing that memory."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The following infinite loop is an example of a leak that will eventually exhaust available memory leak by calling "
          },
          {
            "Text": "getline()",
            "AttrFlags": 2
          },
          {
            "Text": ", a function that implicitly allocates new memory, without freeing that memory."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936344290,
        "id": "43f12a8c-7182-429f-b2a2-5a754d536642",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936344290,
        "parent_id": "4d2efe95-01d1-49cd-8019-930f6b422fc2",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cstdlib.h\u003e\n#include \u003cstdio.h\u003e\n\nint main(void)\n{\n    char *line = NULL;\n    size_t size = 0;\n\n    /* The loop below leaks memory as fast as it can */\n\n    for(;;) { \n        getline(\u0026line, \u0026size, stdin); /* New memory implicitly allocated */\n\n        /* \u003cdo whatever\u003e */\n\n        line = NULL;\n    }\n\n    return 0;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cstdlib.h\u003e\n#include \u003cstdio.h\u003e\n\nint main(void)\n{\n    char *line = NULL;\n    size_t size = 0;\n\n    /* The loop below leaks memory as fast as it can */\n\n    for(;;) { \n        getline(\u0026line, \u0026size, stdin); /* New memory implicitly allocated */\n\n        /* \u003cdo whatever\u003e */\n\n        line = NULL;\n    }\n\n    return 0;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936344290,
        "id": "03eed9ec-bb28-4406-8345-673ea8693351",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936344290,
        "parent_id": "4d2efe95-01d1-49cd-8019-930f6b422fc2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In contrast, the code below also uses the "
            ],
            [
              "getline()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " function, but this time, the allocated memory is correctly freed, avoiding a leak."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In contrast, the code below also uses the "
          },
          {
            "Text": "getline()",
            "AttrFlags": 2
          },
          {
            "Text": " function, but this time, the allocated memory is correctly freed, avoiding a leak."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936344290,
        "id": "5b024224-41b0-493a-94b3-3e05151a0a0f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936344290,
        "parent_id": "4d2efe95-01d1-49cd-8019-930f6b422fc2",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cstdlib.h\u003e\n#include \u003cstdio.h\u003e\n\nint main(void)\n{\n    char *line = NULL;\n    size_t size = 0;\n\n    for(;;) {\n        if (getline(\u0026line, \u0026size, stdin) \u003c 0) {\n            free(line);\n            line = NULL;\n\n            /* Handle failure such as setting flag, breaking out of loop and/or exiting */\n        }\n\n        /* \u003cdo whatever\u003e */\n\n        free(line);\n        line = NULL;\n\n    }\n\n    return 0;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cstdlib.h\u003e\n#include \u003cstdio.h\u003e\n\nint main(void)\n{\n    char *line = NULL;\n    size_t size = 0;\n\n    for(;;) {\n        if (getline(\u0026line, \u0026size, stdin) \u003c 0) {\n            free(line);\n            line = NULL;\n\n            /* Handle failure such as setting flag, breaking out of loop and/or exiting */\n        }\n\n        /* \u003cdo whatever\u003e */\n\n        free(line);\n        line = NULL;\n\n    }\n\n    return 0;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936344291,
        "id": "e8964c5b-1523-44ae-9830-d88f99992a6b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936344291,
        "parent_id": "4d2efe95-01d1-49cd-8019-930f6b422fc2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Leaking memory doesn’t always have tangible consequences and isn’t necessarily a functional problem. While “best practice” dictates rigorously freeing memory at strategic points and conditions, to reduce memory footprint and lower risk of memory exhaustion, there can be exceptions. For example, if a program is bounded in duration and scope, the risk of allocation failure might be considered too small to worry about. In that case, bypassing explicit deallocation might be considered acceptable. For example, most modern operating systems automatically free all memory consumed by a program when it terminates, whether it is due to program failure, a system call to "
            ],
            [
              "exit()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", process termination, or reaching end of "
            ],
            [
              "main()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Explicitly freeing memory at the point of imminent program termination could actually be redundant or introduce a performance penalty."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Leaking memory doesn’t always have tangible consequences and isn’t necessarily a functional problem. While “best practice” dictates rigorously freeing memory at strategic points and conditions, to reduce memory footprint and lower risk of memory exhaustion, there can be exceptions. For example, if a program is bounded in duration and scope, the risk of allocation failure might be considered too small to worry about. In that case, bypassing explicit deallocation might be considered acceptable. For example, most modern operating systems automatically free all memory consumed by a program when it terminates, whether it is due to program failure, a system call to "
          },
          {
            "Text": "exit()",
            "AttrFlags": 2
          },
          {
            "Text": ", process termination, or reaching end of "
          },
          {
            "Text": "main()",
            "AttrFlags": 2
          },
          {
            "Text": ". Explicitly freeing memory at the point of imminent program termination could actually be redundant or introduce a performance penalty."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936344291,
        "id": "5af4ab24-bc36-45b4-b846-677f62dbb51e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936344291,
        "parent_id": "4d2efe95-01d1-49cd-8019-930f6b422fc2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Allocation can fail if insufficient memory is available, and handling failures should be accounted for at appropriate levels of the call stack. "
            ],
            [
              "getline()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", shown above is an interesting use-case because it is a library function that not only allocates memory it leaves to the caller to free, but can fail for a number of reasons, all of which must be taken into account. Therefore, it is essential when using a C API, to read the "
            ],
            [
              "documentation (man page)",
              [
                [
                  "i"
                ],
                [
                  "a",
                  "https://linux.die.net/man/3/getline"
                ]
              ]
            ],
            [
              " and pay particular attention to error conditions and memory usage, and be aware which software layer bears the burden of freeing returned memory."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Allocation can fail if insufficient memory is available, and handling failures should be accounted for at appropriate levels of the call stack. "
          },
          {
            "Text": "getline()",
            "AttrFlags": 2
          },
          {
            "Text": ", shown above is an interesting use-case because it is a library function that not only allocates memory it leaves to the caller to free, but can fail for a number of reasons, all of which must be taken into account. Therefore, it is essential when using a C API, to read the "
          },
          {
            "Text": "documentation (man page)",
            "AttrFlags": 4,
            "Link": "https://linux.die.net/man/3/getline"
          },
          {
            "Text": " and pay particular attention to error conditions and memory usage, and be aware which software layer bears the burden of freeing returned memory."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936344292,
        "id": "d59ea512-d534-4ee6-a085-a13ef704181d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936344292,
        "parent_id": "4d2efe95-01d1-49cd-8019-930f6b422fc2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Another common memory handling practice is to consistently set memory pointers to NULL immediately after the memory referenced by those pointers is freed, so those pointers can be tested for validity at any time (e.g. checked for NULL / non-NULL), because accessing freed memory can lead to severe problems such as getting garbage data (read operation), or data corruption (write operation) and/or a program crash. In most modern operating systems, freeing memory location 0 ("
            ],
            [
              "NULL",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") is a NOP (e.g. it is harmless), as required by the C standard — so by setting a pointer to NULL, there is no risk of double-freeing memory if the pointer is passed to "
            ],
            [
              "free()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Keep in mind that double-freeing memory can lead to very time consuming, confusing, and "
            ],
            [
              "difficult to diagnose",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " failures."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Another common memory handling practice is to consistently set memory pointers to NULL immediately after the memory referenced by those pointers is freed, so those pointers can be tested for validity at any time (e.g. checked for NULL / non-NULL), because accessing freed memory can lead to severe problems such as getting garbage data (read operation), or data corruption (write operation) and/or a program crash. In most modern operating systems, freeing memory location 0 ("
          },
          {
            "Text": "NULL",
            "AttrFlags": 2
          },
          {
            "Text": ") is a NOP (e.g. it is harmless), as required by the C standard — so by setting a pointer to NULL, there is no risk of double-freeing memory if the pointer is passed to "
          },
          {
            "Text": "free()",
            "AttrFlags": 2
          },
          {
            "Text": ". Keep in mind that double-freeing memory can lead to very time consuming, confusing, and "
          },
          {
            "Text": "difficult to diagnose",
            "AttrFlags": 4
          },
          {
            "Text": " failures."
          }
        ]
      }
    ],
    "title": "Forgetting to free memory memory leaks",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}