{
  "ID": "792b7b74-b7ba-4f17-80e5-a12e3b14abf1",
  "Root": {
    "alive": true,
    "content": [
      "f5c7c210-8702-47d2-b714-21b42e78eafc",
      "8a761222-efeb-49b5-8a9d-3c93ff894446",
      "2bbefa86-a601-41ab-8c4c-a0242bd3f48d",
      "b835d1fc-eea3-490e-8266-d27dfb89146c",
      "15409956-9d19-4bf1-9c2e-7af487cb8e27",
      "f34d6a3f-28d4-4da4-8d77-7912c74298e0",
      "9fdd28fc-5888-4418-9673-a3410209d9f9",
      "e779ac8f-59fa-48e4-a53d-d3cebecd0550",
      "0a8def70-0220-4448-a6ee-a952e92ddc60",
      "584834b3-0322-4068-bda2-d6127327acd7"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551936354787,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "792b7b74-b7ba-4f17-80e5-a12e3b14abf1",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551936354787,
    "parent_id": "ce0d7992-bb1e-4e62-ab26-2f99a9a2f78d",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Doing extra scaling in pointer arithmetic"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936354780,
        "id": "f5c7c210-8702-47d2-b714-21b42e78eafc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936354780,
        "parent_id": "792b7b74-b7ba-4f17-80e5-a12e3b14abf1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In pointer arithmetic, the integer to be added or subtracted to pointer is interpreted not as change of "
            ],
            [
              "address",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " but as number of "
            ],
            [
              "elements",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " to move."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In pointer arithmetic, the integer to be added or subtracted to pointer is interpreted not as change of "
          },
          {
            "Text": "address",
            "AttrFlags": 4
          },
          {
            "Text": " but as number of "
          },
          {
            "Text": "elements",
            "AttrFlags": 4
          },
          {
            "Text": " to move."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936354783,
        "id": "8a761222-efeb-49b5-8a9d-3c93ff894446",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936354783,
        "parent_id": "792b7b74-b7ba-4f17-80e5-a12e3b14abf1",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cstdio.h\u003e\n\nint main(void) {\n    int array[] = {1, 2, 3, 4, 5};\n    int *ptr = \u0026array[0];\n    int *ptr2 = ptr + sizeof(int) * 2; /* wrong */\n    printf(\"%d %d\\n\", *ptr, *ptr2);\n    return 0;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cstdio.h\u003e\n\nint main(void) {\n    int array[] = {1, 2, 3, 4, 5};\n    int *ptr = \u0026array[0];\n    int *ptr2 = ptr + sizeof(int) * 2; /* wrong */\n    printf(\"%d %d\\n\", *ptr, *ptr2);\n    return 0;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936354783,
        "id": "2bbefa86-a601-41ab-8c4c-a0242bd3f48d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936354783,
        "parent_id": "792b7b74-b7ba-4f17-80e5-a12e3b14abf1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This code does extra scaling in calculating pointer assigned to "
            ],
            [
              "ptr2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". If "
            ],
            [
              "sizeof(int)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is 4, which is typical in modern 32-bit environments, the expression stands for “8 elements after "
            ],
            [
              "array[0]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "”, which is out-of-range, and it invokes "
            ],
            [
              "undefined behavior",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This code does extra scaling in calculating pointer assigned to "
          },
          {
            "Text": "ptr2",
            "AttrFlags": 2
          },
          {
            "Text": ". If "
          },
          {
            "Text": "sizeof(int)",
            "AttrFlags": 2
          },
          {
            "Text": " is 4, which is typical in modern 32-bit environments, the expression stands for “8 elements after "
          },
          {
            "Text": "array[0]",
            "AttrFlags": 2
          },
          {
            "Text": "”, which is out-of-range, and it invokes "
          },
          {
            "Text": "undefined behavior",
            "AttrFlags": 4
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936354783,
        "id": "b835d1fc-eea3-490e-8266-d27dfb89146c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936354783,
        "parent_id": "792b7b74-b7ba-4f17-80e5-a12e3b14abf1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To have "
            ],
            [
              "ptr2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " point at what is 2 elements after "
            ],
            [
              "array[0]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", you should simply add 2."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To have "
          },
          {
            "Text": "ptr2",
            "AttrFlags": 2
          },
          {
            "Text": " point at what is 2 elements after "
          },
          {
            "Text": "array[0]",
            "AttrFlags": 2
          },
          {
            "Text": ", you should simply add 2."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936354784,
        "id": "15409956-9d19-4bf1-9c2e-7af487cb8e27",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936354784,
        "parent_id": "792b7b74-b7ba-4f17-80e5-a12e3b14abf1",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cstdio.h\u003e\n\nint main(void) {\n    int array[] = {1, 2, 3, 4, 5};\n    int *ptr = \u0026array[0];\n    int *ptr2 = ptr + 2;\n    printf(\"%d %d\\n\", *ptr, *ptr2); /* \"1 3\" will be printed */\n    return 0;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cstdio.h\u003e\n\nint main(void) {\n    int array[] = {1, 2, 3, 4, 5};\n    int *ptr = \u0026array[0];\n    int *ptr2 = ptr + 2;\n    printf(\"%d %d\\n\", *ptr, *ptr2); /* \"1 3\" will be printed */\n    return 0;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936354784,
        "id": "f34d6a3f-28d4-4da4-8d77-7912c74298e0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936354784,
        "parent_id": "792b7b74-b7ba-4f17-80e5-a12e3b14abf1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Explicit pointer arithmetic using additive operators may be confusing, so using array subscripting may be better."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Explicit pointer arithmetic using additive operators may be confusing, so using array subscripting may be better."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936354784,
        "id": "9fdd28fc-5888-4418-9673-a3410209d9f9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936354784,
        "parent_id": "792b7b74-b7ba-4f17-80e5-a12e3b14abf1",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cstdio.h\u003e\n\nint main(void) {\n    int array[] = {1, 2, 3, 4, 5};\n    int *ptr = \u0026array[0];\n    int *ptr2 = \u0026ptr[2];\n    printf(\"%d %d\\n\", *ptr, *ptr2); /* \"1 3\" will be printed */\n    return 0;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cstdio.h\u003e\n\nint main(void) {\n    int array[] = {1, 2, 3, 4, 5};\n    int *ptr = \u0026array[0];\n    int *ptr2 = \u0026ptr[2];\n    printf(\"%d %d\\n\", *ptr, *ptr2); /* \"1 3\" will be printed */\n    return 0;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936354786,
        "id": "e779ac8f-59fa-48e4-a53d-d3cebecd0550",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936354786,
        "parent_id": "792b7b74-b7ba-4f17-80e5-a12e3b14abf1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "E1[E2]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is identical to "
            ],
            [
              "(*((E1)+(E2)))",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " ("
            ],
            [
              "N1570",
              [
                [
                  "a",
                  "http://chimera.roma1.infn.it/SP/COMMON/iso-iec-9899-1990.pdf"
                ]
              ]
            ],
            [
              " 6.5.2.1, paragraph 2), and "
            ],
            [
              "\u0026(E1[E2])",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is equivalent to "
            ],
            [
              "((E1)+(E2))",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (N1570 6.5.3.2, footnote 102)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "E1[E2]",
            "AttrFlags": 2
          },
          {
            "Text": " is identical to "
          },
          {
            "Text": "(*((E1)+(E2)))",
            "AttrFlags": 2
          },
          {
            "Text": " ("
          },
          {
            "Text": "N1570",
            "Link": "http://chimera.roma1.infn.it/SP/COMMON/iso-iec-9899-1990.pdf"
          },
          {
            "Text": " 6.5.2.1, paragraph 2), and "
          },
          {
            "Text": "\u0026(E1[E2])",
            "AttrFlags": 2
          },
          {
            "Text": " is equivalent to "
          },
          {
            "Text": "((E1)+(E2))",
            "AttrFlags": 2
          },
          {
            "Text": " (N1570 6.5.3.2, footnote 102)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936354786,
        "id": "0a8def70-0220-4448-a6ee-a952e92ddc60",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936354786,
        "parent_id": "792b7b74-b7ba-4f17-80e5-a12e3b14abf1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Alternatively, if pointer arithmetic is preferred, casting the pointer to address a different data type can allow byte addressing. Be careful though: "
            ],
            [
              "endianness",
              [
                [
                  "a",
                  "https://en.wikipedia.org/wiki/Endianness"
                ]
              ]
            ],
            [
              " can become an issue, and casting to types other than ‘pointer to character’ leads to "
            ],
            [
              "strict aliasing problems",
              [
                [
                  "a",
                  "https://en.wikipedia.org/wiki/Aliasing_(computing)#Conflicts_with_optimization"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Alternatively, if pointer arithmetic is preferred, casting the pointer to address a different data type can allow byte addressing. Be careful though: "
          },
          {
            "Text": "endianness",
            "Link": "https://en.wikipedia.org/wiki/Endianness"
          },
          {
            "Text": " can become an issue, and casting to types other than ‘pointer to character’ leads to "
          },
          {
            "Text": "strict aliasing problems",
            "Link": "https://en.wikipedia.org/wiki/Aliasing_(computing)#Conflicts_with_optimization"
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936354786,
        "id": "584834b3-0322-4068-bda2-d6127327acd7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936354786,
        "parent_id": "792b7b74-b7ba-4f17-80e5-a12e3b14abf1",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cstdio.h\u003e\n\nint main(void) {\n    int array[3] = {1,2,3};  // 4 bytes * 3 allocated\n    unsigned char *ptr = (unsigned char *) array;  // unsigned chars only take 1 byte\n    /*\n     * Now any pointer arithmetic on ptr will match\n     * bytes in memory.  ptr can be treated like it\n     * was declared as: unsigned char ptr[12];\n     */\n\n    return 0;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cstdio.h\u003e\n\nint main(void) {\n    int array[3] = {1,2,3};  // 4 bytes * 3 allocated\n    unsigned char *ptr = (unsigned char *) array;  // unsigned chars only take 1 byte\n    /*\n     * Now any pointer arithmetic on ptr will match\n     * bytes in memory.  ptr can be treated like it\n     * was declared as: unsigned char ptr[12];\n     */\n\n    return 0;\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "Doing extra scaling in pointer arithmetic",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}