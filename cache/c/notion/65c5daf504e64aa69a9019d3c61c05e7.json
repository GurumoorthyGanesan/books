{
  "ID": "65c5daf5-04e6-4aa6-9a90-19d3c61c05e7",
  "Root": {
    "alive": true,
    "content": [
      "160e4d02-d3cf-4538-b18a-7b739cf43f4a",
      "5ab7d41d-8d36-43d8-a144-a2becb1c31e0",
      "833548b9-e221-47a6-b144-52daf72e6c32",
      "bf876b8e-f903-4f39-99ff-6a518e0a87e8",
      "00d47df0-440d-4498-9a89-b0958b29d21a",
      "21c33b74-26f3-4790-8481-595d4caf88a0",
      "45996348-4018-4cd3-aaca-530add894013",
      "c5ba9b36-b70c-4b71-bd45-1011a91b30b4"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551935621179,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "65c5daf5-04e6-4aa6-9a90-19d3c61c05e7",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551935621179,
    "parent_id": "033ae011-39fb-4a86-9a89-54971c729ce8",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Introduction"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935621174,
        "id": "160e4d02-d3cf-4538-b18a-7b739cf43f4a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935621174,
        "parent_id": "65c5daf5-04e6-4aa6-9a90-19d3c61c05e7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Just like "
            ],
            [
              "char",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", a function is a fundamental feature of C. As such, you can declare a pointer to one: which means that you can pass "
            ],
            [
              "which function to call",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " to another function to help it do its job. For example, if you had a "
            ],
            [
              "graph()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " function that displayed a graph, you could pass "
            ],
            [
              "which function to graph",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " into "
            ],
            [
              "graph()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Just like "
          },
          {
            "Text": "char",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": ", a function is a fundamental feature of C. As such, you can declare a pointer to one: which means that you can pass "
          },
          {
            "Text": "which function to call",
            "AttrFlags": 4
          },
          {
            "Text": " to another function to help it do its job. For example, if you had a "
          },
          {
            "Text": "graph()",
            "AttrFlags": 2
          },
          {
            "Text": " function that displayed a graph, you could pass "
          },
          {
            "Text": "which function to graph",
            "AttrFlags": 4
          },
          {
            "Text": " into "
          },
          {
            "Text": "graph()",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935621177,
        "id": "5ab7d41d-8d36-43d8-a144-a2becb1c31e0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935621177,
        "parent_id": "65c5daf5-04e6-4aa6-9a90-19d3c61c05e7",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// A couple of external definitions to make the example clearer\nextern unsigned int screenWidth;\nextern void plotXY(double x, double y);\n\n// The graph() function.\n// Pass in the bounds: the minimum and maximum X and Y that should be plotted.\n// Also pass in the actual function to plot.\nvoid graph(double minX, double minY,\n           double maxX, double maxY,\n           ???? *fn) {            // See below for syntax\n\n    double stepX = (maxX - minX) / screenWidth;\n    for (double x=minX; x\u003cmaxX; x+=stepX) {\n\n        double y = fn(x);         // Get y for this x by calling passed-in fn()\n\n        if (minY\u003c=y \u0026\u0026 y\u003cmaxY) {\n            plotXY(x, y);         // Plot calculated point\n        } // if\n    } for\n} // graph(minX, minY, maxX, maxY, fn)"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// A couple of external definitions to make the example clearer\nextern unsigned int screenWidth;\nextern void plotXY(double x, double y);\n\n// The graph() function.\n// Pass in the bounds: the minimum and maximum X and Y that should be plotted.\n// Also pass in the actual function to plot.\nvoid graph(double minX, double minY,\n           double maxX, double maxY,\n           ???? *fn) {            // See below for syntax\n\n    double stepX = (maxX - minX) / screenWidth;\n    for (double x=minX; x\u003cmaxX; x+=stepX) {\n\n        double y = fn(x);         // Get y for this x by calling passed-in fn()\n\n        if (minY\u003c=y \u0026\u0026 y\u003cmaxY) {\n            plotXY(x, y);         // Plot calculated point\n        } // if\n    } for\n} // graph(minX, minY, maxX, maxY, fn)",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935621177,
        "id": "833548b9-e221-47a6-b144-52daf72e6c32",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935621177,
        "parent_id": "65c5daf5-04e6-4aa6-9a90-19d3c61c05e7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Usage"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Usage"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935621178,
        "id": "bf876b8e-f903-4f39-99ff-6a518e0a87e8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935621178,
        "parent_id": "65c5daf5-04e6-4aa6-9a90-19d3c61c05e7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "So the above code will graph whatever function you passed into it - as long as that function meets certain criteria: namely, that you pass a "
            ],
            [
              "double",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in and get a "
            ],
            [
              "double",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " out. There are many functions like that - "
            ],
            [
              "sin()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "cos()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "tan()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "exp()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " etc. - but there are many that arenâ€™t, such as "
            ],
            [
              "graph()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " itself!"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "So the above code will graph whatever function you passed into it - as long as that function meets certain criteria: namely, that you pass a "
          },
          {
            "Text": "double",
            "AttrFlags": 2
          },
          {
            "Text": " in and get a "
          },
          {
            "Text": "double",
            "AttrFlags": 2
          },
          {
            "Text": " out. There are many functions like that - "
          },
          {
            "Text": "sin()",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "cos()",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "tan()",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "exp()",
            "AttrFlags": 2
          },
          {
            "Text": " etc. - but there are many that arenâ€™t, such as "
          },
          {
            "Text": "graph()",
            "AttrFlags": 2
          },
          {
            "Text": " itself!"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935621178,
        "id": "00d47df0-440d-4498-9a89-b0958b29d21a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935621178,
        "parent_id": "65c5daf5-04e6-4aa6-9a90-19d3c61c05e7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Syntax"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Syntax"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935621178,
        "id": "21c33b74-26f3-4790-8481-595d4caf88a0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935621178,
        "parent_id": "65c5daf5-04e6-4aa6-9a90-19d3c61c05e7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "So how do you specify which functions you can pass into "
            ],
            [
              "graph()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and which ones you canâ€™t? The conventional way is by using a syntax that may not be easy to read or understand:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "So how do you specify which functions you can pass into "
          },
          {
            "Text": "graph()",
            "AttrFlags": 2
          },
          {
            "Text": " and which ones you canâ€™t? The conventional way is by using a syntax that may not be easy to read or understand:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935621178,
        "id": "45996348-4018-4cd3-aaca-530add894013",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935621178,
        "parent_id": "65c5daf5-04e6-4aa6-9a90-19d3c61c05e7",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "double (*fn)(double); // fn is a pointer-to-function that takes a double and returns one"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "double (*fn)(double); // fn is a pointer-to-function that takes a double and returns one",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935621178,
        "id": "c5ba9b36-b70c-4b71-bd45-1011a91b30b4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935621178,
        "parent_id": "65c5daf5-04e6-4aa6-9a90-19d3c61c05e7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The problem above is that there are two things trying to be defined at the same time: the structure of the function, and the fact that itâ€™s a pointer. So, split the two definitions! But by using "
            ],
            [
              "typedef",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", a better syntax (easier to read \u0026 understand) can be achieved."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The problem above is that there are two things trying to be defined at the same time: the structure of the function, and the fact that itâ€™s a pointer. So, split the two definitions! But by using "
          },
          {
            "Text": "typedef",
            "AttrFlags": 2
          },
          {
            "Text": ", a better syntax (easier to read \u0026 understand) can be achieved."
          }
        ]
      }
    ],
    "title": "Introduction",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}