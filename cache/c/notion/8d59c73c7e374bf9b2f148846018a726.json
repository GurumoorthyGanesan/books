{
  "ID": "8d59c73c-7e37-4bf9-b2f1-48846018a726",
  "Root": {
    "alive": true,
    "content": [
      "a92f5d13-f8d3-44e4-8d75-c33d195d28ad",
      "feb307f9-9b23-46ff-b1a5-3efd316628bb",
      "de3a8888-0ec6-4223-8893-4c030eadc24c",
      "3f90565a-1771-4881-9eb0-e5b5603cf5cb",
      "055988d6-eb90-4724-ba0b-00cf2778ac07",
      "49b0683f-ea79-48b6-b1b9-07b8134d0791",
      "6407dcc9-182f-4d0a-bc9f-8475e3c2e4c9",
      "8b949a81-35e9-40ce-b3f6-17e28d241e41",
      "f36a00d1-4ec9-4161-98b2-f584bc38ac74",
      "21042def-a8f9-4ffe-9903-a0ce4278f537",
      "0610c650-871b-47e3-b943-31ba7e6da477",
      "9577d2af-2149-4449-96c7-44e1709fb158",
      "82dc85b0-63eb-45e8-a1a4-d7d5ed191207",
      "afbdec7a-ab92-44f1-8529-87f03226be14",
      "10e40486-49dd-4124-9542-47a73f49cffc",
      "48d25316-7b4d-4c3e-8a4c-b8f94b841696",
      "13959c6f-75f5-435f-a4c8-11f4e75f3c3d",
      "99be0ea4-50ea-4ac9-b057-b511d69691b9",
      "cc9ec839-ec1e-4feb-a3ac-24aaeba5d779",
      "438735af-1d10-41db-92a3-7d6836e8e695",
      "906a0956-3a19-4e81-91cd-6f3cd73cf10a",
      "d0a09b5b-464d-41ef-bffb-9ff04c3eb0d2",
      "df5b00cc-a918-42fa-9051-930a9d419862",
      "e49d08ad-1427-4172-bc19-8d4e3f0e184a",
      "69ad4f2c-1277-4ee0-9f43-3a5e2c216483",
      "0f3615ba-08ff-49bf-8c7a-7041fccf724a",
      "b3ac3500-3bb9-42fd-bf96-ee8ab6b963a3",
      "11d046e5-e29a-4481-ac07-429fc69ad1e0",
      "b48c615c-21f4-400b-aa30-0e68e1d1f599",
      "05d0c44b-6f52-474d-beae-e6d1a715a380",
      "e80abf3c-6e87-45f9-bd2e-deb01fdda198",
      "8f069dbf-1c12-4b8d-bb73-6be73277eb90",
      "e4f2dce6-43ed-4113-b1a4-bf4192a16c59"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551935636192,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "8d59c73c-7e37-4bf9-b2f1-48846018a726",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551935636192,
    "parent_id": "218cbf42-b3ba-4b2a-bdab-e522009865b7",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Operators"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935636183,
        "id": "a92f5d13-f8d3-44e4-8d75-c33d195d28ad",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935636183,
        "parent_id": "8d59c73c-7e37-4bf9-b2f1-48846018a726",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Introduction"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Introduction"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935636185,
        "id": "feb307f9-9b23-46ff-b1a5-3efd316628bb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935636185,
        "parent_id": "8d59c73c-7e37-4bf9-b2f1-48846018a726",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "An operator in a programming language is a symbol that tells the compiler or interpreter to perform a specific mathematical, relational or logical operation and produce a final result."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "An operator in a programming language is a symbol that tells the compiler or interpreter to perform a specific mathematical, relational or logical operation and produce a final result."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935636186,
        "id": "de3a8888-0ec6-4223-8893-4c030eadc24c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935636186,
        "parent_id": "8d59c73c-7e37-4bf9-b2f1-48846018a726",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "C has many powerful operators. Many C operators are binary operators, which means they have two operands. For example, in "
            ],
            [
              "a / b",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "/",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is a binary operator that accepts two operands ("
            ],
            [
              "a",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "b",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "). There are some unary operators which take one operand (for example: "
            ],
            [
              "~",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "++",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "), and only one ternary operator "
            ],
            [
              "? :",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "C has many powerful operators. Many C operators are binary operators, which means they have two operands. For example, in "
          },
          {
            "Text": "a / b",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "/",
            "AttrFlags": 2
          },
          {
            "Text": " is a binary operator that accepts two operands ("
          },
          {
            "Text": "a",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "b",
            "AttrFlags": 2
          },
          {
            "Text": "). There are some unary operators which take one operand (for example: "
          },
          {
            "Text": "~",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "++",
            "AttrFlags": 2
          },
          {
            "Text": "), and only one ternary operator "
          },
          {
            "Text": "? :",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935636186,
        "id": "3f90565a-1771-4881-9eb0-e5b5603cf5cb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935636186,
        "parent_id": "8d59c73c-7e37-4bf9-b2f1-48846018a726",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Syntax"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Syntax"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935636186,
        "id": "055988d6-eb90-4724-ba0b-00cf2778ac07",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935636186,
        "parent_id": "8d59c73c-7e37-4bf9-b2f1-48846018a726",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "expr1 operator"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "expr1 operator"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935636187,
        "id": "49b0683f-ea79-48b6-b1b9-07b8134d0791",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935636187,
        "parent_id": "8d59c73c-7e37-4bf9-b2f1-48846018a726",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "operator expr2"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "operator expr2"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935636187,
        "id": "6407dcc9-182f-4d0a-bc9f-8475e3c2e4c9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935636187,
        "parent_id": "8d59c73c-7e37-4bf9-b2f1-48846018a726",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "expr1 operator expr2"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "expr1 operator expr2"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935636187,
        "id": "8b949a81-35e9-40ce-b3f6-17e28d241e41",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935636187,
        "parent_id": "8d59c73c-7e37-4bf9-b2f1-48846018a726",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "expr1 ? expr2 : expr3"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "expr1 ? expr2 : expr3"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935636187,
        "id": "f36a00d1-4ec9-4161-98b2-f584bc38ac74",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935636187,
        "parent_id": "8d59c73c-7e37-4bf9-b2f1-48846018a726",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Remarks"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Remarks"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935636187,
        "id": "21042def-a8f9-4ffe-9903-a0ce4278f537",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935636187,
        "parent_id": "8d59c73c-7e37-4bf9-b2f1-48846018a726",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Operators have an "
            ],
            [
              "arity",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ", a "
            ],
            [
              "precedence",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " and an "
            ],
            [
              "associativity",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Operators have an "
          },
          {
            "Text": "arity",
            "AttrFlags": 4
          },
          {
            "Text": ", a "
          },
          {
            "Text": "precedence",
            "AttrFlags": 4
          },
          {
            "Text": " and an "
          },
          {
            "Text": "associativity",
            "AttrFlags": 4
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935636188,
        "id": "0610c650-871b-47e3-b943-31ba7e6da477",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935636188,
        "parent_id": "8d59c73c-7e37-4bf9-b2f1-48846018a726",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Arity",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " indicates the number of operands. In C, three different operator arities exist:"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Arity",
            "AttrFlags": 4
          },
          {
            "Text": " indicates the number of operands. In C, three different operator arities exist:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935636188,
        "id": "9577d2af-2149-4449-96c7-44e1709fb158",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935636188,
        "parent_id": "8d59c73c-7e37-4bf9-b2f1-48846018a726",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Unary (1 operand)"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Unary (1 operand)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935636188,
        "id": "82dc85b0-63eb-45e8-a1a4-d7d5ed191207",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935636188,
        "parent_id": "8d59c73c-7e37-4bf9-b2f1-48846018a726",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Binary (2 operands)"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Binary (2 operands)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935636188,
        "id": "afbdec7a-ab92-44f1-8529-87f03226be14",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935636188,
        "parent_id": "8d59c73c-7e37-4bf9-b2f1-48846018a726",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Ternary (3 operands)"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Ternary (3 operands)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935636189,
        "id": "10e40486-49dd-4124-9542-47a73f49cffc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935636189,
        "parent_id": "8d59c73c-7e37-4bf9-b2f1-48846018a726",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Precedence",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " indicates which operators “bind” first to their operands. That is, which operator has priority to operate on its operands. For instance, the C language obeys the convention that multiplication and division have precedence over addition and subtraction:"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Precedence",
            "AttrFlags": 4
          },
          {
            "Text": " indicates which operators “bind” first to their operands. That is, which operator has priority to operate on its operands. For instance, the C language obeys the convention that multiplication and division have precedence over addition and subtraction:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935636189,
        "id": "48d25316-7b4d-4c3e-8a4c-b8f94b841696",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935636189,
        "parent_id": "8d59c73c-7e37-4bf9-b2f1-48846018a726",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "a * b + c"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "a * b + c",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935636189,
        "id": "13959c6f-75f5-435f-a4c8-11f4e75f3c3d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935636189,
        "parent_id": "8d59c73c-7e37-4bf9-b2f1-48846018a726",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Gives the same result as"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Gives the same result as"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935636189,
        "id": "99be0ea4-50ea-4ac9-b057-b511d69691b9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935636189,
        "parent_id": "8d59c73c-7e37-4bf9-b2f1-48846018a726",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "(a * b) + c"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "(a * b) + c",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935636189,
        "id": "cc9ec839-ec1e-4feb-a3ac-24aaeba5d779",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935636189,
        "parent_id": "8d59c73c-7e37-4bf9-b2f1-48846018a726",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If this is not what was wanted, precedence can be forced using parentheses, because they have the "
            ],
            [
              "highest",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " precedence of all operators."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If this is not what was wanted, precedence can be forced using parentheses, because they have the "
          },
          {
            "Text": "highest",
            "AttrFlags": 4
          },
          {
            "Text": " precedence of all operators."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935636189,
        "id": "438735af-1d10-41db-92a3-7d6836e8e695",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935636189,
        "parent_id": "8d59c73c-7e37-4bf9-b2f1-48846018a726",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "a * (b + c)"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "a * (b + c)",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935636189,
        "id": "906a0956-3a19-4e81-91cd-6f3cd73cf10a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935636189,
        "parent_id": "8d59c73c-7e37-4bf9-b2f1-48846018a726",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This new expression will produce a result that differs from the previous two expressions."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This new expression will produce a result that differs from the previous two expressions."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935636189,
        "id": "d0a09b5b-464d-41ef-bffb-9ff04c3eb0d2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935636189,
        "parent_id": "8d59c73c-7e37-4bf9-b2f1-48846018a726",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The C language has many precedence levels; A table is given below of all operators, in descending order of precedence."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The C language has many precedence levels; A table is given below of all operators, in descending order of precedence."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935636189,
        "id": "df5b00cc-a918-42fa-9051-930a9d419862",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935636189,
        "parent_id": "8d59c73c-7e37-4bf9-b2f1-48846018a726",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "**Precedence Table**\n\nOperators                                                     | Associativity\n------                                                        | ------\n`()` `[]` `-\u003e` `.`                                            | left to right\n`!` `~` `++` `--` `+` `-` `*` (dereference) `(type)` `sizeof` | right to left\n`*` (multiplication) `/` `%`                                  | left to right\n`+` `-`                                                       | left to right\n`\u003c\u003c` `\u003e\u003e`                                                     | left to right\n`\u003c` `\u003c=` `\u003e` `\u003e=`                                             | left to right\n`==` `!=`                                                     | left to right\n`\u0026`                                                           | left to right\n`^`                                                           | left to right\n\u003ccode\u003e\u0026#124;\u003c/code\u003e                                                          | left to right\n`\u0026\u0026`                                                          | left to right\n\u003ccode\u003e\u0026#124;\u0026#124;\u003c/code\u003e                                                        | left to right\n`?:`                                                          | right to left\n`=` `+=` `-=` `*=` `/=` `%=` `\u0026=` `^=` \u003ccode\u003e\u0026#124;=\u003c/code\u003e `\u003c\u003c=` `\u003e\u003e=`       | right to left\n`,`                                                          | left to right"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "**Precedence Table**\n\nOperators                                                     | Associativity\n------                                                        | ------\n`()` `[]` `-\u003e` `.`                                            | left to right\n`!` `~` `++` `--` `+` `-` `*` (dereference) `(type)` `sizeof` | right to left\n`*` (multiplication) `/` `%`                                  | left to right\n`+` `-`                                                       | left to right\n`\u003c\u003c` `\u003e\u003e`                                                     | left to right\n`\u003c` `\u003c=` `\u003e` `\u003e=`                                             | left to right\n`==` `!=`                                                     | left to right\n`\u0026`                                                           | left to right\n`^`                                                           | left to right\n\u003ccode\u003e\u0026#124;\u003c/code\u003e                                                          | left to right\n`\u0026\u0026`                                                          | left to right\n\u003ccode\u003e\u0026#124;\u0026#124;\u003c/code\u003e                                                        | left to right\n`?:`                                                          | right to left\n`=` `+=` `-=` `*=` `/=` `%=` `\u0026=` `^=` \u003ccode\u003e\u0026#124;=\u003c/code\u003e `\u003c\u003c=` `\u003e\u003e=`       | right to left\n`,`                                                          | left to right",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935636190,
        "id": "e49d08ad-1427-4172-bc19-8d4e3f0e184a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935636190,
        "parent_id": "8d59c73c-7e37-4bf9-b2f1-48846018a726",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Associativity",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " indicates how equal-precedence operators binds by default, and there are two kinds: "
            ],
            [
              "Left-to-Right",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "Right-to-Left",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ". An example of "
            ],
            [
              "Left-to-Right",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " binding is the subtraction operator ("
            ],
            [
              "\\-",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "). The expression"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Associativity",
            "AttrFlags": 4
          },
          {
            "Text": " indicates how equal-precedence operators binds by default, and there are two kinds: "
          },
          {
            "Text": "Left-to-Right",
            "AttrFlags": 4
          },
          {
            "Text": " and "
          },
          {
            "Text": "Right-to-Left",
            "AttrFlags": 4
          },
          {
            "Text": ". An example of "
          },
          {
            "Text": "Left-to-Right",
            "AttrFlags": 4
          },
          {
            "Text": " binding is the subtraction operator ("
          },
          {
            "Text": "\\-",
            "AttrFlags": 2
          },
          {
            "Text": "). The expression"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935636190,
        "id": "69ad4f2c-1277-4ee0-9f43-3a5e2c216483",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935636190,
        "parent_id": "8d59c73c-7e37-4bf9-b2f1-48846018a726",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "a - b - c - d"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "a - b - c - d",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935636191,
        "id": "0f3615ba-08ff-49bf-8c7a-7041fccf724a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935636191,
        "parent_id": "8d59c73c-7e37-4bf9-b2f1-48846018a726",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "has three identical-precedence subtractions, but gives the same result as"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "has three identical-precedence subtractions, but gives the same result as"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935636191,
        "id": "b3ac3500-3bb9-42fd-bf96-ee8ab6b963a3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935636191,
        "parent_id": "8d59c73c-7e37-4bf9-b2f1-48846018a726",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "((a - b) - c) - d"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "((a - b) - c) - d",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935636191,
        "id": "11d046e5-e29a-4481-ac07-429fc69ad1e0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935636191,
        "parent_id": "8d59c73c-7e37-4bf9-b2f1-48846018a726",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "because the left-most "
            ],
            [
              "\\-",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " binds first to its two operands."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "because the left-most "
          },
          {
            "Text": "\\-",
            "AttrFlags": 2
          },
          {
            "Text": " binds first to its two operands."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935636191,
        "id": "b48c615c-21f4-400b-aa30-0e68e1d1f599",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935636191,
        "parent_id": "8d59c73c-7e37-4bf9-b2f1-48846018a726",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "An example of "
            ],
            [
              "Right-to-Left",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " associativity are the dereference "
            ],
            [
              "\\*",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and post-increment "
            ],
            [
              "++",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " operators. Both have equal precedence, so if they are used in an expression such as"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "An example of "
          },
          {
            "Text": "Right-to-Left",
            "AttrFlags": 4
          },
          {
            "Text": " associativity are the dereference "
          },
          {
            "Text": "\\*",
            "AttrFlags": 2
          },
          {
            "Text": " and post-increment "
          },
          {
            "Text": "++",
            "AttrFlags": 2
          },
          {
            "Text": " operators. Both have equal precedence, so if they are used in an expression such as"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935636191,
        "id": "05d0c44b-6f52-474d-beae-e6d1a715a380",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935636191,
        "parent_id": "8d59c73c-7e37-4bf9-b2f1-48846018a726",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "* ptr ++"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "* ptr ++",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935636191,
        "id": "e80abf3c-6e87-45f9-bd2e-deb01fdda198",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935636191,
        "parent_id": "8d59c73c-7e37-4bf9-b2f1-48846018a726",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              ", this is equivalent to"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": ", this is equivalent to"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935636191,
        "id": "8f069dbf-1c12-4b8d-bb73-6be73277eb90",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935636191,
        "parent_id": "8d59c73c-7e37-4bf9-b2f1-48846018a726",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "* (ptr ++)"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "* (ptr ++)",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935636192,
        "id": "e4f2dce6-43ed-4113-b1a4-bf4192a16c59",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935636192,
        "parent_id": "8d59c73c-7e37-4bf9-b2f1-48846018a726",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "because the rightmost, unary operator ("
            ],
            [
              "++",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") binds first to its single operand."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "because the rightmost, unary operator ("
          },
          {
            "Text": "++",
            "AttrFlags": 2
          },
          {
            "Text": ") binds first to its single operand."
          }
        ]
      }
    ],
    "title": "Operators",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}