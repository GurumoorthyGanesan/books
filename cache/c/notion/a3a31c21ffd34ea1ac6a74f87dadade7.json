{
  "ID": "a3a31c21-ffd3-4ea1-ac6a-74f87dadade7",
  "Root": {
    "alive": true,
    "content": [
      "e07c6658-94f6-44f0-bd24-e18f0297e6bb",
      "6166dbb6-779d-4b49-baf4-4e0cbb7cca27",
      "ad57d4f6-5c50-438f-9f4f-3754fdc98b37",
      "37e4d0e8-43ad-4a54-9bba-c7a4aa7eb226",
      "41cf76e7-6edb-46ca-8edd-916d2f023ff4"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551937329842,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "a3a31c21-ffd3-4ea1-ac6a-74f87dadade7",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551937329842,
    "parent_id": "109e287f-796b-4acd-8b1b-dae5f45129bd",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Writing to one union member and reading from another"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551937329839,
        "id": "e07c6658-94f6-44f0-bd24-e18f0297e6bb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551937329839,
        "parent_id": "a3a31c21-ffd3-4ea1-ac6a-74f87dadade7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The members of a union share the same space in memory. This means that writing to one member overwrites the data in all other members and that reading from one member results in the same data as reading from all other members. However, because union members can have differing types and sizes, the data that is read can be interpreted differently, see http://stackoverflow.com/documentation/c/1119/structs-and-unions/9399/using-unions-to-reinterpret-values"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The members of a union share the same space in memory. This means that writing to one member overwrites the data in all other members and that reading from one member results in the same data as reading from all other members. However, because union members can have differing types and sizes, the data that is read can be interpreted differently, see http://stackoverflow.com/documentation/c/1119/structs-and-unions/9399/using-unions-to-reinterpret-values"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551937329842,
        "id": "6166dbb6-779d-4b49-baf4-4e0cbb7cca27",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551937329842,
        "parent_id": "a3a31c21-ffd3-4ea1-ac6a-74f87dadade7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The simple example below demonstrates a union with two members, both of the same type. It shows that writing to member "
            ],
            [
              "m_1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " results in the written value being read from member "
            ],
            [
              "m_2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and writing to member "
            ],
            [
              "m_2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " results in the written value being read from member "
            ],
            [
              "m_1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The simple example below demonstrates a union with two members, both of the same type. It shows that writing to member "
          },
          {
            "Text": "m_1",
            "AttrFlags": 2
          },
          {
            "Text": " results in the written value being read from member "
          },
          {
            "Text": "m_2",
            "AttrFlags": 2
          },
          {
            "Text": " and writing to member "
          },
          {
            "Text": "m_2",
            "AttrFlags": 2
          },
          {
            "Text": " results in the written value being read from member "
          },
          {
            "Text": "m_1",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551937329842,
        "id": "ad57d4f6-5c50-438f-9f4f-3754fdc98b37",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551937329842,
        "parent_id": "a3a31c21-ffd3-4ea1-ac6a-74f87dadade7",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cstdio.h\u003e\n\nunion my_union /* Define union */\n{\n    int m_1;\n    int m_2;\n};\n\nint main (void)\n{\n    union my_union u;             /* Declare union */\n    u.m_1 = 1;                    /* Write to m_1 */\n    printf(\"u.m_2: %i\\n\", u.m_2); /* Read from m_2 */\n    u.m_2 = 2;                    /* Write to m_2 */\n    printf(\"u.m_1: %i\\n\", u.m_1); /* Read from m_1 */\n    return 0;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cstdio.h\u003e\n\nunion my_union /* Define union */\n{\n    int m_1;\n    int m_2;\n};\n\nint main (void)\n{\n    union my_union u;             /* Declare union */\n    u.m_1 = 1;                    /* Write to m_1 */\n    printf(\"u.m_2: %i\\n\", u.m_2); /* Read from m_2 */\n    u.m_2 = 2;                    /* Write to m_2 */\n    printf(\"u.m_1: %i\\n\", u.m_1); /* Read from m_1 */\n    return 0;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551937329842,
        "id": "37e4d0e8-43ad-4a54-9bba-c7a4aa7eb226",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551937329842,
        "parent_id": "a3a31c21-ffd3-4ea1-ac6a-74f87dadade7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Result"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Result"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551937329842,
        "id": "41cf76e7-6edb-46ca-8edd-916d2f023ff4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551937329842,
        "parent_id": "a3a31c21-ffd3-4ea1-ac6a-74f87dadade7",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "u.m_2: 1\nu.m_1: 2"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "u.m_2: 1\nu.m_1: 2",
        "code_language": "Plain Text"
      }
    ],
    "title": "Writing to one union member and reading from another",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}