{
  "ID": "16b38249-2069-4c28-94b6-3bfc2c8c657a",
  "Root": {
    "alive": true,
    "content": [
      "16df0bfb-f01c-40fe-905a-f0436c5b7f69",
      "e736e257-037c-4ae3-ab45-0e04936c91ab",
      "f05d6efc-9c2f-4118-83f8-caef1ca84901",
      "d51d3fa8-d760-4c90-86bd-e73d3a1d3a82",
      "0c8cbcd0-7847-4c93-b072-6ac1da0aa66b",
      "8b3b0067-ccb9-4fec-8f7f-bee341ad5dd4",
      "765d9aa4-c20e-4d94-9a25-6d582e1bbfeb",
      "2245841f-c93b-4060-b0cd-abd66fa050c1",
      "b4ed08ec-cd28-4991-bb92-00ab88b480e4",
      "80a9ec00-4011-41f1-8c54-298be6fa096c",
      "0a4931d0-5cee-4acc-af3e-21fc4a4b5894",
      "632450c5-315d-4aab-9d16-1bf391ace716",
      "ec94b1ad-02e8-426b-b1e5-58ea4ee66bde"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551935740474,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "16b38249-2069-4c28-94b6-3bfc2c8c657a",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551935740474,
    "parent_id": "eff989d8-e4d4-4f97-952e-6c58e46dfb73",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Modifying any object more than once between two sequence points"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935740469,
        "id": "16df0bfb-f01c-40fe-905a-f0436c5b7f69",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935740469,
        "parent_id": "16b38249-2069-4c28-94b6-3bfc2c8c657a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int i = 42;\ni = i++; /* Assignment changes variable, post-increment as well */\nint a = i++ + i--;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int i = 42;\ni = i++; /* Assignment changes variable, post-increment as well */\nint a = i++ + i--;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935740472,
        "id": "e736e257-037c-4ae3-ab45-0e04936c91ab",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935740472,
        "parent_id": "16b38249-2069-4c28-94b6-3bfc2c8c657a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Code like this often leads to speculations about the “resulting value” of "
            ],
            [
              "i",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Rather than specifying an outcome, however, the C standards specify that evaluating such an expression produces "
            ],
            [
              "undefined behavior",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ". Prior to C2011, the standard formalized these rules in terms of so-called "
            ],
            [
              "sequence points",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Code like this often leads to speculations about the “resulting value” of "
          },
          {
            "Text": "i",
            "AttrFlags": 2
          },
          {
            "Text": ". Rather than specifying an outcome, however, the C standards specify that evaluating such an expression produces "
          },
          {
            "Text": "undefined behavior",
            "AttrFlags": 4
          },
          {
            "Text": ". Prior to C2011, the standard formalized these rules in terms of so-called "
          },
          {
            "Text": "sequence points",
            "AttrFlags": 4
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935740472,
        "id": "f05d6efc-9c2f-4118-83f8-caef1ca84901",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935740472,
        "parent_id": "16b38249-2069-4c28-94b6-3bfc2c8c657a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Between the previous and next sequence point a scalar object shall have its stored value modified at most once by the evaluation of an expression. Furthermore, the prior value shall be read only to determine the value to be stored."
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "Between the previous and next sequence point a scalar object shall have its stored value modified at most once by the evaluation of an expression. Furthermore, the prior value shall be read only to determine the value to be stored."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935740472,
        "id": "d51d3fa8-d760-4c90-86bd-e73d3a1d3a82",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935740472,
        "parent_id": "16b38249-2069-4c28-94b6-3bfc2c8c657a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "(C99 standard, section 6.5, paragraph 2)"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "(C99 standard, section 6.5, paragraph 2)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935740473,
        "id": "0c8cbcd0-7847-4c93-b072-6ac1da0aa66b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935740473,
        "parent_id": "16b38249-2069-4c28-94b6-3bfc2c8c657a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "That scheme proved to be a little too coarse, resulting in some expressions exhibiting undefined behavior with respect to C99 that plausibly should not do. C2011 retains sequence points, but introduces a more nuanced approach to this area based on "
            ],
            [
              "sequencing",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " and a relationship it calls “sequenced before”:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "That scheme proved to be a little too coarse, resulting in some expressions exhibiting undefined behavior with respect to C99 that plausibly should not do. C2011 retains sequence points, but introduces a more nuanced approach to this area based on "
          },
          {
            "Text": "sequencing",
            "AttrFlags": 4
          },
          {
            "Text": " and a relationship it calls “sequenced before”:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935740473,
        "id": "8b3b0067-ccb9-4fec-8f7f-bee341ad5dd4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935740473,
        "parent_id": "16b38249-2069-4c28-94b6-3bfc2c8c657a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If a side effect on a scalar object is unsequenced relative to either a different side effect on the same scalar object or a value computation using the value of the same scalar object, the behavior is undefined. If there are multiple allowable orderings of the subexpressions of an expression, the behavior is undefined if such an unsequenced side effect occurs in any of the orderings."
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "If a side effect on a scalar object is unsequenced relative to either a different side effect on the same scalar object or a value computation using the value of the same scalar object, the behavior is undefined. If there are multiple allowable orderings of the subexpressions of an expression, the behavior is undefined if such an unsequenced side effect occurs in any of the orderings."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935740473,
        "id": "765d9aa4-c20e-4d94-9a25-6d582e1bbfeb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935740473,
        "parent_id": "16b38249-2069-4c28-94b6-3bfc2c8c657a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "(C2011 standard, section 6.5, paragraph 2)"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "(C2011 standard, section 6.5, paragraph 2)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935740473,
        "id": "2245841f-c93b-4060-b0cd-abd66fa050c1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935740473,
        "parent_id": "16b38249-2069-4c28-94b6-3bfc2c8c657a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The full details of the “sequenced before” relation are too long to describe here, but they supplement sequence points rather than supplanting them, so they have the effect of defining behavior for some evaluations whose behavior previously was undefined. In particular, if there is a sequence point between two evaluations, then the one before the sequence point is “sequenced before” the one after."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The full details of the “sequenced before” relation are too long to describe here, but they supplement sequence points rather than supplanting them, so they have the effect of defining behavior for some evaluations whose behavior previously was undefined. In particular, if there is a sequence point between two evaluations, then the one before the sequence point is “sequenced before” the one after."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935740473,
        "id": "b4ed08ec-cd28-4991-bb92-00ab88b480e4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935740473,
        "parent_id": "16b38249-2069-4c28-94b6-3bfc2c8c657a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The following example has well-defined behaviour:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The following example has well-defined behaviour:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935740473,
        "id": "80a9ec00-4011-41f1-8c54-298be6fa096c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935740473,
        "parent_id": "16b38249-2069-4c28-94b6-3bfc2c8c657a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int i = 42;\ni = (i++, i+42); /* The comma-operator creates a sequence point */"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int i = 42;\ni = (i++, i+42); /* The comma-operator creates a sequence point */",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935740474,
        "id": "0a4931d0-5cee-4acc-af3e-21fc4a4b5894",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935740474,
        "parent_id": "16b38249-2069-4c28-94b6-3bfc2c8c657a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The following example has undefined behaviour:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The following example has undefined behaviour:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935740474,
        "id": "632450c5-315d-4aab-9d16-1bf391ace716",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935740474,
        "parent_id": "16b38249-2069-4c28-94b6-3bfc2c8c657a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int i = 42;\nprintf(\"%d %d\\n\", i++, i++); /* commas as separator of function arguments are not comma-operators */"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int i = 42;\nprintf(\"%d %d\\n\", i++, i++); /* commas as separator of function arguments are not comma-operators */",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935740474,
        "id": "ec94b1ad-02e8-426b-b1e5-58ea4ee66bde",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935740474,
        "parent_id": "16b38249-2069-4c28-94b6-3bfc2c8c657a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As with any form of undefined behavior, observing the actual behavior of evaluating expressions that violate the sequencing rules is not informative, except in a retrospective sense. The language standard provides no basis for expecting such observations to be predictive even of the future behavior of the same program."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "As with any form of undefined behavior, observing the actual behavior of evaluating expressions that violate the sequencing rules is not informative, except in a retrospective sense. The language standard provides no basis for expecting such observations to be predictive even of the future behavior of the same program."
          }
        ]
      }
    ],
    "title": "Modifying any object more than once between two sequence points",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}