{
  "ID": "f15a42d0-d010-4873-94a0-11cab0b7fdef",
  "Root": {
    "alive": true,
    "content": [
      "2ebe272a-9e50-4521-86c0-cc6898b17302",
      "80dcdd41-bb9f-480a-8282-79c279682820",
      "2beddf6a-766c-48f1-a2da-63e6d5d92c12",
      "874470d9-3883-43aa-876a-a35410eeb270",
      "88352c8d-9029-47cc-8b45-289fb604a193",
      "56a0bf54-a44b-4315-a1a4-cf05538d31cb",
      "26b39353-4e2a-42fd-bb19-4f161ca09c8b",
      "48d80609-efcf-4ee0-860c-65715533064b",
      "bd1b1b61-343d-403b-9048-c244d481295c",
      "dd59ee68-2f32-4f25-9edd-bd882547c328",
      "638c1fe6-9abe-4e24-a0f1-ee2da0c51e17",
      "489ca079-2ffd-4d2c-9921-301c75c77ada",
      "fbe53e2f-0cbe-4740-936e-bf6cb7e52c67",
      "454cfaec-8815-4239-a276-531e03cf69d2",
      "1e5b42ed-623e-4806-9e25-fce45bbf3585",
      "178dc7cf-34f6-4407-91f4-b7ef8cc4c931",
      "b2ecabdf-745d-47b1-9a7e-4478b53aaf50",
      "5ce51c81-56e6-47c7-8779-0e43d3b72ee4"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551936339003,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "f15a42d0-d010-4873-94a0-11cab0b7fdef",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551936339003,
    "parent_id": "ce0d7992-bb1e-4e62-ab26-2f99a9a2f78d",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Macros are simple string replacements"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936338998,
        "id": "2ebe272a-9e50-4521-86c0-cc6898b17302",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936338998,
        "parent_id": "f15a42d0-d010-4873-94a0-11cab0b7fdef",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Macros are simple string replacements. (Strictly speaking, they work with preprocessing tokens, not arbitrary strings.)"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Macros are simple string replacements. (Strictly speaking, they work with preprocessing tokens, not arbitrary strings.)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936338998,
        "id": "80dcdd41-bb9f-480a-8282-79c279682820",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936338998,
        "parent_id": "f15a42d0-d010-4873-94a0-11cab0b7fdef",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cstdio.h\u003e\n\n#define SQUARE(x) x*x\n\nint main(void) {\n    printf(\"%d\\n\", SQUARE(1+2));\n    return 0;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cstdio.h\u003e\n\n#define SQUARE(x) x*x\n\nint main(void) {\n    printf(\"%d\\n\", SQUARE(1+2));\n    return 0;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936338998,
        "id": "2beddf6a-766c-48f1-a2da-63e6d5d92c12",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936338998,
        "parent_id": "f15a42d0-d010-4873-94a0-11cab0b7fdef",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You may expect this code to print "
            ],
            [
              "9",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " ("
            ],
            [
              "3*3",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "), but actually "
            ],
            [
              "5",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will be printed because the macro will be expanded to "
            ],
            [
              "1+2*1+2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You may expect this code to print "
          },
          {
            "Text": "9",
            "AttrFlags": 2
          },
          {
            "Text": " ("
          },
          {
            "Text": "3*3",
            "AttrFlags": 2
          },
          {
            "Text": "), but actually "
          },
          {
            "Text": "5",
            "AttrFlags": 2
          },
          {
            "Text": " will be printed because the macro will be expanded to "
          },
          {
            "Text": "1+2*1+2",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936338999,
        "id": "874470d9-3883-43aa-876a-a35410eeb270",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936338999,
        "parent_id": "f15a42d0-d010-4873-94a0-11cab0b7fdef",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You should wrap the arguments and the whole macro expression in parentheses to avoid this problem."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You should wrap the arguments and the whole macro expression in parentheses to avoid this problem."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936338999,
        "id": "88352c8d-9029-47cc-8b45-289fb604a193",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936338999,
        "parent_id": "f15a42d0-d010-4873-94a0-11cab0b7fdef",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cstdio.h\u003e\n\n#define SQUARE(x) ((x)*(x))\n\nint main(void) {\n    printf(\"%d\\n\", SQUARE(1+2));\n    return 0;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cstdio.h\u003e\n\n#define SQUARE(x) ((x)*(x))\n\nint main(void) {\n    printf(\"%d\\n\", SQUARE(1+2));\n    return 0;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936338999,
        "id": "56a0bf54-a44b-4315-a1a4-cf05538d31cb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936338999,
        "parent_id": "f15a42d0-d010-4873-94a0-11cab0b7fdef",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Another problem is that the arguments of a macro are not guaranteed to be evaluated once; they may not be evaluated at all, or may be evaluated multiple times."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Another problem is that the arguments of a macro are not guaranteed to be evaluated once; they may not be evaluated at all, or may be evaluated multiple times."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936338999,
        "id": "26b39353-4e2a-42fd-bb19-4f161ca09c8b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936338999,
        "parent_id": "f15a42d0-d010-4873-94a0-11cab0b7fdef",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cstdio.h\u003e\n\n#define MIN(x, y) ((x) \u003c= (y) ? (x) : (y))\n\nint main(void) {\n    int a = 0;\n    printf(\"%d\\n\", MIN(a++, 10));\n    printf(\"a = %d\\n\", a);\n    return 0;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cstdio.h\u003e\n\n#define MIN(x, y) ((x) \u003c= (y) ? (x) : (y))\n\nint main(void) {\n    int a = 0;\n    printf(\"%d\\n\", MIN(a++, 10));\n    printf(\"a = %d\\n\", a);\n    return 0;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936338999,
        "id": "48d80609-efcf-4ee0-860c-65715533064b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936338999,
        "parent_id": "f15a42d0-d010-4873-94a0-11cab0b7fdef",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In this code, the macro will be expanded to "
            ],
            [
              "((a++) \u003c= (10) ? (a++) : (10))",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Since "
            ],
            [
              "a++",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " ("
            ],
            [
              "0",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") is smaller than "
            ],
            [
              "10",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "a++",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will be evaluated twice and it will make the value of "
            ],
            [
              "a",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and what is returned from "
            ],
            [
              "MIN",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " differ from you may expect."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In this code, the macro will be expanded to "
          },
          {
            "Text": "((a++) \u003c= (10) ? (a++) : (10))",
            "AttrFlags": 2
          },
          {
            "Text": ". Since "
          },
          {
            "Text": "a++",
            "AttrFlags": 2
          },
          {
            "Text": " ("
          },
          {
            "Text": "0",
            "AttrFlags": 2
          },
          {
            "Text": ") is smaller than "
          },
          {
            "Text": "10",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "a++",
            "AttrFlags": 2
          },
          {
            "Text": " will be evaluated twice and it will make the value of "
          },
          {
            "Text": "a",
            "AttrFlags": 2
          },
          {
            "Text": " and what is returned from "
          },
          {
            "Text": "MIN",
            "AttrFlags": 2
          },
          {
            "Text": " differ from you may expect."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936339000,
        "id": "bd1b1b61-343d-403b-9048-c244d481295c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936339000,
        "parent_id": "f15a42d0-d010-4873-94a0-11cab0b7fdef",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This can be avoided by using functions, but note that the types will be fixed by the function definition, whereas macros can be (too) flexible with types."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This can be avoided by using functions, but note that the types will be fixed by the function definition, whereas macros can be (too) flexible with types."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936339000,
        "id": "dd59ee68-2f32-4f25-9edd-bd882547c328",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936339000,
        "parent_id": "f15a42d0-d010-4873-94a0-11cab0b7fdef",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cstdio.h\u003e\n\nint min(int x, int y) {\n    return x \u003c= y ? x : y;\n}\n\nint main(void) {\n    int a = 0;\n    printf(\"%d\\n\", min(a++, 10));\n    printf(\"a = %d\\n\", a);\n    return 0;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cstdio.h\u003e\n\nint min(int x, int y) {\n    return x \u003c= y ? x : y;\n}\n\nint main(void) {\n    int a = 0;\n    printf(\"%d\\n\", min(a++, 10));\n    printf(\"a = %d\\n\", a);\n    return 0;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936339000,
        "id": "638c1fe6-9abe-4e24-a0f1-ee2da0c51e17",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936339000,
        "parent_id": "f15a42d0-d010-4873-94a0-11cab0b7fdef",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Now the problem of double-evaluation is fixed, but this "
            ],
            [
              "min",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " function cannot deal with "
            ],
            [
              "double",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " data without truncating, for example."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Now the problem of double-evaluation is fixed, but this "
          },
          {
            "Text": "min",
            "AttrFlags": 2
          },
          {
            "Text": " function cannot deal with "
          },
          {
            "Text": "double",
            "AttrFlags": 2
          },
          {
            "Text": " data without truncating, for example."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936339000,
        "id": "489ca079-2ffd-4d2c-9921-301c75c77ada",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936339000,
        "parent_id": "f15a42d0-d010-4873-94a0-11cab0b7fdef",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Macro directives can be of two types:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Macro directives can be of two types:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936339000,
        "id": "fbe53e2f-0cbe-4740-936e-bf6cb7e52c67",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936339000,
        "parent_id": "f15a42d0-d010-4873-94a0-11cab0b7fdef",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#define OBJECT_LIKE_MACRO     followed by a \"replacement list\" of preprocessor tokens\n#define FUNCTION_LIKE_MACRO(with, arguments) followed by a replacement list"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#define OBJECT_LIKE_MACRO     followed by a \"replacement list\" of preprocessor tokens\n#define FUNCTION_LIKE_MACRO(with, arguments) followed by a replacement list",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936339002,
        "id": "454cfaec-8815-4239-a276-531e03cf69d2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936339002,
        "parent_id": "f15a42d0-d010-4873-94a0-11cab0b7fdef",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "What distinguishes these two types of macros is the character that follows the identifier after "
            ],
            [
              "#define",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ": if it’s an "
            ],
            [
              "lparen",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ", it is a function-like macro; otherwise, it’s an object-like macro. If the intention is to write a function-like macro, there must not be any white space between the end of the name of the macro and "
            ],
            [
              "\\(",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Check "
            ],
            [
              "this",
              [
                [
                  "a",
                  "https://stackoverflow.com/questions/39931709/why-this-macros-is-not-expanding-correctly"
                ]
              ]
            ],
            [
              " for a detailed explanation."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "What distinguishes these two types of macros is the character that follows the identifier after "
          },
          {
            "Text": "#define",
            "AttrFlags": 2
          },
          {
            "Text": ": if it’s an "
          },
          {
            "Text": "lparen",
            "AttrFlags": 4
          },
          {
            "Text": ", it is a function-like macro; otherwise, it’s an object-like macro. If the intention is to write a function-like macro, there must not be any white space between the end of the name of the macro and "
          },
          {
            "Text": "\\(",
            "AttrFlags": 2
          },
          {
            "Text": ". Check "
          },
          {
            "Text": "this",
            "Link": "https://stackoverflow.com/questions/39931709/why-this-macros-is-not-expanding-correctly"
          },
          {
            "Text": " for a detailed explanation."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936339002,
        "id": "1e5b42ed-623e-4806-9e25-fce45bbf3585",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936339002,
        "parent_id": "f15a42d0-d010-4873-94a0-11cab0b7fdef",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In C99 or later, you could use "
            ],
            [
              "static inline int min(int x, int y) { … }",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In C99 or later, you could use "
          },
          {
            "Text": "static inline int min(int x, int y) { … }",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936339003,
        "id": "178dc7cf-34f6-4407-91f4-b7ef8cc4c931",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936339003,
        "parent_id": "f15a42d0-d010-4873-94a0-11cab0b7fdef",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In C11, you could write a ‘type-generic’ expression for "
            ],
            [
              "min",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In C11, you could write a ‘type-generic’ expression for "
          },
          {
            "Text": "min",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936339003,
        "id": "b2ecabdf-745d-47b1-9a7e-4478b53aaf50",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936339003,
        "parent_id": "f15a42d0-d010-4873-94a0-11cab0b7fdef",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cstdio.h\u003e\n\n#define min(x, y) _Generic((x), \\\n                        long double: min_ld, \\\n                        unsigned long long: min_ull, \\\n                        default: min_i \\\n                        )(x, y)\n\n#define gen_min(suffix, type) \\\n    static inline type min_##suffix(type x, type y) { return (x \u003c y) ? x : y; }\n\ngen_min(ld, long double)\ngen_min(ull, unsigned long long)\ngen_min(i, int)\n\nint main(void)\n{\n    unsigned long long ull1 = 50ULL;\n    unsigned long long ull2 = 37ULL;\n    printf(\"min(%llu, %llu) = %llu\\n\", ull1, ull2, min(ull1, ull2));\n    long double ld1 = 3.141592653L;\n    long double ld2 = 3.141592652L;\n    printf(\"min(%.10Lf, %.10Lf) = %.10Lf\\n\", ld1, ld2, min(ld1, ld2));\n    int i1 = 3141653;\n    int i2 = 3141652;\n    printf(\"min(%d, %d) = %d\\n\", i1, i2, min(i1, i2));\n    return 0;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cstdio.h\u003e\n\n#define min(x, y) _Generic((x), \\\n                        long double: min_ld, \\\n                        unsigned long long: min_ull, \\\n                        default: min_i \\\n                        )(x, y)\n\n#define gen_min(suffix, type) \\\n    static inline type min_##suffix(type x, type y) { return (x \u003c y) ? x : y; }\n\ngen_min(ld, long double)\ngen_min(ull, unsigned long long)\ngen_min(i, int)\n\nint main(void)\n{\n    unsigned long long ull1 = 50ULL;\n    unsigned long long ull2 = 37ULL;\n    printf(\"min(%llu, %llu) = %llu\\n\", ull1, ull2, min(ull1, ull2));\n    long double ld1 = 3.141592653L;\n    long double ld2 = 3.141592652L;\n    printf(\"min(%.10Lf, %.10Lf) = %.10Lf\\n\", ld1, ld2, min(ld1, ld2));\n    int i1 = 3141653;\n    int i2 = 3141652;\n    printf(\"min(%d, %d) = %d\\n\", i1, i2, min(i1, i2));\n    return 0;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936339003,
        "id": "5ce51c81-56e6-47c7-8779-0e43d3b72ee4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936339003,
        "parent_id": "f15a42d0-d010-4873-94a0-11cab0b7fdef",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The generic expression could be extended with more types such as "
            ],
            [
              "double",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "float",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "long long",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "unsigned long",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "long",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "unsigned",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " — and appropriate "
            ],
            [
              "gen_min",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " macro invocations written."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The generic expression could be extended with more types such as "
          },
          {
            "Text": "double",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "float",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "long long",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "unsigned long",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "long",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "unsigned",
            "AttrFlags": 2
          },
          {
            "Text": " — and appropriate "
          },
          {
            "Text": "gen_min",
            "AttrFlags": 2
          },
          {
            "Text": " macro invocations written."
          }
        ]
      }
    ],
    "title": "Macros are simple string replacements",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}