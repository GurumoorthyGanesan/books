{
  "ID": "d3dd2e7a-f27a-44bc-99a0-1331f67e3130",
  "Root": {
    "alive": true,
    "content": [
      "294bb633-1662-425e-9dd6-86355b114bfe",
      "7aae2369-9a86-4cf0-8276-2be9381a82f2",
      "2498ccc7-1462-4826-bf1f-27a376285289",
      "9bb521cf-83a8-4695-a311-e60567deea1c",
      "b43827ef-eef6-43db-b724-7f225681a7d2",
      "4c207091-655e-4c46-8ec3-3ac6cf84f829",
      "132495a4-9726-454d-bce7-24e16833b1da",
      "e7cc9ec9-0f07-4901-8d38-3f72f057579f",
      "49a94c0c-c96a-4c14-b2df-09d4a7364195",
      "43370255-edee-4767-b385-ce1894ef1b4d",
      "59ff1a23-2a11-43f8-b0a3-1baeff30c0d9",
      "e343cd02-befc-4531-b98a-b8253875eb5c",
      "c1fc60b8-7df5-4b5c-86b3-1b7b3da58f45",
      "bb7c0128-61f4-4eb0-b43f-fb5bb0f9fd25",
      "e15c3876-ee02-4080-8ab1-baa0d4190ead",
      "7950dd55-20b0-44be-b784-9516ad41c134",
      "0a9b944c-c91b-43dd-a49e-b9613841aa8d",
      "306ac71b-dd6a-4e9e-b709-1fa8e90e261d"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551937174394,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "d3dd2e7a-f27a-44bc-99a0-1331f67e3130",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551937174394,
    "parent_id": "ae726a5e-8d12-41b2-9bd8-209da2cca404",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Atomics"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551937174387,
        "id": "294bb633-1662-425e-9dd6-86355b114bfe",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551937174387,
        "parent_id": "d3dd2e7a-f27a-44bc-99a0-1331f67e3130",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Versions"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Versions"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551937174390,
        "id": "7aae2369-9a86-4cf0-8276-2be9381a82f2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551937174390,
        "parent_id": "d3dd2e7a-f27a-44bc-99a0-1331f67e3130",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "[{“Name”:“C11”,“GroupName”:null}]"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "[{“Name”:“C11”,“GroupName”:null}]"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551937174390,
        "id": "2498ccc7-1462-4826-bf1f-27a376285289",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551937174390,
        "parent_id": "d3dd2e7a-f27a-44bc-99a0-1331f67e3130",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Syntax"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Syntax"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551937174390,
        "id": "9bb521cf-83a8-4695-a311-e60567deea1c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551937174390,
        "parent_id": "d3dd2e7a-f27a-44bc-99a0-1331f67e3130",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "#ifdef __STDC_NO_ATOMICS__",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "#ifdef __STDC_NO_ATOMICS__",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551937174391,
        "id": "b43827ef-eef6-43db-b724-7f225681a7d2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551937174391,
        "parent_id": "d3dd2e7a-f27a-44bc-99a0-1331f67e3130",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "# error this implementation needs atomics",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "# error this implementation needs atomics",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551937174391,
        "id": "4c207091-655e-4c46-8ec3-3ac6cf84f829",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551937174391,
        "parent_id": "d3dd2e7a-f27a-44bc-99a0-1331f67e3130",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "#endif",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "#endif",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551937174391,
        "id": "132495a4-9726-454d-bce7-24e16833b1da",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551937174391,
        "parent_id": "d3dd2e7a-f27a-44bc-99a0-1331f67e3130",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "#include \u003cstdatomic.h\u003e",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "#include \u003cstdatomic.h\u003e",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551937174391,
        "id": "e7cc9ec9-0f07-4901-8d38-3f72f057579f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551937174391,
        "parent_id": "d3dd2e7a-f27a-44bc-99a0-1331f67e3130",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "unsigned _Atomic counter = ATOMIC_VAR_INIT(0);"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "unsigned _Atomic counter = ATOMIC_VAR_INIT(0);"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551937174391,
        "id": "49a94c0c-c96a-4c14-b2df-09d4a7364195",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551937174391,
        "parent_id": "d3dd2e7a-f27a-44bc-99a0-1331f67e3130",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Remarks"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Remarks"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551937174392,
        "id": "43370255-edee-4767-b385-ce1894ef1b4d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551937174392,
        "parent_id": "d3dd2e7a-f27a-44bc-99a0-1331f67e3130",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Atomics as part of the C language are an optional feature that is available since C11."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Atomics as part of the C language are an optional feature that is available since C11."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551937174392,
        "id": "59ff1a23-2a11-43f8-b0a3-1baeff30c0d9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551937174392,
        "parent_id": "d3dd2e7a-f27a-44bc-99a0-1331f67e3130",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Their purpose is to ensure race-free access to variables that are shared between different threads. Without atomic qualification, the state of a shared variable would be undefined if two threads access it concurrently. Eg an increment operation ("
            ],
            [
              "++",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") could be split into several assembler instructions, a read, the addition itself and a store instruction. If another thread would be doing the same operation their two instruction sequences could be intertwined and lead to an inconsistent result."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Their purpose is to ensure race-free access to variables that are shared between different threads. Without atomic qualification, the state of a shared variable would be undefined if two threads access it concurrently. Eg an increment operation ("
          },
          {
            "Text": "++",
            "AttrFlags": 2
          },
          {
            "Text": ") could be split into several assembler instructions, a read, the addition itself and a store instruction. If another thread would be doing the same operation their two instruction sequences could be intertwined and lead to an inconsistent result."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551937174392,
        "id": "e343cd02-befc-4531-b98a-b8253875eb5c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551937174392,
        "parent_id": "d3dd2e7a-f27a-44bc-99a0-1331f67e3130",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Types:",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " All object types with the exception of array types can be qualified with "
            ],
            [
              "_Atomic",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Types:",
            "AttrFlags": 1
          },
          {
            "Text": " All object types with the exception of array types can be qualified with "
          },
          {
            "Text": "_Atomic",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551937174392,
        "id": "c1fc60b8-7df5-4b5c-86b3-1b7b3da58f45",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551937174392,
        "parent_id": "d3dd2e7a-f27a-44bc-99a0-1331f67e3130",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Operators:",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " All read-modify-write operators (e.g "
            ],
            [
              "++",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "*=",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") on these are guaranteed to be atomic."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Operators:",
            "AttrFlags": 1
          },
          {
            "Text": " All read-modify-write operators (e.g "
          },
          {
            "Text": "++",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "*=",
            "AttrFlags": 2
          },
          {
            "Text": ") on these are guaranteed to be atomic."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551937174393,
        "id": "bb7c0128-61f4-4eb0-b43f-fb5bb0f9fd25",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551937174393,
        "parent_id": "d3dd2e7a-f27a-44bc-99a0-1331f67e3130",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Operations:",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " There are some other operations that are specified as type generic functions, e.g "
            ],
            [
              "atomic_compare_exchange",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Operations:",
            "AttrFlags": 1
          },
          {
            "Text": " There are some other operations that are specified as type generic functions, e.g "
          },
          {
            "Text": "atomic_compare_exchange",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551937174393,
        "id": "e15c3876-ee02-4080-8ab1-baa0d4190ead",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551937174393,
        "parent_id": "d3dd2e7a-f27a-44bc-99a0-1331f67e3130",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Threads:",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " Access to them is guaranteed not to produce data race when they are accessed by different threads."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Threads:",
            "AttrFlags": 1
          },
          {
            "Text": " Access to them is guaranteed not to produce data race when they are accessed by different threads."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551937174393,
        "id": "7950dd55-20b0-44be-b784-9516ad41c134",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551937174393,
        "parent_id": "d3dd2e7a-f27a-44bc-99a0-1331f67e3130",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Signal handlers:",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " Atomic types are called "
            ],
            [
              "lock-free",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " if all operations on them are stateless. In that case they can also be used to deal state changes between normal control flow and a signal handler."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Signal handlers:",
            "AttrFlags": 1
          },
          {
            "Text": " Atomic types are called "
          },
          {
            "Text": "lock-free",
            "AttrFlags": 4
          },
          {
            "Text": " if all operations on them are stateless. In that case they can also be used to deal state changes between normal control flow and a signal handler."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551937174394,
        "id": "0a9b944c-c91b-43dd-a49e-b9613841aa8d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551937174394,
        "parent_id": "d3dd2e7a-f27a-44bc-99a0-1331f67e3130",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "There is only one data type that is guaranteed to be lock-free: "
            ],
            [
              "atomic_flag",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". This is a minimal type who’s operations are intended to map to efficient test-and-set hardware instructions."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "There is only one data type that is guaranteed to be lock-free: "
          },
          {
            "Text": "atomic_flag",
            "AttrFlags": 2
          },
          {
            "Text": ". This is a minimal type who’s operations are intended to map to efficient test-and-set hardware instructions."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551937174394,
        "id": "306ac71b-dd6a-4e9e-b709-1fa8e90e261d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551937174394,
        "parent_id": "d3dd2e7a-f27a-44bc-99a0-1331f67e3130",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Other means to avoid race conditions are available in C11’s thread interface, in particular a mutex type "
            ],
            [
              "mtx_t",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to mutually exclude threads from accessing critical data or critical sections of code. If atomics are not available, these must be used to prevent races."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Other means to avoid race conditions are available in C11’s thread interface, in particular a mutex type "
          },
          {
            "Text": "mtx_t",
            "AttrFlags": 2
          },
          {
            "Text": " to mutually exclude threads from accessing critical data or critical sections of code. If atomics are not available, these must be used to prevent races."
          }
        ]
      }
    ],
    "title": "Atomics",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}