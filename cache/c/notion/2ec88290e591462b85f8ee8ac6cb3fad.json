{
  "ID": "2ec88290-e591-462b-85f8-ee8ac6cb3fad",
  "Root": {
    "alive": true,
    "content": [
      "912bb5d0-9ca5-4e43-9262-237d548b1785",
      "02586f51-9dd5-4471-944e-c71c88857b1e",
      "6a4c7dc5-db62-45d2-bd82-cd4c3a8c9b74",
      "02c3d656-d216-4bd8-b99e-3a9b6e544730",
      "90dda25f-5f15-4f62-8ae9-6d41d0846a5b",
      "1afd3212-db32-4cbe-ad19-7e6d352087d0",
      "88f31d6f-16aa-4982-9203-bd8893d167f1",
      "c1cd7aea-b8f1-46ab-a0b5-bad715f11dfe",
      "6b0d05cc-d3b4-4417-96bf-73a42bc0e4b1",
      "cb8178e0-6bb7-4b4d-8c0a-b07e50736a6b",
      "2e6d8e19-11f7-471e-8270-e6c635c7b3f4",
      "d4d2f398-d801-44e2-9e1e-cdca808fdf67",
      "e80d1fb7-ed75-4e4e-9ea2-7b2b2ab48850"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551935762655,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "2ec88290-e591-462b-85f8-ee8ac6cb3fad",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551935762655,
    "parent_id": "eff989d8-e4d4-4f97-952e-6c58e46dfb73",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Conversion between pointer types produces incorrectly aligned result"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935762649,
        "id": "912bb5d0-9ca5-4e43-9262-237d548b1785",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935762649,
        "parent_id": "2ec88290-e591-462b-85f8-ee8ac6cb3fad",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The following "
            ],
            [
              "might",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " have undefined behavior due to incorrect pointer alignment:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The following "
          },
          {
            "Text": "might",
            "AttrFlags": 4
          },
          {
            "Text": " have undefined behavior due to incorrect pointer alignment:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935762652,
        "id": "02586f51-9dd5-4471-944e-c71c88857b1e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935762652,
        "parent_id": "2ec88290-e591-462b-85f8-ee8ac6cb3fad",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "char *memory_block = calloc(sizeof(uint32_t) + 1, 1);\nuint32_t *intptr = (uint32_t*)(memory_block + 1);  /* possible undefined behavior */\nuint32_t mvalue = *intptr;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "char *memory_block = calloc(sizeof(uint32_t) + 1, 1);\nuint32_t *intptr = (uint32_t*)(memory_block + 1);  /* possible undefined behavior */\nuint32_t mvalue = *intptr;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935762652,
        "id": "6a4c7dc5-db62-45d2-bd82-cd4c3a8c9b74",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935762652,
        "parent_id": "2ec88290-e591-462b-85f8-ee8ac6cb3fad",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The undefined behavior happens as the pointer is converted. According to C11, if a "
            ],
            [
              "conversion between two pointer types produces a result that is incorrectly aligned (6.3.2.3), the behavior is undefined",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ". Here an "
            ],
            [
              "uint32_t",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " could require alignment of 2 or 4 for example."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The undefined behavior happens as the pointer is converted. According to C11, if a "
          },
          {
            "Text": "conversion between two pointer types produces a result that is incorrectly aligned (6.3.2.3), the behavior is undefined",
            "AttrFlags": 4
          },
          {
            "Text": ". Here an "
          },
          {
            "Text": "uint32_t",
            "AttrFlags": 2
          },
          {
            "Text": " could require alignment of 2 or 4 for example."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935762652,
        "id": "02c3d656-d216-4bd8-b99e-3a9b6e544730",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935762652,
        "parent_id": "2ec88290-e591-462b-85f8-ee8ac6cb3fad",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "calloc",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " on the other hand is required to return a pointer that is suitably aligned for any object type; thus "
            ],
            [
              "memory_block",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is properly aligned to contain an "
            ],
            [
              "uint32_t",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in its initial part. Then, on a system where "
            ],
            [
              "uint32_t",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " has required alignment of 2 or 4, "
            ],
            [
              "memory_block + 1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will be an "
            ],
            [
              "odd",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " address and thus not properly aligned."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "calloc",
            "AttrFlags": 2
          },
          {
            "Text": " on the other hand is required to return a pointer that is suitably aligned for any object type; thus "
          },
          {
            "Text": "memory_block",
            "AttrFlags": 2
          },
          {
            "Text": " is properly aligned to contain an "
          },
          {
            "Text": "uint32_t",
            "AttrFlags": 2
          },
          {
            "Text": " in its initial part. Then, on a system where "
          },
          {
            "Text": "uint32_t",
            "AttrFlags": 2
          },
          {
            "Text": " has required alignment of 2 or 4, "
          },
          {
            "Text": "memory_block + 1",
            "AttrFlags": 2
          },
          {
            "Text": " will be an "
          },
          {
            "Text": "odd",
            "AttrFlags": 4
          },
          {
            "Text": " address and thus not properly aligned."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935762653,
        "id": "90dda25f-5f15-4f62-8ae9-6d41d0846a5b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935762653,
        "parent_id": "2ec88290-e591-462b-85f8-ee8ac6cb3fad",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Observe that the C standard requests that already the cast operation is undefined. This is imposed because on platforms where addresses are segmented, the byte address "
            ],
            [
              "memory_block + 1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " may not even have a proper representation as an integer pointer."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Observe that the C standard requests that already the cast operation is undefined. This is imposed because on platforms where addresses are segmented, the byte address "
          },
          {
            "Text": "memory_block + 1",
            "AttrFlags": 2
          },
          {
            "Text": " may not even have a proper representation as an integer pointer."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935762653,
        "id": "1afd3212-db32-4cbe-ad19-7e6d352087d0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935762653,
        "parent_id": "2ec88290-e591-462b-85f8-ee8ac6cb3fad",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Casting "
            ],
            [
              "char *",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to pointers to other types without any concern to alignment requirements is sometimes incorrectly used for decoding packed structures such as file headers or network packets."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Casting "
          },
          {
            "Text": "char *",
            "AttrFlags": 2
          },
          {
            "Text": " to pointers to other types without any concern to alignment requirements is sometimes incorrectly used for decoding packed structures such as file headers or network packets."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935762653,
        "id": "88f31d6f-16aa-4982-9203-bd8893d167f1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935762653,
        "parent_id": "2ec88290-e591-462b-85f8-ee8ac6cb3fad",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You can avoid the undefined behavior arising from misaligned pointer conversion by using "
            ],
            [
              "memcpy",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You can avoid the undefined behavior arising from misaligned pointer conversion by using "
          },
          {
            "Text": "memcpy",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935762653,
        "id": "c1cd7aea-b8f1-46ab-a0b5-bad715f11dfe",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935762653,
        "parent_id": "2ec88290-e591-462b-85f8-ee8ac6cb3fad",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "memcpy(\u0026mvalue, memory_block + 1, sizeof mvalue);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "memcpy(\u0026mvalue, memory_block + 1, sizeof mvalue);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935762653,
        "id": "6b0d05cc-d3b4-4417-96bf-73a42bc0e4b1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935762653,
        "parent_id": "2ec88290-e591-462b-85f8-ee8ac6cb3fad",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Here no pointer conversion to "
            ],
            [
              "uint32_t*",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " takes place and the bytes are copied one by one."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Here no pointer conversion to "
          },
          {
            "Text": "uint32_t*",
            "AttrFlags": 2
          },
          {
            "Text": " takes place and the bytes are copied one by one."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935762653,
        "id": "cb8178e0-6bb7-4b4d-8c0a-b07e50736a6b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935762653,
        "parent_id": "2ec88290-e591-462b-85f8-ee8ac6cb3fad",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This copy operation for our example only leads to valid value of "
            ],
            [
              "mvalue",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " because:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This copy operation for our example only leads to valid value of "
          },
          {
            "Text": "mvalue",
            "AttrFlags": 2
          },
          {
            "Text": " because:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935762654,
        "id": "2e6d8e19-11f7-471e-8270-e6c635c7b3f4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935762654,
        "parent_id": "2ec88290-e591-462b-85f8-ee8ac6cb3fad",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We used "
            ],
            [
              "calloc",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", so the bytes are properly initialized. In our case all bytes have value "
            ],
            [
              "0",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", but any other proper initialization would do."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "We used "
          },
          {
            "Text": "calloc",
            "AttrFlags": 2
          },
          {
            "Text": ", so the bytes are properly initialized. In our case all bytes have value "
          },
          {
            "Text": "0",
            "AttrFlags": 2
          },
          {
            "Text": ", but any other proper initialization would do."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935762654,
        "id": "d4d2f398-d801-44e2-9e1e-cdca808fdf67",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935762654,
        "parent_id": "2ec88290-e591-462b-85f8-ee8ac6cb3fad",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "uint32_t",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is an exact width type and has no padding bits"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "uint32_t",
            "AttrFlags": 2
          },
          {
            "Text": " is an exact width type and has no padding bits"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935762655,
        "id": "e80d1fb7-ed75-4e4e-9ea2-7b2b2ab48850",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935762655,
        "parent_id": "2ec88290-e591-462b-85f8-ee8ac6cb3fad",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Any arbitrary bit pattern is a valid representation for any unsigned type."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Any arbitrary bit pattern is a valid representation for any unsigned type."
          }
        ]
      }
    ],
    "title": "Conversion between pointer types produces incorrectly aligned result",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}