{
  "ID": "b55e7f66-cd92-4fc2-ab26-0e4fbc710691",
  "Root": {
    "alive": true,
    "content": [
      "1e1bf756-d336-4dc6-9162-7200727ba881",
      "6d0b73f9-6d6a-44a5-9113-39355633fbd4"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551935838290,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "b55e7f66-cd92-4fc2-ab26-0e4fbc710691",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551935838290,
    "parent_id": "b81cd45f-aa26-4f19-8238-7b90dd64a769",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Precondition and Postcondition"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935838290,
        "id": "1e1bf756-d336-4dc6-9162-7200727ba881",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935838290,
        "parent_id": "b55e7f66-cd92-4fc2-ab26-0e4fbc710691",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "One use case for assertion is precondition and postcondition. This can be very useful to maintain "
            ],
            [
              "invariant",
              [
                [
                  "a",
                  "https://en.wikipedia.org/wiki/Invariant_(computer_science)"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "design by contract",
              [
                [
                  "a",
                  "https://en.wikipedia.org/wiki/Design_by_contract"
                ]
              ]
            ],
            [
              ". For a example a length is always zero or positive so this function must return a zero or positive value."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "One use case for assertion is precondition and postcondition. This can be very useful to maintain "
          },
          {
            "Text": "invariant",
            "Link": "https://en.wikipedia.org/wiki/Invariant_(computer_science)"
          },
          {
            "Text": " and "
          },
          {
            "Text": "design by contract",
            "Link": "https://en.wikipedia.org/wiki/Design_by_contract"
          },
          {
            "Text": ". For a example a length is always zero or positive so this function must return a zero or positive value."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935838290,
        "id": "6d0b73f9-6d6a-44a5-9113-39355633fbd4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935838290,
        "parent_id": "b55e7f66-cd92-4fc2-ab26-0e4fbc710691",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cstdio.h\u003e\n/* Uncomment to disable `assert()` */\n/* #define NDEBUG */\n#include \u003cassert.h\u003e\n\nint length2 (int *a, int count)\n{\n    int i, result = 0;\n\n    /* Precondition: */\n    /* NULL is an invalid vector */\n    assert (a != NULL);\n    /* Number of dimensions can not be negative.*/ \n    assert (count \u003e= 0);\n\n    /* Calculation */\n    for (i = 0; i \u003c count; ++i) \n    {\n        result = result + (a[i] * a[i]);\n    }\n\n    /* Postcondition: */\n    /* Resulting length can not be negative. */\n    assert (result \u003e= 0);\n    return result;\n}\n\n#define COUNT 3\n\nint main (void)\n{\n    int a[COUNT] = {1, 2, 3};\n    int *b = NULL;\n    int r;\n    r = length2 (a, COUNT);\n    printf (\"r = %i\\n\", r);\n    r = length2 (b, COUNT);\n    printf (\"r = %i\\n\", r);\n    return 0;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cstdio.h\u003e\n/* Uncomment to disable `assert()` */\n/* #define NDEBUG */\n#include \u003cassert.h\u003e\n\nint length2 (int *a, int count)\n{\n    int i, result = 0;\n\n    /* Precondition: */\n    /* NULL is an invalid vector */\n    assert (a != NULL);\n    /* Number of dimensions can not be negative.*/ \n    assert (count \u003e= 0);\n\n    /* Calculation */\n    for (i = 0; i \u003c count; ++i) \n    {\n        result = result + (a[i] * a[i]);\n    }\n\n    /* Postcondition: */\n    /* Resulting length can not be negative. */\n    assert (result \u003e= 0);\n    return result;\n}\n\n#define COUNT 3\n\nint main (void)\n{\n    int a[COUNT] = {1, 2, 3};\n    int *b = NULL;\n    int r;\n    r = length2 (a, COUNT);\n    printf (\"r = %i\\n\", r);\n    r = length2 (b, COUNT);\n    printf (\"r = %i\\n\", r);\n    return 0;\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "Precondition and Postcondition",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}