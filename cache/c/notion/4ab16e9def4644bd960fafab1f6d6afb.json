{
  "ID": "4ab16e9d-ef46-44bd-960f-afab1f6d6afb",
  "Root": {
    "alive": true,
    "content": [
      "5ddf84fb-fbd6-4fd5-a289-4529dd7f2d76",
      "2f71e0b3-11b9-487e-9cdb-0e588c583225",
      "4d895a0f-2b03-451b-bfda-3f67da6dc151",
      "3da08ffb-cd4f-49d9-a718-f249fe337303",
      "3b51523c-b3f8-4822-bebc-7ce6804965f9",
      "01c26c2c-3eac-4f8d-b1d8-42f29ecc529b",
      "fd6e126d-d31a-4e15-9276-b635ee4de59f"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551936755315,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "4ab16e9d-ef46-44bd-960f-afab1f6d6afb",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551936755315,
    "parent_id": "86031ef1-ffce-4374-a32d-1f1886dc6593",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Inititialization by one thread"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936755311,
        "id": "5ddf84fb-fbd6-4fd5-a289-4529dd7f2d76",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936755311,
        "parent_id": "4ab16e9d-ef46-44bd-960f-afab1f6d6afb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In most cases all data that is accessed by several threads should be initialized before the threads are created. This ensures that all threads start with a clear state and no "
            ],
            [
              "race condition",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " occurs."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In most cases all data that is accessed by several threads should be initialized before the threads are created. This ensures that all threads start with a clear state and no "
          },
          {
            "Text": "race condition",
            "AttrFlags": 4
          },
          {
            "Text": " occurs."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936755313,
        "id": "2f71e0b3-11b9-487e-9cdb-0e588c583225",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936755313,
        "parent_id": "4ab16e9d-ef46-44bd-960f-afab1f6d6afb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If this is not possible "
            ],
            [
              "once_flag",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "call_once",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can be used"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If this is not possible "
          },
          {
            "Text": "once_flag",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "call_once",
            "AttrFlags": 2
          },
          {
            "Text": " can be used"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936755314,
        "id": "4d895a0f-2b03-451b-bfda-3f67da6dc151",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936755314,
        "parent_id": "4ab16e9d-ef46-44bd-960f-afab1f6d6afb",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cthreads.h\u003e\n#include \u003cstdlib.h\u003e\n\n// the user data for this example\ndouble const* Big = 0;\n\n// the flag to protect big, must be global and/or static\nstatic once_flag onceBig = ONCE_INIT;\n\nvoid destroyBig(void) {\n   free((void*)Big);\n}\n\nvoid initBig(void) {\n    // assign to temporary with no const qualification\n    double* b = malloc(largeNum);\n    if (!b) {\n       perror(\"allocation failed for Big\");\n       exit(EXIT_FAILURE);\n    }\n    // now initialize and store Big\n    initializeBigWithSophisticatedValues(largeNum, b);\n    Big = b;\n    // ensure that the space is freed on exit or quick_exit\n    atexit(destroyBig);\n    at_quick_exit(destroyBig);\n}\n\n// the user thread function that relies on Big\nint myThreadFunc(void* a) {\n   call_once(\u0026onceBig, initBig);\n   // only use Big from here on\n   ...\n   return 0;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cthreads.h\u003e\n#include \u003cstdlib.h\u003e\n\n// the user data for this example\ndouble const* Big = 0;\n\n// the flag to protect big, must be global and/or static\nstatic once_flag onceBig = ONCE_INIT;\n\nvoid destroyBig(void) {\n   free((void*)Big);\n}\n\nvoid initBig(void) {\n    // assign to temporary with no const qualification\n    double* b = malloc(largeNum);\n    if (!b) {\n       perror(\"allocation failed for Big\");\n       exit(EXIT_FAILURE);\n    }\n    // now initialize and store Big\n    initializeBigWithSophisticatedValues(largeNum, b);\n    Big = b;\n    // ensure that the space is freed on exit or quick_exit\n    atexit(destroyBig);\n    at_quick_exit(destroyBig);\n}\n\n// the user thread function that relies on Big\nint myThreadFunc(void* a) {\n   call_once(\u0026onceBig, initBig);\n   // only use Big from here on\n   ...\n   return 0;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936755314,
        "id": "3da08ffb-cd4f-49d9-a718-f249fe337303",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936755314,
        "parent_id": "4ab16e9d-ef46-44bd-960f-afab1f6d6afb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "once_flag",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is used to coordinate different threads that might want to initialize the same data "
            ],
            [
              "Big",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". The call to "
            ],
            [
              "call_once",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " guarantees that"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "once_flag",
            "AttrFlags": 2
          },
          {
            "Text": " is used to coordinate different threads that might want to initialize the same data "
          },
          {
            "Text": "Big",
            "AttrFlags": 2
          },
          {
            "Text": ". The call to "
          },
          {
            "Text": "call_once",
            "AttrFlags": 2
          },
          {
            "Text": " guarantees that"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936755314,
        "id": "3b51523c-b3f8-4822-bebc-7ce6804965f9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936755314,
        "parent_id": "4ab16e9d-ef46-44bd-960f-afab1f6d6afb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "initBig",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is called exactly once"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "initBig",
            "AttrFlags": 2
          },
          {
            "Text": " is called exactly once"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936755315,
        "id": "01c26c2c-3eac-4f8d-b1d8-42f29ecc529b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936755315,
        "parent_id": "4ab16e9d-ef46-44bd-960f-afab1f6d6afb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "call_once",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " blocks until such a call to "
            ],
            [
              "initBig",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " has been made, either by the same or another thread."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "call_once",
            "AttrFlags": 2
          },
          {
            "Text": " blocks until such a call to "
          },
          {
            "Text": "initBig",
            "AttrFlags": 2
          },
          {
            "Text": " has been made, either by the same or another thread."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936755315,
        "id": "fd6e126d-d31a-4e15-9276-b635ee4de59f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936755315,
        "parent_id": "4ab16e9d-ef46-44bd-960f-afab1f6d6afb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Besides allocation, a typical thing to do in such a once-called function is a dynamic initialization of a thread control data structures such as "
            ],
            [
              "mtx_t",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "cnd_t",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " that can’t be initialized statically, using "
            ],
            [
              "mtx_init",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "cnd_init",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", respectively."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Besides allocation, a typical thing to do in such a once-called function is a dynamic initialization of a thread control data structures such as "
          },
          {
            "Text": "mtx_t",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "cnd_t",
            "AttrFlags": 2
          },
          {
            "Text": " that can’t be initialized statically, using "
          },
          {
            "Text": "mtx_init",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "cnd_init",
            "AttrFlags": 2
          },
          {
            "Text": ", respectively."
          }
        ]
      }
    ],
    "title": "Inititialization by one thread",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}