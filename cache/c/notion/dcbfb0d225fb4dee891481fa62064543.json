{
  "ID": "dcbfb0d2-25fb-4dee-8914-81fa62064543",
  "Root": {
    "alive": true,
    "content": [
      "32815dd6-d63d-4dd8-b4fb-f066d61ef446",
      "5a978ae3-14d0-471a-a0f0-66b9a65ca836",
      "fdd37c4a-9417-434e-8d8a-1ce77e0e5a8c",
      "8da319ae-a5c6-480e-aacc-76a98d4567af",
      "06b6593d-e757-40ba-92fd-dea8d5686d5a",
      "9fd3b2d9-672a-4bf0-9477-6aac015f65f2",
      "2dbb322a-2d5c-4d5c-83e3-de8093733a02",
      "2307b35f-42fa-4250-899e-652b9f165361",
      "e63a9256-b299-4691-bd42-e9c9152ef13f"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551935804165,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "dcbfb0d2-25fb-4dee-8914-81fa62064543",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551935804165,
    "parent_id": "f3c54523-5f2c-4d48-a50e-cd230eee34ae",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Using terminator values to determine the end of va list"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935804158,
        "id": "32815dd6-d63d-4dd8-b4fb-f066d61ef446",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935804158,
        "parent_id": "dcbfb0d2-25fb-4dee-8914-81fa62064543",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "With any variadic function, the function must know how to interpret the variable arguments list. The “traditional” approach (exemplified by "
            ],
            [
              "printf",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") is to specify number of arguments up front. However, this is not always a good idea:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "With any variadic function, the function must know how to interpret the variable arguments list. The “traditional” approach (exemplified by "
          },
          {
            "Text": "printf",
            "AttrFlags": 2
          },
          {
            "Text": ") is to specify number of arguments up front. However, this is not always a good idea:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935804161,
        "id": "5a978ae3-14d0-471a-a0f0-66b9a65ca836",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935804161,
        "parent_id": "dcbfb0d2-25fb-4dee-8914-81fa62064543",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "/* First argument specifies the number of parameters; the remainder are also int */\nextern int sum(int n, ...);\n\n/* But it's far from obvious from the code. */\nsum(5, 2, 1, 4, 3, 6)\n\n/* What happens if i.e. one argument is removed later on? */\nsum(5, 2, 1, 3, 6)  /* Disaster */"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "/* First argument specifies the number of parameters; the remainder are also int */\nextern int sum(int n, ...);\n\n/* But it's far from obvious from the code. */\nsum(5, 2, 1, 4, 3, 6)\n\n/* What happens if i.e. one argument is removed later on? */\nsum(5, 2, 1, 3, 6)  /* Disaster */",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935804163,
        "id": "fdd37c4a-9417-434e-8d8a-1ce77e0e5a8c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935804163,
        "parent_id": "dcbfb0d2-25fb-4dee-8914-81fa62064543",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Sometimes it’s more robust to add an explicit terminator, exemplified by the POSIX "
            ],
            [
              "execlp()",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://pubs.opengroup.org/onlinepubs/9699919799/functions/execlp.html"
                ]
              ]
            ],
            [
              " function. Here’s another function to calculate the sum of a series of "
            ],
            [
              "double",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " numbers:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Sometimes it’s more robust to add an explicit terminator, exemplified by the POSIX "
          },
          {
            "Text": "execlp()",
            "AttrFlags": 2,
            "Link": "http://pubs.opengroup.org/onlinepubs/9699919799/functions/execlp.html"
          },
          {
            "Text": " function. Here’s another function to calculate the sum of a series of "
          },
          {
            "Text": "double",
            "AttrFlags": 2
          },
          {
            "Text": " numbers:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935804163,
        "id": "8da319ae-a5c6-480e-aacc-76a98d4567af",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935804163,
        "parent_id": "dcbfb0d2-25fb-4dee-8914-81fa62064543",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cstdarg.h\u003e\n#include \u003cstdio.h\u003e\n#include \u003cmath.h\u003e\n\n/* Sums args up until the terminator NAN */\ndouble sum (double x, ...) {\n  double sum = 0;\n  va_list va;\n\n  va_start(va, x);\n  for (; !isnan(x); x = va_arg(va, double)) {\n    sum += x;\n  }\n  va_end(va);\n\n  return sum;\n}\n\nint main (void) {\n  printf(\"%g\\n\", sum(5., 2., 1., 4., 3., 6., NAN));\n  printf(\"%g\\n\", sum(1, 0.5, 0.25, 0.125, 0.0625, 0.03125, NAN));\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cstdarg.h\u003e\n#include \u003cstdio.h\u003e\n#include \u003cmath.h\u003e\n\n/* Sums args up until the terminator NAN */\ndouble sum (double x, ...) {\n  double sum = 0;\n  va_list va;\n\n  va_start(va, x);\n  for (; !isnan(x); x = va_arg(va, double)) {\n    sum += x;\n  }\n  va_end(va);\n\n  return sum;\n}\n\nint main (void) {\n  printf(\"%g\\n\", sum(5., 2., 1., 4., 3., 6., NAN));\n  printf(\"%g\\n\", sum(1, 0.5, 0.25, 0.125, 0.0625, 0.03125, NAN));\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935804163,
        "id": "06b6593d-e757-40ba-92fd-dea8d5686d5a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935804163,
        "parent_id": "dcbfb0d2-25fb-4dee-8914-81fa62064543",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Good terminator values:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Good terminator values:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935804164,
        "id": "9fd3b2d9-672a-4bf0-9477-6aac015f65f2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935804164,
        "parent_id": "dcbfb0d2-25fb-4dee-8914-81fa62064543",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "integer (supposed to be all positive or non-negative) — "
            ],
            [
              "0",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "-1",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "integer (supposed to be all positive or non-negative) — "
          },
          {
            "Text": "0",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "-1",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935804164,
        "id": "2dbb322a-2d5c-4d5c-83e3-de8093733a02",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935804164,
        "parent_id": "dcbfb0d2-25fb-4dee-8914-81fa62064543",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "floating point types — "
            ],
            [
              "NAN",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "floating point types — "
          },
          {
            "Text": "NAN",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935804164,
        "id": "2307b35f-42fa-4250-899e-652b9f165361",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935804164,
        "parent_id": "dcbfb0d2-25fb-4dee-8914-81fa62064543",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "pointer types — "
            ],
            [
              "NULL",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "pointer types — "
          },
          {
            "Text": "NULL",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935804165,
        "id": "e63a9256-b299-4691-bd42-e9c9152ef13f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935804165,
        "parent_id": "dcbfb0d2-25fb-4dee-8914-81fa62064543",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "enumerator types — some special value"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "enumerator types — some special value"
          }
        ]
      }
    ],
    "title": "Using terminator values to determine the end of va list",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}