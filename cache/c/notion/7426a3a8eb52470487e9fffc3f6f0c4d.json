{
  "ID": "7426a3a8-eb52-4704-87e9-fffc3f6f0c4d",
  "Root": {
    "alive": true,
    "content": [
      "ee3c44bb-b896-46fb-a3d7-f09424038f20",
      "eef97433-2f93-4017-badd-856a98e71a96",
      "e7d6b3e4-805b-4e25-9a70-950a51012888",
      "afa0026e-3c7b-4057-94be-2e293ab12ff6",
      "2e5ce81a-aa18-4150-93c0-dcc211dca42d",
      "2ff41efc-5c31-42b8-8607-ecb9269eaad4",
      "0960f35a-2f84-4363-a677-dabaa61c75d3",
      "98233f8c-7d8d-4765-84fe-395aabc14f8f",
      "6ec420f2-6558-46aa-85c0-231bfd02fca6",
      "75216c8e-b766-4a74-b8c2-7e16c982e05d"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551936215297,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "7426a3a8-eb52-4704-87e9-fffc3f6f0c4d",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551936215297,
    "parent_id": "1e14553b-8aea-44fb-a0fe-fbc893ff529a",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "void pointers as arguments and return values to standard functions"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936215293,
        "id": "ee3c44bb-b896-46fb-a3d7-f09424038f20",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936215293,
        "parent_id": "7426a3a8-eb52-4704-87e9-fffc3f6f0c4d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "void*",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is a catch all type for pointers to object types. An example of this in use is with the "
            ],
            [
              "malloc",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " function, which is declared as"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "void*",
            "AttrFlags": 2
          },
          {
            "Text": " is a catch all type for pointers to object types. An example of this in use is with the "
          },
          {
            "Text": "malloc",
            "AttrFlags": 2
          },
          {
            "Text": " function, which is declared as"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936215296,
        "id": "eef97433-2f93-4017-badd-856a98e71a96",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936215296,
        "parent_id": "7426a3a8-eb52-4704-87e9-fffc3f6f0c4d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "void* malloc(size_t);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "void* malloc(size_t);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936215296,
        "id": "e7d6b3e4-805b-4e25-9a70-950a51012888",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936215296,
        "parent_id": "7426a3a8-eb52-4704-87e9-fffc3f6f0c4d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The pointer-to-void return type means that it is possible to assign the return value from "
            ],
            [
              "malloc",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to a pointer to any other type of object:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The pointer-to-void return type means that it is possible to assign the return value from "
          },
          {
            "Text": "malloc",
            "AttrFlags": 2
          },
          {
            "Text": " to a pointer to any other type of object:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936215296,
        "id": "afa0026e-3c7b-4057-94be-2e293ab12ff6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936215296,
        "parent_id": "7426a3a8-eb52-4704-87e9-fffc3f6f0c4d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int* vector = malloc(10 * sizeof *vector);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int* vector = malloc(10 * sizeof *vector);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936215297,
        "id": "2e5ce81a-aa18-4150-93c0-dcc211dca42d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936215297,
        "parent_id": "7426a3a8-eb52-4704-87e9-fffc3f6f0c4d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It is generally considered good practice to "
            ],
            [
              "not",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " explicitly cast the values into and out of void pointers. In specific case of "
            ],
            [
              "malloc()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " this is because with an explicit cast, the compiler may otherwise assume, but not warn about, an incorrect return type for "
            ],
            [
              "malloc()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", if you forget to include "
            ],
            [
              "stdlib.h",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". It is also a case of using the correct behavior of void pointers to better conform to the DRY (don’t repeat yourself) principle; compare the above to the following, wherein the following code contains several needless additional places where a typo could cause issues:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It is generally considered good practice to "
          },
          {
            "Text": "not",
            "AttrFlags": 4
          },
          {
            "Text": " explicitly cast the values into and out of void pointers. In specific case of "
          },
          {
            "Text": "malloc()",
            "AttrFlags": 2
          },
          {
            "Text": " this is because with an explicit cast, the compiler may otherwise assume, but not warn about, an incorrect return type for "
          },
          {
            "Text": "malloc()",
            "AttrFlags": 2
          },
          {
            "Text": ", if you forget to include "
          },
          {
            "Text": "stdlib.h",
            "AttrFlags": 2
          },
          {
            "Text": ". It is also a case of using the correct behavior of void pointers to better conform to the DRY (don’t repeat yourself) principle; compare the above to the following, wherein the following code contains several needless additional places where a typo could cause issues:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936215297,
        "id": "2ff41efc-5c31-42b8-8607-ecb9269eaad4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936215297,
        "parent_id": "7426a3a8-eb52-4704-87e9-fffc3f6f0c4d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int* vector = (int*)malloc(10 * sizeof int*);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int* vector = (int*)malloc(10 * sizeof int*);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936215297,
        "id": "0960f35a-2f84-4363-a677-dabaa61c75d3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936215297,
        "parent_id": "7426a3a8-eb52-4704-87e9-fffc3f6f0c4d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Similarly, functions such as"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Similarly, functions such as"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936215297,
        "id": "98233f8c-7d8d-4765-84fe-395aabc14f8f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936215297,
        "parent_id": "7426a3a8-eb52-4704-87e9-fffc3f6f0c4d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "void* memcpy(void *restrict target, void const *restrict source, size_t size);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "void* memcpy(void *restrict target, void const *restrict source, size_t size);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936215297,
        "id": "6ec420f2-6558-46aa-85c0-231bfd02fca6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936215297,
        "parent_id": "7426a3a8-eb52-4704-87e9-fffc3f6f0c4d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "have their arguments specified as "
            ],
            [
              "void *",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " because the address of any object, regardless of the type, can be passed in. Here also, a call should not use a cast"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "have their arguments specified as "
          },
          {
            "Text": "void *",
            "AttrFlags": 2
          },
          {
            "Text": " because the address of any object, regardless of the type, can be passed in. Here also, a call should not use a cast"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936215297,
        "id": "75216c8e-b766-4a74-b8c2-7e16c982e05d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936215297,
        "parent_id": "7426a3a8-eb52-4704-87e9-fffc3f6f0c4d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "unsigned char buffer[sizeof(int)];\nint b = 67;\nmemcpy(buffer, \u0026b, sizeof buffer);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "unsigned char buffer[sizeof(int)];\nint b = 67;\nmemcpy(buffer, \u0026b, sizeof buffer);",
        "code_language": "Plain Text"
      }
    ],
    "title": "void pointers as arguments and return values to standard functions",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}