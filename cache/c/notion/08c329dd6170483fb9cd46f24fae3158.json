{
  "ID": "08c329dd-6170-483f-b9cd-46f24fae3158",
  "Root": {
    "alive": true,
    "content": [
      "ec3490c0-d814-41b3-adbd-5e5c58b8436c",
      "6e60b8d9-d960-4563-a986-9887f819bcbc",
      "e77b3e20-5d9f-4b17-9d41-ece6037fe187",
      "38285b5d-58d4-4e47-8181-aee92dd5a44e",
      "b9d71470-feb7-440d-88fb-63759e16c7a8",
      "fdcd3bea-62da-41df-94fe-758a234fe962",
      "7b5f178d-89db-4c7b-bdc6-d1a81de5aa68",
      "79c59133-db03-4f79-bf9f-d94df48e3255",
      "5cffb3f9-5393-4c82-961a-2200b0b07928",
      "88520700-f586-4f0d-b84c-75609888e6f0",
      "badbe4c0-3851-433f-baaf-971ccc6eabfe",
      "290b6f11-f13f-4b76-96f5-f4de42cd6a7e",
      "088c7fc4-498d-4548-8e75-f91bad6c8f7a",
      "1578cdc3-fc92-4f3e-bf4c-a91c1913dcef",
      "0b6cdfb2-e325-4465-adb0-6db2388b7645",
      "3d895e93-fd17-4e71-a0d8-c17b1cd25d25",
      "3ef72ba2-cd36-4d00-8efa-64cd8b944b11",
      "da45169f-b3e0-4d8d-b2bf-9a2d6ab9825c",
      "118f20cf-543e-4b76-ab4d-62864b0ac4d5",
      "e98c30f4-44d2-4e64-b689-9479464df02d",
      "3850bbd4-660e-4b85-97de-0634335ebaf7",
      "164d9490-e2cc-4274-878b-602c7c0e237d",
      "4cd84c0e-ab0d-4ecd-83cc-f6f4e30c05b1",
      "cd4eadac-b15c-43b4-9c7e-72c6edb965e9",
      "9526c9df-623d-4da8-b03c-97df7e9272f6",
      "7926e377-1d57-4798-8a85-a4f4d5aa0edd",
      "cbe820d2-d526-4add-be76-19a48389226c"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551935623236,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "08c329dd-6170-483f-b9cd-46f24fae3158",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551935623236,
    "parent_id": "033ae011-39fb-4a86-9a89-54971c729ce8",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Best Practices"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935623229,
        "id": "ec3490c0-d814-41b3-adbd-5e5c58b8436c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935623229,
        "parent_id": "08c329dd-6170-483f-b9cd-46f24fae3158",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Using typedef"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Using typedef"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935623233,
        "id": "6e60b8d9-d960-4563-a986-9887f819bcbc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935623233,
        "parent_id": "08c329dd-6170-483f-b9cd-46f24fae3158",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It might be handy to use a "
            ],
            [
              "typedef",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " instead of declaring the function pointer each time by hand."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It might be handy to use a "
          },
          {
            "Text": "typedef",
            "AttrFlags": 2
          },
          {
            "Text": " instead of declaring the function pointer each time by hand."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935623233,
        "id": "e77b3e20-5d9f-4b17-9d41-ece6037fe187",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935623233,
        "parent_id": "08c329dd-6170-483f-b9cd-46f24fae3158",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The syntax for declaring a "
            ],
            [
              "typedef",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " for a function pointer is:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The syntax for declaring a "
          },
          {
            "Text": "typedef",
            "AttrFlags": 2
          },
          {
            "Text": " for a function pointer is:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935623233,
        "id": "38285b5d-58d4-4e47-8181-aee92dd5a44e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935623233,
        "parent_id": "08c329dd-6170-483f-b9cd-46f24fae3158",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "typedef returnType (*name)(parameters);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "typedef returnType (*name)(parameters);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935623233,
        "id": "b9d71470-feb7-440d-88fb-63759e16c7a8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935623233,
        "parent_id": "08c329dd-6170-483f-b9cd-46f24fae3158",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Example:"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935623233,
        "id": "fdcd3bea-62da-41df-94fe-758a234fe962",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935623233,
        "parent_id": "08c329dd-6170-483f-b9cd-46f24fae3158",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Posit that we have a function, "
            ],
            [
              "sort",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", that expects a function pointer to a function "
            ],
            [
              "compare",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " such that:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Posit that we have a function, "
          },
          {
            "Text": "sort",
            "AttrFlags": 2
          },
          {
            "Text": ", that expects a function pointer to a function "
          },
          {
            "Text": "compare",
            "AttrFlags": 2
          },
          {
            "Text": " such that:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935623233,
        "id": "7b5f178d-89db-4c7b-bdc6-d1a81de5aa68",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935623233,
        "parent_id": "08c329dd-6170-483f-b9cd-46f24fae3158",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "compare - A compare function for two elements which is to be supplied to a sort function."
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "compare - A compare function for two elements which is to be supplied to a sort function."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935623234,
        "id": "79c59133-db03-4f79-bf9f-d94df48e3255",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935623234,
        "parent_id": "08c329dd-6170-483f-b9cd-46f24fae3158",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "“compare” is expected to return 0 if the two elements are deemed \u003e equal, a positive value if the first element passed is “larger” in some \u003e sense than the latter element and otherwise the function returns a \u003e negative value (meaning that the first element is “lesser” than the latter)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "“compare” is expected to return 0 if the two elements are deemed \u003e equal, a positive value if the first element passed is “larger” in some \u003e sense than the latter element and otherwise the function returns a \u003e negative value (meaning that the first element is “lesser” than the latter)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935623234,
        "id": "5cffb3f9-5393-4c82-961a-2200b0b07928",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935623234,
        "parent_id": "08c329dd-6170-483f-b9cd-46f24fae3158",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Without a "
            ],
            [
              "typedef",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " we would pass a function pointer as an argument to a function in the following manner:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Without a "
          },
          {
            "Text": "typedef",
            "AttrFlags": 2
          },
          {
            "Text": " we would pass a function pointer as an argument to a function in the following manner:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935623234,
        "id": "88520700-f586-4f0d-b84c-75609888e6f0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935623234,
        "parent_id": "08c329dd-6170-483f-b9cd-46f24fae3158",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "void sort(int (*compare)(const void *elem1, const void *elem2)) { \n    /* inside of this block, the function is named \"compare\" */\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "void sort(int (*compare)(const void *elem1, const void *elem2)) { \n    /* inside of this block, the function is named \"compare\" */\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935623234,
        "id": "badbe4c0-3851-433f-baaf-971ccc6eabfe",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935623234,
        "parent_id": "08c329dd-6170-483f-b9cd-46f24fae3158",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "With a "
            ],
            [
              "typedef",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", we’d write:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "With a "
          },
          {
            "Text": "typedef",
            "AttrFlags": 2
          },
          {
            "Text": ", we’d write:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935623234,
        "id": "290b6f11-f13f-4b76-96f5-f4de42cd6a7e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935623234,
        "parent_id": "08c329dd-6170-483f-b9cd-46f24fae3158",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "typedef int (*compare_func)(const void *, const void *);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "typedef int (*compare_func)(const void *, const void *);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935623235,
        "id": "088c7fc4-498d-4548-8e75-f91bad6c8f7a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935623235,
        "parent_id": "08c329dd-6170-483f-b9cd-46f24fae3158",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "and then we could change the function signature of "
            ],
            [
              "sort",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "and then we could change the function signature of "
          },
          {
            "Text": "sort",
            "AttrFlags": 2
          },
          {
            "Text": " to:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935623235,
        "id": "1578cdc3-fc92-4f3e-bf4c-a91c1913dcef",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935623235,
        "parent_id": "08c329dd-6170-483f-b9cd-46f24fae3158",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "void sort(compare_func func) { \n    /* In this block the function is named \"func\" */\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "void sort(compare_func func) { \n    /* In this block the function is named \"func\" */\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935623235,
        "id": "0b6cdfb2-e325-4465-adb0-6db2388b7645",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935623235,
        "parent_id": "08c329dd-6170-483f-b9cd-46f24fae3158",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "both definitions of "
            ],
            [
              "sort",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " would accept any function of the form"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "both definitions of "
          },
          {
            "Text": "sort",
            "AttrFlags": 2
          },
          {
            "Text": " would accept any function of the form"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935623235,
        "id": "3d895e93-fd17-4e71-a0d8-c17b1cd25d25",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935623235,
        "parent_id": "08c329dd-6170-483f-b9cd-46f24fae3158",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int compare(const void *arg1, const void *arg2) {\n    /* Note that the variable names do not have to be \"elem1\" and \"elem2\" */\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int compare(const void *arg1, const void *arg2) {\n    /* Note that the variable names do not have to be \"elem1\" and \"elem2\" */\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935623235,
        "id": "3ef72ba2-cd36-4d00-8efa-64cd8b944b11",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935623235,
        "parent_id": "08c329dd-6170-483f-b9cd-46f24fae3158",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935623235,
        "id": "da45169f-b3e0-4d8d-b2bf-9a2d6ab9825c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935623235,
        "parent_id": "08c329dd-6170-483f-b9cd-46f24fae3158",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Function pointers are the only place where you should include the pointer property of the type, e.g. do not try to define types like "
            ],
            [
              "typedef struct something_struct *something_type",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". This applies even for a structure with members which are not supposed to accessed directly by API callers, for example the stdio.h "
            ],
            [
              "FILE",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " type (which as you now will notice is not a pointer)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Function pointers are the only place where you should include the pointer property of the type, e.g. do not try to define types like "
          },
          {
            "Text": "typedef struct something_struct *something_type",
            "AttrFlags": 2
          },
          {
            "Text": ". This applies even for a structure with members which are not supposed to accessed directly by API callers, for example the stdio.h "
          },
          {
            "Text": "FILE",
            "AttrFlags": 2
          },
          {
            "Text": " type (which as you now will notice is not a pointer)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935623235,
        "id": "118f20cf-543e-4b76-ab4d-62864b0ac4d5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935623235,
        "parent_id": "08c329dd-6170-483f-b9cd-46f24fae3158",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Taking context pointers."
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Taking context pointers."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935623235,
        "id": "e98c30f4-44d2-4e64-b689-9479464df02d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935623235,
        "parent_id": "08c329dd-6170-483f-b9cd-46f24fae3158",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A function pointer should almost always take a user-supplied void * as a context pointer."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A function pointer should almost always take a user-supplied void * as a context pointer."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935623236,
        "id": "3850bbd4-660e-4b85-97de-0634335ebaf7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935623236,
        "parent_id": "08c329dd-6170-483f-b9cd-46f24fae3158",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Example"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Example"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935623236,
        "id": "164d9490-e2cc-4274-878b-602c7c0e237d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935623236,
        "parent_id": "08c329dd-6170-483f-b9cd-46f24fae3158",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "/* function minimiser, details unimportant */\ndouble findminimum( double (*fptr)(double x, double y, void *ctx), void *ctx)\n{\n    ...\n    /* repeatedly make calls like this */\n    temp = (*fptr)(testx, testy, ctx);\n}\n\n/* the function we are minimising, sums two cubics */\ndouble *cubics(double x, double y, void *ctx)\n{\n    double *coeffsx = ctx;\n    double *coeffsy = coeffx + 4;\n\n    return coeffsx[0] * x * x * x + coeffsx[1] * x * x + coeffsx[2] * x + coeffsx[3] +\n           coeffsy[0] * y * y * y + coeffsy[1] * y * y + coeffsy[2] * y + coeffsy[3];\n\n} \n\nvoid caller()\n{\n    /* context, the coefficients of the cubics */\n    double coeffs[8] = {1, 2, 3, 4, 5, 6, 7, 8};\n    double min;\n\n    min = findminimum(cubics, coeffs);       \n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "/* function minimiser, details unimportant */\ndouble findminimum( double (*fptr)(double x, double y, void *ctx), void *ctx)\n{\n    ...\n    /* repeatedly make calls like this */\n    temp = (*fptr)(testx, testy, ctx);\n}\n\n/* the function we are minimising, sums two cubics */\ndouble *cubics(double x, double y, void *ctx)\n{\n    double *coeffsx = ctx;\n    double *coeffsy = coeffx + 4;\n\n    return coeffsx[0] * x * x * x + coeffsx[1] * x * x + coeffsx[2] * x + coeffsx[3] +\n           coeffsy[0] * y * y * y + coeffsy[1] * y * y + coeffsy[2] * y + coeffsy[3];\n\n} \n\nvoid caller()\n{\n    /* context, the coefficients of the cubics */\n    double coeffs[8] = {1, 2, 3, 4, 5, 6, 7, 8};\n    double min;\n\n    min = findminimum(cubics, coeffs);       \n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935623236,
        "id": "4cd84c0e-ab0d-4ecd-83cc-f6f4e30c05b1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935623236,
        "parent_id": "08c329dd-6170-483f-b9cd-46f24fae3158",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Using the context pointer means that the extra parameters do not need to be hard-coded into the function pointed to, or require the use globals."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Using the context pointer means that the extra parameters do not need to be hard-coded into the function pointed to, or require the use globals."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935623236,
        "id": "cd4eadac-b15c-43b4-9c7e-72c6edb965e9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935623236,
        "parent_id": "08c329dd-6170-483f-b9cd-46f24fae3158",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The library function "
            ],
            [
              "qsort()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " does not follow this rule, and one can often get away without context for trivial comparison functions. But for anything more complicated, the context pointer becomes essential."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The library function "
          },
          {
            "Text": "qsort()",
            "AttrFlags": 2
          },
          {
            "Text": " does not follow this rule, and one can often get away without context for trivial comparison functions. But for anything more complicated, the context pointer becomes essential."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935623236,
        "id": "9526c9df-623d-4da8-b03c-97df7e9272f6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935623236,
        "parent_id": "08c329dd-6170-483f-b9cd-46f24fae3158",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935623236,
        "id": "7926e377-1d57-4798-8a85-a4f4d5aa0edd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935623236,
        "parent_id": "08c329dd-6170-483f-b9cd-46f24fae3158",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "See also"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "See also"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935623236,
        "id": "cbe820d2-d526-4add-be76-19a48389226c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935623236,
        "parent_id": "08c329dd-6170-483f-b9cd-46f24fae3158",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "http://stackoverflow.com/documentation/c/1108/pointers/7796/functions-pointers#t=201701141233084604166"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "http://stackoverflow.com/documentation/c/1108/pointers/7796/functions-pointers#t=201701141233084604166"
          }
        ]
      }
    ],
    "title": "Best Practices",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}