{
  "ID": "e73f2286-3edb-4737-a2c3-b4fd22c6c7f4",
  "Root": {
    "alive": true,
    "content": [
      "e7ba25fb-9869-4817-afdc-3e3b6a53ef44",
      "fbdd6bbb-0ff1-4e30-8f57-28ba73023aa4",
      "2c6e005e-2a15-4183-aadb-d73978fa9ce4",
      "46a1e74e-7bac-46ef-9980-e6651472a79f",
      "0c29d707-b3c0-46c7-8713-5e97bd81a9f8",
      "26b77a95-ba81-4930-a532-462bf5427016",
      "8b537d7a-a3e9-4bb6-b1aa-d1e6f2beb11c",
      "6eda683c-d108-4176-8a43-bdcb5b202138",
      "f010699f-06e9-47ab-aaea-1908dcdef6db",
      "64c2f37b-300c-4e4b-b1fd-63b8bc28f9d2",
      "c5ca9e7c-aa92-489c-9fb1-3a1823f976d6",
      "9ee85ab6-4812-4969-89f3-8f9be80f3251"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551935853385,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "e73f2286-3edb-4737-a2c3-b4fd22c6c7f4",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551935853385,
    "parent_id": "fb6df079-bba6-489e-ac6a-3ea61d24e7af",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "040 Reversing a linked list"
        ]
      ]
    },
    "type": "page",
    "version": 2,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935853383,
        "id": "e7ba25fb-9869-4817-afdc-3e3b6a53ef44",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935853383,
        "parent_id": "e73f2286-3edb-4737-a2c3-b4fd22c6c7f4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You can also perform this task recursively, but I have chosen in this example to use an iterative approach. This task is useful if you are "
            ],
            [
              "inserting all of your nodes at the beginning of a linked list",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c/560/linked-lists/10931/inserting-a-node-at-the-beginning-of-a-singly-linked-list#t=201607260122178444607"
                ]
              ]
            ],
            [
              ". Here is an example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You can also perform this task recursively, but I have chosen in this example to use an iterative approach. This task is useful if you are "
          },
          {
            "Text": "inserting all of your nodes at the beginning of a linked list",
            "Link": "http://stackoverflow.com/documentation/c/560/linked-lists/10931/inserting-a-node-at-the-beginning-of-a-singly-linked-list#t=201607260122178444607"
          },
          {
            "Text": ". Here is an example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935853383,
        "id": "fbdd6bbb-0ff1-4e30-8f57-28ba73023aa4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935853383,
        "parent_id": "e73f2286-3edb-4737-a2c3-b4fd22c6c7f4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cstdio.h\u003e\n#include \u003cstdlib.h\u003e\n\n#define NUM_ITEMS 10\n\nstruct Node {\n  int data;\n  struct Node *next;\n};\n\nvoid insert_node(struct Node **headNode, int nodeValue, int position);\nvoid print_list(struct Node *headNode);\nvoid reverse_list(struct Node **headNode);\n\n\nint main(void) {\n  int i;\n  struct Node *head = NULL;\n\n  for(i = 1; i \u003c= NUM_ITEMS; i++) {\n    insert_node(\u0026head, i, i);\n  }\n  print_list(head);\n\n  printf(\"I will now reverse the linked list\\n\");\n  reverse_list(\u0026head);\n  print_list(head);\n  return 0;\n}\n\nvoid print_list(struct Node *headNode) {\n  struct Node *iterator;\n\n  for(iterator = headNode; iterator != NULL; iterator = iterator-\u003enext) {\n    printf(\"Value: %d\\n\", iterator-\u003edata);\n  }\n}\n\nvoid insert_node(struct Node **headNode, int nodeValue, int position) {\n  int i;\n  struct Node *currentNode = (struct Node *)malloc(sizeof(struct Node));\n  struct Node *nodeBeforePosition = *headNode;\n\n  currentNode-\u003edata = nodeValue;\n\n  if(position == 1) {\n    currentNode-\u003enext = *headNode;\n    *headNode = currentNode;\n    return;\n  }\n\n  for (i = 0; i \u003c position - 2; i++) {\n    nodeBeforePosition = nodeBeforePosition-\u003enext;\n  }\n\n  currentNode-\u003enext = nodeBeforePosition-\u003enext;\n  nodeBeforePosition-\u003enext = currentNode;\n}\n\nvoid reverse_list(struct Node **headNode) {\n  struct Node *iterator = *headNode;\n  struct Node *previousNode = NULL;\n  struct Node *nextNode = NULL;\n\n  while (iterator != NULL) {\n    nextNode = iterator-\u003enext;\n    iterator-\u003enext = previousNode;\n    previousNode = iterator;\n    iterator = nextNode;\n  }\n\n  /* Iterator will be NULL by the end, so the last node will be stored in\n  previousNode.  We will set the last node to be the headNode */\n  *headNode = previousNode;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cstdio.h\u003e\n#include \u003cstdlib.h\u003e\n\n#define NUM_ITEMS 10\n\nstruct Node {\n  int data;\n  struct Node *next;\n};\n\nvoid insert_node(struct Node **headNode, int nodeValue, int position);\nvoid print_list(struct Node *headNode);\nvoid reverse_list(struct Node **headNode);\n\n\nint main(void) {\n  int i;\n  struct Node *head = NULL;\n\n  for(i = 1; i \u003c= NUM_ITEMS; i++) {\n    insert_node(\u0026head, i, i);\n  }\n  print_list(head);\n\n  printf(\"I will now reverse the linked list\\n\");\n  reverse_list(\u0026head);\n  print_list(head);\n  return 0;\n}\n\nvoid print_list(struct Node *headNode) {\n  struct Node *iterator;\n\n  for(iterator = headNode; iterator != NULL; iterator = iterator-\u003enext) {\n    printf(\"Value: %d\\n\", iterator-\u003edata);\n  }\n}\n\nvoid insert_node(struct Node **headNode, int nodeValue, int position) {\n  int i;\n  struct Node *currentNode = (struct Node *)malloc(sizeof(struct Node));\n  struct Node *nodeBeforePosition = *headNode;\n\n  currentNode-\u003edata = nodeValue;\n\n  if(position == 1) {\n    currentNode-\u003enext = *headNode;\n    *headNode = currentNode;\n    return;\n  }\n\n  for (i = 0; i \u003c position - 2; i++) {\n    nodeBeforePosition = nodeBeforePosition-\u003enext;\n  }\n\n  currentNode-\u003enext = nodeBeforePosition-\u003enext;\n  nodeBeforePosition-\u003enext = currentNode;\n}\n\nvoid reverse_list(struct Node **headNode) {\n  struct Node *iterator = *headNode;\n  struct Node *previousNode = NULL;\n  struct Node *nextNode = NULL;\n\n  while (iterator != NULL) {\n    nextNode = iterator-\u003enext;\n    iterator-\u003enext = previousNode;\n    previousNode = iterator;\n    iterator = nextNode;\n  }\n\n  /* Iterator will be NULL by the end, so the last node will be stored in\n  previousNode.  We will set the last node to be the headNode */\n  *headNode = previousNode;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935853384,
        "id": "2c6e005e-2a15-4183-aadb-d73978fa9ce4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935853384,
        "parent_id": "e73f2286-3edb-4737-a2c3-b4fd22c6c7f4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Explanation for the Reverse List Method"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Explanation for the Reverse List Method"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935853384,
        "id": "46a1e74e-7bac-46ef-9980-e6651472a79f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935853384,
        "parent_id": "e73f2286-3edb-4737-a2c3-b4fd22c6c7f4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We start the "
            ],
            [
              "previousNode",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " out as "
            ],
            [
              "NULL",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", since we know on the first iteration of the loop, if we are looking for the node before the first head node, it will be "
            ],
            [
              "NULL",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". The first node will become the last node in the list, and the next variable should naturally be "
            ],
            [
              "NULL",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "We start the "
          },
          {
            "Text": "previousNode",
            "AttrFlags": 2
          },
          {
            "Text": " out as "
          },
          {
            "Text": "NULL",
            "AttrFlags": 2
          },
          {
            "Text": ", since we know on the first iteration of the loop, if we are looking for the node before the first head node, it will be "
          },
          {
            "Text": "NULL",
            "AttrFlags": 2
          },
          {
            "Text": ". The first node will become the last node in the list, and the next variable should naturally be "
          },
          {
            "Text": "NULL",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935853384,
        "id": "0c29d707-b3c0-46c7-8713-5e97bd81a9f8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935853384,
        "parent_id": "e73f2286-3edb-4737-a2c3-b4fd22c6c7f4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Basically, the concept of reversing the linked list here is that we actually reverse the links themselves. Each node’s next member will become the node before it, like so:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Basically, the concept of reversing the linked list here is that we actually reverse the links themselves. Each node’s next member will become the node before it, like so:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935853384,
        "id": "26b77a95-ba81-4930-a532-462bf5427016",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935853384,
        "parent_id": "e73f2286-3edb-4737-a2c3-b4fd22c6c7f4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Head -\u003e 1 -\u003e 2 -\u003e 3 -\u003e 4 -\u003e 5"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Head -\u003e 1 -\u003e 2 -\u003e 3 -\u003e 4 -\u003e 5",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935853385,
        "id": "8b537d7a-a3e9-4bb6-b1aa-d1e6f2beb11c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935853385,
        "parent_id": "e73f2286-3edb-4737-a2c3-b4fd22c6c7f4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Where each number represents a node. This list would become:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Where each number represents a node. This list would become:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935853385,
        "id": "6eda683c-d108-4176-8a43-bdcb5b202138",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935853385,
        "parent_id": "e73f2286-3edb-4737-a2c3-b4fd22c6c7f4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "1 \u003c- 2 \u003c- 3 \u003c- 4 \u003c- 5 \u003c- Head"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "1 \u003c- 2 \u003c- 3 \u003c- 4 \u003c- 5 \u003c- Head",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935853385,
        "id": "f010699f-06e9-47ab-aaea-1908dcdef6db",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935853385,
        "parent_id": "e73f2286-3edb-4737-a2c3-b4fd22c6c7f4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Finally, the head should point to the 5th node instead, and each node should point to the node previous of it."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Finally, the head should point to the 5th node instead, and each node should point to the node previous of it."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935853385,
        "id": "64c2f37b-300c-4e4b-b1fd-63b8bc28f9d2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935853385,
        "parent_id": "e73f2286-3edb-4737-a2c3-b4fd22c6c7f4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Node 1 should point to "
            ],
            [
              "NULL",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " since there was nothing before it. Node 2 should point to node 1, node 3 should point to node 2, et cetera."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Node 1 should point to "
          },
          {
            "Text": "NULL",
            "AttrFlags": 2
          },
          {
            "Text": " since there was nothing before it. Node 2 should point to node 1, node 3 should point to node 2, et cetera."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935853385,
        "id": "c5ca9e7c-aa92-489c-9fb1-3a1823f976d6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935853385,
        "parent_id": "e73f2286-3edb-4737-a2c3-b4fd22c6c7f4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "However, there is "
            ],
            [
              "one small problem",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " with this method. If we break the link to the next node and change it to the previous node, we will not be able to traverse to the next node in the list since the link to it is gone."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "However, there is "
          },
          {
            "Text": "one small problem",
            "AttrFlags": 4
          },
          {
            "Text": " with this method. If we break the link to the next node and change it to the previous node, we will not be able to traverse to the next node in the list since the link to it is gone."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935853385,
        "id": "9ee85ab6-4812-4969-89f3-8f9be80f3251",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935853385,
        "parent_id": "e73f2286-3edb-4737-a2c3-b4fd22c6c7f4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The solution to this problem is to simply store the next element in a variable ("
            ],
            [
              "nextNode",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") before changing the link."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The solution to this problem is to simply store the next element in a variable ("
          },
          {
            "Text": "nextNode",
            "AttrFlags": 2
          },
          {
            "Text": ") before changing the link."
          }
        ]
      }
    ],
    "title": "040 Reversing a linked list",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}