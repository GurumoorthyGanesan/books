{
  "ID": "60fcf499-2b48-41df-9bfb-ad432a503d8a",
  "Root": {
    "alive": true,
    "content": [
      "3849e976-c261-4d16-8bcc-efae22b65bef",
      "8875b7ba-99a2-4518-9937-218f7e950bf9",
      "b19f952e-667b-407b-9f33-86e5f6f6e70c",
      "f7b2987e-eebb-47da-b6ba-5b24d84cee22",
      "a93b1fed-2cd6-40a7-ab6e-19cc0142b955",
      "b82b9e6e-d5eb-4023-84ea-bef16c08e400",
      "0073d1ac-7024-4699-912d-005e637f665b",
      "d68fe1df-cfdb-4db0-b415-35443f5d9040",
      "72f1df57-82dd-4ae5-ac9f-6b6bcd536efe",
      "3d94bff9-52e2-46fe-96a0-960ec4780b2d",
      "8a22ace8-b739-402a-8127-6740a0ad257e"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551937201480,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "60fcf499-2b48-41df-9bfb-ad432a503d8a",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551937201480,
    "parent_id": "f0f16c22-34d6-4125-8a87-63fdd135ef20",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Simple Enumeration"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551937201476,
        "id": "3849e976-c261-4d16-8bcc-efae22b65bef",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551937201476,
        "parent_id": "60fcf499-2b48-41df-9bfb-ad432a503d8a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "An enumeration is a user-defined data type consists of integral constants and each integral constant is given a name. Keyword "
            ],
            [
              "enum",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is used to define enumerated data type."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "An enumeration is a user-defined data type consists of integral constants and each integral constant is given a name. Keyword "
          },
          {
            "Text": "enum",
            "AttrFlags": 2
          },
          {
            "Text": " is used to define enumerated data type."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551937201479,
        "id": "8875b7ba-99a2-4518-9937-218f7e950bf9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551937201479,
        "parent_id": "60fcf499-2b48-41df-9bfb-ad432a503d8a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If you use "
            ],
            [
              "enum",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " instead of "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "string/ char*",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", you increase compile-time checking and avoid errors from passing in invalid constants, and you document which values are legal to use."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If you use "
          },
          {
            "Text": "enum",
            "AttrFlags": 2
          },
          {
            "Text": " instead of "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "string/ char*",
            "AttrFlags": 2
          },
          {
            "Text": ", you increase compile-time checking and avoid errors from passing in invalid constants, and you document which values are legal to use."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551937201480,
        "id": "b19f952e-667b-407b-9f33-86e5f6f6e70c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551937201480,
        "parent_id": "60fcf499-2b48-41df-9bfb-ad432a503d8a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Example 1"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Example 1"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551937201480,
        "id": "f7b2987e-eebb-47da-b6ba-5b24d84cee22",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551937201480,
        "parent_id": "60fcf499-2b48-41df-9bfb-ad432a503d8a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "enum color{ RED, GREEN, BLUE };\n\nvoid printColor(enum color chosenColor)\n{\n    const char *color_name = \"Invalid color\";\n    switch (chosenColor)\n    {\n       case RED:\n         color_name = \"RED\";\n         break;\n       \n       case GREEN:\n        color_name = \"GREEN\";\n        break;    \n\n       case BLUE:\n        color_name = \"BLUE\";\n        break;\n    }\n    printf(\"%s\\n\", color_name);\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "enum color{ RED, GREEN, BLUE };\n\nvoid printColor(enum color chosenColor)\n{\n    const char *color_name = \"Invalid color\";\n    switch (chosenColor)\n    {\n       case RED:\n         color_name = \"RED\";\n         break;\n       \n       case GREEN:\n        color_name = \"GREEN\";\n        break;    \n\n       case BLUE:\n        color_name = \"BLUE\";\n        break;\n    }\n    printf(\"%s\\n\", color_name);\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551937201480,
        "id": "a93b1fed-2cd6-40a7-ab6e-19cc0142b955",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551937201480,
        "parent_id": "60fcf499-2b48-41df-9bfb-ad432a503d8a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "With a main function defined as follows (for example):"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "With a main function defined as follows (for example):"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551937201480,
        "id": "b82b9e6e-d5eb-4023-84ea-bef16c08e400",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551937201480,
        "parent_id": "60fcf499-2b48-41df-9bfb-ad432a503d8a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int main(){\n    enum color chosenColor;\n    printf(\"Enter a number between 0 and 2\");\n    scanf(\"%d\", (int*)\u0026chosenColor);\n    printColor(chosenColor);\n    return 0;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int main(){\n    enum color chosenColor;\n    printf(\"Enter a number between 0 and 2\");\n    scanf(\"%d\", (int*)\u0026chosenColor);\n    printColor(chosenColor);\n    return 0;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551937201480,
        "id": "0073d1ac-7024-4699-912d-005e637f665b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551937201480,
        "parent_id": "60fcf499-2b48-41df-9bfb-ad432a503d8a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Example 2"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Example 2"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551937201480,
        "id": "d68fe1df-cfdb-4db0-b415-35443f5d9040",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551937201480,
        "parent_id": "60fcf499-2b48-41df-9bfb-ad432a503d8a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "(This example uses designated initializers which are standardized since C99.)"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "(This example uses designated initializers which are standardized since C99.)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551937201480,
        "id": "72f1df57-82dd-4ae5-ac9f-6b6bcd536efe",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551937201480,
        "parent_id": "60fcf499-2b48-41df-9bfb-ad432a503d8a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "enum week{ MON, TUE, WED, THU, FRI, SAT, SUN };\n     \nstatic const char* const dow[] = { \n  [MON] = \"Mon\", [TUE] = \"Tue\", [WED] = \"Wed\", \n  [THU] = \"Thu\", [FRI] = \"Fri\", [SAT] = \"Sat\", [SUN] = \"Sun\" };\n    \nvoid printDayOfWeek(enum week day) \n{ \n   printf(\"%s\\n\", dow[day]);\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "enum week{ MON, TUE, WED, THU, FRI, SAT, SUN };\n     \nstatic const char* const dow[] = { \n  [MON] = \"Mon\", [TUE] = \"Tue\", [WED] = \"Wed\", \n  [THU] = \"Thu\", [FRI] = \"Fri\", [SAT] = \"Sat\", [SUN] = \"Sun\" };\n    \nvoid printDayOfWeek(enum week day) \n{ \n   printf(\"%s\\n\", dow[day]);\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551937201480,
        "id": "3d94bff9-52e2-46fe-96a0-960ec4780b2d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551937201480,
        "parent_id": "60fcf499-2b48-41df-9bfb-ad432a503d8a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The same example using range checking:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The same example using range checking:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551937201480,
        "id": "8a22ace8-b739-402a-8127-6740a0ad257e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551937201480,
        "parent_id": "60fcf499-2b48-41df-9bfb-ad432a503d8a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "enum week{ DOW_INVALID = -1, \n  MON, TUE, WED, THU, FRI, SAT, SUN, \n  DOW_MAX };\n     \nstatic const char* const dow[] = { \n  [MON] = \"Mon\", [TUE] = \"Tue\", [WED] = \"Wed\", \n  [THU] = \"Thu\", [FRI] = \"Fri\", [SAT] = \"Sat\", [SUN] = \"Sun\" };\n    \nvoid printDayOfWeek(enum week day) \n{ \n   assert(day \u003e DOW_INVALID \u0026\u0026 day \u003c DOW_MAX);\n   printf(\"%s\\n\", dow[day]);\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "enum week{ DOW_INVALID = -1, \n  MON, TUE, WED, THU, FRI, SAT, SUN, \n  DOW_MAX };\n     \nstatic const char* const dow[] = { \n  [MON] = \"Mon\", [TUE] = \"Tue\", [WED] = \"Wed\", \n  [THU] = \"Thu\", [FRI] = \"Fri\", [SAT] = \"Sat\", [SUN] = \"Sun\" };\n    \nvoid printDayOfWeek(enum week day) \n{ \n   assert(day \u003e DOW_INVALID \u0026\u0026 day \u003c DOW_MAX);\n   printf(\"%s\\n\", dow[day]);\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "Simple Enumeration",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}