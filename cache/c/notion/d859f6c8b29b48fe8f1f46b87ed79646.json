{
  "ID": "d859f6c8-b29b-48fe-8f1f-46b87ed79646",
  "Root": {
    "alive": true,
    "content": [
      "d97bfe89-3fd5-43e1-868d-4e7fb0a0e953",
      "e8efe7f8-653b-4fd8-9e70-fa6bf3c0ee48",
      "1b56f251-0e14-4b57-ab32-72ae421a0bf6",
      "ceb7a34c-59f4-4b52-8659-de467282bb0a",
      "2ef5ebc1-55ae-43d5-aa6c-55fed3c69828",
      "5261ef89-313c-4a07-b956-fccf8836f546",
      "252c2800-0cd5-4bfd-a470-f120876fa4bd",
      "79918186-1aaa-40f7-8552-137d5ba5be2e",
      "acbf3746-e489-4354-9dc2-9e50f5faf88e",
      "de6abb5a-d047-45c6-b22d-a73d863e0fa1",
      "d9c0058e-01c6-44fb-aa33-ad17e79ad277",
      "7584d55a-5056-4b97-a17f-68ea57ac2a6b",
      "d1dfbbfb-8b28-45a3-8a62-649ab6ef36a3",
      "ea6afed4-48d8-4b55-a84d-917a48797c4a",
      "a1ea448c-bc85-43e3-98e8-61ea9b970e86",
      "59c2d0fb-d07d-4066-82f0-044715dd1e14"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551936336233,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "d859f6c8-b29b-48fe-8f1f-46b87ed79646",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551936336233,
    "parent_id": "f3ac34eb-110d-486b-9e30-6bd30082bba0",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Safely convert Strings to Number strtoX functions"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936336229,
        "id": "d97bfe89-3fd5-43e1-868d-4e7fb0a0e953",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936336229,
        "parent_id": "d859f6c8-b29b-48fe-8f1f-46b87ed79646",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Since C99 the C library has a set of safe conversion functions that interpret a string as a number. Their names are of the form "
            ],
            [
              "strtoX",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", where "
            ],
            [
              "X",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is one of "
            ],
            [
              "l",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "ul",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "d",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", etc to determine the target type of the conversion"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Since C99 the C library has a set of safe conversion functions that interpret a string as a number. Their names are of the form "
          },
          {
            "Text": "strtoX",
            "AttrFlags": 2
          },
          {
            "Text": ", where "
          },
          {
            "Text": "X",
            "AttrFlags": 2
          },
          {
            "Text": " is one of "
          },
          {
            "Text": "l",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "ul",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "d",
            "AttrFlags": 2
          },
          {
            "Text": ", etc to determine the target type of the conversion"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936336231,
        "id": "e8efe7f8-653b-4fd8-9e70-fa6bf3c0ee48",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936336231,
        "parent_id": "d859f6c8-b29b-48fe-8f1f-46b87ed79646",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "double strtod(char const* p, char** endptr);\nlong double strtold(char const* p, char** endptr);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "double strtod(char const* p, char** endptr);\nlong double strtold(char const* p, char** endptr);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936336231,
        "id": "1b56f251-0e14-4b57-ab32-72ae421a0bf6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936336231,
        "parent_id": "d859f6c8-b29b-48fe-8f1f-46b87ed79646",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "They provide checking that a conversion had an over- or underflow:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "They provide checking that a conversion had an over- or underflow:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936336231,
        "id": "ceb7a34c-59f4-4b52-8659-de467282bb0a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936336231,
        "parent_id": "d859f6c8-b29b-48fe-8f1f-46b87ed79646",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "double ret = strtod(argv[1], 0); /* attempt conversion */\n\n/* check the conversion result. */\nif ((ret == HUGE_VAL || ret == -HUGE_VAL) \u0026\u0026 errno == ERANGE) \n    return;  /* numeric overflow in in string */\nelse if (ret == HUGE_VAL \u0026\u0026 errno == ERANGE) \n    return; /* numeric underflow in in string */\n\n/* At this point we know that everything went fine so ret may be used */"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "double ret = strtod(argv[1], 0); /* attempt conversion */\n\n/* check the conversion result. */\nif ((ret == HUGE_VAL || ret == -HUGE_VAL) \u0026\u0026 errno == ERANGE) \n    return;  /* numeric overflow in in string */\nelse if (ret == HUGE_VAL \u0026\u0026 errno == ERANGE) \n    return; /* numeric underflow in in string */\n\n/* At this point we know that everything went fine so ret may be used */",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936336232,
        "id": "2ef5ebc1-55ae-43d5-aa6c-55fed3c69828",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936336232,
        "parent_id": "d859f6c8-b29b-48fe-8f1f-46b87ed79646",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If the string in fact contains no number at all, this usage of "
            ],
            [
              "strtod",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " returns "
            ],
            [
              "0.0",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If the string in fact contains no number at all, this usage of "
          },
          {
            "Text": "strtod",
            "AttrFlags": 2
          },
          {
            "Text": " returns "
          },
          {
            "Text": "0.0",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936336232,
        "id": "5261ef89-313c-4a07-b956-fccf8836f546",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936336232,
        "parent_id": "d859f6c8-b29b-48fe-8f1f-46b87ed79646",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If this is not satisfactory, the additional parameter "
            ],
            [
              "endptr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can be used. It is a pointer to pointer that will be pointed to the end of the detected number in the string. If it is set to "
            ],
            [
              "0",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", as above, or "
            ],
            [
              "NULL",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", it is simply ignored."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If this is not satisfactory, the additional parameter "
          },
          {
            "Text": "endptr",
            "AttrFlags": 2
          },
          {
            "Text": " can be used. It is a pointer to pointer that will be pointed to the end of the detected number in the string. If it is set to "
          },
          {
            "Text": "0",
            "AttrFlags": 2
          },
          {
            "Text": ", as above, or "
          },
          {
            "Text": "NULL",
            "AttrFlags": 2
          },
          {
            "Text": ", it is simply ignored."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936336232,
        "id": "252c2800-0cd5-4bfd-a470-f120876fa4bd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936336232,
        "parent_id": "d859f6c8-b29b-48fe-8f1f-46b87ed79646",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This "
            ],
            [
              "endptr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " parameter provides indicates if there has been a successful conversion and if so, where the number ended:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This "
          },
          {
            "Text": "endptr",
            "AttrFlags": 2
          },
          {
            "Text": " parameter provides indicates if there has been a successful conversion and if so, where the number ended:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936336232,
        "id": "79918186-1aaa-40f7-8552-137d5ba5be2e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936336232,
        "parent_id": "d859f6c8-b29b-48fe-8f1f-46b87ed79646",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "char *check = 0;\ndouble ret = strtod(argv[1], \u0026check); /* attempt conversion */\n\n/* check the conversion result. */\nif (argv[1] == check) \n    return; /* No number was detected in string */\nelse if ((ret == HUGE_VAL || ret == -HUGE_VAL) \u0026\u0026 errno == ERANGE) \n    return; /* numeric overflow in in string */\nelse if (ret == HUGE_VAL \u0026\u0026 errno == ERANGE) \n    return; /* numeric underflow in in string */\n\n/* At this point we know that everything went fine so ret may be used */"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "char *check = 0;\ndouble ret = strtod(argv[1], \u0026check); /* attempt conversion */\n\n/* check the conversion result. */\nif (argv[1] == check) \n    return; /* No number was detected in string */\nelse if ((ret == HUGE_VAL || ret == -HUGE_VAL) \u0026\u0026 errno == ERANGE) \n    return; /* numeric overflow in in string */\nelse if (ret == HUGE_VAL \u0026\u0026 errno == ERANGE) \n    return; /* numeric underflow in in string */\n\n/* At this point we know that everything went fine so ret may be used */",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936336232,
        "id": "acbf3746-e489-4354-9dc2-9e50f5faf88e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936336232,
        "parent_id": "d859f6c8-b29b-48fe-8f1f-46b87ed79646",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "There are analogous functions to convert to the wider integer types:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "There are analogous functions to convert to the wider integer types:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936336232,
        "id": "de6abb5a-d047-45c6-b22d-a73d863e0fa1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936336232,
        "parent_id": "d859f6c8-b29b-48fe-8f1f-46b87ed79646",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "long strtol(char const* p, char** endptr, int nbase);\nlong long strtoll(char const* p, char** endptr, int nbase);\nunsigned long strtoul(char const* p, char** endptr, int nbase);\nunsigned long long strtoull(char const* p, char** endptr, int nbase);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "long strtol(char const* p, char** endptr, int nbase);\nlong long strtoll(char const* p, char** endptr, int nbase);\nunsigned long strtoul(char const* p, char** endptr, int nbase);\nunsigned long long strtoull(char const* p, char** endptr, int nbase);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936336233,
        "id": "d9c0058e-01c6-44fb-aa33-ad17e79ad277",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936336233,
        "parent_id": "d859f6c8-b29b-48fe-8f1f-46b87ed79646",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "These functions have a third parameter "
            ],
            [
              "nbase",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " that holds the number base in which the number is written."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "These functions have a third parameter "
          },
          {
            "Text": "nbase",
            "AttrFlags": 2
          },
          {
            "Text": " that holds the number base in which the number is written."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936336233,
        "id": "7584d55a-5056-4b97-a17f-68ea57ac2a6b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936336233,
        "parent_id": "d859f6c8-b29b-48fe-8f1f-46b87ed79646",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "long a = strtol(\"101\",   0, 2 ); /* a = 5L */\nlong b = strtol(\"101\",   0, 8 ); /* b = 65L */\nlong c = strtol(\"101\",   0, 10); /* c = 101L */\nlong d = strtol(\"101\",   0, 16); /* d = 257L */\nlong e = strtol(\"101\",   0, 0 ); /* e = 101L */\nlong f = strtol(\"0101\",  0, 0 ); /* f = 65L */\nlong g = strtol(\"0x101\", 0, 0 ); /* g = 257L */"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "long a = strtol(\"101\",   0, 2 ); /* a = 5L */\nlong b = strtol(\"101\",   0, 8 ); /* b = 65L */\nlong c = strtol(\"101\",   0, 10); /* c = 101L */\nlong d = strtol(\"101\",   0, 16); /* d = 257L */\nlong e = strtol(\"101\",   0, 0 ); /* e = 101L */\nlong f = strtol(\"0101\",  0, 0 ); /* f = 65L */\nlong g = strtol(\"0x101\", 0, 0 ); /* g = 257L */",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936336233,
        "id": "d1dfbbfb-8b28-45a3-8a62-649ab6ef36a3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936336233,
        "parent_id": "d859f6c8-b29b-48fe-8f1f-46b87ed79646",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The special value "
            ],
            [
              "0",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " for "
            ],
            [
              "nbase",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " means the string is interpreted in the same way as number literals are interpreted in a C program: a prefix of "
            ],
            [
              "0x",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " corresponds to a hexadecimal representation, otherwise a leading "
            ],
            [
              "0",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is octal and all other numbers are seen as decimal."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The special value "
          },
          {
            "Text": "0",
            "AttrFlags": 2
          },
          {
            "Text": " for "
          },
          {
            "Text": "nbase",
            "AttrFlags": 2
          },
          {
            "Text": " means the string is interpreted in the same way as number literals are interpreted in a C program: a prefix of "
          },
          {
            "Text": "0x",
            "AttrFlags": 2
          },
          {
            "Text": " corresponds to a hexadecimal representation, otherwise a leading "
          },
          {
            "Text": "0",
            "AttrFlags": 2
          },
          {
            "Text": " is octal and all other numbers are seen as decimal."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936336233,
        "id": "ea6afed4-48d8-4b55-a84d-917a48797c4a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936336233,
        "parent_id": "d859f6c8-b29b-48fe-8f1f-46b87ed79646",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Thus the most practical way to interpret a command-line argument as a number would be"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Thus the most practical way to interpret a command-line argument as a number would be"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936336233,
        "id": "a1ea448c-bc85-43e3-98e8-61ea9b970e86",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936336233,
        "parent_id": "d859f6c8-b29b-48fe-8f1f-46b87ed79646",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int main(int argc, char* argv[] {\n    if (argc \u003c 1)\n        return EXIT_FAILURE; /* No number given. */\n\n    /* use strtoull because size_t may be wide */\n    size_t mySize = strtoull(argv[1], 0, 0);\n\n    /* then check conversion results. */\n\n     ...\n\n    return EXIT_SUCCESS;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int main(int argc, char* argv[] {\n    if (argc \u003c 1)\n        return EXIT_FAILURE; /* No number given. */\n\n    /* use strtoull because size_t may be wide */\n    size_t mySize = strtoull(argv[1], 0, 0);\n\n    /* then check conversion results. */\n\n     ...\n\n    return EXIT_SUCCESS;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936336233,
        "id": "59c2d0fb-d07d-4066-82f0-044715dd1e14",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936336233,
        "parent_id": "d859f6c8-b29b-48fe-8f1f-46b87ed79646",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This means that the program can be called with a parameter in octal, decimal or hexadecimal."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This means that the program can be called with a parameter in octal, decimal or hexadecimal."
          }
        ]
      }
    ],
    "title": "Safely convert Strings to Number strtoX functions",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}