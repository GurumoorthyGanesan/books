{
  "ID": "5e0d9882-9973-4488-b52d-3b687c17d31f",
  "Root": {
    "alive": true,
    "content": [
      "af51d534-5633-41f7-a408-756800383073",
      "1eb17b8b-a82e-4a8e-b7e2-f7f5674d6c3f",
      "a972d271-7e01-40a9-bcda-5fafd1a25355",
      "46da769c-6d32-4b93-9066-13e4aae7b07d",
      "e5d0c15f-0cbe-4a88-a6b1-9a1503971e77",
      "2790e68f-0407-430f-a004-4a92026c868f"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551936357642,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "5e0d9882-9973-4488-b52d-3b687c17d31f",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551936357642,
    "parent_id": "ce0d7992-bb1e-4e62-ab26-2f99a9a2f78d",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Ignoring return values of library functions"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936357641,
        "id": "af51d534-5633-41f7-a408-756800383073",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936357641,
        "parent_id": "5e0d9882-9973-4488-b52d-3b687c17d31f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Almost every function in C standard library returns something on success, and something else on error. For example, "
            ],
            [
              "malloc",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will return a pointer to the memory block allocated by the function on success, and, if the function failed to allocate the requested block of memory, a null pointer. So you should always check the return value for easier debugging."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Almost every function in C standard library returns something on success, and something else on error. For example, "
          },
          {
            "Text": "malloc",
            "AttrFlags": 2
          },
          {
            "Text": " will return a pointer to the memory block allocated by the function on success, and, if the function failed to allocate the requested block of memory, a null pointer. So you should always check the return value for easier debugging."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936357641,
        "id": "1eb17b8b-a82e-4a8e-b7e2-f7f5674d6c3f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936357641,
        "parent_id": "5e0d9882-9973-4488-b52d-3b687c17d31f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This is bad:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This is bad:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936357641,
        "id": "a972d271-7e01-40a9-bcda-5fafd1a25355",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936357641,
        "parent_id": "5e0d9882-9973-4488-b52d-3b687c17d31f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "char* x = malloc(100000000000UL * sizeof *x);\n/* more code */\nscanf(\"%s\", x); /* This might invoke undefined behaviour and if lucky causes a segmentation violation, unless your system has a lot of memory */"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "char* x = malloc(100000000000UL * sizeof *x);\n/* more code */\nscanf(\"%s\", x); /* This might invoke undefined behaviour and if lucky causes a segmentation violation, unless your system has a lot of memory */",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936357641,
        "id": "46da769c-6d32-4b93-9066-13e4aae7b07d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936357641,
        "parent_id": "5e0d9882-9973-4488-b52d-3b687c17d31f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This is good:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This is good:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936357641,
        "id": "e5d0c15f-0cbe-4a88-a6b1-9a1503971e77",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936357641,
        "parent_id": "5e0d9882-9973-4488-b52d-3b687c17d31f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cstdlib.h\u003e\n#include \u003cstdio.h\u003e\n\nint main(void)\n{\n    char* x = malloc(100000000000UL * sizeof *x);\n    if (x == NULL) {\n        perror(\"malloc() failed\");\n        exit(EXIT_FAILURE);\n    }\n\n    if (scanf(\"%s\", x) != 1) {\n        fprintf(stderr, \"could not read string\\n\");\n        free(x);\n        exit(EXIT_FAILURE);\n    }\n\n    /* Do stuff with x. */\n\n    /* Clean up. */\n    free(x);\n\n    return EXIT_SUCCESS;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cstdlib.h\u003e\n#include \u003cstdio.h\u003e\n\nint main(void)\n{\n    char* x = malloc(100000000000UL * sizeof *x);\n    if (x == NULL) {\n        perror(\"malloc() failed\");\n        exit(EXIT_FAILURE);\n    }\n\n    if (scanf(\"%s\", x) != 1) {\n        fprintf(stderr, \"could not read string\\n\");\n        free(x);\n        exit(EXIT_FAILURE);\n    }\n\n    /* Do stuff with x. */\n\n    /* Clean up. */\n    free(x);\n\n    return EXIT_SUCCESS;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936357641,
        "id": "2790e68f-0407-430f-a004-4a92026c868f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936357641,
        "parent_id": "5e0d9882-9973-4488-b52d-3b687c17d31f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This way you know right away the cause of error, otherwise you might spend hours looking for a bug in a completely wrong place."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This way you know right away the cause of error, otherwise you might spend hours looking for a bug in a completely wrong place."
          }
        ]
      }
    ],
    "title": "Ignoring return values of library functions",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}