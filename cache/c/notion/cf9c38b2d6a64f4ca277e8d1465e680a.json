{
  "ID": "cf9c38b2-d6a6-4f4c-a277-e8d1465e680a",
  "Root": {
    "alive": true,
    "content": [
      "0dd251cb-5387-4b2c-b476-971fb81012d4",
      "02fa570d-8076-4189-b2a2-dd3c4d21bfa6",
      "c0761e4a-c543-4461-aef5-0459145feec2",
      "07d5f05c-9004-43a2-870c-c021487d0f81",
      "040b4ca8-1e02-4feb-9f23-21b534aa7133",
      "c91a75ba-94e5-4b4d-ad4c-66e55ddef6f8",
      "23b5e476-3b86-4223-abd4-33d2e7356768",
      "bce21502-75ae-4c4e-9fe9-bae20afa5826",
      "5fa14a1d-719b-41a8-9979-7c8a6a3752bf",
      "d02b4620-f6e4-49ae-b28e-6d16ba1e66d3"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551935787430,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "cf9c38b2-d6a6-4f4c-a277-e8d1465e680a",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551935787430,
    "parent_id": "6ae1f6f3-0a87-4bec-b9ca-2ef03a059422",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Signal Handling with signal"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935787427,
        "id": "0dd251cb-5387-4b2c-b476-971fb81012d4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935787427,
        "parent_id": "cf9c38b2-d6a6-4f4c-a277-e8d1465e680a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Signal numbers",
              [
                [
                  "a",
                  "https://en.wikipedia.org/wiki/C_signal_handling#Standard_signals"
                ]
              ]
            ],
            [
              " can be synchronous (like "
            ],
            [
              "SIGSEGV",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " – segmentation fault) when they are triggered by a malfunctioning of the program itself or asynchronous (like "
            ],
            [
              "SIGINT",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " - interactive attention) when they are initiated from outside the program, e.g by a keypress as "
            ],
            [
              "Cntrl-C",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Signal numbers",
            "Link": "https://en.wikipedia.org/wiki/C_signal_handling#Standard_signals"
          },
          {
            "Text": " can be synchronous (like "
          },
          {
            "Text": "SIGSEGV",
            "AttrFlags": 2
          },
          {
            "Text": " – segmentation fault) when they are triggered by a malfunctioning of the program itself or asynchronous (like "
          },
          {
            "Text": "SIGINT",
            "AttrFlags": 2
          },
          {
            "Text": " - interactive attention) when they are initiated from outside the program, e.g by a keypress as "
          },
          {
            "Text": "Cntrl-C",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935787428,
        "id": "02fa570d-8076-4189-b2a2-dd3c4d21bfa6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935787428,
        "parent_id": "cf9c38b2-d6a6-4f4c-a277-e8d1465e680a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "signal()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " function is part of the ISO C standard and can be used to assign a function to handle a specific signal"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "signal()",
            "AttrFlags": 2
          },
          {
            "Text": " function is part of the ISO C standard and can be used to assign a function to handle a specific signal"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935787428,
        "id": "c0761e4a-c543-4461-aef5-0459145feec2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935787428,
        "parent_id": "cf9c38b2-d6a6-4f4c-a277-e8d1465e680a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cstdio.h\u003e  /* printf() */\n#include \u003cstdlib.h\u003e /* abort()  */\n#include \u003csignal.h\u003e /* signal() */\n\nvoid handler_nonportable(int sig)\n{\n    /* undefined behavior, maybe fine on specific platform */\n    printf(\"Catched: %d\\n\", sig);\n    \n    /* abort is safe to call */\n    abort();\n}\n\nsig_atomic_t volatile finished = 0;\n\nvoid handler(int sig)\n{\n    switch (sig) {\n    /* hardware interrupts should not return */\n    case SIGSEGV:\n    case SIGFPE:\n    case SIGILL:"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cstdio.h\u003e  /* printf() */\n#include \u003cstdlib.h\u003e /* abort()  */\n#include \u003csignal.h\u003e /* signal() */\n\nvoid handler_nonportable(int sig)\n{\n    /* undefined behavior, maybe fine on specific platform */\n    printf(\"Catched: %d\\n\", sig);\n    \n    /* abort is safe to call */\n    abort();\n}\n\nsig_atomic_t volatile finished = 0;\n\nvoid handler(int sig)\n{\n    switch (sig) {\n    /* hardware interrupts should not return */\n    case SIGSEGV:\n    case SIGFPE:\n    case SIGILL:",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935787428,
        "id": "07d5f05c-9004-43a2-870c-c021487d0f81",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935787428,
        "parent_id": "cf9c38b2-d6a6-4f4c-a277-e8d1465e680a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "/* quick_exit is safe to call */\nquick_exit(EXIT_FAILURE);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "/* quick_exit is safe to call */\nquick_exit(EXIT_FAILURE);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935787428,
        "id": "040b4ca8-1e02-4feb-9f23-21b534aa7133",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935787428,
        "parent_id": "cf9c38b2-d6a6-4f4c-a277-e8d1465e680a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "/* use _Exit in pre-C11 */\n_Exit(EXIT_FAILURE);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "/* use _Exit in pre-C11 */\n_Exit(EXIT_FAILURE);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935787428,
        "id": "c91a75ba-94e5-4b4d-ad4c-66e55ddef6f8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935787428,
        "parent_id": "cf9c38b2-d6a6-4f4c-a277-e8d1465e680a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "default:\n   /* Reset the signal to the default handler, \n      so we will not be called again if things go\n      wrong on return. */\n  signal(sig, SIG_DFL);\n  /* let everybody know that we are finished */\n  finished = sig;\n  return;\n}\n}\n\nint main(void)\n{\n\n/* Catch the SIGSEGV signal, raised on segmentation faults (i.e NULL ptr access */\nif (signal(SIGSEGV, \u0026handler) == SIG_ERR) {\n    perror(\"could not establish handler for SIGSEGV\");\n    return EXIT_FAILURE;\n}\n\n/* Catch the SIGTERM signal, termination request */\nif (signal(SIGTERM, \u0026handler) == SIG_ERR) {\n    perror(\"could not establish handler for SIGTERM\");\n    return EXIT_FAILURE;\n}\n\n/* Ignore the SIGINT signal, by setting the handler to `SIG_IGN`. */\nsignal(SIGINT, SIG_IGN);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "default:\n   /* Reset the signal to the default handler, \n      so we will not be called again if things go\n      wrong on return. */\n  signal(sig, SIG_DFL);\n  /* let everybody know that we are finished */\n  finished = sig;\n  return;\n}\n}\n\nint main(void)\n{\n\n/* Catch the SIGSEGV signal, raised on segmentation faults (i.e NULL ptr access */\nif (signal(SIGSEGV, \u0026handler) == SIG_ERR) {\n    perror(\"could not establish handler for SIGSEGV\");\n    return EXIT_FAILURE;\n}\n\n/* Catch the SIGTERM signal, termination request */\nif (signal(SIGTERM, \u0026handler) == SIG_ERR) {\n    perror(\"could not establish handler for SIGTERM\");\n    return EXIT_FAILURE;\n}\n\n/* Ignore the SIGINT signal, by setting the handler to `SIG_IGN`. */\nsignal(SIGINT, SIG_IGN);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935787428,
        "id": "23b5e476-3b86-4223-abd4-33d2e7356768",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935787428,
        "parent_id": "cf9c38b2-d6a6-4f4c-a277-e8d1465e680a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "/* Do something that takes some time here, and leaves\n   the time to terminate the program from the keyboard. */\n\n/* Then: */\n\nif (finished) {\n   fprintf(stderr, \"we have been terminated by signal %d\\n\", (int)finished);\n    return EXIT_FAILURE;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "/* Do something that takes some time here, and leaves\n   the time to terminate the program from the keyboard. */\n\n/* Then: */\n\nif (finished) {\n   fprintf(stderr, \"we have been terminated by signal %d\\n\", (int)finished);\n    return EXIT_FAILURE;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935787429,
        "id": "bce21502-75ae-4c4e-9fe9-bae20afa5826",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935787429,
        "parent_id": "cf9c38b2-d6a6-4f4c-a277-e8d1465e680a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "/* Try to force a segmentation fault, and raise a SIGSEGV */\n{\n  char* ptr = 0;\n  *ptr = 0;\n}\n\n/* This should never be executed */\nreturn EXIT_SUCCESS;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "/* Try to force a segmentation fault, and raise a SIGSEGV */\n{\n  char* ptr = 0;\n  *ptr = 0;\n}\n\n/* This should never be executed */\nreturn EXIT_SUCCESS;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935787429,
        "id": "5fa14a1d-719b-41a8-9979-7c8a6a3752bf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935787429,
        "parent_id": "cf9c38b2-d6a6-4f4c-a277-e8d1465e680a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Using "
            ],
            [
              "signal()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " imposes important limitations what you are allowed to do inside the signal handlers, see the remarks for further information."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Using "
          },
          {
            "Text": "signal()",
            "AttrFlags": 2
          },
          {
            "Text": " imposes important limitations what you are allowed to do inside the signal handlers, see the remarks for further information."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935787430,
        "id": "d02b4620-f6e4-49ae-b28e-6d16ba1e66d3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935787430,
        "parent_id": "cf9c38b2-d6a6-4f4c-a277-e8d1465e680a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "POSIX",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/posix/4532/signals#t=201608081940432865722"
                ]
              ]
            ],
            [
              " recommends the usage of "
            ],
            [
              "sigaction()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " instead of "
            ],
            [
              "signal()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", due to its underspecified behavior and significant implementation variations. POSIX also defines "
            ],
            [
              "many more signals",
              [
                [
                  "a",
                  "https://en.wikipedia.org/wiki/Unix_signal#POSIX_signals"
                ]
              ]
            ],
            [
              " than ISO C standard, including "
            ],
            [
              "SIGUSR1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "SIGUSR2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", which can be used freely by the programmer for any purpose."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "POSIX",
            "Link": "http://stackoverflow.com/documentation/posix/4532/signals#t=201608081940432865722"
          },
          {
            "Text": " recommends the usage of "
          },
          {
            "Text": "sigaction()",
            "AttrFlags": 2
          },
          {
            "Text": " instead of "
          },
          {
            "Text": "signal()",
            "AttrFlags": 2
          },
          {
            "Text": ", due to its underspecified behavior and significant implementation variations. POSIX also defines "
          },
          {
            "Text": "many more signals",
            "Link": "https://en.wikipedia.org/wiki/Unix_signal#POSIX_signals"
          },
          {
            "Text": " than ISO C standard, including "
          },
          {
            "Text": "SIGUSR1",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "SIGUSR2",
            "AttrFlags": 2
          },
          {
            "Text": ", which can be used freely by the programmer for any purpose."
          }
        ]
      }
    ],
    "title": "Signal Handling with signal",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}