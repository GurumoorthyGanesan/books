{
  "ID": "f9755005-1b52-4ec4-be1d-b25929b95779",
  "Root": {
    "alive": true,
    "content": [
      "27e75239-8796-4e60-8146-db694a88d24a"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551936305361,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "f9755005-1b52-4ec4-be1d-b25929b95779",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551936305361,
    "parent_id": "9104b65f-88ef-4b77-89d3-248fa4934ff0",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Using bit-fields as small integers"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936305359,
        "id": "27e75239-8796-4e60-8146-db694a88d24a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936305359,
        "parent_id": "f9755005-1b52-4ec4-be1d-b25929b95779",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cstdio.h\u003e\n\nint main(void)\n{\n    /* define a small bit-field that can hold values from 0 .. 7 */\n    struct\n    {\n        unsigned int uint3: 3;\n    } small;\n\n    /* extract the right 3 bits from a value */\n    unsigned int value = 255 - 2; /* Binary 11111101 */\n    small.uint3 = value;          /* Binary      101 */\n    printf(\"%d\", small.uint3);\n\n    /* This is in effect an infinite loop */\n    for (small.uint3 = 0; small.uint3 \u003c 8; small.uint3++)\n    {\n        printf(\"%d\\n\", small.uint3);\n    }\n\n    return 0;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cstdio.h\u003e\n\nint main(void)\n{\n    /* define a small bit-field that can hold values from 0 .. 7 */\n    struct\n    {\n        unsigned int uint3: 3;\n    } small;\n\n    /* extract the right 3 bits from a value */\n    unsigned int value = 255 - 2; /* Binary 11111101 */\n    small.uint3 = value;          /* Binary      101 */\n    printf(\"%d\", small.uint3);\n\n    /* This is in effect an infinite loop */\n    for (small.uint3 = 0; small.uint3 \u003c 8; small.uint3++)\n    {\n        printf(\"%d\\n\", small.uint3);\n    }\n\n    return 0;\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "Using bit-fields as small integers",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}