{
  "ID": "19cadc51-e108-4a1a-b9f2-cbc9625e9388",
  "Root": {
    "alive": true,
    "content": [
      "66f95e6b-7c1b-4321-aeb3-916c5c7ddd9e",
      "32b2686f-88b0-4ab9-8e04-dada255738f4",
      "4f6b598b-df99-4bbd-91af-827e8d8f3b43",
      "c3309584-3de9-4083-87f4-13a65bb3e476",
      "5464acee-3099-48e4-b345-c843911b488d",
      "98319ee4-61ce-4fca-90cf-daa2f66a69ac",
      "d29aafab-60f2-41fd-8366-52196e43caaa",
      "5da7c148-25ec-4a6c-9f63-b55bfeb8f88a",
      "0a699e10-075a-4439-83ca-a5707b671264",
      "a282cd53-489d-4dec-9c53-32b28d3f8056",
      "0fd7fd85-10b6-48a9-bbf0-f819508831a7",
      "547aeb02-e892-47f3-a354-6251821890ef",
      "ed6a9c3d-649e-497f-a6ba-58ae8319eb89",
      "8355b7c1-414c-46bb-af26-f9a6029c82c7",
      "030238e4-060c-4ac9-adf8-155a4e4122ee",
      "73f54e69-3fde-401f-bb9c-44eefa91c3ed"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551935664263,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "19cadc51-e108-4a1a-b9f2-cbc9625e9388",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551935664263,
    "parent_id": "af9762cd-d032-4a74-a2b8-b8413c2edefb",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Integer types and constants"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935664256,
        "id": "66f95e6b-7c1b-4321-aeb3-916c5c7ddd9e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935664256,
        "parent_id": "19cadc51-e108-4a1a-b9f2-cbc9625e9388",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Signed integers can be of these types (the "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " after "
            ],
            [
              "short",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", or "
            ],
            [
              "long",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is optional):"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Signed integers can be of these types (the "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": " after "
          },
          {
            "Text": "short",
            "AttrFlags": 2
          },
          {
            "Text": ", or "
          },
          {
            "Text": "long",
            "AttrFlags": 2
          },
          {
            "Text": " is optional):"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935664258,
        "id": "32b2686f-88b0-4ab9-8e04-dada255738f4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935664258,
        "parent_id": "19cadc51-e108-4a1a-b9f2-cbc9625e9388",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "signed char c = 127; /* required to be 1 byte, see remarks for further information. */\nsigned short int si = 32767; /* required to be at least 16 bits. */\nsigned int i = 32767; /* required to be at least 16 bits */\nsigned long int li = 2147483647; /* required to be at least 32 bits. */"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "signed char c = 127; /* required to be 1 byte, see remarks for further information. */\nsigned short int si = 32767; /* required to be at least 16 bits. */\nsigned int i = 32767; /* required to be at least 16 bits */\nsigned long int li = 2147483647; /* required to be at least 32 bits. */",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935664259,
        "id": "4f6b598b-df99-4bbd-91af-827e8d8f3b43",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935664259,
        "parent_id": "19cadc51-e108-4a1a-b9f2-cbc9625e9388",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "signed long long int li = 2147483647; /* required to be at least 64 bits */"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "signed long long int li = 2147483647; /* required to be at least 64 bits */",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935664259,
        "id": "c3309584-3de9-4083-87f4-13a65bb3e476",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935664259,
        "parent_id": "19cadc51-e108-4a1a-b9f2-cbc9625e9388",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Each of these signed integer types has an unsigned version."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Each of these signed integer types has an unsigned version."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935664259,
        "id": "5464acee-3099-48e4-b345-c843911b488d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935664259,
        "parent_id": "19cadc51-e108-4a1a-b9f2-cbc9625e9388",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "unsigned int i = 65535;\nunsigned short = 2767;\nunsigned char = 255;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "unsigned int i = 65535;\nunsigned short = 2767;\nunsigned char = 255;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935664259,
        "id": "98319ee4-61ce-4fca-90cf-daa2f66a69ac",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935664259,
        "parent_id": "19cadc51-e108-4a1a-b9f2-cbc9625e9388",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For all types but "
            ],
            [
              "char",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " the "
            ],
            [
              "signed",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " version is assumed if the "
            ],
            [
              "signed",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "unsigned",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " part is omitted. The type "
            ],
            [
              "char",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " constitutes a third character type, different from "
            ],
            [
              "signed char",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "unsigned char",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and the signedness (or not) depends on the platform."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For all types but "
          },
          {
            "Text": "char",
            "AttrFlags": 2
          },
          {
            "Text": " the "
          },
          {
            "Text": "signed",
            "AttrFlags": 2
          },
          {
            "Text": " version is assumed if the "
          },
          {
            "Text": "signed",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "unsigned",
            "AttrFlags": 2
          },
          {
            "Text": " part is omitted. The type "
          },
          {
            "Text": "char",
            "AttrFlags": 2
          },
          {
            "Text": " constitutes a third character type, different from "
          },
          {
            "Text": "signed char",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "unsigned char",
            "AttrFlags": 2
          },
          {
            "Text": " and the signedness (or not) depends on the platform."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935664260,
        "id": "d29aafab-60f2-41fd-8366-52196e43caaa",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935664260,
        "parent_id": "19cadc51-e108-4a1a-b9f2-cbc9625e9388",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Different types of integer constants (called "
            ],
            [
              "literals",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " in C jargon) can be written in different bases, and different width, based on their prefix or suffix."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Different types of integer constants (called "
          },
          {
            "Text": "literals",
            "AttrFlags": 4
          },
          {
            "Text": " in C jargon) can be written in different bases, and different width, based on their prefix or suffix."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935664260,
        "id": "5da7c148-25ec-4a6c-9f63-b55bfeb8f88a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935664260,
        "parent_id": "19cadc51-e108-4a1a-b9f2-cbc9625e9388",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "/* the following variables are initialized to the same value: */\nint d = 42;   /* decimal constant (base10) */\nint o = 052;  /* octal constant (base8) */\nint x = 0xaf; /* hexadecimal constants (base16) */\nint X = 0XAf; /* (letters 'a' through 'f' (case insensitive) represent 10 through 15) */"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "/* the following variables are initialized to the same value: */\nint d = 42;   /* decimal constant (base10) */\nint o = 052;  /* octal constant (base8) */\nint x = 0xaf; /* hexadecimal constants (base16) */\nint X = 0XAf; /* (letters 'a' through 'f' (case insensitive) represent 10 through 15) */",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935664260,
        "id": "0a699e10-075a-4439-83ca-a5707b671264",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935664260,
        "parent_id": "19cadc51-e108-4a1a-b9f2-cbc9625e9388",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Decimal constants are always "
            ],
            [
              "signed",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Hexadecimal constants start with "
            ],
            [
              "0x",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "0X",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and octal constants start just with a "
            ],
            [
              "0",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". The latter two are "
            ],
            [
              "signed",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "unsigned",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " depending on whether the value fits into the signed type or not."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Decimal constants are always "
          },
          {
            "Text": "signed",
            "AttrFlags": 2
          },
          {
            "Text": ". Hexadecimal constants start with "
          },
          {
            "Text": "0x",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "0X",
            "AttrFlags": 2
          },
          {
            "Text": " and octal constants start just with a "
          },
          {
            "Text": "0",
            "AttrFlags": 2
          },
          {
            "Text": ". The latter two are "
          },
          {
            "Text": "signed",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "unsigned",
            "AttrFlags": 2
          },
          {
            "Text": " depending on whether the value fits into the signed type or not."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935664260,
        "id": "a282cd53-489d-4dec-9c53-32b28d3f8056",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935664260,
        "parent_id": "19cadc51-e108-4a1a-b9f2-cbc9625e9388",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "/* suffixes to describe width and signedness : */\nlong int i = 0x32; /* no suffix represent int, or long int */\nunsigned int ui = 65535u; /* u or U represent unsigned int, or long int */\nlong int li = 65536l; /* l or L represent long int */"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "/* suffixes to describe width and signedness : */\nlong int i = 0x32; /* no suffix represent int, or long int */\nunsigned int ui = 65535u; /* u or U represent unsigned int, or long int */\nlong int li = 65536l; /* l or L represent long int */",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935664261,
        "id": "0fd7fd85-10b6-48a9-bbf0-f819508831a7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935664261,
        "parent_id": "19cadc51-e108-4a1a-b9f2-cbc9625e9388",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Without a suffix the constant has the first type that fits its value, that is a decimal constant that is larger than "
            ],
            [
              "INT_MAX",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is of type "
            ],
            [
              "long",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " if possible, or "
            ],
            [
              "long long",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " otherwise."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Without a suffix the constant has the first type that fits its value, that is a decimal constant that is larger than "
          },
          {
            "Text": "INT_MAX",
            "AttrFlags": 2
          },
          {
            "Text": " is of type "
          },
          {
            "Text": "long",
            "AttrFlags": 2
          },
          {
            "Text": " if possible, or "
          },
          {
            "Text": "long long",
            "AttrFlags": 2
          },
          {
            "Text": " otherwise."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935664261,
        "id": "547aeb02-e892-47f3-a354-6251821890ef",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935664261,
        "parent_id": "19cadc51-e108-4a1a-b9f2-cbc9625e9388",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The header file "
            ],
            [
              "\u003climits.h\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " describes the limits of integers as follows. Their implementation-defined values shall be equal or greater in magnitude (absolute value) to those shown below, with the same sign."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The header file "
          },
          {
            "Text": "\u003climits.h\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " describes the limits of integers as follows. Their implementation-defined values shall be equal or greater in magnitude (absolute value) to those shown below, with the same sign."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935664262,
        "id": "ed6a9c3d-649e-497f-a6ba-58ae8319eb89",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935664262,
        "parent_id": "19cadc51-e108-4a1a-b9f2-cbc9625e9388",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Macro | Type | Value —— | —— | —— "
            ],
            [
              "CHAR_BIT",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | smallest object that is not a bit-field (byte) | 8 "
            ],
            [
              "SCHAR_MIN",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | "
            ],
            [
              "signed char",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | -127 / -(27 - 1) "
            ],
            [
              "SCHAR_MAX",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | "
            ],
            [
              "signed char",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | +127 / 27 - 1 "
            ],
            [
              "UCHAR_MAX",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | "
            ],
            [
              "unsigned char",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | 255 / 28 - 1 "
            ],
            [
              "CHAR_MIN",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | "
            ],
            [
              "char",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | see below "
            ],
            [
              "CHAR_MAX",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | "
            ],
            [
              "char",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | see below "
            ],
            [
              "SHRT_MIN",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | "
            ],
            [
              "short int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | -32767 / -(215 - 1) "
            ],
            [
              "SHRT_MAX",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | "
            ],
            [
              "short int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | +32767 / 215 - 1 "
            ],
            [
              "USHRT_MAX",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | "
            ],
            [
              "unsigned short int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | 65535 / 216 - 1 "
            ],
            [
              "INT_MIN",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | -32767 / -(215 - 1) "
            ],
            [
              "INT_MAX",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | +32767 / 215 - 1 "
            ],
            [
              "UINT_MAX",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | "
            ],
            [
              "unsigned int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | 65535 / 216 - 1 "
            ],
            [
              "LONG_MIN",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | "
            ],
            [
              "long int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | -2147483647 / -(231 - 1) "
            ],
            [
              "LONG_MAX",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | "
            ],
            [
              "long int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | +2147483647 / 231 - 1 "
            ],
            [
              "ULONG_MAX",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | "
            ],
            [
              "unsigned long int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | 4294967295 / 232 - 1"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Macro | Type | Value —— | —— | —— "
          },
          {
            "Text": "CHAR_BIT",
            "AttrFlags": 2
          },
          {
            "Text": " | smallest object that is not a bit-field (byte) | 8 "
          },
          {
            "Text": "SCHAR_MIN",
            "AttrFlags": 2
          },
          {
            "Text": " | "
          },
          {
            "Text": "signed char",
            "AttrFlags": 2
          },
          {
            "Text": " | -127 / -(27 - 1) "
          },
          {
            "Text": "SCHAR_MAX",
            "AttrFlags": 2
          },
          {
            "Text": " | "
          },
          {
            "Text": "signed char",
            "AttrFlags": 2
          },
          {
            "Text": " | +127 / 27 - 1 "
          },
          {
            "Text": "UCHAR_MAX",
            "AttrFlags": 2
          },
          {
            "Text": " | "
          },
          {
            "Text": "unsigned char",
            "AttrFlags": 2
          },
          {
            "Text": " | 255 / 28 - 1 "
          },
          {
            "Text": "CHAR_MIN",
            "AttrFlags": 2
          },
          {
            "Text": " | "
          },
          {
            "Text": "char",
            "AttrFlags": 2
          },
          {
            "Text": " | see below "
          },
          {
            "Text": "CHAR_MAX",
            "AttrFlags": 2
          },
          {
            "Text": " | "
          },
          {
            "Text": "char",
            "AttrFlags": 2
          },
          {
            "Text": " | see below "
          },
          {
            "Text": "SHRT_MIN",
            "AttrFlags": 2
          },
          {
            "Text": " | "
          },
          {
            "Text": "short int",
            "AttrFlags": 2
          },
          {
            "Text": " | -32767 / -(215 - 1) "
          },
          {
            "Text": "SHRT_MAX",
            "AttrFlags": 2
          },
          {
            "Text": " | "
          },
          {
            "Text": "short int",
            "AttrFlags": 2
          },
          {
            "Text": " | +32767 / 215 - 1 "
          },
          {
            "Text": "USHRT_MAX",
            "AttrFlags": 2
          },
          {
            "Text": " | "
          },
          {
            "Text": "unsigned short int",
            "AttrFlags": 2
          },
          {
            "Text": " | 65535 / 216 - 1 "
          },
          {
            "Text": "INT_MIN",
            "AttrFlags": 2
          },
          {
            "Text": " | "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": " | -32767 / -(215 - 1) "
          },
          {
            "Text": "INT_MAX",
            "AttrFlags": 2
          },
          {
            "Text": " | "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": " | +32767 / 215 - 1 "
          },
          {
            "Text": "UINT_MAX",
            "AttrFlags": 2
          },
          {
            "Text": " | "
          },
          {
            "Text": "unsigned int",
            "AttrFlags": 2
          },
          {
            "Text": " | 65535 / 216 - 1 "
          },
          {
            "Text": "LONG_MIN",
            "AttrFlags": 2
          },
          {
            "Text": " | "
          },
          {
            "Text": "long int",
            "AttrFlags": 2
          },
          {
            "Text": " | -2147483647 / -(231 - 1) "
          },
          {
            "Text": "LONG_MAX",
            "AttrFlags": 2
          },
          {
            "Text": " | "
          },
          {
            "Text": "long int",
            "AttrFlags": 2
          },
          {
            "Text": " | +2147483647 / 231 - 1 "
          },
          {
            "Text": "ULONG_MAX",
            "AttrFlags": 2
          },
          {
            "Text": " | "
          },
          {
            "Text": "unsigned long int",
            "AttrFlags": 2
          },
          {
            "Text": " | 4294967295 / 232 - 1"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935664263,
        "id": "8355b7c1-414c-46bb-af26-f9a6029c82c7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935664263,
        "parent_id": "19cadc51-e108-4a1a-b9f2-cbc9625e9388",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Macro | Type | Value —— | —— | —— "
            ],
            [
              "LLONG_MIN",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | "
            ],
            [
              "long long int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | -9223372036854775807 / -(263 - 1) "
            ],
            [
              "LLONG_MAX",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | "
            ],
            [
              "long long int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | +9223372036854775807 / 263 - 1 "
            ],
            [
              "ULLONG_MAX",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | "
            ],
            [
              "unsigned long long int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | 18446744073709551615 / 264 - 1"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Macro | Type | Value —— | —— | —— "
          },
          {
            "Text": "LLONG_MIN",
            "AttrFlags": 2
          },
          {
            "Text": " | "
          },
          {
            "Text": "long long int",
            "AttrFlags": 2
          },
          {
            "Text": " | -9223372036854775807 / -(263 - 1) "
          },
          {
            "Text": "LLONG_MAX",
            "AttrFlags": 2
          },
          {
            "Text": " | "
          },
          {
            "Text": "long long int",
            "AttrFlags": 2
          },
          {
            "Text": " | +9223372036854775807 / 263 - 1 "
          },
          {
            "Text": "ULLONG_MAX",
            "AttrFlags": 2
          },
          {
            "Text": " | "
          },
          {
            "Text": "unsigned long long int",
            "AttrFlags": 2
          },
          {
            "Text": " | 18446744073709551615 / 264 - 1"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935664263,
        "id": "030238e4-060c-4ac9-adf8-155a4e4122ee",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935664263,
        "parent_id": "19cadc51-e108-4a1a-b9f2-cbc9625e9388",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If the value of an object of type "
            ],
            [
              "char",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " sign-extends when used in an expression, the value of "
            ],
            [
              "CHAR_MIN",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " shall be the same as that of "
            ],
            [
              "SCHAR_MIN",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and the value of "
            ],
            [
              "CHAR_MAX",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " shall be the same as that of "
            ],
            [
              "SCHAR_MAX",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " . If the value of an object of type "
            ],
            [
              "char",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " does not sign-extend when used in an expression, the value of "
            ],
            [
              "CHAR_MIN",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " shall be 0 and the value of "
            ],
            [
              "CHAR_MAX",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " shall be the same as that of "
            ],
            [
              "UCHAR_MAX",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If the value of an object of type "
          },
          {
            "Text": "char",
            "AttrFlags": 2
          },
          {
            "Text": " sign-extends when used in an expression, the value of "
          },
          {
            "Text": "CHAR_MIN",
            "AttrFlags": 2
          },
          {
            "Text": " shall be the same as that of "
          },
          {
            "Text": "SCHAR_MIN",
            "AttrFlags": 2
          },
          {
            "Text": " and the value of "
          },
          {
            "Text": "CHAR_MAX",
            "AttrFlags": 2
          },
          {
            "Text": " shall be the same as that of "
          },
          {
            "Text": "SCHAR_MAX",
            "AttrFlags": 2
          },
          {
            "Text": " . If the value of an object of type "
          },
          {
            "Text": "char",
            "AttrFlags": 2
          },
          {
            "Text": " does not sign-extend when used in an expression, the value of "
          },
          {
            "Text": "CHAR_MIN",
            "AttrFlags": 2
          },
          {
            "Text": " shall be 0 and the value of "
          },
          {
            "Text": "CHAR_MAX",
            "AttrFlags": 2
          },
          {
            "Text": " shall be the same as that of "
          },
          {
            "Text": "UCHAR_MAX",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935664263,
        "id": "73f54e69-3fde-401f-bb9c-44eefa91c3ed",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935664263,
        "parent_id": "19cadc51-e108-4a1a-b9f2-cbc9625e9388",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The C99 standard added a new header, "
            ],
            [
              "\u003cstdint.h\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", which contains definitions for fixed width integers. See the fixed width integer example for a more in-depth explanation."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The C99 standard added a new header, "
          },
          {
            "Text": "\u003cstdint.h\u003e",
            "AttrFlags": 2
          },
          {
            "Text": ", which contains definitions for fixed width integers. See the fixed width integer example for a more in-depth explanation."
          }
        ]
      }
    ],
    "title": "Integer types and constants",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}