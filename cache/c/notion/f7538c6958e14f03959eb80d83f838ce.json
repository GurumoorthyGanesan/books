{
  "ID": "f7538c69-58e1-4f03-959e-b80d83f838ce",
  "Root": {
    "alive": true,
    "content": [
      "43548164-0c3e-4d2e-861c-071578d892fb",
      "f0d25365-893e-43b2-8e4d-72dbaf7c00cc",
      "1f58c2b2-beac-4b37-aa05-afb440468783",
      "6d3af3ee-a6f0-485b-b5b4-a9a07c01a02b",
      "54794181-62e8-4f4d-a86b-6a7a8820769f",
      "6d890ccd-e47d-4559-af29-aff33c3c4de5",
      "f98d7c49-c1ca-4311-9775-5db432ab1c46",
      "1107c79d-0e50-488b-8ecf-618b1b644d13",
      "d546ee5c-8157-4d7f-bd8f-c87a8b75bf13",
      "b239a310-06e5-491f-9967-fb6ee8a125bb",
      "2f059823-0bd7-4f4c-b39a-13f8b3db0972",
      "b1dc674e-8446-4fc9-a532-0470d4eeeb14"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551935648417,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "f7538c69-58e1-4f03-959e-b80d83f838ce",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551935648417,
    "parent_id": "218cbf42-b3ba-4b2a-bdab-e522009865b7",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Pointer Arithmetic"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935648410,
        "id": "43548164-0c3e-4d2e-861c-071578d892fb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935648410,
        "parent_id": "f7538c69-58e1-4f03-959e-b80d83f838ce",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Pointer addition"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Pointer addition"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935648413,
        "id": "f0d25365-893e-43b2-8e4d-72dbaf7c00cc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935648413,
        "parent_id": "f7538c69-58e1-4f03-959e-b80d83f838ce",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Given a pointer and a scalar type "
            ],
            [
              "N",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", evaluates into a pointer to the "
            ],
            [
              "N",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "th element of the pointed-to type that directly succeeds the pointed-to object in memory."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Given a pointer and a scalar type "
          },
          {
            "Text": "N",
            "AttrFlags": 2
          },
          {
            "Text": ", evaluates into a pointer to the "
          },
          {
            "Text": "N",
            "AttrFlags": 2
          },
          {
            "Text": "th element of the pointed-to type that directly succeeds the pointed-to object in memory."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935648413,
        "id": "1f58c2b2-beac-4b37-aa05-afb440468783",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935648413,
        "parent_id": "f7538c69-58e1-4f03-959e-b80d83f838ce",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int arr[] = {1, 2, 3, 4, 5};\nprintf(\"*(arr + 3) = %i\\n\", *(arr + 3)); /* Outputs \"4\", arr's fourth element. */"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int arr[] = {1, 2, 3, 4, 5};\nprintf(\"*(arr + 3) = %i\\n\", *(arr + 3)); /* Outputs \"4\", arr's fourth element. */",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935648414,
        "id": "6d3af3ee-a6f0-485b-b5b4-a9a07c01a02b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935648414,
        "parent_id": "f7538c69-58e1-4f03-959e-b80d83f838ce",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It does not matter if the pointer is used as the operand value or the scalar value. This means that things such as "
            ],
            [
              "3 + arr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " are valid. If "
            ],
            [
              "arr[k]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is the "
            ],
            [
              "k+1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " member of an array, then "
            ],
            [
              "arr+k",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is a pointer to "
            ],
            [
              "arr[k]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". In other words, "
            ],
            [
              "arr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "arr+0",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is a pointer to "
            ],
            [
              "arr[0]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "arr+1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is a pointer to "
            ],
            [
              "arr[2]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", and so on. In general, "
            ],
            [
              "*(arr+k)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is same as "
            ],
            [
              "arr[k]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It does not matter if the pointer is used as the operand value or the scalar value. This means that things such as "
          },
          {
            "Text": "3 + arr",
            "AttrFlags": 2
          },
          {
            "Text": " are valid. If "
          },
          {
            "Text": "arr[k]",
            "AttrFlags": 2
          },
          {
            "Text": " is the "
          },
          {
            "Text": "k+1",
            "AttrFlags": 2
          },
          {
            "Text": " member of an array, then "
          },
          {
            "Text": "arr+k",
            "AttrFlags": 2
          },
          {
            "Text": " is a pointer to "
          },
          {
            "Text": "arr[k]",
            "AttrFlags": 2
          },
          {
            "Text": ". In other words, "
          },
          {
            "Text": "arr",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "arr+0",
            "AttrFlags": 2
          },
          {
            "Text": " is a pointer to "
          },
          {
            "Text": "arr[0]",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "arr+1",
            "AttrFlags": 2
          },
          {
            "Text": " is a pointer to "
          },
          {
            "Text": "arr[2]",
            "AttrFlags": 2
          },
          {
            "Text": ", and so on. In general, "
          },
          {
            "Text": "*(arr+k)",
            "AttrFlags": 2
          },
          {
            "Text": " is same as "
          },
          {
            "Text": "arr[k]",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935648414,
        "id": "54794181-62e8-4f4d-a86b-6a7a8820769f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935648414,
        "parent_id": "f7538c69-58e1-4f03-959e-b80d83f838ce",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Unlike the usual arithmetic, addition of "
            ],
            [
              "1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to a pointer to an "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will add "
            ],
            [
              "4",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " bytes to the current address value. As array names are constant pointers, "
            ],
            [
              "\\+",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is the only operator we can use to access the members of an array via pointer notation using the array name. However, by defining a pointer to an array, we can get more flexibility to process the data in an array. For example, we can print the members of an array as follows:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Unlike the usual arithmetic, addition of "
          },
          {
            "Text": "1",
            "AttrFlags": 2
          },
          {
            "Text": " to a pointer to an "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": " will add "
          },
          {
            "Text": "4",
            "AttrFlags": 2
          },
          {
            "Text": " bytes to the current address value. As array names are constant pointers, "
          },
          {
            "Text": "\\+",
            "AttrFlags": 2
          },
          {
            "Text": " is the only operator we can use to access the members of an array via pointer notation using the array name. However, by defining a pointer to an array, we can get more flexibility to process the data in an array. For example, we can print the members of an array as follows:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935648414,
        "id": "6d890ccd-e47d-4559-af29-aff33c3c4de5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935648414,
        "parent_id": "f7538c69-58e1-4f03-959e-b80d83f838ce",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include\u003cstdio.h\u003e\nstatic const size_t N = 5\n    \nint main()\n{\n    size_t k = 0;\n    int arr[] = {1, 2, 3, 4, 5};\n    for(k = 0; k \u003c N; k++)\n    {\n        printf(\"\\n\\t%d\", *(arr + k));\n    }\n    return 0;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include\u003cstdio.h\u003e\nstatic const size_t N = 5\n    \nint main()\n{\n    size_t k = 0;\n    int arr[] = {1, 2, 3, 4, 5};\n    for(k = 0; k \u003c N; k++)\n    {\n        printf(\"\\n\\t%d\", *(arr + k));\n    }\n    return 0;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935648415,
        "id": "f98d7c49-c1ca-4311-9775-5db432ab1c46",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935648415,
        "parent_id": "f7538c69-58e1-4f03-959e-b80d83f838ce",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "By defining a pointer to the array, the above program is equivalent to the following:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "By defining a pointer to the array, the above program is equivalent to the following:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935648415,
        "id": "1107c79d-0e50-488b-8ecf-618b1b644d13",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935648415,
        "parent_id": "f7538c69-58e1-4f03-959e-b80d83f838ce",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include\u003cstdio.h\u003e\nstatic const size_t N = 5\n    \nint main()\n{\n    size_t k = 0;\n    int arr[] = {1, 2, 3, 4, 5};\n    int *ptr = arr; /* or int *ptr = \u0026arr[0]; */\n    for(k = 0; k \u003c N; k++)\n    {\n        printf(\"\\n\\t%d\", ptr[k]);\n        /* or   printf(\"\\n\\t%d\", *(ptr + k)); */\n        /* or   printf(\"\\n\\t%d\", *ptr++); */\n    }\n    return 0;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include\u003cstdio.h\u003e\nstatic const size_t N = 5\n    \nint main()\n{\n    size_t k = 0;\n    int arr[] = {1, 2, 3, 4, 5};\n    int *ptr = arr; /* or int *ptr = \u0026arr[0]; */\n    for(k = 0; k \u003c N; k++)\n    {\n        printf(\"\\n\\t%d\", ptr[k]);\n        /* or   printf(\"\\n\\t%d\", *(ptr + k)); */\n        /* or   printf(\"\\n\\t%d\", *ptr++); */\n    }\n    return 0;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935648415,
        "id": "d546ee5c-8157-4d7f-bd8f-c87a8b75bf13",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935648415,
        "parent_id": "f7538c69-58e1-4f03-959e-b80d83f838ce",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "See that the members of the array "
            ],
            [
              "arr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " are accessed using the operators "
            ],
            [
              "\\+",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "++",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". The other operators that can be used with the pointer "
            ],
            [
              "ptr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " are "
            ],
            [
              "\\-",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "--",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "See that the members of the array "
          },
          {
            "Text": "arr",
            "AttrFlags": 2
          },
          {
            "Text": " are accessed using the operators "
          },
          {
            "Text": "\\+",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "++",
            "AttrFlags": 2
          },
          {
            "Text": ". The other operators that can be used with the pointer "
          },
          {
            "Text": "ptr",
            "AttrFlags": 2
          },
          {
            "Text": " are "
          },
          {
            "Text": "\\-",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "--",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935648415,
        "id": "b239a310-06e5-491f-9967-fb6ee8a125bb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935648415,
        "parent_id": "f7538c69-58e1-4f03-959e-b80d83f838ce",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Pointer subtraction"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Pointer subtraction"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935648415,
        "id": "2f059823-0bd7-4f4c-b39a-13f8b3db0972",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935648415,
        "parent_id": "f7538c69-58e1-4f03-959e-b80d83f838ce",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Given two pointers to the same type, evaluates into an object of type "
            ],
            [
              "ptrdiff_t",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " that holds the scalar value that must be added to the second pointer in order to obtain the value of the first pointer."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Given two pointers to the same type, evaluates into an object of type "
          },
          {
            "Text": "ptrdiff_t",
            "AttrFlags": 2
          },
          {
            "Text": " that holds the scalar value that must be added to the second pointer in order to obtain the value of the first pointer."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935648415,
        "id": "b1dc674e-8446-4fc9-a532-0470d4eeeb14",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935648415,
        "parent_id": "f7538c69-58e1-4f03-959e-b80d83f838ce",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int arr[] = {1, 2, 3, 4, 5};\nint *p = \u0026arr[2];\nint *q = \u0026arr[3];\nptrdiff_t diff = q - p;\n\nprintf(\"q - p = %ti\\n\", diff); /* Outputs \"1\". */\nprintf(\"*(p + (q - p)) = %d\\n\", *(p + diff)); /* Outputs \"4\". */"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int arr[] = {1, 2, 3, 4, 5};\nint *p = \u0026arr[2];\nint *q = \u0026arr[3];\nptrdiff_t diff = q - p;\n\nprintf(\"q - p = %ti\\n\", diff); /* Outputs \"1\". */\nprintf(\"*(p + (q - p)) = %d\\n\", *(p + diff)); /* Outputs \"4\". */",
        "code_language": "Plain Text"
      }
    ],
    "title": "Pointer Arithmetic",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}