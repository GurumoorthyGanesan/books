{
  "ID": "2dd85c78-25ed-4ee8-ad99-0ffc482df9b1",
  "Root": {
    "alive": true,
    "content": [
      "050ba408-abd8-4f95-a585-70682058dfcd",
      "246c1ff9-f6f3-499b-9b16-4559328f19f3",
      "30c6ffb2-dce1-4728-94a6-4971ee625da4",
      "bba9f344-2b52-4a1a-9691-80b6cff22d67",
      "788b9055-f673-4f4c-9da7-011a291e4f0d",
      "92d9cf5f-db04-4c4c-afc0-ad8186702067",
      "550ecbf6-29bc-4b2f-aa20-648df8132bd8"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551936246529,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "2dd85c78-25ed-4ee8-ad99-0ffc482df9b1",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551936246529,
    "parent_id": "690adfe7-1f94-4d22-83ad-47d3971f3325",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Printing the command line arguments"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936246525,
        "id": "050ba408-abd8-4f95-a585-70682058dfcd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936246525,
        "parent_id": "2dd85c78-25ed-4ee8-ad99-0ffc482df9b1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "After receiving the arguments, you can print them as follows:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "After receiving the arguments, you can print them as follows:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936246527,
        "id": "246c1ff9-f6f3-499b-9b16-4559328f19f3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936246527,
        "parent_id": "2dd85c78-25ed-4ee8-ad99-0ffc482df9b1",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int main(int argc, char **argv)\n{\n    for (int i = 1; i \u003c argc; i++)\n    {\n        printf(\"Argument %d: [%s]\\n\", i, argv[i]); \n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int main(int argc, char **argv)\n{\n    for (int i = 1; i \u003c argc; i++)\n    {\n        printf(\"Argument %d: [%s]\\n\", i, argv[i]); \n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936246528,
        "id": "30c6ffb2-dce1-4728-94a6-4971ee625da4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936246528,
        "parent_id": "2dd85c78-25ed-4ee8-ad99-0ffc482df9b1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Notes",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Notes",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936246528,
        "id": "bba9f344-2b52-4a1a-9691-80b6cff22d67",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936246528,
        "parent_id": "2dd85c78-25ed-4ee8-ad99-0ffc482df9b1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "argv",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " parameter can be also defined as "
            ],
            [
              "char *argv[]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "argv",
            "AttrFlags": 2
          },
          {
            "Text": " parameter can be also defined as "
          },
          {
            "Text": "char *argv[]",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936246529,
        "id": "788b9055-f673-4f4c-9da7-011a291e4f0d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936246529,
        "parent_id": "2dd85c78-25ed-4ee8-ad99-0ffc482df9b1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "argv[0]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "may",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " contain the program name itself (depending on how the program was executed). The first “real” command line argument is at "
            ],
            [
              "argv[1]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", and this is the reason why the loop variable "
            ],
            [
              "i",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is initialized to 1."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "argv[0]",
            "AttrFlags": 2
          },
          {
            "Text": " "
          },
          {
            "Text": "may",
            "AttrFlags": 4
          },
          {
            "Text": " contain the program name itself (depending on how the program was executed). The first “real” command line argument is at "
          },
          {
            "Text": "argv[1]",
            "AttrFlags": 2
          },
          {
            "Text": ", and this is the reason why the loop variable "
          },
          {
            "Text": "i",
            "AttrFlags": 2
          },
          {
            "Text": " is initialized to 1."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936246529,
        "id": "92d9cf5f-db04-4c4c-afc0-ad8186702067",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936246529,
        "parent_id": "2dd85c78-25ed-4ee8-ad99-0ffc482df9b1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In the print statement, you can use "
            ],
            [
              "*(argv + i)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " instead of "
            ],
            [
              "argv[i]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " - it evaluates to the same thing, but is more verbose."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "In the print statement, you can use "
          },
          {
            "Text": "*(argv + i)",
            "AttrFlags": 2
          },
          {
            "Text": " instead of "
          },
          {
            "Text": "argv[i]",
            "AttrFlags": 2
          },
          {
            "Text": " - it evaluates to the same thing, but is more verbose."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936246529,
        "id": "550ecbf6-29bc-4b2f-aa20-648df8132bd8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936246529,
        "parent_id": "2dd85c78-25ed-4ee8-ad99-0ffc482df9b1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The square brackets around the argument value help identify the start and end. This can be invaluable if there are trailing blanks, newlines, carriage returns, or other oddball characters in the argument. Some variant on this program is a useful tool for debugging shell scripts where you need to understand what the argument list actually contains (although there are simple shell alternatives that are almost equivalent)."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "The square brackets around the argument value help identify the start and end. This can be invaluable if there are trailing blanks, newlines, carriage returns, or other oddball characters in the argument. Some variant on this program is a useful tool for debugging shell scripts where you need to understand what the argument list actually contains (although there are simple shell alternatives that are almost equivalent)."
          }
        ]
      }
    ],
    "title": "Printing the command line arguments",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}