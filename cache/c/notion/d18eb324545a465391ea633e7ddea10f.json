{
  "ID": "d18eb324-545a-4653-91ea-633e7ddea10f",
  "Root": {
    "alive": true,
    "content": [
      "34586858-8148-42a7-aead-3cc054bd8e1e",
      "585b5b25-933e-4be0-bbaa-64cf2c01ddf3"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551936756186,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "d18eb324-545a-4653-91ea-633e7ddea10f",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551936756186,
    "parent_id": "86031ef1-ffce-4374-a32d-1f1886dc6593",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Start several threads"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936756185,
        "id": "34586858-8148-42a7-aead-3cc054bd8e1e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936756185,
        "parent_id": "d18eb324-545a-4653-91ea-633e7ddea10f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cstdio.h\u003e\n#include \u003cthreads.h\u003e\n#include \u003cstdlib.h\u003e\n\nstruct my_thread_data {\n   double factor;\n};\n\nint my_thread_func(void* a) {\n   struct my_thread_data* d = a;\n   // do something with d\n   printf(\"we found %g\\n\", d-\u003efactor);\n   // return an success or error code\n   return d-\u003efactor \u003e 1.0;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cstdio.h\u003e\n#include \u003cthreads.h\u003e\n#include \u003cstdlib.h\u003e\n\nstruct my_thread_data {\n   double factor;\n};\n\nint my_thread_func(void* a) {\n   struct my_thread_data* d = a;\n   // do something with d\n   printf(\"we found %g\\n\", d-\u003efactor);\n   // return an success or error code\n   return d-\u003efactor \u003e 1.0;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936756186,
        "id": "585b5b25-933e-4be0-bbaa-64cf2c01ddf3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936756186,
        "parent_id": "d18eb324-545a-4653-91ea-633e7ddea10f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int main(int argc, char* argv[argc+1]) {\n    unsigned n = 4;\n    if (argc \u003e 1) n = strtoull(argv[1], 0, 0);\n    // reserve space for the arguments for the threads\n    struct my_thread_data D[n];     // can't be initialized\n    for (unsigned i = 0; i \u003c n; ++i) {\n         D[i] = (struct my_thread_data){ .factor = 0.5*i, };\n    }\n    // reserve space for the ID's of the threads\n    thrd_t id[4];\n    // launch the threads\n    for (unsigned i = 0; i \u003c n; ++i) {\n         thrd_create(\u0026id[i], my_thread_func, \u0026D[i]);\n    }\n    // Wait that all threads have finished, but throw away their\n    // return values\n    for (unsigned i = 0; i \u003c n; ++i) {\n         thrd_join(id[i], 0);\n    }\n    return EXIT_SUCCESS;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int main(int argc, char* argv[argc+1]) {\n    unsigned n = 4;\n    if (argc \u003e 1) n = strtoull(argv[1], 0, 0);\n    // reserve space for the arguments for the threads\n    struct my_thread_data D[n];     // can't be initialized\n    for (unsigned i = 0; i \u003c n; ++i) {\n         D[i] = (struct my_thread_data){ .factor = 0.5*i, };\n    }\n    // reserve space for the ID's of the threads\n    thrd_t id[4];\n    // launch the threads\n    for (unsigned i = 0; i \u003c n; ++i) {\n         thrd_create(\u0026id[i], my_thread_func, \u0026D[i]);\n    }\n    // Wait that all threads have finished, but throw away their\n    // return values\n    for (unsigned i = 0; i \u003c n; ++i) {\n         thrd_join(id[i], 0);\n    }\n    return EXIT_SUCCESS;\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "Start several threads",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}