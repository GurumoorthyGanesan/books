{
  "ID": "0232887f-6eaa-4b2c-8ff3-28c242eb7dd8",
  "Root": {
    "alive": true,
    "content": [
      "4c8e9cd0-acff-4a81-8b85-4963d7edadaf",
      "ef6a47ea-e74b-4924-8bc3-a20c0db6c10a",
      "bae4f3c9-076c-4251-988e-ee4c7a9abdc1",
      "06d14207-0a9f-4197-a63b-87729a7d6933",
      "4aeafb5d-e5ab-4646-a177-b46ef9e8ac37",
      "2497444b-e381-4c5d-83c4-643ed9f15f4d",
      "cdcc0a99-b151-4a4f-a342-0eb7644eff74",
      "cc1ce5bc-7bd2-488a-a2de-c49da2b2c927",
      "fc8602ad-0d4c-4deb-840c-8cc75b6cc8da",
      "d8b64101-4bb6-4e93-a66f-9a0b54260a2d",
      "218222b1-3bf1-41e9-bdb7-ff05a9f563b8",
      "f500175c-cfe7-40e3-997c-0fd0925965e0"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551936364457,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "0232887f-6eaa-4b2c-8ff3-28c242eb7dd8",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551936364457,
    "parent_id": "ce0d7992-bb1e-4e62-ab26-2f99a9a2f78d",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Passing unadjacent arrays to functions expecting real multidimensional arrays"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936364452,
        "id": "4c8e9cd0-acff-4a81-8b85-4963d7edadaf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936364452,
        "parent_id": "0232887f-6eaa-4b2c-8ff3-28c242eb7dd8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When allocating multidimensional arrays with "
            ],
            [
              "malloc",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "calloc",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", and "
            ],
            [
              "realloc",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", a common pattern is to allocate the inner arrays with multiple calls (even if the call only appears once, it may be in a loop):"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When allocating multidimensional arrays with "
          },
          {
            "Text": "malloc",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "calloc",
            "AttrFlags": 2
          },
          {
            "Text": ", and "
          },
          {
            "Text": "realloc",
            "AttrFlags": 2
          },
          {
            "Text": ", a common pattern is to allocate the inner arrays with multiple calls (even if the call only appears once, it may be in a loop):"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936364455,
        "id": "ef6a47ea-e74b-4924-8bc3-a20c0db6c10a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936364455,
        "parent_id": "0232887f-6eaa-4b2c-8ff3-28c242eb7dd8",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "/* Could also be `int **` with malloc used to allocate outer array. */\nint *array[4];\nint i;\n\n/* Allocate 4 arrays of 16 ints. */\nfor (i = 0; i \u003c 4; i++)\n    array[i] = malloc(16 * sizeof(*array[i]));"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "/* Could also be `int **` with malloc used to allocate outer array. */\nint *array[4];\nint i;\n\n/* Allocate 4 arrays of 16 ints. */\nfor (i = 0; i \u003c 4; i++)\n    array[i] = malloc(16 * sizeof(*array[i]));",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936364455,
        "id": "bae4f3c9-076c-4251-988e-ee4c7a9abdc1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936364455,
        "parent_id": "0232887f-6eaa-4b2c-8ff3-28c242eb7dd8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The difference in bytes between the last element of one of the inner arrays and the first element of the next inner array may not be 0 as they would be with a “real” multidimensional array (e.g. "
            ],
            [
              "int array[4][16];",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "):"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The difference in bytes between the last element of one of the inner arrays and the first element of the next inner array may not be 0 as they would be with a “real” multidimensional array (e.g. "
          },
          {
            "Text": "int array[4][16];",
            "AttrFlags": 2
          },
          {
            "Text": "):"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936364455,
        "id": "06d14207-0a9f-4197-a63b-87729a7d6933",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936364455,
        "parent_id": "0232887f-6eaa-4b2c-8ff3-28c242eb7dd8",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "/* 0x40003c, 0x402000 */\nprintf(\"%p, %p\\n\", (void *)(array[0] + 15), (void *)array[1]);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "/* 0x40003c, 0x402000 */\nprintf(\"%p, %p\\n\", (void *)(array[0] + 15), (void *)array[1]);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936364455,
        "id": "4aeafb5d-e5ab-4646-a177-b46ef9e8ac37",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936364455,
        "parent_id": "0232887f-6eaa-4b2c-8ff3-28c242eb7dd8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Taking into account the size of "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", you get a difference of 8128 bytes (8132-4), which is 2032 "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "-sized array elements, and that is the problem: a “real” multidimensional array has no gaps between elements."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Taking into account the size of "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": ", you get a difference of 8128 bytes (8132-4), which is 2032 "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": "-sized array elements, and that is the problem: a “real” multidimensional array has no gaps between elements."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936364455,
        "id": "2497444b-e381-4c5d-83c4-643ed9f15f4d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936364455,
        "parent_id": "0232887f-6eaa-4b2c-8ff3-28c242eb7dd8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If you need to use a dynamically allocated array with a function expecting a “real” multidimensional array, you should allocate an object of type "
            ],
            [
              "int *",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and use arithmetic to perform calculations:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If you need to use a dynamically allocated array with a function expecting a “real” multidimensional array, you should allocate an object of type "
          },
          {
            "Text": "int *",
            "AttrFlags": 2
          },
          {
            "Text": " and use arithmetic to perform calculations:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936364456,
        "id": "cdcc0a99-b151-4a4f-a342-0eb7644eff74",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936364456,
        "parent_id": "0232887f-6eaa-4b2c-8ff3-28c242eb7dd8",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "void func(int M, int N, int *array);\n...\n\n/* Equivalent to declaring `int array[M][N] = {{0}};` and assigning to array4_16[i][j]. */\nint *array;\nint M = 4, N = 16;\narray = calloc(M, N * sizeof(*array));\narray[i * N + j] = 1;\nfunc(M, N, array);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "void func(int M, int N, int *array);\n...\n\n/* Equivalent to declaring `int array[M][N] = {{0}};` and assigning to array4_16[i][j]. */\nint *array;\nint M = 4, N = 16;\narray = calloc(M, N * sizeof(*array));\narray[i * N + j] = 1;\nfunc(M, N, array);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936364456,
        "id": "cc1ce5bc-7bd2-488a-a2de-c49da2b2c927",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936364456,
        "parent_id": "0232887f-6eaa-4b2c-8ff3-28c242eb7dd8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If "
            ],
            [
              "N",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is a macro or an integer literal rather than a variable, the code can simply use the more natural 2-D array notation after allocating a pointer to an array:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If "
          },
          {
            "Text": "N",
            "AttrFlags": 2
          },
          {
            "Text": " is a macro or an integer literal rather than a variable, the code can simply use the more natural 2-D array notation after allocating a pointer to an array:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936364456,
        "id": "fc8602ad-0d4c-4deb-840c-8cc75b6cc8da",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936364456,
        "parent_id": "0232887f-6eaa-4b2c-8ff3-28c242eb7dd8",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "void func(int M, int N, int *array);\n#define N 16\nvoid func_N(int M, int (*array)[N]);\n...\n\nint M = 4;\nint (*array)[N];\narray = calloc(M, sizeof(*array));\narray[i][j] = 1;\n\n/* Cast to `int *` works here because `array` is a single block of M*N ints with no gaps,\n   just like `int array2[M * N];` and `int array3[M][N];` would be. */\nfunc(M, N, (int *)array);\nfunc_N(M, array);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "void func(int M, int N, int *array);\n#define N 16\nvoid func_N(int M, int (*array)[N]);\n...\n\nint M = 4;\nint (*array)[N];\narray = calloc(M, sizeof(*array));\narray[i][j] = 1;\n\n/* Cast to `int *` works here because `array` is a single block of M*N ints with no gaps,\n   just like `int array2[M * N];` and `int array3[M][N];` would be. */\nfunc(M, N, (int *)array);\nfunc_N(M, array);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936364456,
        "id": "d8b64101-4bb6-4e93-a66f-9a0b54260a2d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936364456,
        "parent_id": "0232887f-6eaa-4b2c-8ff3-28c242eb7dd8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If "
            ],
            [
              "N",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is not a macro or an integer literal, then "
            ],
            [
              "array",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will point to a variable-length array (VLA). This can still be used with "
            ],
            [
              "func",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " by casting to "
            ],
            [
              "int *",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and a new function "
            ],
            [
              "func_vla",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " would replace "
            ],
            [
              "func_N",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If "
          },
          {
            "Text": "N",
            "AttrFlags": 2
          },
          {
            "Text": " is not a macro or an integer literal, then "
          },
          {
            "Text": "array",
            "AttrFlags": 2
          },
          {
            "Text": " will point to a variable-length array (VLA). This can still be used with "
          },
          {
            "Text": "func",
            "AttrFlags": 2
          },
          {
            "Text": " by casting to "
          },
          {
            "Text": "int *",
            "AttrFlags": 2
          },
          {
            "Text": " and a new function "
          },
          {
            "Text": "func_vla",
            "AttrFlags": 2
          },
          {
            "Text": " would replace "
          },
          {
            "Text": "func_N",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936364456,
        "id": "218222b1-3bf1-41e9-bdb7-ff05a9f563b8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936364456,
        "parent_id": "0232887f-6eaa-4b2c-8ff3-28c242eb7dd8",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "void func(int M, int N, int *array);\nvoid func_vla(int M, int N, int array[M][N]);\n...\n\nint M = 4, N = 16;\nint (*array)[N];\narray = calloc(M, sizeof(*array));\narray[i][j] = 1;\nfunc(M, N, (int *)array);\nfunc_vla(M, N, array);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "void func(int M, int N, int *array);\nvoid func_vla(int M, int N, int array[M][N]);\n...\n\nint M = 4, N = 16;\nint (*array)[N];\narray = calloc(M, sizeof(*array));\narray[i][j] = 1;\nfunc(M, N, (int *)array);\nfunc_vla(M, N, array);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936364457,
        "id": "f500175c-cfe7-40e3-997c-0fd0925965e0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936364457,
        "parent_id": "0232887f-6eaa-4b2c-8ff3-28c242eb7dd8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ": VLAs are optional as of C11. If your implementation supports C11 and defines the macro "
            ],
            [
              "__STDC_NO_VLA__",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to 1, you are stuck with the pre-C99 methods."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note",
            "AttrFlags": 1
          },
          {
            "Text": ": VLAs are optional as of C11. If your implementation supports C11 and defines the macro "
          },
          {
            "Text": "__STDC_NO_VLA__",
            "AttrFlags": 2
          },
          {
            "Text": " to 1, you are stuck with the pre-C99 methods."
          }
        ]
      }
    ],
    "title": "Passing unadjacent arrays to functions expecting real multidimensional arrays",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}