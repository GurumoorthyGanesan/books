{
  "ID": "03e9c567-f3e6-4f84-9e1a-729e4d55ad59",
  "Root": {
    "alive": true,
    "content": [
      "b26ebdd8-1f12-4bf5-bbfe-a93f1996cf34",
      "24215506-6cc7-4fbf-9b3f-554d0e3fff48",
      "97d3e20a-3ed8-4f55-b52e-ccafa8a78f32",
      "5596b58d-01dd-4c81-a350-ff8f178ba029",
      "0855a697-79ae-4105-bb88-719c8446a7c4",
      "1aaf00f5-b200-425b-b0c4-cd5685076619",
      "60268c8c-b4ed-4a11-b949-70bd4eaca79d",
      "23cc4b6e-5138-4f05-9da4-aa4b7241a36f",
      "42239233-345b-4402-b19e-6672e2114286",
      "54dc1bfe-11e1-4f89-a43f-587e224abb29",
      "90ef6054-cff3-4ac5-83c5-6b9dc405a8d0",
      "4b08cd0c-d080-404d-bccf-f734d3cd6ef0",
      "1d8d3822-f77b-483b-9aee-7c4bbc79b409",
      "46b338fb-0c4b-42c6-aed0-541da61470b8",
      "26a468fa-583c-473d-b061-5799d7e80ee7",
      "b69498e7-611a-4581-ad4b-578c0660cddc",
      "e76dbe59-e299-44a6-8047-748e8357faa9",
      "1e6e1270-d107-4ce9-a596-7ee59d04c16e"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551936602306,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "03e9c567-f3e6-4f84-9e1a-729e4d55ad59",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551936602306,
    "parent_id": "f9df1d91-a33b-4691-8612-45ec5ebf45e8",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Simple Uses of Typedef"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936602300,
        "id": "b26ebdd8-1f12-4bf5-bbfe-a93f1996cf34",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936602300,
        "parent_id": "03e9c567-f3e6-4f84-9e1a-729e4d55ad59",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For giving short names to a data type"
            ]
          ]
        },
        "type": "sub_sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "For giving short names to a data type"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936602303,
        "id": "24215506-6cc7-4fbf-9b3f-554d0e3fff48",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936602303,
        "parent_id": "03e9c567-f3e6-4f84-9e1a-729e4d55ad59",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Instead of:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Instead of:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936602303,
        "id": "97d3e20a-3ed8-4f55-b52e-ccafa8a78f32",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936602303,
        "parent_id": "03e9c567-f3e6-4f84-9e1a-729e4d55ad59",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "long long int foo;\nstruct mystructure object;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "long long int foo;\nstruct mystructure object;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936602303,
        "id": "5596b58d-01dd-4c81-a350-ff8f178ba029",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936602303,
        "parent_id": "03e9c567-f3e6-4f84-9e1a-729e4d55ad59",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "one can use"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "one can use"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936602303,
        "id": "0855a697-79ae-4105-bb88-719c8446a7c4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936602303,
        "parent_id": "03e9c567-f3e6-4f84-9e1a-729e4d55ad59",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "/* write once */\ntypedef long long ll;\ntypedef struct mystructure mystruct;\n\n/* use whenever needed */\nll foo;\nmystruct object;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "/* write once */\ntypedef long long ll;\ntypedef struct mystructure mystruct;\n\n/* use whenever needed */\nll foo;\nmystruct object;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936602303,
        "id": "1aaf00f5-b200-425b-b0c4-cd5685076619",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936602303,
        "parent_id": "03e9c567-f3e6-4f84-9e1a-729e4d55ad59",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This reduces the amount of typing needed if the type is used many times in the program."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This reduces the amount of typing needed if the type is used many times in the program."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936602303,
        "id": "60268c8c-b4ed-4a11-b949-70bd4eaca79d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936602303,
        "parent_id": "03e9c567-f3e6-4f84-9e1a-729e4d55ad59",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Improving portability"
            ]
          ]
        },
        "type": "sub_sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Improving portability"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936602304,
        "id": "23cc4b6e-5138-4f05-9da4-aa4b7241a36f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936602304,
        "parent_id": "03e9c567-f3e6-4f84-9e1a-729e4d55ad59",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The attributes of data types vary across different architectures. For example, an "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " may be a 2-byte type in one implementation and an 4-byte type in another. Suppose a program needs to use a 4-byte type to run correctly."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The attributes of data types vary across different architectures. For example, an "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": " may be a 2-byte type in one implementation and an 4-byte type in another. Suppose a program needs to use a 4-byte type to run correctly."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936602304,
        "id": "42239233-345b-4402-b19e-6672e2114286",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936602304,
        "parent_id": "03e9c567-f3e6-4f84-9e1a-729e4d55ad59",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In one implementation, let the size of "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " be 2 bytes and that of "
            ],
            [
              "long",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " be 4 bytes. In another, let the size of "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " be 4 bytes and that of "
            ],
            [
              "long",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " be 8 bytes. If the program is written using the second implementation,"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In one implementation, let the size of "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": " be 2 bytes and that of "
          },
          {
            "Text": "long",
            "AttrFlags": 2
          },
          {
            "Text": " be 4 bytes. In another, let the size of "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": " be 4 bytes and that of "
          },
          {
            "Text": "long",
            "AttrFlags": 2
          },
          {
            "Text": " be 8 bytes. If the program is written using the second implementation,"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936602304,
        "id": "54dc1bfe-11e1-4f89-a43f-587e224abb29",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936602304,
        "parent_id": "03e9c567-f3e6-4f84-9e1a-729e4d55ad59",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "/* program expecting a 4 byte integer */\nint foo; /* need to hold 4 bytes to work */\n/* some code involving many more ints */"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "/* program expecting a 4 byte integer */\nint foo; /* need to hold 4 bytes to work */\n/* some code involving many more ints */",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936602304,
        "id": "90ef6054-cff3-4ac5-83c5-6b9dc405a8d0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936602304,
        "parent_id": "03e9c567-f3e6-4f84-9e1a-729e4d55ad59",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For the program to run in the first implementation, all the "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " declarations will have to be changed to "
            ],
            [
              "long",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For the program to run in the first implementation, all the "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": " declarations will have to be changed to "
          },
          {
            "Text": "long",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936602304,
        "id": "4b08cd0c-d080-404d-bccf-f734d3cd6ef0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936602304,
        "parent_id": "03e9c567-f3e6-4f84-9e1a-729e4d55ad59",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "/* program now needs long */\nlong foo; /*need to hold 4 bytes to work */\n/* some code involving many more longs - lot to be changed */"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "/* program now needs long */\nlong foo; /*need to hold 4 bytes to work */\n/* some code involving many more longs - lot to be changed */",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936602304,
        "id": "1d8d3822-f77b-483b-9aee-7c4bbc79b409",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936602304,
        "parent_id": "03e9c567-f3e6-4f84-9e1a-729e4d55ad59",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To avoid this, one can use "
            ],
            [
              "typedef",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To avoid this, one can use "
          },
          {
            "Text": "typedef",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936602305,
        "id": "46b338fb-0c4b-42c6-aed0-541da61470b8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936602305,
        "parent_id": "03e9c567-f3e6-4f84-9e1a-729e4d55ad59",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "/* program expecting a 4 byte integer */\ntypedef int myint; /* need to declare once - only one line to modify if needed */\nmyint foo; /* need to hold 4 bytes to work */\n/* some code involving many more myints */"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "/* program expecting a 4 byte integer */\ntypedef int myint; /* need to declare once - only one line to modify if needed */\nmyint foo; /* need to hold 4 bytes to work */\n/* some code involving many more myints */",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936602305,
        "id": "26a468fa-583c-473d-b061-5799d7e80ee7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936602305,
        "parent_id": "03e9c567-f3e6-4f84-9e1a-729e4d55ad59",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Then, only the "
            ],
            [
              "typedef",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " statement would need to be changed each time, instead of examining the whole program."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Then, only the "
          },
          {
            "Text": "typedef",
            "AttrFlags": 2
          },
          {
            "Text": " statement would need to be changed each time, instead of examining the whole program."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936602305,
        "id": "b69498e7-611a-4581-ad4b-578c0660cddc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936602305,
        "parent_id": "03e9c567-f3e6-4f84-9e1a-729e4d55ad59",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "\u003cstdint.h\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " header and the related "
            ],
            [
              "\u003cinttypes.h\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " header define standard type names (using "
            ],
            [
              "typedef",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") for integers of various sizes, and these names are often the best choice in modern code that needs fixed size integers. For example, "
            ],
            [
              "uint8_t",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is an unsigned 8-bit integer type; "
            ],
            [
              "int64_t",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is a signed 64-bit integer type. The type "
            ],
            [
              "uintptr_t",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is an unsigned integer type big enough to hold any pointer to object. These types are theoretically optional — but it is rare for them not to be available. There are variants like "
            ],
            [
              "uint_least16_t",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (the smallest unsigned integer type with at least 16 bits) and "
            ],
            [
              "int_fast32_t",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (the fastest signed integer type with at least 32 bits). Also, "
            ],
            [
              "intmax_t",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "uintmax_t",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " are the largest integer types supported by the implementation. These types are mandatory."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "\u003cstdint.h\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " header and the related "
          },
          {
            "Text": "\u003cinttypes.h\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " header define standard type names (using "
          },
          {
            "Text": "typedef",
            "AttrFlags": 2
          },
          {
            "Text": ") for integers of various sizes, and these names are often the best choice in modern code that needs fixed size integers. For example, "
          },
          {
            "Text": "uint8_t",
            "AttrFlags": 2
          },
          {
            "Text": " is an unsigned 8-bit integer type; "
          },
          {
            "Text": "int64_t",
            "AttrFlags": 2
          },
          {
            "Text": " is a signed 64-bit integer type. The type "
          },
          {
            "Text": "uintptr_t",
            "AttrFlags": 2
          },
          {
            "Text": " is an unsigned integer type big enough to hold any pointer to object. These types are theoretically optional — but it is rare for them not to be available. There are variants like "
          },
          {
            "Text": "uint_least16_t",
            "AttrFlags": 2
          },
          {
            "Text": " (the smallest unsigned integer type with at least 16 bits) and "
          },
          {
            "Text": "int_fast32_t",
            "AttrFlags": 2
          },
          {
            "Text": " (the fastest signed integer type with at least 32 bits). Also, "
          },
          {
            "Text": "intmax_t",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "uintmax_t",
            "AttrFlags": 2
          },
          {
            "Text": " are the largest integer types supported by the implementation. These types are mandatory."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936602305,
        "id": "e76dbe59-e299-44a6-8047-748e8357faa9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936602305,
        "parent_id": "03e9c567-f3e6-4f84-9e1a-729e4d55ad59",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To specify a usage or to improve readability"
            ]
          ]
        },
        "type": "sub_sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "To specify a usage or to improve readability"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936602306,
        "id": "1e6e1270-d107-4ce9-a596-7ee59d04c16e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936602306,
        "parent_id": "03e9c567-f3e6-4f84-9e1a-729e4d55ad59",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If a set of data has a particular purpose, one can use "
            ],
            [
              "typedef",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to give it a meaningful name. Moreover, if the property of the data changes such that the base type must change, only the "
            ],
            [
              "typedef",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " statement would have to be changed, instead of examining the whole program."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If a set of data has a particular purpose, one can use "
          },
          {
            "Text": "typedef",
            "AttrFlags": 2
          },
          {
            "Text": " to give it a meaningful name. Moreover, if the property of the data changes such that the base type must change, only the "
          },
          {
            "Text": "typedef",
            "AttrFlags": 2
          },
          {
            "Text": " statement would have to be changed, instead of examining the whole program."
          }
        ]
      }
    ],
    "title": "Simple Uses of Typedef",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}