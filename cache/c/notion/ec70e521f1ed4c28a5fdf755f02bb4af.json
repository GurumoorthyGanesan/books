{
  "ID": "ec70e521-f1ed-4c28-a5fd-f755f02bb4af",
  "Root": {
    "alive": true,
    "content": [
      "4d65bf8c-6764-4db6-b099-cb4f2d090488",
      "5bd62dc6-934d-4ea7-98dd-85e1801f39ff",
      "25ab359e-59f2-4abb-b749-63a911cc1c24",
      "207b408b-ed2c-4318-9995-e296f7ffab14",
      "7fcd64a8-201f-4e6e-b9b8-e9084c1f0243",
      "7b1df669-d894-435c-a4a4-e57cb98c7ab5",
      "74fb644c-6943-467f-b026-68c235ac4a0f",
      "48cecdee-846f-4c11-93c3-8bb6cdb00d6c",
      "9941e788-755a-451c-8c0e-82065384dba2",
      "da44098b-d989-4272-b7f9-e5484c2c5491",
      "63994a0b-07cd-4978-bbb9-a312369724d2"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551936218349,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "ec70e521-f1ed-4c28-a5fd-f755f02bb4af",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551936218349,
    "parent_id": "fceea03f-c65b-4f89-8e06-817d0fcf3348",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Simple Enumeration"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936218345,
        "id": "4d65bf8c-6764-4db6-b099-cb4f2d090488",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936218345,
        "parent_id": "ec70e521-f1ed-4c28-a5fd-f755f02bb4af",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "An enumeration is a user-defined data type consists of integral constants and each integral constant is given a name. Keyword "
            ],
            [
              "enum",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is used to define enumerated data type."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "An enumeration is a user-defined data type consists of integral constants and each integral constant is given a name. Keyword "
          },
          {
            "Text": "enum",
            "AttrFlags": 2
          },
          {
            "Text": " is used to define enumerated data type."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936218348,
        "id": "5bd62dc6-934d-4ea7-98dd-85e1801f39ff",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936218348,
        "parent_id": "ec70e521-f1ed-4c28-a5fd-f755f02bb4af",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If you use "
            ],
            [
              "enum",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " instead of "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "string/ char*",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", you increase compile-time checking and avoid errors from passing in invalid constants, and you document which values are legal to use."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If you use "
          },
          {
            "Text": "enum",
            "AttrFlags": 2
          },
          {
            "Text": " instead of "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "string/ char*",
            "AttrFlags": 2
          },
          {
            "Text": ", you increase compile-time checking and avoid errors from passing in invalid constants, and you document which values are legal to use."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936218348,
        "id": "25ab359e-59f2-4abb-b749-63a911cc1c24",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936218348,
        "parent_id": "ec70e521-f1ed-4c28-a5fd-f755f02bb4af",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Example 1"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Example 1"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936218348,
        "id": "207b408b-ed2c-4318-9995-e296f7ffab14",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936218348,
        "parent_id": "ec70e521-f1ed-4c28-a5fd-f755f02bb4af",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "enum color{ RED, GREEN, BLUE };\n\nvoid printColor(enum color chosenColor)\n{\n    const char *color_name = \"Invalid color\";\n    switch (chosenColor)\n    {\n       case RED:\n         color_name = \"RED\";\n         break;\n       \n       case GREEN:\n        color_name = \"GREEN\";\n        break;    \n\n       case BLUE:\n        color_name = \"BLUE\";\n        break;\n    }\n    printf(\"%s\\n\", color_name);\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "enum color{ RED, GREEN, BLUE };\n\nvoid printColor(enum color chosenColor)\n{\n    const char *color_name = \"Invalid color\";\n    switch (chosenColor)\n    {\n       case RED:\n         color_name = \"RED\";\n         break;\n       \n       case GREEN:\n        color_name = \"GREEN\";\n        break;    \n\n       case BLUE:\n        color_name = \"BLUE\";\n        break;\n    }\n    printf(\"%s\\n\", color_name);\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936218349,
        "id": "7fcd64a8-201f-4e6e-b9b8-e9084c1f0243",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936218349,
        "parent_id": "ec70e521-f1ed-4c28-a5fd-f755f02bb4af",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "With a main function defined as follows (for example):"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "With a main function defined as follows (for example):"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936218349,
        "id": "7b1df669-d894-435c-a4a4-e57cb98c7ab5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936218349,
        "parent_id": "ec70e521-f1ed-4c28-a5fd-f755f02bb4af",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int main(){\n    enum color chosenColor;\n    printf(\"Enter a number between 0 and 2\");\n    scanf(\"%d\", (int*)\u0026chosenColor);\n    printColor(chosenColor);\n    return 0;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int main(){\n    enum color chosenColor;\n    printf(\"Enter a number between 0 and 2\");\n    scanf(\"%d\", (int*)\u0026chosenColor);\n    printColor(chosenColor);\n    return 0;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936218349,
        "id": "74fb644c-6943-467f-b026-68c235ac4a0f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936218349,
        "parent_id": "ec70e521-f1ed-4c28-a5fd-f755f02bb4af",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Example 2"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Example 2"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936218349,
        "id": "48cecdee-846f-4c11-93c3-8bb6cdb00d6c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936218349,
        "parent_id": "ec70e521-f1ed-4c28-a5fd-f755f02bb4af",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "(This example uses designated initializers which are standardized since C99.)"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "(This example uses designated initializers which are standardized since C99.)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936218349,
        "id": "9941e788-755a-451c-8c0e-82065384dba2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936218349,
        "parent_id": "ec70e521-f1ed-4c28-a5fd-f755f02bb4af",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "enum week{ MON, TUE, WED, THU, FRI, SAT, SUN };\n     \nstatic const char* const dow[] = { \n  [MON] = \"Mon\", [TUE] = \"Tue\", [WED] = \"Wed\", \n  [THU] = \"Thu\", [FRI] = \"Fri\", [SAT] = \"Sat\", [SUN] = \"Sun\" };\n    \nvoid printDayOfWeek(enum week day) \n{ \n   printf(\"%s\\n\", dow[day]);\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "enum week{ MON, TUE, WED, THU, FRI, SAT, SUN };\n     \nstatic const char* const dow[] = { \n  [MON] = \"Mon\", [TUE] = \"Tue\", [WED] = \"Wed\", \n  [THU] = \"Thu\", [FRI] = \"Fri\", [SAT] = \"Sat\", [SUN] = \"Sun\" };\n    \nvoid printDayOfWeek(enum week day) \n{ \n   printf(\"%s\\n\", dow[day]);\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936218349,
        "id": "da44098b-d989-4272-b7f9-e5484c2c5491",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936218349,
        "parent_id": "ec70e521-f1ed-4c28-a5fd-f755f02bb4af",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The same example using range checking:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The same example using range checking:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936218349,
        "id": "63994a0b-07cd-4978-bbb9-a312369724d2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936218349,
        "parent_id": "ec70e521-f1ed-4c28-a5fd-f755f02bb4af",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "enum week{ DOW_INVALID = -1, \n  MON, TUE, WED, THU, FRI, SAT, SUN, \n  DOW_MAX };\n     \nstatic const char* const dow[] = { \n  [MON] = \"Mon\", [TUE] = \"Tue\", [WED] = \"Wed\", \n  [THU] = \"Thu\", [FRI] = \"Fri\", [SAT] = \"Sat\", [SUN] = \"Sun\" };\n    \nvoid printDayOfWeek(enum week day) \n{ \n   assert(day \u003e DOW_INVALID \u0026\u0026 day \u003c DOW_MAX);\n   printf(\"%s\\n\", dow[day]);\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "enum week{ DOW_INVALID = -1, \n  MON, TUE, WED, THU, FRI, SAT, SUN, \n  DOW_MAX };\n     \nstatic const char* const dow[] = { \n  [MON] = \"Mon\", [TUE] = \"Tue\", [WED] = \"Wed\", \n  [THU] = \"Thu\", [FRI] = \"Fri\", [SAT] = \"Sat\", [SUN] = \"Sun\" };\n    \nvoid printDayOfWeek(enum week day) \n{ \n   assert(day \u003e DOW_INVALID \u0026\u0026 day \u003c DOW_MAX);\n   printf(\"%s\\n\", dow[day]);\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "Simple Enumeration",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}