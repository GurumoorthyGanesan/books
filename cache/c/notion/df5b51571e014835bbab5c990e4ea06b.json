{
  "ID": "df5b5157-1e01-4835-bbab-5c990e4ea06b",
  "Root": {
    "alive": true,
    "content": [
      "c5cbb9f7-ab65-46e8-9dc5-b63c5919e835",
      "13ecff36-0653-4c06-b9ce-38639ceacc61",
      "c941ad1e-4c1a-45c9-b24d-0b0eb1207357",
      "c6955544-1a8e-482a-bea2-f286a4b6f7fa",
      "e5700b3b-1cb2-453d-b3af-a5e0258e6715",
      "c976ce2e-2303-4776-ae4f-d07dd42811fc",
      "45f00311-74e5-461a-bdfb-682f34a3575e",
      "8199ded8-af29-4fdc-9373-ae1e982813c3",
      "24d2f21a-2c02-4c12-bb30-14ecb5f4f651",
      "34259cf1-0128-446a-a4cd-7eab148c53c3",
      "bfe831fc-112d-471d-b723-618d37ba9b84",
      "323c4c8e-2a38-4a13-8b51-2fc8827bc036",
      "f58cfb83-34e9-4677-8ef3-bfc0417fd07b",
      "9da2d307-2ffb-4848-b06b-b3508a026dbd",
      "c3c34a73-42e1-4418-8837-e84be0c25933",
      "abc14c6b-3537-4d83-9ad4-ffb2e92cc0c9",
      "e193d5c7-110c-4a55-a0c9-af3d5f323a97",
      "cd32f475-8196-4ba7-9381-b56e977c623e"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551935650449,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "df5b5157-1e01-4835-bbab-5c990e4ea06b",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551935650449,
    "parent_id": "218cbf42-b3ba-4b2a-bdab-e522009865b7",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Assignment Operators"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935650442,
        "id": "c5cbb9f7-ab65-46e8-9dc5-b63c5919e835",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935650442,
        "parent_id": "df5b5157-1e01-4835-bbab-5c990e4ea06b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Assigns the value of the right-hand operand to the storage location named by the left-hand operand, and returns the value."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Assigns the value of the right-hand operand to the storage location named by the left-hand operand, and returns the value."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935650444,
        "id": "13ecff36-0653-4c06-b9ce-38639ceacc61",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935650444,
        "parent_id": "df5b5157-1e01-4835-bbab-5c990e4ea06b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int x = 5;      /* Variable x holds the value 5. Returns 5. */ \nchar y = 'c';   /* Variable y holds the value 99. Returns 99 \n                 * (as the character 'c' is represented in the ASCII table with 99).\n                 */\nfloat z = 1.5;  /* variable z holds the value 1.5. Returns 1.5. */\nchar const* s = \"foo\"; /* Variable s holds the address of the first character of the string 'foo'. */"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int x = 5;      /* Variable x holds the value 5. Returns 5. */ \nchar y = 'c';   /* Variable y holds the value 99. Returns 99 \n                 * (as the character 'c' is represented in the ASCII table with 99).\n                 */\nfloat z = 1.5;  /* variable z holds the value 1.5. Returns 1.5. */\nchar const* s = \"foo\"; /* Variable s holds the address of the first character of the string 'foo'. */",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935650445,
        "id": "c941ad1e-4c1a-45c9-b24d-0b0eb1207357",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935650445,
        "parent_id": "df5b5157-1e01-4835-bbab-5c990e4ea06b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Several arithmetical operations have a "
            ],
            [
              "compound assignment",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " operator."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Several arithmetical operations have a "
          },
          {
            "Text": "compound assignment",
            "AttrFlags": 4
          },
          {
            "Text": " operator."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935650445,
        "id": "c6955544-1a8e-482a-bea2-f286a4b6f7fa",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935650445,
        "parent_id": "df5b5157-1e01-4835-bbab-5c990e4ea06b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "a += b  /* equal to: a = a + b */\na -= b  /* equal to: a = a - b */\na *= b  /* equal to: a = a * b */\na /= b  /* equal to: a = a / b */\na %= b  /* equal to: a = a % b */\na \u0026= b  /* equal to: a = a \u0026 b */\na |= b  /* equal to: a = a | b */\na ^= b  /* equal to: a = a ^ b */\na \u003c\u003c= b /* equal to: a = a \u003c\u003c b */\na \u003e\u003e= b /* equal to: a = a \u003e\u003e b */"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "a += b  /* equal to: a = a + b */\na -= b  /* equal to: a = a - b */\na *= b  /* equal to: a = a * b */\na /= b  /* equal to: a = a / b */\na %= b  /* equal to: a = a % b */\na \u0026= b  /* equal to: a = a \u0026 b */\na |= b  /* equal to: a = a | b */\na ^= b  /* equal to: a = a ^ b */\na \u003c\u003c= b /* equal to: a = a \u003c\u003c b */\na \u003e\u003e= b /* equal to: a = a \u003e\u003e b */",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935650445,
        "id": "e5700b3b-1cb2-453d-b3af-a5e0258e6715",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935650445,
        "parent_id": "df5b5157-1e01-4835-bbab-5c990e4ea06b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "One important feature of these compound assignments is that the expression on the left hand side ("
            ],
            [
              "a",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") is only evaluated once. E.g if "
            ],
            [
              "p",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is a pointer"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "One important feature of these compound assignments is that the expression on the left hand side ("
          },
          {
            "Text": "a",
            "AttrFlags": 2
          },
          {
            "Text": ") is only evaluated once. E.g if "
          },
          {
            "Text": "p",
            "AttrFlags": 2
          },
          {
            "Text": " is a pointer"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935650445,
        "id": "c976ce2e-2303-4776-ae4f-d07dd42811fc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935650445,
        "parent_id": "df5b5157-1e01-4835-bbab-5c990e4ea06b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "*p += 27;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "*p += 27;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935650445,
        "id": "45f00311-74e5-461a-bdfb-682f34a3575e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935650445,
        "parent_id": "df5b5157-1e01-4835-bbab-5c990e4ea06b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "dereferences "
            ],
            [
              "p",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " only once, whereas the following does so twice."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "dereferences "
          },
          {
            "Text": "p",
            "AttrFlags": 2
          },
          {
            "Text": " only once, whereas the following does so twice."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935650445,
        "id": "8199ded8-af29-4fdc-9373-ae1e982813c3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935650445,
        "parent_id": "df5b5157-1e01-4835-bbab-5c990e4ea06b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "*p = *p + 27;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "*p = *p + 27;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935650446,
        "id": "24d2f21a-2c02-4c12-bb30-14ecb5f4f651",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935650446,
        "parent_id": "df5b5157-1e01-4835-bbab-5c990e4ea06b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It should also be noted that the result of an assignment such as "
            ],
            [
              "a = b",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is what is known as an "
            ],
            [
              "rvalue",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ". Thus, the assignment actually has a value which can then be assigned to another variable. This allows the chaining of assignments to set multiple variables in a single statement."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It should also be noted that the result of an assignment such as "
          },
          {
            "Text": "a = b",
            "AttrFlags": 2
          },
          {
            "Text": " is what is known as an "
          },
          {
            "Text": "rvalue",
            "AttrFlags": 4
          },
          {
            "Text": ". Thus, the assignment actually has a value which can then be assigned to another variable. This allows the chaining of assignments to set multiple variables in a single statement."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935650446,
        "id": "34259cf1-0128-446a-a4cd-7eab148c53c3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935650446,
        "parent_id": "df5b5157-1e01-4835-bbab-5c990e4ea06b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This "
            ],
            [
              "rvalue",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " can be used in the controlling expressions of "
            ],
            [
              "if",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " statements (or loops or "
            ],
            [
              "switch",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " statements) that guard some code on the result of another expression or function call. For example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This "
          },
          {
            "Text": "rvalue",
            "AttrFlags": 4
          },
          {
            "Text": " can be used in the controlling expressions of "
          },
          {
            "Text": "if",
            "AttrFlags": 2
          },
          {
            "Text": " statements (or loops or "
          },
          {
            "Text": "switch",
            "AttrFlags": 2
          },
          {
            "Text": " statements) that guard some code on the result of another expression or function call. For example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935650446,
        "id": "bfe831fc-112d-471d-b723-618d37ba9b84",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935650446,
        "parent_id": "df5b5157-1e01-4835-bbab-5c990e4ea06b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "char *buffer;\nif ((buffer = malloc(1024)) != NULL)\n{\n    /* do something with buffer */\n    free(buffer);\n}\nelse\n{\n    /* report allocation failure */\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "char *buffer;\nif ((buffer = malloc(1024)) != NULL)\n{\n    /* do something with buffer */\n    free(buffer);\n}\nelse\n{\n    /* report allocation failure */\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935650446,
        "id": "323c4c8e-2a38-4a13-8b51-2fc8827bc036",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935650446,
        "parent_id": "df5b5157-1e01-4835-bbab-5c990e4ea06b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Because of this, care must be taken to avoid a common typo which can lead to mysterious bugs."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Because of this, care must be taken to avoid a common typo which can lead to mysterious bugs."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935650446,
        "id": "f58cfb83-34e9-4677-8ef3-bfc0417fd07b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935650446,
        "parent_id": "df5b5157-1e01-4835-bbab-5c990e4ea06b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int a = 2;\n/* ... */\nif (a = 1)\n    /* Delete all files on my hard drive */"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int a = 2;\n/* ... */\nif (a = 1)\n    /* Delete all files on my hard drive */",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935650448,
        "id": "9da2d307-2ffb-4848-b06b-b3508a026dbd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935650448,
        "parent_id": "df5b5157-1e01-4835-bbab-5c990e4ea06b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This will have disastrous results, as "
            ],
            [
              "a = 1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will always evaluate to "
            ],
            [
              "1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and thus the controlling expression of the "
            ],
            [
              "if",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " statement will always be true (read more about this common pitfall "
            ],
            [
              "here",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c/2006/common-pitfalls/7886/mistakenly-writing-instead-of-when-comparing#t=201704191400115596587"
                ]
              ]
            ],
            [
              "). The author almost certainly meant to use the equality operator ("
            ],
            [
              "==",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") as shown below:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This will have disastrous results, as "
          },
          {
            "Text": "a = 1",
            "AttrFlags": 2
          },
          {
            "Text": " will always evaluate to "
          },
          {
            "Text": "1",
            "AttrFlags": 2
          },
          {
            "Text": " and thus the controlling expression of the "
          },
          {
            "Text": "if",
            "AttrFlags": 2
          },
          {
            "Text": " statement will always be true (read more about this common pitfall "
          },
          {
            "Text": "here",
            "Link": "http://stackoverflow.com/documentation/c/2006/common-pitfalls/7886/mistakenly-writing-instead-of-when-comparing#t=201704191400115596587"
          },
          {
            "Text": "). The author almost certainly meant to use the equality operator ("
          },
          {
            "Text": "==",
            "AttrFlags": 2
          },
          {
            "Text": ") as shown below:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935650448,
        "id": "c3c34a73-42e1-4418-8837-e84be0c25933",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935650448,
        "parent_id": "df5b5157-1e01-4835-bbab-5c990e4ea06b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int a = 2;\n/* ... */\nif (a == 1)\n    /* Delete all files on my hard drive */"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int a = 2;\n/* ... */\nif (a == 1)\n    /* Delete all files on my hard drive */",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935650448,
        "id": "abc14c6b-3537-4d83-9ad4-ffb2e92cc0c9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935650448,
        "parent_id": "df5b5157-1e01-4835-bbab-5c990e4ea06b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Operator Associativity",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Operator Associativity",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935650449,
        "id": "e193d5c7-110c-4a55-a0c9-af3d5f323a97",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935650449,
        "parent_id": "df5b5157-1e01-4835-bbab-5c990e4ea06b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int a, b = 1, c = 2;\na = b = c;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int a, b = 1, c = 2;\na = b = c;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935650449,
        "id": "cd32f475-8196-4ba7-9381-b56e977c623e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935650449,
        "parent_id": "df5b5157-1e01-4835-bbab-5c990e4ea06b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This assigns "
            ],
            [
              "c",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to "
            ],
            [
              "b",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", which returns "
            ],
            [
              "b",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", which is than assigned to "
            ],
            [
              "a",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". This happens because all assignment-operators have right associativity, that means the rightmost operation in the expression is evaluated first, and proceeds from right to left."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This assigns "
          },
          {
            "Text": "c",
            "AttrFlags": 2
          },
          {
            "Text": " to "
          },
          {
            "Text": "b",
            "AttrFlags": 2
          },
          {
            "Text": ", which returns "
          },
          {
            "Text": "b",
            "AttrFlags": 2
          },
          {
            "Text": ", which is than assigned to "
          },
          {
            "Text": "a",
            "AttrFlags": 2
          },
          {
            "Text": ". This happens because all assignment-operators have right associativity, that means the rightmost operation in the expression is evaluated first, and proceeds from right to left."
          }
        ]
      }
    ],
    "title": "Assignment Operators",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}