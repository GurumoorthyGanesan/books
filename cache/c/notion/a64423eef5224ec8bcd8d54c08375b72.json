{
  "ID": "a64423ee-f522-4ec8-bcd8-d54c08375b72",
  "Root": {
    "alive": true,
    "content": [
      "5f13910f-4b6c-4665-9feb-0907717c0b4f",
      "ec9d27d6-825a-4a34-87a3-4d6df524d9fb",
      "fbb8e8db-087f-4724-8116-f692a4e387b3",
      "9d545ef2-0859-4d0e-8291-c27be93bd541",
      "46845862-f77a-46b6-84c9-c81286918f63",
      "851cd339-58a2-410b-81a7-90c7fe888a8b",
      "f7c07614-5f74-426a-8485-06dc1d30a52e",
      "039d6f9a-16e0-4d21-82ad-fd3ffa8d4b6b",
      "a87fdd8b-ff6c-4832-8a32-fc1d8821f285"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551936212270,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "a64423ee-f522-4ec8-bcd8-d54c08375b72",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551936212270,
    "parent_id": "1e14553b-8aea-44fb-a0fe-fbc893ff529a",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Polymorphic behaviour with void pointers"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936212268,
        "id": "5f13910f-4b6c-4665-9feb-0907717c0b4f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936212268,
        "parent_id": "a64423ee-f522-4ec8-bcd8-d54c08375b72",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "qsort()",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://man7.org/linux/man-pages/man3/qsort.3.html"
                ]
              ]
            ],
            [
              " standard library function is a good example of how one can use void pointers to make a single function operate on a large variety of different types."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "qsort()",
            "AttrFlags": 2,
            "Link": "http://man7.org/linux/man-pages/man3/qsort.3.html"
          },
          {
            "Text": " standard library function is a good example of how one can use void pointers to make a single function operate on a large variety of different types."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936212269,
        "id": "ec9d27d6-825a-4a34-87a3-4d6df524d9fb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936212269,
        "parent_id": "a64423ee-f522-4ec8-bcd8-d54c08375b72",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "void qsort (\n    void *base,                                 /* Array to be sorted */\n    size_t num,                                 /* Number of elements in array */\n    size_t size,                                /* Size in bytes of each element */\n    int (*compar)(const void *, const void *)); /* Comparison function for two elements */"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "void qsort (\n    void *base,                                 /* Array to be sorted */\n    size_t num,                                 /* Number of elements in array */\n    size_t size,                                /* Size in bytes of each element */\n    int (*compar)(const void *, const void *)); /* Comparison function for two elements */",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936212269,
        "id": "fbb8e8db-087f-4724-8116-f692a4e387b3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936212269,
        "parent_id": "a64423ee-f522-4ec8-bcd8-d54c08375b72",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The array to be sorted is passed as a void pointer, so an array of any type of element can be operated on. The next two arguments tell "
            ],
            [
              "qsort()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " how many elements it should expect in the array, and how large, in bytes, each element is."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The array to be sorted is passed as a void pointer, so an array of any type of element can be operated on. The next two arguments tell "
          },
          {
            "Text": "qsort()",
            "AttrFlags": 2
          },
          {
            "Text": " how many elements it should expect in the array, and how large, in bytes, each element is."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936212269,
        "id": "9d545ef2-0859-4d0e-8291-c27be93bd541",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936212269,
        "parent_id": "a64423ee-f522-4ec8-bcd8-d54c08375b72",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The last argument is a function pointer to a comparison function which itself takes two void pointers. By making the caller provide this function, "
            ],
            [
              "qsort()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can effectively sort elements of any type."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The last argument is a function pointer to a comparison function which itself takes two void pointers. By making the caller provide this function, "
          },
          {
            "Text": "qsort()",
            "AttrFlags": 2
          },
          {
            "Text": " can effectively sort elements of any type."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936212269,
        "id": "46845862-f77a-46b6-84c9-c81286918f63",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936212269,
        "parent_id": "a64423ee-f522-4ec8-bcd8-d54c08375b72",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Here’s an example of such a comparison function, for comparing floats. Note that any comparison function passed to "
            ],
            [
              "qsort()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " needs to have this type signature. The way it is made polymorphic is by casting the void pointer arguments to pointers of the type of element we wish to compare."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Here’s an example of such a comparison function, for comparing floats. Note that any comparison function passed to "
          },
          {
            "Text": "qsort()",
            "AttrFlags": 2
          },
          {
            "Text": " needs to have this type signature. The way it is made polymorphic is by casting the void pointer arguments to pointers of the type of element we wish to compare."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936212269,
        "id": "851cd339-58a2-410b-81a7-90c7fe888a8b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936212269,
        "parent_id": "a64423ee-f522-4ec8-bcd8-d54c08375b72",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int compare_floats(const void *a, const void *b)\n{\n    float fa = *((float *)a);\n    float fb = *((float *)b);\n    if (fa \u003c fb)\n        return -1;\n    if (fa \u003e fb)\n        return 1;\n    return 0;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int compare_floats(const void *a, const void *b)\n{\n    float fa = *((float *)a);\n    float fb = *((float *)b);\n    if (fa \u003c fb)\n        return -1;\n    if (fa \u003e fb)\n        return 1;\n    return 0;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936212270,
        "id": "f7c07614-5f74-426a-8485-06dc1d30a52e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936212270,
        "parent_id": "a64423ee-f522-4ec8-bcd8-d54c08375b72",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Since we know that qsort will use this function to compare floats, we cast the void pointer arguments back to float pointers before dereferencing them."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Since we know that qsort will use this function to compare floats, we cast the void pointer arguments back to float pointers before dereferencing them."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936212270,
        "id": "039d6f9a-16e0-4d21-82ad-fd3ffa8d4b6b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936212270,
        "parent_id": "a64423ee-f522-4ec8-bcd8-d54c08375b72",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Now, the usage of the polymorphic function qsort on an array “array” with length “len” is very simple:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Now, the usage of the polymorphic function qsort on an array “array” with length “len” is very simple:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936212270,
        "id": "a87fdd8b-ff6c-4832-8a32-fc1d8821f285",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936212270,
        "parent_id": "a64423ee-f522-4ec8-bcd8-d54c08375b72",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "qsort(array, len, sizeof(array[0]), compare_floats);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "qsort(array, len, sizeof(array[0]), compare_floats);",
        "code_language": "Plain Text"
      }
    ],
    "title": "Polymorphic behaviour with void pointers",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}