{
  "ID": "9d97dd32-ac7d-4ffd-a632-a99923ce79c9",
  "Root": {
    "alive": true,
    "content": [
      "25b42b20-0a83-43ff-871e-3839244ada17",
      "93e98bdc-2326-4bdd-9df8-2cff4c6a5d8e",
      "3c227e02-546e-4809-9ae5-83937791f5e1",
      "4f588b4c-acfc-44af-bd64-9eb63db854ff",
      "a0a388a4-8c1e-4ee3-a2e9-5240048648cf",
      "807db5d2-58b5-4c29-896f-32e1d18aa491"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551935747276,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "9d97dd32-ac7d-4ffd-a632-a99923ce79c9",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551935747276,
    "parent_id": "44b99e73-a03b-41cc-b542-2de7e97ca081",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Permuted Congruential Generator"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935747272,
        "id": "25b42b20-0a83-43ff-871e-3839244ada17",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935747272,
        "parent_id": "9d97dd32-ac7d-4ffd-a632-a99923ce79c9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Here’s a standalone random number generator that doesn’t rely on "
            ],
            [
              "rand()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or similar library functions."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Here’s a standalone random number generator that doesn’t rely on "
          },
          {
            "Text": "rand()",
            "AttrFlags": 2
          },
          {
            "Text": " or similar library functions."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935747274,
        "id": "93e98bdc-2326-4bdd-9df8-2cff4c6a5d8e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935747274,
        "parent_id": "9d97dd32-ac7d-4ffd-a632-a99923ce79c9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Why would you want such a thing? Maybe you don’t trust your platform’s builtin random number generator, or maybe you want a reproducible source of randomness independent of any particular library implementation."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Why would you want such a thing? Maybe you don’t trust your platform’s builtin random number generator, or maybe you want a reproducible source of randomness independent of any particular library implementation."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935747276,
        "id": "3c227e02-546e-4809-9ae5-83937791f5e1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935747276,
        "parent_id": "9d97dd32-ac7d-4ffd-a632-a99923ce79c9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This code is PCG32 from "
            ],
            [
              "pcg-random.org",
              [
                [
                  "a",
                  "http://www.pcg-random.org/"
                ]
              ]
            ],
            [
              ", a modern, fast, general-purpose RNG with excellent statistical properties. It’s not cryptographically secure, so don’t use it for cryptography."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This code is PCG32 from "
          },
          {
            "Text": "pcg-random.org",
            "Link": "http://www.pcg-random.org/"
          },
          {
            "Text": ", a modern, fast, general-purpose RNG with excellent statistical properties. It’s not cryptographically secure, so don’t use it for cryptography."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935747276,
        "id": "4f588b4c-acfc-44af-bd64-9eb63db854ff",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935747276,
        "parent_id": "9d97dd32-ac7d-4ffd-a632-a99923ce79c9",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cstdint.h\u003e\n\n/* *Really* minimal PCG32 code / (c) 2014 M.E. O'Neill / pcg-random.org\n * Licensed under Apache License 2.0 (NO WARRANTY, etc. see website) */\n\ntypedef struct { uint64_t state;  uint64_t inc; } pcg32_random_t;\n\nuint32_t pcg32_random_r(pcg32_random_t* rng) {\n    uint64_t oldstate = rng-\u003estate;\n    /* Advance internal state */\n    rng-\u003estate = oldstate * 6364136223846793005ULL + (rng-\u003einc | 1);\n    /* Calculate output function (XSH RR), uses old state for max ILP */\n    uint32_t xorshifted = ((oldstate \u003e\u003e 18u) ^ oldstate) \u003e\u003e 27u;\n    uint32_t rot = oldstate \u003e\u003e 59u;\n    return (xorshifted \u003e\u003e rot) | (xorshifted \u003c\u003c ((-rot) \u0026 31));\n}\n\nvoid pcg32_srandom_r(pcg32_random_t* rng, uint64_t initstate, uint64_t initseq) {\n    rng-\u003estate = 0U;\n    rng-\u003einc = (initseq \u003c\u003c 1u) | 1u;\n    pcg32_random_r(rng);\n    rng-\u003estate += initstate;\n    pcg32_random_r(rng);\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cstdint.h\u003e\n\n/* *Really* minimal PCG32 code / (c) 2014 M.E. O'Neill / pcg-random.org\n * Licensed under Apache License 2.0 (NO WARRANTY, etc. see website) */\n\ntypedef struct { uint64_t state;  uint64_t inc; } pcg32_random_t;\n\nuint32_t pcg32_random_r(pcg32_random_t* rng) {\n    uint64_t oldstate = rng-\u003estate;\n    /* Advance internal state */\n    rng-\u003estate = oldstate * 6364136223846793005ULL + (rng-\u003einc | 1);\n    /* Calculate output function (XSH RR), uses old state for max ILP */\n    uint32_t xorshifted = ((oldstate \u003e\u003e 18u) ^ oldstate) \u003e\u003e 27u;\n    uint32_t rot = oldstate \u003e\u003e 59u;\n    return (xorshifted \u003e\u003e rot) | (xorshifted \u003c\u003c ((-rot) \u0026 31));\n}\n\nvoid pcg32_srandom_r(pcg32_random_t* rng, uint64_t initstate, uint64_t initseq) {\n    rng-\u003estate = 0U;\n    rng-\u003einc = (initseq \u003c\u003c 1u) | 1u;\n    pcg32_random_r(rng);\n    rng-\u003estate += initstate;\n    pcg32_random_r(rng);\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935747276,
        "id": "a0a388a4-8c1e-4ee3-a2e9-5240048648cf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935747276,
        "parent_id": "9d97dd32-ac7d-4ffd-a632-a99923ce79c9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "And here’s how to call it:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "And here’s how to call it:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935747276,
        "id": "807db5d2-58b5-4c29-896f-32e1d18aa491",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935747276,
        "parent_id": "9d97dd32-ac7d-4ffd-a632-a99923ce79c9",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cstdio.h\u003e\nint main(void) {\n    pcg32_random_t rng; /* RNG state */\n    int i;\n\n    /* Seed the RNG */\n    pcg32_srandom_r(\u0026rng, 42u, 54u);\n\n    /* Print some random 32-bit integers */\n    for (i = 0; i \u003c 6; i++)\n        printf(\"0x%08x\\n\", pcg32_random_r(\u0026rng));\n    \n    return 0;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cstdio.h\u003e\nint main(void) {\n    pcg32_random_t rng; /* RNG state */\n    int i;\n\n    /* Seed the RNG */\n    pcg32_srandom_r(\u0026rng, 42u, 54u);\n\n    /* Print some random 32-bit integers */\n    for (i = 0; i \u003c 6; i++)\n        printf(\"0x%08x\\n\", pcg32_random_r(\u0026rng));\n    \n    return 0;\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "Permuted Congruential Generator",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}