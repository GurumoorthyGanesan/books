{
  "ID": "02d08e7f-5450-4d5d-ad6b-2922af0243ef",
  "Root": {
    "alive": true,
    "content": [
      "88725fd7-85d2-4356-87cc-e0db6424f2e5",
      "b21cdbd8-0f97-4689-9564-eee00d5b350e",
      "67e2a173-5590-4d1b-b936-fb52ef933b8d",
      "f59fe1c9-5e51-43a8-880c-351fee033e4a",
      "1feaeddc-6306-4e93-8e58-3a429d829768",
      "851b5022-da3b-4da3-9c82-c3d9c380f008",
      "44b1ef24-3751-42f0-a2f0-c293c30f3ad4",
      "c62b1bad-32a2-48d6-b84c-f96f71fd9e98",
      "de0cf897-16b6-4076-8612-85768cc094b6",
      "fbae2093-2e61-41eb-98a4-2709cd95bafb",
      "7cc5d24e-1415-4aed-8adc-c4d85cfb35db",
      "c5f9e5d2-9aee-491a-87f5-373b6ca1ccfc",
      "a74e3448-a74f-4b75-8bab-e42799153674",
      "75aa47da-73b3-4405-949f-dc2c811fdc88",
      "1b7e9356-6078-41a1-a5ba-e9d5e6f78656",
      "998fae7c-2dea-4a94-b19a-0361cd78e6a5",
      "b226a33a-6393-4a4e-bd37-6e12d4fa3c91",
      "30165497-9db5-4b65-b175-84fc36d2beaa"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551936360429,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "02d08e7f-5450-4d5d-ad6b-2922af0243ef",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551936360429,
    "parent_id": "ce0d7992-bb1e-4e62-ab26-2f99a9a2f78d",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Recursive function missing out the base condition"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936360422,
        "id": "88725fd7-85d2-4356-87cc-e0db6424f2e5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936360422,
        "parent_id": "02d08e7f-5450-4d5d-ad6b-2922af0243ef",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Calculating the factorial of a number is a classic example of a recursive function."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Calculating the factorial of a number is a classic example of a recursive function."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936360422,
        "id": "b21cdbd8-0f97-4689-9564-eee00d5b350e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936360422,
        "parent_id": "02d08e7f-5450-4d5d-ad6b-2922af0243ef",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Missing the Base Condition:",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Missing the Base Condition:",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936360423,
        "id": "67e2a173-5590-4d1b-b936-fb52ef933b8d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936360423,
        "parent_id": "02d08e7f-5450-4d5d-ad6b-2922af0243ef",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cstdio.h\u003e\n\nint factorial(int n)\n{\n       return n * factorial(n - 1);\n}\n\nint main()\n{\n    printf(\"Factorial %d = %d\\n\", 3, factorial(3));\n    return 0;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cstdio.h\u003e\n\nint factorial(int n)\n{\n       return n * factorial(n - 1);\n}\n\nint main()\n{\n    printf(\"Factorial %d = %d\\n\", 3, factorial(3));\n    return 0;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936360423,
        "id": "f59fe1c9-5e51-43a8-880c-351fee033e4a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936360423,
        "parent_id": "02d08e7f-5450-4d5d-ad6b-2922af0243ef",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Typical output: "
            ],
            [
              "Segmentation fault: 11",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Typical output: "
          },
          {
            "Text": "Segmentation fault: 11",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936360423,
        "id": "1feaeddc-6306-4e93-8e58-3a429d829768",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936360423,
        "parent_id": "02d08e7f-5450-4d5d-ad6b-2922af0243ef",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The problem with this function is it would loop infinitely, causing a segmentation fault — it needs a base condition to stop the recursion."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The problem with this function is it would loop infinitely, causing a segmentation fault — it needs a base condition to stop the recursion."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936360424,
        "id": "851b5022-da3b-4da3-9c82-c3d9c380f008",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936360424,
        "parent_id": "02d08e7f-5450-4d5d-ad6b-2922af0243ef",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Base Condition Declared:",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Base Condition Declared:",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936360424,
        "id": "44b1ef24-3751-42f0-a2f0-c293c30f3ad4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936360424,
        "parent_id": "02d08e7f-5450-4d5d-ad6b-2922af0243ef",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cstdio.h\u003e\n\nint factorial(int n)\n{\n    if (n == 1) // Base Condition, very crucial in designing the recursive functions.\n    {\n       return 1;\n    }\n    else\n    {\n       return n * factorial(n - 1);\n    }\n}\n\nint main()\n{\n    printf(\"Factorial %d = %d\\n\", 3, factorial(3));\n    return 0;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cstdio.h\u003e\n\nint factorial(int n)\n{\n    if (n == 1) // Base Condition, very crucial in designing the recursive functions.\n    {\n       return 1;\n    }\n    else\n    {\n       return n * factorial(n - 1);\n    }\n}\n\nint main()\n{\n    printf(\"Factorial %d = %d\\n\", 3, factorial(3));\n    return 0;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936360424,
        "id": "c62b1bad-32a2-48d6-b84c-f96f71fd9e98",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936360424,
        "parent_id": "02d08e7f-5450-4d5d-ad6b-2922af0243ef",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Sample output"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Sample output"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936360424,
        "id": "de0cf897-16b6-4076-8612-85768cc094b6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936360424,
        "parent_id": "02d08e7f-5450-4d5d-ad6b-2922af0243ef",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Factorial 3 = 6"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Factorial 3 = 6",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936360424,
        "id": "fbae2093-2e61-41eb-98a4-2709cd95bafb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936360424,
        "parent_id": "02d08e7f-5450-4d5d-ad6b-2922af0243ef",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This function will terminate as soon as it hits the condition "
            ],
            [
              "n",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is equal to 1 (provided the initial value of "
            ],
            [
              "n",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is small enough — the upper bound is "
            ],
            [
              "12",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " when "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is a 32-bit quantity)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This function will terminate as soon as it hits the condition "
          },
          {
            "Text": "n",
            "AttrFlags": 2
          },
          {
            "Text": " is equal to 1 (provided the initial value of "
          },
          {
            "Text": "n",
            "AttrFlags": 2
          },
          {
            "Text": " is small enough — the upper bound is "
          },
          {
            "Text": "12",
            "AttrFlags": 2
          },
          {
            "Text": " when "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": " is a 32-bit quantity)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936360425,
        "id": "7cc5d24e-1415-4aed-8adc-c4d85cfb35db",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936360425,
        "parent_id": "02d08e7f-5450-4d5d-ad6b-2922af0243ef",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Rules to be followed:",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Rules to be followed:",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936360425,
        "id": "c5f9e5d2-9aee-491a-87f5-373b6ca1ccfc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936360425,
        "parent_id": "02d08e7f-5450-4d5d-ad6b-2922af0243ef",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Initialize the algorithm. Recursive programs often need a seed value to start with. This is accomplished either by using a parameter passed to the function or by providing a gateway function that is non-recursive but that sets up the seed values for the recursive calculation."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Initialize the algorithm. Recursive programs often need a seed value to start with. This is accomplished either by using a parameter passed to the function or by providing a gateway function that is non-recursive but that sets up the seed values for the recursive calculation."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936360425,
        "id": "a74e3448-a74f-4b75-8bab-e42799153674",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936360425,
        "parent_id": "02d08e7f-5450-4d5d-ad6b-2922af0243ef",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Check to see whether the current value(s) being processed match the base case. If so, process and return the value."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Check to see whether the current value(s) being processed match the base case. If so, process and return the value."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936360426,
        "id": "75aa47da-73b3-4405-949f-dc2c811fdc88",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936360426,
        "parent_id": "02d08e7f-5450-4d5d-ad6b-2922af0243ef",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Redefine the answer in terms of a smaller or simpler sub-problem or sub-problems."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Redefine the answer in terms of a smaller or simpler sub-problem or sub-problems."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936360426,
        "id": "1b7e9356-6078-41a1-a5ba-e9d5e6f78656",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936360426,
        "parent_id": "02d08e7f-5450-4d5d-ad6b-2922af0243ef",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Run the algorithm on the sub-problem."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Run the algorithm on the sub-problem."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936360426,
        "id": "998fae7c-2dea-4a94-b19a-0361cd78e6a5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936360426,
        "parent_id": "02d08e7f-5450-4d5d-ad6b-2922af0243ef",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Combine the results in the formulation of the answer."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Combine the results in the formulation of the answer."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936360426,
        "id": "b226a33a-6393-4a4e-bd37-6e12d4fa3c91",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936360426,
        "parent_id": "02d08e7f-5450-4d5d-ad6b-2922af0243ef",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Return the results."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Return the results."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936360429,
        "id": "30165497-9db5-4b65-b175-84fc36d2beaa",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936360429,
        "parent_id": "02d08e7f-5450-4d5d-ad6b-2922af0243ef",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Source: "
            ],
            [
              "Recursive Function",
              [
                [
                  "a",
                  "http://www.ibm.com/developerworks/library/l-recurs/"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Source: "
          },
          {
            "Text": "Recursive Function",
            "Link": "http://www.ibm.com/developerworks/library/l-recurs/"
          }
        ]
      }
    ],
    "title": "Recursive function missing out the base condition",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}