{
  "ID": "41d90243-26ff-4f25-a0d7-1fda62b23435",
  "Root": {
    "alive": true,
    "content": [
      "7363d0c3-0879-485e-b883-1727c0273c45",
      "6633da74-f905-47c9-a3e1-31bdc729bc53",
      "b12f0111-1c6b-411c-b65a-2218a1c3ec9e",
      "c6e0c5a5-ee6e-42c6-a66d-bc25c1a7ba4f",
      "6ce55205-9fde-4b05-a824-2507fe56fa71",
      "1b43f51f-6f76-4f15-9f20-0e26030b06b8",
      "a3e2a90f-0626-4a0e-9595-5a8d3ebc757e",
      "7cdadff4-6ce9-4907-a755-937f6dbc61e0",
      "aef93615-1b99-41b1-8a9b-2842d96e191b",
      "627e8b87-1410-4ac7-9f8c-a25bd579f3f9",
      "155980f6-7d6c-4c22-9ee0-3cf317f6497a",
      "33490dd5-9459-4b01-ab19-298f679f25d5",
      "d2129ae4-3a8b-427b-8cfd-b871dc0938db",
      "6efa2ddc-deb9-41b0-8fd9-07fe926de542",
      "be16a5fd-3a79-4748-bfdd-e26fc8412f7f"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551936277567,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "41d90243-26ff-4f25-a0d7-1fda62b23435",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551936277567,
    "parent_id": "fe373c8a-dc77-4fbb-9ceb-fe91a58a5732",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "The Preprocessor"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936277562,
        "id": "7363d0c3-0879-485e-b883-1727c0273c45",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936277562,
        "parent_id": "41d90243-26ff-4f25-a0d7-1fda62b23435",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Before the C compiler starts compiling a source code file, the file is processed in a preprocessing phase. This phase can be done by a separate program or be completely integrated in one executable. In any case, it is invoked automatically by the compiler before compilation proper begins. The preprocessing phase converts your source code into another source code or translation unit by applying textual replacements. You can think of it as a “modified” or “expanded” source code. That expanded source may exist as a real file in the file system, or it may only be stored in memory for a short time before being processed further."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Before the C compiler starts compiling a source code file, the file is processed in a preprocessing phase. This phase can be done by a separate program or be completely integrated in one executable. In any case, it is invoked automatically by the compiler before compilation proper begins. The preprocessing phase converts your source code into another source code or translation unit by applying textual replacements. You can think of it as a “modified” or “expanded” source code. That expanded source may exist as a real file in the file system, or it may only be stored in memory for a short time before being processed further."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936277564,
        "id": "6633da74-f905-47c9-a3e1-31bdc729bc53",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936277564,
        "parent_id": "41d90243-26ff-4f25-a0d7-1fda62b23435",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Preprocessor commands start with the pound sign (”#”). There are several preprocessor commands; two of the most important are:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Preprocessor commands start with the pound sign (”#”). There are several preprocessor commands; two of the most important are:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936277565,
        "id": "b12f0111-1c6b-411c-b65a-2218a1c3ec9e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936277565,
        "parent_id": "41d90243-26ff-4f25-a0d7-1fda62b23435",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Defines",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Defines",
            "AttrFlags": 1
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936277565,
        "id": "c6e0c5a5-ee6e-42c6-a66d-bc25c1a7ba4f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936277565,
        "parent_id": "41d90243-26ff-4f25-a0d7-1fda62b23435",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "`#define` is mainly used to define constants. For instance,\n\n    #define BIGNUM 1000000\n    int a = BIGNUM; \n\n becomes\n\n    int a = 1000000;\n\n   `#define` is used in this way so as to avoid having to explicitly write out some constant value in many different places in a source code file. This is important in case you need to change the constant value later on; it's much less bug-prone to change it once, in the `#define`, than to have to change it in multiple places scattered all over the code.\n\nBecause `#define` just does advanced search and replace, you can also declare macros. For instance:\n\n    #define ISTRUE(stm) do{stm = stm ? 1 : 0;}while(0)\n    // in the function:\n    a = x;\n    ISTRUE(a);\n\nbecomes:\n\n    // in the function:\n    a = x;\n    do {\n        a = a ? 1 : 0;\n    } while(0);\n\nAt first approximation, this effect is roughly the same as with inline functions, but the preprocessor doesn't provide type checking for `#define` macros. This is well known to be error-prone and their use necessitates great caution.\n\nAlso note here, that the preprocessor would also replace comments with a blanks as explained below."
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "`#define` is mainly used to define constants. For instance,\n\n    #define BIGNUM 1000000\n    int a = BIGNUM; \n\n becomes\n\n    int a = 1000000;\n\n   `#define` is used in this way so as to avoid having to explicitly write out some constant value in many different places in a source code file. This is important in case you need to change the constant value later on; it's much less bug-prone to change it once, in the `#define`, than to have to change it in multiple places scattered all over the code.\n\nBecause `#define` just does advanced search and replace, you can also declare macros. For instance:\n\n    #define ISTRUE(stm) do{stm = stm ? 1 : 0;}while(0)\n    // in the function:\n    a = x;\n    ISTRUE(a);\n\nbecomes:\n\n    // in the function:\n    a = x;\n    do {\n        a = a ? 1 : 0;\n    } while(0);\n\nAt first approximation, this effect is roughly the same as with inline functions, but the preprocessor doesn't provide type checking for `#define` macros. This is well known to be error-prone and their use necessitates great caution.\n\nAlso note here, that the preprocessor would also replace comments with a blanks as explained below.",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936277565,
        "id": "6ce55205-9fde-4b05-a824-2507fe56fa71",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936277565,
        "parent_id": "41d90243-26ff-4f25-a0d7-1fda62b23435",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Includes",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Includes",
            "AttrFlags": 1
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936277565,
        "id": "1b43f51f-6f76-4f15-9f20-0e26030b06b8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936277565,
        "parent_id": "41d90243-26ff-4f25-a0d7-1fda62b23435",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "#include",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is used to access function definitions defined outside of a source code file. For instance:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "#include",
            "AttrFlags": 2
          },
          {
            "Text": " is used to access function definitions defined outside of a source code file. For instance:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936277565,
        "id": "a3e2a90f-0626-4a0e-9595-5a8d3ebc757e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936277565,
        "parent_id": "41d90243-26ff-4f25-a0d7-1fda62b23435",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cstdio.h\u003e"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cstdio.h\u003e",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936277566,
        "id": "7cdadff4-6ce9-4907-a755-937f6dbc61e0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936277566,
        "parent_id": "41d90243-26ff-4f25-a0d7-1fda62b23435",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "causes the preprocessor to paste the contents of "
            ],
            [
              "\u003cstdio.h\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " into the source code file at the location of the "
            ],
            [
              "#include",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " statement before it gets compiled. "
            ],
            [
              "#include",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is almost always used to include header files, which are files which mainly contain function declarations and "
            ],
            [
              "#define",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " statements. In this case, we use "
            ],
            [
              "#include",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in order to be able to use functions such as "
            ],
            [
              "printf",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "scanf",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", whose declarations are located in the file "
            ],
            [
              "stdio.h",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". C compilers do not allow you to use a function unless it has previously been declared or defined in that file; "
            ],
            [
              "#include",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " statements are thus the way to re-use previously-written code in your C programs."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "causes the preprocessor to paste the contents of "
          },
          {
            "Text": "\u003cstdio.h\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " into the source code file at the location of the "
          },
          {
            "Text": "#include",
            "AttrFlags": 2
          },
          {
            "Text": " statement before it gets compiled. "
          },
          {
            "Text": "#include",
            "AttrFlags": 2
          },
          {
            "Text": " is almost always used to include header files, which are files which mainly contain function declarations and "
          },
          {
            "Text": "#define",
            "AttrFlags": 2
          },
          {
            "Text": " statements. In this case, we use "
          },
          {
            "Text": "#include",
            "AttrFlags": 2
          },
          {
            "Text": " in order to be able to use functions such as "
          },
          {
            "Text": "printf",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "scanf",
            "AttrFlags": 2
          },
          {
            "Text": ", whose declarations are located in the file "
          },
          {
            "Text": "stdio.h",
            "AttrFlags": 2
          },
          {
            "Text": ". C compilers do not allow you to use a function unless it has previously been declared or defined in that file; "
          },
          {
            "Text": "#include",
            "AttrFlags": 2
          },
          {
            "Text": " statements are thus the way to re-use previously-written code in your C programs."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936277566,
        "id": "aef93615-1b99-41b1-8a9b-2842d96e191b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936277566,
        "parent_id": "41d90243-26ff-4f25-a0d7-1fda62b23435",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Logic operations",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Logic operations",
            "AttrFlags": 1
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936277566,
        "id": "627e8b87-1410-4ac7-9f8c-a25bd579f3f9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936277566,
        "parent_id": "41d90243-26ff-4f25-a0d7-1fda62b23435",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#if defined A || defined B\n   variable = another_variable + 1;\n   #else\n   variable = another_variable * 2;\n   #endif\n\n will be changed to:\n\n   variable = another_variable + 1;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#if defined A || defined B\n   variable = another_variable + 1;\n   #else\n   variable = another_variable * 2;\n   #endif\n\n will be changed to:\n\n   variable = another_variable + 1;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936277566,
        "id": "155980f6-7d6c-4c22-9ee0-3cf317f6497a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936277566,
        "parent_id": "41d90243-26ff-4f25-a0d7-1fda62b23435",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "if A or B were defined somewhere in the project before. If this is not the case, of course the preprocessor will do this:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "if A or B were defined somewhere in the project before. If this is not the case, of course the preprocessor will do this:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936277567,
        "id": "33490dd5-9459-4b01-ab19-298f679f25d5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936277567,
        "parent_id": "41d90243-26ff-4f25-a0d7-1fda62b23435",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "variable = another_variable * 2;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "variable = another_variable * 2;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936277567,
        "id": "d2129ae4-3a8b-427b-8cfd-b871dc0938db",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936277567,
        "parent_id": "41d90243-26ff-4f25-a0d7-1fda62b23435",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This is often used for code, that runs on different systems or compiles on different compilers. Since there are global defines, that are compiler/system specific you can test on those defines and always let the compiler just use the code he will compile for sure."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This is often used for code, that runs on different systems or compiles on different compilers. Since there are global defines, that are compiler/system specific you can test on those defines and always let the compiler just use the code he will compile for sure."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936277567,
        "id": "6efa2ddc-deb9-41b0-8fd9-07fe926de542",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936277567,
        "parent_id": "41d90243-26ff-4f25-a0d7-1fda62b23435",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Comments",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Comments",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936277567,
        "id": "be16a5fd-3a79-4748-bfdd-e26fc8412f7f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936277567,
        "parent_id": "41d90243-26ff-4f25-a0d7-1fda62b23435",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The Preprocessor replaces all comments in the source file by single spaces. Comments are indicated by "
            ],
            [
              "//",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " up to the end of the line, or a combination of opening "
            ],
            [
              "/*",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and closing "
            ],
            [
              "*/",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " comment brackets."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The Preprocessor replaces all comments in the source file by single spaces. Comments are indicated by "
          },
          {
            "Text": "//",
            "AttrFlags": 2
          },
          {
            "Text": " up to the end of the line, or a combination of opening "
          },
          {
            "Text": "/*",
            "AttrFlags": 2
          },
          {
            "Text": " and closing "
          },
          {
            "Text": "*/",
            "AttrFlags": 2
          },
          {
            "Text": " comment brackets."
          }
        ]
      }
    ],
    "title": "The Preprocessor",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}