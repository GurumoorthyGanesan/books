{
  "ID": "74582a18-e34c-43e8-a305-152e66f02077",
  "Root": {
    "alive": true,
    "content": [
      "9ec1a89e-17fc-43a8-ab7f-93e91bfc4ac4",
      "0d7ef5ca-bbcc-4fc3-93f8-a84d6e31fc61",
      "85771eea-7f48-42fb-8843-516f284e441b",
      "1bfc5993-681e-4dc4-b0e9-4c0660699452",
      "4547c8ee-2c5e-41a4-8edc-70ea885031b8",
      "3d03bd10-4fb0-47c8-aabd-6b03454bf9f4",
      "515591f3-1afc-4338-836f-ae2e7eac037c",
      "ba5d8724-5563-43fd-82b4-4b19d073ca96",
      "fbff277c-b7a0-49a8-ae17-11c0bab2056d",
      "8380169e-2706-4671-886a-60dcbd471830",
      "b2ccd29f-6256-4677-9e91-913f39a58c3a",
      "0673d00b-dd5d-4f6e-8048-cd7e77adff75",
      "fd409a47-60a0-40e1-8e8c-427cf0eb2345"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551937283253,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "74582a18-e34c-43e8-a305-152e66f02077",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551937283253,
    "parent_id": "52978246-4aff-47a0-915a-a90feded64cd",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "PrePost IncrementDecrement operators"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551937283247,
        "id": "9ec1a89e-17fc-43a8-ab7f-93e91bfc4ac4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551937283247,
        "parent_id": "74582a18-e34c-43e8-a305-152e66f02077",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In C, there are two unary operators - ‘++’ and ‘–’ that are very common source of confusion. The operator "
            ],
            [
              "++",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is called the "
            ],
            [
              "increment operator",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " and the operator "
            ],
            [
              "--",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is called the "
            ],
            [
              "decrement operator",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ". Both of them can be used used in either "
            ],
            [
              "prefix",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " form or "
            ],
            [
              "postfix",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " form. The syntax for prefix form for "
            ],
            [
              "++",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " operator is "
            ],
            [
              "++operand",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and the syntax for postfix form is "
            ],
            [
              "operand++",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". When used in the prefix form, the operand is incremented first by "
            ],
            [
              "1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and the resultant value of the operand is used in the evaluation of the expression. Consider the following example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In C, there are two unary operators - ‘++’ and ‘–’ that are very common source of confusion. The operator "
          },
          {
            "Text": "++",
            "AttrFlags": 2
          },
          {
            "Text": " is called the "
          },
          {
            "Text": "increment operator",
            "AttrFlags": 4
          },
          {
            "Text": " and the operator "
          },
          {
            "Text": "--",
            "AttrFlags": 2
          },
          {
            "Text": " is called the "
          },
          {
            "Text": "decrement operator",
            "AttrFlags": 4
          },
          {
            "Text": ". Both of them can be used used in either "
          },
          {
            "Text": "prefix",
            "AttrFlags": 4
          },
          {
            "Text": " form or "
          },
          {
            "Text": "postfix",
            "AttrFlags": 4
          },
          {
            "Text": " form. The syntax for prefix form for "
          },
          {
            "Text": "++",
            "AttrFlags": 2
          },
          {
            "Text": " operator is "
          },
          {
            "Text": "++operand",
            "AttrFlags": 2
          },
          {
            "Text": " and the syntax for postfix form is "
          },
          {
            "Text": "operand++",
            "AttrFlags": 2
          },
          {
            "Text": ". When used in the prefix form, the operand is incremented first by "
          },
          {
            "Text": "1",
            "AttrFlags": 2
          },
          {
            "Text": " and the resultant value of the operand is used in the evaluation of the expression. Consider the following example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551937283250,
        "id": "0d7ef5ca-bbcc-4fc3-93f8-a84d6e31fc61",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551937283250,
        "parent_id": "74582a18-e34c-43e8-a305-152e66f02077",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int n, x = 5;\nn = ++x; /* x is incremented  by 1(x=6), and result is assigned to n(6) */\n         /* this is a short form for two statements: */\n         /* x = x + 1; */ \n         /* n = x ; */"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int n, x = 5;\nn = ++x; /* x is incremented  by 1(x=6), and result is assigned to n(6) */\n         /* this is a short form for two statements: */\n         /* x = x + 1; */ \n         /* n = x ; */",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551937283250,
        "id": "85771eea-7f48-42fb-8843-516f284e441b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551937283250,
        "parent_id": "74582a18-e34c-43e8-a305-152e66f02077",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When used in the postfix form, the operand’s current value is used in the expression and then the value of the operand is incremented by "
            ],
            [
              "1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Consider the following example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When used in the postfix form, the operand’s current value is used in the expression and then the value of the operand is incremented by "
          },
          {
            "Text": "1",
            "AttrFlags": 2
          },
          {
            "Text": ". Consider the following example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551937283250,
        "id": "1bfc5993-681e-4dc4-b0e9-4c0660699452",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551937283250,
        "parent_id": "74582a18-e34c-43e8-a305-152e66f02077",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int n, x = 5;\nn = x++; /* value of x(5) is assigned first to n(5), and then x is incremented by 1; x(6) */\n         /* this is a short form for two statements: */\n         /* n = x; */\n         /* x = x + 1; */"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int n, x = 5;\nn = x++; /* value of x(5) is assigned first to n(5), and then x is incremented by 1; x(6) */\n         /* this is a short form for two statements: */\n         /* n = x; */\n         /* x = x + 1; */",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551937283250,
        "id": "4547c8ee-2c5e-41a4-8edc-70ea885031b8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551937283250,
        "parent_id": "74582a18-e34c-43e8-a305-152e66f02077",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The working of the decrement operator "
            ],
            [
              "--",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can be understood similarly."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The working of the decrement operator "
          },
          {
            "Text": "--",
            "AttrFlags": 2
          },
          {
            "Text": " can be understood similarly."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551937283250,
        "id": "3d03bd10-4fb0-47c8-aabd-6b03454bf9f4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551937283250,
        "parent_id": "74582a18-e34c-43e8-a305-152e66f02077",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The following code demonstrates what each one does"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The following code demonstrates what each one does"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551937283250,
        "id": "515591f3-1afc-4338-836f-ae2e7eac037c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551937283250,
        "parent_id": "74582a18-e34c-43e8-a305-152e66f02077",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int main()\n{\n    int a, b, x = 42;\n    a = ++x; /* a and x are 43 */\n    b = x++; /* b is 43, x is 44 */\n    a = x--; /* a is is 44, x is 43 */\n    b = --x; /* b and x are 42 */\n    \n    return 0;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int main()\n{\n    int a, b, x = 42;\n    a = ++x; /* a and x are 43 */\n    b = x++; /* b is 43, x is 44 */\n    a = x--; /* a is is 44, x is 43 */\n    b = --x; /* b and x are 42 */\n    \n    return 0;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551937283251,
        "id": "ba5d8724-5563-43fd-82b4-4b19d073ca96",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551937283251,
        "parent_id": "74582a18-e34c-43e8-a305-152e66f02077",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "From the above it is clear that post operators return the current value of a variable and "
            ],
            [
              "then",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " modify it, but pre operators modify the variable and "
            ],
            [
              "then",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " return the modified value."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "From the above it is clear that post operators return the current value of a variable and "
          },
          {
            "Text": "then",
            "AttrFlags": 4
          },
          {
            "Text": " modify it, but pre operators modify the variable and "
          },
          {
            "Text": "then",
            "AttrFlags": 4
          },
          {
            "Text": " return the modified value."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551937283251,
        "id": "fbff277c-b7a0-49a8-ae17-11c0bab2056d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551937283251,
        "parent_id": "74582a18-e34c-43e8-a305-152e66f02077",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In all versions of C, the order of evaluation of pre and post operators are not defined, hence the following code can return unexpected outputs:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In all versions of C, the order of evaluation of pre and post operators are not defined, hence the following code can return unexpected outputs:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551937283251,
        "id": "8380169e-2706-4671-886a-60dcbd471830",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551937283251,
        "parent_id": "74582a18-e34c-43e8-a305-152e66f02077",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int main()\n{\n    int a, x = 42;\n    a = x++ + x; /* wrong */\n    a = x + x; /* right */\n    ++x;\n\n    int ar[10];\n    x = 0;\n    ar[x] = x++; /* wrong */\n    ar[x++] = x; /* wrong */\n    ar[x] = x; /* right */\n    ++x;\n    return 0;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int main()\n{\n    int a, x = 42;\n    a = x++ + x; /* wrong */\n    a = x + x; /* right */\n    ++x;\n\n    int ar[10];\n    x = 0;\n    ar[x] = x++; /* wrong */\n    ar[x++] = x; /* wrong */\n    ar[x] = x; /* right */\n    ++x;\n    return 0;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551937283251,
        "id": "b2ccd29f-6256-4677-9e91-913f39a58c3a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551937283251,
        "parent_id": "74582a18-e34c-43e8-a305-152e66f02077",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note that it is also good practice to use pre over post operators when used alone in a statement. Look at the above code for this."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note that it is also good practice to use pre over post operators when used alone in a statement. Look at the above code for this."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551937283253,
        "id": "0673d00b-dd5d-4f6e-8048-cd7e77adff75",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551937283253,
        "parent_id": "74582a18-e34c-43e8-a305-152e66f02077",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note also, that when a function is called, all side effects on arguments must take place before the function runs."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note also, that when a function is called, all side effects on arguments must take place before the function runs."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551937283253,
        "id": "fd409a47-60a0-40e1-8e8c-427cf0eb2345",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551937283253,
        "parent_id": "74582a18-e34c-43e8-a305-152e66f02077",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int foo(int x)\n{\n    return x;\n}\n\nint main()\n{\n    int a = 42;\n    int b = foo(a++);  /* This returns 43, even if it seems like it should return 42 */\n    return 0;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int foo(int x)\n{\n    return x;\n}\n\nint main()\n{\n    int a = 42;\n    int b = foo(a++);  /* This returns 43, even if it seems like it should return 42 */\n    return 0;\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "PrePost IncrementDecrement operators",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}