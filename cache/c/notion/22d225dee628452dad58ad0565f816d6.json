{
  "ID": "22d225de-e628-452d-ad58-ad0565f816d6",
  "Root": {
    "alive": true,
    "content": [
      "6af7e07a-c016-4a44-a0ae-d7207d07a29d",
      "3ada8cdf-bd94-43c6-8fa8-5f836323338f",
      "746fb868-7e67-42b0-994c-23a9a89a111f",
      "7450ad18-3e29-478d-b761-21ea27b415c9",
      "8fd4a5e4-055a-4f45-b505-ff3d941b477e",
      "c160aa95-51e8-4080-9573-1fbe3b31f466",
      "a8f42707-2075-4bee-9283-34481df3905a",
      "05ebe392-1e79-47b6-983b-cba990441d60",
      "d86e0871-4b48-425d-9702-cfe1df499207",
      "b088c83e-8c64-4bf9-9614-6f3c38717d35",
      "4722908c-10c4-4d72-a099-c5214b728136",
      "223cd605-8f8a-4f32-9f1c-ac3836749aed",
      "50872a3b-8889-4eaf-85d6-b54a079f3a1c",
      "3fae9bbf-1abc-42c9-9ac0-0677ee3f346a",
      "6aa81e3b-35c0-457c-a750-0a82b3e6fd25",
      "c10e7a78-9ee5-44be-80c5-d0224bf6b67b",
      "c6897fb8-57e8-4de6-98de-690aeb516361",
      "540a1b0c-7440-425b-91bb-8261915e1bf4",
      "009971c4-433f-454c-a977-dc19bdf5ab85",
      "5ed093b1-ea3e-4449-8b1a-cfe9868478ba"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551935679742,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "22d225de-e628-452d-ad58-ad0565f816d6",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551935679742,
    "parent_id": "c613c743-331e-4cb0-8344-4963dbf825f3",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Arrays"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935679734,
        "id": "6af7e07a-c016-4a44-a0ae-d7207d07a29d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935679734,
        "parent_id": "22d225de-e628-452d-ad58-ad0565f816d6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Introduction"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Introduction"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935679737,
        "id": "3ada8cdf-bd94-43c6-8fa8-5f836323338f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935679737,
        "parent_id": "22d225de-e628-452d-ad58-ad0565f816d6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Arrays are derived data types, representing an ordered collection of values (“elements”) of another type. Most arrays in C have a fixed number of elements of any one type, and its representation stores the elements contiguously in memory without gaps or padding. C allows multidimensional arrays whose elements are other arrays, and also arrays of pointers."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Arrays are derived data types, representing an ordered collection of values (“elements”) of another type. Most arrays in C have a fixed number of elements of any one type, and its representation stores the elements contiguously in memory without gaps or padding. C allows multidimensional arrays whose elements are other arrays, and also arrays of pointers."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935679737,
        "id": "746fb868-7e67-42b0-994c-23a9a89a111f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935679737,
        "parent_id": "22d225de-e628-452d-ad58-ad0565f816d6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "C supports dynamically allocated arrays whose size is determined at run time. C99 and later supports variable length arrays or VLAs."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "C supports dynamically allocated arrays whose size is determined at run time. C99 and later supports variable length arrays or VLAs."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935679737,
        "id": "7450ad18-3e29-478d-b761-21ea27b415c9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935679737,
        "parent_id": "22d225de-e628-452d-ad58-ad0565f816d6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Syntax"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Syntax"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935679737,
        "id": "8fd4a5e4-055a-4f45-b505-ff3d941b477e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935679737,
        "parent_id": "22d225de-e628-452d-ad58-ad0565f816d6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "type name[length]; /* Define array of ‘type’ with name ‘name’ and length ‘length’. */"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "type name[length]; /* Define array of ‘type’ with name ‘name’ and length ‘length’. */"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935679738,
        "id": "c160aa95-51e8-4080-9573-1fbe3b31f466",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935679738,
        "parent_id": "22d225de-e628-452d-ad58-ad0565f816d6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "int arr[10] = {0}; /* Define an array and initialize ALL elements to 0. */"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "int arr[10] = {0}; /* Define an array and initialize ALL elements to 0. */"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935679738,
        "id": "a8f42707-2075-4bee-9283-34481df3905a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935679738,
        "parent_id": "22d225de-e628-452d-ad58-ad0565f816d6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "int arr[10] = {42}; /* Define an array and initialize 1st elements to 42 an the rest to 0. */"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "int arr[10] = {42}; /* Define an array and initialize 1st elements to 42 an the rest to 0. */"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935679738,
        "id": "05ebe392-1e79-47b6-983b-cba990441d60",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935679738,
        "parent_id": "22d225de-e628-452d-ad58-ad0565f816d6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "int arr[] = {4, 2, 3, 1}; /* Define and initialize an array of length 4. */"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "int arr[] = {4, 2, 3, 1}; /* Define and initialize an array of length 4. */"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935679738,
        "id": "d86e0871-4b48-425d-9702-cfe1df499207",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935679738,
        "parent_id": "22d225de-e628-452d-ad58-ad0565f816d6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "arr[n] = value; /* Set value at index n. */"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "arr[n] = value; /* Set value at index n. */"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935679738,
        "id": "b088c83e-8c64-4bf9-9614-6f3c38717d35",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935679738,
        "parent_id": "22d225de-e628-452d-ad58-ad0565f816d6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "value = arr[n]; /* Get value at index n. */"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "value = arr[n]; /* Get value at index n. */"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935679739,
        "id": "4722908c-10c4-4d72-a099-c5214b728136",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935679739,
        "parent_id": "22d225de-e628-452d-ad58-ad0565f816d6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Remarks"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Remarks"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935679739,
        "id": "223cd605-8f8a-4f32-9f1c-ac3836749aed",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935679739,
        "parent_id": "22d225de-e628-452d-ad58-ad0565f816d6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Why do we need arrays?",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Why do we need arrays?",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935679739,
        "id": "50872a3b-8889-4eaf-85d6-b54a079f3a1c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935679739,
        "parent_id": "22d225de-e628-452d-ad58-ad0565f816d6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Arrays provide a way to organize objects into an aggregate with its own significance. For example, C strings are arrays of characters ("
            ],
            [
              "char",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "s), and a string such as “Hello, World!” has meaning as an aggregate that is not inherent in the characters individually. Similarly, arrays are commonly used to represent mathematical vectors and matrices, as well as lists of many kinds. Moreover, without some way to group the elements, one would need to address each individually, such as via separate variables. Not only is that unwieldy, it does not easily accommodate collections of different lengths."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Arrays provide a way to organize objects into an aggregate with its own significance. For example, C strings are arrays of characters ("
          },
          {
            "Text": "char",
            "AttrFlags": 2
          },
          {
            "Text": "s), and a string such as “Hello, World!” has meaning as an aggregate that is not inherent in the characters individually. Similarly, arrays are commonly used to represent mathematical vectors and matrices, as well as lists of many kinds. Moreover, without some way to group the elements, one would need to address each individually, such as via separate variables. Not only is that unwieldy, it does not easily accommodate collections of different lengths."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935679739,
        "id": "3fae9bbf-1abc-42c9-9ac0-0677ee3f346a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935679739,
        "parent_id": "22d225de-e628-452d-ad58-ad0565f816d6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Arrays are implicitly converted to pointers in most contexts",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Arrays are implicitly converted to pointers in most contexts",
            "AttrFlags": 1
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935679740,
        "id": "6aa81e3b-35c0-457c-a750-0a82b3e6fd25",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935679740,
        "parent_id": "22d225de-e628-452d-ad58-ad0565f816d6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Except when appearing as the operand of the "
            ],
            [
              "sizeof",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " operator, the "
            ],
            [
              "_Alignof",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " operator (C2011), or the unary "
            ],
            [
              "\u0026",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (address-of) operator, or as a string literal used to initialize an(other) array, an array is implicitly converted into (“decays to”) a pointer to its first element. This implicit conversion is tightly coupled to the definition of the array subscripting operator ("
            ],
            [
              "[]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "): the expression "
            ],
            [
              "arr[idx]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is defined as be equivalent to "
            ],
            [
              "*(arr + idx)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Furthermore, since pointer arithmetic is commutative, "
            ],
            [
              "*(arr + idx)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is also equivalent to "
            ],
            [
              "*(idx + arr)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", which in turn is equivalent to"
            ],
            [
              "idx[arr]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". All of those expressions are valid and evaluate to the same value, provided that either "
            ],
            [
              "idx",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "arr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is a pointer (or an array, which decays to a pointer), the other is an integer, and the integer is a valid index into the array to which the pointer points."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Except when appearing as the operand of the "
          },
          {
            "Text": "sizeof",
            "AttrFlags": 2
          },
          {
            "Text": " operator, the "
          },
          {
            "Text": "_Alignof",
            "AttrFlags": 2
          },
          {
            "Text": " operator (C2011), or the unary "
          },
          {
            "Text": "\u0026",
            "AttrFlags": 2
          },
          {
            "Text": " (address-of) operator, or as a string literal used to initialize an(other) array, an array is implicitly converted into (“decays to”) a pointer to its first element. This implicit conversion is tightly coupled to the definition of the array subscripting operator ("
          },
          {
            "Text": "[]",
            "AttrFlags": 2
          },
          {
            "Text": "): the expression "
          },
          {
            "Text": "arr[idx]",
            "AttrFlags": 2
          },
          {
            "Text": " is defined as be equivalent to "
          },
          {
            "Text": "*(arr + idx)",
            "AttrFlags": 2
          },
          {
            "Text": ". Furthermore, since pointer arithmetic is commutative, "
          },
          {
            "Text": "*(arr + idx)",
            "AttrFlags": 2
          },
          {
            "Text": " is also equivalent to "
          },
          {
            "Text": "*(idx + arr)",
            "AttrFlags": 2
          },
          {
            "Text": ", which in turn is equivalent to"
          },
          {
            "Text": "idx[arr]",
            "AttrFlags": 2
          },
          {
            "Text": ". All of those expressions are valid and evaluate to the same value, provided that either "
          },
          {
            "Text": "idx",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "arr",
            "AttrFlags": 2
          },
          {
            "Text": " is a pointer (or an array, which decays to a pointer), the other is an integer, and the integer is a valid index into the array to which the pointer points."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935679740,
        "id": "c10e7a78-9ee5-44be-80c5-d0224bf6b67b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935679740,
        "parent_id": "22d225de-e628-452d-ad58-ad0565f816d6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As a special case, observe that "
            ],
            [
              "\u0026(arr[0])",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is equivalent to "
            ],
            [
              "\u0026*(arr + 0)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", which simplifies to "
            ],
            [
              "arr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". All of those expressions are interchangeable wherever the last decays to a pointer. This simply expresses again that an array decays to a pointer to its first element."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "As a special case, observe that "
          },
          {
            "Text": "\u0026(arr[0])",
            "AttrFlags": 2
          },
          {
            "Text": " is equivalent to "
          },
          {
            "Text": "\u0026*(arr + 0)",
            "AttrFlags": 2
          },
          {
            "Text": ", which simplifies to "
          },
          {
            "Text": "arr",
            "AttrFlags": 2
          },
          {
            "Text": ". All of those expressions are interchangeable wherever the last decays to a pointer. This simply expresses again that an array decays to a pointer to its first element."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935679740,
        "id": "c6897fb8-57e8-4de6-98de-690aeb516361",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935679740,
        "parent_id": "22d225de-e628-452d-ad58-ad0565f816d6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In contrast, if the address-of operator is applied to an array of type "
            ],
            [
              "T[N]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " ("
            ],
            [
              "i.e.",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "\u0026arr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") then the result has type "
            ],
            [
              "T (*)[N]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and points to the whole array. This is distinct from a pointer to the first array element at least with respect to pointer arithmetic, which is defined in terms of the size of the pointed-to type."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In contrast, if the address-of operator is applied to an array of type "
          },
          {
            "Text": "T[N]",
            "AttrFlags": 2
          },
          {
            "Text": " ("
          },
          {
            "Text": "i.e.",
            "AttrFlags": 4
          },
          {
            "Text": " "
          },
          {
            "Text": "\u0026arr",
            "AttrFlags": 2
          },
          {
            "Text": ") then the result has type "
          },
          {
            "Text": "T (*)[N]",
            "AttrFlags": 2
          },
          {
            "Text": " and points to the whole array. This is distinct from a pointer to the first array element at least with respect to pointer arithmetic, which is defined in terms of the size of the pointed-to type."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935679741,
        "id": "540a1b0c-7440-425b-91bb-8261915e1bf4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935679741,
        "parent_id": "22d225de-e628-452d-ad58-ad0565f816d6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Function parameters are not arrays",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Function parameters are not arrays",
            "AttrFlags": 1
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935679741,
        "id": "009971c4-433f-454c-a977-dc19bdf5ab85",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935679741,
        "parent_id": "22d225de-e628-452d-ad58-ad0565f816d6",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "void foo(int a[], int n);\nvoid foo(int *a, int n);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "void foo(int a[], int n);\nvoid foo(int *a, int n);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935679742,
        "id": "5ed093b1-ea3e-4449-8b1a-cfe9868478ba",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935679742,
        "parent_id": "22d225de-e628-452d-ad58-ad0565f816d6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Although the first declaration of "
            ],
            [
              "foo",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " uses array-like syntax for parameter "
            ],
            [
              "a",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", such syntax is used to declare a function parameter declares that parameter as a "
            ],
            [
              "pointer",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " to the array’s element type. Thus, the second signature for "
            ],
            [
              "foo()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is semantically identical to the first. This corresponds to the decay of array values to pointers where they appear as arguments to a function "
            ],
            [
              "call",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ", such that if a variable and a function parameter are declared with the same array type then that variable’s value is suitable for use in a function call as the argument associated with the parameter."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Although the first declaration of "
          },
          {
            "Text": "foo",
            "AttrFlags": 2
          },
          {
            "Text": " uses array-like syntax for parameter "
          },
          {
            "Text": "a",
            "AttrFlags": 2
          },
          {
            "Text": ", such syntax is used to declare a function parameter declares that parameter as a "
          },
          {
            "Text": "pointer",
            "AttrFlags": 4
          },
          {
            "Text": " to the array’s element type. Thus, the second signature for "
          },
          {
            "Text": "foo()",
            "AttrFlags": 2
          },
          {
            "Text": " is semantically identical to the first. This corresponds to the decay of array values to pointers where they appear as arguments to a function "
          },
          {
            "Text": "call",
            "AttrFlags": 4
          },
          {
            "Text": ", such that if a variable and a function parameter are declared with the same array type then that variable’s value is suitable for use in a function call as the argument associated with the parameter."
          }
        ]
      }
    ],
    "title": "Arrays",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}