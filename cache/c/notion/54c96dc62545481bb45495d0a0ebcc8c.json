{
  "ID": "54c96dc6-2545-481b-b454-95d0a0ebcc8c",
  "Root": {
    "alive": true,
    "content": [
      "59da6bcd-cd2d-49eb-8bd9-9546588fceb3",
      "11475971-d66a-48f5-ba99-c0e4efe57d79",
      "8b31031f-701f-4e2f-b7ad-bec5dbf560a0",
      "07056db0-f719-42a5-9d14-c1aa87210c2f",
      "e75c97cc-cd38-4f7d-abe8-344c474c5759",
      "7954b11c-2f6c-4286-9bd9-3c2bff57c408",
      "3a935ace-3530-464b-9a8f-52ca1c73254c",
      "8f5ee890-f898-4d6b-b470-54c999b98514",
      "d259da57-06ec-4e98-8b5d-1627db8b756f",
      "3c052c8b-ba71-4e04-9fa4-2d07fbbfa9a0",
      "92692bb7-f1c8-4a08-a363-18dd6bc69851",
      "f626a80c-4800-412f-973f-f17c0c8bc5cc",
      "4c5d4b11-5f4f-47f9-8839-130724090564",
      "a61ec11c-1658-4667-b14f-c0ee2130bd17",
      "0d6ed875-3620-4ebc-a3da-bc0224a21c1b",
      "18cae9b6-6f56-4b83-8dd9-367deb82aabc",
      "1487c4e1-dd93-4b1f-b935-e00461eef036",
      "56f2e3d9-3a3f-4643-be56-be08051dd6dd",
      "cc995839-f173-4c8a-b8b6-44bf87459590",
      "2bbf6ed2-9070-41e7-a807-eaa4a091da96",
      "313ed36b-4d22-44f3-acd8-7a3019a6efaa",
      "60c4818b-1c0f-4d9b-9a58-28a67de5e3be",
      "75fc07d6-483b-4b29-a236-c3b3de16cb39",
      "b97d617c-e9e7-4935-a1d8-4c2722205a86",
      "3fdfd657-817c-4d71-896f-687fb2a78051",
      "db38ad3f-7870-4436-88e8-947a62a1f6b3",
      "e5c2d7ac-0269-4bd7-a30e-26b9d9656968",
      "c3e8318d-45b2-4df4-b8c7-c890314c2674",
      "b7f2567c-1a7b-4817-bbeb-90e84da6bd87",
      "ba8f571c-6e28-45b7-8f12-8feddaa358c3"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551936704073,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "54c96dc6-2545-481b-b454-95d0a0ebcc8c",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551936704073,
    "parent_id": "bbc16be7-a6da-4b3f-9e55-a68f0bcdb261",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Introduction"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936704063,
        "id": "59da6bcd-cd2d-49eb-8bd9-9546588fceb3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936704063,
        "parent_id": "54c96dc6-2545-481b-b454-95d0a0ebcc8c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Example of declarations are:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Example of declarations are:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936704065,
        "id": "11475971-d66a-48f5-ba99-c0e4efe57d79",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936704065,
        "parent_id": "54c96dc6-2545-481b-b454-95d0a0ebcc8c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int a; /* declaring single identifier of type int */"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int a; /* declaring single identifier of type int */",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936704066,
        "id": "8b31031f-701f-4e2f-b7ad-bec5dbf560a0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936704066,
        "parent_id": "54c96dc6-2545-481b-b454-95d0a0ebcc8c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The above declaration declares single identifier named "
            ],
            [
              "a",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " which refers to some object with "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " type."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The above declaration declares single identifier named "
          },
          {
            "Text": "a",
            "AttrFlags": 2
          },
          {
            "Text": " which refers to some object with "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": " type."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936704066,
        "id": "07056db0-f719-42a5-9d14-c1aa87210c2f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936704066,
        "parent_id": "54c96dc6-2545-481b-b454-95d0a0ebcc8c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int a1, b1; /* declaring 2 identifiers of type int */"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int a1, b1; /* declaring 2 identifiers of type int */",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936704066,
        "id": "e75c97cc-cd38-4f7d-abe8-344c474c5759",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936704066,
        "parent_id": "54c96dc6-2545-481b-b454-95d0a0ebcc8c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The second declaration declares 2 identifiers named "
            ],
            [
              "a1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "b1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " which refers to some other objects though with the same "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " type."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The second declaration declares 2 identifiers named "
          },
          {
            "Text": "a1",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "b1",
            "AttrFlags": 2
          },
          {
            "Text": " which refers to some other objects though with the same "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": " type."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936704068,
        "id": "7954b11c-2f6c-4286-9bd9-3c2bff57c408",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936704068,
        "parent_id": "54c96dc6-2545-481b-b454-95d0a0ebcc8c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Basically, the way this works is like this - first you put some "
            ],
            [
              "type",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c/309/data-types#t=201607211551345511474"
                ]
              ]
            ],
            [
              ", then you write a single or multiple expressions separated via comma ("
            ],
            [
              ",",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") ("
            ],
            [
              "which will not be evaluated at this point - and which should otherwise be referred to as declarators in this context",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "). In writing such expressions, you are allowed to apply only the indirection ("
            ],
            [
              "\\*",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "), function call ("
            ],
            [
              "( )",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") or subscript (or array indexing - "
            ],
            [
              "",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") operators onto some identifier (you can also not use any operators at all). The identifier used is not required to be visible in the current scope. Some examples:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Basically, the way this works is like this - first you put some "
          },
          {
            "Text": "type",
            "Link": "http://stackoverflow.com/documentation/c/309/data-types#t=201607211551345511474"
          },
          {
            "Text": ", then you write a single or multiple expressions separated via comma ("
          },
          {
            "Text": ",",
            "AttrFlags": 2
          },
          {
            "Text": ") ("
          },
          {
            "Text": "which will not be evaluated at this point - and which should otherwise be referred to as declarators in this context",
            "AttrFlags": 1
          },
          {
            "Text": "). In writing such expressions, you are allowed to apply only the indirection ("
          },
          {
            "Text": "\\*",
            "AttrFlags": 2
          },
          {
            "Text": "), function call ("
          },
          {
            "Text": "( )",
            "AttrFlags": 2
          },
          {
            "Text": ") or subscript (or array indexing - "
          },
          {
            "Text": "",
            "AttrFlags": 2
          },
          {
            "Text": ") operators onto some identifier (you can also not use any operators at all). The identifier used is not required to be visible in the current scope. Some examples:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936704068,
        "id": "3a935ace-3530-464b-9a8f-52ca1c73254c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936704068,
        "parent_id": "54c96dc6-2545-481b-b454-95d0a0ebcc8c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "/* 1 */ int /* 2 */ (*z) /* 3 */ , /* 4 */ *x , /* 5 */ **c /* 6 */ ;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "/* 1 */ int /* 2 */ (*z) /* 3 */ , /* 4 */ *x , /* 5 */ **c /* 6 */ ;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936704068,
        "id": "8f5ee890-f898-4d6b-b470-54c999b98514",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936704068,
        "parent_id": "54c96dc6-2545-481b-b454-95d0a0ebcc8c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "# | Description|\n—— | —— |\n1| The name of integer type.|\n2| Un-evaluated expression applying indirection to some identifier "
            ],
            [
              "z",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ".|\n3| We have a comma indicating that one more expression will follow in the same declaration.|\n4| Un-evaluated expression applying indirection to some other identifier "
            ],
            [
              "x",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ".|\n5| Un-evaluated expression applying indirection to the value of the expression "
            ],
            [
              "(*c)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ".|\n6| End of declaration.|"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "# | Description|\n—— | —— |\n1| The name of integer type.|\n2| Un-evaluated expression applying indirection to some identifier "
          },
          {
            "Text": "z",
            "AttrFlags": 2
          },
          {
            "Text": ".|\n3| We have a comma indicating that one more expression will follow in the same declaration.|\n4| Un-evaluated expression applying indirection to some other identifier "
          },
          {
            "Text": "x",
            "AttrFlags": 2
          },
          {
            "Text": ".|\n5| Un-evaluated expression applying indirection to the value of the expression "
          },
          {
            "Text": "(*c)",
            "AttrFlags": 2
          },
          {
            "Text": ".|\n6| End of declaration.|"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936704069,
        "id": "d259da57-06ec-4e98-8b5d-1627db8b756f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936704069,
        "parent_id": "54c96dc6-2545-481b-b454-95d0a0ebcc8c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note that none of the above identifiers were visible prior to this declaration and so the expressions used would not be valid before it.",
              [
                [
                  "i"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note that none of the above identifiers were visible prior to this declaration and so the expressions used would not be valid before it.",
            "AttrFlags": 4
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936704069,
        "id": "3c052c8b-ba71-4e04-9fa4-2d07fbbfa9a0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936704069,
        "parent_id": "54c96dc6-2545-481b-b454-95d0a0ebcc8c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "After each such expression, the identifier used in it is introduced into the current scope. (If the identifier has assigned linkage to it, it may also be re-declared with the same type of linkage so that both identifiers refer to the same object or function)"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "After each such expression, the identifier used in it is introduced into the current scope. (If the identifier has assigned linkage to it, it may also be re-declared with the same type of linkage so that both identifiers refer to the same object or function)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936704069,
        "id": "92692bb7-f1c8-4a08-a363-18dd6bc69851",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936704069,
        "parent_id": "54c96dc6-2545-481b-b454-95d0a0ebcc8c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Additionally, the equal operator sign ("
            ],
            [
              "=",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") may be used for initialization. If an unevaluated expression (declarator) is followed by "
            ],
            [
              "=",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " inside the declaration - we say that the identifier being introduced is also being initialized. After the "
            ],
            [
              "=",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " sign we can put once again some expression, but this time it’ll be evaluated and its value will be used as initial for the object declared."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Additionally, the equal operator sign ("
          },
          {
            "Text": "=",
            "AttrFlags": 2
          },
          {
            "Text": ") may be used for initialization. If an unevaluated expression (declarator) is followed by "
          },
          {
            "Text": "=",
            "AttrFlags": 2
          },
          {
            "Text": " inside the declaration - we say that the identifier being introduced is also being initialized. After the "
          },
          {
            "Text": "=",
            "AttrFlags": 2
          },
          {
            "Text": " sign we can put once again some expression, but this time it’ll be evaluated and its value will be used as initial for the object declared."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936704069,
        "id": "f626a80c-4800-412f-973f-f17c0c8bc5cc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936704069,
        "parent_id": "54c96dc6-2545-481b-b454-95d0a0ebcc8c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Examples:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Examples:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936704069,
        "id": "4c5d4b11-5f4f-47f9-8839-130724090564",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936704069,
        "parent_id": "54c96dc6-2545-481b-b454-95d0a0ebcc8c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int l = 90; /* the same as: */\n\nint l; l = 90; /* if it the declaration of l was in block scope */\n\nint c = 2, b[c]; /* ok, equivalent to: */\n\nint c = 2; int b[c];"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int l = 90; /* the same as: */\n\nint l; l = 90; /* if it the declaration of l was in block scope */\n\nint c = 2, b[c]; /* ok, equivalent to: */\n\nint c = 2; int b[c];",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936704069,
        "id": "a61ec11c-1658-4667-b14f-c0ee2130bd17",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936704069,
        "parent_id": "54c96dc6-2545-481b-b454-95d0a0ebcc8c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Later in your code, you are allowed to write the exact same expression from the declaration part of the newly introduced identifier, giving you an object of the type specified at the beginning of the declaration, assuming that you’ve assigned valid values to all accessed objects in the way. Examples:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Later in your code, you are allowed to write the exact same expression from the declaration part of the newly introduced identifier, giving you an object of the type specified at the beginning of the declaration, assuming that you’ve assigned valid values to all accessed objects in the way. Examples:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936704069,
        "id": "0d6ed875-3620-4ebc-a3da-bc0224a21c1b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936704069,
        "parent_id": "54c96dc6-2545-481b-b454-95d0a0ebcc8c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "void f()\n{\n    int b2; /* you should be able to write later in your code b2 \n            which will directly refer to the integer object\n            that b2 identifies */\n    \n    b2 = 2; /* assign a value to b2 */\n    \n    printf(\"%d\", b2); /*ok - should print 2*/\n\n    int *b3; /* you should be able to write later in your code *b3 */\n\n    b3 = \u0026b2; /* assign valid pointer value to b3 */\n\n    printf(\"%d\", *b3); /* ok - should print 2 */\n\n    int **b4; /* you should be able to write later in your code **b4 */\n\n    b4 = \u0026b3;\n\n    printf(\"%d\", **b4); /* ok - should print 2 */\n\n    void (*p)(); /* you should be able to write later in your code (*p)() */\n\n    p = \u0026f; /* assign a valid pointer value */\n\n    (*p)(); /* ok - calls function f by retrieving the\n            pointer value inside p -    p\n            and dereferencing it -      *p\n            resulting in a function\n            which is then called -      (*p)() -\n\n            it is not *p() because else first the () operator is \n            applied to p and then the resulting void object is\n            dereferenced which is not what we want here */\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "void f()\n{\n    int b2; /* you should be able to write later in your code b2 \n            which will directly refer to the integer object\n            that b2 identifies */\n    \n    b2 = 2; /* assign a value to b2 */\n    \n    printf(\"%d\", b2); /*ok - should print 2*/\n\n    int *b3; /* you should be able to write later in your code *b3 */\n\n    b3 = \u0026b2; /* assign valid pointer value to b3 */\n\n    printf(\"%d\", *b3); /* ok - should print 2 */\n\n    int **b4; /* you should be able to write later in your code **b4 */\n\n    b4 = \u0026b3;\n\n    printf(\"%d\", **b4); /* ok - should print 2 */\n\n    void (*p)(); /* you should be able to write later in your code (*p)() */\n\n    p = \u0026f; /* assign a valid pointer value */\n\n    (*p)(); /* ok - calls function f by retrieving the\n            pointer value inside p -    p\n            and dereferencing it -      *p\n            resulting in a function\n            which is then called -      (*p)() -\n\n            it is not *p() because else first the () operator is \n            applied to p and then the resulting void object is\n            dereferenced which is not what we want here */\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936704070,
        "id": "18cae9b6-6f56-4b83-8dd9-367deb82aabc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936704070,
        "parent_id": "54c96dc6-2545-481b-b454-95d0a0ebcc8c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The declaration of "
            ],
            [
              "b3",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " specifies that you can potentially use "
            ],
            [
              "b3",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " value as a mean to access some integer object."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The declaration of "
          },
          {
            "Text": "b3",
            "AttrFlags": 2
          },
          {
            "Text": " specifies that you can potentially use "
          },
          {
            "Text": "b3",
            "AttrFlags": 2
          },
          {
            "Text": " value as a mean to access some integer object."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936704070,
        "id": "1487c4e1-dd93-4b1f-b935-e00461eef036",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936704070,
        "parent_id": "54c96dc6-2545-481b-b454-95d0a0ebcc8c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Of course, in order to apply indirection ("
            ],
            [
              "\\*",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") to "
            ],
            [
              "b3",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", you should also have a proper value stored in it (see "
            ],
            [
              "pointers",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c/1108/pointers#t=20160721153330088157"
                ]
              ]
            ],
            [
              " for more info). You should also first store some value into an object before trying to retrieve it (you can see more about this problem "
            ],
            [
              "here",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c/759/undefined-behavior/2576/reading-an-uninitialized-object-with-automatic-storage-duration"
                ]
              ]
            ],
            [
              "). We’ve done all of this in the above examples."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Of course, in order to apply indirection ("
          },
          {
            "Text": "\\*",
            "AttrFlags": 2
          },
          {
            "Text": ") to "
          },
          {
            "Text": "b3",
            "AttrFlags": 2
          },
          {
            "Text": ", you should also have a proper value stored in it (see "
          },
          {
            "Text": "pointers",
            "Link": "http://stackoverflow.com/documentation/c/1108/pointers#t=20160721153330088157"
          },
          {
            "Text": " for more info). You should also first store some value into an object before trying to retrieve it (you can see more about this problem "
          },
          {
            "Text": "here",
            "Link": "http://stackoverflow.com/documentation/c/759/undefined-behavior/2576/reading-an-uninitialized-object-with-automatic-storage-duration"
          },
          {
            "Text": "). We’ve done all of this in the above examples."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936704071,
        "id": "56f2e3d9-3a3f-4643-be56-be08051dd6dd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936704071,
        "parent_id": "54c96dc6-2545-481b-b454-95d0a0ebcc8c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int a3(); /* you should be able to call a3 */"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int a3(); /* you should be able to call a3 */",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936704071,
        "id": "cc995839-f173-4c8a-b8b6-44bf87459590",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936704071,
        "parent_id": "54c96dc6-2545-481b-b454-95d0a0ebcc8c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This one tells the compiler that you’ll attempt to call "
            ],
            [
              "a3",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". In this case "
            ],
            [
              "a3",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " refers to function instead of an object. One difference between object and function is that functions will always have some sort of linkage. Examples:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This one tells the compiler that you’ll attempt to call "
          },
          {
            "Text": "a3",
            "AttrFlags": 2
          },
          {
            "Text": ". In this case "
          },
          {
            "Text": "a3",
            "AttrFlags": 2
          },
          {
            "Text": " refers to function instead of an object. One difference between object and function is that functions will always have some sort of linkage. Examples:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936704071,
        "id": "2bbf6ed2-9070-41e7-a807-eaa4a091da96",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936704071,
        "parent_id": "54c96dc6-2545-481b-b454-95d0a0ebcc8c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "void f1()\n{\n    {\n        int f2(); /* 1 refers to some function f2 */\n    }\n    \n    {\n        int f2(); /* refers to the exact same function f2 as (1) */\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "void f1()\n{\n    {\n        int f2(); /* 1 refers to some function f2 */\n    }\n    \n    {\n        int f2(); /* refers to the exact same function f2 as (1) */\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936704071,
        "id": "313ed36b-4d22-44f3-acd8-7a3019a6efaa",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936704071,
        "parent_id": "54c96dc6-2545-481b-b454-95d0a0ebcc8c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In the above example, the 2 declarations refer to the same function "
            ],
            [
              "f2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", whilst if they were declaring objects then in this context (having 2 different block scopes), they would have be 2 different distinct objects."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In the above example, the 2 declarations refer to the same function "
          },
          {
            "Text": "f2",
            "AttrFlags": 2
          },
          {
            "Text": ", whilst if they were declaring objects then in this context (having 2 different block scopes), they would have be 2 different distinct objects."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936704071,
        "id": "60c4818b-1c0f-4d9b-9a58-28a67de5e3be",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936704071,
        "parent_id": "54c96dc6-2545-481b-b454-95d0a0ebcc8c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int (*a3)(); /* you should be able to apply indirection to `a3` and then call it */"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int (*a3)(); /* you should be able to apply indirection to `a3` and then call it */",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936704071,
        "id": "75fc07d6-483b-4b29-a236-c3b3de16cb39",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936704071,
        "parent_id": "54c96dc6-2545-481b-b454-95d0a0ebcc8c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Now it may seems to be getting complicated, but if you know operators precedence you’ll have 0 problems reading the above declaration. The parentheses are needed because the "
            ],
            [
              "\\*",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " operator has less precedence then the "
            ],
            [
              "( )",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " one."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Now it may seems to be getting complicated, but if you know operators precedence you’ll have 0 problems reading the above declaration. The parentheses are needed because the "
          },
          {
            "Text": "\\*",
            "AttrFlags": 2
          },
          {
            "Text": " operator has less precedence then the "
          },
          {
            "Text": "( )",
            "AttrFlags": 2
          },
          {
            "Text": " one."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936704072,
        "id": "b97d617c-e9e7-4935-a1d8-4c2722205a86",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936704072,
        "parent_id": "54c96dc6-2545-481b-b454-95d0a0ebcc8c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In the case of using the subscript operator, the resulting expression wouldn’t be actually valid after the declaration because the index used in it (the value inside "
            ],
            [
              "\\[",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "\\]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") will always be 1 above the maximum allowed value for this object/function."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In the case of using the subscript operator, the resulting expression wouldn’t be actually valid after the declaration because the index used in it (the value inside "
          },
          {
            "Text": "\\[",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "\\]",
            "AttrFlags": 2
          },
          {
            "Text": ") will always be 1 above the maximum allowed value for this object/function."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936704072,
        "id": "3fdfd657-817c-4d71-896f-687fb2a78051",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936704072,
        "parent_id": "54c96dc6-2545-481b-b454-95d0a0ebcc8c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int a4[5]; /* here a4 shouldn't be accessed using the index 5 later on */"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int a4[5]; /* here a4 shouldn't be accessed using the index 5 later on */",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936704072,
        "id": "db38ad3f-7870-4436-88e8-947a62a1f6b3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936704072,
        "parent_id": "54c96dc6-2545-481b-b454-95d0a0ebcc8c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "But it should be accessible by all other indexes lower then 5. Examples:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "But it should be accessible by all other indexes lower then 5. Examples:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936704072,
        "id": "e5c2d7ac-0269-4bd7-a30e-26b9d9656968",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936704072,
        "parent_id": "54c96dc6-2545-481b-b454-95d0a0ebcc8c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "a4[0], a4[1]; a4[4];"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "a4[0], a4[1]; a4[4];",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936704072,
        "id": "c3e8318d-45b2-4df4-b8c7-c890314c2674",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936704072,
        "parent_id": "54c96dc6-2545-481b-b454-95d0a0ebcc8c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "a4[5]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will result into UB. More information about arrays can be found "
            ],
            [
              "here",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c/322/arrays#t=201607211550184387784"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "a4[5]",
            "AttrFlags": 2
          },
          {
            "Text": " will result into UB. More information about arrays can be found "
          },
          {
            "Text": "here",
            "Link": "http://stackoverflow.com/documentation/c/322/arrays#t=201607211550184387784"
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936704072,
        "id": "b7f2567c-1a7b-4817-bbeb-90e84da6bd87",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936704072,
        "parent_id": "54c96dc6-2545-481b-b454-95d0a0ebcc8c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int (*a5)[5](); /* here a4 could be applied indirection\n                indexed up to (but not including) 5\n                and called */"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int (*a5)[5](); /* here a4 could be applied indirection\n                indexed up to (but not including) 5\n                and called */",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936704073,
        "id": "ba8f571c-6e28-45b7-8f12-8feddaa358c3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936704073,
        "parent_id": "54c96dc6-2545-481b-b454-95d0a0ebcc8c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Unfortunately for us, although syntactically possible, the declaration of "
            ],
            [
              "a5",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is forbidden by the current standard."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Unfortunately for us, although syntactically possible, the declaration of "
          },
          {
            "Text": "a5",
            "AttrFlags": 2
          },
          {
            "Text": " is forbidden by the current standard."
          }
        ]
      }
    ],
    "title": "Introduction",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}