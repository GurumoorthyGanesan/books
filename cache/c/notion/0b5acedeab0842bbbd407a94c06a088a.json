{
  "ID": "0b5acede-ab08-42bb-bd40-7a94c06a088a",
  "Root": {
    "alive": true,
    "content": [
      "36d8cb34-d214-4b01-9a37-da2c0a83ca25",
      "0b3167ba-ba3d-4ac4-a305-554791825fa4",
      "69e9d1bf-3bb6-4521-a81c-3390e2c86772",
      "da23be63-9de1-48c8-ad5c-275f05413923",
      "7a54f7ba-5ac0-4b27-8f33-6e730795f579"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551936333574,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "0b5acede-ab08-42bb-bd40-7a94c06a088a",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551936333574,
    "parent_id": "f3ac34eb-110d-486b-9e30-6bd30082bba0",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Copy and Concatenation strcpy strcat"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936333571,
        "id": "36d8cb34-d214-4b01-9a37-da2c0a83ca25",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936333571,
        "parent_id": "0b5acede-ab08-42bb-bd40-7a94c06a088a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cstdio.h\u003e\n#include \u003cstring.h\u003e\n\nint main(void)\n{\n  /* Always ensure that your string is large enough to contain the characters\n   * and a terminating NUL character ('\\0')!\n   */\n  char mystring[10];\n\n  /* Copy \"foo\" into `mystring`, until a NUL character is encountered. */\n  strcpy(mystring, \"foo\");\n  printf(\"%s\\n\", mystring);\n\n  /* At this point, we used 4 chars of `mystring`, the 3 characters of \"foo\",\n   * and the NUL terminating byte.\n   */\n\n  /* Append \"bar\" to `mystring`. */\n  strcat(mystring, \"bar\");\n  printf(\"%s\\n\", mystring);\n\n  /* We now use 7 characters of `mystring`: \"foo\" requires 3, \"bar\" requires 3\n   * and there is a terminating NUL character ('\\0') at the end.\n   */\n\n  /* Copy \"bar\" into `mystring`, overwriting the former contents. */\n  strcpy(mystring, \"bar\");\n  printf(\"%s\\n\", mystring);\n\n  return 0;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cstdio.h\u003e\n#include \u003cstring.h\u003e\n\nint main(void)\n{\n  /* Always ensure that your string is large enough to contain the characters\n   * and a terminating NUL character ('\\0')!\n   */\n  char mystring[10];\n\n  /* Copy \"foo\" into `mystring`, until a NUL character is encountered. */\n  strcpy(mystring, \"foo\");\n  printf(\"%s\\n\", mystring);\n\n  /* At this point, we used 4 chars of `mystring`, the 3 characters of \"foo\",\n   * and the NUL terminating byte.\n   */\n\n  /* Append \"bar\" to `mystring`. */\n  strcat(mystring, \"bar\");\n  printf(\"%s\\n\", mystring);\n\n  /* We now use 7 characters of `mystring`: \"foo\" requires 3, \"bar\" requires 3\n   * and there is a terminating NUL character ('\\0') at the end.\n   */\n\n  /* Copy \"bar\" into `mystring`, overwriting the former contents. */\n  strcpy(mystring, \"bar\");\n  printf(\"%s\\n\", mystring);\n\n  return 0;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936333574,
        "id": "0b3167ba-ba3d-4ac4-a305-554791825fa4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936333574,
        "parent_id": "0b5acede-ab08-42bb-bd40-7a94c06a088a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Outputs:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Outputs:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936333574,
        "id": "69e9d1bf-3bb6-4521-a81c-3390e2c86772",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936333574,
        "parent_id": "0b5acede-ab08-42bb-bd40-7a94c06a088a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "foo\nfoobar\nbar"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "foo\nfoobar\nbar",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936333574,
        "id": "da23be63-9de1-48c8-ad5c-275f05413923",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936333574,
        "parent_id": "0b5acede-ab08-42bb-bd40-7a94c06a088a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If you append to or from or copy from an existing string, ensure it is NUL-terminated!",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If you append to or from or copy from an existing string, ensure it is NUL-terminated!",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936333574,
        "id": "7a54f7ba-5ac0-4b27-8f33-6e730795f579",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936333574,
        "parent_id": "0b5acede-ab08-42bb-bd40-7a94c06a088a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "String literals (e.g. "
            ],
            [
              "\"foo\"",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") will always be NUL-terminated by the compiler."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "String literals (e.g. "
          },
          {
            "Text": "\"foo\"",
            "AttrFlags": 2
          },
          {
            "Text": ") will always be NUL-terminated by the compiler."
          }
        ]
      }
    ],
    "title": "Copy and Concatenation strcpy strcat",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}