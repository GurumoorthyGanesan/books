{
  "ID": "2c8b581c-456a-4117-883b-82d8a9c2067e",
  "Root": {
    "alive": true,
    "content": [
      "a24b3323-7ab3-4569-851a-067c153025e0",
      "cb4b76d4-74f1-4992-8751-d1fdf4e58660",
      "54083bc0-28aa-486c-a175-2e2890c015c5",
      "42e130f6-87f3-4827-b4b5-ee01da1d3f1b",
      "6b471fe9-df94-4df0-8605-ccde39a50d39",
      "f7417c09-01b8-4cf0-afe8-96f6f7b2f4f3",
      "e6927243-7526-47fd-9f51-8dafa926a16b",
      "e9ffd540-c7ab-43e2-9951-9e12713d52e4",
      "4f1c5e23-d864-42cc-9ddc-216f6e1d0f31",
      "8592f1f0-de00-4f18-b6e3-7cf21f35b3d4",
      "96b0a74c-a1af-4b37-bac5-27505437b621",
      "5ba3a79b-d6fd-475e-bac6-dddcd60f6619"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551936265118,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "2c8b581c-456a-4117-883b-82d8a9c2067e",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551936265118,
    "parent_id": "fb1c49da-f858-420f-804f-317776d975e9",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Violating the strict aliasing rules"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936265114,
        "id": "a24b3323-7ab3-4569-851a-067c153025e0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936265114,
        "parent_id": "2c8b581c-456a-4117-883b-82d8a9c2067e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In the following code let us assume for simplicity that "
            ],
            [
              "float",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "uint32_t",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " have the same size."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In the following code let us assume for simplicity that "
          },
          {
            "Text": "float",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "uint32_t",
            "AttrFlags": 2
          },
          {
            "Text": " have the same size."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936265116,
        "id": "cb4b76d4-74f1-4992-8751-d1fdf4e58660",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936265116,
        "parent_id": "2c8b581c-456a-4117-883b-82d8a9c2067e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "void fun(uint32_t* u, float* f) {\n    float a = *f\n    *u = 22;\n    float b = *f;\n    print(\"%g should equal %g\\n\", a, b);\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "void fun(uint32_t* u, float* f) {\n    float a = *f\n    *u = 22;\n    float b = *f;\n    print(\"%g should equal %g\\n\", a, b);\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936265117,
        "id": "54083bc0-28aa-486c-a175-2e2890c015c5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936265117,
        "parent_id": "2c8b581c-456a-4117-883b-82d8a9c2067e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "u",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "f",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " have different base type, and thus the compiler can assume that they point to different objects. There is no possibility that "
            ],
            [
              "*f",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " could have changed between the two initializations of "
            ],
            [
              "a",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "b",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", and so the compiler may optimize the code to something equivalent to"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "u",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "f",
            "AttrFlags": 2
          },
          {
            "Text": " have different base type, and thus the compiler can assume that they point to different objects. There is no possibility that "
          },
          {
            "Text": "*f",
            "AttrFlags": 2
          },
          {
            "Text": " could have changed between the two initializations of "
          },
          {
            "Text": "a",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "b",
            "AttrFlags": 2
          },
          {
            "Text": ", and so the compiler may optimize the code to something equivalent to"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936265117,
        "id": "42e130f6-87f3-4827-b4b5-ee01da1d3f1b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936265117,
        "parent_id": "2c8b581c-456a-4117-883b-82d8a9c2067e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "void fun(uint32_t* u, float* f) {\n    float a = *f\n    *u = 22;\n    print(\"%g should equal %g\\n\", a, a);\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "void fun(uint32_t* u, float* f) {\n    float a = *f\n    *u = 22;\n    print(\"%g should equal %g\\n\", a, a);\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936265117,
        "id": "6b471fe9-df94-4df0-8605-ccde39a50d39",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936265117,
        "parent_id": "2c8b581c-456a-4117-883b-82d8a9c2067e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "That is, the second load operation of "
            ],
            [
              "*f",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can be optimized out completely."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "That is, the second load operation of "
          },
          {
            "Text": "*f",
            "AttrFlags": 2
          },
          {
            "Text": " can be optimized out completely."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936265117,
        "id": "f7417c09-01b8-4cf0-afe8-96f6f7b2f4f3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936265117,
        "parent_id": "2c8b581c-456a-4117-883b-82d8a9c2067e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If we call this function “normally”"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If we call this function “normally”"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936265118,
        "id": "e6927243-7526-47fd-9f51-8dafa926a16b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936265118,
        "parent_id": "2c8b581c-456a-4117-883b-82d8a9c2067e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "float fval = 4;\nuint32_t uval = 77;\nfun(\u0026uval, \u0026fval);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "float fval = 4;\nuint32_t uval = 77;\nfun(\u0026uval, \u0026fval);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936265118,
        "id": "e9ffd540-c7ab-43e2-9951-9e12713d52e4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936265118,
        "parent_id": "2c8b581c-456a-4117-883b-82d8a9c2067e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "all goes well and something like"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "all goes well and something like"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936265118,
        "id": "4f1c5e23-d864-42cc-9ddc-216f6e1d0f31",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936265118,
        "parent_id": "2c8b581c-456a-4117-883b-82d8a9c2067e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "4 should equal 4"
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "4 should equal 4"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936265118,
        "id": "8592f1f0-de00-4f18-b6e3-7cf21f35b3d4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936265118,
        "parent_id": "2c8b581c-456a-4117-883b-82d8a9c2067e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "is printed. But if we cheat and pass the same pointer, after converting it,"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "is printed. But if we cheat and pass the same pointer, after converting it,"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936265118,
        "id": "96b0a74c-a1af-4b37-bac5-27505437b621",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936265118,
        "parent_id": "2c8b581c-456a-4117-883b-82d8a9c2067e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "float fval = 4;\nuint32_t* up = (uint32_t*)\u0026fval;\nfun(up, \u0026fval);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "float fval = 4;\nuint32_t* up = (uint32_t*)\u0026fval;\nfun(up, \u0026fval);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936265118,
        "id": "5ba3a79b-d6fd-475e-bac6-dddcd60f6619",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936265118,
        "parent_id": "2c8b581c-456a-4117-883b-82d8a9c2067e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "we violate the strict aliasing rule. Then the behavior becomes undefined. The output could be as above, if the compiler had optimized the second access, or something completely different, and so your program ends up in a completely unreliable state."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "we violate the strict aliasing rule. Then the behavior becomes undefined. The output could be as above, if the compiler had optimized the second access, or something completely different, and so your program ends up in a completely unreliable state."
          }
        ]
      }
    ],
    "title": "Violating the strict aliasing rules",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}