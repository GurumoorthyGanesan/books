{
  "ID": "672c0c75-27fd-4c59-a679-64cc0a40e0cf",
  "Root": {
    "alive": true,
    "content": [
      "de4fee26-5525-40c3-88ec-f12b715c6c88",
      "7e1b208b-342d-4fe6-81ff-4047836ebf05",
      "9fb69d71-50ad-4a53-a920-65c94ee846f9",
      "24d9ae81-6c39-4f3d-89e9-1adb3d7589c3",
      "d6c7a6a6-4845-4018-a8ea-ad866eb4192a",
      "d47f8306-31a0-46ed-9ef2-b3b2f1e2f951",
      "991b2a83-9218-4669-82d5-00db65ef8f0c",
      "ffdc5113-f419-4013-824e-b49c39fe6186"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551935827721,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "672c0c75-27fd-4c59-a679-64cc0a40e0cf",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551935827721,
    "parent_id": "9b4c9f4c-5f47-45ba-86a9-461b3aaa1198",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Read lines from a file"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935827715,
        "id": "de4fee26-5525-40c3-88ec-f12b715c6c88",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935827715,
        "parent_id": "672c0c75-27fd-4c59-a679-64cc0a40e0cf",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "stdio.h",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " header defines the "
            ],
            [
              "fgets()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " function. This function reads a line from a stream and stores it in a specified string. The function stops reading text from the stream when either "
            ],
            [
              "n - 1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " characters are read, the newline character ("
            ],
            [
              "'\\n'",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") is read or the end of file (EOF) is reached."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "stdio.h",
            "AttrFlags": 2
          },
          {
            "Text": " header defines the "
          },
          {
            "Text": "fgets()",
            "AttrFlags": 2
          },
          {
            "Text": " function. This function reads a line from a stream and stores it in a specified string. The function stops reading text from the stream when either "
          },
          {
            "Text": "n - 1",
            "AttrFlags": 2
          },
          {
            "Text": " characters are read, the newline character ("
          },
          {
            "Text": "'\\n'",
            "AttrFlags": 2
          },
          {
            "Text": ") is read or the end of file (EOF) is reached."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935827718,
        "id": "7e1b208b-342d-4fe6-81ff-4047836ebf05",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935827718,
        "parent_id": "672c0c75-27fd-4c59-a679-64cc0a40e0cf",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cstdio.h\u003e\n#include \u003cstdlib.h\u003e\n#include \u003cstring.h\u003e\n\n#define MAX_LINE_LENGTH 80\n\nint main(int argc, char **argv)\n{\n    char *path;\n    char line[MAX_LINE_LENGTH] = {0};\n    unsigned int line_count = 0;\n    \n    if (argc \u003c 1)\n        return EXIT_FAILURE;\n    path = argv[1];\n    \n    /* Open file */\n    FILE *file = fopen(path, \"r\");\n    \n    if (!file)\n    {\n        perror(path);\n        return EXIT_FAILURE;\n    }\n    \n    /* Get each line until there are none left */\n    while (fgets(line, MAX_LINE_LENGTH, file))\n    {\n        /* Print each line */\n        printf(\"line[%06d]: %s\", ++line_count, line);\n        \n        /* Add a trailing newline to lines that don't already have one */\n        if (line[strlen(line) - 1] != '\\n')\n            printf(\"\\n\");\n    }\n    \n    /* Close file */\n    if (fclose(file))\n    {\n        return EXIT_FAILURE;\n        perror(path);\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cstdio.h\u003e\n#include \u003cstdlib.h\u003e\n#include \u003cstring.h\u003e\n\n#define MAX_LINE_LENGTH 80\n\nint main(int argc, char **argv)\n{\n    char *path;\n    char line[MAX_LINE_LENGTH] = {0};\n    unsigned int line_count = 0;\n    \n    if (argc \u003c 1)\n        return EXIT_FAILURE;\n    path = argv[1];\n    \n    /* Open file */\n    FILE *file = fopen(path, \"r\");\n    \n    if (!file)\n    {\n        perror(path);\n        return EXIT_FAILURE;\n    }\n    \n    /* Get each line until there are none left */\n    while (fgets(line, MAX_LINE_LENGTH, file))\n    {\n        /* Print each line */\n        printf(\"line[%06d]: %s\", ++line_count, line);\n        \n        /* Add a trailing newline to lines that don't already have one */\n        if (line[strlen(line) - 1] != '\\n')\n            printf(\"\\n\");\n    }\n    \n    /* Close file */\n    if (fclose(file))\n    {\n        return EXIT_FAILURE;\n        perror(path);\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935827718,
        "id": "9fb69d71-50ad-4a53-a920-65c94ee846f9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935827718,
        "parent_id": "672c0c75-27fd-4c59-a679-64cc0a40e0cf",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Calling the program with an argument that is a path to a file containing the following text:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Calling the program with an argument that is a path to a file containing the following text:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935827718,
        "id": "24d9ae81-6c39-4f3d-89e9-1adb3d7589c3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935827718,
        "parent_id": "672c0c75-27fd-4c59-a679-64cc0a40e0cf",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "This is a file\n  which has\nmultiple lines\n    with various indentation,\nblank lines\n\n\n\na really long line to show that the line will be counted as two lines if the length of a line is too long to fit in the buffer it has been given,\n  and punctuation at the end of the lines."
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "This is a file\n  which has\nmultiple lines\n    with various indentation,\nblank lines\n\n\n\na really long line to show that the line will be counted as two lines if the length of a line is too long to fit in the buffer it has been given,\n  and punctuation at the end of the lines.",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935827718,
        "id": "d6c7a6a6-4845-4018-a8ea-ad866eb4192a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935827718,
        "parent_id": "672c0c75-27fd-4c59-a679-64cc0a40e0cf",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Will result in the following output:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Will result in the following output:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935827718,
        "id": "d47f8306-31a0-46ed-9ef2-b3b2f1e2f951",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935827718,
        "parent_id": "672c0c75-27fd-4c59-a679-64cc0a40e0cf",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "line[000001]: This is a file\nline[000002]:   which has\nline[000003]: multiple lines\nline[000004]:     with various indentation,\nline[000005]: blank lines\nline[000006]: \nline[000007]: \nline[000008]: \nline[000009]: a really long line to show that the line will be counted as two lines if the le\nline[000010]: ngth of a line is too long to fit in the buffer it has been given,\nline[000011]:  and punctuation at the end of the lines.\nline[000012]:"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "line[000001]: This is a file\nline[000002]:   which has\nline[000003]: multiple lines\nline[000004]:     with various indentation,\nline[000005]: blank lines\nline[000006]: \nline[000007]: \nline[000008]: \nline[000009]: a really long line to show that the line will be counted as two lines if the le\nline[000010]: ngth of a line is too long to fit in the buffer it has been given,\nline[000011]:  and punctuation at the end of the lines.\nline[000012]:",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935827719,
        "id": "991b2a83-9218-4669-82d5-00db65ef8f0c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935827719,
        "parent_id": "672c0c75-27fd-4c59-a679-64cc0a40e0cf",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This very simple example allows a fixed maximum line length, such that longer lines will effectively be counted as two lines. The "
            ],
            [
              "fgets()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " function requires that the calling code provide the memory to be used as the destination for the line that is read."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This very simple example allows a fixed maximum line length, such that longer lines will effectively be counted as two lines. The "
          },
          {
            "Text": "fgets()",
            "AttrFlags": 2
          },
          {
            "Text": " function requires that the calling code provide the memory to be used as the destination for the line that is read."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551935827721,
        "id": "ffdc5113-f419-4013-824e-b49c39fe6186",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551935827721,
        "parent_id": "672c0c75-27fd-4c59-a679-64cc0a40e0cf",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "POSIX makes the "
            ],
            [
              "getline()",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://stackoverflow.com/documentation/c/507/files-and-i-o-streams/8274/get-lines-from-a-file-using-getline#t=201703141659155440184"
                ]
              ]
            ],
            [
              " function available which instead internally allocates memory to enlarge the buffer as necessary for a line of any length (as long as there is sufficient memory)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "POSIX makes the "
          },
          {
            "Text": "getline()",
            "AttrFlags": 2,
            "Link": "http://stackoverflow.com/documentation/c/507/files-and-i-o-streams/8274/get-lines-from-a-file-using-getline#t=201703141659155440184"
          },
          {
            "Text": " function available which instead internally allocates memory to enlarge the buffer as necessary for a line of any length (as long as there is sufficient memory)."
          }
        ]
      }
    ],
    "title": "Read lines from a file",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}