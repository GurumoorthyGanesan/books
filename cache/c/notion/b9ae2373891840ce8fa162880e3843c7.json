{
  "ID": "b9ae2373-8918-40ce-8fa1-62880e3843c7",
  "Root": {
    "alive": true,
    "content": [
      "c03a65f0-71c1-43ee-b916-f8349cb75e31",
      "01c0b46b-73bc-4814-a5b6-2f92b64fd70d",
      "1742f546-4e5c-4017-9d75-730ecc607cf0",
      "23e13f62-0b8c-4ac9-b0b7-cd17ffbac89f",
      "821cae74-389f-46dd-a008-e58be4ab2a4d",
      "5e183839-d427-4a42-974a-b511f2ba1a1e",
      "abba8510-5881-4148-825f-795ef613072f",
      "78736921-abb3-448d-9012-b1afe6e1a7c3",
      "a99f9550-928d-4626-bea1-fbb858045160",
      "d1582477-528f-4da6-8881-becfc6b46b31",
      "5c2b1a3d-5cbe-44bc-be99-d552cbe9d31a",
      "4c3da729-d830-4822-b0ae-9aa047775b32",
      "ac6caab6-7b82-4f79-a283-d85c94e95a49",
      "a1212ec8-fe97-4904-8d0e-bc86059188cc",
      "c91b6ac2-8161-4aa8-8f1d-015a3d5855bb",
      "2cddebd6-ac69-4b69-bb81-7762b1153a62",
      "411e3480-c321-441c-b1b2-151b5530a79e",
      "21edf4a7-c4c2-44a6-a54e-b22ecc5aba7c",
      "9c238730-721f-48c8-b495-e9a18f3b777e",
      "a8649bd7-741f-452f-bc3a-c3e130c31bd6"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551936792219,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "b9ae2373-8918-40ce-8fa1-62880e3843c7",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551936792219,
    "parent_id": "5e44bd54-3362-4b1a-934b-acecce2afc7f",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Freeing Memory"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936792210,
        "id": "c03a65f0-71c1-43ee-b916-f8349cb75e31",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936792210,
        "parent_id": "b9ae2373-8918-40ce-8fa1-62880e3843c7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It is possible to release dynamically allocated memory by calling "
            ],
            [
              "free()",
              [
                [
                  "a",
                  "http://linux.die.net/man/3/free"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It is possible to release dynamically allocated memory by calling "
          },
          {
            "Text": "free()",
            "Link": "http://linux.die.net/man/3/free"
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936792211,
        "id": "01c0b46b-73bc-4814-a5b6-2f92b64fd70d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936792211,
        "parent_id": "b9ae2373-8918-40ce-8fa1-62880e3843c7",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int *p = malloc(10 * sizeof *p); /* allocation of memory */\nif (p == NULL) \n{\n    perror(\"malloc failed\");\n    return -1;\n}\n\nfree(p); /* release of memory */\n/* note that after free(p), even using the *value* of the pointer p\n   has undefined behavior, until a new value is stored into it. */\n\n/* reusing/re-purposing the pointer itself */\nint i = 42;\np = \u0026i; /* This is valid, has defined behaviour */"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int *p = malloc(10 * sizeof *p); /* allocation of memory */\nif (p == NULL) \n{\n    perror(\"malloc failed\");\n    return -1;\n}\n\nfree(p); /* release of memory */\n/* note that after free(p), even using the *value* of the pointer p\n   has undefined behavior, until a new value is stored into it. */\n\n/* reusing/re-purposing the pointer itself */\nint i = 42;\np = \u0026i; /* This is valid, has defined behaviour */",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936792213,
        "id": "1742f546-4e5c-4017-9d75-730ecc607cf0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936792213,
        "parent_id": "b9ae2373-8918-40ce-8fa1-62880e3843c7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The memory pointed to by "
            ],
            [
              "p",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is reclaimed (either by the libc implementation or by the underlying OS) after the call to "
            ],
            [
              "free()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", so accessing that freed memory block via "
            ],
            [
              "p",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will lead to "
            ],
            [
              "undefined behavior",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c/364/undefined-behavior#t=201607290847035891683"
                ]
              ]
            ],
            [
              ". Pointers that reference memory elements that have been freed are commonly called "
            ],
            [
              "dangling pointers",
              [
                [
                  "a",
                  "https://en.wikipedia.org/wiki/Dangling_pointer"
                ]
              ]
            ],
            [
              ", and present a security risk. Furthermore, the C standard states that even "
            ],
            [
              "accessing the value",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c/364/undefined-behavior/2775/read-value-of-pointer-that-was-freed#t=201608050732042665317"
                ]
              ]
            ],
            [
              " of a dangling pointer has undefined behavior. Note that the pointer "
            ],
            [
              "p",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " itself can be re-purposed as shown above."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The memory pointed to by "
          },
          {
            "Text": "p",
            "AttrFlags": 2
          },
          {
            "Text": " is reclaimed (either by the libc implementation or by the underlying OS) after the call to "
          },
          {
            "Text": "free()",
            "AttrFlags": 2
          },
          {
            "Text": ", so accessing that freed memory block via "
          },
          {
            "Text": "p",
            "AttrFlags": 2
          },
          {
            "Text": " will lead to "
          },
          {
            "Text": "undefined behavior",
            "Link": "http://stackoverflow.com/documentation/c/364/undefined-behavior#t=201607290847035891683"
          },
          {
            "Text": ". Pointers that reference memory elements that have been freed are commonly called "
          },
          {
            "Text": "dangling pointers",
            "Link": "https://en.wikipedia.org/wiki/Dangling_pointer"
          },
          {
            "Text": ", and present a security risk. Furthermore, the C standard states that even "
          },
          {
            "Text": "accessing the value",
            "Link": "http://stackoverflow.com/documentation/c/364/undefined-behavior/2775/read-value-of-pointer-that-was-freed#t=201608050732042665317"
          },
          {
            "Text": " of a dangling pointer has undefined behavior. Note that the pointer "
          },
          {
            "Text": "p",
            "AttrFlags": 2
          },
          {
            "Text": " itself can be re-purposed as shown above."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936792213,
        "id": "23e13f62-0b8c-4ac9-b0b7-cd17ffbac89f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936792213,
        "parent_id": "b9ae2373-8918-40ce-8fa1-62880e3843c7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Please note that you can only call "
            ],
            [
              "free()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " on pointers that have directly been returned from the "
            ],
            [
              "malloc()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "calloc()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "realloc()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "aligned_alloc()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " functions, or where documentation tells you the memory has been allocated that way (functions like "
            ],
            [
              "strdup ()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " are notable examples). Freeing a pointer that is,"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Please note that you can only call "
          },
          {
            "Text": "free()",
            "AttrFlags": 2
          },
          {
            "Text": " on pointers that have directly been returned from the "
          },
          {
            "Text": "malloc()",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "calloc()",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "realloc()",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "aligned_alloc()",
            "AttrFlags": 2
          },
          {
            "Text": " functions, or where documentation tells you the memory has been allocated that way (functions like "
          },
          {
            "Text": "strdup ()",
            "AttrFlags": 2
          },
          {
            "Text": " are notable examples). Freeing a pointer that is,"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936792214,
        "id": "821cae74-389f-46dd-a008-e58be4ab2a4d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936792214,
        "parent_id": "b9ae2373-8918-40ce-8fa1-62880e3843c7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "obtained by using the "
            ],
            [
              "\u0026",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " operator on a variable, or"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "obtained by using the "
          },
          {
            "Text": "\u0026",
            "AttrFlags": 2
          },
          {
            "Text": " operator on a variable, or"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936792214,
        "id": "5e183839-d427-4a42-974a-b511f2ba1a1e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936792214,
        "parent_id": "b9ae2373-8918-40ce-8fa1-62880e3843c7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "in the middle of an allocated block,"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "in the middle of an allocated block,"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936792214,
        "id": "abba8510-5881-4148-825f-795ef613072f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936792214,
        "parent_id": "b9ae2373-8918-40ce-8fa1-62880e3843c7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "is forbidden. Such an error will usually not be diagnosed by your compiler but will lead the program execution in an undefined state."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "is forbidden. Such an error will usually not be diagnosed by your compiler but will lead the program execution in an undefined state."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936792214,
        "id": "78736921-abb3-448d-9012-b1afe6e1a7c3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936792214,
        "parent_id": "b9ae2373-8918-40ce-8fa1-62880e3843c7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "There are two common strategies to prevent such instances of undefined behavior."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "There are two common strategies to prevent such instances of undefined behavior."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936792214,
        "id": "a99f9550-928d-4626-bea1-fbb858045160",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936792214,
        "parent_id": "b9ae2373-8918-40ce-8fa1-62880e3843c7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The first and preferable is simple - have "
            ],
            [
              "p",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " itself cease to exist when it is no longer needed, for example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The first and preferable is simple - have "
          },
          {
            "Text": "p",
            "AttrFlags": 2
          },
          {
            "Text": " itself cease to exist when it is no longer needed, for example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936792214,
        "id": "d1582477-528f-4da6-8881-becfc6b46b31",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936792214,
        "parent_id": "b9ae2373-8918-40ce-8fa1-62880e3843c7",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "if (something_is_needed())\n{\n\n    int *p = malloc(10 * sizeof *p);\n    if (p == NULL) \n    {\n        perror(\"malloc failed\");\n        return -1;\n    }\n\n    /* do whatever is needed with p */\n\n    free(p);\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "if (something_is_needed())\n{\n\n    int *p = malloc(10 * sizeof *p);\n    if (p == NULL) \n    {\n        perror(\"malloc failed\");\n        return -1;\n    }\n\n    /* do whatever is needed with p */\n\n    free(p);\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936792215,
        "id": "5c2b1a3d-5cbe-44bc-be99-d552cbe9d31a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936792215,
        "parent_id": "b9ae2373-8918-40ce-8fa1-62880e3843c7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "By calling "
            ],
            [
              "free()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " directly before the end of the containing block (i.e. the "
            ],
            [
              "\\}",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "), "
            ],
            [
              "p",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " itself ceases to exist. The compiler will give a compilation error on any attempt to use "
            ],
            [
              "p",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " after that."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "By calling "
          },
          {
            "Text": "free()",
            "AttrFlags": 2
          },
          {
            "Text": " directly before the end of the containing block (i.e. the "
          },
          {
            "Text": "\\}",
            "AttrFlags": 2
          },
          {
            "Text": "), "
          },
          {
            "Text": "p",
            "AttrFlags": 2
          },
          {
            "Text": " itself ceases to exist. The compiler will give a compilation error on any attempt to use "
          },
          {
            "Text": "p",
            "AttrFlags": 2
          },
          {
            "Text": " after that."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936792215,
        "id": "4c3da729-d830-4822-b0ae-9aa047775b32",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936792215,
        "parent_id": "b9ae2373-8918-40ce-8fa1-62880e3843c7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A second approach is to also invalidate the pointer itself after releasing the memory to which it points:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A second approach is to also invalidate the pointer itself after releasing the memory to which it points:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936792215,
        "id": "ac6caab6-7b82-4f79-a283-d85c94e95a49",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936792215,
        "parent_id": "b9ae2373-8918-40ce-8fa1-62880e3843c7",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "free(p);\np = NULL;     // you may also use 0 instead of NULL"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "free(p);\np = NULL;     // you may also use 0 instead of NULL",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936792215,
        "id": "a1212ec8-fe97-4904-8d0e-bc86059188cc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936792215,
        "parent_id": "b9ae2373-8918-40ce-8fa1-62880e3843c7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Arguments for this approach:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Arguments for this approach:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936792215,
        "id": "c91b6ac2-8161-4aa8-8f1d-015a3d5855bb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936792215,
        "parent_id": "b9ae2373-8918-40ce-8fa1-62880e3843c7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "On many platforms, an attempt to dereference a null pointer will cause instant crash: Segmentation fault. Here, we get at least a stack trace pointing to the variable that was used after being freed."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "On many platforms, an attempt to dereference a null pointer will cause instant crash: Segmentation fault. Here, we get at least a stack trace pointing to the variable that was used after being freed."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936792215,
        "id": "2cddebd6-ac69-4b69-bb81-7762b1153a62",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936792215,
        "parent_id": "b9ae2373-8918-40ce-8fa1-62880e3843c7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Without setting pointer to "
            ],
            [
              "NULL",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " we have dangling pointer. The program will very likely still crash, but later, because the memory to which the pointer points will silently be corrupted. Such bugs are difficult to trace because they can result in a call stack that completely unrelated to the initial problem."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Without setting pointer to "
          },
          {
            "Text": "NULL",
            "AttrFlags": 2
          },
          {
            "Text": " we have dangling pointer. The program will very likely still crash, but later, because the memory to which the pointer points will silently be corrupted. Such bugs are difficult to trace because they can result in a call stack that completely unrelated to the initial problem."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936792216,
        "id": "411e3480-c321-441c-b1b2-151b5530a79e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936792216,
        "parent_id": "b9ae2373-8918-40ce-8fa1-62880e3843c7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This approach hence follows the "
            ],
            [
              "fail-fast concept",
              [
                [
                  "a",
                  "https://en.wikipedia.org/wiki/Fail-fast"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This approach hence follows the "
          },
          {
            "Text": "fail-fast concept",
            "Link": "https://en.wikipedia.org/wiki/Fail-fast"
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936792219,
        "id": "21edf4a7-c4c2-44a6-a54e-b22ecc5aba7c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936792219,
        "parent_id": "b9ae2373-8918-40ce-8fa1-62880e3843c7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It is safe to free a null pointer. The "
            ],
            [
              "C Standard specifies",
              [
                [
                  "a",
                  "http://port70.net/~nsz/c/c89/c89-draft.html#4.10.3.2"
                ]
              ]
            ],
            [
              " that "
            ],
            [
              "free(NULL)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " has no effect:"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "It is safe to free a null pointer. The "
          },
          {
            "Text": "C Standard specifies",
            "Link": "http://port70.net/~nsz/c/c89/c89-draft.html#4.10.3.2"
          },
          {
            "Text": " that "
          },
          {
            "Text": "free(NULL)",
            "AttrFlags": 2
          },
          {
            "Text": " has no effect:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936792219,
        "id": "9c238730-721f-48c8-b495-e9a18f3b777e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936792219,
        "parent_id": "b9ae2373-8918-40ce-8fa1-62880e3843c7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The free function causes the space pointed to by ptr to be deallocated, that is, made available for further allocation. If ptr is a null pointer, no action occurs. Otherwise, if the argument does not match a pointer earlier returned by the calloc, malloc, or realloc function, or if the space has been deallocated by a call to free or realloc, the behavior is undefined."
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "The free function causes the space pointed to by ptr to be deallocated, that is, made available for further allocation. If ptr is a null pointer, no action occurs. Otherwise, if the argument does not match a pointer earlier returned by the calloc, malloc, or realloc function, or if the space has been deallocated by a call to free or realloc, the behavior is undefined."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936792219,
        "id": "a8649bd7-741f-452f-bc3a-c3e130c31bd6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936792219,
        "parent_id": "b9ae2373-8918-40ce-8fa1-62880e3843c7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Sometimes the first approach cannot be used (e.g. memory is allocated in one function, and deallocated much later in a completely different function)"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Sometimes the first approach cannot be used (e.g. memory is allocated in one function, and deallocated much later in a completely different function)"
          }
        ]
      }
    ],
    "title": "Freeing Memory",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}