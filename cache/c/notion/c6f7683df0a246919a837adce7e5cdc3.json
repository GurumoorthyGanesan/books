{
  "ID": "c6f7683d-f0a2-4691-9a83-7adce7e5cdc3",
  "Root": {
    "alive": true,
    "content": [
      "a772045e-9523-4d64-9736-01c678790b0f",
      "cec2440c-4b6d-4ef2-a127-13f8e3955b14",
      "f237359c-9849-4a0e-8dcb-bbb6095c1dbb",
      "34b75c34-1e20-4970-89b4-8f08bb71c62a",
      "22bb9fff-e0ec-4a4b-a4b3-126748af2fdd",
      "f8a85389-4758-4fb4-a236-39d65cda9d87",
      "ca71e1d4-2ab1-449c-b702-0deb2e187a4b",
      "92111fd1-11a6-4387-8714-1f73dc6f517e",
      "170414f4-8df5-4b92-af05-ef2c634619f3"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551936373714,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "c6f7683d-f0a2-4691-9a83-7adce7e5cdc3",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551936373714,
    "parent_id": "3615ca16-3d26-4800-98f4-4da1a5c4bef4",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Type Qualifiers"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936373710,
        "id": "a772045e-9523-4d64-9736-01c678790b0f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936373710,
        "parent_id": "c6f7683d-f0a2-4691-9a83-7adce7e5cdc3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Remarks"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Remarks"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936373712,
        "id": "cec2440c-4b6d-4ef2-a127-13f8e3955b14",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936373712,
        "parent_id": "c6f7683d-f0a2-4691-9a83-7adce7e5cdc3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Type qualifiers are the keywords which describe additional semantics about a type. They are an integral part of type signatures. They can appear both at the topmost level of a declaration (directly affecting the identifier) or at sub-levels (relevant to pointers only, affecting the pointed-to values):"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Type qualifiers are the keywords which describe additional semantics about a type. They are an integral part of type signatures. They can appear both at the topmost level of a declaration (directly affecting the identifier) or at sub-levels (relevant to pointers only, affecting the pointed-to values):"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936373713,
        "id": "f237359c-9849-4a0e-8dcb-bbb6095c1dbb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936373713,
        "parent_id": "c6f7683d-f0a2-4691-9a83-7adce7e5cdc3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Keyword | Remarks\n––––– | –––––––––––––––––––––––––"
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | Prevents the mutation of the declared object (by appearing at the topmost level) or prevents the mutation of the pointed-to value (by appearing next to a pointer subtype)."
            ],
            [
              "volatile",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | Informs the compiler that the declared object (at topmost level) or the pointed-to value (in pointer subtypes) may change its value as a result of external conditions, not only as a result of program control flow."
            ],
            [
              "restrict",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | An optimization hint, relevant to pointers only. Declares intent that for the lifetime of the pointer, no other pointers will be used to access the same pointed-to object."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Keyword | Remarks\n––––– | –––––––––––––––––––––––––"
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": " | Prevents the mutation of the declared object (by appearing at the topmost level) or prevents the mutation of the pointed-to value (by appearing next to a pointer subtype)."
          },
          {
            "Text": "volatile",
            "AttrFlags": 2
          },
          {
            "Text": " | Informs the compiler that the declared object (at topmost level) or the pointed-to value (in pointer subtypes) may change its value as a result of external conditions, not only as a result of program control flow."
          },
          {
            "Text": "restrict",
            "AttrFlags": 2
          },
          {
            "Text": " | An optimization hint, relevant to pointers only. Declares intent that for the lifetime of the pointer, no other pointers will be used to access the same pointed-to object."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936373714,
        "id": "34b75c34-1e20-4970-89b4-8f08bb71c62a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936373714,
        "parent_id": "c6f7683d-f0a2-4691-9a83-7adce7e5cdc3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The ordering of type qualifiers with respect to storage class specifiers ("
            ],
            [
              "static",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "extern",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "auto",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "register",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "), type modifiers ("
            ],
            [
              "signed",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "unsigned",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "short",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "long",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") and type specifiers ("
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "char",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "double",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", etc.) is not enforced, but the good practice is to put them in the aforementioned order:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The ordering of type qualifiers with respect to storage class specifiers ("
          },
          {
            "Text": "static",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "extern",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "auto",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "register",
            "AttrFlags": 2
          },
          {
            "Text": "), type modifiers ("
          },
          {
            "Text": "signed",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "unsigned",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "short",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "long",
            "AttrFlags": 2
          },
          {
            "Text": ") and type specifiers ("
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "char",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "double",
            "AttrFlags": 2
          },
          {
            "Text": ", etc.) is not enforced, but the good practice is to put them in the aforementioned order:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936373714,
        "id": "22bb9fff-e0ec-4a4b-a4b3-126748af2fdd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936373714,
        "parent_id": "c6f7683d-f0a2-4691-9a83-7adce7e5cdc3",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "static const volatile unsigned long int a = 5; /* good practice */\nunsigned volatile long static int const b = 5; /* bad practice */"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "static const volatile unsigned long int a = 5; /* good practice */\nunsigned volatile long static int const b = 5; /* bad practice */",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936373714,
        "id": "f8a85389-4758-4fb4-a236-39d65cda9d87",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936373714,
        "parent_id": "c6f7683d-f0a2-4691-9a83-7adce7e5cdc3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Top-level qualifications"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Top-level qualifications"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936373714,
        "id": "ca71e1d4-2ab1-449c-b702-0deb2e187a4b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936373714,
        "parent_id": "c6f7683d-f0a2-4691-9a83-7adce7e5cdc3",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "/* \"a\" cannot be mutated by the program but can change as a result of external conditions */\nconst volatile int a = 5;\n\n/* the const applies to array elements, i.e. \"a[0]\" cannot be mutated */    \nconst int arr[] = { 1, 2, 3 };\n\n/* for the lifetime of \"ptr\", no other pointer could point to the same \"int\" object */\nint *restrict ptr;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "/* \"a\" cannot be mutated by the program but can change as a result of external conditions */\nconst volatile int a = 5;\n\n/* the const applies to array elements, i.e. \"a[0]\" cannot be mutated */    \nconst int arr[] = { 1, 2, 3 };\n\n/* for the lifetime of \"ptr\", no other pointer could point to the same \"int\" object */\nint *restrict ptr;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936373714,
        "id": "92111fd1-11a6-4387-8714-1f73dc6f517e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936373714,
        "parent_id": "c6f7683d-f0a2-4691-9a83-7adce7e5cdc3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Pointer subtype qualifications"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Pointer subtype qualifications"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936373714,
        "id": "170414f4-8df5-4b92-af05-ef2c634619f3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936373714,
        "parent_id": "c6f7683d-f0a2-4691-9a83-7adce7e5cdc3",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "/* \"s1\" can be mutated, but \"*s1\" cannot */\nconst char *s1 = \"Hello\";\n\n/* neither \"s2\" (because of top-level const) nor \"*s2\" can be mutated */\nconst char *const s2 = \"World\";\n\n/* \"*p\" may change its value as a result of external conditions, \"**p\" and \"p\" cannot */\nchar *volatile *p;\n\n/* \"q\", \"*q\" and \"**q\" may change their values as a result of external conditions */\nvolatile char *volatile *volatile q;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "/* \"s1\" can be mutated, but \"*s1\" cannot */\nconst char *s1 = \"Hello\";\n\n/* neither \"s2\" (because of top-level const) nor \"*s2\" can be mutated */\nconst char *const s2 = \"World\";\n\n/* \"*p\" may change its value as a result of external conditions, \"**p\" and \"p\" cannot */\nchar *volatile *p;\n\n/* \"q\", \"*q\" and \"**q\" may change their values as a result of external conditions */\nvolatile char *volatile *volatile q;",
        "code_language": "Plain Text"
      }
    ],
    "title": "Type Qualifiers",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}