{
  "ID": "b7c4c6d1-5094-4e65-97b8-533c445b9f8b",
  "Root": {
    "alive": true,
    "content": [
      "473c8437-e4cb-46f2-afa9-ac49f5f9974c",
      "15096500-69fa-46ac-a417-beef78283a12",
      "9018bcbc-cf4c-4e43-8791-f604cffb678a",
      "6d1f1484-36f8-460a-9ba6-67d0eed309f0",
      "fbde0077-82e2-497f-a762-519fcf200942",
      "a180f600-10be-41ca-8657-14021fb876e5",
      "d44502ea-59e6-4d22-8322-29f325be8a4d",
      "61e9d1bb-2efa-4e0d-8978-8c52f3f06ed5"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551936797155,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "b7c4c6d1-5094-4e65-97b8-533c445b9f8b",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551936797155,
    "parent_id": "5e44bd54-3362-4b1a-934b-acecce2afc7f",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "User-defined memory management"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936797151,
        "id": "473c8437-e4cb-46f2-afa9-ac49f5f9974c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936797151,
        "parent_id": "b7c4c6d1-5094-4e65-97b8-533c445b9f8b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "malloc()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " often calls underlying operating system functions to obtain pages of memory. But there is nothing special about the function and it can be implemented in straight C by declaring a large static array and allocating from it (there is a slight difficulty in ensuring correct alignment, in practice aligning to 8 bytes is almost always adequate)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "malloc()",
            "AttrFlags": 2
          },
          {
            "Text": " often calls underlying operating system functions to obtain pages of memory. But there is nothing special about the function and it can be implemented in straight C by declaring a large static array and allocating from it (there is a slight difficulty in ensuring correct alignment, in practice aligning to 8 bytes is almost always adequate)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936797154,
        "id": "15096500-69fa-46ac-a417-beef78283a12",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936797154,
        "parent_id": "b7c4c6d1-5094-4e65-97b8-533c445b9f8b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To implement a simple scheme, a control block is stored in the region of memory immediately before the pointer to be returned from the call. This means that "
            ],
            [
              "free()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " may be implemented by subtracting from the returned pointer and reading off the control information, which is typically the block size plus some information that allows it to be put back in the free list - a linked list of unallocated blocks."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To implement a simple scheme, a control block is stored in the region of memory immediately before the pointer to be returned from the call. This means that "
          },
          {
            "Text": "free()",
            "AttrFlags": 2
          },
          {
            "Text": " may be implemented by subtracting from the returned pointer and reading off the control information, which is typically the block size plus some information that allows it to be put back in the free list - a linked list of unallocated blocks."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936797154,
        "id": "9018bcbc-cf4c-4e43-8791-f604cffb678a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936797154,
        "parent_id": "b7c4c6d1-5094-4e65-97b8-533c445b9f8b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When the user requests an allocation, the free list is searched until a block of identical or larger size to the amount requested is found, then if necessary it is split. This can lead to memory fragmentation if the user is continually making many allocations and frees of unpredictable size and and at unpredictable intervals (not all real programs behave like that, the simple scheme is often adequate for small programs)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When the user requests an allocation, the free list is searched until a block of identical or larger size to the amount requested is found, then if necessary it is split. This can lead to memory fragmentation if the user is continually making many allocations and frees of unpredictable size and and at unpredictable intervals (not all real programs behave like that, the simple scheme is often adequate for small programs)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936797154,
        "id": "6d1f1484-36f8-460a-9ba6-67d0eed309f0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936797154,
        "parent_id": "b7c4c6d1-5094-4e65-97b8-533c445b9f8b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "/* typical control block */\nstruct block\n{\n   size_t size;         /* size of block */\n   struct block *next;  /* next block in free list */ \n   struct block *prev;  /* back pointer to previous block in memory */\n   void *padding;       /* need 16 bytes to make multiple of 8 */\n}\n\nstatic struct block arena[10000]; /* allocate from here */\nstatic struct block *firstfree;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "/* typical control block */\nstruct block\n{\n   size_t size;         /* size of block */\n   struct block *next;  /* next block in free list */ \n   struct block *prev;  /* back pointer to previous block in memory */\n   void *padding;       /* need 16 bytes to make multiple of 8 */\n}\n\nstatic struct block arena[10000]; /* allocate from here */\nstatic struct block *firstfree;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936797155,
        "id": "fbde0077-82e2-497f-a762-519fcf200942",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936797155,
        "parent_id": "b7c4c6d1-5094-4e65-97b8-533c445b9f8b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Many programs require large numbers of allocations of small objects of the same size. This is very easy to implement. Simply use a block with a next pointer. So if a block of 32 bytes is required:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Many programs require large numbers of allocations of small objects of the same size. This is very easy to implement. Simply use a block with a next pointer. So if a block of 32 bytes is required:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936797155,
        "id": "a180f600-10be-41ca-8657-14021fb876e5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936797155,
        "parent_id": "b7c4c6d1-5094-4e65-97b8-533c445b9f8b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "union block\n{\n   union block * next;\n   unsigned char payload[32];\n}  \n\nstatic union block arena[100];\nstatic union block * head; \nvoid init(void)\n{\n    int i;\n    for (i = 0; i \u003c 100 - 1; i++)\n        arena[i].next = \u0026arena[i + 1];\n    arena[i].next = 0; /* last one, null */\n    head = \u0026block[0];\n}\n \nvoid *block_alloc()\n{\n    void *answer = head;\n    if (answer)\n        head = head-\u003enext;\n    return answer;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "union block\n{\n   union block * next;\n   unsigned char payload[32];\n}  \n\nstatic union block arena[100];\nstatic union block * head; \nvoid init(void)\n{\n    int i;\n    for (i = 0; i \u003c 100 - 1; i++)\n        arena[i].next = \u0026arena[i + 1];\n    arena[i].next = 0; /* last one, null */\n    head = \u0026block[0];\n}\n \nvoid *block_alloc()\n{\n    void *answer = head;\n    if (answer)\n        head = head-\u003enext;\n    return answer;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936797155,
        "id": "d44502ea-59e6-4d22-8322-29f325be8a4d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936797155,
        "parent_id": "b7c4c6d1-5094-4e65-97b8-533c445b9f8b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "void block_free(void *ptr)\n{\n    union block *block = ptr;\n    block-\u003enext = head;\n    head - block;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "void block_free(void *ptr)\n{\n    union block *block = ptr;\n    block-\u003enext = head;\n    head - block;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551936797155,
        "id": "61e9d1bb-2efa-4e0d-8978-8c52f3f06ed5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551936797155,
        "parent_id": "b7c4c6d1-5094-4e65-97b8-533c445b9f8b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This scheme is extremely fast and efficient, and can be made generic with a certain loss of clarity."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This scheme is extremely fast and efficient, and can be made generic with a certain loss of clarity."
          }
        ]
      }
    ],
    "title": "User-defined memory management",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}