{
  "ID": "1079cca6-6da6-4a28-a641-b1ee1bea8cac",
  "Root": {
    "alive": true,
    "content": [
      "49ec8597-227f-4c94-a1b9-376683c66ba4",
      "720e1ad2-497b-48ee-9f4c-dc7cea29f0a9",
      "8062f428-149f-4111-a680-67d06e27358c",
      "9d2ded0e-c488-4223-81f6-5d704f3c281a",
      "1f24b5fc-5575-459a-80d8-5ffceaf57132",
      "2eab577a-db45-40e7-9ea8-08d46160345f",
      "a0b5923c-3f0d-4264-a10b-d36298a64418",
      "f7831f1a-9e44-4ec6-b38c-1397e1d4a37c",
      "3794f068-7eb9-4d33-a67c-3cab536511c8",
      "8c571b8f-c3e9-4ff4-bcbd-7aec281a84f2",
      "cc960af3-eca8-40a3-8d9c-b84800fc88e0",
      "51e8dbe2-8510-4139-9d7d-8595a510a88a",
      "41d4af45-cd3d-4921-973a-5a53cb063e6a",
      "48972f86-306a-4024-9222-4089ae9c20af",
      "d5b341d7-73c3-402b-a2a8-2950aeefeb70",
      "feab90ea-4a92-4fc5-a2d5-a69da22cad4a",
      "634f4a66-95c7-4615-9948-61fca6c858e9",
      "1ba217ac-2ba6-4fca-b464-0405ffe15001",
      "c7d8217b-288e-492f-b933-645d75989da5",
      "88fa4593-99d6-4a34-8436-4b19b9e1f2db",
      "729fc1d7-01f7-45d5-ba93-9b5d4c3523cd",
      "25aa8463-90a2-4322-96ea-1d7c6b0b670c",
      "7013e587-05ee-4890-87a8-d13043b91c4b",
      "f4147b1d-c3a6-4273-bb0c-3b4962904ea6"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551929272375,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "1079cca6-6da6-4a28-a641-b1ee1bea8cac",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551929272375,
    "parent_id": "0652a44d-8a63-47b5-b7cf-af85d0c3655a",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Interval Scheduling"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929272365,
        "id": "49ec8597-227f-4c94-a1b9-376683c66ba4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929272365,
        "parent_id": "1079cca6-6da6-4a28-a641-b1ee1bea8cac",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We have a set of jobs "
            ],
            [
              "J={a,b,c,d,e,f,g}",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Let "
            ],
            [
              "j in J",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " be a job than its start at "
            ],
            [
              "sj",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and ends at "
            ],
            [
              "fj",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Two jobs are compatible if they don’t overlap. A picture as example: "
            ],
            [
              "intervall_scheduling.png",
              [
                [
                  "a",
                  "https://postimg.org/image/6etvj3k81/"
                ]
              ]
            ],
            [
              " The goal is to find the "
            ],
            [
              "maximum subset of mutually compatible jobs",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". There are several greedy approaches for this problem:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "We have a set of jobs "
          },
          {
            "Text": "J={a,b,c,d,e,f,g}",
            "AttrFlags": 2
          },
          {
            "Text": ". Let "
          },
          {
            "Text": "j in J",
            "AttrFlags": 2
          },
          {
            "Text": " be a job than its start at "
          },
          {
            "Text": "sj",
            "AttrFlags": 2
          },
          {
            "Text": " and ends at "
          },
          {
            "Text": "fj",
            "AttrFlags": 2
          },
          {
            "Text": ". Two jobs are compatible if they don’t overlap. A picture as example: "
          },
          {
            "Text": "intervall_scheduling.png",
            "Link": "https://postimg.org/image/6etvj3k81/"
          },
          {
            "Text": " The goal is to find the "
          },
          {
            "Text": "maximum subset of mutually compatible jobs",
            "AttrFlags": 1
          },
          {
            "Text": ". There are several greedy approaches for this problem:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929272367,
        "id": "720e1ad2-497b-48ee-9f4c-dc7cea29f0a9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929272367,
        "parent_id": "1079cca6-6da6-4a28-a641-b1ee1bea8cac",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Earliest start time",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ": Consider jobs in ascending order of "
            ],
            [
              "sj",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Earliest start time",
            "AttrFlags": 1
          },
          {
            "Text": ": Consider jobs in ascending order of "
          },
          {
            "Text": "sj",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929272368,
        "id": "8062f428-149f-4111-a680-67d06e27358c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929272368,
        "parent_id": "1079cca6-6da6-4a28-a641-b1ee1bea8cac",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Earliest finish time",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ": Consider jobs in ascending order of "
            ],
            [
              "fj",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Earliest finish time",
            "AttrFlags": 1
          },
          {
            "Text": ": Consider jobs in ascending order of "
          },
          {
            "Text": "fj",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929272368,
        "id": "9d2ded0e-c488-4223-81f6-5d704f3c281a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929272368,
        "parent_id": "1079cca6-6da6-4a28-a641-b1ee1bea8cac",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Shortest interval",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ": Consider jobs in ascending order of "
            ],
            [
              "fj-sj",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Shortest interval",
            "AttrFlags": 1
          },
          {
            "Text": ": Consider jobs in ascending order of "
          },
          {
            "Text": "fj-sj",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929272368,
        "id": "1f24b5fc-5575-459a-80d8-5ffceaf57132",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929272368,
        "parent_id": "1079cca6-6da6-4a28-a641-b1ee1bea8cac",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Fewest conflicts",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ": For each job "
            ],
            [
              "j",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", count the number of conflicting jobs "
            ],
            [
              "cj",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Fewest conflicts",
            "AttrFlags": 1
          },
          {
            "Text": ": For each job "
          },
          {
            "Text": "j",
            "AttrFlags": 2
          },
          {
            "Text": ", count the number of conflicting jobs "
          },
          {
            "Text": "cj",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929272369,
        "id": "2eab577a-db45-40e7-9ea8-08d46160345f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929272369,
        "parent_id": "1079cca6-6da6-4a28-a641-b1ee1bea8cac",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The question now is, which approach is really successfull. "
            ],
            [
              "Early start time",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " definetly not, here is a counter example "
            ],
            [
              "ce_early.png",
              [
                [
                  "a",
                  "https://postimg.org/image/x8zfx2zq9/"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "Shortest interval",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " is not optimal either "
            ],
            [
              "ce_shortest_intervall.png",
              [
                [
                  "a",
                  "https://postimg.org/image/m4npmnkur/"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "fewest conflicts",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " may indeed sound optimal, but here is a problem case for this approach: "
            ],
            [
              "ce_fewest_conflicts.png",
              [
                [
                  "a",
                  "https://postimg.org/image/48f87mmol/"
                ]
              ]
            ],
            [
              " Which leaves us with "
            ],
            [
              "earliest finish time",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". The pseudo code is quiet simple:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The question now is, which approach is really successfull. "
          },
          {
            "Text": "Early start time",
            "AttrFlags": 1
          },
          {
            "Text": " definetly not, here is a counter example "
          },
          {
            "Text": "ce_early.png",
            "Link": "https://postimg.org/image/x8zfx2zq9/"
          },
          {
            "Text": " "
          },
          {
            "Text": "Shortest interval",
            "AttrFlags": 1
          },
          {
            "Text": " is not optimal either "
          },
          {
            "Text": "ce_shortest_intervall.png",
            "Link": "https://postimg.org/image/m4npmnkur/"
          },
          {
            "Text": " and "
          },
          {
            "Text": "fewest conflicts",
            "AttrFlags": 1
          },
          {
            "Text": " may indeed sound optimal, but here is a problem case for this approach: "
          },
          {
            "Text": "ce_fewest_conflicts.png",
            "Link": "https://postimg.org/image/48f87mmol/"
          },
          {
            "Text": " Which leaves us with "
          },
          {
            "Text": "earliest finish time",
            "AttrFlags": 1
          },
          {
            "Text": ". The pseudo code is quiet simple:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929272370,
        "id": "a0b5923c-3f0d-4264-a10b-d36298a64418",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929272370,
        "parent_id": "1079cca6-6da6-4a28-a641-b1ee1bea8cac",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Sort jobs by finish time so that "
            ],
            [
              "f1\u003c=f2\u003c=...\u003c=fn",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Sort jobs by finish time so that "
          },
          {
            "Text": "f1\u003c=f2\u003c=...\u003c=fn",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929272370,
        "id": "f7831f1a-9e44-4ec6-b38c-1397e1d4a37c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929272370,
        "parent_id": "1079cca6-6da6-4a28-a641-b1ee1bea8cac",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Let "
            ],
            [
              "A",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " be an empty set"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Let "
          },
          {
            "Text": "A",
            "AttrFlags": 2
          },
          {
            "Text": " be an empty set"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929272371,
        "id": "3794f068-7eb9-4d33-a67c-3cab536511c8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929272371,
        "parent_id": "1079cca6-6da6-4a28-a641-b1ee1bea8cac",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "for "
            ],
            [
              "j=1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to "
            ],
            [
              "n",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " if "
            ],
            [
              "j",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is compatible to "
            ],
            [
              "all",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " jobs in "
            ],
            [
              "A",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " set "
            ],
            [
              "A=A+{j}",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "for "
          },
          {
            "Text": "j=1",
            "AttrFlags": 2
          },
          {
            "Text": " to "
          },
          {
            "Text": "n",
            "AttrFlags": 2
          },
          {
            "Text": " if "
          },
          {
            "Text": "j",
            "AttrFlags": 2
          },
          {
            "Text": " is compatible to "
          },
          {
            "Text": "all",
            "AttrFlags": 1
          },
          {
            "Text": " jobs in "
          },
          {
            "Text": "A",
            "AttrFlags": 2
          },
          {
            "Text": " set "
          },
          {
            "Text": "A=A+{j}",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929272371,
        "id": "8c571b8f-c3e9-4ff4-bcbd-7aec281a84f2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929272371,
        "parent_id": "1079cca6-6da6-4a28-a641-b1ee1bea8cac",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is a "
            ],
            [
              "maximum subset of mutually compatible jobs",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "A",
            "AttrFlags": 2
          },
          {
            "Text": " is a "
          },
          {
            "Text": "maximum subset of mutually compatible jobs",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929272371,
        "id": "cc960af3-eca8-40a3-8d9c-b84800fc88e0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929272371,
        "parent_id": "1079cca6-6da6-4a28-a641-b1ee1bea8cac",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Or as C++ program:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Or as C++ program:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929272371,
        "id": "51e8dbe2-8510-4139-9d7d-8595a510a88a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929272371,
        "parent_id": "1079cca6-6da6-4a28-a641-b1ee1bea8cac",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003ciostream\u003e\n#include \u003cutility\u003e\n#include \u003ctuple\u003e\n#include \u003cvector\u003e\n#include \u003calgorithm\u003e\n\nconst int jobCnt = 10;\n\n// Job start times\nconst int startTimes[] = { 2, 3, 1, 4, 3, 2, 6, 7, 8, 9};\n\n// Job end times\nconst int endTimes[]   = { 4, 4, 3, 5, 5, 5, 8, 9, 9, 10};\n\nusing namespace std;\n\nint main()\n{\n    vector\u003cpair\u003cint,int\u003e\u003e jobs;\n    \n    for(int i=0; i\u003cjobCnt; ++i)\n        jobs.push_back(make_pair(startTimes[i], endTimes[i]));\n    \n    // step 1: sort\n    sort(jobs.begin(), jobs.end(),[](pair\u003cint,int\u003e p1, pair\u003cint,int\u003e p2) \n                                     { return p1.second \u003c p2.second; });\n    \n    // step 2: empty set A\n    vector\u003cint\u003e A;\n    \n    // step 3:\n    for(int i=0; i\u003cjobCnt; ++i)\n    {\n        auto job = jobs[i];\n        bool isCompatible = true;\n        \n        for(auto jobIndex : A)\n        {\n            // test whether the actual job and the job from A are incompatible\n            if(job.second \u003e= jobs[jobIndex].first \u0026\u0026\n               job.first  \u003c= jobs[jobIndex].second)\n            {\n                isCompatible = false;\n                break;\n            }\n        }\n    \n        if(isCompatible)\n            A.push_back(i);\n    }\n    \n    //step 4: print A\n    cout \u003c\u003c \"Compatible: \";\n    \n    for(auto i : A)\n        cout \u003c\u003c \"(\" \u003c\u003c jobs[i].first \u003c\u003c \",\" \u003c\u003c jobs[i].second \u003c\u003c \") \";\n    cout \u003c\u003c endl;\n    \n    return 0;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003ciostream\u003e\n#include \u003cutility\u003e\n#include \u003ctuple\u003e\n#include \u003cvector\u003e\n#include \u003calgorithm\u003e\n\nconst int jobCnt = 10;\n\n// Job start times\nconst int startTimes[] = { 2, 3, 1, 4, 3, 2, 6, 7, 8, 9};\n\n// Job end times\nconst int endTimes[]   = { 4, 4, 3, 5, 5, 5, 8, 9, 9, 10};\n\nusing namespace std;\n\nint main()\n{\n    vector\u003cpair\u003cint,int\u003e\u003e jobs;\n    \n    for(int i=0; i\u003cjobCnt; ++i)\n        jobs.push_back(make_pair(startTimes[i], endTimes[i]));\n    \n    // step 1: sort\n    sort(jobs.begin(), jobs.end(),[](pair\u003cint,int\u003e p1, pair\u003cint,int\u003e p2) \n                                     { return p1.second \u003c p2.second; });\n    \n    // step 2: empty set A\n    vector\u003cint\u003e A;\n    \n    // step 3:\n    for(int i=0; i\u003cjobCnt; ++i)\n    {\n        auto job = jobs[i];\n        bool isCompatible = true;\n        \n        for(auto jobIndex : A)\n        {\n            // test whether the actual job and the job from A are incompatible\n            if(job.second \u003e= jobs[jobIndex].first \u0026\u0026\n               job.first  \u003c= jobs[jobIndex].second)\n            {\n                isCompatible = false;\n                break;\n            }\n        }\n    \n        if(isCompatible)\n            A.push_back(i);\n    }\n    \n    //step 4: print A\n    cout \u003c\u003c \"Compatible: \";\n    \n    for(auto i : A)\n        cout \u003c\u003c \"(\" \u003c\u003c jobs[i].first \u003c\u003c \",\" \u003c\u003c jobs[i].second \u003c\u003c \") \";\n    cout \u003c\u003c endl;\n    \n    return 0;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929272371,
        "id": "41d4af45-cd3d-4921-973a-5a53cb063e6a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929272371,
        "parent_id": "1079cca6-6da6-4a28-a641-b1ee1bea8cac",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The output for this example is: "
            ],
            [
              "Compatible: (1,3) (4,5) (6,8) (9,10)",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The output for this example is: "
          },
          {
            "Text": "Compatible: (1,3) (4,5) (6,8) (9,10)",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929272371,
        "id": "48972f86-306a-4024-9222-4089ae9c20af",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929272371,
        "parent_id": "1079cca6-6da6-4a28-a641-b1ee1bea8cac",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The implementation of the algorithm is clearly in Θ(n^2). There is a Θ(n log n) implementation and the interested reader may continue reading below (Java Example)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The implementation of the algorithm is clearly in Θ(n^2). There is a Θ(n log n) implementation and the interested reader may continue reading below (Java Example)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929272373,
        "id": "d5b341d7-73c3-402b-a2a8-2950aeefeb70",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929272373,
        "parent_id": "1079cca6-6da6-4a28-a641-b1ee1bea8cac",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Now we have a greedy algorithm for the interval scheduling problem, but is it optimal?"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Now we have a greedy algorithm for the interval scheduling problem, but is it optimal?"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929272374,
        "id": "feab90ea-4a92-4fc5-a2d5-a69da22cad4a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929272374,
        "parent_id": "1079cca6-6da6-4a28-a641-b1ee1bea8cac",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Proposition:",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " The greedy algorithm "
            ],
            [
              "earliest finish time",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " is optimal."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Proposition:",
            "AttrFlags": 1
          },
          {
            "Text": " The greedy algorithm "
          },
          {
            "Text": "earliest finish time",
            "AttrFlags": 1
          },
          {
            "Text": " is optimal."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929272374,
        "id": "634f4a66-95c7-4615-9948-61fca6c858e9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929272374,
        "parent_id": "1079cca6-6da6-4a28-a641-b1ee1bea8cac",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Proof:",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "(by contradiction)",
              [
                [
                  "i"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Proof:",
            "AttrFlags": 1
          },
          {
            "Text": "(by contradiction)",
            "AttrFlags": 4
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929272374,
        "id": "1ba217ac-2ba6-4fca-b464-0405ffe15001",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929272374,
        "parent_id": "1079cca6-6da6-4a28-a641-b1ee1bea8cac",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Assume greedy is not optimal and "
            ],
            [
              "i1,i2,...,ik",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " denote the set of jobs selected by greedy. Let "
            ],
            [
              "j1,j2,...,jm",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " denote the set of jobs in an "
            ],
            [
              "optimal",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " solution with "
            ],
            [
              "i1=j1,i2=j2,...,ir=jr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " for the "
            ],
            [
              "largest possible",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " value of "
            ],
            [
              "r",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Assume greedy is not optimal and "
          },
          {
            "Text": "i1,i2,...,ik",
            "AttrFlags": 2
          },
          {
            "Text": " denote the set of jobs selected by greedy. Let "
          },
          {
            "Text": "j1,j2,...,jm",
            "AttrFlags": 2
          },
          {
            "Text": " denote the set of jobs in an "
          },
          {
            "Text": "optimal",
            "AttrFlags": 1
          },
          {
            "Text": " solution with "
          },
          {
            "Text": "i1=j1,i2=j2,...,ir=jr",
            "AttrFlags": 2
          },
          {
            "Text": " for the "
          },
          {
            "Text": "largest possible",
            "AttrFlags": 1
          },
          {
            "Text": " value of "
          },
          {
            "Text": "r",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929272375,
        "id": "c7d8217b-288e-492f-b933-645d75989da5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929272375,
        "parent_id": "1079cca6-6da6-4a28-a641-b1ee1bea8cac",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The job "
            ],
            [
              "i(r+1)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " exists and finishes before "
            ],
            [
              "j(r+1)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (earliest finish). But than is "
            ],
            [
              "j1,j2,...,jr,i(r+1),j(r+2),...,jm",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " also a "
            ],
            [
              "optimal",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " solution and for all "
            ],
            [
              "k",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in "
            ],
            [
              "[1,(r+1)]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is "
            ],
            [
              "jk=ik",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". thats a "
            ],
            [
              "contradiction",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " to the maximality of "
            ],
            [
              "r",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". This concludes the proof."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The job "
          },
          {
            "Text": "i(r+1)",
            "AttrFlags": 2
          },
          {
            "Text": " exists and finishes before "
          },
          {
            "Text": "j(r+1)",
            "AttrFlags": 2
          },
          {
            "Text": " (earliest finish). But than is "
          },
          {
            "Text": "j1,j2,...,jr,i(r+1),j(r+2),...,jm",
            "AttrFlags": 2
          },
          {
            "Text": " also a "
          },
          {
            "Text": "optimal",
            "AttrFlags": 1
          },
          {
            "Text": " solution and for all "
          },
          {
            "Text": "k",
            "AttrFlags": 2
          },
          {
            "Text": " in "
          },
          {
            "Text": "[1,(r+1)]",
            "AttrFlags": 2
          },
          {
            "Text": " is "
          },
          {
            "Text": "jk=ik",
            "AttrFlags": 2
          },
          {
            "Text": ". thats a "
          },
          {
            "Text": "contradiction",
            "AttrFlags": 1
          },
          {
            "Text": " to the maximality of "
          },
          {
            "Text": "r",
            "AttrFlags": 2
          },
          {
            "Text": ". This concludes the proof."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929272375,
        "id": "88fa4593-99d6-4a34-8436-4b19b9e1f2db",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929272375,
        "parent_id": "1079cca6-6da6-4a28-a641-b1ee1bea8cac",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This second example demonstrates that there are usually many possible greedy strategies but only some or even none might find the optimal solution in every instance."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This second example demonstrates that there are usually many possible greedy strategies but only some or even none might find the optimal solution in every instance."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929272375,
        "id": "729fc1d7-01f7-45d5-ba93-9b5d4c3523cd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929272375,
        "parent_id": "1079cca6-6da6-4a28-a641-b1ee1bea8cac",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Below is a Java program that runs in Θ(n log n)"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Below is a Java program that runs in Θ(n log n)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929272375,
        "id": "25aa8463-90a2-4322-96ea-1d7c6b0b670c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929272375,
        "parent_id": "1079cca6-6da6-4a28-a641-b1ee1bea8cac",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "import java.util.Arrays;\nimport java.util.Comparator;\n\nclass Job\n{\n    int start, finish, profit;\n\n    Job(int start, int finish, int profit)\n    {\n        this.start = start;\n        this.finish = finish;\n        this.profit = profit;\n    }\n}\n\n\nclass JobComparator implements Comparator\u003cJob\u003e\n{\n    public int compare(Job a, Job b)\n    {\n        return a.finish \u003c b.finish ? -1 : a.finish == b.finish ? 0 : 1;\n    }\n}\n\npublic class WeightedIntervalScheduling\n{\n    static public int binarySearch(Job jobs[], int index)\n    {\n        int lo = 0, hi = index - 1;\n\n        while (lo \u003c= hi)\n        {\n            int mid = (lo + hi) / 2;\n            if (jobs[mid].finish \u003c= jobs[index].start)\n            {\n                if (jobs[mid + 1].finish \u003c= jobs[index].start)\n                    lo = mid + 1;\n                else\n                    return mid;\n            }\n            else\n                hi = mid - 1;\n        }\n\n        return -1;\n    }\n\n    static public int schedule(Job jobs[])\n    {\n        Arrays.sort(jobs, new JobComparator());\n\n        int n = jobs.length;\n        int table[] = new int[n];\n        table[0] = jobs[0].profit;\n\n        for (int i=1; i\u003cn; i++)\n        {\n            int inclProf = jobs[i].profit;\n            int l = binarySearch(jobs, i);\n            if (l != -1)\n                inclProf += table[l];\n\n            table[i] = Math.max(inclProf, table[i-1]);\n        }\n\n        return table[n-1];\n    }\n\n    public static void main(String[] args)\n    {\n        Job jobs[] = {new Job(1, 2, 50), new Job(3, 5, 20),\n                    new Job(6, 19, 100), new Job(2, 100, 200)};\n\n        System.out.println(\"Optimal profit is \" + schedule(jobs));\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "import java.util.Arrays;\nimport java.util.Comparator;\n\nclass Job\n{\n    int start, finish, profit;\n\n    Job(int start, int finish, int profit)\n    {\n        this.start = start;\n        this.finish = finish;\n        this.profit = profit;\n    }\n}\n\n\nclass JobComparator implements Comparator\u003cJob\u003e\n{\n    public int compare(Job a, Job b)\n    {\n        return a.finish \u003c b.finish ? -1 : a.finish == b.finish ? 0 : 1;\n    }\n}\n\npublic class WeightedIntervalScheduling\n{\n    static public int binarySearch(Job jobs[], int index)\n    {\n        int lo = 0, hi = index - 1;\n\n        while (lo \u003c= hi)\n        {\n            int mid = (lo + hi) / 2;\n            if (jobs[mid].finish \u003c= jobs[index].start)\n            {\n                if (jobs[mid + 1].finish \u003c= jobs[index].start)\n                    lo = mid + 1;\n                else\n                    return mid;\n            }\n            else\n                hi = mid - 1;\n        }\n\n        return -1;\n    }\n\n    static public int schedule(Job jobs[])\n    {\n        Arrays.sort(jobs, new JobComparator());\n\n        int n = jobs.length;\n        int table[] = new int[n];\n        table[0] = jobs[0].profit;\n\n        for (int i=1; i\u003cn; i++)\n        {\n            int inclProf = jobs[i].profit;\n            int l = binarySearch(jobs, i);\n            if (l != -1)\n                inclProf += table[l];\n\n            table[i] = Math.max(inclProf, table[i-1]);\n        }\n\n        return table[n-1];\n    }\n\n    public static void main(String[] args)\n    {\n        Job jobs[] = {new Job(1, 2, 50), new Job(3, 5, 20),\n                    new Job(6, 19, 100), new Job(2, 100, 200)};\n\n        System.out.println(\"Optimal profit is \" + schedule(jobs));\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929272375,
        "id": "7013e587-05ee-4890-87a8-d13043b91c4b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929272375,
        "parent_id": "1079cca6-6da6-4a28-a641-b1ee1bea8cac",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "And the expected output is:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "And the expected output is:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929272375,
        "id": "f4147b1d-c3a6-4273-bb0c-3b4962904ea6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929272375,
        "parent_id": "1079cca6-6da6-4a28-a641-b1ee1bea8cac",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Optimal profit is 250"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Optimal profit is 250",
        "code_language": "Plain Text"
      }
    ],
    "title": "Interval Scheduling",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}