{
  "ID": "4152b699-bcba-4c56-9af6-fceea49e715d",
  "Root": {
    "alive": true,
    "content": [
      "4facef63-106f-45a0-8183-b2d8b19357bb",
      "3cce97e7-3941-4728-b2a6-94209c61b36c",
      "0efd60a5-dbf7-4f6a-89ff-a37769a3d626",
      "3faae359-6697-40c8-af41-47da5dec8e1f",
      "1682713c-6df8-4c90-acd4-74203ee22b7d"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551928866727,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "4152b699-bcba-4c56-9af6-fceea49e715d",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551928866727,
    "parent_id": "2734ccd8-075a-412f-8976-e67dfd9416da",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Linear Equation"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928866723,
        "id": "4facef63-106f-45a0-8183-b2d8b19357bb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928866723,
        "parent_id": "4152b699-bcba-4c56-9af6-fceea49e715d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "There are two classes of methods for solving Linear Equations:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "There are two classes of methods for solving Linear Equations:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928866726,
        "id": "3cce97e7-3941-4728-b2a6-94209c61b36c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928866726,
        "parent_id": "4152b699-bcba-4c56-9af6-fceea49e715d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Direct Methods",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ": Common characteristics of direct methods are that they transform the original equation into equivalent equations that can be solved more easily, means we get solve directly from an equation."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Direct Methods",
            "AttrFlags": 1
          },
          {
            "Text": ": Common characteristics of direct methods are that they transform the original equation into equivalent equations that can be solved more easily, means we get solve directly from an equation."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928866727,
        "id": "0efd60a5-dbf7-4f6a-89ff-a37769a3d626",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928866727,
        "parent_id": "4152b699-bcba-4c56-9af6-fceea49e715d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Iterative Method",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ": Iterative or Indirect Methods, start with a guess of the solution and then repeatedly refine the solution until a certain convergence criterion is reached. Iterative methods are generally less efficient than direct methods because large number of operations required. Example- Jacobi’s Iteration Method, Gauss-Seidal Iteration Method."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Iterative Method",
            "AttrFlags": 1
          },
          {
            "Text": ": Iterative or Indirect Methods, start with a guess of the solution and then repeatedly refine the solution until a certain convergence criterion is reached. Iterative methods are generally less efficient than direct methods because large number of operations required. Example- Jacobi’s Iteration Method, Gauss-Seidal Iteration Method."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928866727,
        "id": "3faae359-6697-40c8-af41-47da5dec8e1f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928866727,
        "parent_id": "4152b699-bcba-4c56-9af6-fceea49e715d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Implementation in C-"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Implementation in C-"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928866727,
        "id": "1682713c-6df8-4c90-acd4-74203ee22b7d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928866727,
        "parent_id": "4152b699-bcba-4c56-9af6-fceea49e715d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "//Implementation of Jacobi's Method\nvoid JacobisMethod(int n, double x[n], double b[n], double a[n][n]){\n    double Nx[n]; //modified form of variables\n    int rootFound=0; //flag\n\n    int i, j;\n    while(!rootFound){\n        for(i=0; i\u003cn; i++){              //calculation\n            Nx[i]=b[i];\n\n            for(j=0; j\u003cn; j++){\n                if(i!=j) Nx[i] = Nx[i]-a[i][j]*x[j];\n            }\n            Nx[i] = Nx[i] / a[i][i];\n        }\n\n        rootFound=1;                    //verification\n        for(i=0; i\u003cn; i++){\n            if(!( (Nx[i]-x[i])/x[i] \u003e -0.000001 \u0026\u0026 (Nx[i]-x[i])/x[i] \u003c 0.000001 )){\n                rootFound=0;\n                break;\n            }\n        }\n\n        for(i=0; i\u003cn; i++){             //evaluation\n            x[i]=Nx[i];\n        }\n    }\n\n    return ;\n}\n\n//Implementation of Gauss-Seidal Method\nvoid GaussSeidalMethod(int n, double x[n], double b[n], double a[n][n]){\n    double Nx[n]; //modified form of variables\n    int rootFound=0; //flag\n\n    int i, j;\n    for(i=0; i\u003cn; i++){                  //initialization\n        Nx[i]=x[i];\n    }\n\n    while(!rootFound){\n        for(i=0; i\u003cn; i++){              //calculation\n            Nx[i]=b[i];\n\n            for(j=0; j\u003cn; j++){\n                if(i!=j) Nx[i] = Nx[i]-a[i][j]*Nx[j];\n            }\n            Nx[i] = Nx[i] / a[i][i];\n        }\n\n        rootFound=1;                    //verification\n        for(i=0; i\u003cn; i++){\n            if(!( (Nx[i]-x[i])/x[i] \u003e -0.000001 \u0026\u0026 (Nx[i]-x[i])/x[i] \u003c 0.000001 )){\n                rootFound=0;\n                break;\n            }\n        }\n\n        for(i=0; i\u003cn; i++){             //evaluation\n            x[i]=Nx[i];\n        }\n    }\n\n    return ;\n}\n\n//Print array with comma separation\nvoid print(int n, double x[n]){\n    int i;\n    for(i=0; i\u003cn; i++){\n        printf(\"%lf, \", x[i]);\n    }\n    printf(\"\\n\\n\");\n\n    return ;\n}\n\nint main(){\n    //equation initialization\n    int n=3;    //number of variables\n\n    double x[n];    //variables\n\n    double b[n],    //constants\n        a[n][n];    //arguments\n\n    //assign values\n    a[0][0]=8; a[0][1]=2; a[0][2]=-2; b[0]=8;    //8x₁+2x₂-2x₃+8=0\n    a[1][0]=1; a[1][1]=-8; a[1][2]=3; b[1]=-4;   //x₁-8x₂+3x₃-4=0\n    a[2][0]=2; a[2][1]=1; a[2][2]=9; b[2]=12;    //2x₁+x₂+9x₃+12=0\n\n\n    int i;\n\n    for(i=0; i\u003cn; i++){                         //initialization\n        x[i]=0;\n    }\n    JacobisMethod(n, x, b, a);\n    print(n, x);\n\n\n    for(i=0; i\u003cn; i++){                         //initialization\n        x[i]=0;\n    }\n    GaussSeidalMethod(n, x, b, a);\n    print(n, x);\n\n    return 0;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "//Implementation of Jacobi's Method\nvoid JacobisMethod(int n, double x[n], double b[n], double a[n][n]){\n    double Nx[n]; //modified form of variables\n    int rootFound=0; //flag\n\n    int i, j;\n    while(!rootFound){\n        for(i=0; i\u003cn; i++){              //calculation\n            Nx[i]=b[i];\n\n            for(j=0; j\u003cn; j++){\n                if(i!=j) Nx[i] = Nx[i]-a[i][j]*x[j];\n            }\n            Nx[i] = Nx[i] / a[i][i];\n        }\n\n        rootFound=1;                    //verification\n        for(i=0; i\u003cn; i++){\n            if(!( (Nx[i]-x[i])/x[i] \u003e -0.000001 \u0026\u0026 (Nx[i]-x[i])/x[i] \u003c 0.000001 )){\n                rootFound=0;\n                break;\n            }\n        }\n\n        for(i=0; i\u003cn; i++){             //evaluation\n            x[i]=Nx[i];\n        }\n    }\n\n    return ;\n}\n\n//Implementation of Gauss-Seidal Method\nvoid GaussSeidalMethod(int n, double x[n], double b[n], double a[n][n]){\n    double Nx[n]; //modified form of variables\n    int rootFound=0; //flag\n\n    int i, j;\n    for(i=0; i\u003cn; i++){                  //initialization\n        Nx[i]=x[i];\n    }\n\n    while(!rootFound){\n        for(i=0; i\u003cn; i++){              //calculation\n            Nx[i]=b[i];\n\n            for(j=0; j\u003cn; j++){\n                if(i!=j) Nx[i] = Nx[i]-a[i][j]*Nx[j];\n            }\n            Nx[i] = Nx[i] / a[i][i];\n        }\n\n        rootFound=1;                    //verification\n        for(i=0; i\u003cn; i++){\n            if(!( (Nx[i]-x[i])/x[i] \u003e -0.000001 \u0026\u0026 (Nx[i]-x[i])/x[i] \u003c 0.000001 )){\n                rootFound=0;\n                break;\n            }\n        }\n\n        for(i=0; i\u003cn; i++){             //evaluation\n            x[i]=Nx[i];\n        }\n    }\n\n    return ;\n}\n\n//Print array with comma separation\nvoid print(int n, double x[n]){\n    int i;\n    for(i=0; i\u003cn; i++){\n        printf(\"%lf, \", x[i]);\n    }\n    printf(\"\\n\\n\");\n\n    return ;\n}\n\nint main(){\n    //equation initialization\n    int n=3;    //number of variables\n\n    double x[n];    //variables\n\n    double b[n],    //constants\n        a[n][n];    //arguments\n\n    //assign values\n    a[0][0]=8; a[0][1]=2; a[0][2]=-2; b[0]=8;    //8x₁+2x₂-2x₃+8=0\n    a[1][0]=1; a[1][1]=-8; a[1][2]=3; b[1]=-4;   //x₁-8x₂+3x₃-4=0\n    a[2][0]=2; a[2][1]=1; a[2][2]=9; b[2]=12;    //2x₁+x₂+9x₃+12=0\n\n\n    int i;\n\n    for(i=0; i\u003cn; i++){                         //initialization\n        x[i]=0;\n    }\n    JacobisMethod(n, x, b, a);\n    print(n, x);\n\n\n    for(i=0; i\u003cn; i++){                         //initialization\n        x[i]=0;\n    }\n    GaussSeidalMethod(n, x, b, a);\n    print(n, x);\n\n    return 0;\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "Linear Equation",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}