{
  "ID": "5f9d16f1-2062-49d0-b9e6-2e687ddaa4e0",
  "Root": {
    "alive": true,
    "content": [
      "7d7028db-62b4-44db-b569-572c8d11dab6",
      "c30f59ad-a773-40e0-862a-f5311689cafb",
      "c80a1f9a-2fc5-4bc0-8b35-f7a416332716",
      "1611db79-34d3-4798-bbd5-b4dc2d14b1bc",
      "aff5b3eb-959d-4f38-9655-58a87af0f833",
      "71e01171-d254-4ad2-9833-b2baa0a48ee3",
      "7ec2afce-8a8c-4e18-aa79-887610d3bf37",
      "04c820d3-e4e5-4eaa-bba3-951227660eac",
      "99129de1-958f-4194-b123-d9aa6e182346",
      "c75bb85e-e9a2-414e-aa1c-03fafe9d0ea8",
      "1cffc1f5-c31d-4e66-8d34-094f3030cf2b"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551929668272,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "5f9d16f1-2062-49d0-b9e6-2e687ddaa4e0",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551929668272,
    "parent_id": "924ef53c-fe52-4d0f-8233-1cbc0f7eb8f7",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "KMP-Example"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929668267,
        "id": "7d7028db-62b4-44db-b569-572c8d11dab6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929668267,
        "parent_id": "5f9d16f1-2062-49d0-b9e6-2e687ddaa4e0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Algorithm",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Algorithm",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929668269,
        "id": "c30f59ad-a773-40e0-862a-f5311689cafb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929668269,
        "parent_id": "5f9d16f1-2062-49d0-b9e6-2e687ddaa4e0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This algorithm is a two step process.First we create a auxiliary array lps[] and then use this array for searching the pattern."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This algorithm is a two step process.First we create a auxiliary array lps[] and then use this array for searching the pattern."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929668270,
        "id": "c80a1f9a-2fc5-4bc0-8b35-f7a416332716",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929668270,
        "parent_id": "5f9d16f1-2062-49d0-b9e6-2e687ddaa4e0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Preprocessing",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " :"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Preprocessing",
            "AttrFlags": 1
          },
          {
            "Text": " :"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929668270,
        "id": "1611db79-34d3-4798-bbd5-b4dc2d14b1bc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929668270,
        "parent_id": "5f9d16f1-2062-49d0-b9e6-2e687ddaa4e0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We pre-process the pattern and create an auxiliary array lps[] which is used to skip characters while matching."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "We pre-process the pattern and create an auxiliary array lps[] which is used to skip characters while matching."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929668270,
        "id": "aff5b3eb-959d-4f38-9655-58a87af0f833",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929668270,
        "parent_id": "5f9d16f1-2062-49d0-b9e6-2e687ddaa4e0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Here lps[] indicates longest proper prefix which is also suffix.A proper prefix is prefix in which whole string is not"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Here lps[] indicates longest proper prefix which is also suffix.A proper prefix is prefix in which whole string is not"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929668270,
        "id": "71e01171-d254-4ad2-9833-b2baa0a48ee3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929668270,
        "parent_id": "5f9d16f1-2062-49d0-b9e6-2e687ddaa4e0",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "included.For example, prefixes of string **ABC** are **“ ”**,\n**“A”**, **“AB”** and **“ABC”**. Proper prefixes are **“ ”**, **“A”** and **“AB”**. Suffixes of the string are **“ ”**, **“C”**, **“BC”** and **“ABC”**."
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "included.For example, prefixes of string **ABC** are **“ ”**,\n**“A”**, **“AB”** and **“ABC”**. Proper prefixes are **“ ”**, **“A”** and **“AB”**. Suffixes of the string are **“ ”**, **“C”**, **“BC”** and **“ABC”**.",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929668271,
        "id": "7ec2afce-8a8c-4e18-aa79-887610d3bf37",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929668271,
        "parent_id": "5f9d16f1-2062-49d0-b9e6-2e687ddaa4e0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Searching",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Searching",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929668271,
        "id": "04c820d3-e4e5-4eaa-bba3-951227660eac",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929668271,
        "parent_id": "5f9d16f1-2062-49d0-b9e6-2e687ddaa4e0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We keep matching characters "
            ],
            [
              "txt[i]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "pat[j]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " and keep incrementing i and j while "
            ],
            [
              "pat[j]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "txt[i]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " keep matching."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "We keep matching characters "
          },
          {
            "Text": "txt[i]",
            "AttrFlags": 1
          },
          {
            "Text": " and "
          },
          {
            "Text": "pat[j]",
            "AttrFlags": 1
          },
          {
            "Text": " and keep incrementing i and j while "
          },
          {
            "Text": "pat[j]",
            "AttrFlags": 1
          },
          {
            "Text": " and "
          },
          {
            "Text": "txt[i]",
            "AttrFlags": 1
          },
          {
            "Text": " keep matching."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929668272,
        "id": "99129de1-958f-4194-b123-d9aa6e182346",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929668272,
        "parent_id": "5f9d16f1-2062-49d0-b9e6-2e687ddaa4e0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When we see a mismatch,we know that characters "
            ],
            [
              "pat[0..j-1]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " match with "
            ],
            [
              "txt[i-j+1…i-1]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ".We also know that lps[j-1] is count of characters of "
            ],
            [
              "pat[0…j-1]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " that are both proper prefix and suffix.From this we can conclude that we do not need to match these "
            ],
            [
              "lps[j-1]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " characters with "
            ],
            [
              "txt[i-j…i-1]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " because we know that these characters will match anyway."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "When we see a mismatch,we know that characters "
          },
          {
            "Text": "pat[0..j-1]",
            "AttrFlags": 1
          },
          {
            "Text": " match with "
          },
          {
            "Text": "txt[i-j+1…i-1]",
            "AttrFlags": 1
          },
          {
            "Text": ".We also know that lps[j-1] is count of characters of "
          },
          {
            "Text": "pat[0…j-1]",
            "AttrFlags": 1
          },
          {
            "Text": " that are both proper prefix and suffix.From this we can conclude that we do not need to match these "
          },
          {
            "Text": "lps[j-1]",
            "AttrFlags": 1
          },
          {
            "Text": " characters with "
          },
          {
            "Text": "txt[i-j…i-1]",
            "AttrFlags": 1
          },
          {
            "Text": " because we know that these characters will match anyway."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929668272,
        "id": "c75bb85e-e9a2-414e-aa1c-03fafe9d0ea8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929668272,
        "parent_id": "5f9d16f1-2062-49d0-b9e6-2e687ddaa4e0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Implementaion in Java",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Implementaion in Java",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929668272,
        "id": "1cffc1f5-c31d-4e66-8d34-094f3030cf2b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929668272,
        "parent_id": "5f9d16f1-2062-49d0-b9e6-2e687ddaa4e0",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class KMP {\n\n    public static void main(String[] args) {\n        // TODO Auto-generated method stub\n        String str = \"abcabdabc\";\n        String pattern = \"abc\";\n        KMP obj = new KMP();\n        System.out.println(obj.patternExistKMP(str.toCharArray(), pattern.toCharArray()));\n    }\n    \n    public int[] computeLPS(char[] str){\n        int lps[] = new int[str.length];\n        \n        lps[0] = 0;\n        int j = 0;\n        for(int i =1;i\u003cstr.length;i++){\n            if(str[j] == str[i]){\n                lps[i] = j+1;\n                j++;\n                i++;\n            }else{\n                if(j!=0){\n                    j = lps[j-1];\n                }else{\n                    lps[i] = j+1;\n                    i++;\n                }\n            }\n            \n        }\n        \n        return lps;\n    }\n    \n    public boolean patternExistKMP(char[] text,char[] pat){\n        int[] lps = computeLPS(pat);\n        int i=0,j=0;\n        while(i\u003ctext.length \u0026\u0026 j\u003cpat.length){\n            if(text[i] == pat[j]){\n                i++;\n                j++;\n            }else{\n                if(j!=0){\n                    j = lps[j-1];\n                }else{\n                    i++;\n                }\n            }\n        }\n        \n        if(j==pat.length)\n            return true;\n        return false;\n    }\n\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class KMP {\n\n    public static void main(String[] args) {\n        // TODO Auto-generated method stub\n        String str = \"abcabdabc\";\n        String pattern = \"abc\";\n        KMP obj = new KMP();\n        System.out.println(obj.patternExistKMP(str.toCharArray(), pattern.toCharArray()));\n    }\n    \n    public int[] computeLPS(char[] str){\n        int lps[] = new int[str.length];\n        \n        lps[0] = 0;\n        int j = 0;\n        for(int i =1;i\u003cstr.length;i++){\n            if(str[j] == str[i]){\n                lps[i] = j+1;\n                j++;\n                i++;\n            }else{\n                if(j!=0){\n                    j = lps[j-1];\n                }else{\n                    lps[i] = j+1;\n                    i++;\n                }\n            }\n            \n        }\n        \n        return lps;\n    }\n    \n    public boolean patternExistKMP(char[] text,char[] pat){\n        int[] lps = computeLPS(pat);\n        int i=0,j=0;\n        while(i\u003ctext.length \u0026\u0026 j\u003cpat.length){\n            if(text[i] == pat[j]){\n                i++;\n                j++;\n            }else{\n                if(j!=0){\n                    j = lps[j-1];\n                }else{\n                    i++;\n                }\n            }\n        }\n        \n        if(j==pat.length)\n            return true;\n        return false;\n    }\n\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "KMP-Example",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}