{
  "ID": "b13998b5-b067-4f37-9fb6-20dddf0e7a58",
  "Root": {
    "alive": true,
    "content": [
      "f4f48b42-af44-45b2-9b38-b4f0ef80738f",
      "56b97ad7-2f51-48ef-b844-b66b45dd0562",
      "690079a8-404f-483e-b76b-e082ad08fb93",
      "f0945782-dc45-48d1-bd4b-153b8232f6d8",
      "7d3f937a-2289-43d0-9701-ee4a85b94b25",
      "f3b45881-36d8-45f6-b576-fbfbdce13aa8",
      "09ef9922-efb2-4958-b786-c2e600364122",
      "97a83e85-1af5-4183-8c66-b8a4c8700dba",
      "bae02ec4-71a7-4f8a-9101-6cd7eecab8ce",
      "1aaed247-defb-4119-a093-28e5966a1970",
      "b3428c53-06c5-4754-999a-caa71ca5972b",
      "e7a1d87f-b1e8-4f3e-ac34-36897b4220f4",
      "b7972cec-e92b-4de0-8d80-200e0bfc45c7",
      "60265ac7-bea9-4831-8922-b4ca65fdf816",
      "0b320016-4e1e-4108-ae5a-b8c89f7164ca",
      "7ad6a473-ac4d-4d60-a007-0304bc508daf",
      "a1f5943d-0178-4a55-943c-2cf9cd3ba296",
      "2cbc289b-c4b1-4ad6-a02f-f245a031a4f7",
      "cc4fb339-cec3-4b25-802b-b27159e1ff00",
      "403f980a-86d0-44a8-b567-069e572103a3",
      "2e5dc142-79e0-4943-bdf3-7616f3aea4be",
      "c77d4058-7a89-452f-bc67-72d270d6e84f",
      "597d5f3d-2624-4f6a-9767-52b2f3c911c0",
      "0d362a87-6073-473c-acb2-305cafe9abb4",
      "126e093b-31e7-4f59-9245-7814bd2c79b9"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551928028258,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "b13998b5-b067-4f37-9fb6-20dddf0e7a58",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551928028258,
    "parent_id": "8ae5c9b5-b80d-4e27-930b-0dbbf5b2a075",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Storing Graphs Adjacency Matrix"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928028248,
        "id": "f4f48b42-af44-45b2-9b38-b4f0ef80738f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928028248,
        "parent_id": "b13998b5-b067-4f37-9fb6-20dddf0e7a58",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To store a graph, two methods are common:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To store a graph, two methods are common:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928028251,
        "id": "56b97ad7-2f51-48ef-b844-b66b45dd0562",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928028251,
        "parent_id": "b13998b5-b067-4f37-9fb6-20dddf0e7a58",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Adjacency Matrix"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Adjacency Matrix"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928028251,
        "id": "690079a8-404f-483e-b76b-e082ad08fb93",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928028251,
        "parent_id": "b13998b5-b067-4f37-9fb6-20dddf0e7a58",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Adjacency List"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Adjacency List"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928028253,
        "id": "f0945782-dc45-48d1-bd4b-153b8232f6d8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928028253,
        "parent_id": "b13998b5-b067-4f37-9fb6-20dddf0e7a58",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "An "
            ],
            [
              "adjacency matrix",
              [
                [
                  "a",
                  "https://en.wikipedia.org/wiki/Adjacency_matrix"
                ]
              ]
            ],
            [
              " is a square matrix used to represent a finite graph. The elements of the matrix indicate whether pairs of vertices are adjacent or not in the graph."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "An "
          },
          {
            "Text": "adjacency matrix",
            "Link": "https://en.wikipedia.org/wiki/Adjacency_matrix"
          },
          {
            "Text": " is a square matrix used to represent a finite graph. The elements of the matrix indicate whether pairs of vertices are adjacent or not in the graph."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928028253,
        "id": "7d3f937a-2289-43d0-9701-ee4a85b94b25",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928028253,
        "parent_id": "b13998b5-b067-4f37-9fb6-20dddf0e7a58",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Adjacent means ‘next to or adjoining something else’ or to be beside something. For example, your neighbors are adjacent to you. In graph theory, if we can go to "
            ],
            [
              "node B",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " from "
            ],
            [
              "node A",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", we can say that "
            ],
            [
              "node B",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " is adjacent to "
            ],
            [
              "node A",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". Now we will learn about how to store which nodes are adjacent to which one via Adjacency Matrix. This means, we will represent which nodes share edge between them. Here matrix means 2D array."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Adjacent means ‘next to or adjoining something else’ or to be beside something. For example, your neighbors are adjacent to you. In graph theory, if we can go to "
          },
          {
            "Text": "node B",
            "AttrFlags": 1
          },
          {
            "Text": " from "
          },
          {
            "Text": "node A",
            "AttrFlags": 1
          },
          {
            "Text": ", we can say that "
          },
          {
            "Text": "node B",
            "AttrFlags": 1
          },
          {
            "Text": " is adjacent to "
          },
          {
            "Text": "node A",
            "AttrFlags": 1
          },
          {
            "Text": ". Now we will learn about how to store which nodes are adjacent to which one via Adjacency Matrix. This means, we will represent which nodes share edge between them. Here matrix means 2D array."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928028254,
        "id": "f3b45881-36d8-45f6-b576-fbfbdce13aa8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928028254,
        "parent_id": "b13998b5-b067-4f37-9fb6-20dddf0e7a58",
        "parent_table": "block",
        "properties": {
          "source": [
            [
              "/tmp/3765490a-463a-48df-807f-9e10728fc880/a93ce8fba7728905e7a7e9fbe86a1e6363105ff2.jpg"
            ]
          ]
        },
        "type": "image",
        "version": 1,
        "source": "/tmp/3765490a-463a-48df-807f-9e10728fc880/a93ce8fba7728905e7a7e9fbe86a1e6363105ff2.jpg",
        "image_url": "https://www.notion.so/image/https:%2F%2Fwww.notion.so%2Ftmp%2F3765490a-463a-48df-807f-9e10728fc880%2Fa93ce8fba7728905e7a7e9fbe86a1e6363105ff2.jpg"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928028254,
        "id": "09ef9922-efb2-4958-b786-c2e600364122",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928028254,
        "parent_id": "b13998b5-b067-4f37-9fb6-20dddf0e7a58",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Here you can see a table beside the graph, this is our adjacency matrix. Here "
            ],
            [
              "Matrix[i][j] = 1",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " represents there is an edge between "
            ],
            [
              "i",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "j",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". If there’s no edge, we simply put "
            ],
            [
              "Matrix[i][j] = 0",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Here you can see a table beside the graph, this is our adjacency matrix. Here "
          },
          {
            "Text": "Matrix[i][j] = 1",
            "AttrFlags": 1
          },
          {
            "Text": " represents there is an edge between "
          },
          {
            "Text": "i",
            "AttrFlags": 1
          },
          {
            "Text": " and "
          },
          {
            "Text": "j",
            "AttrFlags": 1
          },
          {
            "Text": ". If there’s no edge, we simply put "
          },
          {
            "Text": "Matrix[i][j] = 0",
            "AttrFlags": 1
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928028254,
        "id": "97a83e85-1af5-4183-8c66-b8a4c8700dba",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928028254,
        "parent_id": "b13998b5-b067-4f37-9fb6-20dddf0e7a58",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "These edges can be weighted, like it can represent the distance between two cities. Then we’ll put the value in "
            ],
            [
              "Matrix[i][j]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " instead of putting 1."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "These edges can be weighted, like it can represent the distance between two cities. Then we’ll put the value in "
          },
          {
            "Text": "Matrix[i][j]",
            "AttrFlags": 1
          },
          {
            "Text": " instead of putting 1."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928028255,
        "id": "bae02ec4-71a7-4f8a-9101-6cd7eecab8ce",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928028255,
        "parent_id": "b13998b5-b067-4f37-9fb6-20dddf0e7a58",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The graph described above is "
            ],
            [
              "Bidirectional",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "Undirected",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ", that means, if we can go to "
            ],
            [
              "node 1",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " from "
            ],
            [
              "node 2",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", we can also go to "
            ],
            [
              "node 2",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " from "
            ],
            [
              "node 1",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". If the graph was "
            ],
            [
              "Directed",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ", then there would’ve been arrow sign on one side of the graph. Even then, we could represent it using adjacency matrix."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The graph described above is "
          },
          {
            "Text": "Bidirectional",
            "AttrFlags": 4
          },
          {
            "Text": " or "
          },
          {
            "Text": "Undirected",
            "AttrFlags": 4
          },
          {
            "Text": ", that means, if we can go to "
          },
          {
            "Text": "node 1",
            "AttrFlags": 1
          },
          {
            "Text": " from "
          },
          {
            "Text": "node 2",
            "AttrFlags": 1
          },
          {
            "Text": ", we can also go to "
          },
          {
            "Text": "node 2",
            "AttrFlags": 1
          },
          {
            "Text": " from "
          },
          {
            "Text": "node 1",
            "AttrFlags": 1
          },
          {
            "Text": ". If the graph was "
          },
          {
            "Text": "Directed",
            "AttrFlags": 4
          },
          {
            "Text": ", then there would’ve been arrow sign on one side of the graph. Even then, we could represent it using adjacency matrix."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928028255,
        "id": "1aaed247-defb-4119-a093-28e5966a1970",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928028255,
        "parent_id": "b13998b5-b067-4f37-9fb6-20dddf0e7a58",
        "parent_table": "block",
        "properties": {
          "source": [
            [
              "/tmp/3765490a-463a-48df-807f-9e10728fc880/61ccde603154f4cf6f810553988bad922285acae.jpg"
            ]
          ]
        },
        "type": "image",
        "version": 1,
        "source": "/tmp/3765490a-463a-48df-807f-9e10728fc880/61ccde603154f4cf6f810553988bad922285acae.jpg",
        "image_url": "https://www.notion.so/image/https:%2F%2Fwww.notion.so%2Ftmp%2F3765490a-463a-48df-807f-9e10728fc880%2F61ccde603154f4cf6f810553988bad922285acae.jpg"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928028255,
        "id": "b3428c53-06c5-4754-999a-caa71ca5972b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928028255,
        "parent_id": "b13998b5-b067-4f37-9fb6-20dddf0e7a58",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We represent the nodes that don’t share edge by "
            ],
            [
              "infinity",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ". One thing to be noticed is that, if the graph is undirected, the matrix becomes "
            ],
            [
              "symmetric",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "We represent the nodes that don’t share edge by "
          },
          {
            "Text": "infinity",
            "AttrFlags": 4
          },
          {
            "Text": ". One thing to be noticed is that, if the graph is undirected, the matrix becomes "
          },
          {
            "Text": "symmetric",
            "AttrFlags": 4
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928028255,
        "id": "e7a1d87f-b1e8-4f3e-ac34-36897b4220f4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928028255,
        "parent_id": "b13998b5-b067-4f37-9fb6-20dddf0e7a58",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The pseudo-code to create the matrix:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The pseudo-code to create the matrix:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928028256,
        "id": "b7972cec-e92b-4de0-8d80-200e0bfc45c7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928028256,
        "parent_id": "b13998b5-b067-4f37-9fb6-20dddf0e7a58",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Procedure AdjacencyMatrix(N):    //N represents the number of nodes\nMatrix[N][N]\nfor i from 1 to N\n    for j from 1 to N\n        Take input -\u003e Matrix[i][j]\n    endfor\nendfor"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Procedure AdjacencyMatrix(N):    //N represents the number of nodes\nMatrix[N][N]\nfor i from 1 to N\n    for j from 1 to N\n        Take input -\u003e Matrix[i][j]\n    endfor\nendfor",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928028256,
        "id": "60265ac7-bea9-4831-8922-b4ca65fdf816",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928028256,
        "parent_id": "b13998b5-b067-4f37-9fb6-20dddf0e7a58",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We can also populate the Matrix using this common way:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "We can also populate the Matrix using this common way:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928028256,
        "id": "0b320016-4e1e-4108-ae5a-b8c89f7164ca",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928028256,
        "parent_id": "b13998b5-b067-4f37-9fb6-20dddf0e7a58",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Procedure AdjacencyMatrix(N, E):    // N -\u003e number of nodes\nMatrix[N][E]                        // E -\u003e number of edges\nfor i from 1 to E\n    input -\u003e n1, n2, cost\n    Matrix[n1][n2] = cost\n    Matrix[n2][n1] = cost\nendfor"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Procedure AdjacencyMatrix(N, E):    // N -\u003e number of nodes\nMatrix[N][E]                        // E -\u003e number of edges\nfor i from 1 to E\n    input -\u003e n1, n2, cost\n    Matrix[n1][n2] = cost\n    Matrix[n2][n1] = cost\nendfor",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928028256,
        "id": "7ad6a473-ac4d-4d60-a007-0304bc508daf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928028256,
        "parent_id": "b13998b5-b067-4f37-9fb6-20dddf0e7a58",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For directed graphs, we can remove "
            ],
            [
              "Matrix[n2][n1] = cost",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " line."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For directed graphs, we can remove "
          },
          {
            "Text": "Matrix[n2][n1] = cost",
            "AttrFlags": 1
          },
          {
            "Text": " line."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928028256,
        "id": "a1f5943d-0178-4a55-943c-2cf9cd3ba296",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928028256,
        "parent_id": "b13998b5-b067-4f37-9fb6-20dddf0e7a58",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The drawbacks of using Adjacency Matrix:",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The drawbacks of using Adjacency Matrix:",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928028256,
        "id": "2cbc289b-c4b1-4ad6-a02f-f245a031a4f7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928028256,
        "parent_id": "b13998b5-b067-4f37-9fb6-20dddf0e7a58",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Memory is a huge problem. No matter how many edges are there, we will always need N * N sized matrix where N is the number of nodes. If there are 10000 nodes, the matrix size will be 4 * 10000 * 10000 around 381 megabytes. This is a huge waste of memory if we consider graphs that have a few edges."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Memory is a huge problem. No matter how many edges are there, we will always need N * N sized matrix where N is the number of nodes. If there are 10000 nodes, the matrix size will be 4 * 10000 * 10000 around 381 megabytes. This is a huge waste of memory if we consider graphs that have a few edges."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928028257,
        "id": "cc4fb339-cec3-4b25-802b-b27159e1ff00",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928028257,
        "parent_id": "b13998b5-b067-4f37-9fb6-20dddf0e7a58",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Suppose we want to find out to which node we can go from a node "
            ],
            [
              "u",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". We’ll need to check the whole row of "
            ],
            [
              "u",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", which costs a lot of time."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Suppose we want to find out to which node we can go from a node "
          },
          {
            "Text": "u",
            "AttrFlags": 1
          },
          {
            "Text": ". We’ll need to check the whole row of "
          },
          {
            "Text": "u",
            "AttrFlags": 1
          },
          {
            "Text": ", which costs a lot of time."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928028257,
        "id": "403f980a-86d0-44a8-b567-069e572103a3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928028257,
        "parent_id": "b13998b5-b067-4f37-9fb6-20dddf0e7a58",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The only benefit is that, we can easily find the connection between "
            ],
            [
              "u-v",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " nodes, and their cost using Adjacency Matrix."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The only benefit is that, we can easily find the connection between "
          },
          {
            "Text": "u-v",
            "AttrFlags": 1
          },
          {
            "Text": " nodes, and their cost using Adjacency Matrix."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928028257,
        "id": "2e5dc142-79e0-4943-bdf3-7616f3aea4be",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928028257,
        "parent_id": "b13998b5-b067-4f37-9fb6-20dddf0e7a58",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Java code implemented using above pseudo-code:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Java code implemented using above pseudo-code:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928028257,
        "id": "c77d4058-7a89-452f-bc67-72d270d6e84f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928028257,
        "parent_id": "b13998b5-b067-4f37-9fb6-20dddf0e7a58",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "import java.util.Scanner;\n \npublic class Represent_Graph_Adjacency_Matrix \n{\n    private final int vertices;\n    private int[][] adjacency_matrix;\n \n    public Represent_Graph_Adjacency_Matrix(int v) \n    {\n        vertices = v;\n        adjacency_matrix = new int[vertices + 1][vertices + 1];\n    }\n \n    public void makeEdge(int to, int from, int edge) \n    {\n        try \n        {\n            adjacency_matrix[to][from] = edge;\n        }\n        catch (ArrayIndexOutOfBoundsException index) \n        {\n            System.out.println(\"The vertices does not exists\");\n        }\n    }\n \n    public int getEdge(int to, int from) \n    {\n        try \n        {\n            return adjacency_matrix[to][from];\n        }\n        catch (ArrayIndexOutOfBoundsException index) \n        {\n            System.out.println(\"The vertices does not exists\");\n        }\n        return -1;\n    }\n \n    public static void main(String args[]) \n    {\n        int v, e, count = 1, to = 0, from = 0;\n        Scanner sc = new Scanner(System.in);\n        Represent_Graph_Adjacency_Matrix graph;\n        try \n        {\n            System.out.println(\"Enter the number of vertices: \");\n            v = sc.nextInt();\n            System.out.println(\"Enter the number of edges: \");\n            e = sc.nextInt();\n \n            graph = new Represent_Graph_Adjacency_Matrix(v);\n \n            System.out.println(\"Enter the edges: \u003cto\u003e \u003cfrom\u003e\");\n            while (count \u003c= e) \n            {\n                to = sc.nextInt();\n                from = sc.nextInt();\n \n                graph.makeEdge(to, from, 1);\n                count++;\n            }\n \n            System.out.println(\"The adjacency matrix for the given graph is: \");\n            System.out.print(\"  \");\n            for (int i = 1; i \u003c= v; i++)\n                System.out.print(i + \" \");\n            System.out.println();\n \n            for (int i = 1; i \u003c= v; i++) \n            {\n                System.out.print(i + \" \");\n                for (int j = 1; j \u003c= v; j++) \n                    System.out.print(graph.getEdge(i, j) + \" \");\n                System.out.println();\n            }\n \n        }\n        catch (Exception E) \n        {\n            System.out.println(\"Somthing went wrong\");\n        }\n \n        sc.close();\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "import java.util.Scanner;\n \npublic class Represent_Graph_Adjacency_Matrix \n{\n    private final int vertices;\n    private int[][] adjacency_matrix;\n \n    public Represent_Graph_Adjacency_Matrix(int v) \n    {\n        vertices = v;\n        adjacency_matrix = new int[vertices + 1][vertices + 1];\n    }\n \n    public void makeEdge(int to, int from, int edge) \n    {\n        try \n        {\n            adjacency_matrix[to][from] = edge;\n        }\n        catch (ArrayIndexOutOfBoundsException index) \n        {\n            System.out.println(\"The vertices does not exists\");\n        }\n    }\n \n    public int getEdge(int to, int from) \n    {\n        try \n        {\n            return adjacency_matrix[to][from];\n        }\n        catch (ArrayIndexOutOfBoundsException index) \n        {\n            System.out.println(\"The vertices does not exists\");\n        }\n        return -1;\n    }\n \n    public static void main(String args[]) \n    {\n        int v, e, count = 1, to = 0, from = 0;\n        Scanner sc = new Scanner(System.in);\n        Represent_Graph_Adjacency_Matrix graph;\n        try \n        {\n            System.out.println(\"Enter the number of vertices: \");\n            v = sc.nextInt();\n            System.out.println(\"Enter the number of edges: \");\n            e = sc.nextInt();\n \n            graph = new Represent_Graph_Adjacency_Matrix(v);\n \n            System.out.println(\"Enter the edges: \u003cto\u003e \u003cfrom\u003e\");\n            while (count \u003c= e) \n            {\n                to = sc.nextInt();\n                from = sc.nextInt();\n \n                graph.makeEdge(to, from, 1);\n                count++;\n            }\n \n            System.out.println(\"The adjacency matrix for the given graph is: \");\n            System.out.print(\"  \");\n            for (int i = 1; i \u003c= v; i++)\n                System.out.print(i + \" \");\n            System.out.println();\n \n            for (int i = 1; i \u003c= v; i++) \n            {\n                System.out.print(i + \" \");\n                for (int j = 1; j \u003c= v; j++) \n                    System.out.print(graph.getEdge(i, j) + \" \");\n                System.out.println();\n            }\n \n        }\n        catch (Exception E) \n        {\n            System.out.println(\"Somthing went wrong\");\n        }\n \n        sc.close();\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928028257,
        "id": "597d5f3d-2624-4f6a-9767-52b2f3c911c0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928028257,
        "parent_id": "b13998b5-b067-4f37-9fb6-20dddf0e7a58",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Running the code: Save the file and compile using "
            ],
            [
              "javac Represent_Graph_Adjacency_Matrix.java",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Running the code: Save the file and compile using "
          },
          {
            "Text": "javac Represent_Graph_Adjacency_Matrix.java",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928028257,
        "id": "0d362a87-6073-473c-acb2-305cafe9abb4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928028257,
        "parent_id": "b13998b5-b067-4f37-9fb6-20dddf0e7a58",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928028257,
        "id": "126e093b-31e7-4f59-9245-7814bd2c79b9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928028257,
        "parent_id": "b13998b5-b067-4f37-9fb6-20dddf0e7a58",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "$ java Represent_Graph_Adjacency_Matrix\nEnter the number of vertices:\n4\nEnter the number of edges:\n6\nEnter the edges: \u003cto\u003e \u003cfrom\u003e\n1 1\n3 4\n2 3\n1 4\n2 4\n1 2\nThe adjacency matrix for the given graph is:\n  1 2 3 4\n1 1 1 0 1\n2 0 0 1 1\n3 0 0 0 1\n4 0 0 0 0"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "$ java Represent_Graph_Adjacency_Matrix\nEnter the number of vertices:\n4\nEnter the number of edges:\n6\nEnter the edges: \u003cto\u003e \u003cfrom\u003e\n1 1\n3 4\n2 3\n1 4\n2 4\n1 2\nThe adjacency matrix for the given graph is:\n  1 2 3 4\n1 1 1 0 1\n2 0 0 1 1\n3 0 0 0 1\n4 0 0 0 0",
        "code_language": "Plain Text"
      }
    ],
    "title": "Storing Graphs Adjacency Matrix",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}