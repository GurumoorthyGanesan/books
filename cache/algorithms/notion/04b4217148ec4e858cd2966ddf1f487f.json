{
  "ID": "04b42171-48ec-4e85-8cd2-966ddf1f487f",
  "Root": {
    "alive": true,
    "content": [
      "5e4240aa-3ef2-4103-b32a-b837820396fa",
      "91061065-d911-4a8e-95c9-6881df0edfa8",
      "199fe4f5-8056-4301-a9fa-759d1147dddc",
      "0eadd6ab-92b5-4718-b5d9-095ac3d9b6f8",
      "e2c7a5d2-aace-44f5-9549-a0369e97337e",
      "8ca00c72-b3ff-4da6-9965-47788ffeb969",
      "26797d95-d641-4e21-8d62-53c6363b6f12",
      "d700a697-0139-4465-9fd0-8d031cd9cb5b",
      "07509626-14c0-4e70-85d6-33380405d896",
      "2f3d65a0-9819-4387-b525-8848772fe086",
      "f8c6b7af-057b-4880-bc1a-94dec98c7586",
      "17d439c5-c8d6-4ead-baa5-b1dd50042cf8"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551929310741,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "04b42171-48ec-4e85-8cd2-966ddf1f487f",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551929310741,
    "parent_id": "c96af0be-a3eb-4385-a674-0f83049a23fd",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Algorithm to check if a given binary tree is BST"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929310736,
        "id": "5e4240aa-3ef2-4103-b32a-b837820396fa",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929310736,
        "parent_id": "04b42171-48ec-4e85-8cd2-966ddf1f487f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A binary tree is BST if it satisfies any one of the following condition:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A binary tree is BST if it satisfies any one of the following condition:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929310739,
        "id": "91061065-d911-4a8e-95c9-6881df0edfa8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929310739,
        "parent_id": "04b42171-48ec-4e85-8cd2-966ddf1f487f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It is empty"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "It is empty"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929310739,
        "id": "199fe4f5-8056-4301-a9fa-759d1147dddc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929310739,
        "parent_id": "04b42171-48ec-4e85-8cd2-966ddf1f487f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It has no subtrees"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "It has no subtrees"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929310739,
        "id": "0eadd6ab-92b5-4718-b5d9-095ac3d9b6f8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929310739,
        "parent_id": "04b42171-48ec-4e85-8cd2-966ddf1f487f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For every node x in the tree all the keys (if any) in the left sub tree must be less than key(x) and all the keys (if any) in the right sub tree must be greater than key(x)."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "For every node x in the tree all the keys (if any) in the left sub tree must be less than key(x) and all the keys (if any) in the right sub tree must be greater than key(x)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929310739,
        "id": "e2c7a5d2-aace-44f5-9549-a0369e97337e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929310739,
        "parent_id": "04b42171-48ec-4e85-8cd2-966ddf1f487f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "So a straightforward recursive algorithm would be:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "So a straightforward recursive algorithm would be:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929310739,
        "id": "8ca00c72-b3ff-4da6-9965-47788ffeb969",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929310739,
        "parent_id": "04b42171-48ec-4e85-8cd2-966ddf1f487f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "is_BST(root):\n  if root == NULL:\n   return true\n\n  // Check values in left subtree\n  if root-\u003eleft != NULL:\n    max_key_in_left = find_max_key(root-\u003eleft)\n    if max_key_in_left \u003e root-\u003ekey:\n        return false\n\n  // Check values in right subtree\n  if root-\u003eright != NULL:\n    min_key_in_right = find_min_key(root-\u003eright)\n    if min_key_in_right \u003c root-\u003ekey:\n        return false\n\n  return is_BST(root-\u003eleft) \u0026\u0026 is_BST(root-\u003eright)"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "is_BST(root):\n  if root == NULL:\n   return true\n\n  // Check values in left subtree\n  if root-\u003eleft != NULL:\n    max_key_in_left = find_max_key(root-\u003eleft)\n    if max_key_in_left \u003e root-\u003ekey:\n        return false\n\n  // Check values in right subtree\n  if root-\u003eright != NULL:\n    min_key_in_right = find_min_key(root-\u003eright)\n    if min_key_in_right \u003c root-\u003ekey:\n        return false\n\n  return is_BST(root-\u003eleft) \u0026\u0026 is_BST(root-\u003eright)",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929310740,
        "id": "26797d95-d641-4e21-8d62-53c6363b6f12",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929310740,
        "parent_id": "04b42171-48ec-4e85-8cd2-966ddf1f487f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The above recursive algorithm is correct but inefficient, because it traverses each node mutiple times."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The above recursive algorithm is correct but inefficient, because it traverses each node mutiple times."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929310740,
        "id": "d700a697-0139-4465-9fd0-8d031cd9cb5b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929310740,
        "parent_id": "04b42171-48ec-4e85-8cd2-966ddf1f487f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Another approach to minimize the multiple visits of each node is to remember the min and max possible values of the keys in the subtree we are visiting. Let the minimum possible value of any key be "
            ],
            [
              "K_MIN",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and maximum value be "
            ],
            [
              "K_MAX",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". When we start from the root of the tree, the range of values in the tree is "
            ],
            [
              "[K_MIN,K_MAX]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Let the key of root node be "
            ],
            [
              "x",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Then the range of values in left subtree is "
            ],
            [
              "[K_MIN,x)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and the range of values in right subtree is "
            ],
            [
              "(x,K_MAX]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". We will use this idea to develop a more efficient algorithm."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Another approach to minimize the multiple visits of each node is to remember the min and max possible values of the keys in the subtree we are visiting. Let the minimum possible value of any key be "
          },
          {
            "Text": "K_MIN",
            "AttrFlags": 2
          },
          {
            "Text": " and maximum value be "
          },
          {
            "Text": "K_MAX",
            "AttrFlags": 2
          },
          {
            "Text": ". When we start from the root of the tree, the range of values in the tree is "
          },
          {
            "Text": "[K_MIN,K_MAX]",
            "AttrFlags": 2
          },
          {
            "Text": ". Let the key of root node be "
          },
          {
            "Text": "x",
            "AttrFlags": 2
          },
          {
            "Text": ". Then the range of values in left subtree is "
          },
          {
            "Text": "[K_MIN,x)",
            "AttrFlags": 2
          },
          {
            "Text": " and the range of values in right subtree is "
          },
          {
            "Text": "(x,K_MAX]",
            "AttrFlags": 2
          },
          {
            "Text": ". We will use this idea to develop a more efficient algorithm."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929310740,
        "id": "07509626-14c0-4e70-85d6-33380405d896",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929310740,
        "parent_id": "04b42171-48ec-4e85-8cd2-966ddf1f487f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "is_BST(root, min, max):\n    if root == NULL:\n        return true\n\n    // is the current node key out of range?\n    if root-\u003ekey \u003c min || root-\u003ekey \u003e max:\n        return false\n\n    // check if left and right subtree is BST\n    return is_BST(root-\u003eleft,min,root-\u003ekey-1) \u0026\u0026 is_BST(root-\u003eright,root-\u003ekey+1,max)"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "is_BST(root, min, max):\n    if root == NULL:\n        return true\n\n    // is the current node key out of range?\n    if root-\u003ekey \u003c min || root-\u003ekey \u003e max:\n        return false\n\n    // check if left and right subtree is BST\n    return is_BST(root-\u003eleft,min,root-\u003ekey-1) \u0026\u0026 is_BST(root-\u003eright,root-\u003ekey+1,max)",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929310740,
        "id": "2f3d65a0-9819-4387-b525-8848772fe086",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929310740,
        "parent_id": "04b42171-48ec-4e85-8cd2-966ddf1f487f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It will be initially called as:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It will be initially called as:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929310740,
        "id": "f8c6b7af-057b-4880-bc1a-94dec98c7586",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929310740,
        "parent_id": "04b42171-48ec-4e85-8cd2-966ddf1f487f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "is_BST(my_tree_root,KEY_MIN,KEY_MAX)"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "is_BST(my_tree_root,KEY_MIN,KEY_MAX)",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929310741,
        "id": "17d439c5-c8d6-4ead-baa5-b1dd50042cf8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929310741,
        "parent_id": "04b42171-48ec-4e85-8cd2-966ddf1f487f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Another approach will be to do inorder traversal of the Binary tree. If the inorder traversal produces a sorted sequence of keys then the given tree is a BST. To check if the inorder sequence is sorted remember the value of previously visited node and compare it against the current node."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Another approach will be to do inorder traversal of the Binary tree. If the inorder traversal produces a sorted sequence of keys then the given tree is a BST. To check if the inorder sequence is sorted remember the value of previously visited node and compare it against the current node."
          }
        ]
      }
    ],
    "title": "Algorithm to check if a given binary tree is BST",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}