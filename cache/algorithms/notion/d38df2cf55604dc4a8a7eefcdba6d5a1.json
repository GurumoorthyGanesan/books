{
  "ID": "d38df2cf-5560-4dc4-a8a7-eefcdba6d5a1",
  "Root": {
    "alive": true,
    "content": [
      "ed3b1f53-b003-47d4-8292-64d4849ea3c1",
      "0895c129-2851-4ba1-b02d-62eaf7fdd665",
      "9703fe28-1d22-426a-9015-ef4219594476",
      "08066094-31b7-48a3-823e-cd3ee4fe980a",
      "4a898de4-37de-4fb4-8340-81ea197f75c6",
      "2bb9cecb-d938-4d3f-b278-296cc1a6aa65",
      "90acca15-d58e-482f-a05c-2184a2af25ae",
      "f7ec7e0b-ef29-45fe-a1bc-181be77334bf",
      "8016055d-f854-47be-9c43-df06acbd2305",
      "201c8068-65fe-41ad-a84f-965a2ce7fddf",
      "a8132f7a-5935-40d0-b5d9-d6bea70f7994",
      "8f3fa2b3-2f86-44e4-a87f-f1d3d04ef136",
      "553b82cc-430d-40d8-a6b3-50a3577321f3",
      "94f8b028-6c59-4449-b2a6-62ae880c409e",
      "a6b60f4a-738b-44c6-a5bd-866b9425c062",
      "bd1375c9-4b4b-44b9-a6fd-52bacc251ab4",
      "0783bb32-453c-4af9-869a-2684f2852f74"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551929270777,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "d38df2cf-5560-4dc4-a8a7-eefcdba6d5a1",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551929270777,
    "parent_id": "0652a44d-8a63-47b5-b7cf-af85d0c3655a",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Ticket automat"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929270766,
        "id": "ed3b1f53-b003-47d4-8292-64d4849ea3c1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929270766,
        "parent_id": "d38df2cf-5560-4dc4-a8a7-eefcdba6d5a1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "First simple Example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "First simple Example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929270769,
        "id": "0895c129-2851-4ba1-b02d-62eaf7fdd665",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929270769,
        "parent_id": "d38df2cf-5560-4dc4-a8a7-eefcdba6d5a1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You have a ticket automat which gives exchange in coins with values 1, 2, 5, 10 and 20. The dispension of the exchange can be seen as a series of coin drops until the right value is dispensed. We say a dispension is "
            ],
            [
              "optimal",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " when its "
            ],
            [
              "coin count is minimal",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " for its value."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You have a ticket automat which gives exchange in coins with values 1, 2, 5, 10 and 20. The dispension of the exchange can be seen as a series of coin drops until the right value is dispensed. We say a dispension is "
          },
          {
            "Text": "optimal",
            "AttrFlags": 1
          },
          {
            "Text": " when its "
          },
          {
            "Text": "coin count is minimal",
            "AttrFlags": 1
          },
          {
            "Text": " for its value."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929270770,
        "id": "9703fe28-1d22-426a-9015-ef4219594476",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929270770,
        "parent_id": "d38df2cf-5560-4dc4-a8a7-eefcdba6d5a1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Let "
            ],
            [
              "M",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in "
            ],
            [
              "[1,50]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " be the price for the ticket "
            ],
            [
              "T",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "P",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in "
            ],
            [
              "[1,50]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " the money somebody paid for "
            ],
            [
              "T",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", with "
            ],
            [
              "P \u003e= M",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Let "
            ],
            [
              "D=P-M",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". We define the "
            ],
            [
              "benefit",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " of a step as the difference between "
            ],
            [
              "D",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "D-c",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " with "
            ],
            [
              "c",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " the coin the automat dispense in this step."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Let "
          },
          {
            "Text": "M",
            "AttrFlags": 2
          },
          {
            "Text": " in "
          },
          {
            "Text": "[1,50]",
            "AttrFlags": 2
          },
          {
            "Text": " be the price for the ticket "
          },
          {
            "Text": "T",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "P",
            "AttrFlags": 2
          },
          {
            "Text": " in "
          },
          {
            "Text": "[1,50]",
            "AttrFlags": 2
          },
          {
            "Text": " the money somebody paid for "
          },
          {
            "Text": "T",
            "AttrFlags": 2
          },
          {
            "Text": ", with "
          },
          {
            "Text": "P \u003e= M",
            "AttrFlags": 2
          },
          {
            "Text": ". Let "
          },
          {
            "Text": "D=P-M",
            "AttrFlags": 2
          },
          {
            "Text": ". We define the "
          },
          {
            "Text": "benefit",
            "AttrFlags": 1
          },
          {
            "Text": " of a step as the difference between "
          },
          {
            "Text": "D",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "D-c",
            "AttrFlags": 2
          },
          {
            "Text": " with "
          },
          {
            "Text": "c",
            "AttrFlags": 2
          },
          {
            "Text": " the coin the automat dispense in this step."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929270770,
        "id": "08066094-31b7-48a3-823e-cd3ee4fe980a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929270770,
        "parent_id": "d38df2cf-5560-4dc4-a8a7-eefcdba6d5a1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "Greedy Technique",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " for the exchange is the following pseudo algorithmic approach:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "Greedy Technique",
            "AttrFlags": 1
          },
          {
            "Text": " for the exchange is the following pseudo algorithmic approach:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929270771,
        "id": "4a898de4-37de-4fb4-8340-81ea197f75c6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929270771,
        "parent_id": "d38df2cf-5560-4dc4-a8a7-eefcdba6d5a1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Step 1:",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " while "
            ],
            [
              "D \u003e 20",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " dispense a 20 coin and set "
            ],
            [
              "D = D - 20",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "Step 2:",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " while "
            ],
            [
              "D \u003e 10",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " dispense a 10 coin and set "
            ],
            [
              "D = D - 10",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "Step 3:",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " while "
            ],
            [
              "D \u003e 5",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " dispense a 5 coin and set "
            ],
            [
              "D = D - 5",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "Step 4:",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " while "
            ],
            [
              "D \u003e 2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " dispense a 2 coin and set "
            ],
            [
              "D = D - 2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "Step 5:",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " while "
            ],
            [
              "D \u003e 1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " dispense a 1 coin and set "
            ],
            [
              "D = D - 1",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Step 1:",
            "AttrFlags": 1
          },
          {
            "Text": " while "
          },
          {
            "Text": "D \u003e 20",
            "AttrFlags": 2
          },
          {
            "Text": " dispense a 20 coin and set "
          },
          {
            "Text": "D = D - 20",
            "AttrFlags": 2
          },
          {
            "Text": " "
          },
          {
            "Text": "Step 2:",
            "AttrFlags": 1
          },
          {
            "Text": " while "
          },
          {
            "Text": "D \u003e 10",
            "AttrFlags": 2
          },
          {
            "Text": " dispense a 10 coin and set "
          },
          {
            "Text": "D = D - 10",
            "AttrFlags": 2
          },
          {
            "Text": "Step 3:",
            "AttrFlags": 1
          },
          {
            "Text": " while "
          },
          {
            "Text": "D \u003e 5",
            "AttrFlags": 2
          },
          {
            "Text": " dispense a 5 coin and set "
          },
          {
            "Text": "D = D - 5",
            "AttrFlags": 2
          },
          {
            "Text": "Step 4:",
            "AttrFlags": 1
          },
          {
            "Text": " while "
          },
          {
            "Text": "D \u003e 2",
            "AttrFlags": 2
          },
          {
            "Text": " dispense a 2 coin and set "
          },
          {
            "Text": "D = D - 2",
            "AttrFlags": 2
          },
          {
            "Text": "Step 5:",
            "AttrFlags": 1
          },
          {
            "Text": " while "
          },
          {
            "Text": "D \u003e 1",
            "AttrFlags": 2
          },
          {
            "Text": " dispense a 1 coin and set "
          },
          {
            "Text": "D = D - 1",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929270771,
        "id": "2bb9cecb-d938-4d3f-b278-296cc1a6aa65",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929270771,
        "parent_id": "d38df2cf-5560-4dc4-a8a7-eefcdba6d5a1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Afterwards the sum of all coins clearly equals "
            ],
            [
              "D",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Its a "
            ],
            [
              "greedy algorithm",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " because after each step and after each repitition of a step the benefit is maximized. We cannot dispense another coin with a higher benefit."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Afterwards the sum of all coins clearly equals "
          },
          {
            "Text": "D",
            "AttrFlags": 2
          },
          {
            "Text": ". Its a "
          },
          {
            "Text": "greedy algorithm",
            "AttrFlags": 1
          },
          {
            "Text": " because after each step and after each repitition of a step the benefit is maximized. We cannot dispense another coin with a higher benefit."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929270771,
        "id": "90acca15-d58e-482f-a05c-2184a2af25ae",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929270771,
        "parent_id": "d38df2cf-5560-4dc4-a8a7-eefcdba6d5a1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Now the ticket automat as program (in C++):"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Now the ticket automat as program (in C++):"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929270771,
        "id": "f7ec7e0b-ef29-45fe-a1bc-181be77334bf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929270771,
        "parent_id": "d38df2cf-5560-4dc4-a8a7-eefcdba6d5a1",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003ciostream\u003e\n#include \u003cvector\u003e\n#include \u003cstring\u003e\n#include \u003calgorithm\u003e\n\nusing namespace std;\n\n// read some coin values, sort them descending,\n// purge copies and guaratee the 1 coin is in it\nstd::vector\u003cunsigned int\u003e readInCoinValues();\n\nint main()\n{\n    std::vector\u003cunsigned int\u003e coinValues;   // Array of coin values ascending    \n    int ticketPrice;                        // M in example\n    int paidMoney;                          // P in example\n\n    // generate coin values\n    coinValues = readInCoinValues();\n    \n    cout \u003c\u003c \"ticket price: \";\n    cin \u003e\u003e ticketPrice;\n    \n    cout \u003c\u003c \"money paid: \";\n    cin \u003e\u003e paidMoney;\n    \n    if(paidMoney \u003c= ticketPrice)\n    {\n        cout \u003c\u003c \"No exchange money\" \u003c\u003c endl;\n        return 1;\n    }\n    \n    int diffValue = paidMoney - ticketPrice;\n    \n    // Here starts greedy\n\n    // we save how many coins we have to give out\n    std::vector\u003cunsigned int\u003e coinCount;\n    \n    for(auto coinValue  = coinValues.begin();\n             coinValue != coinValues.end(); ++coinValue)\n    {\n        int countCoins = 0;\n        \n        while (diffValue \u003e= *coinValue)\n        {\n            diffValue -= *coinValue;\n            countCoins++;\n        }\n        \n        coinCount.push_back(countCoins);\n    }\n    \n    // print out result\n    cout \u003c\u003c \"the difference \" \u003c\u003c paidMoney - ticketPrice \n         \u003c\u003c \" is paid with: \" \u003c\u003c endl;\n    \n    for(unsigned int i=0; i \u003c coinValues.size(); ++i)\n    {\n        if(coinCount[i] \u003e 0)\n            cout \u003c\u003c coinCount[i] \u003c\u003c \" coins with value \" \n                 \u003c\u003c coinValues[i] \u003c\u003c endl;\n    }\n    \n    return 0;\n}\n\nstd::vector\u003cunsigned int\u003e readInCoinValues()\n{\n    // coin values\n    std::vector\u003cunsigned int\u003e coinValues;\n    \n    // make sure 1 is in vectore\n    coinValues.push_back(1);\n\n    // read in coin values (attention: error handling is omitted)\n    while(true)\n    {\n        int coinValue;\n        \n        cout \u003c\u003c \"Coin value (\u003c1 to stop): \";\n        cin \u003e\u003e coinValue;\n        \n        if(coinValue \u003e 0)\n            coinValues.push_back(coinValue);\n        \n        else\n            break;\n    }\n    \n    // sort values\n    sort(coinValues.begin(), coinValues.end(), std::greater\u003cint\u003e());\n    \n    // erase copies of same value\n    auto last = std::unique(coinValues.begin(), coinValues.end());\n    coinValues.erase(last, coinValues.end());\n    \n    // print array\n    cout \u003c\u003c \"Coin values: \";\n    \n    for(auto i : coinValues)\n        cout \u003c\u003c i \u003c\u003c \" \";\n    \n    cout \u003c\u003c endl;\n    \n    return coinValues;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003ciostream\u003e\n#include \u003cvector\u003e\n#include \u003cstring\u003e\n#include \u003calgorithm\u003e\n\nusing namespace std;\n\n// read some coin values, sort them descending,\n// purge copies and guaratee the 1 coin is in it\nstd::vector\u003cunsigned int\u003e readInCoinValues();\n\nint main()\n{\n    std::vector\u003cunsigned int\u003e coinValues;   // Array of coin values ascending    \n    int ticketPrice;                        // M in example\n    int paidMoney;                          // P in example\n\n    // generate coin values\n    coinValues = readInCoinValues();\n    \n    cout \u003c\u003c \"ticket price: \";\n    cin \u003e\u003e ticketPrice;\n    \n    cout \u003c\u003c \"money paid: \";\n    cin \u003e\u003e paidMoney;\n    \n    if(paidMoney \u003c= ticketPrice)\n    {\n        cout \u003c\u003c \"No exchange money\" \u003c\u003c endl;\n        return 1;\n    }\n    \n    int diffValue = paidMoney - ticketPrice;\n    \n    // Here starts greedy\n\n    // we save how many coins we have to give out\n    std::vector\u003cunsigned int\u003e coinCount;\n    \n    for(auto coinValue  = coinValues.begin();\n             coinValue != coinValues.end(); ++coinValue)\n    {\n        int countCoins = 0;\n        \n        while (diffValue \u003e= *coinValue)\n        {\n            diffValue -= *coinValue;\n            countCoins++;\n        }\n        \n        coinCount.push_back(countCoins);\n    }\n    \n    // print out result\n    cout \u003c\u003c \"the difference \" \u003c\u003c paidMoney - ticketPrice \n         \u003c\u003c \" is paid with: \" \u003c\u003c endl;\n    \n    for(unsigned int i=0; i \u003c coinValues.size(); ++i)\n    {\n        if(coinCount[i] \u003e 0)\n            cout \u003c\u003c coinCount[i] \u003c\u003c \" coins with value \" \n                 \u003c\u003c coinValues[i] \u003c\u003c endl;\n    }\n    \n    return 0;\n}\n\nstd::vector\u003cunsigned int\u003e readInCoinValues()\n{\n    // coin values\n    std::vector\u003cunsigned int\u003e coinValues;\n    \n    // make sure 1 is in vectore\n    coinValues.push_back(1);\n\n    // read in coin values (attention: error handling is omitted)\n    while(true)\n    {\n        int coinValue;\n        \n        cout \u003c\u003c \"Coin value (\u003c1 to stop): \";\n        cin \u003e\u003e coinValue;\n        \n        if(coinValue \u003e 0)\n            coinValues.push_back(coinValue);\n        \n        else\n            break;\n    }\n    \n    // sort values\n    sort(coinValues.begin(), coinValues.end(), std::greater\u003cint\u003e());\n    \n    // erase copies of same value\n    auto last = std::unique(coinValues.begin(), coinValues.end());\n    coinValues.erase(last, coinValues.end());\n    \n    // print array\n    cout \u003c\u003c \"Coin values: \";\n    \n    for(auto i : coinValues)\n        cout \u003c\u003c i \u003c\u003c \" \";\n    \n    cout \u003c\u003c endl;\n    \n    return coinValues;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929270772,
        "id": "8016055d-f854-47be-9c43-df06acbd2305",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929270772,
        "parent_id": "d38df2cf-5560-4dc4-a8a7-eefcdba6d5a1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Be aware there is now input checking to keep the example simple. One example output:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Be aware there is now input checking to keep the example simple. One example output:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929270772,
        "id": "201c8068-65fe-41ad-a84f-965a2ce7fddf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929270772,
        "parent_id": "d38df2cf-5560-4dc4-a8a7-eefcdba6d5a1",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Coin value (\u003c1 to stop): 2\nCoin value (\u003c1 to stop): 4\nCoin value (\u003c1 to stop): 7\nCoin value (\u003c1 to stop): 9\nCoin value (\u003c1 to stop): 14\nCoin value (\u003c1 to stop): 4\nCoin value (\u003c1 to stop): 0\nCoin values: 14 9 7 4 2 1 \nticket price: 34\nmoney paid: 67\nthe difference 33 is paid with: \n2 coins with value 14\n1 coins with value 4\n1 coins with value 1"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Coin value (\u003c1 to stop): 2\nCoin value (\u003c1 to stop): 4\nCoin value (\u003c1 to stop): 7\nCoin value (\u003c1 to stop): 9\nCoin value (\u003c1 to stop): 14\nCoin value (\u003c1 to stop): 4\nCoin value (\u003c1 to stop): 0\nCoin values: 14 9 7 4 2 1 \nticket price: 34\nmoney paid: 67\nthe difference 33 is paid with: \n2 coins with value 14\n1 coins with value 4\n1 coins with value 1",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929270772,
        "id": "a8132f7a-5935-40d0-b5d9-d6bea70f7994",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929270772,
        "parent_id": "d38df2cf-5560-4dc4-a8a7-eefcdba6d5a1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As long as "
            ],
            [
              "1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is in the coin values we now, that the algorithm will terminate, because:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "As long as "
          },
          {
            "Text": "1",
            "AttrFlags": 2
          },
          {
            "Text": " is in the coin values we now, that the algorithm will terminate, because:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929270773,
        "id": "8f3fa2b3-2f86-44e4-a87f-f1d3d04ef136",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929270773,
        "parent_id": "d38df2cf-5560-4dc4-a8a7-eefcdba6d5a1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "D",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " strictly decreases with every step"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "D",
            "AttrFlags": 2
          },
          {
            "Text": " strictly decreases with every step"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929270773,
        "id": "553b82cc-430d-40d8-a6b3-50a3577321f3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929270773,
        "parent_id": "d38df2cf-5560-4dc4-a8a7-eefcdba6d5a1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "D",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is never "
            ],
            [
              "\u003e0",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and smaller than than the smallest coin "
            ],
            [
              "1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " at the same time"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "D",
            "AttrFlags": 2
          },
          {
            "Text": " is never "
          },
          {
            "Text": "\u003e0",
            "AttrFlags": 2
          },
          {
            "Text": " and smaller than than the smallest coin "
          },
          {
            "Text": "1",
            "AttrFlags": 2
          },
          {
            "Text": " at the same time"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929270773,
        "id": "94f8b028-6c59-4449-b2a6-62ae880c409e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929270773,
        "parent_id": "d38df2cf-5560-4dc4-a8a7-eefcdba6d5a1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "But the algorithm has two pitfalls:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "But the algorithm has two pitfalls:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929270774,
        "id": "a6b60f4a-738b-44c6-a5bd-866b9425c062",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929270774,
        "parent_id": "d38df2cf-5560-4dc4-a8a7-eefcdba6d5a1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Let "
            ],
            [
              "C",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " be the biggest coin value. The runtime is only polynomial as long as "
            ],
            [
              "D/C",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is polynomial, because the representation of "
            ],
            [
              "D",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " uses only "
            ],
            [
              "log D",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " bits and the runtime is at least linear in "
            ],
            [
              "D/C",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Let "
          },
          {
            "Text": "C",
            "AttrFlags": 2
          },
          {
            "Text": " be the biggest coin value. The runtime is only polynomial as long as "
          },
          {
            "Text": "D/C",
            "AttrFlags": 2
          },
          {
            "Text": " is polynomial, because the representation of "
          },
          {
            "Text": "D",
            "AttrFlags": 2
          },
          {
            "Text": " uses only "
          },
          {
            "Text": "log D",
            "AttrFlags": 2
          },
          {
            "Text": " bits and the runtime is at least linear in "
          },
          {
            "Text": "D/C",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929270776,
        "id": "bd1375c9-4b4b-44b9-a6fd-52bacc251ab4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929270776,
        "parent_id": "d38df2cf-5560-4dc4-a8a7-eefcdba6d5a1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In every step our algorithm chooses the local optimum. But this is not sufficient to say that the algorithm finds the global optimal solution (see more informations "
            ],
            [
              "here",
              [
                [
                  "a",
                  "https://en.wikipedia.org/wiki/Matroid"
                ]
              ]
            ],
            [
              " or in the Book of "
            ],
            [
              "Korte and Vygen",
              [
                [
                  "a",
                  "http://www.or.uni-bonn.de/~vygen/co.html"
                ]
              ]
            ],
            [
              ")."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "In every step our algorithm chooses the local optimum. But this is not sufficient to say that the algorithm finds the global optimal solution (see more informations "
          },
          {
            "Text": "here",
            "Link": "https://en.wikipedia.org/wiki/Matroid"
          },
          {
            "Text": " or in the Book of "
          },
          {
            "Text": "Korte and Vygen",
            "Link": "http://www.or.uni-bonn.de/~vygen/co.html"
          },
          {
            "Text": ")."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929270777,
        "id": "0783bb32-453c-4af9-869a-2684f2852f74",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929270777,
        "parent_id": "d38df2cf-5560-4dc4-a8a7-eefcdba6d5a1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A simple counter example: the coins are "
            ],
            [
              "1,3,4",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "D=6",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". The optimal solution is clearly two coins of value "
            ],
            [
              "3",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " but greedy chooses "
            ],
            [
              "4",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in the first step so it has to choose "
            ],
            [
              "1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in step two and three. So it gives no optimal soution. A possible optimal Algorithm for this example is based on "
            ],
            [
              "dynamic programming",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A simple counter example: the coins are "
          },
          {
            "Text": "1,3,4",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "D=6",
            "AttrFlags": 2
          },
          {
            "Text": ". The optimal solution is clearly two coins of value "
          },
          {
            "Text": "3",
            "AttrFlags": 2
          },
          {
            "Text": " but greedy chooses "
          },
          {
            "Text": "4",
            "AttrFlags": 2
          },
          {
            "Text": " in the first step so it has to choose "
          },
          {
            "Text": "1",
            "AttrFlags": 2
          },
          {
            "Text": " in step two and three. So it gives no optimal soution. A possible optimal Algorithm for this example is based on "
          },
          {
            "Text": "dynamic programming",
            "AttrFlags": 1
          },
          {
            "Text": "."
          }
        ]
      }
    ],
    "title": "Ticket automat",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}