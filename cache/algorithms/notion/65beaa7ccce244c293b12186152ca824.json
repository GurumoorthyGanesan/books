{
  "ID": "65beaa7c-cce2-44c2-93b1-2186152ca824",
  "Root": {
    "alive": true,
    "content": [
      "b66da695-a37c-4370-9a97-affdace25c86",
      "89cba3bb-5126-498a-89a6-9875ab095d67",
      "1904b5f2-8202-48ff-8dee-7ec4dc7e0012",
      "718ec973-2300-4ec1-abc0-071e5f046db7",
      "eedcefa9-d923-422a-b697-b0978d723c2c",
      "ed73c546-f2f2-4ff7-84ca-03179679c1db",
      "1cac4e16-6d2b-46bb-aa02-ba0f88102f02",
      "db15fb54-d781-4270-8f56-767ad02e8376"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551929358697,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "65beaa7c-cce2-44c2-93b1-2186152ca824",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551929358697,
    "parent_id": "491070bf-06ff-4de8-bf7f-3e121c11c49f",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "merge-sort multithread"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929358693,
        "id": "b66da695-a37c-4370-9a97-affdace25c86",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929358693,
        "parent_id": "65beaa7c-cce2-44c2-93b1-2186152ca824",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " is an array and "
            ],
            [
              "p",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "q",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " indexes of the array such as you gonna sort the sub-array "
            ],
            [
              "A[p..r]",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ". "
            ],
            [
              "B",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " is a sub-array which will be populated by the sort."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A",
            "AttrFlags": 4
          },
          {
            "Text": " is an array and "
          },
          {
            "Text": "p",
            "AttrFlags": 4
          },
          {
            "Text": " and "
          },
          {
            "Text": "q",
            "AttrFlags": 4
          },
          {
            "Text": " indexes of the array such as you gonna sort the sub-array "
          },
          {
            "Text": "A[p..r]",
            "AttrFlags": 4
          },
          {
            "Text": ". "
          },
          {
            "Text": "B",
            "AttrFlags": 4
          },
          {
            "Text": " is a sub-array which will be populated by the sort."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929358696,
        "id": "89cba3bb-5126-498a-89a6-9875ab095d67",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929358696,
        "parent_id": "65beaa7c-cce2-44c2-93b1-2186152ca824",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A call to "
            ],
            [
              "p-merge-sort(A,p,r,B,s)",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " sorts elements from "
            ],
            [
              "A[p..r]",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " and put them in "
            ],
            [
              "B[s..s+r-p]",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A call to "
          },
          {
            "Text": "p-merge-sort(A,p,r,B,s)",
            "AttrFlags": 4
          },
          {
            "Text": " sorts elements from "
          },
          {
            "Text": "A[p..r]",
            "AttrFlags": 4
          },
          {
            "Text": " and put them in "
          },
          {
            "Text": "B[s..s+r-p]",
            "AttrFlags": 4
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929358696,
        "id": "1904b5f2-8202-48ff-8dee-7ec4dc7e0012",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929358696,
        "parent_id": "65beaa7c-cce2-44c2-93b1-2186152ca824",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "p-merge-sort(A,p,r,B,s)\n    n = r-p+1\n    if n==1\n        B[s] = A[p]\n    else\n        T = new Array(n) //create a new array T of size n\n        q = floor((p+r)/2))\n        q_prime = q-p+1\n        spawn p-merge-sort(A,p,q,T,1)\n        p-merge-sort(A,q+1,r,T,q_prime+1)\n        sync\n        p-merge(T,1,q_prime,q_prime+1,n,B,s)"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "p-merge-sort(A,p,r,B,s)\n    n = r-p+1\n    if n==1\n        B[s] = A[p]\n    else\n        T = new Array(n) //create a new array T of size n\n        q = floor((p+r)/2))\n        q_prime = q-p+1\n        spawn p-merge-sort(A,p,q,T,1)\n        p-merge-sort(A,q+1,r,T,q_prime+1)\n        sync\n        p-merge(T,1,q_prime,q_prime+1,n,B,s)",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929358696,
        "id": "718ec973-2300-4ec1-abc0-071e5f046db7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929358696,
        "parent_id": "65beaa7c-cce2-44c2-93b1-2186152ca824",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Here is the auxiliary function that performs the merge in parallel. "
            ],
            [
              "p-merge",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " assumes that the two sub-arrays to merge are in the same array but doesn’t assume they are adjacent in the array. That’s why we need "
            ],
            [
              "p1,r1,p2,r2",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Here is the auxiliary function that performs the merge in parallel. "
          },
          {
            "Text": "p-merge",
            "AttrFlags": 4
          },
          {
            "Text": " assumes that the two sub-arrays to merge are in the same array but doesn’t assume they are adjacent in the array. That’s why we need "
          },
          {
            "Text": "p1,r1,p2,r2",
            "AttrFlags": 4
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929358696,
        "id": "eedcefa9-d923-422a-b697-b0978d723c2c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929358696,
        "parent_id": "65beaa7c-cce2-44c2-93b1-2186152ca824",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "p-merge(T,p1,r1,p2,r2,A,p3)\n    n1 = r1-p1+1\n    n2 = r2-p2+1\n    if n1\u003cn2     //check if n1\u003e=n2\n        permute p1 and p2\n        permute r1 and r2\n        permute n1 and n2\n    if n1==0     //both empty?\n        return\n    else \n        q1 = floor((p1+r1)/2)\n        q2 = dichotomic-search(T[q1],T,p2,r2)\n        q3 = p3 + (q1-p1) + (q2-p2)\n        A[q3] = T[q1]\n        spawn p-merge(T,p1,q1-1,p2,q2-1,A,p3)\n        p-merge(T,q1+1,r1,q2,r2,A,q3+1)\n        sync"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "p-merge(T,p1,r1,p2,r2,A,p3)\n    n1 = r1-p1+1\n    n2 = r2-p2+1\n    if n1\u003cn2     //check if n1\u003e=n2\n        permute p1 and p2\n        permute r1 and r2\n        permute n1 and n2\n    if n1==0     //both empty?\n        return\n    else \n        q1 = floor((p1+r1)/2)\n        q2 = dichotomic-search(T[q1],T,p2,r2)\n        q3 = p3 + (q1-p1) + (q2-p2)\n        A[q3] = T[q1]\n        spawn p-merge(T,p1,q1-1,p2,q2-1,A,p3)\n        p-merge(T,q1+1,r1,q2,r2,A,q3+1)\n        sync",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929358697,
        "id": "ed73c546-f2f2-4ff7-84ca-03179679c1db",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929358697,
        "parent_id": "65beaa7c-cce2-44c2-93b1-2186152ca824",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "And here is the auxiliary function dichotomic-search."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "And here is the auxiliary function dichotomic-search."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929358697,
        "id": "1cac4e16-6d2b-46bb-aa02-ba0f88102f02",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929358697,
        "parent_id": "65beaa7c-cce2-44c2-93b1-2186152ca824",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "x",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " is the key to look for in the sub-array T[p..r]."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "x",
            "AttrFlags": 4
          },
          {
            "Text": " is the key to look for in the sub-array T[p..r]."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929358697,
        "id": "db15fb54-d781-4270-8f56-767ad02e8376",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929358697,
        "parent_id": "65beaa7c-cce2-44c2-93b1-2186152ca824",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "dichotomic-search(x,T,p,r)            \n    inf = p\n    sup = max(p,r+1)\n    while inf\u003csup\n        half = floor((inf+sup)/2)\n        if x\u003c=T[half]\n            sup = half\n        else\n            inf = half+1\n    return sup"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "dichotomic-search(x,T,p,r)            \n    inf = p\n    sup = max(p,r+1)\n    while inf\u003csup\n        half = floor((inf+sup)/2)\n        if x\u003c=T[half]\n            sup = half\n        else\n            inf = half+1\n    return sup",
        "code_language": "Plain Text"
      }
    ],
    "title": "merge-sort multithread",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}