{
  "ID": "262aa6ca-4dd5-455d-9332-1fa70ce2c760",
  "Root": {
    "alive": true,
    "content": [
      "3bca47f1-3507-4b2e-a660-a4ebce52941d",
      "691137e3-a392-4891-89be-e77a2f3e7220",
      "983eba1b-82ed-4e5e-8cbf-da7b93169762",
      "846c08e4-f419-4d2e-ad33-606deed6989e",
      "b61d0c3f-d09e-4d01-903e-b387dcbab4fa",
      "46bbea89-1fd6-4e2a-a307-fd3a6fc8e734",
      "fb39e94f-bc2b-4798-b5ce-ea6af26508db",
      "7ca81cdc-8d76-40e2-a274-9503ad88979a",
      "2568e291-fd42-4baa-991f-3bdf11bd6989",
      "8ebb158e-ebae-40a9-a552-d2044a6e69a7",
      "362467e0-b0b5-41b0-b925-66fe89e8ea59",
      "f9fa956d-6c0b-4906-9d35-6e0d70a39544",
      "463bb266-6a72-44b4-b022-cfab2c7838fa",
      "b39ba57f-aad6-4c71-877f-d9effa075838",
      "aa555959-8473-466c-a300-160942c57fa2",
      "5fd3bddb-0c2f-489a-90ab-544f9157237e",
      "06b2ace7-3d06-401d-bd76-7024285bb764",
      "3127c405-bfde-4877-b764-8bce52a19dba",
      "a3897020-e4ac-457b-8e4d-6f9b92cb2566",
      "b10b0035-4f61-4e2c-b223-1eb699336118"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551928759370,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "262aa6ca-4dd5-455d-9332-1fa70ce2c760",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551928759370,
    "parent_id": "3104f50a-b7e2-41fe-97d7-f6e02201ccb8",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Connected Components Of Undirected Graph Using BFS."
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928759366,
        "id": "3bca47f1-3507-4b2e-a660-a4ebce52941d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928759366,
        "parent_id": "262aa6ca-4dd5-455d-9332-1fa70ce2c760",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "BFS",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " can be used to find the connected components of an "
            ],
            [
              "undirected graph",
              [
                [
                  "a",
                  "http://mathinsight.org/definition/undirected_graph"
                ]
              ]
            ],
            [
              ". We can also find if the given graph is connected or not. Our subsequent discussion assumes we are dealing with undirected graphs.The definition of a connected graph is:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "BFS",
            "AttrFlags": 1
          },
          {
            "Text": " can be used to find the connected components of an "
          },
          {
            "Text": "undirected graph",
            "Link": "http://mathinsight.org/definition/undirected_graph"
          },
          {
            "Text": ". We can also find if the given graph is connected or not. Our subsequent discussion assumes we are dealing with undirected graphs.The definition of a connected graph is:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928759367,
        "id": "691137e3-a392-4891-89be-e77a2f3e7220",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928759367,
        "parent_id": "262aa6ca-4dd5-455d-9332-1fa70ce2c760",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A graph is connected if there is a path between every pair of vertices."
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "A graph is connected if there is a path between every pair of vertices."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928759367,
        "id": "983eba1b-82ed-4e5e-8cbf-da7b93169762",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928759367,
        "parent_id": "262aa6ca-4dd5-455d-9332-1fa70ce2c760",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Following is a "
            ],
            [
              "connected graph",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Following is a "
          },
          {
            "Text": "connected graph",
            "AttrFlags": 1
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928759367,
        "id": "846c08e4-f419-4d2e-ad33-606deed6989e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928759367,
        "parent_id": "262aa6ca-4dd5-455d-9332-1fa70ce2c760",
        "parent_table": "block",
        "properties": {
          "source": [
            [
              "/tmp/43f99549-7f21-4c0c-ab1a-fa7a7e21ad3f/1633e33bc955e24f436851bad995017e7b84ae07.png"
            ]
          ]
        },
        "type": "image",
        "version": 1,
        "source": "/tmp/43f99549-7f21-4c0c-ab1a-fa7a7e21ad3f/1633e33bc955e24f436851bad995017e7b84ae07.png",
        "image_url": "https://www.notion.so/image/https:%2F%2Fwww.notion.so%2Ftmp%2F43f99549-7f21-4c0c-ab1a-fa7a7e21ad3f%2F1633e33bc955e24f436851bad995017e7b84ae07.png"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928759367,
        "id": "b61d0c3f-d09e-4d01-903e-b387dcbab4fa",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928759367,
        "parent_id": "262aa6ca-4dd5-455d-9332-1fa70ce2c760",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Following graph is "
            ],
            [
              "not connected",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " and has 2 connected components:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Following graph is "
          },
          {
            "Text": "not connected",
            "AttrFlags": 1
          },
          {
            "Text": " and has 2 connected components:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928759368,
        "id": "46bbea89-1fd6-4e2a-a307-fd3a6fc8e734",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928759368,
        "parent_id": "262aa6ca-4dd5-455d-9332-1fa70ce2c760",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Connected Component 1: {a,b,c,d,e}"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Connected Component 1: {a,b,c,d,e}"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928759368,
        "id": "fb39e94f-bc2b-4798-b5ce-ea6af26508db",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928759368,
        "parent_id": "262aa6ca-4dd5-455d-9332-1fa70ce2c760",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Connected Component 2: {f}"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Connected Component 2: {f}"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928759368,
        "id": "7ca81cdc-8d76-40e2-a274-9503ad88979a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928759368,
        "parent_id": "262aa6ca-4dd5-455d-9332-1fa70ce2c760",
        "parent_table": "block",
        "properties": {
          "source": [
            [
              "/tmp/43f99549-7f21-4c0c-ab1a-fa7a7e21ad3f/b0b337966e895be91871de851c664bf984dfc1ec.png"
            ]
          ]
        },
        "type": "image",
        "version": 1,
        "source": "/tmp/43f99549-7f21-4c0c-ab1a-fa7a7e21ad3f/b0b337966e895be91871de851c664bf984dfc1ec.png",
        "image_url": "https://www.notion.so/image/https:%2F%2Fwww.notion.so%2Ftmp%2F43f99549-7f21-4c0c-ab1a-fa7a7e21ad3f%2Fb0b337966e895be91871de851c664bf984dfc1ec.png"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928759368,
        "id": "2568e291-fd42-4baa-991f-3bdf11bd6989",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928759368,
        "parent_id": "262aa6ca-4dd5-455d-9332-1fa70ce2c760",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "BFS is a graph traversal algorithm. So starting from a random source node, if on termination of algorithm, all nodes are visited, then the graph is connected,otherwise it is not connected."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "BFS is a graph traversal algorithm. So starting from a random source node, if on termination of algorithm, all nodes are visited, then the graph is connected,otherwise it is not connected."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928759368,
        "id": "8ebb158e-ebae-40a9-a552-d2044a6e69a7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928759368,
        "parent_id": "262aa6ca-4dd5-455d-9332-1fa70ce2c760",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "PseudoCode for the algorithm."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "PseudoCode for the algorithm."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928759369,
        "id": "362467e0-b0b5-41b0-b925-66fe89e8ea59",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928759369,
        "parent_id": "262aa6ca-4dd5-455d-9332-1fa70ce2c760",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "boolean isConnected(Graph g)\n{     \n BFS(v)//v is a random source node.\n if(allVisited(g))\n {\n  return true;\n }\n else return false;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "boolean isConnected(Graph g)\n{     \n BFS(v)//v is a random source node.\n if(allVisited(g))\n {\n  return true;\n }\n else return false;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928759369,
        "id": "f9fa956d-6c0b-4906-9d35-6e0d70a39544",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928759369,
        "parent_id": "262aa6ca-4dd5-455d-9332-1fa70ce2c760",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "C implementation for finding the whether an undirected graph is connected or not:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "C implementation for finding the whether an undirected graph is connected or not:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928759369,
        "id": "463bb266-6a72-44b4-b022-cfab2c7838fa",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928759369,
        "parent_id": "262aa6ca-4dd5-455d-9332-1fa70ce2c760",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include\u003cstdio.h\u003e\n#include\u003cstdlib.h\u003e\n#define MAXVERTICES 100    \n\nvoid enqueue(int);\nint deque();\nint isConnected(char **graph,int noOfVertices);\nvoid BFS(char **graph,int vertex,int noOfVertices);    \nint count = 0;\n//Queue node depicts a single Queue element\n//It is NOT a graph node.\nstruct node\n{\n    int v;\n    struct node *next;\n};\n\ntypedef struct node Node;\ntypedef struct node *Nodeptr;\n\nNodeptr Qfront = NULL;\nNodeptr Qrear = NULL;\nchar *visited;//array that keeps track of visited vertices.\n\nint main()\n{\n    int n,e;//n is number of vertices, e is number of edges.\n    int i,j;\n    char **graph;//adjacency matrix\n\n    printf(\"Enter number of vertices:\");\n    scanf(\"%d\",\u0026n);\n\n    if(n \u003c 0 || n \u003e MAXVERTICES)\n    {\n     fprintf(stderr, \"Please enter a valid positive integer from 1 to %d\",MAXVERTICES);\n     return -1;\n    }\n\n    graph = malloc(n * sizeof(char *));\n    visited = malloc(n*sizeof(char));\n\n    for(i = 0;i \u003c n;++i)\n    {\n        graph[i] = malloc(n*sizeof(int));\n        visited[i] = 'N';//initially all vertices are not visited.\n        for(j = 0;j \u003c n;++j)\n            graph[i][j] = 0;\n    }\n\n    printf(\"enter number of edges and then enter them in pairs:\");\n    scanf(\"%d\",\u0026e);\n\n    for(i = 0;i \u003c e;++i)\n    {\n        int u,v;\n        scanf(\"%d%d\",\u0026u,\u0026v);\n        graph[u-1][v-1] = 1;\n        graph[v-1][u-1] = 1;\n    }    \n    \n    if(isConnected(graph,n))\n        printf(\"The graph is connected\");\n    else printf(\"The graph is NOT connected\\n\");       \n}\n\nvoid enqueue(int vertex)\n{\n    if(Qfront == NULL)\n    {\n        Qfront = malloc(sizeof(Node));\n        Qfront-\u003ev = vertex;\n        Qfront-\u003enext = NULL;\n        Qrear = Qfront;\n    }\n    else\n    {\n        Nodeptr newNode = malloc(sizeof(Node));\n        newNode-\u003ev = vertex;\n        newNode-\u003enext = NULL;\n        Qrear-\u003enext = newNode;\n        Qrear = newNode;\n    }\n}\n\nint deque()\n{\n    if(Qfront == NULL)\n    {\n        printf(\"Q is empty , returning -1\\n\");\n        return -1;\n    }\n    else\n    {\n        int v = Qfront-\u003ev;\n        Nodeptr temp= Qfront;\n        if(Qfront == Qrear)\n        {\n            Qfront = Qfront-\u003enext;\n            Qrear = NULL;\n        }\n        else\n            Qfront = Qfront-\u003enext;\n\n        free(temp);\n        return v;\n    }\n}\n\nint isConnected(char **graph,int noOfVertices)\n{\n    int i;\n\n    //let random source vertex be vertex 0;\n    BFS(graph,0,noOfVertices);\n\n    for(i = 0;i \u003c noOfVertices;++i)\n        if(visited[i] == 'N')\n         return 0;//0 implies false;\n\n    return 1;//1 implies true;\n}\n\nvoid BFS(char **graph,int v,int noOfVertices)\n{        \n    int i,vertex;\n    visited[v] = 'Y';\n    enqueue(v);    \n    while((vertex = deque()) != -1)\n    {            \n        for(i = 0;i \u003c noOfVertices;++i)\n            if(graph[vertex][i] == 1 \u0026\u0026 visited[i] == 'N')\n            {\n                enqueue(i);\n                visited[i] = 'Y';\n            }\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include\u003cstdio.h\u003e\n#include\u003cstdlib.h\u003e\n#define MAXVERTICES 100    \n\nvoid enqueue(int);\nint deque();\nint isConnected(char **graph,int noOfVertices);\nvoid BFS(char **graph,int vertex,int noOfVertices);    \nint count = 0;\n//Queue node depicts a single Queue element\n//It is NOT a graph node.\nstruct node\n{\n    int v;\n    struct node *next;\n};\n\ntypedef struct node Node;\ntypedef struct node *Nodeptr;\n\nNodeptr Qfront = NULL;\nNodeptr Qrear = NULL;\nchar *visited;//array that keeps track of visited vertices.\n\nint main()\n{\n    int n,e;//n is number of vertices, e is number of edges.\n    int i,j;\n    char **graph;//adjacency matrix\n\n    printf(\"Enter number of vertices:\");\n    scanf(\"%d\",\u0026n);\n\n    if(n \u003c 0 || n \u003e MAXVERTICES)\n    {\n     fprintf(stderr, \"Please enter a valid positive integer from 1 to %d\",MAXVERTICES);\n     return -1;\n    }\n\n    graph = malloc(n * sizeof(char *));\n    visited = malloc(n*sizeof(char));\n\n    for(i = 0;i \u003c n;++i)\n    {\n        graph[i] = malloc(n*sizeof(int));\n        visited[i] = 'N';//initially all vertices are not visited.\n        for(j = 0;j \u003c n;++j)\n            graph[i][j] = 0;\n    }\n\n    printf(\"enter number of edges and then enter them in pairs:\");\n    scanf(\"%d\",\u0026e);\n\n    for(i = 0;i \u003c e;++i)\n    {\n        int u,v;\n        scanf(\"%d%d\",\u0026u,\u0026v);\n        graph[u-1][v-1] = 1;\n        graph[v-1][u-1] = 1;\n    }    \n    \n    if(isConnected(graph,n))\n        printf(\"The graph is connected\");\n    else printf(\"The graph is NOT connected\\n\");       \n}\n\nvoid enqueue(int vertex)\n{\n    if(Qfront == NULL)\n    {\n        Qfront = malloc(sizeof(Node));\n        Qfront-\u003ev = vertex;\n        Qfront-\u003enext = NULL;\n        Qrear = Qfront;\n    }\n    else\n    {\n        Nodeptr newNode = malloc(sizeof(Node));\n        newNode-\u003ev = vertex;\n        newNode-\u003enext = NULL;\n        Qrear-\u003enext = newNode;\n        Qrear = newNode;\n    }\n}\n\nint deque()\n{\n    if(Qfront == NULL)\n    {\n        printf(\"Q is empty , returning -1\\n\");\n        return -1;\n    }\n    else\n    {\n        int v = Qfront-\u003ev;\n        Nodeptr temp= Qfront;\n        if(Qfront == Qrear)\n        {\n            Qfront = Qfront-\u003enext;\n            Qrear = NULL;\n        }\n        else\n            Qfront = Qfront-\u003enext;\n\n        free(temp);\n        return v;\n    }\n}\n\nint isConnected(char **graph,int noOfVertices)\n{\n    int i;\n\n    //let random source vertex be vertex 0;\n    BFS(graph,0,noOfVertices);\n\n    for(i = 0;i \u003c noOfVertices;++i)\n        if(visited[i] == 'N')\n         return 0;//0 implies false;\n\n    return 1;//1 implies true;\n}\n\nvoid BFS(char **graph,int v,int noOfVertices)\n{        \n    int i,vertex;\n    visited[v] = 'Y';\n    enqueue(v);    \n    while((vertex = deque()) != -1)\n    {            \n        for(i = 0;i \u003c noOfVertices;++i)\n            if(graph[vertex][i] == 1 \u0026\u0026 visited[i] == 'N')\n            {\n                enqueue(i);\n                visited[i] = 'Y';\n            }\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928759369,
        "id": "b39ba57f-aad6-4c71-877f-d9effa075838",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928759369,
        "parent_id": "262aa6ca-4dd5-455d-9332-1fa70ce2c760",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For Finding all the Connected components of an undirected graph, we only need to add 2 lines of code to the BFS function. The idea is to call BFS function until all vertices are visited."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For Finding all the Connected components of an undirected graph, we only need to add 2 lines of code to the BFS function. The idea is to call BFS function until all vertices are visited."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928759369,
        "id": "aa555959-8473-466c-a300-160942c57fa2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928759369,
        "parent_id": "262aa6ca-4dd5-455d-9332-1fa70ce2c760",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The lines to be added are:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The lines to be added are:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928759369,
        "id": "5fd3bddb-0c2f-489a-90ab-544f9157237e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928759369,
        "parent_id": "262aa6ca-4dd5-455d-9332-1fa70ce2c760",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "printf(\"\\nConnected component %d\\n\",++count);    \n//count is a global variable initialized to 0\n//add this as first line to BFS function"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "printf(\"\\nConnected component %d\\n\",++count);    \n//count is a global variable initialized to 0\n//add this as first line to BFS function",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928759369,
        "id": "06b2ace7-3d06-401d-bd76-7024285bb764",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928759369,
        "parent_id": "262aa6ca-4dd5-455d-9332-1fa70ce2c760",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "AND"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "AND"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928759369,
        "id": "3127c405-bfde-4877-b764-8bce52a19dba",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928759369,
        "parent_id": "262aa6ca-4dd5-455d-9332-1fa70ce2c760",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "printf(\"%d \",vertex+1);\nadd this as first line of while loop in BFS"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "printf(\"%d \",vertex+1);\nadd this as first line of while loop in BFS",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928759369,
        "id": "a3897020-e4ac-457b-8e4d-6f9b92cb2566",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928759369,
        "parent_id": "262aa6ca-4dd5-455d-9332-1fa70ce2c760",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "and we define the following function:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "and we define the following function:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928759369,
        "id": "b10b0035-4f61-4e2c-b223-1eb699336118",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928759369,
        "parent_id": "262aa6ca-4dd5-455d-9332-1fa70ce2c760",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "void listConnectedComponents(char **graph,int noOfVertices)\n{\n    int i;\n    for(i = 0;i \u003c noOfVertices;++i)\n    {\n        if(visited[i] == 'N')\n            BFS(graph,i,noOfVertices);\n\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "void listConnectedComponents(char **graph,int noOfVertices)\n{\n    int i;\n    for(i = 0;i \u003c noOfVertices;++i)\n    {\n        if(visited[i] == 'N')\n            BFS(graph,i,noOfVertices);\n\n    }\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "Connected Components Of Undirected Graph Using BFS.",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}