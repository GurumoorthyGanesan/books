{
  "ID": "4497f243-abbf-479c-a1b1-04669d0d4594",
  "Root": {
    "alive": true,
    "content": [
      "976a51bf-6c07-4ed6-aa8a-6a85a741fc6d",
      "baadc59c-73a1-4c99-8d6f-907a7abd53ae",
      "6c286db9-c3ab-4ce7-a376-50653114956b",
      "a7827674-ca55-4285-829f-4ffcee52205e",
      "a679add6-5824-4ece-b133-db9cc47ff3cd",
      "0b746a49-d5aa-4228-bca3-7d049c3ee138",
      "0891eba9-8e08-4060-835b-f8e79c8b627e",
      "fd3de7f5-cc3f-4074-88c3-2543c19dc2bb",
      "71ead95e-df48-4462-9eca-ece92e3bac33",
      "552deb92-4d7c-4eb4-9aec-f0a42e9c0dd5",
      "96dbff95-1f4d-408a-8c77-c3613c32133b",
      "6c088ce4-e858-4e0b-915b-4e5d95702b6f",
      "98769e8a-6655-4f3b-90c4-f8d50bf80ab6",
      "c0e286b7-4005-4089-8e7e-32b10b5088c9",
      "9f273f67-9afb-4d72-8835-dada381b5d0e",
      "0e4c498b-14da-4907-8451-996821556bc2",
      "20725d98-4a5f-421b-9d22-b1fc7dc8d90c",
      "a5302070-287f-487c-9a61-548ab946e921",
      "561ac731-43f8-46f8-8a99-770b41d65523",
      "09861f79-deee-440f-90d1-cd79239505d4",
      "2e224414-7abd-4843-8b8a-3bce6ed63aaa",
      "3f3d93d3-eb32-4f41-9943-4c9bfbdea8ef",
      "26d4e6e2-2c48-4a65-8980-2d206dde5665",
      "86e53cad-3122-4642-9f7b-ec713b21bb23",
      "1c349b8f-88aa-4df4-b8dd-16517dcb453c",
      "a6646291-674a-4239-a314-080fc1c51338",
      "ba84cbc1-19ff-4340-af37-15383d72ec47",
      "4ea0ed11-1c20-43f0-acda-90e942848293",
      "0303a45d-085a-41b8-a8d8-f975ba0fd201",
      "c10c64c4-41bc-4461-8bae-0ce2aa0df606"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551929223584,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "4497f243-abbf-479c-a1b1-04669d0d4594",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551929223584,
    "parent_id": "d1c46e3a-31cb-41e0-acf1-907b405548a3",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Introduction To Dynamic Time Warping"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929223571,
        "id": "976a51bf-6c07-4ed6-aa8a-6a85a741fc6d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929223571,
        "parent_id": "4497f243-abbf-479c-a1b1-04669d0d4594",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Dynamic Time Warping",
              [
                [
                  "a",
                  "https://en.wikipedia.org/wiki/Dynamic_time_warping"
                ]
              ]
            ],
            [
              "(DTW) is an algorithm for measuring similarity between two temporal sequences which may vary in speed. For instance, similarities in walking could be detected using DTW, even if one person was walking faster than the other, or if there were accelerations and decelerations during the course of an observation. It can be used to match a sample voice command with others command, even if the person talks faster or slower than the prerecorded sample voice. DTW can be applied to temporal sequences of video, audio and graphics data-indeed, any data which can be turned into a linear sequence can be analyzed with DTW."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Dynamic Time Warping",
            "Link": "https://en.wikipedia.org/wiki/Dynamic_time_warping"
          },
          {
            "Text": "(DTW) is an algorithm for measuring similarity between two temporal sequences which may vary in speed. For instance, similarities in walking could be detected using DTW, even if one person was walking faster than the other, or if there were accelerations and decelerations during the course of an observation. It can be used to match a sample voice command with others command, even if the person talks faster or slower than the prerecorded sample voice. DTW can be applied to temporal sequences of video, audio and graphics data-indeed, any data which can be turned into a linear sequence can be analyzed with DTW."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929223572,
        "id": "baadc59c-73a1-4c99-8d6f-907a7abd53ae",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929223572,
        "parent_id": "4497f243-abbf-479c-a1b1-04669d0d4594",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In general, DTW is a method that calculates an optimal match between two given sequences with certain restrictions. But let’s stick to the simpler points here. Let’s say, we have two voice sequences "
            ],
            [
              "Sample",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "Test",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", and we want to check if these two sequences match or not. Here voice sequence refers to the converted digital signal of your voice. It might be the amplitude or frequency of your voice that denotes the words you say. Let’s assume:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In general, DTW is a method that calculates an optimal match between two given sequences with certain restrictions. But let’s stick to the simpler points here. Let’s say, we have two voice sequences "
          },
          {
            "Text": "Sample",
            "AttrFlags": 1
          },
          {
            "Text": " and "
          },
          {
            "Text": "Test",
            "AttrFlags": 1
          },
          {
            "Text": ", and we want to check if these two sequences match or not. Here voice sequence refers to the converted digital signal of your voice. It might be the amplitude or frequency of your voice that denotes the words you say. Let’s assume:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929223572,
        "id": "6c286db9-c3ab-4ce7-a376-50653114956b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929223572,
        "parent_id": "4497f243-abbf-479c-a1b1-04669d0d4594",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Sample = {1, 2, 3, 5, 5, 5, 6}\nTest   = {1, 1, 2, 2, 3, 5}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Sample = {1, 2, 3, 5, 5, 5, 6}\nTest   = {1, 1, 2, 2, 3, 5}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929223572,
        "id": "a7827674-ca55-4285-829f-4ffcee52205e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929223572,
        "parent_id": "4497f243-abbf-479c-a1b1-04669d0d4594",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We want to find out the optimal match between these two sequences."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "We want to find out the optimal match between these two sequences."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929223572,
        "id": "a679add6-5824-4ece-b133-db9cc47ff3cd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929223572,
        "parent_id": "4497f243-abbf-479c-a1b1-04669d0d4594",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "At first, we define the distance between two points, "
            ],
            [
              "d(x, y)",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " where "
            ],
            [
              "x",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "y",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " represent the two points. Let,"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "At first, we define the distance between two points, "
          },
          {
            "Text": "d(x, y)",
            "AttrFlags": 4
          },
          {
            "Text": " where "
          },
          {
            "Text": "x",
            "AttrFlags": 1
          },
          {
            "Text": " and "
          },
          {
            "Text": "y",
            "AttrFlags": 1
          },
          {
            "Text": " represent the two points. Let,"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929223572,
        "id": "0b746a49-d5aa-4228-bca3-7d049c3ee138",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929223572,
        "parent_id": "4497f243-abbf-479c-a1b1-04669d0d4594",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "d(x, y) = |x - y|     //absolute difference"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "d(x, y) = |x - y|     //absolute difference",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929223573,
        "id": "0891eba9-8e08-4060-835b-f8e79c8b627e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929223573,
        "parent_id": "4497f243-abbf-479c-a1b1-04669d0d4594",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Let’s create a 2D matrix "
            ],
            [
              "Table",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " using these two sequences. We’ll calculate the distances between each point of "
            ],
            [
              "Sample",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " with every points of "
            ],
            [
              "Test",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " and find the optimal match between them."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Let’s create a 2D matrix "
          },
          {
            "Text": "Table",
            "AttrFlags": 1
          },
          {
            "Text": " using these two sequences. We’ll calculate the distances between each point of "
          },
          {
            "Text": "Sample",
            "AttrFlags": 1
          },
          {
            "Text": " with every points of "
          },
          {
            "Text": "Test",
            "AttrFlags": 1
          },
          {
            "Text": " and find the optimal match between them."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929223573,
        "id": "fd3de7f5-cc3f-4074-88c3-2543c19dc2bb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929223573,
        "parent_id": "4497f243-abbf-479c-a1b1-04669d0d4594",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "+------+------+------+------+------+------+------+------+\n|      |   0  |   1  |   1  |   2  |   2  |   3  |   5  |\n+------+------+------+------+------+------+------+------+\n|   0  |      |      |      |      |      |      |      |\n+------+------+------+------+------+------+------+------+\n|   1  |      |      |      |      |      |      |      |\n+------+------+------+------+------+------+------+------+\n|   2  |      |      |      |      |      |      |      |\n+------+------+------+------+------+------+------+------+\n|   3  |      |      |      |      |      |      |      |\n+------+------+------+------+------+------+------+------+\n|   5  |      |      |      |      |      |      |      |\n+------+------+------+------+------+------+------+------+\n|   5  |      |      |      |      |      |      |      |\n+------+------+------+------+------+------+------+------+\n|   5  |      |      |      |      |      |      |      |\n+------+------+------+------+------+------+------+------+\n|   6  |      |      |      |      |      |      |      |\n+------+------+------+------+------+------+------+------+"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "+------+------+------+------+------+------+------+------+\n|      |   0  |   1  |   1  |   2  |   2  |   3  |   5  |\n+------+------+------+------+------+------+------+------+\n|   0  |      |      |      |      |      |      |      |\n+------+------+------+------+------+------+------+------+\n|   1  |      |      |      |      |      |      |      |\n+------+------+------+------+------+------+------+------+\n|   2  |      |      |      |      |      |      |      |\n+------+------+------+------+------+------+------+------+\n|   3  |      |      |      |      |      |      |      |\n+------+------+------+------+------+------+------+------+\n|   5  |      |      |      |      |      |      |      |\n+------+------+------+------+------+------+------+------+\n|   5  |      |      |      |      |      |      |      |\n+------+------+------+------+------+------+------+------+\n|   5  |      |      |      |      |      |      |      |\n+------+------+------+------+------+------+------+------+\n|   6  |      |      |      |      |      |      |      |\n+------+------+------+------+------+------+------+------+",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929223573,
        "id": "71ead95e-df48-4462-9eca-ece92e3bac33",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929223573,
        "parent_id": "4497f243-abbf-479c-a1b1-04669d0d4594",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Here, "
            ],
            [
              "Table[i][j]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " represents the optimal distance between two sequences if we consider the sequence up to "
            ],
            [
              "Sample[i]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "Test[j]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", considering all the optimal distances we observed before."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Here, "
          },
          {
            "Text": "Table[i][j]",
            "AttrFlags": 1
          },
          {
            "Text": " represents the optimal distance between two sequences if we consider the sequence up to "
          },
          {
            "Text": "Sample[i]",
            "AttrFlags": 1
          },
          {
            "Text": " and "
          },
          {
            "Text": "Test[j]",
            "AttrFlags": 1
          },
          {
            "Text": ", considering all the optimal distances we observed before."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929223573,
        "id": "552deb92-4d7c-4eb4-9aec-f0a42e9c0dd5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929223573,
        "parent_id": "4497f243-abbf-479c-a1b1-04669d0d4594",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For the first row, if we take no values from "
            ],
            [
              "Sample",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", the distance between this and "
            ],
            [
              "Test",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " will be "
            ],
            [
              "infinity",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ". So we put "
            ],
            [
              "infinity",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " on the first row. Same goes for the first column. If we take no values from "
            ],
            [
              "Test",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", the distance between this one and "
            ],
            [
              "Sample",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " will also be infinity. And the distance between "
            ],
            [
              "0",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "0",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " will simply be "
            ],
            [
              "0",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". We get,"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For the first row, if we take no values from "
          },
          {
            "Text": "Sample",
            "AttrFlags": 1
          },
          {
            "Text": ", the distance between this and "
          },
          {
            "Text": "Test",
            "AttrFlags": 1
          },
          {
            "Text": " will be "
          },
          {
            "Text": "infinity",
            "AttrFlags": 4
          },
          {
            "Text": ". So we put "
          },
          {
            "Text": "infinity",
            "AttrFlags": 4
          },
          {
            "Text": " on the first row. Same goes for the first column. If we take no values from "
          },
          {
            "Text": "Test",
            "AttrFlags": 1
          },
          {
            "Text": ", the distance between this one and "
          },
          {
            "Text": "Sample",
            "AttrFlags": 1
          },
          {
            "Text": " will also be infinity. And the distance between "
          },
          {
            "Text": "0",
            "AttrFlags": 1
          },
          {
            "Text": " and "
          },
          {
            "Text": "0",
            "AttrFlags": 1
          },
          {
            "Text": " will simply be "
          },
          {
            "Text": "0",
            "AttrFlags": 1
          },
          {
            "Text": ". We get,"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929223574,
        "id": "96dbff95-1f4d-408a-8c77-c3613c32133b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929223574,
        "parent_id": "4497f243-abbf-479c-a1b1-04669d0d4594",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "+------+------+------+------+------+------+------+------+\n|      |   0  |   1  |   1  |   2  |   2  |   3  |   5  |\n+------+------+------+------+------+------+------+------+\n|   0  |   0  |  inf |  inf |  inf |  inf |  inf |  inf |\n+------+------+------+------+------+------+------+------+\n|   1  |  inf |      |      |      |      |      |      |\n+------+------+------+------+------+------+------+------+\n|   2  |  inf |      |      |      |      |      |      |\n+------+------+------+------+------+------+------+------+\n|   3  |  inf |      |      |      |      |      |      |\n+------+------+------+------+------+------+------+------+\n|   5  |  inf |      |      |      |      |      |      |\n+------+------+------+------+------+------+------+------+\n|   5  |  inf |      |      |      |      |      |      |\n+------+------+------+------+------+------+------+------+\n|   5  |  inf |      |      |      |      |      |      |\n+------+------+------+------+------+------+------+------+\n|   6  |  inf |      |      |      |      |      |      |\n+------+------+------+------+------+------+------+------+"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "+------+------+------+------+------+------+------+------+\n|      |   0  |   1  |   1  |   2  |   2  |   3  |   5  |\n+------+------+------+------+------+------+------+------+\n|   0  |   0  |  inf |  inf |  inf |  inf |  inf |  inf |\n+------+------+------+------+------+------+------+------+\n|   1  |  inf |      |      |      |      |      |      |\n+------+------+------+------+------+------+------+------+\n|   2  |  inf |      |      |      |      |      |      |\n+------+------+------+------+------+------+------+------+\n|   3  |  inf |      |      |      |      |      |      |\n+------+------+------+------+------+------+------+------+\n|   5  |  inf |      |      |      |      |      |      |\n+------+------+------+------+------+------+------+------+\n|   5  |  inf |      |      |      |      |      |      |\n+------+------+------+------+------+------+------+------+\n|   5  |  inf |      |      |      |      |      |      |\n+------+------+------+------+------+------+------+------+\n|   6  |  inf |      |      |      |      |      |      |\n+------+------+------+------+------+------+------+------+",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929223574,
        "id": "6c088ce4-e858-4e0b-915b-4e5d95702b6f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929223574,
        "parent_id": "4497f243-abbf-479c-a1b1-04669d0d4594",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Now for each step, we’ll consider the distance between each points in concern and add it with the minimum distance we found so far. This will give us the optimal distance of two sequences up to that position. Our formula will be,"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Now for each step, we’ll consider the distance between each points in concern and add it with the minimum distance we found so far. This will give us the optimal distance of two sequences up to that position. Our formula will be,"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929223574,
        "id": "98769e8a-6655-4f3b-90c4-f8d50bf80ab6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929223574,
        "parent_id": "4497f243-abbf-479c-a1b1-04669d0d4594",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Table[i][j] := d(i, j) + min(Table[i-1][j], Table[i-1][j-1], Table[i][j-1])"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Table[i][j] := d(i, j) + min(Table[i-1][j], Table[i-1][j-1], Table[i][j-1])",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929223575,
        "id": "c0e286b7-4005-4089-8e7e-32b10b5088c9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929223575,
        "parent_id": "4497f243-abbf-479c-a1b1-04669d0d4594",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For the first one, "
            ],
            [
              "d(1, 1)",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " = "
            ],
            [
              "0",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "Table[0][0]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " represents the minimum. So the value of "
            ],
            [
              "Table[1][1]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " will be "
            ],
            [
              "0",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " + "
            ],
            [
              "0",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " = "
            ],
            [
              "0",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". For the second one, "
            ],
            [
              "d(1, 2)",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " = "
            ],
            [
              "0",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". "
            ],
            [
              "Table[1][1]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " represents the minimum. The value will be: "
            ],
            [
              "Table[1][2]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " = "
            ],
            [
              "0",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " + "
            ],
            [
              "0",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " = "
            ],
            [
              "0",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". If we continue this way, after finishing, the table will look like:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For the first one, "
          },
          {
            "Text": "d(1, 1)",
            "AttrFlags": 1
          },
          {
            "Text": " = "
          },
          {
            "Text": "0",
            "AttrFlags": 1
          },
          {
            "Text": ", "
          },
          {
            "Text": "Table[0][0]",
            "AttrFlags": 1
          },
          {
            "Text": " represents the minimum. So the value of "
          },
          {
            "Text": "Table[1][1]",
            "AttrFlags": 1
          },
          {
            "Text": " will be "
          },
          {
            "Text": "0",
            "AttrFlags": 1
          },
          {
            "Text": " + "
          },
          {
            "Text": "0",
            "AttrFlags": 1
          },
          {
            "Text": " = "
          },
          {
            "Text": "0",
            "AttrFlags": 1
          },
          {
            "Text": ". For the second one, "
          },
          {
            "Text": "d(1, 2)",
            "AttrFlags": 1
          },
          {
            "Text": " = "
          },
          {
            "Text": "0",
            "AttrFlags": 1
          },
          {
            "Text": ". "
          },
          {
            "Text": "Table[1][1]",
            "AttrFlags": 1
          },
          {
            "Text": " represents the minimum. The value will be: "
          },
          {
            "Text": "Table[1][2]",
            "AttrFlags": 1
          },
          {
            "Text": " = "
          },
          {
            "Text": "0",
            "AttrFlags": 1
          },
          {
            "Text": " + "
          },
          {
            "Text": "0",
            "AttrFlags": 1
          },
          {
            "Text": " = "
          },
          {
            "Text": "0",
            "AttrFlags": 1
          },
          {
            "Text": ". If we continue this way, after finishing, the table will look like:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929223575,
        "id": "9f273f67-9afb-4d72-8835-dada381b5d0e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929223575,
        "parent_id": "4497f243-abbf-479c-a1b1-04669d0d4594",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "+------+------+------+------+------+------+------+------+\n|      |   0  |   1  |   1  |   2  |   2  |   3  |   5  |\n+------+------+------+------+------+------+------+------+\n|   0  |   0  |  inf |  inf |  inf |  inf |  inf |  inf |\n+------+------+------+------+------+------+------+------+\n|   1  |  inf |   0  |   0  |   1  |   2  |   4  |   8  |\n+------+------+------+------+------+------+------+------+\n|   2  |  inf |   1  |   1  |   0  |   0  |   1  |   4  |\n+------+------+------+------+------+------+------+------+\n|   3  |  inf |   3  |   3  |   1  |   1  |   0  |   2  |\n+------+------+------+------+------+------+------+------+\n|   5  |  inf |   7  |   7  |   4  |   4  |   2  |   0  |\n+------+------+------+------+------+------+------+------+\n|   5  |  inf |  11  |  11  |   7  |   7  |   4  |   0  |\n+------+------+------+------+------+------+------+------+\n|   5  |  inf |  15  |  15  |  10  |  10  |   6  |   0  |\n+------+------+------+------+------+------+------+------+\n|   6  |  inf |  20  |  20  |  14  |  14  |   9  |   1  |\n+------+------+------+------+------+------+------+------+"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "+------+------+------+------+------+------+------+------+\n|      |   0  |   1  |   1  |   2  |   2  |   3  |   5  |\n+------+------+------+------+------+------+------+------+\n|   0  |   0  |  inf |  inf |  inf |  inf |  inf |  inf |\n+------+------+------+------+------+------+------+------+\n|   1  |  inf |   0  |   0  |   1  |   2  |   4  |   8  |\n+------+------+------+------+------+------+------+------+\n|   2  |  inf |   1  |   1  |   0  |   0  |   1  |   4  |\n+------+------+------+------+------+------+------+------+\n|   3  |  inf |   3  |   3  |   1  |   1  |   0  |   2  |\n+------+------+------+------+------+------+------+------+\n|   5  |  inf |   7  |   7  |   4  |   4  |   2  |   0  |\n+------+------+------+------+------+------+------+------+\n|   5  |  inf |  11  |  11  |   7  |   7  |   4  |   0  |\n+------+------+------+------+------+------+------+------+\n|   5  |  inf |  15  |  15  |  10  |  10  |   6  |   0  |\n+------+------+------+------+------+------+------+------+\n|   6  |  inf |  20  |  20  |  14  |  14  |   9  |   1  |\n+------+------+------+------+------+------+------+------+",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929223575,
        "id": "0e4c498b-14da-4907-8451-996821556bc2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929223575,
        "parent_id": "4497f243-abbf-479c-a1b1-04669d0d4594",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The value at "
            ],
            [
              "Table[7][6]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " represents the maximum distance between these two given sequences. Here "
            ],
            [
              "1",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " represents the maximum distance between "
            ],
            [
              "Sample",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "Test",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " is "
            ],
            [
              "1",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The value at "
          },
          {
            "Text": "Table[7][6]",
            "AttrFlags": 1
          },
          {
            "Text": " represents the maximum distance between these two given sequences. Here "
          },
          {
            "Text": "1",
            "AttrFlags": 1
          },
          {
            "Text": " represents the maximum distance between "
          },
          {
            "Text": "Sample",
            "AttrFlags": 1
          },
          {
            "Text": " and "
          },
          {
            "Text": "Test",
            "AttrFlags": 1
          },
          {
            "Text": " is "
          },
          {
            "Text": "1",
            "AttrFlags": 1
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929223575,
        "id": "20725d98-4a5f-421b-9d22-b1fc7dc8d90c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929223575,
        "parent_id": "4497f243-abbf-479c-a1b1-04669d0d4594",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Now if we backtrack from the last point, all the way back towards the starting "
            ],
            [
              "(0, 0)",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " point, we get a long line that moves horizontally, vertically and diagonally. Our backtracking procedure will be:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Now if we backtrack from the last point, all the way back towards the starting "
          },
          {
            "Text": "(0, 0)",
            "AttrFlags": 1
          },
          {
            "Text": " point, we get a long line that moves horizontally, vertically and diagonally. Our backtracking procedure will be:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929223575,
        "id": "a5302070-287f-487c-9a61-548ab946e921",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929223575,
        "parent_id": "4497f243-abbf-479c-a1b1-04669d0d4594",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "if Table[i-1][j-1] \u003c= Table[i-1][j] and Table[i-1][j-1] \u003c= Table[i][j-1]\n    i := i - 1\n    j := j - 1\nelse if Table[i-1][j] \u003c= Table[i-1][j-1] and Table[i-1][j] \u003c= Table[i][j-1]\n    i := i - 1\nelse\n    j := j - 1\nend if"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "if Table[i-1][j-1] \u003c= Table[i-1][j] and Table[i-1][j-1] \u003c= Table[i][j-1]\n    i := i - 1\n    j := j - 1\nelse if Table[i-1][j] \u003c= Table[i-1][j-1] and Table[i-1][j] \u003c= Table[i][j-1]\n    i := i - 1\nelse\n    j := j - 1\nend if",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929223576,
        "id": "561ac731-43f8-46f8-8a99-770b41d65523",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929223576,
        "parent_id": "4497f243-abbf-479c-a1b1-04669d0d4594",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We’ll continue this till we reach "
            ],
            [
              "(0, 0)",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". Each move has its own meaning:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "We’ll continue this till we reach "
          },
          {
            "Text": "(0, 0)",
            "AttrFlags": 1
          },
          {
            "Text": ". Each move has its own meaning:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929223577,
        "id": "09861f79-deee-440f-90d1-cd79239505d4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929223577,
        "parent_id": "4497f243-abbf-479c-a1b1-04669d0d4594",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A horizontal move represents deletion. That means our "
            ],
            [
              "Test",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " sequence accelerated during this interval."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "A horizontal move represents deletion. That means our "
          },
          {
            "Text": "Test",
            "AttrFlags": 1
          },
          {
            "Text": " sequence accelerated during this interval."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929223577,
        "id": "2e224414-7abd-4843-8b8a-3bce6ed63aaa",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929223577,
        "parent_id": "4497f243-abbf-479c-a1b1-04669d0d4594",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A vertical move represents insertion. That means out "
            ],
            [
              "Test",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " sequence decelerated during this interval."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "A vertical move represents insertion. That means out "
          },
          {
            "Text": "Test",
            "AttrFlags": 1
          },
          {
            "Text": " sequence decelerated during this interval."
          }
        ]
      },
      {
        "alive": true,
        "content": [
          "d237492c-6781-4be0-bf82-03b2a93f289a"
        ],
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929223582,
        "id": "3f3d93d3-eb32-4f41-9943-4c9bfbdea8ef",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929223582,
        "parent_id": "4497f243-abbf-479c-a1b1-04669d0d4594",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A diagonal move represents match. During this period "
            ],
            [
              "Test",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "Sample",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " were same."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "content_resolved": [
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1551929223578,
            "id": "d237492c-6781-4be0-bf82-03b2a93f289a",
            "ignore_block_count": true,
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1551929223578,
            "parent_id": "3f3d93d3-eb32-4f41-9943-4c9bfbdea8ef",
            "parent_table": "block",
            "properties": {
              "source": [
                [
                  "/tmp/144f2274-b9a4-45f4-9f9b-5d8336213aa7/befc9cb250abf9ebdf9b00dfb66599dad8af29c5.jpg"
                ]
              ]
            },
            "type": "image",
            "version": 1,
            "source": "/tmp/144f2274-b9a4-45f4-9f9b-5d8336213aa7/befc9cb250abf9ebdf9b00dfb66599dad8af29c5.jpg",
            "image_url": "https://www.notion.so/image/https:%2F%2Fwww.notion.so%2Ftmp%2F144f2274-b9a4-45f4-9f9b-5d8336213aa7%2Fbefc9cb250abf9ebdf9b00dfb66599dad8af29c5.jpg"
          }
        ],
        "inline_content": [
          {
            "Text": "A diagonal move represents match. During this period "
          },
          {
            "Text": "Test",
            "AttrFlags": 1
          },
          {
            "Text": " and "
          },
          {
            "Text": "Sample",
            "AttrFlags": 1
          },
          {
            "Text": " were same."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929223582,
        "id": "26d4e6e2-2c48-4a65-8980-2d206dde5665",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929223582,
        "parent_id": "4497f243-abbf-479c-a1b1-04669d0d4594",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Our pseudo-code will be:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Our pseudo-code will be:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929223582,
        "id": "86e53cad-3122-4642-9f7b-ec713b21bb23",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929223582,
        "parent_id": "4497f243-abbf-479c-a1b1-04669d0d4594",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Procedure DTW(Sample, Test):\nn := Sample.length\nm := Test.length\nCreate Table[n + 1][m + 1]\nfor i from 1 to n\n    Table[i][0] := infinity\nend for\nfor i from 1 to m\n    Table[0][i] := infinity\nend for\nTable[0][0] := 0\nfor i from 1 to n\n    for j from 1 to m\n        Table[i][j] := d(Sample[i], Test[j])\n                       + minimum(Table[i-1][j-1],      //match\n                                 Table[i][j-1],        //insertion\n                                 Table[i-1][j])        //deletion\n    end for\nend for\nReturn Table[n + 1][m + 1]"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Procedure DTW(Sample, Test):\nn := Sample.length\nm := Test.length\nCreate Table[n + 1][m + 1]\nfor i from 1 to n\n    Table[i][0] := infinity\nend for\nfor i from 1 to m\n    Table[0][i] := infinity\nend for\nTable[0][0] := 0\nfor i from 1 to n\n    for j from 1 to m\n        Table[i][j] := d(Sample[i], Test[j])\n                       + minimum(Table[i-1][j-1],      //match\n                                 Table[i][j-1],        //insertion\n                                 Table[i-1][j])        //deletion\n    end for\nend for\nReturn Table[n + 1][m + 1]",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929223582,
        "id": "1c349b8f-88aa-4df4-b8dd-16517dcb453c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929223582,
        "parent_id": "4497f243-abbf-479c-a1b1-04669d0d4594",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We can also add a locality constraint. That is, we require that if "
            ],
            [
              "Sample[i]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is matched with "
            ],
            [
              "Test[j]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", then "
            ],
            [
              "|i - j|",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is no larger than "
            ],
            [
              "w",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", a window parameter."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "We can also add a locality constraint. That is, we require that if "
          },
          {
            "Text": "Sample[i]",
            "AttrFlags": 2
          },
          {
            "Text": " is matched with "
          },
          {
            "Text": "Test[j]",
            "AttrFlags": 2
          },
          {
            "Text": ", then "
          },
          {
            "Text": "|i - j|",
            "AttrFlags": 2
          },
          {
            "Text": " is no larger than "
          },
          {
            "Text": "w",
            "AttrFlags": 1
          },
          {
            "Text": ", a window parameter."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929223583,
        "id": "a6646291-674a-4239-a314-080fc1c51338",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929223583,
        "parent_id": "4497f243-abbf-479c-a1b1-04669d0d4594",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Complexity:",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Complexity:",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929223583,
        "id": "ba84cbc1-19ff-4340-af37-15383d72ec47",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929223583,
        "parent_id": "4497f243-abbf-479c-a1b1-04669d0d4594",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The complexity of computing DTW is "
            ],
            [
              "O(m * n)",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " where "
            ],
            [
              "m",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "n",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " represent the length of each sequence. Faster techniques for computing DTW include PrunedDTW, SparseDTW and FastDTW."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The complexity of computing DTW is "
          },
          {
            "Text": "O(m * n)",
            "AttrFlags": 1
          },
          {
            "Text": " where "
          },
          {
            "Text": "m",
            "AttrFlags": 1
          },
          {
            "Text": " and "
          },
          {
            "Text": "n",
            "AttrFlags": 1
          },
          {
            "Text": " represent the length of each sequence. Faster techniques for computing DTW include PrunedDTW, SparseDTW and FastDTW."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929223583,
        "id": "4ea0ed11-1c20-43f0-acda-90e942848293",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929223583,
        "parent_id": "4497f243-abbf-479c-a1b1-04669d0d4594",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Applications:",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Applications:",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929223584,
        "id": "0303a45d-085a-41b8-a8d8-f975ba0fd201",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929223584,
        "parent_id": "4497f243-abbf-479c-a1b1-04669d0d4594",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Spoken word recognition"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Spoken word recognition"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929223584,
        "id": "c10c64c4-41bc-4461-8bae-0ce2aa0df606",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929223584,
        "parent_id": "4497f243-abbf-479c-a1b1-04669d0d4594",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Correlation Power Analysis"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Correlation Power Analysis"
          }
        ]
      }
    ],
    "title": "Introduction To Dynamic Time Warping",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}