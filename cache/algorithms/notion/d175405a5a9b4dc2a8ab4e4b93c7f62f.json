{
  "ID": "d175405a-5a9b-4dc2-a8ab-4e4b93c7f62f",
  "Root": {
    "alive": true,
    "content": [
      "e21dd6c9-7675-45b4-ac6c-68358f4686b8",
      "984a494f-84f7-4065-9bf7-a53d9740aa72",
      "9849b814-23e2-4d51-91b3-28294eb5d28f",
      "61c116b1-20c8-4443-b421-86b3342df648",
      "3fdd48a0-dc43-48b0-9124-b3e15b7e5a2f"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551928456955,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "d175405a-5a9b-4dc2-a8ab-4e4b93c7f62f",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551928456955,
    "parent_id": "56228e72-edf0-4f14-b6c7-1d113093b22a",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Typical anary tree representation"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928456954,
        "id": "e21dd6c9-7675-45b4-ac6c-68358f4686b8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928456954,
        "parent_id": "d175405a-5a9b-4dc2-a8ab-4e4b93c7f62f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Typically we represent an anary tree (one with potentially unlimited children per node) as a binary tree, (one with exactly two children per node). The “next” child is regarded as a sibling. Note that if a tree is binary, this representation creates extra nodes."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Typically we represent an anary tree (one with potentially unlimited children per node) as a binary tree, (one with exactly two children per node). The “next” child is regarded as a sibling. Note that if a tree is binary, this representation creates extra nodes."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928456955,
        "id": "984a494f-84f7-4065-9bf7-a53d9740aa72",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928456955,
        "parent_id": "d175405a-5a9b-4dc2-a8ab-4e4b93c7f62f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We then iterate over the siblings and recurse down the children. As most trees are relatively shallow - lots of children but only a few levels of hierarchy, this gives rise to efficient code. Note human genealogies are an exception (lots of levels of ancestors, only a few children per level)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "We then iterate over the siblings and recurse down the children. As most trees are relatively shallow - lots of children but only a few levels of hierarchy, this gives rise to efficient code. Note human genealogies are an exception (lots of levels of ancestors, only a few children per level)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928456955,
        "id": "9849b814-23e2-4d51-91b3-28294eb5d28f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928456955,
        "parent_id": "d175405a-5a9b-4dc2-a8ab-4e4b93c7f62f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If necessary back pointers can be kept to allow the tree to be ascended. These are more difficult to maintain."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If necessary back pointers can be kept to allow the tree to be ascended. These are more difficult to maintain."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928456955,
        "id": "61c116b1-20c8-4443-b421-86b3342df648",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928456955,
        "parent_id": "d175405a-5a9b-4dc2-a8ab-4e4b93c7f62f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note that it is typical to have one function to call on the root and a recursive function with extra parameters, in this case tree depth."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note that it is typical to have one function to call on the root and a recursive function with extra parameters, in this case tree depth."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928456955,
        "id": "3fdd48a0-dc43-48b0-9124-b3e15b7e5a2f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928456955,
        "parent_id": "d175405a-5a9b-4dc2-a8ab-4e4b93c7f62f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "struct node\n{\n   struct node *next;\n   struct node *child;\n   std::string data;\n}\n\nvoid printtree_r(struct node *node, int depth)\n{\n   int i;\n\n   while(node)\n   {\n       if(node-\u003echild)\n       {\n          for(i=0;i\u003cdepth*3;i++)\n              printf(\" \");\n          printf(\"{\\n\"):\n          printtree_r(node-\u003echild, depth +1);\n          for(i=0;i\u003cdepth*3;i++)\n              printf(\" \");\n          printf(\"{\\n\"):\n  \n          for(i=0;i\u003cdepth*3;i++)\n             printf(\" \");\n           printf(\"%s\\n\", node-\u003edata.c_str());\n\n           node = node-\u003enext;\n        }\n    }\n}\n\nvoid printtree(node *root)\n{\n   printree_r(root, 0);\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "struct node\n{\n   struct node *next;\n   struct node *child;\n   std::string data;\n}\n\nvoid printtree_r(struct node *node, int depth)\n{\n   int i;\n\n   while(node)\n   {\n       if(node-\u003echild)\n       {\n          for(i=0;i\u003cdepth*3;i++)\n              printf(\" \");\n          printf(\"{\\n\"):\n          printtree_r(node-\u003echild, depth +1);\n          for(i=0;i\u003cdepth*3;i++)\n              printf(\" \");\n          printf(\"{\\n\"):\n  \n          for(i=0;i\u003cdepth*3;i++)\n             printf(\" \");\n           printf(\"%s\\n\", node-\u003edata.c_str());\n\n           node = node-\u003enext;\n        }\n    }\n}\n\nvoid printtree(node *root)\n{\n   printree_r(root, 0);\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "Typical anary tree representation",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}