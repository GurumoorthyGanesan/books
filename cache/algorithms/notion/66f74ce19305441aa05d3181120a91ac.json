{
  "ID": "66f74ce1-9305-441a-a05d-3181120a91ac",
  "Root": {
    "alive": true,
    "content": [
      "f288bc1f-8e44-44ca-ac28-fd4754d445a7",
      "5a416500-15c5-41f8-b272-79c26dbf40de",
      "996b26f2-6ea3-4141-a819-6960ab3c9354",
      "5658523f-d718-4abd-846f-7fbb302b43f0",
      "133859e8-43b3-407f-88ba-95c89861fb32",
      "7ae37dee-7d06-455c-9933-7755b008a857",
      "ef130107-ca97-472e-a684-16b8f9e2c73c"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551928087394,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "66f74ce1-9305-441a-a05d-3181120a91ac",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551928087394,
    "parent_id": "fb292c5c-1e2c-4d16-9d29-fce0aff04b2b",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Continuous knapsack problem"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928087391,
        "id": "f288bc1f-8e44-44ca-ac28-fd4754d445a7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928087391,
        "parent_id": "66f74ce1-9305-441a-a05d-3181120a91ac",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Given items as "
            ],
            [
              "(value, weight)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " we need to place them in a knapsack (container) of a capacity "
            ],
            [
              "k",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Note! We can break items to maximize value!"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Given items as "
          },
          {
            "Text": "(value, weight)",
            "AttrFlags": 2
          },
          {
            "Text": " we need to place them in a knapsack (container) of a capacity "
          },
          {
            "Text": "k",
            "AttrFlags": 2
          },
          {
            "Text": ". Note! We can break items to maximize value!"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928087392,
        "id": "5a416500-15c5-41f8-b272-79c26dbf40de",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928087392,
        "parent_id": "66f74ce1-9305-441a-a05d-3181120a91ac",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Example input:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Example input:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928087392,
        "id": "996b26f2-6ea3-4141-a819-6960ab3c9354",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928087392,
        "parent_id": "66f74ce1-9305-441a-a05d-3181120a91ac",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "values[] = [1, 4, 5, 2, 10]\nweights[] = [3, 2, 1, 2, 4]\nk = 8"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "values[] = [1, 4, 5, 2, 10]\nweights[] = [3, 2, 1, 2, 4]\nk = 8",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928087392,
        "id": "5658523f-d718-4abd-846f-7fbb302b43f0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928087392,
        "parent_id": "66f74ce1-9305-441a-a05d-3181120a91ac",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Expected output:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Expected output:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928087392,
        "id": "133859e8-43b3-407f-88ba-95c89861fb32",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928087392,
        "parent_id": "66f74ce1-9305-441a-a05d-3181120a91ac",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "maximumValueOfItemsInK = 20;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "maximumValueOfItemsInK = 20;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928087394,
        "id": "7ae37dee-7d06-455c-9933-7755b008a857",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928087394,
        "parent_id": "66f74ce1-9305-441a-a05d-3181120a91ac",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Algorithm:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Algorithm:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928087394,
        "id": "ef130107-ca97-472e-a684-16b8f9e2c73c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928087394,
        "parent_id": "66f74ce1-9305-441a-a05d-3181120a91ac",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "1) Sort values and weights by value/weight.\n   values[] = [5, 10, 4, 2, 1]\n   weights[] = [1, 4, 2, 2, 3]\n2) currentWeight = 0; currentValue = 0;\n3) FOR i = 0; currentWeight \u003c k \u0026\u0026 i \u003c values.length; i++ DO:\n       IF k - currentWeight \u003c weights[i] DO\n           currentValue = currentValue + values[i];\n           currentWeight = currentWeight + weights[i];\n       ELSE\n           currentValue = currentValue + values[i]*(k - currentWeight)/weights[i]\n           currentWeight = currentWeight + weights[i]*(k - currentWeight)/weights[i]\n       END_IF\n   END_FOR\n   PRINT \"maximumValueOfItemsInK = \" + currentValue;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "1) Sort values and weights by value/weight.\n   values[] = [5, 10, 4, 2, 1]\n   weights[] = [1, 4, 2, 2, 3]\n2) currentWeight = 0; currentValue = 0;\n3) FOR i = 0; currentWeight \u003c k \u0026\u0026 i \u003c values.length; i++ DO:\n       IF k - currentWeight \u003c weights[i] DO\n           currentValue = currentValue + values[i];\n           currentWeight = currentWeight + weights[i];\n       ELSE\n           currentValue = currentValue + values[i]*(k - currentWeight)/weights[i]\n           currentWeight = currentWeight + weights[i]*(k - currentWeight)/weights[i]\n       END_IF\n   END_FOR\n   PRINT \"maximumValueOfItemsInK = \" + currentValue;",
        "code_language": "Plain Text"
      }
    ],
    "title": "Continuous knapsack problem",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}