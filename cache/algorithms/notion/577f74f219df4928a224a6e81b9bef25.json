{
  "ID": "577f74f2-19df-4928-a224-a6e81b9bef25",
  "Root": {
    "alive": true,
    "content": [
      "1ca78362-a7f4-4a60-8d30-f075a4375c76",
      "fc902a58-9bb6-4ac0-9825-2e5cc654e33f",
      "b7a392de-0ffd-43af-81cb-346cb59b8cff",
      "fe636061-fdeb-43c8-8472-61482f7e2594",
      "c92cd8b7-ee0b-476f-80b5-8eae77851710",
      "999b3480-cba8-4cc8-bd9f-54a31c274a3c",
      "8470b831-26e7-47eb-95f2-4d008ddd47c0",
      "88a9b933-c133-49a3-86b2-d6d6acca56eb",
      "f9fec7ec-2b29-4d1d-ac22-582da9c0c33a",
      "6960344e-11cb-486f-a71e-90aefca60b87",
      "26e84a0c-16af-4667-96b6-33c9485298e1",
      "47c28662-3597-45d4-a73a-f8421486cba8",
      "b2293c4d-1cad-4174-a6c3-b74311669b0b",
      "ec8de4a9-9938-4a22-bc90-1a330323bfec",
      "8ae75ebc-1269-4017-9d99-6da7a62878f5",
      "bae062e9-9700-44b3-ab61-37a2b35de579",
      "87cd300a-b97e-4fdd-ae73-ecaabb24defa",
      "7c83a2a1-d5e0-490d-8092-5e2d847cf7b5",
      "6b4fdc20-94e2-4774-8bf7-9dddb58de21e",
      "348730e7-8921-4081-80ac-2622a8486268",
      "cf84d6bf-56f2-4cba-94a5-9327308c4095",
      "9bae3d42-a784-4df2-86b0-e11abbf14ccf",
      "72a24e92-c908-402c-a6f8-0c97bea70e9d",
      "3203a933-fcd7-4678-b429-09e86b9df1c6"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551928476810,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "577f74f2-19df-4928-a224-a6e81b9bef25",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551928476810,
    "parent_id": "e800516e-b244-4000-89c7-0041f1acd148",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Introduction to hash functions"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928476799,
        "id": "1ca78362-a7f4-4a60-8d30-f075a4375c76",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928476799,
        "parent_id": "577f74f2-19df-4928-a224-a6e81b9bef25",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Hash function "
            ],
            [
              "h()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is an arbitrary function which mapped data "
            ],
            [
              "x ∈ X",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " of arbitrary size to value "
            ],
            [
              "y ∈ Y",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " of fixed size: "
            ],
            [
              "y = h(x)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Good hash functions have follows restrictions:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Hash function "
          },
          {
            "Text": "h()",
            "AttrFlags": 2
          },
          {
            "Text": " is an arbitrary function which mapped data "
          },
          {
            "Text": "x ∈ X",
            "AttrFlags": 2
          },
          {
            "Text": " of arbitrary size to value "
          },
          {
            "Text": "y ∈ Y",
            "AttrFlags": 2
          },
          {
            "Text": " of fixed size: "
          },
          {
            "Text": "y = h(x)",
            "AttrFlags": 2
          },
          {
            "Text": ". Good hash functions have follows restrictions:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928476802,
        "id": "fc902a58-9bb6-4ac0-9825-2e5cc654e33f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928476802,
        "parent_id": "577f74f2-19df-4928-a224-a6e81b9bef25",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "hash functions behave likes uniform distribution"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "hash functions behave likes uniform distribution"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928476803,
        "id": "b7a392de-0ffd-43af-81cb-346cb59b8cff",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928476803,
        "parent_id": "577f74f2-19df-4928-a224-a6e81b9bef25",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "hash functions is deterministic. "
            ],
            [
              "h(x)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " should always return the same value for a given "
            ],
            [
              "x",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "hash functions is deterministic. "
          },
          {
            "Text": "h(x)",
            "AttrFlags": 2
          },
          {
            "Text": " should always return the same value for a given "
          },
          {
            "Text": "x",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928476803,
        "id": "fe636061-fdeb-43c8-8472-61482f7e2594",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928476803,
        "parent_id": "577f74f2-19df-4928-a224-a6e81b9bef25",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "fast calculating (has runtime O(1))"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "fast calculating (has runtime O(1))"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928476803,
        "id": "c92cd8b7-ee0b-476f-80b5-8eae77851710",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928476803,
        "parent_id": "577f74f2-19df-4928-a224-a6e81b9bef25",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In general case size of hash function less then size of input data: "
            ],
            [
              "|y| \u003c |x|",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Hash functions are not reversible or in other words it may be collision: "
            ],
            [
              "∃ x1, x2 ∈ X, x1 ≠ x2: h(x1) = h(x2)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". "
            ],
            [
              "X",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " may be finite or infinite set and "
            ],
            [
              "Y",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is finite set."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In general case size of hash function less then size of input data: "
          },
          {
            "Text": "|y| \u003c |x|",
            "AttrFlags": 2
          },
          {
            "Text": ". Hash functions are not reversible or in other words it may be collision: "
          },
          {
            "Text": "∃ x1, x2 ∈ X, x1 ≠ x2: h(x1) = h(x2)",
            "AttrFlags": 2
          },
          {
            "Text": ". "
          },
          {
            "Text": "X",
            "AttrFlags": 2
          },
          {
            "Text": " may be finite or infinite set and "
          },
          {
            "Text": "Y",
            "AttrFlags": 2
          },
          {
            "Text": " is finite set."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928476804,
        "id": "999b3480-cba8-4cc8-bd9f-54a31c274a3c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928476804,
        "parent_id": "577f74f2-19df-4928-a224-a6e81b9bef25",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Hash functions are used in a lot of parts of computer science, for example in software engineering, cryptography, databases, networks, machine learning and so on. There are many different types of hash functions, with differing domain specific properties."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Hash functions are used in a lot of parts of computer science, for example in software engineering, cryptography, databases, networks, machine learning and so on. There are many different types of hash functions, with differing domain specific properties."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928476804,
        "id": "8470b831-26e7-47eb-95f2-4d008ddd47c0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928476804,
        "parent_id": "577f74f2-19df-4928-a224-a6e81b9bef25",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Often hash is an integer value. There are special methods in programmning languages for hash calculating. For example, in "
            ],
            [
              "C#",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "GetHashCode()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method for all types returns "
            ],
            [
              "Int32",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " value (32 bit integer number). In "
            ],
            [
              "Java",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " every class provides "
            ],
            [
              "hashCode()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method which return "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Each data type has own or user defined implementations."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Often hash is an integer value. There are special methods in programmning languages for hash calculating. For example, in "
          },
          {
            "Text": "C#",
            "AttrFlags": 2
          },
          {
            "Text": " "
          },
          {
            "Text": "GetHashCode()",
            "AttrFlags": 2
          },
          {
            "Text": " method for all types returns "
          },
          {
            "Text": "Int32",
            "AttrFlags": 2
          },
          {
            "Text": " value (32 bit integer number). In "
          },
          {
            "Text": "Java",
            "AttrFlags": 2
          },
          {
            "Text": " every class provides "
          },
          {
            "Text": "hashCode()",
            "AttrFlags": 2
          },
          {
            "Text": " method which return "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": ". Each data type has own or user defined implementations."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928476804,
        "id": "88a9b933-c133-49a3-86b2-d6d6acca56eb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928476804,
        "parent_id": "577f74f2-19df-4928-a224-a6e81b9bef25",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Hash methods"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Hash methods"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928476804,
        "id": "f9fec7ec-2b29-4d1d-ac22-582da9c0c33a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928476804,
        "parent_id": "577f74f2-19df-4928-a224-a6e81b9bef25",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "There are several approaches for determinig hash function. Without loss of generality, lets "
            ],
            [
              "x ∈ X = {z ∈ ℤ: z ≥ 0}",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " are positive integer numbers. Often "
            ],
            [
              "m",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is prime (not too close to an exact power of 2)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "There are several approaches for determinig hash function. Without loss of generality, lets "
          },
          {
            "Text": "x ∈ X = {z ∈ ℤ: z ≥ 0}",
            "AttrFlags": 2
          },
          {
            "Text": " are positive integer numbers. Often "
          },
          {
            "Text": "m",
            "AttrFlags": 2
          },
          {
            "Text": " is prime (not too close to an exact power of 2)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928476805,
        "id": "6960344e-11cb-486f-a71e-90aefca60b87",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928476805,
        "parent_id": "577f74f2-19df-4928-a224-a6e81b9bef25",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Method | Hash function |\n—— | —— |\nDivision method | "
            ],
            [
              "h(x) = x mod m",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | is often a good choice for m |\nMultiplication method | "
            ],
            [
              "h(x) = ⌊m (xA mod 1)⌋, A ∈ {z ∈ ℝ: 0 \u003c z \u003c 1}",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " |"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Method | Hash function |\n—— | —— |\nDivision method | "
          },
          {
            "Text": "h(x) = x mod m",
            "AttrFlags": 2
          },
          {
            "Text": " | is often a good choice for m |\nMultiplication method | "
          },
          {
            "Text": "h(x) = ⌊m (xA mod 1)⌋, A ∈ {z ∈ ℝ: 0 \u003c z \u003c 1}",
            "AttrFlags": 2
          },
          {
            "Text": " |"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928476805,
        "id": "26e84a0c-16af-4667-96b6-33c9485298e1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928476805,
        "parent_id": "577f74f2-19df-4928-a224-a6e81b9bef25",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Hash table"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Hash table"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928476805,
        "id": "47c28662-3597-45d4-a73a-f8421486cba8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928476805,
        "parent_id": "577f74f2-19df-4928-a224-a6e81b9bef25",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Hash functions used in hash tables for computing index into an array of slots. Hash table is data structure for implementing dictionaries (key-value structure). Good implemented hash tables have O(1) time for the next operations: insert, search and delete data by key. More than one keys may hash to the same slot. There are two ways for resolving collision:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Hash functions used in hash tables for computing index into an array of slots. Hash table is data structure for implementing dictionaries (key-value structure). Good implemented hash tables have O(1) time for the next operations: insert, search and delete data by key. More than one keys may hash to the same slot. There are two ways for resolving collision:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928476805,
        "id": "b2293c4d-1cad-4174-a6c3-b74311669b0b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928476805,
        "parent_id": "577f74f2-19df-4928-a224-a6e81b9bef25",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Chaining: linked list is used for storing elements with the same hash value in slot"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Chaining: linked list is used for storing elements with the same hash value in slot"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928476806,
        "id": "ec8de4a9-9938-4a22-bc90-1a330323bfec",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928476806,
        "parent_id": "577f74f2-19df-4928-a224-a6e81b9bef25",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Open addressing: zero or one element is stored in each slot"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Open addressing: zero or one element is stored in each slot"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928476806,
        "id": "8ae75ebc-1269-4017-9d99-6da7a62878f5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928476806,
        "parent_id": "577f74f2-19df-4928-a224-a6e81b9bef25",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The next methods are used to compute the probe sequences required for open addressing"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The next methods are used to compute the probe sequences required for open addressing"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928476806,
        "id": "bae062e9-9700-44b3-ab61-37a2b35de579",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928476806,
        "parent_id": "577f74f2-19df-4928-a224-a6e81b9bef25",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Method | Formula |\n—— | —— |\nLinear probing | "
            ],
            [
              "h(x, i) = (h'(x) + i) mod m",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " |\nQuadratic probing | "
            ],
            [
              "h(x, i) = (h'(x) + c1*i + c2*i^2) mod m",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " |\nDouble hashing | "
            ],
            [
              "h(x, i) = (h1(x) + i*h2(x)) mod m",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " |"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Method | Formula |\n—— | —— |\nLinear probing | "
          },
          {
            "Text": "h(x, i) = (h'(x) + i) mod m",
            "AttrFlags": 2
          },
          {
            "Text": " |\nQuadratic probing | "
          },
          {
            "Text": "h(x, i) = (h'(x) + c1*i + c2*i^2) mod m",
            "AttrFlags": 2
          },
          {
            "Text": " |\nDouble hashing | "
          },
          {
            "Text": "h(x, i) = (h1(x) + i*h2(x)) mod m",
            "AttrFlags": 2
          },
          {
            "Text": " |"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928476806,
        "id": "87cd300a-b97e-4fdd-ae73-ecaabb24defa",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928476806,
        "parent_id": "577f74f2-19df-4928-a224-a6e81b9bef25",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Where "
            ],
            [
              "i ∈ {0, 1, ..., m-1}",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "h'(x), h1(x), h2(x)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " are auxiliary hash functions, "
            ],
            [
              "c1, c2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " are positive auxiliary constants."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Where "
          },
          {
            "Text": "i ∈ {0, 1, ..., m-1}",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "h'(x), h1(x), h2(x)",
            "AttrFlags": 2
          },
          {
            "Text": " are auxiliary hash functions, "
          },
          {
            "Text": "c1, c2",
            "AttrFlags": 2
          },
          {
            "Text": " are positive auxiliary constants."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928476806,
        "id": "7c83a2a1-d5e0-490d-8092-5e2d847cf7b5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928476806,
        "parent_id": "577f74f2-19df-4928-a224-a6e81b9bef25",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Examples"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Examples"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928476807,
        "id": "6b4fdc20-94e2-4774-8bf7-9dddb58de21e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928476807,
        "parent_id": "577f74f2-19df-4928-a224-a6e81b9bef25",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Lets "
            ],
            [
              "x ∈ U{1, 1000}, h = x mod m",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". The next table shows the hash values in case of not prime and prime. Bolded text indicates the same hash values."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Lets "
          },
          {
            "Text": "x ∈ U{1, 1000}, h = x mod m",
            "AttrFlags": 2
          },
          {
            "Text": ". The next table shows the hash values in case of not prime and prime. Bolded text indicates the same hash values."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928476807,
        "id": "348730e7-8921-4081-80ac-2622a8486268",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928476807,
        "parent_id": "577f74f2-19df-4928-a224-a6e81b9bef25",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "x | m = 100 (not prime) | m = 101 (prime) |\n–– | –– | — |\n723 | 23 | 16 |\n103 | 3 | 2 |\n738 | 38 | 31 |\n292 | 92 | 90 |\n61 | 61 | 61 |\n87 | 87 | 87 |\n995 | 95 | 86 |\n549 | 49 | 44 |\n991 | 91 | 82 |\n757 | "
            ],
            [
              "57",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " | 50 |\n920 | 20 | 11 |\n626 | 26 | 20 |\n557 | "
            ],
            [
              "57",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " | 52 |\n831 | 31 | 23 |\n619 | 19 | 13 |"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "x | m = 100 (not prime) | m = 101 (prime) |\n–– | –– | — |\n723 | 23 | 16 |\n103 | 3 | 2 |\n738 | 38 | 31 |\n292 | 92 | 90 |\n61 | 61 | 61 |\n87 | 87 | 87 |\n995 | 95 | 86 |\n549 | 49 | 44 |\n991 | 91 | 82 |\n757 | "
          },
          {
            "Text": "57",
            "AttrFlags": 1
          },
          {
            "Text": " | 50 |\n920 | 20 | 11 |\n626 | 26 | 20 |\n557 | "
          },
          {
            "Text": "57",
            "AttrFlags": 1
          },
          {
            "Text": " | 52 |\n831 | 31 | 23 |\n619 | 19 | 13 |"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928476807,
        "id": "cf84d6bf-56f2-4cba-94a5-9327308c4095",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928476807,
        "parent_id": "577f74f2-19df-4928-a224-a6e81b9bef25",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Links"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Links"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928476807,
        "id": "9bae3d42-a784-4df2-86b0-e11abbf14ccf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928476807,
        "parent_id": "577f74f2-19df-4928-a224-a6e81b9bef25",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, Clifford Stein. Introduction to Algorithms."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, Clifford Stein. Introduction to Algorithms."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928476809,
        "id": "72a24e92-c908-402c-a6f8-0c97bea70e9d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928476809,
        "parent_id": "577f74f2-19df-4928-a224-a6e81b9bef25",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Overview of Hash Tables",
              [
                [
                  "a",
                  "https://courses.csail.mit.edu/6.006/spring11/rec/rec05.pdf"
                ]
              ]
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Overview of Hash Tables",
            "Link": "https://courses.csail.mit.edu/6.006/spring11/rec/rec05.pdf"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928476810,
        "id": "3203a933-fcd7-4678-b429-09e86b9df1c6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928476810,
        "parent_id": "577f74f2-19df-4928-a224-a6e81b9bef25",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Wolfram MathWorld - Hash Function",
              [
                [
                  "a",
                  "http://mathworld.wolfram.com/HashFunction.html"
                ]
              ]
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Wolfram MathWorld - Hash Function",
            "Link": "http://mathworld.wolfram.com/HashFunction.html"
          }
        ]
      }
    ],
    "title": "Introduction to hash functions",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}