{
  "ID": "5aafc562-3b71-4de2-bf4b-5eee4c2dd40d",
  "Root": {
    "alive": true,
    "content": [
      "a1c2e9df-c410-420b-a94a-e3060de0919d",
      "18de41ef-28bb-4ab1-9981-5bd57fb4987f",
      "9d05a35f-2edc-42a2-8f37-60bb77563d6d",
      "aa3282c7-1b48-4e64-b03b-0c8a6b67925f",
      "30aea982-c2e9-4e4f-beb8-afd0c8ceb81b",
      "1eae95fb-a20a-4678-ab5e-64829a4e7c84",
      "f6dba5e7-3652-4966-b52a-887b35e197c6",
      "ba34626a-5395-4d00-a8b1-cc6f5bf0f5a5",
      "707c0027-5c1f-451e-bce1-a63e9846c959",
      "1f8f1079-e8ed-4722-88a3-7f92645d306a",
      "84072496-f51d-45e9-a7db-574f6aa8a397",
      "9569d128-69f0-4283-b885-459744838be1",
      "f8d06350-b813-42db-b28a-8f6727df06bd",
      "83d4e0c1-ef91-486c-9b77-6ca2179d584f",
      "10427882-9ecf-48b3-a611-ab15a805387e",
      "99e9def8-1c3f-4d5e-9a99-c449089379c6",
      "7c9d8610-dd46-45e8-9252-cc40f9447bd5",
      "8fd2ed68-bbb4-417a-bcca-47b36c14e98c",
      "6b5587b2-af8a-44d0-afeb-4d68f4fa741d",
      "34550226-0776-4ebd-8f0d-918f35402691",
      "e208be12-3b5c-4e9d-bd3b-db7c7af95857",
      "8b676a29-6547-4112-b282-f097d08891c4",
      "fc21725e-e610-4e5e-8e5f-1917e14edd20",
      "5e94e94d-ba33-4e9b-808e-0519d6a31e4d",
      "e75830a1-61ca-48b8-a95a-93b533ebda40",
      "9dbdbab2-28d3-4ed0-b25b-13a2aad13e59",
      "a9e7d89f-2b90-42db-a8dc-3619160a945b",
      "a643f239-8811-418e-acc7-22be5f066c07",
      "fc7c5ac5-eb23-411c-b8e7-a7b0a25bf05d",
      "169b9c8b-0df8-46ae-ad3d-0335a1fa79ce",
      "e849d691-ec40-452e-9e15-4c0f2af01827",
      "6147d548-b9c0-417b-aa6a-0874ab050716",
      "2e64f3b6-7f34-4e96-9646-630bf7924835",
      "ea8e140b-9fde-4eff-bcdb-d70c2890546c",
      "34718d28-57ab-4587-87da-43d3f2a0f4cf",
      "ba256ea9-81c4-4fd5-9ead-bfa0d587b58a",
      "421195fd-49ac-467c-910b-4e9b718613ea",
      "57982226-ef26-4fb5-a18f-8a23f90061d8",
      "efc8daa7-b991-453f-a821-1aa85a547f4f",
      "3c5725cf-c14d-495e-9ebd-cc5bde7e0092",
      "ec989ff0-a57b-4423-97e7-0250d8747cc2",
      "8be8ac6f-d76e-4faf-8f0f-0c3f1cd9d585",
      "791bad53-8f17-4d4f-b8a9-221303ee237c",
      "f28b0626-73a1-40c7-b26a-89b8f5663615",
      "f201863a-c6e7-4ae4-9ecf-9d695120a77d",
      "cf70ad3e-cd04-4c93-942a-3a118bc83481",
      "a29bb60b-d615-4195-a44d-c3e23a619ef1",
      "8ac2e4d5-f38f-4b13-a258-f76fa8e2ad36",
      "885e2557-f846-41a7-ac8a-f6bab894a2eb"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551929273820,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "5aafc562-3b71-4de2-bf4b-5eee4c2dd40d",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551929273820,
    "parent_id": "0652a44d-8a63-47b5-b7cf-af85d0c3655a",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Offline Caching"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929273805,
        "id": "a1c2e9df-c410-420b-a94a-e3060de0919d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929273805,
        "parent_id": "5aafc562-3b71-4de2-bf4b-5eee4c2dd40d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The caching problem arises from the limitation of finite space. Lets assume our cache "
            ],
            [
              "C",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " has "
            ],
            [
              "k",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " pages. Now we want to process a sequence of "
            ],
            [
              "m",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " item requests which must have been placed in the cache before they are processed.Of course if "
            ],
            [
              "m\u003c=k",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " then we just put all elements in the cache and it will work, but usually is "
            ],
            [
              "m\u003e\u003ek",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The caching problem arises from the limitation of finite space. Lets assume our cache "
          },
          {
            "Text": "C",
            "AttrFlags": 2
          },
          {
            "Text": " has "
          },
          {
            "Text": "k",
            "AttrFlags": 2
          },
          {
            "Text": " pages. Now we want to process a sequence of "
          },
          {
            "Text": "m",
            "AttrFlags": 2
          },
          {
            "Text": " item requests which must have been placed in the cache before they are processed.Of course if "
          },
          {
            "Text": "m\u003c=k",
            "AttrFlags": 2
          },
          {
            "Text": " then we just put all elements in the cache and it will work, but usually is "
          },
          {
            "Text": "m\u003e\u003ek",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929273808,
        "id": "18de41ef-28bb-4ab1-9981-5bd57fb4987f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929273808,
        "parent_id": "5aafc562-3b71-4de2-bf4b-5eee4c2dd40d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We say a request is a "
            ],
            [
              "cache hit",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", when the item is already in cache, otherwise its called a "
            ],
            [
              "cache miss",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". In that case we must bring the requested item into cache and evict another, assuming the cache is full. The Goal is a eviction schedule that "
            ],
            [
              "minimizes the number of evictions",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "We say a request is a "
          },
          {
            "Text": "cache hit",
            "AttrFlags": 1
          },
          {
            "Text": ", when the item is already in cache, otherwise its called a "
          },
          {
            "Text": "cache miss",
            "AttrFlags": 1
          },
          {
            "Text": ". In that case we must bring the requested item into cache and evict another, assuming the cache is full. The Goal is a eviction schedule that "
          },
          {
            "Text": "minimizes the number of evictions",
            "AttrFlags": 1
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929273808,
        "id": "9d05a35f-2edc-42a2-8f37-60bb77563d6d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929273808,
        "parent_id": "5aafc562-3b71-4de2-bf4b-5eee4c2dd40d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "There are numerous greedy strategies for this problem, lets look at some:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "There are numerous greedy strategies for this problem, lets look at some:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929273809,
        "id": "aa3282c7-1b48-4e64-b03b-0c8a6b67925f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929273809,
        "parent_id": "5aafc562-3b71-4de2-bf4b-5eee4c2dd40d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "First in, first out (FIFO)",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ": The oldest page gets evicted"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "First in, first out (FIFO)",
            "AttrFlags": 1
          },
          {
            "Text": ": The oldest page gets evicted"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929273809,
        "id": "30aea982-c2e9-4e4f-beb8-afd0c8ceb81b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929273809,
        "parent_id": "5aafc562-3b71-4de2-bf4b-5eee4c2dd40d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Last in, first out (LIFO)",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ": The newest page gets evicted"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Last in, first out (LIFO)",
            "AttrFlags": 1
          },
          {
            "Text": ": The newest page gets evicted"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929273809,
        "id": "1eae95fb-a20a-4678-ab5e-64829a4e7c84",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929273809,
        "parent_id": "5aafc562-3b71-4de2-bf4b-5eee4c2dd40d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Last recent out (LRU)",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ": Evict page whose most recent access was earliest"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Last recent out (LRU)",
            "AttrFlags": 1
          },
          {
            "Text": ": Evict page whose most recent access was earliest"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929273810,
        "id": "f6dba5e7-3652-4966-b52a-887b35e197c6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929273810,
        "parent_id": "5aafc562-3b71-4de2-bf4b-5eee4c2dd40d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Least frequently requested(LFU)",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ": Evict page that was least frequently requested"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Least frequently requested(LFU)",
            "AttrFlags": 1
          },
          {
            "Text": ": Evict page that was least frequently requested"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929273810,
        "id": "ba34626a-5395-4d00-a8b1-cc6f5bf0f5a5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929273810,
        "parent_id": "5aafc562-3b71-4de2-bf4b-5eee4c2dd40d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Longest forward distance (LFD)",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ": Evict page in the cache that is not requested until farthest in the future."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Longest forward distance (LFD)",
            "AttrFlags": 1
          },
          {
            "Text": ": Evict page in the cache that is not requested until farthest in the future."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929273810,
        "id": "707c0027-5c1f-451e-bce1-a63e9846c959",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929273810,
        "parent_id": "5aafc562-3b71-4de2-bf4b-5eee4c2dd40d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Attention:",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " For the following examples we evict the page with the smallest index, if more than one page could be evicted."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Attention:",
            "AttrFlags": 1
          },
          {
            "Text": " For the following examples we evict the page with the smallest index, if more than one page could be evicted."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929273810,
        "id": "1f8f1079-e8ed-4722-88a3-7f92645d306a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929273810,
        "parent_id": "5aafc562-3b71-4de2-bf4b-5eee4c2dd40d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Example (FIFO)"
            ]
          ]
        },
        "type": "sub_sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Example (FIFO)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929273810,
        "id": "84072496-f51d-45e9-a7db-574f6aa8a397",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929273810,
        "parent_id": "5aafc562-3b71-4de2-bf4b-5eee4c2dd40d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Let the cache size be "
            ],
            [
              "k=3",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " the initial cache "
            ],
            [
              "a,b,c",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and the request "
            ],
            [
              "a,a,d,e,b,b,a,c,f,d,e,a,f,b,e,c",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Let the cache size be "
          },
          {
            "Text": "k=3",
            "AttrFlags": 2
          },
          {
            "Text": " the initial cache "
          },
          {
            "Text": "a,b,c",
            "AttrFlags": 2
          },
          {
            "Text": " and the request "
          },
          {
            "Text": "a,a,d,e,b,b,a,c,f,d,e,a,f,b,e,c",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929273811,
        "id": "9569d128-69f0-4283-b885-459744838be1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929273811,
        "parent_id": "5aafc562-3b71-4de2-bf4b-5eee4c2dd40d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "|Request | a | a | d | e | b | b | a | c | f | d | e | a | f | b | e | c | |:––––:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:| |"
            ],
            [
              "cache 1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | a | a | d | d | d | d | a | a | a | d | d | d | f | f | f | c | |"
            ],
            [
              "cache 2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | b | b | b | e | e | e | e | c | c | c | e | e | e | b | b | b | |"
            ],
            [
              "cache 3",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | c | c | c | c | b | b | b | b | f | f | f | a | a | a | e | e | |cache miss| | | x | x | x | | x | x | x | x | x | x | x | x | x | x |"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "|Request | a | a | d | e | b | b | a | c | f | d | e | a | f | b | e | c | |:––––:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:| |"
          },
          {
            "Text": "cache 1",
            "AttrFlags": 2
          },
          {
            "Text": " | a | a | d | d | d | d | a | a | a | d | d | d | f | f | f | c | |"
          },
          {
            "Text": "cache 2",
            "AttrFlags": 2
          },
          {
            "Text": " | b | b | b | e | e | e | e | c | c | c | e | e | e | b | b | b | |"
          },
          {
            "Text": "cache 3",
            "AttrFlags": 2
          },
          {
            "Text": " | c | c | c | c | b | b | b | b | f | f | f | a | a | a | e | e | |cache miss| | | x | x | x | | x | x | x | x | x | x | x | x | x | x |"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929273811,
        "id": "f8d06350-b813-42db-b28a-8f6727df06bd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929273811,
        "parent_id": "5aafc562-3b71-4de2-bf4b-5eee4c2dd40d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Thirteen cache misses by sixteen requests does not sound very optimal, lets try the same example with another strategy:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Thirteen cache misses by sixteen requests does not sound very optimal, lets try the same example with another strategy:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929273811,
        "id": "83d4e0c1-ef91-486c-9b77-6ca2179d584f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929273811,
        "parent_id": "5aafc562-3b71-4de2-bf4b-5eee4c2dd40d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Example (LFD)"
            ]
          ]
        },
        "type": "sub_sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Example (LFD)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929273812,
        "id": "10427882-9ecf-48b3-a611-ab15a805387e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929273812,
        "parent_id": "5aafc562-3b71-4de2-bf4b-5eee4c2dd40d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Let the cache size be "
            ],
            [
              "k=3",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " the initial cache "
            ],
            [
              "a,b,c",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and the request "
            ],
            [
              "a,a,d,e,b,b,a,c,f,d,e,a,f,b,e,c",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Let the cache size be "
          },
          {
            "Text": "k=3",
            "AttrFlags": 2
          },
          {
            "Text": " the initial cache "
          },
          {
            "Text": "a,b,c",
            "AttrFlags": 2
          },
          {
            "Text": " and the request "
          },
          {
            "Text": "a,a,d,e,b,b,a,c,f,d,e,a,f,b,e,c",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929273812,
        "id": "99e9def8-1c3f-4d5e-9a99-c449089379c6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929273812,
        "parent_id": "5aafc562-3b71-4de2-bf4b-5eee4c2dd40d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "|Request | a | a | d | e | b | b | a | c | f | d | e | a | f | b | e | c | |:––––:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:| |"
            ],
            [
              "cache 1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | a | a | d | e | e | e | e | e | e | e | e | e | e | e | e | c | |"
            ],
            [
              "cache 2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | b | b | b | b | b | b | a | a | a | a | a | a | f | f | f | f | |"
            ],
            [
              "cache 3",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | c | c | c | c | c | c | c | c | f | d | d | d | d | b | b | b | |cache miss| | | x | x | | | x | | x | x | | | x | x | | x |"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "|Request | a | a | d | e | b | b | a | c | f | d | e | a | f | b | e | c | |:––––:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:| |"
          },
          {
            "Text": "cache 1",
            "AttrFlags": 2
          },
          {
            "Text": " | a | a | d | e | e | e | e | e | e | e | e | e | e | e | e | c | |"
          },
          {
            "Text": "cache 2",
            "AttrFlags": 2
          },
          {
            "Text": " | b | b | b | b | b | b | a | a | a | a | a | a | f | f | f | f | |"
          },
          {
            "Text": "cache 3",
            "AttrFlags": 2
          },
          {
            "Text": " | c | c | c | c | c | c | c | c | f | d | d | d | d | b | b | b | |cache miss| | | x | x | | | x | | x | x | | | x | x | | x |"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929273812,
        "id": "7c9d8610-dd46-45e8-9252-cc40f9447bd5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929273812,
        "parent_id": "5aafc562-3b71-4de2-bf4b-5eee4c2dd40d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Eight cache misses is a lot better."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Eight cache misses is a lot better."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929273812,
        "id": "8fd2ed68-bbb4-417a-bcca-47b36c14e98c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929273812,
        "parent_id": "5aafc562-3b71-4de2-bf4b-5eee4c2dd40d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Selftest",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ": Do the example for LIFO, LFU, RFU and look what happend."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Selftest",
            "AttrFlags": 1
          },
          {
            "Text": ": Do the example for LIFO, LFU, RFU and look what happend."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929273813,
        "id": "6b5587b2-af8a-44d0-afeb-4d68f4fa741d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929273813,
        "parent_id": "5aafc562-3b71-4de2-bf4b-5eee4c2dd40d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The following example programm (written in C++) consists of two parts:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The following example programm (written in C++) consists of two parts:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929273813,
        "id": "34550226-0776-4ebd-8f0d-918f35402691",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929273813,
        "parent_id": "5aafc562-3b71-4de2-bf4b-5eee4c2dd40d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The skeleton is a application, which solves the problem dependent on the chosen greedy strategy:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The skeleton is a application, which solves the problem dependent on the chosen greedy strategy:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929273813,
        "id": "e208be12-3b5c-4e9d-bd3b-db7c7af95857",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929273813,
        "parent_id": "5aafc562-3b71-4de2-bf4b-5eee4c2dd40d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003ciostream\u003e\n#include \u003cmemory\u003e\n\nusing namespace std;\n\nconst int cacheSize     = 3;\nconst int requestLength = 16;\n\nconst char request[]    = {'a','a','d','e','b','b','a','c','f','d','e','a','f','b','e','c'};\nchar cache[]            = {'a','b','c'};\n\n// for reset\nchar originalCache[]    = {'a','b','c'};\n\n\nclass Strategy {\n\npublic:\n    Strategy(std::string name) : strategyName(name) {}\n    virtual ~Strategy() = default;\n\n    // calculate which cache place should be used\n    virtual int apply(int requestIndex)                                      = 0;\n\n    // updates information the strategy needs\n    virtual void update(int cachePlace, int requestIndex, bool cacheMiss)    = 0;\n\n    const std::string strategyName;\n};\n\nbool updateCache(int requestIndex, Strategy* strategy)\n{\n    // calculate where to put request\n    int cachePlace = strategy-\u003eapply(requestIndex);\n\n    // proof whether its a cache hit or a cache miss\n    bool isMiss = request[requestIndex] != cache[cachePlace];\n\n    // update strategy (for example recount distances)\n    strategy-\u003eupdate(cachePlace, requestIndex, isMiss);\n\n    // write to cache\n    cache[cachePlace] = request[requestIndex];\n\n    return isMiss;\n}\n\nint main()\n{\n    Strategy* selectedStrategy[] = { new FIFO, new LIFO, new LRU, new LFU, new LFD };\n\n    for (int strat=0; strat \u003c 5; ++strat)\n    {\n        // reset cache\n        for (int i=0; i \u003c cacheSize; ++i) cache[i] = originalCache[i];\n\n        cout \u003c\u003c\"\\nStrategy: \" \u003c\u003c selectedStrategy[strat]-\u003estrategyName \u003c\u003c endl;\n\n        cout \u003c\u003c \"\\nCache initial: (\";\n        for (int i=0; i \u003c cacheSize-1; ++i) cout \u003c\u003c cache[i] \u003c\u003c \",\";\n        cout \u003c\u003c cache[cacheSize-1] \u003c\u003c \")\\n\\n\";\n\n        cout \u003c\u003c \"Request\\t\";\n        for (int i=0; i \u003c cacheSize; ++i) cout \u003c\u003c \"cache \" \u003c\u003c i \u003c\u003c \"\\t\";\n        cout \u003c\u003c \"cache miss\" \u003c\u003c endl;\n\n        int cntMisses = 0;\n\n        for(int i=0; i\u003crequestLength; ++i)\n        {\n            bool isMiss = updateCache(i, selectedStrategy[strat]);\n            if (isMiss) ++cntMisses;\n\n            cout \u003c\u003c \"  \" \u003c\u003c request[i] \u003c\u003c \"\\t\";\n            for (int l=0; l \u003c cacheSize; ++l) cout \u003c\u003c \"  \" \u003c\u003c cache[l] \u003c\u003c \"\\t\";\n            cout \u003c\u003c (isMiss ? \"x\" : \"\") \u003c\u003c endl;\n        }\n\n        cout\u003c\u003c \"\\nTotal cache misses: \" \u003c\u003c cntMisses \u003c\u003c endl;\n    }\n\n    for(int i=0; i\u003c5; ++i) delete selectedStrategy[i];\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003ciostream\u003e\n#include \u003cmemory\u003e\n\nusing namespace std;\n\nconst int cacheSize     = 3;\nconst int requestLength = 16;\n\nconst char request[]    = {'a','a','d','e','b','b','a','c','f','d','e','a','f','b','e','c'};\nchar cache[]            = {'a','b','c'};\n\n// for reset\nchar originalCache[]    = {'a','b','c'};\n\n\nclass Strategy {\n\npublic:\n    Strategy(std::string name) : strategyName(name) {}\n    virtual ~Strategy() = default;\n\n    // calculate which cache place should be used\n    virtual int apply(int requestIndex)                                      = 0;\n\n    // updates information the strategy needs\n    virtual void update(int cachePlace, int requestIndex, bool cacheMiss)    = 0;\n\n    const std::string strategyName;\n};\n\nbool updateCache(int requestIndex, Strategy* strategy)\n{\n    // calculate where to put request\n    int cachePlace = strategy-\u003eapply(requestIndex);\n\n    // proof whether its a cache hit or a cache miss\n    bool isMiss = request[requestIndex] != cache[cachePlace];\n\n    // update strategy (for example recount distances)\n    strategy-\u003eupdate(cachePlace, requestIndex, isMiss);\n\n    // write to cache\n    cache[cachePlace] = request[requestIndex];\n\n    return isMiss;\n}\n\nint main()\n{\n    Strategy* selectedStrategy[] = { new FIFO, new LIFO, new LRU, new LFU, new LFD };\n\n    for (int strat=0; strat \u003c 5; ++strat)\n    {\n        // reset cache\n        for (int i=0; i \u003c cacheSize; ++i) cache[i] = originalCache[i];\n\n        cout \u003c\u003c\"\\nStrategy: \" \u003c\u003c selectedStrategy[strat]-\u003estrategyName \u003c\u003c endl;\n\n        cout \u003c\u003c \"\\nCache initial: (\";\n        for (int i=0; i \u003c cacheSize-1; ++i) cout \u003c\u003c cache[i] \u003c\u003c \",\";\n        cout \u003c\u003c cache[cacheSize-1] \u003c\u003c \")\\n\\n\";\n\n        cout \u003c\u003c \"Request\\t\";\n        for (int i=0; i \u003c cacheSize; ++i) cout \u003c\u003c \"cache \" \u003c\u003c i \u003c\u003c \"\\t\";\n        cout \u003c\u003c \"cache miss\" \u003c\u003c endl;\n\n        int cntMisses = 0;\n\n        for(int i=0; i\u003crequestLength; ++i)\n        {\n            bool isMiss = updateCache(i, selectedStrategy[strat]);\n            if (isMiss) ++cntMisses;\n\n            cout \u003c\u003c \"  \" \u003c\u003c request[i] \u003c\u003c \"\\t\";\n            for (int l=0; l \u003c cacheSize; ++l) cout \u003c\u003c \"  \" \u003c\u003c cache[l] \u003c\u003c \"\\t\";\n            cout \u003c\u003c (isMiss ? \"x\" : \"\") \u003c\u003c endl;\n        }\n\n        cout\u003c\u003c \"\\nTotal cache misses: \" \u003c\u003c cntMisses \u003c\u003c endl;\n    }\n\n    for(int i=0; i\u003c5; ++i) delete selectedStrategy[i];\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929273813,
        "id": "8b676a29-6547-4112-b282-f097d08891c4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929273813,
        "parent_id": "5aafc562-3b71-4de2-bf4b-5eee4c2dd40d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The basic idea is simple: for every request I have two calls two my strategy:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The basic idea is simple: for every request I have two calls two my strategy:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929273814,
        "id": "fc21725e-e610-4e5e-8e5f-1917e14edd20",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929273814,
        "parent_id": "5aafc562-3b71-4de2-bf4b-5eee4c2dd40d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "apply",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ": The strategy has to tell the caller which page to use"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "apply",
            "AttrFlags": 1
          },
          {
            "Text": ": The strategy has to tell the caller which page to use"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929273814,
        "id": "5e94e94d-ba33-4e9b-808e-0519d6a31e4d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929273814,
        "parent_id": "5aafc562-3b71-4de2-bf4b-5eee4c2dd40d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "update",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ": After the caller uses the place, it tells the strategy whether it was a miss or not. Then the strategy may update its internal data. The strategy "
            ],
            [
              "LFU",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " for example has to update the hit frequency for the cache pages, while the "
            ],
            [
              "LFD",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " strategy has to recalculate the distances for the cache pages."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "update",
            "AttrFlags": 1
          },
          {
            "Text": ": After the caller uses the place, it tells the strategy whether it was a miss or not. Then the strategy may update its internal data. The strategy "
          },
          {
            "Text": "LFU",
            "AttrFlags": 1
          },
          {
            "Text": " for example has to update the hit frequency for the cache pages, while the "
          },
          {
            "Text": "LFD",
            "AttrFlags": 1
          },
          {
            "Text": " strategy has to recalculate the distances for the cache pages."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929273814,
        "id": "e75830a1-61ca-48b8-a95a-93b533ebda40",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929273814,
        "parent_id": "5aafc562-3b71-4de2-bf4b-5eee4c2dd40d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Now lets look of example implementations for our five strategies:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Now lets look of example implementations for our five strategies:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929273814,
        "id": "9dbdbab2-28d3-4ed0-b25b-13a2aad13e59",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929273814,
        "parent_id": "5aafc562-3b71-4de2-bf4b-5eee4c2dd40d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "FIFO"
            ]
          ]
        },
        "type": "sub_sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "FIFO"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929273814,
        "id": "a9e7d89f-2b90-42db-a8dc-3619160a945b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929273814,
        "parent_id": "5aafc562-3b71-4de2-bf4b-5eee4c2dd40d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class FIFO : public Strategy {\npublic:\n    FIFO() : Strategy(\"FIFO\")\n    {\n        for (int i=0; i\u003ccacheSize; ++i) age[i] = 0;\n    }\n\n    int apply(int requestIndex) override\n    {\n        int oldest = 0;\n\n        for(int i=0; i\u003ccacheSize; ++i)\n        {\n            if(cache[i] == request[requestIndex])\n                return i;\n\n            else if(age[i] \u003e age[oldest])\n                oldest = i;\n        }\n\n        return oldest;\n    }\n\n    void update(int cachePos, int requestIndex, bool cacheMiss) override\n    {\n        // nothing changed we dont need to update the ages\n        if(!cacheMiss)\n            return;\n\n        // all old pages get older, the new one get 0\n        for(int i=0; i\u003ccacheSize; ++i)\n        {\n            if(i != cachePos)\n                age[i]++;\n\n            else\n                age[i] = 0;\n        }\n    }\n\nprivate:\n    int age[cacheSize];\n};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class FIFO : public Strategy {\npublic:\n    FIFO() : Strategy(\"FIFO\")\n    {\n        for (int i=0; i\u003ccacheSize; ++i) age[i] = 0;\n    }\n\n    int apply(int requestIndex) override\n    {\n        int oldest = 0;\n\n        for(int i=0; i\u003ccacheSize; ++i)\n        {\n            if(cache[i] == request[requestIndex])\n                return i;\n\n            else if(age[i] \u003e age[oldest])\n                oldest = i;\n        }\n\n        return oldest;\n    }\n\n    void update(int cachePos, int requestIndex, bool cacheMiss) override\n    {\n        // nothing changed we dont need to update the ages\n        if(!cacheMiss)\n            return;\n\n        // all old pages get older, the new one get 0\n        for(int i=0; i\u003ccacheSize; ++i)\n        {\n            if(i != cachePos)\n                age[i]++;\n\n            else\n                age[i] = 0;\n        }\n    }\n\nprivate:\n    int age[cacheSize];\n};",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929273814,
        "id": "a643f239-8811-418e-acc7-22be5f066c07",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929273814,
        "parent_id": "5aafc562-3b71-4de2-bf4b-5eee4c2dd40d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "FIFO",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " just needs the information how long a page is in the cache (and of course only relative to the other pages). So the only thing to do is wait for a miss and then make the pages, which where not evicted older. For our example above the program solution is:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "FIFO",
            "AttrFlags": 1
          },
          {
            "Text": " just needs the information how long a page is in the cache (and of course only relative to the other pages). So the only thing to do is wait for a miss and then make the pages, which where not evicted older. For our example above the program solution is:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929273815,
        "id": "fc7c5ac5-eb23-411c-b8e7-a7b0a25bf05d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929273815,
        "parent_id": "5aafc562-3b71-4de2-bf4b-5eee4c2dd40d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Strategy: FIFO\n\nCache initial: (a,b,c)\n\nRequest    cache 0    cache 1    cache 2    cache miss\n  a          a          b          c    \n  a          a          b          c    \n  d          d          b          c          x\n  e          d          e          c          x\n  b          d          e          b          x\n  b          d          e          b    \n  a          a          e          b          x\n  c          a          c          b          x\n  f          a          c          f          x\n  d          d          c          f          x\n  e          d          e          f          x\n  a          d          e          a          x\n  f          f          e          a          x\n  b          f          b          a          x\n  e          f          b          e          x\n  c          c          b          e          x\n\nTotal cache misses: 13"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Strategy: FIFO\n\nCache initial: (a,b,c)\n\nRequest    cache 0    cache 1    cache 2    cache miss\n  a          a          b          c    \n  a          a          b          c    \n  d          d          b          c          x\n  e          d          e          c          x\n  b          d          e          b          x\n  b          d          e          b    \n  a          a          e          b          x\n  c          a          c          b          x\n  f          a          c          f          x\n  d          d          c          f          x\n  e          d          e          f          x\n  a          d          e          a          x\n  f          f          e          a          x\n  b          f          b          a          x\n  e          f          b          e          x\n  c          c          b          e          x\n\nTotal cache misses: 13",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929273815,
        "id": "169b9c8b-0df8-46ae-ad3d-0335a1fa79ce",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929273815,
        "parent_id": "5aafc562-3b71-4de2-bf4b-5eee4c2dd40d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Thats exact the solution from above."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Thats exact the solution from above."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929273815,
        "id": "e849d691-ec40-452e-9e15-4c0f2af01827",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929273815,
        "parent_id": "5aafc562-3b71-4de2-bf4b-5eee4c2dd40d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "LIFO"
            ]
          ]
        },
        "type": "sub_sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "LIFO"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929273815,
        "id": "6147d548-b9c0-417b-aa6a-0874ab050716",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929273815,
        "parent_id": "5aafc562-3b71-4de2-bf4b-5eee4c2dd40d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class LIFO : public Strategy {\npublic:\n    LIFO() : Strategy(\"LIFO\")\n    {\n        for (int i=0; i\u003ccacheSize; ++i) age[i] = 0;\n    }\n\n    int apply(int requestIndex) override\n    {\n        int newest = 0;\n\n        for(int i=0; i\u003ccacheSize; ++i)\n        {\n            if(cache[i] == request[requestIndex])\n                return i;\n\n            else if(age[i] \u003c age[newest])\n                newest = i;\n        }\n\n        return newest;\n    }\n\n    void update(int cachePos, int requestIndex, bool cacheMiss) override\n    {\n        // nothing changed we dont need to update the ages\n        if(!cacheMiss)\n            return;\n\n        // all old pages get older, the new one get 0\n        for(int i=0; i\u003ccacheSize; ++i)\n        {\n            if(i != cachePos)\n                age[i]++;\n\n            else\n                age[i] = 0;\n        }\n    }\n\nprivate:\n    int age[cacheSize];\n};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class LIFO : public Strategy {\npublic:\n    LIFO() : Strategy(\"LIFO\")\n    {\n        for (int i=0; i\u003ccacheSize; ++i) age[i] = 0;\n    }\n\n    int apply(int requestIndex) override\n    {\n        int newest = 0;\n\n        for(int i=0; i\u003ccacheSize; ++i)\n        {\n            if(cache[i] == request[requestIndex])\n                return i;\n\n            else if(age[i] \u003c age[newest])\n                newest = i;\n        }\n\n        return newest;\n    }\n\n    void update(int cachePos, int requestIndex, bool cacheMiss) override\n    {\n        // nothing changed we dont need to update the ages\n        if(!cacheMiss)\n            return;\n\n        // all old pages get older, the new one get 0\n        for(int i=0; i\u003ccacheSize; ++i)\n        {\n            if(i != cachePos)\n                age[i]++;\n\n            else\n                age[i] = 0;\n        }\n    }\n\nprivate:\n    int age[cacheSize];\n};",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929273815,
        "id": "2e64f3b6-7f34-4e96-9646-630bf7924835",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929273815,
        "parent_id": "5aafc562-3b71-4de2-bf4b-5eee4c2dd40d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The implementation of "
            ],
            [
              "LIFO",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " is more or less the same as by "
            ],
            [
              "FIFO",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " but we evict the youngest not the oldest page. The program results are:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The implementation of "
          },
          {
            "Text": "LIFO",
            "AttrFlags": 1
          },
          {
            "Text": " is more or less the same as by "
          },
          {
            "Text": "FIFO",
            "AttrFlags": 1
          },
          {
            "Text": " but we evict the youngest not the oldest page. The program results are:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929273815,
        "id": "ea8e140b-9fde-4eff-bcdb-d70c2890546c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929273815,
        "parent_id": "5aafc562-3b71-4de2-bf4b-5eee4c2dd40d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Strategy: LIFO\n\nCache initial: (a,b,c)\n\nRequest    cache 0    cache 1    cache 2    cache miss\n  a          a          b          c    \n  a          a          b          c    \n  d          d          b          c          x\n  e          e          b          c          x\n  b          e          b          c    \n  b          e          b          c    \n  a          a          b          c          x\n  c          a          b          c    \n  f          f          b          c          x\n  d          d          b          c          x\n  e          e          b          c          x\n  a          a          b          c          x\n  f          f          b          c          x\n  b          f          b          c    \n  e          e          b          c          x\n  c          e          b          c    \n\nTotal cache misses: 9"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Strategy: LIFO\n\nCache initial: (a,b,c)\n\nRequest    cache 0    cache 1    cache 2    cache miss\n  a          a          b          c    \n  a          a          b          c    \n  d          d          b          c          x\n  e          e          b          c          x\n  b          e          b          c    \n  b          e          b          c    \n  a          a          b          c          x\n  c          a          b          c    \n  f          f          b          c          x\n  d          d          b          c          x\n  e          e          b          c          x\n  a          a          b          c          x\n  f          f          b          c          x\n  b          f          b          c    \n  e          e          b          c          x\n  c          e          b          c    \n\nTotal cache misses: 9",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929273815,
        "id": "34718d28-57ab-4587-87da-43d3f2a0f4cf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929273815,
        "parent_id": "5aafc562-3b71-4de2-bf4b-5eee4c2dd40d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "LRU"
            ]
          ]
        },
        "type": "sub_sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "LRU"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929273815,
        "id": "ba256ea9-81c4-4fd5-9ead-bfa0d587b58a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929273815,
        "parent_id": "5aafc562-3b71-4de2-bf4b-5eee4c2dd40d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class LRU : public Strategy {\npublic:\n    LRU() : Strategy(\"LRU\")\n    {\n        for (int i=0; i\u003ccacheSize; ++i) age[i] = 0;\n    }\n\n    // here oldest mean not used the longest\n    int apply(int requestIndex) override\n    {\n        int oldest = 0;\n\n        for(int i=0; i\u003ccacheSize; ++i)\n        {\n            if(cache[i] == request[requestIndex])\n                return i;\n\n            else if(age[i] \u003e age[oldest])\n                oldest = i;\n        }\n\n        return oldest;\n    }\n\n    void update(int cachePos, int requestIndex, bool cacheMiss) override\n    {\n        // all old pages get older, the used one get 0\n        for(int i=0; i\u003ccacheSize; ++i)\n        {\n            if(i != cachePos)\n                age[i]++;\n\n            else\n                age[i] = 0;\n        }\n    }\n\nprivate:\n    int age[cacheSize];\n};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class LRU : public Strategy {\npublic:\n    LRU() : Strategy(\"LRU\")\n    {\n        for (int i=0; i\u003ccacheSize; ++i) age[i] = 0;\n    }\n\n    // here oldest mean not used the longest\n    int apply(int requestIndex) override\n    {\n        int oldest = 0;\n\n        for(int i=0; i\u003ccacheSize; ++i)\n        {\n            if(cache[i] == request[requestIndex])\n                return i;\n\n            else if(age[i] \u003e age[oldest])\n                oldest = i;\n        }\n\n        return oldest;\n    }\n\n    void update(int cachePos, int requestIndex, bool cacheMiss) override\n    {\n        // all old pages get older, the used one get 0\n        for(int i=0; i\u003ccacheSize; ++i)\n        {\n            if(i != cachePos)\n                age[i]++;\n\n            else\n                age[i] = 0;\n        }\n    }\n\nprivate:\n    int age[cacheSize];\n};",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929273816,
        "id": "421195fd-49ac-467c-910b-4e9b718613ea",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929273816,
        "parent_id": "5aafc562-3b71-4de2-bf4b-5eee4c2dd40d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In case of "
            ],
            [
              "LRU",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " the strategy is independent from what is at the cache page, its only interest is the last usage. The programm results are:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In case of "
          },
          {
            "Text": "LRU",
            "AttrFlags": 1
          },
          {
            "Text": " the strategy is independent from what is at the cache page, its only interest is the last usage. The programm results are:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929273816,
        "id": "57982226-ef26-4fb5-a18f-8a23f90061d8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929273816,
        "parent_id": "5aafc562-3b71-4de2-bf4b-5eee4c2dd40d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Strategy: LRU\n\nCache initial: (a,b,c)\n\nRequest    cache 0    cache 1    cache 2    cache miss\n  a          a          b          c    \n  a          a          b          c    \n  d          a          d          c          x\n  e          a          d          e          x\n  b          b          d          e          x\n  b          b          d          e    \n  a          b          a          e          x\n  c          b          a          c          x\n  f          f          a          c          x\n  d          f          d          c          x\n  e          f          d          e          x\n  a          a          d          e          x\n  f          a          f          e          x\n  b          a          f          b          x\n  e          e          f          b          x\n  c          e          c          b          x\n\nTotal cache misses: 13"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Strategy: LRU\n\nCache initial: (a,b,c)\n\nRequest    cache 0    cache 1    cache 2    cache miss\n  a          a          b          c    \n  a          a          b          c    \n  d          a          d          c          x\n  e          a          d          e          x\n  b          b          d          e          x\n  b          b          d          e    \n  a          b          a          e          x\n  c          b          a          c          x\n  f          f          a          c          x\n  d          f          d          c          x\n  e          f          d          e          x\n  a          a          d          e          x\n  f          a          f          e          x\n  b          a          f          b          x\n  e          e          f          b          x\n  c          e          c          b          x\n\nTotal cache misses: 13",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929273816,
        "id": "efc8daa7-b991-453f-a821-1aa85a547f4f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929273816,
        "parent_id": "5aafc562-3b71-4de2-bf4b-5eee4c2dd40d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "LFU"
            ]
          ]
        },
        "type": "sub_sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "LFU"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929273816,
        "id": "3c5725cf-c14d-495e-9ebd-cc5bde7e0092",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929273816,
        "parent_id": "5aafc562-3b71-4de2-bf4b-5eee4c2dd40d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class LFU : public Strategy {\npublic:\n    LFU() : Strategy(\"LFU\")\n    {\n        for (int i=0; i\u003ccacheSize; ++i) requestFrequency[i] = 0;\n    }\n\n    int apply(int requestIndex) override\n    {\n        int least = 0;\n\n        for(int i=0; i\u003ccacheSize; ++i)\n        {\n            if(cache[i] == request[requestIndex])\n                return i;\n\n            else if(requestFrequency[i] \u003c requestFrequency[least])\n                least = i;\n        }\n\n        return least;\n    }\n\n    void update(int cachePos, int requestIndex, bool cacheMiss) override\n    {\n        if(cacheMiss)\n            requestFrequency[cachePos] = 1;\n\n        else\n            ++requestFrequency[cachePos];\n    }\n\nprivate:\n\n    // how frequently was the page used\n    int requestFrequency[cacheSize];\n};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class LFU : public Strategy {\npublic:\n    LFU() : Strategy(\"LFU\")\n    {\n        for (int i=0; i\u003ccacheSize; ++i) requestFrequency[i] = 0;\n    }\n\n    int apply(int requestIndex) override\n    {\n        int least = 0;\n\n        for(int i=0; i\u003ccacheSize; ++i)\n        {\n            if(cache[i] == request[requestIndex])\n                return i;\n\n            else if(requestFrequency[i] \u003c requestFrequency[least])\n                least = i;\n        }\n\n        return least;\n    }\n\n    void update(int cachePos, int requestIndex, bool cacheMiss) override\n    {\n        if(cacheMiss)\n            requestFrequency[cachePos] = 1;\n\n        else\n            ++requestFrequency[cachePos];\n    }\n\nprivate:\n\n    // how frequently was the page used\n    int requestFrequency[cacheSize];\n};",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929273816,
        "id": "ec989ff0-a57b-4423-97e7-0250d8747cc2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929273816,
        "parent_id": "5aafc562-3b71-4de2-bf4b-5eee4c2dd40d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "LFU",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " evicts the page uses least often. So the update strategy is just to count every access. Of course after a miss the count resets. The program results are:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "LFU",
            "AttrFlags": 1
          },
          {
            "Text": " evicts the page uses least often. So the update strategy is just to count every access. Of course after a miss the count resets. The program results are:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929273816,
        "id": "8be8ac6f-d76e-4faf-8f0f-0c3f1cd9d585",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929273816,
        "parent_id": "5aafc562-3b71-4de2-bf4b-5eee4c2dd40d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Strategy: LFU\n\nCache initial: (a,b,c)\n\nRequest    cache 0    cache 1    cache 2    cache miss\n  a          a          b          c    \n  a          a          b          c    \n  d          a          d          c          x\n  e          a          d          e          x\n  b          a          b          e          x\n  b          a          b          e    \n  a          a          b          e    \n  c          a          b          c          x\n  f          a          b          f          x\n  d          a          b          d          x\n  e          a          b          e          x\n  a          a          b          e    \n  f          a          b          f          x\n  b          a          b          f    \n  e          a          b          e          x\n  c          a          b          c          x\n\nTotal cache misses: 10"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Strategy: LFU\n\nCache initial: (a,b,c)\n\nRequest    cache 0    cache 1    cache 2    cache miss\n  a          a          b          c    \n  a          a          b          c    \n  d          a          d          c          x\n  e          a          d          e          x\n  b          a          b          e          x\n  b          a          b          e    \n  a          a          b          e    \n  c          a          b          c          x\n  f          a          b          f          x\n  d          a          b          d          x\n  e          a          b          e          x\n  a          a          b          e    \n  f          a          b          f          x\n  b          a          b          f    \n  e          a          b          e          x\n  c          a          b          c          x\n\nTotal cache misses: 10",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929273817,
        "id": "791bad53-8f17-4d4f-b8a9-221303ee237c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929273817,
        "parent_id": "5aafc562-3b71-4de2-bf4b-5eee4c2dd40d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "LFD"
            ]
          ]
        },
        "type": "sub_sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "LFD"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929273817,
        "id": "f28b0626-73a1-40c7-b26a-89b8f5663615",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929273817,
        "parent_id": "5aafc562-3b71-4de2-bf4b-5eee4c2dd40d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class LFD : public Strategy {\npublic:\n    LFD() : Strategy(\"LFD\")\n    {\n        // precalc next usage before starting to fullfill requests\n        for (int i=0; i\u003ccacheSize; ++i) nextUse[i] = calcNextUse(-1, cache[i]);\n    }\n\n    int apply(int requestIndex) override\n    {\n        int latest = 0;\n\n        for(int i=0; i\u003ccacheSize; ++i)\n        {\n            if(cache[i] == request[requestIndex])\n                return i;\n\n            else if(nextUse[i] \u003e nextUse[latest])\n                latest = i;\n        }\n\n        return latest;\n    }\n\n    void update(int cachePos, int requestIndex, bool cacheMiss) override\n    {\n            nextUse[cachePos] = calcNextUse(requestIndex, cache[cachePos]);\n    }\n\nprivate:\n\n    int calcNextUse(int requestPosition, char pageItem)\n    {\n        for(int i = requestPosition+1; i \u003c requestLength; ++i)\n        {\n            if (request[i] == pageItem)\n                return i;\n        }\n\n        return requestLength + 1;\n    }\n\n    // next usage of page\n    int nextUse[cacheSize];\n};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class LFD : public Strategy {\npublic:\n    LFD() : Strategy(\"LFD\")\n    {\n        // precalc next usage before starting to fullfill requests\n        for (int i=0; i\u003ccacheSize; ++i) nextUse[i] = calcNextUse(-1, cache[i]);\n    }\n\n    int apply(int requestIndex) override\n    {\n        int latest = 0;\n\n        for(int i=0; i\u003ccacheSize; ++i)\n        {\n            if(cache[i] == request[requestIndex])\n                return i;\n\n            else if(nextUse[i] \u003e nextUse[latest])\n                latest = i;\n        }\n\n        return latest;\n    }\n\n    void update(int cachePos, int requestIndex, bool cacheMiss) override\n    {\n            nextUse[cachePos] = calcNextUse(requestIndex, cache[cachePos]);\n    }\n\nprivate:\n\n    int calcNextUse(int requestPosition, char pageItem)\n    {\n        for(int i = requestPosition+1; i \u003c requestLength; ++i)\n        {\n            if (request[i] == pageItem)\n                return i;\n        }\n\n        return requestLength + 1;\n    }\n\n    // next usage of page\n    int nextUse[cacheSize];\n};",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929273817,
        "id": "f201863a-c6e7-4ae4-9ecf-9d695120a77d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929273817,
        "parent_id": "5aafc562-3b71-4de2-bf4b-5eee4c2dd40d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "LFD",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " strategy is different from everyone before. Its the only strategy that uses the future requests for its decission who to evict. The implementation uses the function "
            ],
            [
              "calcNextUse",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to get the page which next use is farthest away in the future. The program solution is equal to the solution by hand from above:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "LFD",
            "AttrFlags": 1
          },
          {
            "Text": " strategy is different from everyone before. Its the only strategy that uses the future requests for its decission who to evict. The implementation uses the function "
          },
          {
            "Text": "calcNextUse",
            "AttrFlags": 2
          },
          {
            "Text": " to get the page which next use is farthest away in the future. The program solution is equal to the solution by hand from above:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929273817,
        "id": "cf70ad3e-cd04-4c93-942a-3a118bc83481",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929273817,
        "parent_id": "5aafc562-3b71-4de2-bf4b-5eee4c2dd40d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Strategy: LFD\n\nCache initial: (a,b,c)\n\nRequest    cache 0    cache 1    cache 2    cache miss\n  a          a          b          c    \n  a          a          b          c    \n  d          a          b          d          x\n  e          a          b          e          x\n  b          a          b          e    \n  b          a          b          e    \n  a          a          b          e    \n  c          a          c          e          x\n  f          a          f          e          x\n  d          a          d          e          x\n  e          a          d          e    \n  a          a          d          e    \n  f          f          d          e          x\n  b          b          d          e          x\n  e          b          d          e    \n  c          c          d          e          x\n\nTotal cache misses: 8"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Strategy: LFD\n\nCache initial: (a,b,c)\n\nRequest    cache 0    cache 1    cache 2    cache miss\n  a          a          b          c    \n  a          a          b          c    \n  d          a          b          d          x\n  e          a          b          e          x\n  b          a          b          e    \n  b          a          b          e    \n  a          a          b          e    \n  c          a          c          e          x\n  f          a          f          e          x\n  d          a          d          e          x\n  e          a          d          e    \n  a          a          d          e    \n  f          f          d          e          x\n  b          b          d          e          x\n  e          b          d          e    \n  c          c          d          e          x\n\nTotal cache misses: 8",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929273819,
        "id": "a29bb60b-d615-4195-a44d-c3e23a619ef1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929273819,
        "parent_id": "5aafc562-3b71-4de2-bf4b-5eee4c2dd40d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The greedy strategy "
            ],
            [
              "LFD",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " is indeed the only optimal strategy of the five presented. The proof is rather long and can be found "
            ],
            [
              "here",
              [
                [
                  "a",
                  "https://blog.henrypoon.com/blog/2014/02/02/proof-of-the-farthest-in-future-optimal-caching-algorithm/"
                ]
              ]
            ],
            [
              " or in the book by Jon Kleinberg and Eva Tardos (see sources in remarks down below)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The greedy strategy "
          },
          {
            "Text": "LFD",
            "AttrFlags": 1
          },
          {
            "Text": " is indeed the only optimal strategy of the five presented. The proof is rather long and can be found "
          },
          {
            "Text": "here",
            "Link": "https://blog.henrypoon.com/blog/2014/02/02/proof-of-the-farthest-in-future-optimal-caching-algorithm/"
          },
          {
            "Text": " or in the book by Jon Kleinberg and Eva Tardos (see sources in remarks down below)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929273819,
        "id": "8ac2e4d5-f38f-4b13-a258-f76fa8e2ad36",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929273819,
        "parent_id": "5aafc562-3b71-4de2-bf4b-5eee4c2dd40d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Algorithm vs Reality"
            ]
          ]
        },
        "type": "sub_sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Algorithm vs Reality"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929273820,
        "id": "885e2557-f846-41a7-ac8a-f6bab894a2eb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929273820,
        "parent_id": "5aafc562-3b71-4de2-bf4b-5eee4c2dd40d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "LFD",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " strategy is optimal, but there is a big problem. Its an optimal "
            ],
            [
              "offline",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " solution. In praxis caching is usually an "
            ],
            [
              "online",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " problem, that means the strategy is useless because we cannot now the next time we need a particular item. The other four strategies are also "
            ],
            [
              "online",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " strategies. For online problems we need a general different approach."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "LFD",
            "AttrFlags": 1
          },
          {
            "Text": " strategy is optimal, but there is a big problem. Its an optimal "
          },
          {
            "Text": "offline",
            "AttrFlags": 1
          },
          {
            "Text": " solution. In praxis caching is usually an "
          },
          {
            "Text": "online",
            "AttrFlags": 1
          },
          {
            "Text": " problem, that means the strategy is useless because we cannot now the next time we need a particular item. The other four strategies are also "
          },
          {
            "Text": "online",
            "AttrFlags": 1
          },
          {
            "Text": " strategies. For online problems we need a general different approach."
          }
        ]
      }
    ],
    "title": "Offline Caching",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}