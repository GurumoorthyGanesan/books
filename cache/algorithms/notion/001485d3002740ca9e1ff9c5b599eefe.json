{
  "ID": "001485d3-0027-40ca-9e1f-f9c5b599eefe",
  "Root": {
    "alive": true,
    "content": [
      "5338c67e-c430-4f52-b8f3-7af9ae0bf82b",
      "333dd4fa-8a32-4023-ba93-12979ffd7930",
      "4e4d636c-9cf2-49e6-a6b7-40358cdc9418",
      "3f7a66ec-3816-4af0-95d6-43a4d972e15b",
      "58a93662-29ca-4001-b90f-98b574339ce9",
      "9130c33d-11b0-462a-9b36-6f9301f2d214",
      "d9bdf4a8-4eee-4401-b4b9-d95687588bd7",
      "d7698a84-8359-4069-8499-893e13659d76",
      "d3a2a270-3820-402d-88f5-bd35ba2b1d67",
      "39cea307-ba16-497c-8d83-404fed857ab9",
      "cad332b8-86e6-468b-b52d-39ec469ddb9d",
      "51dcaf82-d4bf-40e8-a0d4-28a100a3e016",
      "6508f6cc-c61a-4a84-8e08-a0015ec2886a"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551928774163,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "001485d3-0027-40ca-9e1f-f9c5b599eefe",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551928774163,
    "parent_id": "a747cf00-d05a-4132-9b34-4cea62968a38",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Quicksort Basics"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928774160,
        "id": "5338c67e-c430-4f52-b8f3-7af9ae0bf82b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928774160,
        "parent_id": "001485d3-0027-40ca-9e1f-f9c5b599eefe",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Quicksort",
              [
                [
                  "b"
                ],
                [
                  "a",
                  "https://en.wikipedia.org/wiki/Quicksort"
                ]
              ]
            ],
            [
              " is a sorting algorithm that picks an element (“the pivot”) and reorders the array forming two partitions such that all elements less than the pivot come before it and all elements greater come after. The algorithm is then applied recursively to the partitions until the list is sorted."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Quicksort",
            "AttrFlags": 1,
            "Link": "https://en.wikipedia.org/wiki/Quicksort"
          },
          {
            "Text": " is a sorting algorithm that picks an element (“the pivot”) and reorders the array forming two partitions such that all elements less than the pivot come before it and all elements greater come after. The algorithm is then applied recursively to the partitions until the list is sorted."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928774161,
        "id": "333dd4fa-8a32-4023-ba93-12979ffd7930",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928774161,
        "parent_id": "001485d3-0027-40ca-9e1f-f9c5b599eefe",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "1. Lomuto partition scheme mechanism :",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "1. Lomuto partition scheme mechanism :",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928774162,
        "id": "4e4d636c-9cf2-49e6-a6b7-40358cdc9418",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928774162,
        "parent_id": "001485d3-0027-40ca-9e1f-f9c5b599eefe",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This scheme chooses a pivot which is typically the last element in the array. The algorithm maintains the index to put the pivot in variable i and each time it finds an element less than or equal to pivot, this index is incremented and that element would be placed before the pivot."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This scheme chooses a pivot which is typically the last element in the array. The algorithm maintains the index to put the pivot in variable i and each time it finds an element less than or equal to pivot, this index is incremented and that element would be placed before the pivot."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928774162,
        "id": "3f7a66ec-3816-4af0-95d6-43a4d972e15b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928774162,
        "parent_id": "001485d3-0027-40ca-9e1f-f9c5b599eefe",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "partition(A, low, high) is\npivot := A[high]\ni := low\nfor j := low to high – 1 do\n    if A[j] ≤ pivot then\n        swap A[i] with A[j]\n        i := i + 1\nswap A[i] with A[high]\nreturn i"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "partition(A, low, high) is\npivot := A[high]\ni := low\nfor j := low to high – 1 do\n    if A[j] ≤ pivot then\n        swap A[i] with A[j]\n        i := i + 1\nswap A[i] with A[high]\nreturn i",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928774162,
        "id": "58a93662-29ca-4001-b90f-98b574339ce9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928774162,
        "parent_id": "001485d3-0027-40ca-9e1f-f9c5b599eefe",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Quick Sort mechanism :"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Quick Sort mechanism :"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928774162,
        "id": "9130c33d-11b0-462a-9b36-6f9301f2d214",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928774162,
        "parent_id": "001485d3-0027-40ca-9e1f-f9c5b599eefe",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "quicksort(A, low, high) is\nif low \u003c high then\n    p := partition(A, low, high)\n    quicksort(A, low, p – 1)\n    quicksort(A, p + 1, high)"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "quicksort(A, low, high) is\nif low \u003c high then\n    p := partition(A, low, high)\n    quicksort(A, low, p – 1)\n    quicksort(A, p + 1, high)",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928774162,
        "id": "d9bdf4a8-4eee-4401-b4b9-d95687588bd7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928774162,
        "parent_id": "001485d3-0027-40ca-9e1f-f9c5b599eefe",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Example of quick sort:",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " "
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Example of quick sort:",
            "AttrFlags": 1
          },
          {
            "Text": " "
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928774163,
        "id": "d7698a84-8359-4069-8499-893e13659d76",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928774163,
        "parent_id": "001485d3-0027-40ca-9e1f-f9c5b599eefe",
        "parent_table": "block",
        "properties": {
          "source": [
            [
              "/tmp/46a7e0d3-3ecc-4ad1-8d69-6221228be2b6/a4beac9e624e967bb2fb55ec6eb22756203d2e08.gif"
            ]
          ]
        },
        "type": "image",
        "version": 1,
        "source": "/tmp/46a7e0d3-3ecc-4ad1-8d69-6221228be2b6/a4beac9e624e967bb2fb55ec6eb22756203d2e08.gif",
        "image_url": "https://www.notion.so/image/https:%2F%2Fwww.notion.so%2Ftmp%2F46a7e0d3-3ecc-4ad1-8d69-6221228be2b6%2Fa4beac9e624e967bb2fb55ec6eb22756203d2e08.gif"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928774163,
        "id": "d3a2a270-3820-402d-88f5-bd35ba2b1d67",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928774163,
        "parent_id": "001485d3-0027-40ca-9e1f-f9c5b599eefe",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "2. Hoare partition scheme:",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "2. Hoare partition scheme:",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928774163,
        "id": "39cea307-ba16-497c-8d83-404fed857ab9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928774163,
        "parent_id": "001485d3-0027-40ca-9e1f-f9c5b599eefe",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It uses two indices that start at the ends of the array being partitioned, then move toward each other, until they detect an inversion: a pair of elements, one greater or equal than the pivot, one lesser or equal, that are in the wrong order relative to each other. The inverted elements are then swapped. When the indices meet, the algorithm stops and returns the final index. Hoare’s scheme is more efficient than Lomuto’s partition scheme because it does three times fewer swaps on average, and it creates efficient partitions even when all values are equal."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It uses two indices that start at the ends of the array being partitioned, then move toward each other, until they detect an inversion: a pair of elements, one greater or equal than the pivot, one lesser or equal, that are in the wrong order relative to each other. The inverted elements are then swapped. When the indices meet, the algorithm stops and returns the final index. Hoare’s scheme is more efficient than Lomuto’s partition scheme because it does three times fewer swaps on average, and it creates efficient partitions even when all values are equal."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928774163,
        "id": "cad332b8-86e6-468b-b52d-39ec469ddb9d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928774163,
        "parent_id": "001485d3-0027-40ca-9e1f-f9c5b599eefe",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "quicksort(A, lo, hi) is\nif lo \u003c hi then\n    p := partition(A, lo, hi)\n    quicksort(A, lo, p)\n    quicksort(A, p + 1, hi)"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "quicksort(A, lo, hi) is\nif lo \u003c hi then\n    p := partition(A, lo, hi)\n    quicksort(A, lo, p)\n    quicksort(A, p + 1, hi)",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928774163,
        "id": "51dcaf82-d4bf-40e8-a0d4-28a100a3e016",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928774163,
        "parent_id": "001485d3-0027-40ca-9e1f-f9c5b599eefe",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Partition :"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Partition :"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928774163,
        "id": "6508f6cc-c61a-4a84-8e08-a0015ec2886a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928774163,
        "parent_id": "001485d3-0027-40ca-9e1f-f9c5b599eefe",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "partition(A, lo, hi) is\npivot := A[lo]\ni := lo - 1\nj := hi + 1\nloop forever\n    do:\n        i := i + 1\n    while A[i] \u003c pivot do\n    \n    do:\n        j := j - 1\n    while A[j] \u003e pivot do\n    \n    if i \u003e= j then\n        return j\n    \n    swap A[i] with A[j]"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "partition(A, lo, hi) is\npivot := A[lo]\ni := lo - 1\nj := hi + 1\nloop forever\n    do:\n        i := i + 1\n    while A[i] \u003c pivot do\n    \n    do:\n        j := j - 1\n    while A[j] \u003e pivot do\n    \n    if i \u003e= j then\n        return j\n    \n    swap A[i] with A[j]",
        "code_language": "Plain Text"
      }
    ],
    "title": "Quicksort Basics",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}