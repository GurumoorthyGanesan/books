{
  "ID": "471ca923-5c34-43b3-be70-cc3dd8620d99",
  "Root": {
    "alive": true,
    "content": [
      "8055ef83-4c3f-494f-8797-a973475e7ad3"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551928443682,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "471ca923-5c34-43b3-be70-cc3dd8620d99",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551928443682,
    "parent_id": "a034d8c3-224b-46dc-bc26-d44b569e39e0",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Merge Sort Implementation in Python"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928443682,
        "id": "8055ef83-4c3f-494f-8797-a973475e7ad3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928443682,
        "parent_id": "471ca923-5c34-43b3-be70-cc3dd8620d99",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "def merge(X, Y):\n    \" merge two sorted lists \"\n    p1 = p2 = 0\n    out = []\n    while p1 \u003c len(X) and p2 \u003c len(Y):\n        if X[p1] \u003c Y[p2]:\n            out.append(X[p1])\n            p1 += 1\n        else:\n            out.append(Y[p2])\n            p2 += 1\n    out += X[p1:] + Y[p2:]\n    return out\n\ndef mergeSort(A):\n    if len(A) \u003c= 1:\n        return A\n    if len(A) == 2:\n        return sorted(A)\n\n    mid = len(A) / 2\n    return merge(mergeSort(A[:mid]), mergeSort(A[mid:]))\n\nif __name__ == \"__main__\":\n    # Generate 20 random numbers and sort them\n    A = [randint(1, 100) for i in xrange(20)]\n    print mergeSort(A)"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "def merge(X, Y):\n    \" merge two sorted lists \"\n    p1 = p2 = 0\n    out = []\n    while p1 \u003c len(X) and p2 \u003c len(Y):\n        if X[p1] \u003c Y[p2]:\n            out.append(X[p1])\n            p1 += 1\n        else:\n            out.append(Y[p2])\n            p2 += 1\n    out += X[p1:] + Y[p2:]\n    return out\n\ndef mergeSort(A):\n    if len(A) \u003c= 1:\n        return A\n    if len(A) == 2:\n        return sorted(A)\n\n    mid = len(A) / 2\n    return merge(mergeSort(A[:mid]), mergeSort(A[mid:]))\n\nif __name__ == \"__main__\":\n    # Generate 20 random numbers and sort them\n    A = [randint(1, 100) for i in xrange(20)]\n    print mergeSort(A)",
        "code_language": "Plain Text"
      }
    ],
    "title": "Merge Sort Implementation in Python",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}