{
  "ID": "d2eec414-1d8c-4ffa-9b37-8b4e2ada192e",
  "Root": {
    "alive": true,
    "content": [
      "e0643713-1d7e-4235-afda-739857ae6c1b",
      "a39f6da9-0f49-4829-b219-b4f7e539236c",
      "1cbc6928-042f-42fc-a57d-ca620a9cd031",
      "b1bb71a2-a670-4a12-a2db-e7a564d172b2",
      "cad74dcb-7f5e-4073-bf2b-5811f34263cb",
      "a6f42a2a-0fc0-4dd1-9ac9-4142e7c57aa3",
      "cfbc68c2-2e41-456d-a978-d6bdc1c9a6ee",
      "0853f87a-3b1a-46e7-9d1c-208d1d0dbdcd",
      "45eba55b-7ff0-419a-a52b-3e4a2edc0023"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551928438934,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "d2eec414-1d8c-4ffa-9b37-8b4e2ada192e",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551928438934,
    "parent_id": "a034d8c3-224b-46dc-bc26-d44b569e39e0",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Merge Sort Basics"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928438930,
        "id": "e0643713-1d7e-4235-afda-739857ae6c1b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928438930,
        "parent_id": "d2eec414-1d8c-4ffa-9b37-8b4e2ada192e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Merge Sort is a divide-and-conquer algorithm. It divides the input list of length n in half successively until there are n lists of size 1. Then, pairs of lists are merged together with the smaller first element among the pair of lists being added in each step. Through successive merging and through comparison of first elements, the sorted list is built."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Merge Sort is a divide-and-conquer algorithm. It divides the input list of length n in half successively until there are n lists of size 1. Then, pairs of lists are merged together with the smaller first element among the pair of lists being added in each step. Through successive merging and through comparison of first elements, the sorted list is built."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928438932,
        "id": "a39f6da9-0f49-4829-b219-b4f7e539236c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928438932,
        "parent_id": "d2eec414-1d8c-4ffa-9b37-8b4e2ada192e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "An example:",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "An example:",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928438933,
        "id": "1cbc6928-042f-42fc-a57d-ca620a9cd031",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928438933,
        "parent_id": "d2eec414-1d8c-4ffa-9b37-8b4e2ada192e",
        "parent_table": "block",
        "properties": {
          "source": [
            [
              "/tmp/4f2b4dde-3541-4a0f-8ee2-7d0205e61695/8cc9487e0be89b13bad828811a77800f6c184503.png"
            ]
          ]
        },
        "type": "image",
        "version": 1,
        "source": "/tmp/4f2b4dde-3541-4a0f-8ee2-7d0205e61695/8cc9487e0be89b13bad828811a77800f6c184503.png",
        "image_url": "https://www.notion.so/image/https:%2F%2Fwww.notion.so%2Ftmp%2F4f2b4dde-3541-4a0f-8ee2-7d0205e61695%2F8cc9487e0be89b13bad828811a77800f6c184503.png"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928438933,
        "id": "b1bb71a2-a670-4a12-a2db-e7a564d172b2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928438933,
        "parent_id": "d2eec414-1d8c-4ffa-9b37-8b4e2ada192e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Time Complexity",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ": "
            ],
            [
              "T(n) = 2T(n/2) + Θ(n)",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Time Complexity",
            "AttrFlags": 1
          },
          {
            "Text": ": "
          },
          {
            "Text": "T(n) = 2T(n/2) + Θ(n)",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928438933,
        "id": "cad74dcb-7f5e-4073-bf2b-5811f34263cb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928438933,
        "parent_id": "d2eec414-1d8c-4ffa-9b37-8b4e2ada192e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The above recurrence can be solved either using Recurrence Tree method or Master method. It falls in case II of Master Method and solution of the recurrence is "
            ],
            [
              "Θ(nLogn)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Time complexity of "
            ],
            [
              "Merge Sort",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " is "
            ],
            [
              "Θ(nLogn)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in all 3 cases ("
            ],
            [
              "worst, average and best",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ") as merge sort always divides the array in two halves and take linear time to merge two halves."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The above recurrence can be solved either using Recurrence Tree method or Master method. It falls in case II of Master Method and solution of the recurrence is "
          },
          {
            "Text": "Θ(nLogn)",
            "AttrFlags": 2
          },
          {
            "Text": ". Time complexity of "
          },
          {
            "Text": "Merge Sort",
            "AttrFlags": 4
          },
          {
            "Text": " is "
          },
          {
            "Text": "Θ(nLogn)",
            "AttrFlags": 2
          },
          {
            "Text": " in all 3 cases ("
          },
          {
            "Text": "worst, average and best",
            "AttrFlags": 4
          },
          {
            "Text": ") as merge sort always divides the array in two halves and take linear time to merge two halves."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928438933,
        "id": "a6f42a2a-0fc0-4dd1-9ac9-4142e7c57aa3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928438933,
        "parent_id": "d2eec414-1d8c-4ffa-9b37-8b4e2ada192e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Auxiliary Space",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ": "
            ],
            [
              "O(n)",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Auxiliary Space",
            "AttrFlags": 1
          },
          {
            "Text": ": "
          },
          {
            "Text": "O(n)",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928438933,
        "id": "cfbc68c2-2e41-456d-a978-d6bdc1c9a6ee",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928438933,
        "parent_id": "d2eec414-1d8c-4ffa-9b37-8b4e2ada192e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Algorithmic Paradigm",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ": Divide and Conquer"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Algorithmic Paradigm",
            "AttrFlags": 1
          },
          {
            "Text": ": Divide and Conquer"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928438934,
        "id": "0853f87a-3b1a-46e7-9d1c-208d1d0dbdcd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928438934,
        "parent_id": "d2eec414-1d8c-4ffa-9b37-8b4e2ada192e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Sorting In Place",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ": Not in a typical implementation"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Sorting In Place",
            "AttrFlags": 1
          },
          {
            "Text": ": Not in a typical implementation"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928438934,
        "id": "45eba55b-7ff0-419a-a52b-3e4a2edc0023",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928438934,
        "parent_id": "d2eec414-1d8c-4ffa-9b37-8b4e2ada192e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Stable",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ": Yes"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Stable",
            "AttrFlags": 1
          },
          {
            "Text": ": Yes"
          }
        ]
      }
    ],
    "title": "Merge Sort Basics",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}