{
  "ID": "1c5985f7-2179-484c-93f9-5224fb1eab12",
  "Root": {
    "alive": true,
    "content": [
      "99660ecb-784a-491f-bc54-74a598a5a47b"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551929180164,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "1c5985f7-2179-484c-93f9-5224fb1eab12",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551929180164,
    "parent_id": "f82e52a5-bc15-4106-8c59-2d323c6aa2f1",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "C Implementation"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929180161,
        "id": "99660ecb-784a-491f-bc54-74a598a5a47b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929180161,
        "parent_id": "1c5985f7-2179-484c-93f9-5224fb1eab12",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class PancakeSort\n{\n    private static void SortPancake(int[] input, int n)\n    {\n        for (var bottom = n - 1; bottom \u003e 0; bottom--)\n        {\n            var index = bottom;\n            var maxIndex = input[bottom];\n            int i;\n            for (i = bottom - 1; i \u003e= 0; i--)\n            {\n                if (input[i] \u003e maxIndex)\n                {\n                    maxIndex = input[i];\n                    index = i;\n                }\n            }\n            if (index == bottom) continue;\n            var temp = new int[n];\n            var j = 0;\n            for (i = bottom; i \u003e index; i--,j++)\n            {\n                temp[j] = input[i];\n            }\n            for (i = 0; i \u003c index; i++, j++)\n            {\n                temp[j] = input[i];\n            }\n            if (temp.Length \u003e j) temp[j] = input[index];\n            for (i = 0; i \u003c= bottom; i++)\n            {\n                input[i] = temp[i];\n            }\n        }\n    }\n\n    public static int[] Main(int[] input)\n    {\n        SortPancake(input, input.Length);\n        return input;\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class PancakeSort\n{\n    private static void SortPancake(int[] input, int n)\n    {\n        for (var bottom = n - 1; bottom \u003e 0; bottom--)\n        {\n            var index = bottom;\n            var maxIndex = input[bottom];\n            int i;\n            for (i = bottom - 1; i \u003e= 0; i--)\n            {\n                if (input[i] \u003e maxIndex)\n                {\n                    maxIndex = input[i];\n                    index = i;\n                }\n            }\n            if (index == bottom) continue;\n            var temp = new int[n];\n            var j = 0;\n            for (i = bottom; i \u003e index; i--,j++)\n            {\n                temp[j] = input[i];\n            }\n            for (i = 0; i \u003c index; i++, j++)\n            {\n                temp[j] = input[i];\n            }\n            if (temp.Length \u003e j) temp[j] = input[index];\n            for (i = 0; i \u003c= bottom; i++)\n            {\n                input[i] = temp[i];\n            }\n        }\n    }\n\n    public static int[] Main(int[] input)\n    {\n        SortPancake(input, input.Length);\n        return input;\n    }\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "C Implementation",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}