{
  "ID": "581cc939-c93d-4ab6-8cb6-93c940a41dbf",
  "Root": {
    "alive": true,
    "content": [
      "1e6fa5da-d17f-4a7a-8f46-30c464d71b42",
      "8fdb007e-bb39-4a1f-8eb3-b0a163273ab4",
      "c393a2ca-7699-462f-8157-20855db05974"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551928075770,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "581cc939-c93d-4ab6-8cb6-93c940a41dbf",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551928075770,
    "parent_id": "e737c451-edb2-4ee1-8b50-4891f751f559",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Simple disjoint-set based implementation"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928075766,
        "id": "1e6fa5da-d17f-4a7a-8f46-30c464d71b42",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928075766,
        "parent_id": "581cc939-c93d-4ab6-8cb6-93c940a41dbf",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The above forest methodology is actually a disjoint-set data structure, which involves three main operations:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The above forest methodology is actually a disjoint-set data structure, which involves three main operations:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928075769,
        "id": "8fdb007e-bb39-4a1f-8eb3-b0a163273ab4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928075769,
        "parent_id": "581cc939-c93d-4ab6-8cb6-93c940a41dbf",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "subalgo makeSet(v: a node):\n    v.parent = v    \u003c- make a new tree rooted at v\n    \n\nsubalgo findSet(v: a node):\n    if v.parent == v:\n        return v\n    return findSet(v.parent)\n\nsubalgo unionSet(v, u: nodes):\n    vRoot = findSet(v)\n    uRoot = findSet(u)\n\n    uRoot.parent = vRoot\n\nalgorithm kruskalMST''(G: a graph):\n    sort G's edges by their value\n    for each node n in G:\n        makeSet(n)\n    for each edge e in G:\n        if findSet(e.first) != findSet(e.second):\n            unionSet(e.first, e.second)"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "subalgo makeSet(v: a node):\n    v.parent = v    \u003c- make a new tree rooted at v\n    \n\nsubalgo findSet(v: a node):\n    if v.parent == v:\n        return v\n    return findSet(v.parent)\n\nsubalgo unionSet(v, u: nodes):\n    vRoot = findSet(v)\n    uRoot = findSet(u)\n\n    uRoot.parent = vRoot\n\nalgorithm kruskalMST''(G: a graph):\n    sort G's edges by their value\n    for each node n in G:\n        makeSet(n)\n    for each edge e in G:\n        if findSet(e.first) != findSet(e.second):\n            unionSet(e.first, e.second)",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928075770,
        "id": "c393a2ca-7699-462f-8157-20855db05974",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928075770,
        "parent_id": "581cc939-c93d-4ab6-8cb6-93c940a41dbf",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This naive implementation leads to "
            ],
            [
              "O(n log n)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " time for managing the disjoint-set data structure, leading to "
            ],
            [
              "O(m*n log n)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " time for the entire Kruskal’s algorithm."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This naive implementation leads to "
          },
          {
            "Text": "O(n log n)",
            "AttrFlags": 2
          },
          {
            "Text": " time for managing the disjoint-set data structure, leading to "
          },
          {
            "Text": "O(m*n log n)",
            "AttrFlags": 2
          },
          {
            "Text": " time for the entire Kruskal’s algorithm."
          }
        ]
      }
    ],
    "title": "Simple disjoint-set based implementation",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}