{
  "ID": "278c23a5-0168-477a-b844-aee556976c8b",
  "Root": {
    "alive": true,
    "content": [
      "4d0f339e-41f8-4114-81ef-a8899910b4fe",
      "228632a0-faa1-4814-86a3-564493387d62",
      "ee21f0d1-1e7d-4a34-bfd4-0bc2fdeb2b3d",
      "901b796d-905d-4cf1-bd22-c4e06f7ad23f",
      "8b56e6e6-fa6e-4681-b833-fcb0fbfc7e25",
      "732228c3-3568-4e4b-a0de-b6ad8a97a144",
      "b8a1357c-2844-443a-8f06-4000619f327d",
      "c2a1bcf6-616a-4e73-996e-08609f6b08fa",
      "b1bf866a-b039-4937-a73d-f82c614e275f",
      "7458bf21-edf7-45bb-9f41-c9a15ab5b438",
      "e783d78f-4372-4adc-b53d-d7d5608b0c74",
      "d8ffb110-1e84-4b62-a5df-7a402b777150",
      "23bdf8cf-2f58-4094-ab81-cbe57176bb1b",
      "8b9f07ac-6d26-43cd-acd8-a8810c8eade9",
      "4e4797ac-117e-4880-9659-a4f1100439f0",
      "2e1c7d52-5d1f-4a4b-a58b-bd0405189fc4",
      "19d9a494-ee48-4056-b5fb-02fb6eafe341",
      "7eda1e24-fe48-4d04-9bdf-3aaaecd7ead2",
      "17a42ef5-e44b-474f-b047-2532803572e7",
      "fa1d43a3-c6cb-4667-a6da-91061e3c1d6e"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551928514647,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "278c23a5-0168-477a-b844-aee556976c8b",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551928514647,
    "parent_id": "07b6aee1-86e2-4b06-9533-93f2f24dd419",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "All Pair Shortest Path Algorithm"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928514637,
        "id": "4d0f339e-41f8-4114-81ef-a8899910b4fe",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928514637,
        "parent_id": "278c23a5-0168-477a-b844-aee556976c8b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Floyd-Warshall",
              [
                [
                  "a",
                  "https://en.wikipedia.org/wiki/Floyd%E2%80%93Warshall_algorithm"
                ]
              ]
            ],
            [
              "’s algorithm is for finding shortest paths in a weighted graph with positive or negative edge weights. A single execution of the algorithm will find the lengths (summed weights) of the shortest paths between all pair of vertices. With a little variation, it can print the shortest path and can detect negative cycles in a graph. Floyd-Warshall is a Dynamic-Programming algorithm."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Floyd-Warshall",
            "Link": "https://en.wikipedia.org/wiki/Floyd%E2%80%93Warshall_algorithm"
          },
          {
            "Text": "’s algorithm is for finding shortest paths in a weighted graph with positive or negative edge weights. A single execution of the algorithm will find the lengths (summed weights) of the shortest paths between all pair of vertices. With a little variation, it can print the shortest path and can detect negative cycles in a graph. Floyd-Warshall is a Dynamic-Programming algorithm."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928514638,
        "id": "228632a0-faa1-4814-86a3-564493387d62",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928514638,
        "parent_id": "278c23a5-0168-477a-b844-aee556976c8b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Let’s look at an example. We’re going to apply Floyd-Warshall’s algorithm on this graph:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Let’s look at an example. We’re going to apply Floyd-Warshall’s algorithm on this graph:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928514638,
        "id": "ee21f0d1-1e7d-4a34-bfd4-0bc2fdeb2b3d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928514638,
        "parent_id": "278c23a5-0168-477a-b844-aee556976c8b",
        "parent_table": "block",
        "properties": {
          "source": [
            [
              "/tmp/c17d6dc8-cd8a-42eb-b323-b4f5d96903da/1501a48baf7d5757b3af4faf85fbbb7b689492d1.png"
            ]
          ]
        },
        "type": "image",
        "version": 1,
        "source": "/tmp/c17d6dc8-cd8a-42eb-b323-b4f5d96903da/1501a48baf7d5757b3af4faf85fbbb7b689492d1.png",
        "image_url": "https://www.notion.so/image/https:%2F%2Fwww.notion.so%2Ftmp%2Fc17d6dc8-cd8a-42eb-b323-b4f5d96903da%2F1501a48baf7d5757b3af4faf85fbbb7b689492d1.png"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928514640,
        "id": "901b796d-905d-4cf1-bd22-c4e06f7ad23f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928514640,
        "parent_id": "278c23a5-0168-477a-b844-aee556976c8b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "First thing we do is, we take two 2D matrices. These are "
            ],
            [
              "adjacency matrices",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/algorithm/2299/graphs/23963/storing-graphs-adjacency-matrix"
                ]
              ]
            ],
            [
              ". The size of the matrices is going to be the total number of vertices. For our graph, we will take "
            ],
            [
              "4 * 4",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " matrices. The "
            ],
            [
              "Distance Matrix",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " is going to store the minimum distance found so far between two vertices. At first, for the edges, if there is an edge between "
            ],
            [
              "u-v",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " and the distance/weight is "
            ],
            [
              "w",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", we’ll store: "
            ],
            [
              "distance[u][v] = w",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". For all the edges that doesn’t exist, we’re gonna put "
            ],
            [
              "infinity",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ". The "
            ],
            [
              "Path Matrix",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " is for regenerating minimum distance path between two vertices. So initially, if there is a path between "
            ],
            [
              "u",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "v",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", we’re going to put "
            ],
            [
              "path[u][v] = u",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". This means the best way to come to "
            ],
            [
              "vertex-v",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " from "
            ],
            [
              "vertex-u",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " is to use the edge that connects "
            ],
            [
              "v",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " with "
            ],
            [
              "u",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". If there is no path between two vertices, we’re going to put "
            ],
            [
              "N",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " there indicating there is no path available now. The two tables for our graph will look like:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "First thing we do is, we take two 2D matrices. These are "
          },
          {
            "Text": "adjacency matrices",
            "Link": "http://stackoverflow.com/documentation/algorithm/2299/graphs/23963/storing-graphs-adjacency-matrix"
          },
          {
            "Text": ". The size of the matrices is going to be the total number of vertices. For our graph, we will take "
          },
          {
            "Text": "4 * 4",
            "AttrFlags": 1
          },
          {
            "Text": " matrices. The "
          },
          {
            "Text": "Distance Matrix",
            "AttrFlags": 1
          },
          {
            "Text": " is going to store the minimum distance found so far between two vertices. At first, for the edges, if there is an edge between "
          },
          {
            "Text": "u-v",
            "AttrFlags": 1
          },
          {
            "Text": " and the distance/weight is "
          },
          {
            "Text": "w",
            "AttrFlags": 1
          },
          {
            "Text": ", we’ll store: "
          },
          {
            "Text": "distance[u][v] = w",
            "AttrFlags": 2
          },
          {
            "Text": ". For all the edges that doesn’t exist, we’re gonna put "
          },
          {
            "Text": "infinity",
            "AttrFlags": 4
          },
          {
            "Text": ". The "
          },
          {
            "Text": "Path Matrix",
            "AttrFlags": 1
          },
          {
            "Text": " is for regenerating minimum distance path between two vertices. So initially, if there is a path between "
          },
          {
            "Text": "u",
            "AttrFlags": 1
          },
          {
            "Text": " and "
          },
          {
            "Text": "v",
            "AttrFlags": 1
          },
          {
            "Text": ", we’re going to put "
          },
          {
            "Text": "path[u][v] = u",
            "AttrFlags": 2
          },
          {
            "Text": ". This means the best way to come to "
          },
          {
            "Text": "vertex-v",
            "AttrFlags": 1
          },
          {
            "Text": " from "
          },
          {
            "Text": "vertex-u",
            "AttrFlags": 1
          },
          {
            "Text": " is to use the edge that connects "
          },
          {
            "Text": "v",
            "AttrFlags": 1
          },
          {
            "Text": " with "
          },
          {
            "Text": "u",
            "AttrFlags": 1
          },
          {
            "Text": ". If there is no path between two vertices, we’re going to put "
          },
          {
            "Text": "N",
            "AttrFlags": 1
          },
          {
            "Text": " there indicating there is no path available now. The two tables for our graph will look like:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928514640,
        "id": "8b56e6e6-fa6e-4681-b833-fcb0fbfc7e25",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928514640,
        "parent_id": "278c23a5-0168-477a-b844-aee556976c8b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "+-----+-----+-----+-----+-----+            +-----+-----+-----+-----+-----+\n|     |  1  |  2  |  3  |  4  |            |     |  1  |  2  |  3  |  4  |\n+-----+-----+-----+-----+-----+            +-----+-----+-----+-----+-----+\n|  1  |  0  |  3  |  6  |  15 |            |  1  |  N  |  1  |  1  |  1  |\n+-----+-----+-----+-----+-----+            +-----+-----+-----+-----+-----+\n|  2  | inf |  0  | -2  | inf |            |  2  |  N  |  N  |  2  |  N  |\n+-----+-----+-----+-----+-----+            +-----+-----+-----+-----+-----+\n|  3  | inf | inf |  0  |  2  |            |  3  |  N  |  N  |  N  |  3  |\n+-----+-----+-----+-----+-----+            +-----+-----+-----+-----+-----+\n|  4  |  1  | inf | inf |  0  |            |  4  |  4  |  N  |  N  |  N  |\n+-----+-----+-----+-----+-----+            +-----+-----+-----+-----+-----+\n            distance                                     path"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "+-----+-----+-----+-----+-----+            +-----+-----+-----+-----+-----+\n|     |  1  |  2  |  3  |  4  |            |     |  1  |  2  |  3  |  4  |\n+-----+-----+-----+-----+-----+            +-----+-----+-----+-----+-----+\n|  1  |  0  |  3  |  6  |  15 |            |  1  |  N  |  1  |  1  |  1  |\n+-----+-----+-----+-----+-----+            +-----+-----+-----+-----+-----+\n|  2  | inf |  0  | -2  | inf |            |  2  |  N  |  N  |  2  |  N  |\n+-----+-----+-----+-----+-----+            +-----+-----+-----+-----+-----+\n|  3  | inf | inf |  0  |  2  |            |  3  |  N  |  N  |  N  |  3  |\n+-----+-----+-----+-----+-----+            +-----+-----+-----+-----+-----+\n|  4  |  1  | inf | inf |  0  |            |  4  |  4  |  N  |  N  |  N  |\n+-----+-----+-----+-----+-----+            +-----+-----+-----+-----+-----+\n            distance                                     path",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928514640,
        "id": "732228c3-3568-4e4b-a0de-b6ad8a97a144",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928514640,
        "parent_id": "278c23a5-0168-477a-b844-aee556976c8b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Since there is no loop, the diagonals are set "
            ],
            [
              "N",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". And the distance from the vertex itself is "
            ],
            [
              "0",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Since there is no loop, the diagonals are set "
          },
          {
            "Text": "N",
            "AttrFlags": 1
          },
          {
            "Text": ". And the distance from the vertex itself is "
          },
          {
            "Text": "0",
            "AttrFlags": 1
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928514642,
        "id": "b8a1357c-2844-443a-8f06-4000619f327d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928514642,
        "parent_id": "278c23a5-0168-477a-b844-aee556976c8b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To apply Floyd-Warshall algorithm, we’re going to select a middle vertex "
            ],
            [
              "k",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". Then for each vertex "
            ],
            [
              "i",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", we’re going to check if we can go from "
            ],
            [
              "i",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " to "
            ],
            [
              "k",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " and then "
            ],
            [
              "k",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " to "
            ],
            [
              "j",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", where "
            ],
            [
              "j",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " is another vertex and minimize the cost of going from "
            ],
            [
              "i",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " to "
            ],
            [
              "j",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". If the current "
            ],
            [
              "distance[i][j]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " is greater than "
            ],
            [
              "distance[i][k]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " + "
            ],
            [
              "distance[k][j]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", we’re going to put "
            ],
            [
              "distance[i][j]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " equals to the summation of those two distances. And the "
            ],
            [
              "path[i][j]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " will be set to "
            ],
            [
              "path[k][j]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", as it is better to go from "
            ],
            [
              "i",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " to "
            ],
            [
              "k",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", and then "
            ],
            [
              "k",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " to "
            ],
            [
              "j",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". All the vertices will be selected as "
            ],
            [
              "k",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". We’ll have 3 nested loops: for "
            ],
            [
              "k",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " going from 1 to 4, "
            ],
            [
              "i",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " going from 1 to 4 and "
            ],
            [
              "j",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " going from 1 to 4. We’re going check:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To apply Floyd-Warshall algorithm, we’re going to select a middle vertex "
          },
          {
            "Text": "k",
            "AttrFlags": 1
          },
          {
            "Text": ". Then for each vertex "
          },
          {
            "Text": "i",
            "AttrFlags": 1
          },
          {
            "Text": ", we’re going to check if we can go from "
          },
          {
            "Text": "i",
            "AttrFlags": 1
          },
          {
            "Text": " to "
          },
          {
            "Text": "k",
            "AttrFlags": 1
          },
          {
            "Text": " and then "
          },
          {
            "Text": "k",
            "AttrFlags": 1
          },
          {
            "Text": " to "
          },
          {
            "Text": "j",
            "AttrFlags": 1
          },
          {
            "Text": ", where "
          },
          {
            "Text": "j",
            "AttrFlags": 1
          },
          {
            "Text": " is another vertex and minimize the cost of going from "
          },
          {
            "Text": "i",
            "AttrFlags": 1
          },
          {
            "Text": " to "
          },
          {
            "Text": "j",
            "AttrFlags": 1
          },
          {
            "Text": ". If the current "
          },
          {
            "Text": "distance[i][j]",
            "AttrFlags": 1
          },
          {
            "Text": " is greater than "
          },
          {
            "Text": "distance[i][k]",
            "AttrFlags": 1
          },
          {
            "Text": " + "
          },
          {
            "Text": "distance[k][j]",
            "AttrFlags": 1
          },
          {
            "Text": ", we’re going to put "
          },
          {
            "Text": "distance[i][j]",
            "AttrFlags": 1
          },
          {
            "Text": " equals to the summation of those two distances. And the "
          },
          {
            "Text": "path[i][j]",
            "AttrFlags": 1
          },
          {
            "Text": " will be set to "
          },
          {
            "Text": "path[k][j]",
            "AttrFlags": 1
          },
          {
            "Text": ", as it is better to go from "
          },
          {
            "Text": "i",
            "AttrFlags": 1
          },
          {
            "Text": " to "
          },
          {
            "Text": "k",
            "AttrFlags": 1
          },
          {
            "Text": ", and then "
          },
          {
            "Text": "k",
            "AttrFlags": 1
          },
          {
            "Text": " to "
          },
          {
            "Text": "j",
            "AttrFlags": 1
          },
          {
            "Text": ". All the vertices will be selected as "
          },
          {
            "Text": "k",
            "AttrFlags": 1
          },
          {
            "Text": ". We’ll have 3 nested loops: for "
          },
          {
            "Text": "k",
            "AttrFlags": 1
          },
          {
            "Text": " going from 1 to 4, "
          },
          {
            "Text": "i",
            "AttrFlags": 1
          },
          {
            "Text": " going from 1 to 4 and "
          },
          {
            "Text": "j",
            "AttrFlags": 1
          },
          {
            "Text": " going from 1 to 4. We’re going check:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928514642,
        "id": "c2a1bcf6-616a-4e73-996e-08609f6b08fa",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928514642,
        "parent_id": "278c23a5-0168-477a-b844-aee556976c8b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "if distance[i][j] \u003e distance[i][k] + distance[k][j]\n    distance[i][j] := distance[i][k] + distance[k][j]\n    path[i][j] := path[k][j]\nend if"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "if distance[i][j] \u003e distance[i][k] + distance[k][j]\n    distance[i][j] := distance[i][k] + distance[k][j]\n    path[i][j] := path[k][j]\nend if",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928514642,
        "id": "b1bf866a-b039-4937-a73d-f82c614e275f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928514642,
        "parent_id": "278c23a5-0168-477a-b844-aee556976c8b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "So what we’re basically checking is, "
            ],
            [
              "for every pair of vertices, do we get a shorter distance by going through another vertex?",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " The total number of operations for our graph will be "
            ],
            [
              "4 * 4 * 4",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " = "
            ],
            [
              "64",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". That means we’re going to do this check "
            ],
            [
              "64",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " times. Let’s look at a few of them:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "So what we’re basically checking is, "
          },
          {
            "Text": "for every pair of vertices, do we get a shorter distance by going through another vertex?",
            "AttrFlags": 4
          },
          {
            "Text": " The total number of operations for our graph will be "
          },
          {
            "Text": "4 * 4 * 4",
            "AttrFlags": 1
          },
          {
            "Text": " = "
          },
          {
            "Text": "64",
            "AttrFlags": 1
          },
          {
            "Text": ". That means we’re going to do this check "
          },
          {
            "Text": "64",
            "AttrFlags": 1
          },
          {
            "Text": " times. Let’s look at a few of them:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928514644,
        "id": "7458bf21-edf7-45bb-9f41-c9a15ab5b438",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928514644,
        "parent_id": "278c23a5-0168-477a-b844-aee556976c8b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When "
            ],
            [
              "k",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " = "
            ],
            [
              "1",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "i",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " = "
            ],
            [
              "2",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "j",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " = "
            ],
            [
              "3",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "distance[i][j]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " is "
            ],
            [
              "-2",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", which is not greater than "
            ],
            [
              "distance[i][k]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " + "
            ],
            [
              "distance[k][j]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " = "
            ],
            [
              "-2",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " + "
            ],
            [
              "0",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " = "
            ],
            [
              "-2",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". So it will remain unchanged. Again, when "
            ],
            [
              "k",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " = "
            ],
            [
              "1",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "i",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " = "
            ],
            [
              "4",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "j",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " = "
            ],
            [
              "2",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "distance[i][j]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " = "
            ],
            [
              "infinity",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", which is greater than "
            ],
            [
              "distance[i][k]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " + "
            ],
            [
              "distance[k][j]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " = "
            ],
            [
              "1",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " + "
            ],
            [
              "3",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " = "
            ],
            [
              "4",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". So we put "
            ],
            [
              "distance[i][j]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " = "
            ],
            [
              "4",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", and we put "
            ],
            [
              "path[i][j]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " = "
            ],
            [
              "path[k][j]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " = "
            ],
            [
              "1",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". What this means is, to go from "
            ],
            [
              "vertex-4",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " to "
            ],
            [
              "vertex-2",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", the path "
            ],
            [
              "4-\u003e1-\u003e2",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " is shorter than the existing path. This is how we populate both matrices. The calculation for each step is shown "
            ],
            [
              "here",
              [
                [
                  "a",
                  "http://imgur.com/a/NU6Hg"
                ]
              ]
            ],
            [
              ". After making necessary changes, our matrices will look like:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When "
          },
          {
            "Text": "k",
            "AttrFlags": 1
          },
          {
            "Text": " = "
          },
          {
            "Text": "1",
            "AttrFlags": 1
          },
          {
            "Text": ", "
          },
          {
            "Text": "i",
            "AttrFlags": 1
          },
          {
            "Text": " = "
          },
          {
            "Text": "2",
            "AttrFlags": 1
          },
          {
            "Text": " and "
          },
          {
            "Text": "j",
            "AttrFlags": 1
          },
          {
            "Text": " = "
          },
          {
            "Text": "3",
            "AttrFlags": 1
          },
          {
            "Text": ", "
          },
          {
            "Text": "distance[i][j]",
            "AttrFlags": 1
          },
          {
            "Text": " is "
          },
          {
            "Text": "-2",
            "AttrFlags": 1
          },
          {
            "Text": ", which is not greater than "
          },
          {
            "Text": "distance[i][k]",
            "AttrFlags": 1
          },
          {
            "Text": " + "
          },
          {
            "Text": "distance[k][j]",
            "AttrFlags": 1
          },
          {
            "Text": " = "
          },
          {
            "Text": "-2",
            "AttrFlags": 1
          },
          {
            "Text": " + "
          },
          {
            "Text": "0",
            "AttrFlags": 1
          },
          {
            "Text": " = "
          },
          {
            "Text": "-2",
            "AttrFlags": 1
          },
          {
            "Text": ". So it will remain unchanged. Again, when "
          },
          {
            "Text": "k",
            "AttrFlags": 1
          },
          {
            "Text": " = "
          },
          {
            "Text": "1",
            "AttrFlags": 1
          },
          {
            "Text": ", "
          },
          {
            "Text": "i",
            "AttrFlags": 1
          },
          {
            "Text": " = "
          },
          {
            "Text": "4",
            "AttrFlags": 1
          },
          {
            "Text": " and "
          },
          {
            "Text": "j",
            "AttrFlags": 1
          },
          {
            "Text": " = "
          },
          {
            "Text": "2",
            "AttrFlags": 1
          },
          {
            "Text": ", "
          },
          {
            "Text": "distance[i][j]",
            "AttrFlags": 1
          },
          {
            "Text": " = "
          },
          {
            "Text": "infinity",
            "AttrFlags": 1
          },
          {
            "Text": ", which is greater than "
          },
          {
            "Text": "distance[i][k]",
            "AttrFlags": 1
          },
          {
            "Text": " + "
          },
          {
            "Text": "distance[k][j]",
            "AttrFlags": 1
          },
          {
            "Text": " = "
          },
          {
            "Text": "1",
            "AttrFlags": 1
          },
          {
            "Text": " + "
          },
          {
            "Text": "3",
            "AttrFlags": 1
          },
          {
            "Text": " = "
          },
          {
            "Text": "4",
            "AttrFlags": 1
          },
          {
            "Text": ". So we put "
          },
          {
            "Text": "distance[i][j]",
            "AttrFlags": 1
          },
          {
            "Text": " = "
          },
          {
            "Text": "4",
            "AttrFlags": 1
          },
          {
            "Text": ", and we put "
          },
          {
            "Text": "path[i][j]",
            "AttrFlags": 1
          },
          {
            "Text": " = "
          },
          {
            "Text": "path[k][j]",
            "AttrFlags": 1
          },
          {
            "Text": " = "
          },
          {
            "Text": "1",
            "AttrFlags": 1
          },
          {
            "Text": ". What this means is, to go from "
          },
          {
            "Text": "vertex-4",
            "AttrFlags": 1
          },
          {
            "Text": " to "
          },
          {
            "Text": "vertex-2",
            "AttrFlags": 1
          },
          {
            "Text": ", the path "
          },
          {
            "Text": "4-\u003e1-\u003e2",
            "AttrFlags": 1
          },
          {
            "Text": " is shorter than the existing path. This is how we populate both matrices. The calculation for each step is shown "
          },
          {
            "Text": "here",
            "Link": "http://imgur.com/a/NU6Hg"
          },
          {
            "Text": ". After making necessary changes, our matrices will look like:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928514644,
        "id": "e783d78f-4372-4adc-b53d-d7d5608b0c74",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928514644,
        "parent_id": "278c23a5-0168-477a-b844-aee556976c8b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "+-----+-----+-----+-----+-----+            +-----+-----+-----+-----+-----+\n|     |  1  |  2  |  3  |  4  |            |     |  1  |  2  |  3  |  4  |\n+-----+-----+-----+-----+-----+            +-----+-----+-----+-----+-----+\n|  1  |  0  |  3  |  1  |  3  |            |  1  |  N  |  1  |  2  |  3  |\n+-----+-----+-----+-----+-----+            +-----+-----+-----+-----+-----+\n|  2  |  1  |  0  | -2  |  0  |            |  2  |  4  |  N  |  2  |  3  |\n+-----+-----+-----+-----+-----+            +-----+-----+-----+-----+-----+\n|  3  |  3  |  6  |  0  |  2  |            |  3  |  4  |  1  |  N  |  3  |\n+-----+-----+-----+-----+-----+            +-----+-----+-----+-----+-----+\n|  4  |  1  |  4  |  2  |  0  |            |  4  |  4  |  1  |  2  |  N  |\n+-----+-----+-----+-----+-----+            +-----+-----+-----+-----+-----+\n            distance                                     path"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "+-----+-----+-----+-----+-----+            +-----+-----+-----+-----+-----+\n|     |  1  |  2  |  3  |  4  |            |     |  1  |  2  |  3  |  4  |\n+-----+-----+-----+-----+-----+            +-----+-----+-----+-----+-----+\n|  1  |  0  |  3  |  1  |  3  |            |  1  |  N  |  1  |  2  |  3  |\n+-----+-----+-----+-----+-----+            +-----+-----+-----+-----+-----+\n|  2  |  1  |  0  | -2  |  0  |            |  2  |  4  |  N  |  2  |  3  |\n+-----+-----+-----+-----+-----+            +-----+-----+-----+-----+-----+\n|  3  |  3  |  6  |  0  |  2  |            |  3  |  4  |  1  |  N  |  3  |\n+-----+-----+-----+-----+-----+            +-----+-----+-----+-----+-----+\n|  4  |  1  |  4  |  2  |  0  |            |  4  |  4  |  1  |  2  |  N  |\n+-----+-----+-----+-----+-----+            +-----+-----+-----+-----+-----+\n            distance                                     path",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928514645,
        "id": "d8ffb110-1e84-4b62-a5df-7a402b777150",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928514645,
        "parent_id": "278c23a5-0168-477a-b844-aee556976c8b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This is our shortest distance matrix. For example, the shortest distance from "
            ],
            [
              "1",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " to "
            ],
            [
              "4",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " is "
            ],
            [
              "3",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " and the shortest distance between "
            ],
            [
              "4",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " to "
            ],
            [
              "3",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " is "
            ],
            [
              "2",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". Our pseudo-code will be:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This is our shortest distance matrix. For example, the shortest distance from "
          },
          {
            "Text": "1",
            "AttrFlags": 1
          },
          {
            "Text": " to "
          },
          {
            "Text": "4",
            "AttrFlags": 1
          },
          {
            "Text": " is "
          },
          {
            "Text": "3",
            "AttrFlags": 1
          },
          {
            "Text": " and the shortest distance between "
          },
          {
            "Text": "4",
            "AttrFlags": 1
          },
          {
            "Text": " to "
          },
          {
            "Text": "3",
            "AttrFlags": 1
          },
          {
            "Text": " is "
          },
          {
            "Text": "2",
            "AttrFlags": 1
          },
          {
            "Text": ". Our pseudo-code will be:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928514645,
        "id": "23bdf8cf-2f58-4094-ab81-cbe57176bb1b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928514645,
        "parent_id": "278c23a5-0168-477a-b844-aee556976c8b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Procedure Floyd-Warshall(Graph):\nfor k from 1 to V     // V denotes the number of vertex\n    for i from 1 to V\n       for j from 1 to V\n           if distance[i][j] \u003e distance[i][k] + distance[k][j]\n               distance[i][j] := distance[i][k] + distance[k][j]\n               path[i][j] := path[k][j]\n           end if\n       end for\n    end for\nend for"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Procedure Floyd-Warshall(Graph):\nfor k from 1 to V     // V denotes the number of vertex\n    for i from 1 to V\n       for j from 1 to V\n           if distance[i][j] \u003e distance[i][k] + distance[k][j]\n               distance[i][j] := distance[i][k] + distance[k][j]\n               path[i][j] := path[k][j]\n           end if\n       end for\n    end for\nend for",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928514645,
        "id": "8b9f07ac-6d26-43cd-acd8-a8810c8eade9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928514645,
        "parent_id": "278c23a5-0168-477a-b844-aee556976c8b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Printing the path:",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Printing the path:",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928514646,
        "id": "4e4797ac-117e-4880-9659-a4f1100439f0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928514646,
        "parent_id": "278c23a5-0168-477a-b844-aee556976c8b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To print the path, we’ll check the "
            ],
            [
              "Path",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " matrix. To print the path from "
            ],
            [
              "u",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " to "
            ],
            [
              "v",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", we’ll start from "
            ],
            [
              "path[u][v]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". We’ll set keep changing "
            ],
            [
              "v",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " = "
            ],
            [
              "path[u][v]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " until we find "
            ],
            [
              "path[u][v]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " = "
            ],
            [
              "u",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " and push every values of "
            ],
            [
              "path[u][v]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " in a stack. After finding "
            ],
            [
              "u",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", we’ll print "
            ],
            [
              "u",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " and start popping items from the stack and print them. This works because the "
            ],
            [
              "path",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " matrix stores the value of the vertex which shares the shortest path to "
            ],
            [
              "v",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " from any other node. The pseudo-code will be:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To print the path, we’ll check the "
          },
          {
            "Text": "Path",
            "AttrFlags": 1
          },
          {
            "Text": " matrix. To print the path from "
          },
          {
            "Text": "u",
            "AttrFlags": 1
          },
          {
            "Text": " to "
          },
          {
            "Text": "v",
            "AttrFlags": 1
          },
          {
            "Text": ", we’ll start from "
          },
          {
            "Text": "path[u][v]",
            "AttrFlags": 1
          },
          {
            "Text": ". We’ll set keep changing "
          },
          {
            "Text": "v",
            "AttrFlags": 1
          },
          {
            "Text": " = "
          },
          {
            "Text": "path[u][v]",
            "AttrFlags": 1
          },
          {
            "Text": " until we find "
          },
          {
            "Text": "path[u][v]",
            "AttrFlags": 1
          },
          {
            "Text": " = "
          },
          {
            "Text": "u",
            "AttrFlags": 1
          },
          {
            "Text": " and push every values of "
          },
          {
            "Text": "path[u][v]",
            "AttrFlags": 1
          },
          {
            "Text": " in a stack. After finding "
          },
          {
            "Text": "u",
            "AttrFlags": 1
          },
          {
            "Text": ", we’ll print "
          },
          {
            "Text": "u",
            "AttrFlags": 1
          },
          {
            "Text": " and start popping items from the stack and print them. This works because the "
          },
          {
            "Text": "path",
            "AttrFlags": 1
          },
          {
            "Text": " matrix stores the value of the vertex which shares the shortest path to "
          },
          {
            "Text": "v",
            "AttrFlags": 1
          },
          {
            "Text": " from any other node. The pseudo-code will be:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928514646,
        "id": "2e1c7d52-5d1f-4a4b-a58b-bd0405189fc4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928514646,
        "parent_id": "278c23a5-0168-477a-b844-aee556976c8b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Procedure PrintPath(source, destination):\ns = Stack()\nS.push(destination)\nwhile Path[source][destination] is not equal to source\n    S.push(Path[source][destination])\n    destination := Path[source][destination]\nend while\nprint -\u003e source\nwhile S is not empty\n    print -\u003e S.pop\nend while"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Procedure PrintPath(source, destination):\ns = Stack()\nS.push(destination)\nwhile Path[source][destination] is not equal to source\n    S.push(Path[source][destination])\n    destination := Path[source][destination]\nend while\nprint -\u003e source\nwhile S is not empty\n    print -\u003e S.pop\nend while",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928514646,
        "id": "19d9a494-ee48-4056-b5fb-02fb6eafe341",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928514646,
        "parent_id": "278c23a5-0168-477a-b844-aee556976c8b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Finding Negative Edge Cycle:",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Finding Negative Edge Cycle:",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928514646,
        "id": "7eda1e24-fe48-4d04-9bdf-3aaaecd7ead2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928514646,
        "parent_id": "278c23a5-0168-477a-b844-aee556976c8b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To find out if there is a negative edge cycle, we’ll need to check the main diagonal of "
            ],
            [
              "distance",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " matrix. If any value on the diagonal is negative, that means there is a negative cycle in the graph."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To find out if there is a negative edge cycle, we’ll need to check the main diagonal of "
          },
          {
            "Text": "distance",
            "AttrFlags": 1
          },
          {
            "Text": " matrix. If any value on the diagonal is negative, that means there is a negative cycle in the graph."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928514647,
        "id": "17a42ef5-e44b-474f-b047-2532803572e7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928514647,
        "parent_id": "278c23a5-0168-477a-b844-aee556976c8b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Complexity:",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Complexity:",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928514647,
        "id": "fa1d43a3-c6cb-4667-a6da-91061e3c1d6e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928514647,
        "parent_id": "278c23a5-0168-477a-b844-aee556976c8b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The complexity of Floyd-Warshall algorithm is "
            ],
            [
              "O(V³)",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " and the space complexity is: "
            ],
            [
              "O(V²)",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The complexity of Floyd-Warshall algorithm is "
          },
          {
            "Text": "O(V³)",
            "AttrFlags": 1
          },
          {
            "Text": " and the space complexity is: "
          },
          {
            "Text": "O(V²)",
            "AttrFlags": 1
          },
          {
            "Text": "."
          }
        ]
      }
    ],
    "title": "All Pair Shortest Path Algorithm",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}