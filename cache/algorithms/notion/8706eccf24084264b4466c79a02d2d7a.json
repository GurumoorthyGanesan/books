{
  "ID": "8706eccf-2408-4264-b446-6c79a02d2d7a",
  "Root": {
    "alive": true,
    "content": [
      "11a18f73-43c6-4de1-b9a2-30028d223a50",
      "ae96fe56-525f-4726-b8c2-cc14b7ed9339",
      "da028af4-8e4a-4464-9178-015f963c6b12",
      "0c984d53-3698-4805-903b-2d39d514f2be",
      "ebe9a16a-8837-48d9-8908-9ac41f2354eb",
      "597fcf8f-0db1-463b-9bfa-421b0447c675",
      "63270d97-d536-4866-8293-6a81e1ace86e",
      "13d48bb8-586d-4fb1-8461-0e7fa4b3ebc4",
      "72e7156c-ab57-4de6-8f41-e2c9307d1238",
      "d1898859-3aa7-45ef-bdbe-ac195c68c4cc",
      "ca7726d5-9ece-498e-a53c-7f8b453a5d27",
      "2c82a487-09d6-4fb5-b0c9-23f0b67a18a7",
      "84330d8c-61f7-40da-9532-748f7dd70af8",
      "3e7fd60a-f20f-4aa7-89e8-b960d60f08c6"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551928101876,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "8706eccf-2408-4264-b446-6c79a02d2d7a",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551928101876,
    "parent_id": "adfec1cf-4941-4483-b98d-9550de7e3916",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Big-O Notation"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928101866,
        "id": "11a18f73-43c6-4de1-b9a2-30028d223a50",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928101866,
        "parent_id": "8706eccf-2408-4264-b446-6c79a02d2d7a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Remarks"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Remarks"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928101869,
        "id": "ae96fe56-525f-4726-b8c2-cc14b7ed9339",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928101869,
        "parent_id": "8706eccf-2408-4264-b446-6c79a02d2d7a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Definition",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Definition",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928101870,
        "id": "da028af4-8e4a-4464-9178-015f963c6b12",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928101870,
        "parent_id": "8706eccf-2408-4264-b446-6c79a02d2d7a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The Big-O notation is at its heart a mathematical notation, used to compare the rate of convergence of functions. Let "
            ],
            [
              "n -\u003e f(n)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "n -\u003e g(n)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " be functions defined over the natural numbers. Then we say that "
            ],
            [
              "f = O(g)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " if and only if "
            ],
            [
              "f(n)/g(n)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is bounded when n approaches infinity. In other words, "
            ],
            [
              "f = O(g)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " if and only if there exists a constant A, such that for all n, "
            ],
            [
              "f(n)/g(n) \u003c= A",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The Big-O notation is at its heart a mathematical notation, used to compare the rate of convergence of functions. Let "
          },
          {
            "Text": "n -\u003e f(n)",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "n -\u003e g(n)",
            "AttrFlags": 2
          },
          {
            "Text": " be functions defined over the natural numbers. Then we say that "
          },
          {
            "Text": "f = O(g)",
            "AttrFlags": 2
          },
          {
            "Text": " if and only if "
          },
          {
            "Text": "f(n)/g(n)",
            "AttrFlags": 2
          },
          {
            "Text": " is bounded when n approaches infinity. In other words, "
          },
          {
            "Text": "f = O(g)",
            "AttrFlags": 2
          },
          {
            "Text": " if and only if there exists a constant A, such that for all n, "
          },
          {
            "Text": "f(n)/g(n) \u003c= A",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928101870,
        "id": "0c984d53-3698-4805-903b-2d39d514f2be",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928101870,
        "parent_id": "8706eccf-2408-4264-b446-6c79a02d2d7a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Actually the scope of the Big-O notation is a bit wider in mathematics but for simplicity I have narrowed it to what is used in algorithm complexity analysis : functions defined on the naturals, that have non-zero values, and the case of n growing to infinity."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Actually the scope of the Big-O notation is a bit wider in mathematics but for simplicity I have narrowed it to what is used in algorithm complexity analysis : functions defined on the naturals, that have non-zero values, and the case of n growing to infinity."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928101870,
        "id": "ebe9a16a-8837-48d9-8908-9ac41f2354eb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928101870,
        "parent_id": "8706eccf-2408-4264-b446-6c79a02d2d7a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "What does it mean ?",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "What does it mean ?",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928101870,
        "id": "597fcf8f-0db1-463b-9bfa-421b0447c675",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928101870,
        "parent_id": "8706eccf-2408-4264-b446-6c79a02d2d7a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Let’s take the case of "
            ],
            [
              "f(n) = 100n^2 + 10n + 1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "g(n) = n^2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". It is quite clear that both of these functions tend to infinity as n tends to infinity. But sometimes knowing the limit is not enough, and we also want to know the "
            ],
            [
              "speed",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " at which the functions approach their limit. Notions like Big-O help compare and classify functions by their speed of convergence."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Let’s take the case of "
          },
          {
            "Text": "f(n) = 100n^2 + 10n + 1",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "g(n) = n^2",
            "AttrFlags": 2
          },
          {
            "Text": ". It is quite clear that both of these functions tend to infinity as n tends to infinity. But sometimes knowing the limit is not enough, and we also want to know the "
          },
          {
            "Text": "speed",
            "AttrFlags": 4
          },
          {
            "Text": " at which the functions approach their limit. Notions like Big-O help compare and classify functions by their speed of convergence."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928101871,
        "id": "63270d97-d536-4866-8293-6a81e1ace86e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928101871,
        "parent_id": "8706eccf-2408-4264-b446-6c79a02d2d7a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Let’s find out if "
            ],
            [
              "f = O(g)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " by applying the definition. We have "
            ],
            [
              "f(n)/g(n) = 100 + 10/n + 1/n^2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Since "
            ],
            [
              "10/n",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is 10 when n is 1 and is decreasing, and since "
            ],
            [
              "1/n^2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is 1 when n is 1 and is also decreasing, we have ̀"
            ],
            [
              "f(n)/g(n) \u003c= 100 + 10 + 1 = 111",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". The definition is satisfied because we have found a bound of "
            ],
            [
              "f(n)/g(n)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (111) and so "
            ],
            [
              "f = O(g)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (we say that f is a Big-O of "
            ],
            [
              "n^2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ")."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Let’s find out if "
          },
          {
            "Text": "f = O(g)",
            "AttrFlags": 2
          },
          {
            "Text": " by applying the definition. We have "
          },
          {
            "Text": "f(n)/g(n) = 100 + 10/n + 1/n^2",
            "AttrFlags": 2
          },
          {
            "Text": ". Since "
          },
          {
            "Text": "10/n",
            "AttrFlags": 2
          },
          {
            "Text": " is 10 when n is 1 and is decreasing, and since "
          },
          {
            "Text": "1/n^2",
            "AttrFlags": 2
          },
          {
            "Text": " is 1 when n is 1 and is also decreasing, we have ̀"
          },
          {
            "Text": "f(n)/g(n) \u003c= 100 + 10 + 1 = 111",
            "AttrFlags": 2
          },
          {
            "Text": ". The definition is satisfied because we have found a bound of "
          },
          {
            "Text": "f(n)/g(n)",
            "AttrFlags": 2
          },
          {
            "Text": " (111) and so "
          },
          {
            "Text": "f = O(g)",
            "AttrFlags": 2
          },
          {
            "Text": " (we say that f is a Big-O of "
          },
          {
            "Text": "n^2",
            "AttrFlags": 2
          },
          {
            "Text": ")."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928101874,
        "id": "13d48bb8-586d-4fb1-8461-0e7fa4b3ebc4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928101874,
        "parent_id": "8706eccf-2408-4264-b446-6c79a02d2d7a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This means that f tends to infinity at approximately the same speed as g. Now this may seem like a strange thing to say, because what we have found is that f is at most 111 times bigger than g, or in other words when g grows by 1, f grows by at most 111. It may seem that growing 111 times faster is not “approximately the same speed”. And indeed the Big-O notation is not a very precise way to classify function convergence speed, which is why in mathematics we use the "
            ],
            [
              "equivalence relationship",
              [
                [
                  "a",
                  "https://en.wikipedia.org/wiki/Asymptotic_analysis"
                ]
              ]
            ],
            [
              " when we want a precise estimation of speed. But for the purposes of separating algorithms in large speed classes, Big-O is enough. We don’t need to separate functions that grow a fixed number of times faster than each other, but only functions that grow "
            ],
            [
              "infinitely",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " faster than each other. For instance if we take "
            ],
            [
              "h(n) = n^2*log(n)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", we see that "
            ],
            [
              "h(n)/g(n) = log(n)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " which tends to infinity with n so h is "
            ],
            [
              "not",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " O(n^2), because h grows "
            ],
            [
              "infinitely",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " faster than n^2."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This means that f tends to infinity at approximately the same speed as g. Now this may seem like a strange thing to say, because what we have found is that f is at most 111 times bigger than g, or in other words when g grows by 1, f grows by at most 111. It may seem that growing 111 times faster is not “approximately the same speed”. And indeed the Big-O notation is not a very precise way to classify function convergence speed, which is why in mathematics we use the "
          },
          {
            "Text": "equivalence relationship",
            "Link": "https://en.wikipedia.org/wiki/Asymptotic_analysis"
          },
          {
            "Text": " when we want a precise estimation of speed. But for the purposes of separating algorithms in large speed classes, Big-O is enough. We don’t need to separate functions that grow a fixed number of times faster than each other, but only functions that grow "
          },
          {
            "Text": "infinitely",
            "AttrFlags": 4
          },
          {
            "Text": " faster than each other. For instance if we take "
          },
          {
            "Text": "h(n) = n^2*log(n)",
            "AttrFlags": 2
          },
          {
            "Text": ", we see that "
          },
          {
            "Text": "h(n)/g(n) = log(n)",
            "AttrFlags": 2
          },
          {
            "Text": " which tends to infinity with n so h is "
          },
          {
            "Text": "not",
            "AttrFlags": 4
          },
          {
            "Text": " O(n^2), because h grows "
          },
          {
            "Text": "infinitely",
            "AttrFlags": 4
          },
          {
            "Text": " faster than n^2."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928101874,
        "id": "72e7156c-ab57-4de6-8f41-e2c9307d1238",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928101874,
        "parent_id": "8706eccf-2408-4264-b446-6c79a02d2d7a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Now I need to make a side note : you might have noticed that if "
            ],
            [
              "f = O(g)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "g = O(h)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", then "
            ],
            [
              "f = O(h)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". For instance in our case, we have "
            ],
            [
              "f = O(n^3)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", and "
            ],
            [
              "f = O(n^4)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "… In algorithm complexity analysis, we frequently say "
            ],
            [
              "f = O(g)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to mean that "
            ],
            [
              "f = O(g)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "and",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "g = O(f)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", which can be understood as “g is the smallest Big-O for f”. In mathematics we say that such functions are Big-Thetas of each other."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Now I need to make a side note : you might have noticed that if "
          },
          {
            "Text": "f = O(g)",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "g = O(h)",
            "AttrFlags": 2
          },
          {
            "Text": ", then "
          },
          {
            "Text": "f = O(h)",
            "AttrFlags": 2
          },
          {
            "Text": ". For instance in our case, we have "
          },
          {
            "Text": "f = O(n^3)",
            "AttrFlags": 2
          },
          {
            "Text": ", and "
          },
          {
            "Text": "f = O(n^4)",
            "AttrFlags": 2
          },
          {
            "Text": "… In algorithm complexity analysis, we frequently say "
          },
          {
            "Text": "f = O(g)",
            "AttrFlags": 2
          },
          {
            "Text": " to mean that "
          },
          {
            "Text": "f = O(g)",
            "AttrFlags": 2
          },
          {
            "Text": " "
          },
          {
            "Text": "and",
            "AttrFlags": 4
          },
          {
            "Text": " "
          },
          {
            "Text": "g = O(f)",
            "AttrFlags": 2
          },
          {
            "Text": ", which can be understood as “g is the smallest Big-O for f”. In mathematics we say that such functions are Big-Thetas of each other."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928101875,
        "id": "d1898859-3aa7-45ef-bdbe-ac195c68c4cc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928101875,
        "parent_id": "8706eccf-2408-4264-b446-6c79a02d2d7a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "How is it used ?",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "How is it used ?",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928101875,
        "id": "ca7726d5-9ece-498e-a53c-7f8b453a5d27",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928101875,
        "parent_id": "8706eccf-2408-4264-b446-6c79a02d2d7a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When comparing algorithm performance, we are interested in the number of operations that an algorithm performs. This is called "
            ],
            [
              "time complexity",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ". In this model, we consider that each basic operation (addition, multiplication, comparison, assignment, etc.) takes a fixed amount of time, and we count the number of such operations. We can usually express this number as a function of the size of the input, which we call n. And sadly, this number usually grows to infinity with n (if it doesn’t, we say that the algorithm is O(1)). We separate our algorithms in big speed classes defined by Big-O : when we speak about a “O(n^2) algorithm”, we mean that the number of operations it performs, expressed as a function of n, is a O(n^2). This says that our algorithm is approximately as fast as an algorithm that would do a number of operations equal to the square of the size of its input, "
            ],
            [
              "or faster",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ". The “or faster” part is there because I used Big-O instead of Big-Theta, but usually people will say Big-O to mean Big-Theta."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When comparing algorithm performance, we are interested in the number of operations that an algorithm performs. This is called "
          },
          {
            "Text": "time complexity",
            "AttrFlags": 4
          },
          {
            "Text": ". In this model, we consider that each basic operation (addition, multiplication, comparison, assignment, etc.) takes a fixed amount of time, and we count the number of such operations. We can usually express this number as a function of the size of the input, which we call n. And sadly, this number usually grows to infinity with n (if it doesn’t, we say that the algorithm is O(1)). We separate our algorithms in big speed classes defined by Big-O : when we speak about a “O(n^2) algorithm”, we mean that the number of operations it performs, expressed as a function of n, is a O(n^2). This says that our algorithm is approximately as fast as an algorithm that would do a number of operations equal to the square of the size of its input, "
          },
          {
            "Text": "or faster",
            "AttrFlags": 4
          },
          {
            "Text": ". The “or faster” part is there because I used Big-O instead of Big-Theta, but usually people will say Big-O to mean Big-Theta."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928101875,
        "id": "2c82a487-09d6-4fb5-b0c9-23f0b67a18a7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928101875,
        "parent_id": "8706eccf-2408-4264-b446-6c79a02d2d7a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When counting operations, we usually consider the worst case: for instance if we have a loop that can run at most n times and that contains 5 operations, the number of operations we count is 5n. It is also possible to consider the average case complexity."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When counting operations, we usually consider the worst case: for instance if we have a loop that can run at most n times and that contains 5 operations, the number of operations we count is 5n. It is also possible to consider the average case complexity."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928101875,
        "id": "84330d8c-61f7-40da-9532-748f7dd70af8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928101875,
        "parent_id": "8706eccf-2408-4264-b446-6c79a02d2d7a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Quick note : a fast algorithm is one that performs few operations, so if the number of operations grows to infinity "
            ],
            [
              "faster",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ", then the algorithm is "
            ],
            [
              "slower",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ": O(n) is better than O(n^2)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Quick note : a fast algorithm is one that performs few operations, so if the number of operations grows to infinity "
          },
          {
            "Text": "faster",
            "AttrFlags": 4
          },
          {
            "Text": ", then the algorithm is "
          },
          {
            "Text": "slower",
            "AttrFlags": 4
          },
          {
            "Text": ": O(n) is better than O(n^2)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928101876,
        "id": "3e7fd60a-f20f-4aa7-89e8-b960d60f08c6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928101876,
        "parent_id": "8706eccf-2408-4264-b446-6c79a02d2d7a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We are also sometimes interested in the "
            ],
            [
              "space complexity",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " of our algorithm. For this we consider the number of bytes in memory occupied by the algorithm as a function of the size of the input, and use Big-O the same way."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "We are also sometimes interested in the "
          },
          {
            "Text": "space complexity",
            "AttrFlags": 4
          },
          {
            "Text": " of our algorithm. For this we consider the number of bytes in memory occupied by the algorithm as a function of the size of the input, and use Big-O the same way."
          }
        ]
      }
    ],
    "title": "Big-O Notation",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}