{
  "ID": "5a1b0f6c-f4c2-40f3-8568-eb694115e087",
  "Root": {
    "alive": true,
    "content": [
      "bfd78d70-146a-4930-8b40-c30fd4edee48",
      "515e99d2-5982-4b85-b3ae-ae164f066b85",
      "c4a1042d-28e1-4a97-b44c-cfd35f69ffee",
      "3f8e290a-e578-4528-b6d7-4e9114f9f70c",
      "523c358b-2135-49cc-9918-386c4c4484d2",
      "9ef58cb7-ae4f-4b02-a85c-deae764a51ef"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551928103945,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "5a1b0f6c-f4c2-40f3-8568-eb694115e087",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551928103945,
    "parent_id": "adfec1cf-4941-4483-b98d-9550de7e3916",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "A Nested Loop"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928103941,
        "id": "bfd78d70-146a-4930-8b40-c30fd4edee48",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928103941,
        "parent_id": "5a1b0f6c-f4c2-40f3-8568-eb694115e087",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The following function checks if an array has any duplicates by taking each element, then iterating over the whole array to see if the element is there"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The following function checks if an array has any duplicates by taking each element, then iterating over the whole array to see if the element is there"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928103943,
        "id": "515e99d2-5982-4b85-b3ae-ae164f066b85",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928103943,
        "parent_id": "5a1b0f6c-f4c2-40f3-8568-eb694115e087",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "_Bool contains_duplicates(const int *array, size_t len) {\n    for (int i = 0; i \u003c len - 1; i++) {\n        for (int j = 0; j \u003c len; j++) {\n            if (i != j \u0026\u0026 array[i] == array[j]) {\n                return 1;\n            }\n        }\n    }\n    return 0;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "_Bool contains_duplicates(const int *array, size_t len) {\n    for (int i = 0; i \u003c len - 1; i++) {\n        for (int j = 0; j \u003c len; j++) {\n            if (i != j \u0026\u0026 array[i] == array[j]) {\n                return 1;\n            }\n        }\n    }\n    return 0;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928103944,
        "id": "c4a1042d-28e1-4a97-b44c-cfd35f69ffee",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928103944,
        "parent_id": "5a1b0f6c-f4c2-40f3-8568-eb694115e087",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The inner loop performs at each iteration a number of operations that is constant with "
            ],
            [
              "n",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". The outer loop also does a few constant operations, and runs the inner loop "
            ],
            [
              "n",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " times. The outer loop itself is run "
            ],
            [
              "n",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " times. So the operations inside the inner loop are run "
            ],
            [
              "n^2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " times, the operations in the outer loop are run "
            ],
            [
              "n",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " times, and the assignment to "
            ],
            [
              "i",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is done one time. Thus, the complexity will be something like "
            ],
            [
              "an^2 + bn + c",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", and since the highest term is "
            ],
            [
              "n^2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", the O notation is "
            ],
            [
              "O(n^2)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The inner loop performs at each iteration a number of operations that is constant with "
          },
          {
            "Text": "n",
            "AttrFlags": 2
          },
          {
            "Text": ". The outer loop also does a few constant operations, and runs the inner loop "
          },
          {
            "Text": "n",
            "AttrFlags": 2
          },
          {
            "Text": " times. The outer loop itself is run "
          },
          {
            "Text": "n",
            "AttrFlags": 2
          },
          {
            "Text": " times. So the operations inside the inner loop are run "
          },
          {
            "Text": "n^2",
            "AttrFlags": 2
          },
          {
            "Text": " times, the operations in the outer loop are run "
          },
          {
            "Text": "n",
            "AttrFlags": 2
          },
          {
            "Text": " times, and the assignment to "
          },
          {
            "Text": "i",
            "AttrFlags": 2
          },
          {
            "Text": " is done one time. Thus, the complexity will be something like "
          },
          {
            "Text": "an^2 + bn + c",
            "AttrFlags": 2
          },
          {
            "Text": ", and since the highest term is "
          },
          {
            "Text": "n^2",
            "AttrFlags": 2
          },
          {
            "Text": ", the O notation is "
          },
          {
            "Text": "O(n^2)",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928103944,
        "id": "3f8e290a-e578-4528-b6d7-4e9114f9f70c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928103944,
        "parent_id": "5a1b0f6c-f4c2-40f3-8568-eb694115e087",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As you may have noticed, we can improve the algorithm by avoiding doing the same comparisons multiple times. We can start from "
            ],
            [
              "i + 1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in the inner loop, because all elements before it will already have been checked against all array elements, including the one at index "
            ],
            [
              "i + 1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". This allows us to drop the "
            ],
            [
              "i == j",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " check."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "As you may have noticed, we can improve the algorithm by avoiding doing the same comparisons multiple times. We can start from "
          },
          {
            "Text": "i + 1",
            "AttrFlags": 2
          },
          {
            "Text": " in the inner loop, because all elements before it will already have been checked against all array elements, including the one at index "
          },
          {
            "Text": "i + 1",
            "AttrFlags": 2
          },
          {
            "Text": ". This allows us to drop the "
          },
          {
            "Text": "i == j",
            "AttrFlags": 2
          },
          {
            "Text": " check."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928103945,
        "id": "523c358b-2135-49cc-9918-386c4c4484d2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928103945,
        "parent_id": "5a1b0f6c-f4c2-40f3-8568-eb694115e087",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "_Bool faster_contains_duplicates(const int *array, size_t len) {\n    for (int i = 0; i \u003c len - 1; i++) {\n        for (int j = i + 1; j \u003c len; j++) {\n            if (array[i] == array[j]) {\n                return 1;\n            }\n        }\n    }\n    return 0;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "_Bool faster_contains_duplicates(const int *array, size_t len) {\n    for (int i = 0; i \u003c len - 1; i++) {\n        for (int j = i + 1; j \u003c len; j++) {\n            if (array[i] == array[j]) {\n                return 1;\n            }\n        }\n    }\n    return 0;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928103945,
        "id": "9ef58cb7-ae4f-4b02-a85c-deae764a51ef",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928103945,
        "parent_id": "5a1b0f6c-f4c2-40f3-8568-eb694115e087",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Obviously, this second version does less operations and so is more efficient. How does that translate to Big-O notation? Well, now the inner loop body is run "
            ],
            [
              "1 + 2 + ... + n - 1 = n(n-1)/2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " times. This is "
            ],
            [
              "still",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " a polynomial of the second degree, and so is still only "
            ],
            [
              "O(n^2)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". We have clearly lowered the complexity, since we roughly divided by 2 the number of operations that we are doing, but we are still in the same complexity "
            ],
            [
              "class",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " as defined by Big-O. In order to lower the complexity to a lower class we would need to divide the number of operations by something that "
            ],
            [
              "tends to infinity",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " with "
            ],
            [
              "n",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Obviously, this second version does less operations and so is more efficient. How does that translate to Big-O notation? Well, now the inner loop body is run "
          },
          {
            "Text": "1 + 2 + ... + n - 1 = n(n-1)/2",
            "AttrFlags": 2
          },
          {
            "Text": " times. This is "
          },
          {
            "Text": "still",
            "AttrFlags": 4
          },
          {
            "Text": " a polynomial of the second degree, and so is still only "
          },
          {
            "Text": "O(n^2)",
            "AttrFlags": 2
          },
          {
            "Text": ". We have clearly lowered the complexity, since we roughly divided by 2 the number of operations that we are doing, but we are still in the same complexity "
          },
          {
            "Text": "class",
            "AttrFlags": 4
          },
          {
            "Text": " as defined by Big-O. In order to lower the complexity to a lower class we would need to divide the number of operations by something that "
          },
          {
            "Text": "tends to infinity",
            "AttrFlags": 4
          },
          {
            "Text": " with "
          },
          {
            "Text": "n",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      }
    ],
    "title": "A Nested Loop",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}