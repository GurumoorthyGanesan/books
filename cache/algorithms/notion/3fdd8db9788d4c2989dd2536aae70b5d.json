{
  "ID": "3fdd8db9-788d-4c29-89dd-2536aae70b5d",
  "Root": {
    "alive": true,
    "content": [
      "34d23e76-36fd-4c2c-8574-654eab7bbafd",
      "a718701e-eca2-429f-8a2f-079975a7660d",
      "6d18f621-a002-4d50-bd04-10fd370e4663",
      "6036b607-7d42-4e79-8216-611e9b1c48ed",
      "441157ff-3ed3-4d8c-9141-91100e167d2e",
      "ae246631-062e-47f1-93d6-24ed0cdf08a9",
      "52b2312a-604e-4362-8dc1-275035857229",
      "3950d50f-e4a4-4dd0-9120-226de2563611",
      "8a633c2e-6461-4f0b-824e-fe76c4fc4336",
      "cd5c7aec-3f1d-444a-a28f-87c1a01709e1",
      "44e97213-289b-475a-b232-43c6b169bdc5",
      "784e0b35-4bcf-43b2-9f84-4cab40594818",
      "69555f0d-ad9f-40a1-803d-a362cb1719a8",
      "87ddaa07-c8c4-4f25-87be-a9df20eeb0b1",
      "c306174d-69de-46ad-8581-e956c9abcc6a",
      "99090c1b-fd05-45df-9aa5-3df31860832c",
      "dceae946-3f99-4d82-9d3a-3a4a55f83953",
      "795636fd-2688-4573-b4ca-b3e4a26deeec",
      "a80a4c34-187a-4a04-b7f3-cb820f4aeeb2",
      "90c6dcab-6623-495b-a251-891a8d8e8e00"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551928092800,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "3fdd8db9-788d-4c29-89dd-2536aae70b5d",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551928092800,
    "parent_id": "c8277fc4-6841-459e-81f4-c90a99fd83fa",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Binary Search"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928092796,
        "id": "34d23e76-36fd-4c2c-8574-654eab7bbafd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928092796,
        "parent_id": "3fdd8db9-788d-4c29-89dd-2536aae70b5d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Introduction"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Introduction"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928092796,
        "id": "a718701e-eca2-429f-8a2f-079975a7660d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928092796,
        "parent_id": "3fdd8db9-788d-4c29-89dd-2536aae70b5d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Binary Search is a Divide and Conquer search algorithm. It uses "
            ],
            [
              "O(log n)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " time to find the location of an element in a search space where "
            ],
            [
              "n",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is the size of the search space."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Binary Search is a Divide and Conquer search algorithm. It uses "
          },
          {
            "Text": "O(log n)",
            "AttrFlags": 2
          },
          {
            "Text": " time to find the location of an element in a search space where "
          },
          {
            "Text": "n",
            "AttrFlags": 2
          },
          {
            "Text": " is the size of the search space."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928092796,
        "id": "6d18f621-a002-4d50-bd04-10fd370e4663",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928092796,
        "parent_id": "3fdd8db9-788d-4c29-89dd-2536aae70b5d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Binary Search works by halving the search space at each iteration after comparing the target value to the middle value of the search space."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Binary Search works by halving the search space at each iteration after comparing the target value to the middle value of the search space."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928092797,
        "id": "6036b607-7d42-4e79-8216-611e9b1c48ed",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928092797,
        "parent_id": "3fdd8db9-788d-4c29-89dd-2536aae70b5d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To use Binary Search, the search space must be ordered (sorted) in some way. Duplicate entries (ones that compare as equal according to the comparison function) cannot be distinguished, though they don’t violate the Binary Search property."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To use Binary Search, the search space must be ordered (sorted) in some way. Duplicate entries (ones that compare as equal according to the comparison function) cannot be distinguished, though they don’t violate the Binary Search property."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928092797,
        "id": "441157ff-3ed3-4d8c-9141-91100e167d2e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928092797,
        "parent_id": "3fdd8db9-788d-4c29-89dd-2536aae70b5d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Conventionally, we use less than (\u003c) as the comparison function. If a \u003c b, it will return true. if a is not less than b and b is not less than a, a and b are equal."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Conventionally, we use less than (\u003c) as the comparison function. If a \u003c b, it will return true. if a is not less than b and b is not less than a, a and b are equal."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928092797,
        "id": "ae246631-062e-47f1-93d6-24ed0cdf08a9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928092797,
        "parent_id": "3fdd8db9-788d-4c29-89dd-2536aae70b5d",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928092797,
        "id": "52b2312a-604e-4362-8dc1-275035857229",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928092797,
        "parent_id": "3fdd8db9-788d-4c29-89dd-2536aae70b5d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Example Question"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Example Question"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928092797,
        "id": "3950d50f-e4a4-4dd0-9120-226de2563611",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928092797,
        "parent_id": "3fdd8db9-788d-4c29-89dd-2536aae70b5d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You are an economist, a pretty bad one though. You are given the task of finding the equilibrium price (that is, the price where supply = demand) for rice."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You are an economist, a pretty bad one though. You are given the task of finding the equilibrium price (that is, the price where supply = demand) for rice."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928092797,
        "id": "8a633c2e-6461-4f0b-824e-fe76c4fc4336",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928092797,
        "parent_id": "3fdd8db9-788d-4c29-89dd-2536aae70b5d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Remember the higher a price is set, the larger the supply and the lesser the demand",
              [
                [
                  "i"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Remember the higher a price is set, the larger the supply and the lesser the demand",
            "AttrFlags": 4
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928092798,
        "id": "cd5c7aec-3f1d-444a-a28f-87c1a01709e1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928092798,
        "parent_id": "3fdd8db9-788d-4c29-89dd-2536aae70b5d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As your company is very efficient at calculating market forces, you can instantly get the supply and demand in units of rice when the price of rice is set at a certain price "
            ],
            [
              "p",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "As your company is very efficient at calculating market forces, you can instantly get the supply and demand in units of rice when the price of rice is set at a certain price "
          },
          {
            "Text": "p",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928092798,
        "id": "44e97213-289b-475a-b232-43c6b169bdc5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928092798,
        "parent_id": "3fdd8db9-788d-4c29-89dd-2536aae70b5d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Your boss wants the equilibrium price ASAP, but tells you that the equilibrium price can be a positive integer that is at most "
            ],
            [
              "10^17",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and there is guaranteed to be exactly 1 positive integer solution in the range. So get going with your job before you lose it!"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Your boss wants the equilibrium price ASAP, but tells you that the equilibrium price can be a positive integer that is at most "
          },
          {
            "Text": "10^17",
            "AttrFlags": 2
          },
          {
            "Text": " and there is guaranteed to be exactly 1 positive integer solution in the range. So get going with your job before you lose it!"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928092798,
        "id": "784e0b35-4bcf-43b2-9f84-4cab40594818",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928092798,
        "parent_id": "3fdd8db9-788d-4c29-89dd-2536aae70b5d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You are allowed to call functions "
            ],
            [
              "getSupply(k)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "getDemand(k)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", which will do exactly what is stated in the problem."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You are allowed to call functions "
          },
          {
            "Text": "getSupply(k)",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "getDemand(k)",
            "AttrFlags": 2
          },
          {
            "Text": ", which will do exactly what is stated in the problem."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928092798,
        "id": "69555f0d-ad9f-40a1-803d-a362cb1719a8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928092798,
        "parent_id": "3fdd8db9-788d-4c29-89dd-2536aae70b5d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Example Explanation"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Example Explanation"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928092798,
        "id": "87ddaa07-c8c4-4f25-87be-a9df20eeb0b1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928092798,
        "parent_id": "3fdd8db9-788d-4c29-89dd-2536aae70b5d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Here our search space is from "
            ],
            [
              "1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to "
            ],
            [
              "10^17",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Thus a linear search is infeasible."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Here our search space is from "
          },
          {
            "Text": "1",
            "AttrFlags": 2
          },
          {
            "Text": " to "
          },
          {
            "Text": "10^17",
            "AttrFlags": 2
          },
          {
            "Text": ". Thus a linear search is infeasible."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928092799,
        "id": "c306174d-69de-46ad-8581-e956c9abcc6a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928092799,
        "parent_id": "3fdd8db9-788d-4c29-89dd-2536aae70b5d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "However, notice that as the "
            ],
            [
              "k",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " goes up, "
            ],
            [
              "getSupply(k)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " increases and "
            ],
            [
              "getDemand(k)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " decreases. Thus, for any "
            ],
            [
              "x \u003e y",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "getSupply(x) - getDemand(x) \u003e getSupply(y) - getDemand(y)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Therefore, this search space is monotonic and we can use Binary Search."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "However, notice that as the "
          },
          {
            "Text": "k",
            "AttrFlags": 2
          },
          {
            "Text": " goes up, "
          },
          {
            "Text": "getSupply(k)",
            "AttrFlags": 2
          },
          {
            "Text": " increases and "
          },
          {
            "Text": "getDemand(k)",
            "AttrFlags": 2
          },
          {
            "Text": " decreases. Thus, for any "
          },
          {
            "Text": "x \u003e y",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "getSupply(x) - getDemand(x) \u003e getSupply(y) - getDemand(y)",
            "AttrFlags": 2
          },
          {
            "Text": ". Therefore, this search space is monotonic and we can use Binary Search."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928092799,
        "id": "99090c1b-fd05-45df-9aa5-3df31860832c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928092799,
        "parent_id": "3fdd8db9-788d-4c29-89dd-2536aae70b5d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The following psuedocode demonstrates the usage of Binary Search:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The following psuedocode demonstrates the usage of Binary Search:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928092799,
        "id": "dceae946-3f99-4d82-9d3a-3a4a55f83953",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928092799,
        "parent_id": "3fdd8db9-788d-4c29-89dd-2536aae70b5d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "high = 100000000000000000     \u003c- Upper bound of search space\nlow = 1                       \u003c- Lower bound of search space\nwhile high - low \u003e 1\n    mid = (high + low) / 2    \u003c- Take the middle value\n    supply = getSupply(mid)  \n    demand = getDemand(mid)\n    if supply \u003e demand        \n        high = mid             \u003c- Solution is in lower half of search space\n    else if demand \u003e supply\n        low = mid              \u003c- Solution is in upper half of search space\n    else                       \u003c- supply==demand condition\n        return mid             \u003c- Found solution"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "high = 100000000000000000     \u003c- Upper bound of search space\nlow = 1                       \u003c- Lower bound of search space\nwhile high - low \u003e 1\n    mid = (high + low) / 2    \u003c- Take the middle value\n    supply = getSupply(mid)  \n    demand = getDemand(mid)\n    if supply \u003e demand        \n        high = mid             \u003c- Solution is in lower half of search space\n    else if demand \u003e supply\n        low = mid              \u003c- Solution is in upper half of search space\n    else                       \u003c- supply==demand condition\n        return mid             \u003c- Found solution",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928092800,
        "id": "795636fd-2688-4573-b4ca-b3e4a26deeec",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928092800,
        "parent_id": "3fdd8db9-788d-4c29-89dd-2536aae70b5d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This algorithm runs in "
            ],
            [
              "~O(log 10^17)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " time. This can be generalized to "
            ],
            [
              "~O(log S)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " time where S is the size of the search space since at every iteration of the "
            ],
            [
              "while",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " loop, we halved the search space ("
            ],
            [
              "from [low:high] to either [low:mid] or [mid:high]",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ")."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This algorithm runs in "
          },
          {
            "Text": "~O(log 10^17)",
            "AttrFlags": 2
          },
          {
            "Text": " time. This can be generalized to "
          },
          {
            "Text": "~O(log S)",
            "AttrFlags": 2
          },
          {
            "Text": " time where S is the size of the search space since at every iteration of the "
          },
          {
            "Text": "while",
            "AttrFlags": 2
          },
          {
            "Text": " loop, we halved the search space ("
          },
          {
            "Text": "from [low:high] to either [low:mid] or [mid:high]",
            "AttrFlags": 4
          },
          {
            "Text": ")."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928092800,
        "id": "a80a4c34-187a-4a04-b7f3-cb820f4aeeb2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928092800,
        "parent_id": "3fdd8db9-788d-4c29-89dd-2536aae70b5d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "C Implementation of Binary Search with Recursion",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "C Implementation of Binary Search with Recursion",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928092800,
        "id": "90c6dcab-6623-495b-a251-891a8d8e8e00",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928092800,
        "parent_id": "3fdd8db9-788d-4c29-89dd-2536aae70b5d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int binsearch(int a[], int x, int low, int high) {\n    int mid;\n\n    if (low \u003e high)\n      return -1;\n\n    mid = (low + high) / 2;\n\n    if (x == a[mid]) {\n        return (mid);\n    } else \n    if (x \u003c a[mid]) {\n        binsearch(a, x, low, mid - 1);\n    } else {\n        binsearch(a, x, mid + 1, high);\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int binsearch(int a[], int x, int low, int high) {\n    int mid;\n\n    if (low \u003e high)\n      return -1;\n\n    mid = (low + high) / 2;\n\n    if (x == a[mid]) {\n        return (mid);\n    } else \n    if (x \u003c a[mid]) {\n        binsearch(a, x, low, mid - 1);\n    } else {\n        binsearch(a, x, mid + 1, high);\n    }\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "Binary Search",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}