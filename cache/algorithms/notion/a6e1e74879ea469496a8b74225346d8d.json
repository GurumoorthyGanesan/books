{
  "ID": "a6e1e748-79ea-4694-96a8-b74225346d8d",
  "Root": {
    "alive": true,
    "content": [
      "f1580f2d-9169-4d12-8fbe-03ab8f00a42b",
      "352e8994-14ea-4a84-b9ae-8369d96d3330",
      "5029fc3f-7733-45d4-bf59-473ae9f4c4d1",
      "1adb66a8-a7d6-4f77-a42e-652d0c84d232",
      "17063ea6-6435-44ed-b44e-cad3c1b138fc",
      "ddc3e9f5-a66f-4c27-a43a-4ddc49ecd317"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551929347034,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "a6e1e748-79ea-4694-96a8-b74225346d8d",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551929347034,
    "parent_id": "f11f3084-c84d-4f6e-91d0-8c55df0d8c59",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Algorithm Pseudo Code"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929347030,
        "id": "f1580f2d-9169-4d12-8fbe-03ab8f00a42b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929347030,
        "parent_id": "a6e1e748-79ea-4694-96a8-b74225346d8d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Algorithm PMinVertexCover (graph G)"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Algorithm PMinVertexCover (graph G)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929347033,
        "id": "352e8994-14ea-4a84-b9ae-8369d96d3330",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929347033,
        "parent_id": "a6e1e748-79ea-4694-96a8-b74225346d8d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Input connected graph G"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Input connected graph G"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929347033,
        "id": "5029fc3f-7733-45d4-bf59-473ae9f4c4d1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929347033,
        "parent_id": "a6e1e748-79ea-4694-96a8-b74225346d8d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Output Minimum Vertex Cover Set C"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Output Minimum Vertex Cover Set C"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929347033,
        "id": "1adb66a8-a7d6-4f77-a42e-652d0c84d232",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929347033,
        "parent_id": "a6e1e748-79ea-4694-96a8-b74225346d8d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Set C \u003c- new Set\u003cVertex\u003e() \n\nSet X \u003c- new Set\u003cVertex\u003e() \n\nX \u003c- G.getAllVerticiesArrangedDescendinglyByDegree()\n\nfor v in X do\n    List\u003cVertex\u003e adjacentVertices1 \u003c- G.getAdjacent(v)\n\n    if !C contains any of adjacentVertices1 then\n        \n        C.add(v)\n\nfor vertex in C do\n\n    List\u003cvertex\u003e adjacentVertices2 \u003c- G.adjacentVertecies(vertex)\n\n    if C contains any of adjacentVertices2 then\n        \n        C.remove(vertex)\n\n        \nreturn C"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Set C \u003c- new Set\u003cVertex\u003e() \n\nSet X \u003c- new Set\u003cVertex\u003e() \n\nX \u003c- G.getAllVerticiesArrangedDescendinglyByDegree()\n\nfor v in X do\n    List\u003cVertex\u003e adjacentVertices1 \u003c- G.getAdjacent(v)\n\n    if !C contains any of adjacentVertices1 then\n        \n        C.add(v)\n\nfor vertex in C do\n\n    List\u003cvertex\u003e adjacentVertices2 \u003c- G.adjacentVertecies(vertex)\n\n    if C contains any of adjacentVertices2 then\n        \n        C.remove(vertex)\n\n        \nreturn C",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929347033,
        "id": "17063ea6-6435-44ed-b44e-cad3c1b138fc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929347033,
        "parent_id": "a6e1e748-79ea-4694-96a8-b74225346d8d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "C is the minimum vertex cover of graph G"
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "C is the minimum vertex cover of graph G"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929347034,
        "id": "ddc3e9f5-a66f-4c27-a43a-4ddc49ecd317",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929347034,
        "parent_id": "a6e1e748-79ea-4694-96a8-b74225346d8d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "we can use bucket sort for sorting the vertices according to its degree because the maximum value of degrees is (n-1) where n is the number of vertices then the time complexity of the sorting will be O(n)"
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "we can use bucket sort for sorting the vertices according to its degree because the maximum value of degrees is (n-1) where n is the number of vertices then the time complexity of the sorting will be O(n)"
          }
        ]
      }
    ],
    "title": "Algorithm Pseudo Code",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}