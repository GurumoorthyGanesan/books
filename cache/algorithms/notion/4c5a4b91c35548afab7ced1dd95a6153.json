{
  "ID": "4c5a4b91-c355-48af-ab7c-ed1dd95a6153",
  "Root": {
    "alive": true,
    "content": [
      "d41612e7-411a-4d25-871a-2cf770575103",
      "34eb2452-870f-4566-a3bb-91a8d8aa8fa6",
      "1bdfe50d-63fb-4aa3-9e5e-b1ee3a7056f8",
      "421c86f9-a6e0-4267-aa6e-8fc79afea31b",
      "a2982f43-3e74-415b-b5dc-1d153bd5c1e3",
      "3c38a3b8-1b31-4ca6-b4bc-efa93f9e0cbc",
      "e2e5a0d2-e530-4b14-be2f-3dcb138d0d6d",
      "3d8eadec-9d72-43e2-b69b-ca491972daba",
      "d1cd2d99-7cdb-4b09-a2b5-4adb1c2cf95d"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551928102999,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "4c5a4b91-c355-48af-ab7c-ed1dd95a6153",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551928102999,
    "parent_id": "adfec1cf-4941-4483-b98d-9550de7e3916",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "A Simple Loop"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928102996,
        "id": "d41612e7-411a-4d25-871a-2cf770575103",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928102996,
        "parent_id": "4c5a4b91-c355-48af-ab7c-ed1dd95a6153",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The following function finds the maximal element in an array:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The following function finds the maximal element in an array:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928102997,
        "id": "34eb2452-870f-4566-a3bb-91a8d8aa8fa6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928102997,
        "parent_id": "4c5a4b91-c355-48af-ab7c-ed1dd95a6153",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int find_max(const int *array, size_t len) {\n    int max = INT_MIN;\n    for (size_t i = 0; i \u003c len; i++) {\n        if (max \u003c array[i]) {\n            max = array[i];\n        }\n    }\n    return max;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int find_max(const int *array, size_t len) {\n    int max = INT_MIN;\n    for (size_t i = 0; i \u003c len; i++) {\n        if (max \u003c array[i]) {\n            max = array[i];\n        }\n    }\n    return max;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928102997,
        "id": "1bdfe50d-63fb-4aa3-9e5e-b1ee3a7056f8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928102997,
        "parent_id": "4c5a4b91-c355-48af-ab7c-ed1dd95a6153",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The input size is the size of the array, which I called "
            ],
            [
              "len",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in the code."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The input size is the size of the array, which I called "
          },
          {
            "Text": "len",
            "AttrFlags": 2
          },
          {
            "Text": " in the code."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928102997,
        "id": "421c86f9-a6e0-4267-aa6e-8fc79afea31b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928102997,
        "parent_id": "4c5a4b91-c355-48af-ab7c-ed1dd95a6153",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Let’s count the operations."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Let’s count the operations."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928102998,
        "id": "a2982f43-3e74-415b-b5dc-1d153bd5c1e3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928102998,
        "parent_id": "4c5a4b91-c355-48af-ab7c-ed1dd95a6153",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int max = INT_MIN;\nsize_t i = 0;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int max = INT_MIN;\nsize_t i = 0;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928102998,
        "id": "3c38a3b8-1b31-4ca6-b4bc-efa93f9e0cbc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928102998,
        "parent_id": "4c5a4b91-c355-48af-ab7c-ed1dd95a6153",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "These two assignments are done only once, so that’s 2 operations. The operations that are looped are:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "These two assignments are done only once, so that’s 2 operations. The operations that are looped are:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928102998,
        "id": "e2e5a0d2-e530-4b14-be2f-3dcb138d0d6d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928102998,
        "parent_id": "4c5a4b91-c355-48af-ab7c-ed1dd95a6153",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "if (max \u003c array[i])\ni++;\nmax = array[i]"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "if (max \u003c array[i])\ni++;\nmax = array[i]",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928102999,
        "id": "3d8eadec-9d72-43e2-b69b-ca491972daba",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928102999,
        "parent_id": "4c5a4b91-c355-48af-ab7c-ed1dd95a6153",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Since there are 3 operations in the loop, and the loop is done n times, we add "
            ],
            [
              "3n",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to our already existing 2 operations to get "
            ],
            [
              "3n + 2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". So our function takes "
            ],
            [
              "3n + 2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " operations to find the max (its complexity is "
            ],
            [
              "3n + 2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "). This is a polynomial where the fastest growing term is a factor of n, so it is O(n)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Since there are 3 operations in the loop, and the loop is done n times, we add "
          },
          {
            "Text": "3n",
            "AttrFlags": 2
          },
          {
            "Text": " to our already existing 2 operations to get "
          },
          {
            "Text": "3n + 2",
            "AttrFlags": 2
          },
          {
            "Text": ". So our function takes "
          },
          {
            "Text": "3n + 2",
            "AttrFlags": 2
          },
          {
            "Text": " operations to find the max (its complexity is "
          },
          {
            "Text": "3n + 2",
            "AttrFlags": 2
          },
          {
            "Text": "). This is a polynomial where the fastest growing term is a factor of n, so it is O(n)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928102999,
        "id": "d1cd2d99-7cdb-4b09-a2b5-4adb1c2cf95d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928102999,
        "parent_id": "4c5a4b91-c355-48af-ab7c-ed1dd95a6153",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You probably have noticed that “operation” is not very well defined. For instance I said that "
            ],
            [
              "if (max \u003c array[i])",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " was one operation, but depending on the architecture this statement can compile to for instance three instructions : one memory read, one comparison and one branch. I have also considered all operations as the same, even though for instance the memory operations will be slower than the others, and their performance will vary wildly due for instance to cache effects. I also have completely ignored the return statement, the fact that a frame will be created for the function, etc. In the end it doesn’t matter to complexity analysis, because whatever way I choose to count operations, it will only change the coefficient of the n factor and the constant, so the result will still be O(n). Complexity shows how the algorithm scales with the size of the input, but it isn’t the only aspect of performance!"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You probably have noticed that “operation” is not very well defined. For instance I said that "
          },
          {
            "Text": "if (max \u003c array[i])",
            "AttrFlags": 2
          },
          {
            "Text": " was one operation, but depending on the architecture this statement can compile to for instance three instructions : one memory read, one comparison and one branch. I have also considered all operations as the same, even though for instance the memory operations will be slower than the others, and their performance will vary wildly due for instance to cache effects. I also have completely ignored the return statement, the fact that a frame will be created for the function, etc. In the end it doesn’t matter to complexity analysis, because whatever way I choose to count operations, it will only change the coefficient of the n factor and the constant, so the result will still be O(n). Complexity shows how the algorithm scales with the size of the input, but it isn’t the only aspect of performance!"
          }
        ]
      }
    ],
    "title": "A Simple Loop",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}