{
  "ID": "404ded52-5929-4099-bfda-d92effcc04a7",
  "Root": {
    "alive": true,
    "content": [
      "69811fde-0911-4012-b113-2cb44e71166b",
      "dd66ca03-a61a-467c-8f56-fd38e598b23e",
      "82dfe55c-5477-463a-bb44-7170aa87502c",
      "eeca09a5-0c71-4868-bbd3-02188ae8b647",
      "1d22ebfa-f39f-4ec9-83fb-a7ee049f3b13",
      "75150b62-dde9-4b35-8ab0-67766086f8d0",
      "c55e7e02-3b11-4d07-9cb3-4275a743871c",
      "2de29ea8-e50c-41dd-be3a-839defc641d4",
      "fc98468f-c02c-4da9-804e-3e5c2dff2489",
      "4b359037-852e-42f4-bc34-43db6437f5be",
      "5d0cca65-44cb-4d62-9e7e-13588401442c",
      "98e62bee-ca87-4e73-a180-bfffceb5bfad",
      "73ef4d1b-13a1-4fb7-a45d-e8a678e0bc9c",
      "df0b007d-d7de-4f1d-aded-5bea7d941268",
      "1935f016-32c8-42a2-af6f-c7cfab53361b"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551928452716,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "404ded52-5929-4099-bfda-d92effcc04a7",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551928452716,
    "parent_id": "8c1be630-50c9-4162-b355-a5d6917f9e65",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Binary Search Tree - DeletionC"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928452710,
        "id": "69811fde-0911-4012-b113-2cb44e71166b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928452710,
        "parent_id": "404ded52-5929-4099-bfda-d92effcc04a7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Before starting with deletion I just want to put some lights on what is a Binary search tree(BST), Each node in a BST can have maximum of two nodes(left and right child).The left sub-tree of a node has a key less than or equal to its parent node’s key. The right sub-tree of a node has a key greater than to its parent node’s key."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Before starting with deletion I just want to put some lights on what is a Binary search tree(BST), Each node in a BST can have maximum of two nodes(left and right child).The left sub-tree of a node has a key less than or equal to its parent node’s key. The right sub-tree of a node has a key greater than to its parent node’s key."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928452712,
        "id": "dd66ca03-a61a-467c-8f56-fd38e598b23e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928452712,
        "parent_id": "404ded52-5929-4099-bfda-d92effcc04a7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Deleting a node in a tree while maintaining its "
            ],
            [
              "Binary search tree property.",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Deleting a node in a tree while maintaining its "
          },
          {
            "Text": "Binary search tree property.",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928452713,
        "id": "82dfe55c-5477-463a-bb44-7170aa87502c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928452713,
        "parent_id": "404ded52-5929-4099-bfda-d92effcc04a7",
        "parent_table": "block",
        "properties": {
          "source": [
            [
              "/tmp/80e950ce-9391-43b7-be17-5fd59cd54237/981de76c9315e8f03049272ba31047a76162fed3.png"
            ]
          ]
        },
        "type": "image",
        "version": 1,
        "source": "/tmp/80e950ce-9391-43b7-be17-5fd59cd54237/981de76c9315e8f03049272ba31047a76162fed3.png",
        "image_url": "https://www.notion.so/image/https:%2F%2Fwww.notion.so%2Ftmp%2F80e950ce-9391-43b7-be17-5fd59cd54237%2F981de76c9315e8f03049272ba31047a76162fed3.png"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928452713,
        "id": "eeca09a5-0c71-4868-bbd3-02188ae8b647",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928452713,
        "parent_id": "404ded52-5929-4099-bfda-d92effcc04a7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "There are three cases to be considered while deleting a node."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "There are three cases to be considered while deleting a node."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928452714,
        "id": "1d22ebfa-f39f-4ec9-83fb-a7ee049f3b13",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928452714,
        "parent_id": "404ded52-5929-4099-bfda-d92effcc04a7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Case 1: Node to be deleted is the leaf node.(Node with value 22)."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Case 1: Node to be deleted is the leaf node.(Node with value 22)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928452714,
        "id": "75150b62-dde9-4b35-8ab0-67766086f8d0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928452714,
        "parent_id": "404ded52-5929-4099-bfda-d92effcc04a7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Case 2: Node to be deleted has one child.(Node with value 26)."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Case 2: Node to be deleted has one child.(Node with value 26)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928452714,
        "id": "c55e7e02-3b11-4d07-9cb3-4275a743871c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928452714,
        "parent_id": "404ded52-5929-4099-bfda-d92effcc04a7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Case 3: Node to be deleted has both children.(Node with value 49)."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Case 3: Node to be deleted has both children.(Node with value 49)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928452714,
        "id": "2de29ea8-e50c-41dd-be3a-839defc641d4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928452714,
        "parent_id": "404ded52-5929-4099-bfda-d92effcc04a7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Explanation of cases:",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Explanation of cases:",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928452715,
        "id": "fc98468f-c02c-4da9-804e-3e5c2dff2489",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928452715,
        "parent_id": "404ded52-5929-4099-bfda-d92effcc04a7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When the node to be deleted is a leaf node then simply delete the node and pass "
            ],
            [
              "nullptr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to its parent node."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "When the node to be deleted is a leaf node then simply delete the node and pass "
          },
          {
            "Text": "nullptr",
            "AttrFlags": 2
          },
          {
            "Text": " to its parent node."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928452715,
        "id": "4b359037-852e-42f4-bc34-43db6437f5be",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928452715,
        "parent_id": "404ded52-5929-4099-bfda-d92effcc04a7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When a node to be deleted is having only one child then copy the child value to the node value and delete the child "
            ],
            [
              "(Converted to case 1)",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "When a node to be deleted is having only one child then copy the child value to the node value and delete the child "
          },
          {
            "Text": "(Converted to case 1)",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928452715,
        "id": "5d0cca65-44cb-4d62-9e7e-13588401442c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928452715,
        "parent_id": "404ded52-5929-4099-bfda-d92effcc04a7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When a node to be delete is having two childs then the minimum from its right sub tree can be copied to the node and then the minimum value can be deleted from the node’s right subtree "
            ],
            [
              "(Converted to Case 2)",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "When a node to be delete is having two childs then the minimum from its right sub tree can be copied to the node and then the minimum value can be deleted from the node’s right subtree "
          },
          {
            "Text": "(Converted to Case 2)",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928452715,
        "id": "98e62bee-ca87-4e73-a180-bfffceb5bfad",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928452715,
        "parent_id": "404ded52-5929-4099-bfda-d92effcc04a7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note:",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " The minimum in the right sub tree can have a maximum of one child and that too right child if it’s having the left child that means it’s not the minimum value or it’s not following BST property."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note:",
            "AttrFlags": 1
          },
          {
            "Text": " The minimum in the right sub tree can have a maximum of one child and that too right child if it’s having the left child that means it’s not the minimum value or it’s not following BST property."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928452715,
        "id": "73ef4d1b-13a1-4fb7-a45d-e8a678e0bc9c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928452715,
        "parent_id": "404ded52-5929-4099-bfda-d92effcc04a7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The structure of a node in a tree and the code for Deletion:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The structure of a node in a tree and the code for Deletion:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928452716,
        "id": "df0b007d-d7de-4f1d-aded-5bea7d941268",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928452716,
        "parent_id": "404ded52-5929-4099-bfda-d92effcc04a7",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "struct node\n{\n    int data;\n    node *left, *right;\n};\n\nnode* delete_node(node *root, int data)\n{\n  if(root == nullptr) return root;\n  else if(data \u003c root-\u003edata) root-\u003eleft  = delete_node(root-\u003eleft, data);\n  else if(data \u003e root-\u003edata) root-\u003eright = delete_node(root-\u003eright, data);\n\n  else\n  {\n    if(root-\u003eleft == nullptr \u0026\u0026 root-\u003eright == nullptr) // Case 1\n    {\n      free(root);\n      root = nullptr;\n    }\n    else if(root-\u003eleft == nullptr)       // Case 2\n    {\n       node* temp = root;\n       root= root-\u003eright;\n       free(temp);\n    }\n    else if(root-\u003eright == nullptr)      // Case 2\n    {\n       node* temp = root;\n       root = root-\u003eleft;\n       free(temp);\n    }\n    else                                 // Case 3\n    {\n       node* temp = root-\u003eright;\n\n       while(temp-\u003eleft != nullptr) temp = temp-\u003eleft;\n\n       root-\u003edata = temp-\u003edata;\n       root-\u003eright = delete_node(root-\u003eright, temp-\u003edata);\n    }\n  }\n  return root;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "struct node\n{\n    int data;\n    node *left, *right;\n};\n\nnode* delete_node(node *root, int data)\n{\n  if(root == nullptr) return root;\n  else if(data \u003c root-\u003edata) root-\u003eleft  = delete_node(root-\u003eleft, data);\n  else if(data \u003e root-\u003edata) root-\u003eright = delete_node(root-\u003eright, data);\n\n  else\n  {\n    if(root-\u003eleft == nullptr \u0026\u0026 root-\u003eright == nullptr) // Case 1\n    {\n      free(root);\n      root = nullptr;\n    }\n    else if(root-\u003eleft == nullptr)       // Case 2\n    {\n       node* temp = root;\n       root= root-\u003eright;\n       free(temp);\n    }\n    else if(root-\u003eright == nullptr)      // Case 2\n    {\n       node* temp = root;\n       root = root-\u003eleft;\n       free(temp);\n    }\n    else                                 // Case 3\n    {\n       node* temp = root-\u003eright;\n\n       while(temp-\u003eleft != nullptr) temp = temp-\u003eleft;\n\n       root-\u003edata = temp-\u003edata;\n       root-\u003eright = delete_node(root-\u003eright, temp-\u003edata);\n    }\n  }\n  return root;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928452716,
        "id": "1935f016-32c8-42a2-af6f-c7cfab53361b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928452716,
        "parent_id": "404ded52-5929-4099-bfda-d92effcc04a7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Time complexity of above code is O("
            ],
            [
              "h",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              "), where "
            ],
            [
              "h",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " is the height of the tree."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Time complexity of above code is O("
          },
          {
            "Text": "h",
            "AttrFlags": 4
          },
          {
            "Text": "), where "
          },
          {
            "Text": "h",
            "AttrFlags": 4
          },
          {
            "Text": " is the height of the tree."
          }
        ]
      }
    ],
    "title": "Binary Search Tree - DeletionC",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}