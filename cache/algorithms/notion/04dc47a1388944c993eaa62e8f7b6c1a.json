{
  "ID": "04dc47a1-3889-44c9-93ea-a62e8f7b6c1a",
  "Root": {
    "alive": true,
    "content": [
      "504f9d0b-4405-4513-bd28-e814bf293be4",
      "68f7627f-3290-424f-8123-0b1461385581",
      "5e968306-35bb-4d0c-9294-e7fc5f4a7307",
      "842a284c-2c71-4d66-9d4a-a7b335d7a29d",
      "1abfca1c-a8d3-4df4-89af-bafa5cc826b5"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551928071814,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "04dc47a1-3889-44c9-93ea-a62e8f7b6c1a",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551928071814,
    "parent_id": "e737c451-edb2-4ee1-8b50-4891f751f559",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Kruskals Algorithm"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928071808,
        "id": "504f9d0b-4405-4513-bd28-e814bf293be4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928071808,
        "parent_id": "04dc47a1-3889-44c9-93ea-a62e8f7b6c1a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Remarks"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Remarks"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928071811,
        "id": "68f7627f-3290-424f-8123-0b1461385581",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928071811,
        "parent_id": "04dc47a1-3889-44c9-93ea-a62e8f7b6c1a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Kruskal’s Algorithm is a "
            ],
            [
              "greedy",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " algorithm used to find "
            ],
            [
              "Minimum Spanning Tree (MST)",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " of a graph. A minimum spanning tree is a tree which connects all the vertices of the graph and has the minimum total edge weight."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Kruskal’s Algorithm is a "
          },
          {
            "Text": "greedy",
            "AttrFlags": 1
          },
          {
            "Text": " algorithm used to find "
          },
          {
            "Text": "Minimum Spanning Tree (MST)",
            "AttrFlags": 1
          },
          {
            "Text": " of a graph. A minimum spanning tree is a tree which connects all the vertices of the graph and has the minimum total edge weight."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928071812,
        "id": "5e968306-35bb-4d0c-9294-e7fc5f4a7307",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928071812,
        "parent_id": "04dc47a1-3889-44c9-93ea-a62e8f7b6c1a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Kruskal’s algorithm does so by repeatedly picking out edges with "
            ],
            [
              "minimum weight",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " (which are not already in the MST) and add them to the final result if the two vertices connected by that edge are not yet connected in the MST, otherwise it skips that edge. Union - Find data structure can be used to check whether two vertices are already connected in the MST or not. A few properties of MST are as follows:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Kruskal’s algorithm does so by repeatedly picking out edges with "
          },
          {
            "Text": "minimum weight",
            "AttrFlags": 1
          },
          {
            "Text": " (which are not already in the MST) and add them to the final result if the two vertices connected by that edge are not yet connected in the MST, otherwise it skips that edge. Union - Find data structure can be used to check whether two vertices are already connected in the MST or not. A few properties of MST are as follows:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928071813,
        "id": "842a284c-2c71-4d66-9d4a-a7b335d7a29d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928071813,
        "parent_id": "04dc47a1-3889-44c9-93ea-a62e8f7b6c1a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A MST of a graph with "
            ],
            [
              "n",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " vertices will have exactly "
            ],
            [
              "n-1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " edges."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "A MST of a graph with "
          },
          {
            "Text": "n",
            "AttrFlags": 2
          },
          {
            "Text": " vertices will have exactly "
          },
          {
            "Text": "n-1",
            "AttrFlags": 2
          },
          {
            "Text": " edges."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928071814,
        "id": "1abfca1c-a8d3-4df4-89af-bafa5cc826b5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928071814,
        "parent_id": "04dc47a1-3889-44c9-93ea-a62e8f7b6c1a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "There exists a unique path from each vertex to every other vertex."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "There exists a unique path from each vertex to every other vertex."
          }
        ]
      }
    ],
    "title": "Kruskals Algorithm",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}