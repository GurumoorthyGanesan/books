{
  "ID": "b4428435-6873-415d-9c1e-d463668d107b",
  "Root": {
    "alive": true,
    "content": [
      "1303fd5b-48cc-4312-bae5-a93604304ff5",
      "9708944c-e428-4a2f-a97a-5d6859587a72",
      "83756a9d-d6e5-48ae-a88f-6e4a262d696c",
      "3767cc12-fdfa-452d-bcfe-fa6da017b357",
      "2ad92e46-0ec9-4b70-b6a1-f45e34411f35",
      "f9609d3a-b5c7-48d1-84c8-6065d3d3014f",
      "3cb4e196-34f8-4557-890f-7185b121b8eb",
      "0d977662-a4f9-4554-a81a-38df17c6c8d6",
      "bfa75bf7-d739-4a4a-8050-13d2897b206d",
      "a6a4231f-e52c-4181-98ef-c1eb9fcc26bc",
      "239e4453-2d90-4417-b41a-9a1a66d0b99f",
      "4c627fcd-e100-4bc8-a3d8-d3bc6cd00817",
      "06c94700-d514-458b-81c3-b5b707330887",
      "a46f41af-49a7-441c-a5bc-1b7e9f2858f0",
      "55bbfd1b-388e-4da3-9db4-8235f299fad6",
      "ecf21af0-a61b-4d14-96a2-c61b6a836a92",
      "1ae92441-120d-41cf-9d3d-26df3895ea97",
      "7c61f83f-1d21-4161-8903-028a54d0ca1b",
      "4cd43b32-26d2-4f36-b139-86c9aaa69bb9",
      "c195cd09-87b1-44f0-b1f6-5c16521f21a9",
      "3316ecd6-a155-4fee-ac29-b007db932d1f",
      "8d4c158c-7831-4e82-9bb5-e60677234b71",
      "5be1e8be-303b-4b6f-a9bb-0ede69c5fcd3",
      "8ec62663-ba0b-407f-bf8a-7c74306a824d",
      "00b08806-6cdf-4928-a065-e0a5724ce014",
      "bfc2bb8e-7fe6-4a4a-8df2-91b015a77d35",
      "c07467ca-61f2-4d68-9bca-de57ba13e86f",
      "55d8c398-7216-4205-93aa-97f40934efc1",
      "d5f1b37b-1a55-4f0c-a0bd-fff1d02a8168",
      "6008df9f-5f01-44e8-a446-ccd5903b4c6a",
      "1a3ca01d-438f-4d6c-b160-f9b2433a661e",
      "d2106344-053f-4328-83f7-ccc250cdbd36",
      "43cb0214-14ce-476c-819f-d8225e08e730",
      "1adf21fb-b2dd-43fa-b656-90a628334f3e"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551928829466,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "b4428435-6873-415d-9c1e-d463668d107b",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551928829466,
    "parent_id": "3cca89f6-4b6c-48b0-957b-2efc26b23041",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Introduction To Prims Algorithm"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928829452,
        "id": "1303fd5b-48cc-4312-bae5-a93604304ff5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928829452,
        "parent_id": "b4428435-6873-415d-9c1e-d463668d107b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Let’s say we have "
            ],
            [
              "8",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " houses. We want to setup telephone lines between these houses. The edge between the houses represent the cost of setting line between two houses."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Let’s say we have "
          },
          {
            "Text": "8",
            "AttrFlags": 1
          },
          {
            "Text": " houses. We want to setup telephone lines between these houses. The edge between the houses represent the cost of setting line between two houses."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928829455,
        "id": "9708944c-e428-4a2f-a97a-5d6859587a72",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928829455,
        "parent_id": "b4428435-6873-415d-9c1e-d463668d107b",
        "parent_table": "block",
        "properties": {
          "source": [
            [
              "/tmp/d54d378e-0b5a-4493-b60e-2c10ca3beec0/a26199260a796f18411ec7aaf1c8efdadbf20971.png"
            ]
          ]
        },
        "type": "image",
        "version": 1,
        "source": "/tmp/d54d378e-0b5a-4493-b60e-2c10ca3beec0/a26199260a796f18411ec7aaf1c8efdadbf20971.png",
        "image_url": "https://www.notion.so/image/https:%2F%2Fwww.notion.so%2Ftmp%2Fd54d378e-0b5a-4493-b60e-2c10ca3beec0%2Fa26199260a796f18411ec7aaf1c8efdadbf20971.png"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928829455,
        "id": "83756a9d-d6e5-48ae-a88f-6e4a262d696c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928829455,
        "parent_id": "b4428435-6873-415d-9c1e-d463668d107b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Our task is to set up lines in such a way that all the houses are connected and the cost of setting up the whole connection is minimum. Now how do we find that out? We can use "
            ],
            [
              "Prim’s Algorithm",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Our task is to set up lines in such a way that all the houses are connected and the cost of setting up the whole connection is minimum. Now how do we find that out? We can use "
          },
          {
            "Text": "Prim’s Algorithm",
            "AttrFlags": 1
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928829459,
        "id": "3767cc12-fdfa-452d-bcfe-fa6da017b357",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928829459,
        "parent_id": "b4428435-6873-415d-9c1e-d463668d107b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Prim’s Algorithm",
              [
                [
                  "a",
                  "https://en.wikipedia.org/wiki/Prim's_algorithm"
                ]
              ]
            ],
            [
              " is a greedy algorithm that finds a minimum spanning tree for a weighted undirected graph. This means it finds a subset of the edges that forms a tree that includes every node, where the total weight of all the edges in the tree are minimized. The algorithm was developed in 1930 by Czech mathematician "
            ],
            [
              "Vojtěch Jarník",
              [
                [
                  "a",
                  "https://en.wikipedia.org/wiki/Vojt%C4%9Bch_Jarn%C3%ADk"
                ]
              ]
            ],
            [
              " and later rediscovered and republished by computer scientist "
            ],
            [
              "Robert Clay Prim",
              [
                [
                  "a",
                  "https://en.wikipedia.org/wiki/Robert_C._Prim"
                ]
              ]
            ],
            [
              " in 1957 and "
            ],
            [
              "Edsger Wybe Dijkstra",
              [
                [
                  "a",
                  "https://en.wikipedia.org/wiki/Edsger_W._Dijkstra"
                ]
              ]
            ],
            [
              " in 1959. It is also known as "
            ],
            [
              "DJP algorithm",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "Jarnik’s algorithm",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "Prim-Jarnik algorithm",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "Prim-Dijsktra algorithm",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Prim’s Algorithm",
            "Link": "https://en.wikipedia.org/wiki/Prim's_algorithm"
          },
          {
            "Text": " is a greedy algorithm that finds a minimum spanning tree for a weighted undirected graph. This means it finds a subset of the edges that forms a tree that includes every node, where the total weight of all the edges in the tree are minimized. The algorithm was developed in 1930 by Czech mathematician "
          },
          {
            "Text": "Vojtěch Jarník",
            "Link": "https://en.wikipedia.org/wiki/Vojt%C4%9Bch_Jarn%C3%ADk"
          },
          {
            "Text": " and later rediscovered and republished by computer scientist "
          },
          {
            "Text": "Robert Clay Prim",
            "Link": "https://en.wikipedia.org/wiki/Robert_C._Prim"
          },
          {
            "Text": " in 1957 and "
          },
          {
            "Text": "Edsger Wybe Dijkstra",
            "Link": "https://en.wikipedia.org/wiki/Edsger_W._Dijkstra"
          },
          {
            "Text": " in 1959. It is also known as "
          },
          {
            "Text": "DJP algorithm",
            "AttrFlags": 1
          },
          {
            "Text": ", "
          },
          {
            "Text": "Jarnik’s algorithm",
            "AttrFlags": 1
          },
          {
            "Text": ", "
          },
          {
            "Text": "Prim-Jarnik algorithm",
            "AttrFlags": 1
          },
          {
            "Text": " or "
          },
          {
            "Text": "Prim-Dijsktra algorithm",
            "AttrFlags": 1
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928829459,
        "id": "2ad92e46-0ec9-4b70-b6a1-f45e34411f35",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928829459,
        "parent_id": "b4428435-6873-415d-9c1e-d463668d107b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Now let’s look at the technical terms first. If we create a graph, "
            ],
            [
              "S",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " using some nodes and edges of an undirected graph "
            ],
            [
              "G",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", then "
            ],
            [
              "S",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " is called a "
            ],
            [
              "subgraph",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " of the graph "
            ],
            [
              "G",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". Now "
            ],
            [
              "S",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " will be called a "
            ],
            [
              "Spanning Tree",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " if and only if:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Now let’s look at the technical terms first. If we create a graph, "
          },
          {
            "Text": "S",
            "AttrFlags": 1
          },
          {
            "Text": " using some nodes and edges of an undirected graph "
          },
          {
            "Text": "G",
            "AttrFlags": 1
          },
          {
            "Text": ", then "
          },
          {
            "Text": "S",
            "AttrFlags": 1
          },
          {
            "Text": " is called a "
          },
          {
            "Text": "subgraph",
            "AttrFlags": 1
          },
          {
            "Text": " of the graph "
          },
          {
            "Text": "G",
            "AttrFlags": 1
          },
          {
            "Text": ". Now "
          },
          {
            "Text": "S",
            "AttrFlags": 1
          },
          {
            "Text": " will be called a "
          },
          {
            "Text": "Spanning Tree",
            "AttrFlags": 1
          },
          {
            "Text": " if and only if:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928829460,
        "id": "f9609d3a-b5c7-48d1-84c8-6065d3d3014f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928829460,
        "parent_id": "b4428435-6873-415d-9c1e-d463668d107b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It contains all the nodes of "
            ],
            [
              "G",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "It contains all the nodes of "
          },
          {
            "Text": "G",
            "AttrFlags": 1
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928829460,
        "id": "3cb4e196-34f8-4557-890f-7185b121b8eb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928829460,
        "parent_id": "b4428435-6873-415d-9c1e-d463668d107b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It is a tree, that means there is no cycle and all the nodes are connected."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "It is a tree, that means there is no cycle and all the nodes are connected."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928829461,
        "id": "0d977662-a4f9-4554-a81a-38df17c6c8d6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928829461,
        "parent_id": "b4428435-6873-415d-9c1e-d463668d107b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "There are "
            ],
            [
              "(n-1)",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " edges in the tree, where "
            ],
            [
              "n",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " is the number of nodes in "
            ],
            [
              "G",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "There are "
          },
          {
            "Text": "(n-1)",
            "AttrFlags": 1
          },
          {
            "Text": " edges in the tree, where "
          },
          {
            "Text": "n",
            "AttrFlags": 1
          },
          {
            "Text": " is the number of nodes in "
          },
          {
            "Text": "G",
            "AttrFlags": 1
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928829461,
        "id": "bfa75bf7-d739-4a4a-8050-13d2897b206d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928829461,
        "parent_id": "b4428435-6873-415d-9c1e-d463668d107b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "There can be many "
            ],
            [
              "Spanning Tree",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "‘s of a graph. The "
            ],
            [
              "Minimum Spanning Tree",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " of a weighted undirected graph is a tree, such that sum of the weight of the edges is minimum. Now we’ll use "
            ],
            [
              "Prim’s algorithm",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " to find out the minimum spanning tree, that is how to set up the telephone lines in our example graph in such way that the cost of set up is minimum."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "There can be many "
          },
          {
            "Text": "Spanning Tree",
            "AttrFlags": 1
          },
          {
            "Text": "‘s of a graph. The "
          },
          {
            "Text": "Minimum Spanning Tree",
            "AttrFlags": 1
          },
          {
            "Text": " of a weighted undirected graph is a tree, such that sum of the weight of the edges is minimum. Now we’ll use "
          },
          {
            "Text": "Prim’s algorithm",
            "AttrFlags": 1
          },
          {
            "Text": " to find out the minimum spanning tree, that is how to set up the telephone lines in our example graph in such way that the cost of set up is minimum."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928829461,
        "id": "a6a4231f-e52c-4181-98ef-c1eb9fcc26bc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928829461,
        "parent_id": "b4428435-6873-415d-9c1e-d463668d107b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "At first we’ll select a "
            ],
            [
              "source",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " node. Let’s say, "
            ],
            [
              "node-1",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " is our "
            ],
            [
              "source",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". Now we’ll add the edge from "
            ],
            [
              "node-1",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " that has the minimum cost to our subgraph. Here we mark the edges that are in the subgraph using the color "
            ],
            [
              "blue",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". Here "
            ],
            [
              "1-5",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " is our desired edge."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "At first we’ll select a "
          },
          {
            "Text": "source",
            "AttrFlags": 1
          },
          {
            "Text": " node. Let’s say, "
          },
          {
            "Text": "node-1",
            "AttrFlags": 1
          },
          {
            "Text": " is our "
          },
          {
            "Text": "source",
            "AttrFlags": 1
          },
          {
            "Text": ". Now we’ll add the edge from "
          },
          {
            "Text": "node-1",
            "AttrFlags": 1
          },
          {
            "Text": " that has the minimum cost to our subgraph. Here we mark the edges that are in the subgraph using the color "
          },
          {
            "Text": "blue",
            "AttrFlags": 1
          },
          {
            "Text": ". Here "
          },
          {
            "Text": "1-5",
            "AttrFlags": 1
          },
          {
            "Text": " is our desired edge."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928829462,
        "id": "239e4453-2d90-4417-b41a-9a1a66d0b99f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928829462,
        "parent_id": "b4428435-6873-415d-9c1e-d463668d107b",
        "parent_table": "block",
        "properties": {
          "source": [
            [
              "/tmp/d54d378e-0b5a-4493-b60e-2c10ca3beec0/7457dbf1f0a9d46b4f420ae17fa86997a55fd3e6.png"
            ]
          ]
        },
        "type": "image",
        "version": 1,
        "source": "/tmp/d54d378e-0b5a-4493-b60e-2c10ca3beec0/7457dbf1f0a9d46b4f420ae17fa86997a55fd3e6.png",
        "image_url": "https://www.notion.so/image/https:%2F%2Fwww.notion.so%2Ftmp%2Fd54d378e-0b5a-4493-b60e-2c10ca3beec0%2F7457dbf1f0a9d46b4f420ae17fa86997a55fd3e6.png"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928829462,
        "id": "4c627fcd-e100-4bc8-a3d8-d3bc6cd00817",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928829462,
        "parent_id": "b4428435-6873-415d-9c1e-d463668d107b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Now we consider all the edges from "
            ],
            [
              "node-1",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "node-5",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " and take the minimum. Since "
            ],
            [
              "1-5",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " is already marked, we take "
            ],
            [
              "1-2",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Now we consider all the edges from "
          },
          {
            "Text": "node-1",
            "AttrFlags": 1
          },
          {
            "Text": " and "
          },
          {
            "Text": "node-5",
            "AttrFlags": 1
          },
          {
            "Text": " and take the minimum. Since "
          },
          {
            "Text": "1-5",
            "AttrFlags": 1
          },
          {
            "Text": " is already marked, we take "
          },
          {
            "Text": "1-2",
            "AttrFlags": 1
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928829462,
        "id": "06c94700-d514-458b-81c3-b5b707330887",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928829462,
        "parent_id": "b4428435-6873-415d-9c1e-d463668d107b",
        "parent_table": "block",
        "properties": {
          "source": [
            [
              "/tmp/d54d378e-0b5a-4493-b60e-2c10ca3beec0/262a8c91a2e73d6c9d9dc5c1547438a60b7c0584.png"
            ]
          ]
        },
        "type": "image",
        "version": 1,
        "source": "/tmp/d54d378e-0b5a-4493-b60e-2c10ca3beec0/262a8c91a2e73d6c9d9dc5c1547438a60b7c0584.png",
        "image_url": "https://www.notion.so/image/https:%2F%2Fwww.notion.so%2Ftmp%2Fd54d378e-0b5a-4493-b60e-2c10ca3beec0%2F262a8c91a2e73d6c9d9dc5c1547438a60b7c0584.png"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928829462,
        "id": "a46f41af-49a7-441c-a5bc-1b7e9f2858f0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928829462,
        "parent_id": "b4428435-6873-415d-9c1e-d463668d107b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This time, we consider "
            ],
            [
              "node-1",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "node-2",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "node-5",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " and take the minimum edge which is "
            ],
            [
              "5-4",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This time, we consider "
          },
          {
            "Text": "node-1",
            "AttrFlags": 1
          },
          {
            "Text": ", "
          },
          {
            "Text": "node-2",
            "AttrFlags": 1
          },
          {
            "Text": " and "
          },
          {
            "Text": "node-5",
            "AttrFlags": 1
          },
          {
            "Text": " and take the minimum edge which is "
          },
          {
            "Text": "5-4",
            "AttrFlags": 1
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928829462,
        "id": "55bbfd1b-388e-4da3-9db4-8235f299fad6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928829462,
        "parent_id": "b4428435-6873-415d-9c1e-d463668d107b",
        "parent_table": "block",
        "properties": {
          "source": [
            [
              "/tmp/d54d378e-0b5a-4493-b60e-2c10ca3beec0/afcdc49124815c44316b618082616f6022fd62b1.png"
            ]
          ]
        },
        "type": "image",
        "version": 1,
        "source": "/tmp/d54d378e-0b5a-4493-b60e-2c10ca3beec0/afcdc49124815c44316b618082616f6022fd62b1.png",
        "image_url": "https://www.notion.so/image/https:%2F%2Fwww.notion.so%2Ftmp%2Fd54d378e-0b5a-4493-b60e-2c10ca3beec0%2Fafcdc49124815c44316b618082616f6022fd62b1.png"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928829463,
        "id": "ecf21af0-a61b-4d14-96a2-c61b6a836a92",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928829463,
        "parent_id": "b4428435-6873-415d-9c1e-d463668d107b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The next step is important. From "
            ],
            [
              "node-1",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "node-2",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "node-5",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "node-4",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", the minimum edge is "
            ],
            [
              "2-4",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". But if we select that one, it’ll create a cycle in our subgraph. This is because "
            ],
            [
              "node-2",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "node-4",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " are already in our subgraph. So taking edge "
            ],
            [
              "2-4",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " doesn’t benefit us. "
            ],
            [
              "We’ll select the edges in such way that it adds a new node in our subgraph",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ". So we select edge "
            ],
            [
              "4-8",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The next step is important. From "
          },
          {
            "Text": "node-1",
            "AttrFlags": 1
          },
          {
            "Text": ", "
          },
          {
            "Text": "node-2",
            "AttrFlags": 1
          },
          {
            "Text": ", "
          },
          {
            "Text": "node-5",
            "AttrFlags": 1
          },
          {
            "Text": " and "
          },
          {
            "Text": "node-4",
            "AttrFlags": 1
          },
          {
            "Text": ", the minimum edge is "
          },
          {
            "Text": "2-4",
            "AttrFlags": 1
          },
          {
            "Text": ". But if we select that one, it’ll create a cycle in our subgraph. This is because "
          },
          {
            "Text": "node-2",
            "AttrFlags": 1
          },
          {
            "Text": " and "
          },
          {
            "Text": "node-4",
            "AttrFlags": 1
          },
          {
            "Text": " are already in our subgraph. So taking edge "
          },
          {
            "Text": "2-4",
            "AttrFlags": 1
          },
          {
            "Text": " doesn’t benefit us. "
          },
          {
            "Text": "We’ll select the edges in such way that it adds a new node in our subgraph",
            "AttrFlags": 4
          },
          {
            "Text": ". So we select edge "
          },
          {
            "Text": "4-8",
            "AttrFlags": 1
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928829463,
        "id": "1ae92441-120d-41cf-9d3d-26df3895ea97",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928829463,
        "parent_id": "b4428435-6873-415d-9c1e-d463668d107b",
        "parent_table": "block",
        "properties": {
          "source": [
            [
              "/tmp/d54d378e-0b5a-4493-b60e-2c10ca3beec0/ebb4542ca5cf5444f09fae7aa7940a346a1a6e3c.png"
            ]
          ]
        },
        "type": "image",
        "version": 1,
        "source": "/tmp/d54d378e-0b5a-4493-b60e-2c10ca3beec0/ebb4542ca5cf5444f09fae7aa7940a346a1a6e3c.png",
        "image_url": "https://www.notion.so/image/https:%2F%2Fwww.notion.so%2Ftmp%2Fd54d378e-0b5a-4493-b60e-2c10ca3beec0%2Febb4542ca5cf5444f09fae7aa7940a346a1a6e3c.png"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928829463,
        "id": "7c61f83f-1d21-4161-8903-028a54d0ca1b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928829463,
        "parent_id": "b4428435-6873-415d-9c1e-d463668d107b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If we continue this way, we’ll select edge "
            ],
            [
              "8-6",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "6-7",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "4-3",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". Our subgraph will look like:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If we continue this way, we’ll select edge "
          },
          {
            "Text": "8-6",
            "AttrFlags": 1
          },
          {
            "Text": ", "
          },
          {
            "Text": "6-7",
            "AttrFlags": 1
          },
          {
            "Text": " and "
          },
          {
            "Text": "4-3",
            "AttrFlags": 1
          },
          {
            "Text": ". Our subgraph will look like:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928829463,
        "id": "4cd43b32-26d2-4f36-b139-86c9aaa69bb9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928829463,
        "parent_id": "b4428435-6873-415d-9c1e-d463668d107b",
        "parent_table": "block",
        "properties": {
          "source": [
            [
              "/tmp/d54d378e-0b5a-4493-b60e-2c10ca3beec0/f14127d9a8e0f222edb60b2c151d43b0de4cd23c.png"
            ]
          ]
        },
        "type": "image",
        "version": 1,
        "source": "/tmp/d54d378e-0b5a-4493-b60e-2c10ca3beec0/f14127d9a8e0f222edb60b2c151d43b0de4cd23c.png",
        "image_url": "https://www.notion.so/image/https:%2F%2Fwww.notion.so%2Ftmp%2Fd54d378e-0b5a-4493-b60e-2c10ca3beec0%2Ff14127d9a8e0f222edb60b2c151d43b0de4cd23c.png"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928829464,
        "id": "c195cd09-87b1-44f0-b1f6-5c16521f21a9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928829464,
        "parent_id": "b4428435-6873-415d-9c1e-d463668d107b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This is our desired subgraph, that’ll give us the minimum spanning tree. If we remove the edges that we didn’t select, we’ll get:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This is our desired subgraph, that’ll give us the minimum spanning tree. If we remove the edges that we didn’t select, we’ll get:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928829464,
        "id": "3316ecd6-a155-4fee-ac29-b007db932d1f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928829464,
        "parent_id": "b4428435-6873-415d-9c1e-d463668d107b",
        "parent_table": "block",
        "properties": {
          "source": [
            [
              "/tmp/d54d378e-0b5a-4493-b60e-2c10ca3beec0/38b262949e569ac51abfaa3799d808a8adaf3c69.png"
            ]
          ]
        },
        "type": "image",
        "version": 1,
        "source": "/tmp/d54d378e-0b5a-4493-b60e-2c10ca3beec0/38b262949e569ac51abfaa3799d808a8adaf3c69.png",
        "image_url": "https://www.notion.so/image/https:%2F%2Fwww.notion.so%2Ftmp%2Fd54d378e-0b5a-4493-b60e-2c10ca3beec0%2F38b262949e569ac51abfaa3799d808a8adaf3c69.png"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928829464,
        "id": "8d4c158c-7831-4e82-9bb5-e60677234b71",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928829464,
        "parent_id": "b4428435-6873-415d-9c1e-d463668d107b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This is our "
            ],
            [
              "minimum spanning tree",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " (MST). So the cost of setting up the telephone connections is: "
            ],
            [
              "4",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " + "
            ],
            [
              "2",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " + "
            ],
            [
              "5",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " + "
            ],
            [
              "11",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " + "
            ],
            [
              "9",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " + "
            ],
            [
              "2",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " + "
            ],
            [
              "1",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " = "
            ],
            [
              "34",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". And the set of houses and their connections are shown in the graph. There can be multiple "
            ],
            [
              "MST",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " of a graph. It depends on the "
            ],
            [
              "source",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " node we choose."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This is our "
          },
          {
            "Text": "minimum spanning tree",
            "AttrFlags": 1
          },
          {
            "Text": " (MST). So the cost of setting up the telephone connections is: "
          },
          {
            "Text": "4",
            "AttrFlags": 1
          },
          {
            "Text": " + "
          },
          {
            "Text": "2",
            "AttrFlags": 1
          },
          {
            "Text": " + "
          },
          {
            "Text": "5",
            "AttrFlags": 1
          },
          {
            "Text": " + "
          },
          {
            "Text": "11",
            "AttrFlags": 1
          },
          {
            "Text": " + "
          },
          {
            "Text": "9",
            "AttrFlags": 1
          },
          {
            "Text": " + "
          },
          {
            "Text": "2",
            "AttrFlags": 1
          },
          {
            "Text": " + "
          },
          {
            "Text": "1",
            "AttrFlags": 1
          },
          {
            "Text": " = "
          },
          {
            "Text": "34",
            "AttrFlags": 1
          },
          {
            "Text": ". And the set of houses and their connections are shown in the graph. There can be multiple "
          },
          {
            "Text": "MST",
            "AttrFlags": 1
          },
          {
            "Text": " of a graph. It depends on the "
          },
          {
            "Text": "source",
            "AttrFlags": 1
          },
          {
            "Text": " node we choose."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928829464,
        "id": "5be1e8be-303b-4b6f-a9bb-0ede69c5fcd3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928829464,
        "parent_id": "b4428435-6873-415d-9c1e-d463668d107b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The pseudo-code of the algorithm is given below:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The pseudo-code of the algorithm is given below:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928829465,
        "id": "8ec62663-ba0b-407f-bf8a-7c74306a824d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928829465,
        "parent_id": "b4428435-6873-415d-9c1e-d463668d107b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Procedure PrimsMST(Graph):     // here Graph is a non-empty connected weighted graph\nVnew[] = {x}                   // New subgraph Vnew with source node x\nEnew[] = {}\nwhile Vnew is not equal to V\n    u -\u003e a node from Vnew\n    v -\u003e a node that is not in Vnew such that edge u-v has the minimum cost\n                               // if two nodes have same weight, pick any of them\n    add v to Vnew\n    add edge (u, v) to Enew\nend while\nReturn Vnew and Enew"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Procedure PrimsMST(Graph):     // here Graph is a non-empty connected weighted graph\nVnew[] = {x}                   // New subgraph Vnew with source node x\nEnew[] = {}\nwhile Vnew is not equal to V\n    u -\u003e a node from Vnew\n    v -\u003e a node that is not in Vnew such that edge u-v has the minimum cost\n                               // if two nodes have same weight, pick any of them\n    add v to Vnew\n    add edge (u, v) to Enew\nend while\nReturn Vnew and Enew",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928829465,
        "id": "00b08806-6cdf-4928-a065-e0a5724ce014",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928829465,
        "parent_id": "b4428435-6873-415d-9c1e-d463668d107b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Complexity:",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Complexity:",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928829465,
        "id": "bfc2bb8e-7fe6-4a4a-8df2-91b015a77d35",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928829465,
        "parent_id": "b4428435-6873-415d-9c1e-d463668d107b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Time complexity of the above naive approach is "
            ],
            [
              "O(V²)",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". It uses adjacency matrix. We can reduce the complexity using priority queue. When we add a new node to "
            ],
            [
              "Vnew",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", we can add its adjacent edges in the priority queue. Then pop the minimum weighted edge from it. Then the complexity will be: "
            ],
            [
              "O(ElogE)",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", where "
            ],
            [
              "E",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " is the number of edges. Again a Binary Heap can be constructed to reduce the complexity to "
            ],
            [
              "O(ElogV)",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Time complexity of the above naive approach is "
          },
          {
            "Text": "O(V²)",
            "AttrFlags": 1
          },
          {
            "Text": ". It uses adjacency matrix. We can reduce the complexity using priority queue. When we add a new node to "
          },
          {
            "Text": "Vnew",
            "AttrFlags": 1
          },
          {
            "Text": ", we can add its adjacent edges in the priority queue. Then pop the minimum weighted edge from it. Then the complexity will be: "
          },
          {
            "Text": "O(ElogE)",
            "AttrFlags": 1
          },
          {
            "Text": ", where "
          },
          {
            "Text": "E",
            "AttrFlags": 1
          },
          {
            "Text": " is the number of edges. Again a Binary Heap can be constructed to reduce the complexity to "
          },
          {
            "Text": "O(ElogV)",
            "AttrFlags": 1
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928829465,
        "id": "c07467ca-61f2-4d68-9bca-de57ba13e86f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928829465,
        "parent_id": "b4428435-6873-415d-9c1e-d463668d107b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The pseudo-code using Priority Queue is given below:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The pseudo-code using Priority Queue is given below:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928829465,
        "id": "55d8c398-7216-4205-93aa-97f40934efc1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928829465,
        "parent_id": "b4428435-6873-415d-9c1e-d463668d107b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Procedure MSTPrim(Graph, source):\nfor each u in V\n    key[u] := inf\n    parent[u] := NULL\nend for\nkey[source] := 0\nQ = Priority_Queue()\nQ = V\nwhile Q is not empty\n    u -\u003e Q.pop\n    for each v adjacent to i\n        if v belongs to Q and Edge(u,v) \u003c key[v]    // here Edge(u, v) represents\n                                                    // cost of edge(u, v)\n            parent[v] := u\n            key[v] := Edge(u, v)\n        end if\n    end for\nend while"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Procedure MSTPrim(Graph, source):\nfor each u in V\n    key[u] := inf\n    parent[u] := NULL\nend for\nkey[source] := 0\nQ = Priority_Queue()\nQ = V\nwhile Q is not empty\n    u -\u003e Q.pop\n    for each v adjacent to i\n        if v belongs to Q and Edge(u,v) \u003c key[v]    // here Edge(u, v) represents\n                                                    // cost of edge(u, v)\n            parent[v] := u\n            key[v] := Edge(u, v)\n        end if\n    end for\nend while",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928829466,
        "id": "d5f1b37b-1a55-4f0c-a0bd-fff1d02a8168",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928829466,
        "parent_id": "b4428435-6873-415d-9c1e-d463668d107b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Here "
            ],
            [
              "key[]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " stores the minimum cost of traversing "
            ],
            [
              "node-v",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". "
            ],
            [
              "parent[]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " is used to store the parent node. It is useful for traversing and printing the tree."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Here "
          },
          {
            "Text": "key[]",
            "AttrFlags": 1
          },
          {
            "Text": " stores the minimum cost of traversing "
          },
          {
            "Text": "node-v",
            "AttrFlags": 1
          },
          {
            "Text": ". "
          },
          {
            "Text": "parent[]",
            "AttrFlags": 1
          },
          {
            "Text": " is used to store the parent node. It is useful for traversing and printing the tree."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928829466,
        "id": "6008df9f-5f01-44e8-a446-ccd5903b4c6a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928829466,
        "parent_id": "b4428435-6873-415d-9c1e-d463668d107b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Below is a simple program in Java:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Below is a simple program in Java:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928829466,
        "id": "1a3ca01d-438f-4d6c-b160-f9b2433a661e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928829466,
        "parent_id": "b4428435-6873-415d-9c1e-d463668d107b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "import java.util.*;\n\npublic class Graph\n{\n   private static int infinite = 9999999;\n   int[][]  LinkCost;\n   int      NNodes;\n   Graph(int[][] mat)\n   {\n      int i, j;\n      NNodes = mat.length;\n      LinkCost = new int[NNodes][NNodes];\n      for ( i=0; i \u003c NNodes; i++)\n      {\n         for ( j=0; j \u003c NNodes; j++)\n         {\n            LinkCost[i][j] = mat[i][j];\n            if ( LinkCost[i][j] == 0 )\n               LinkCost[i][j] = infinite;\n         }\n      }\n      for ( i=0; i \u003c NNodes; i++)\n      {\n         for ( j=0; j \u003c NNodes; j++)\n            if ( LinkCost[i][j] \u003c infinite )\n               System.out.print( \" \" + LinkCost[i][j] + \" \" );\n            else\n               System.out.print(\" * \" );\n         System.out.println();\n      }\n   }\n   public int unReached(boolean[] r)\n   {\n      boolean done = true;\n      for ( int i = 0; i \u003c r.length; i++ )\n         if ( r[i] == false )\n            return i;\n      return -1;\n   }\n   public void Prim( )\n   {\n      int i, j, k, x, y;\n      boolean[] Reached = new boolean[NNodes];\n      int[] predNode = new int[NNodes];\n      Reached[0] = true;\n      for ( k = 1; k \u003c NNodes; k++ )\n      {\n         Reached[k] = false;\n      }\n      predNode[0] = 0;\n      printReachSet( Reached );\n      for (k = 1; k \u003c NNodes; k++)\n      {\n         x = y = 0;\n         for ( i = 0; i \u003c NNodes; i++ )\n            for ( j = 0; j \u003c NNodes; j++ )\n            {\n                if ( Reached[i] \u0026\u0026 !Reached[j] \u0026\u0026\n                     LinkCost[i][j] \u003c LinkCost[x][y] )\n                {\n                   x = i;\n                   y = j;\n                }\n            }\n         System.out.println(\"Min cost edge: (\" +\n                                + x + \",\" +\n                                + y + \")\" +\n                                \"cost = \" + LinkCost[x][y]);\n         predNode[y] = x;\n         Reached[y] = true;\n         printReachSet( Reached );\n         System.out.println();\n      }\n      int[] a= predNode;\n   for ( i = 0; i \u003c NNodes; i++ )\n          System.out.println( a[i] + \" --\u003e \" + i );\n   }\n   void printReachSet(boolean[] Reached )\n   {\n      System.out.print(\"ReachSet = \");\n      for (int i = 0; i \u003c Reached.length; i++ )\n         if ( Reached[i] )\n           System.out.print( i + \" \");\n      //System.out.println();\n   }\n public static void main(String[] args)\n   {\n      int[][] conn = {{0,3,0,2,0,0,0,0,4},  // 0\n                      {3,0,0,0,0,0,0,4,0},  // 1\n                      {0,0,0,6,0,1,0,2,0},  // 2\n                      {2,0,6,0,1,0,0,0,0},  // 3\n                      {0,0,0,1,0,0,0,0,8},  // 4\n                      {0,0,1,0,0,0,8,0,0},  // 5\n                      {0,0,0,0,0,8,0,0,0},  // 6\n                      {0,4,2,0,0,0,0,0,0},  // 7\n                      {4,0,0,0,8,0,0,0,0}   // 8\n                     };\n      Graph G = new Graph(conn);\n      G.Prim();\n   }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "import java.util.*;\n\npublic class Graph\n{\n   private static int infinite = 9999999;\n   int[][]  LinkCost;\n   int      NNodes;\n   Graph(int[][] mat)\n   {\n      int i, j;\n      NNodes = mat.length;\n      LinkCost = new int[NNodes][NNodes];\n      for ( i=0; i \u003c NNodes; i++)\n      {\n         for ( j=0; j \u003c NNodes; j++)\n         {\n            LinkCost[i][j] = mat[i][j];\n            if ( LinkCost[i][j] == 0 )\n               LinkCost[i][j] = infinite;\n         }\n      }\n      for ( i=0; i \u003c NNodes; i++)\n      {\n         for ( j=0; j \u003c NNodes; j++)\n            if ( LinkCost[i][j] \u003c infinite )\n               System.out.print( \" \" + LinkCost[i][j] + \" \" );\n            else\n               System.out.print(\" * \" );\n         System.out.println();\n      }\n   }\n   public int unReached(boolean[] r)\n   {\n      boolean done = true;\n      for ( int i = 0; i \u003c r.length; i++ )\n         if ( r[i] == false )\n            return i;\n      return -1;\n   }\n   public void Prim( )\n   {\n      int i, j, k, x, y;\n      boolean[] Reached = new boolean[NNodes];\n      int[] predNode = new int[NNodes];\n      Reached[0] = true;\n      for ( k = 1; k \u003c NNodes; k++ )\n      {\n         Reached[k] = false;\n      }\n      predNode[0] = 0;\n      printReachSet( Reached );\n      for (k = 1; k \u003c NNodes; k++)\n      {\n         x = y = 0;\n         for ( i = 0; i \u003c NNodes; i++ )\n            for ( j = 0; j \u003c NNodes; j++ )\n            {\n                if ( Reached[i] \u0026\u0026 !Reached[j] \u0026\u0026\n                     LinkCost[i][j] \u003c LinkCost[x][y] )\n                {\n                   x = i;\n                   y = j;\n                }\n            }\n         System.out.println(\"Min cost edge: (\" +\n                                + x + \",\" +\n                                + y + \")\" +\n                                \"cost = \" + LinkCost[x][y]);\n         predNode[y] = x;\n         Reached[y] = true;\n         printReachSet( Reached );\n         System.out.println();\n      }\n      int[] a= predNode;\n   for ( i = 0; i \u003c NNodes; i++ )\n          System.out.println( a[i] + \" --\u003e \" + i );\n   }\n   void printReachSet(boolean[] Reached )\n   {\n      System.out.print(\"ReachSet = \");\n      for (int i = 0; i \u003c Reached.length; i++ )\n         if ( Reached[i] )\n           System.out.print( i + \" \");\n      //System.out.println();\n   }\n public static void main(String[] args)\n   {\n      int[][] conn = {{0,3,0,2,0,0,0,0,4},  // 0\n                      {3,0,0,0,0,0,0,4,0},  // 1\n                      {0,0,0,6,0,1,0,2,0},  // 2\n                      {2,0,6,0,1,0,0,0,0},  // 3\n                      {0,0,0,1,0,0,0,0,8},  // 4\n                      {0,0,1,0,0,0,8,0,0},  // 5\n                      {0,0,0,0,0,8,0,0,0},  // 6\n                      {0,4,2,0,0,0,0,0,0},  // 7\n                      {4,0,0,0,8,0,0,0,0}   // 8\n                     };\n      Graph G = new Graph(conn);\n      G.Prim();\n   }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928829466,
        "id": "d2106344-053f-4328-83f7-ccc250cdbd36",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928829466,
        "parent_id": "b4428435-6873-415d-9c1e-d463668d107b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Compile the above code using "
            ],
            [
              "javac Graph.java",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Compile the above code using "
          },
          {
            "Text": "javac Graph.java",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928829466,
        "id": "43cb0214-14ce-476c-819f-d8225e08e730",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928829466,
        "parent_id": "b4428435-6873-415d-9c1e-d463668d107b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Output:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Output:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928829466,
        "id": "1adf21fb-b2dd-43fa-b656-90a628334f3e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928829466,
        "parent_id": "b4428435-6873-415d-9c1e-d463668d107b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "$ java Graph\n *  3  *  2  *  *  *  *  4\n 3  *  *  *  *  *  *  4  *\n *  *  *  6  *  1  *  2  *\n 2  *  6  *  1  *  *  *  *\n *  *  *  1  *  *  *  *  8\n *  *  1  *  *  *  8  *  *\n *  *  *  *  *  8  *  *  *\n *  4  2  *  *  *  *  *  *\n 4  *  *  *  8  *  *  *  *\nReachSet = 0 Min cost edge: (0,3)cost = 2\nReachSet = 0 3\nMin cost edge: (3,4)cost = 1\nReachSet = 0 3 4\nMin cost edge: (0,1)cost = 3\nReachSet = 0 1 3 4\nMin cost edge: (0,8)cost = 4\nReachSet = 0 1 3 4 8\nMin cost edge: (1,7)cost = 4\nReachSet = 0 1 3 4 7 8\nMin cost edge: (7,2)cost = 2\nReachSet = 0 1 2 3 4 7 8\nMin cost edge: (2,5)cost = 1\nReachSet = 0 1 2 3 4 5 7 8\nMin cost edge: (5,6)cost = 8\nReachSet = 0 1 2 3 4 5 6 7 8\n0 --\u003e 0\n0 --\u003e 1\n7 --\u003e 2\n0 --\u003e 3\n3 --\u003e 4\n2 --\u003e 5\n5 --\u003e 6\n1 --\u003e 7\n0 --\u003e 8"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "$ java Graph\n *  3  *  2  *  *  *  *  4\n 3  *  *  *  *  *  *  4  *\n *  *  *  6  *  1  *  2  *\n 2  *  6  *  1  *  *  *  *\n *  *  *  1  *  *  *  *  8\n *  *  1  *  *  *  8  *  *\n *  *  *  *  *  8  *  *  *\n *  4  2  *  *  *  *  *  *\n 4  *  *  *  8  *  *  *  *\nReachSet = 0 Min cost edge: (0,3)cost = 2\nReachSet = 0 3\nMin cost edge: (3,4)cost = 1\nReachSet = 0 3 4\nMin cost edge: (0,1)cost = 3\nReachSet = 0 1 3 4\nMin cost edge: (0,8)cost = 4\nReachSet = 0 1 3 4 8\nMin cost edge: (1,7)cost = 4\nReachSet = 0 1 3 4 7 8\nMin cost edge: (7,2)cost = 2\nReachSet = 0 1 2 3 4 7 8\nMin cost edge: (2,5)cost = 1\nReachSet = 0 1 2 3 4 5 7 8\nMin cost edge: (5,6)cost = 8\nReachSet = 0 1 2 3 4 5 6 7 8\n0 --\u003e 0\n0 --\u003e 1\n7 --\u003e 2\n0 --\u003e 3\n3 --\u003e 4\n2 --\u003e 5\n5 --\u003e 6\n1 --\u003e 7\n0 --\u003e 8",
        "code_language": "Plain Text"
      }
    ],
    "title": "Introduction To Prims Algorithm",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}