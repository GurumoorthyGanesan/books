{
  "ID": "29d60613-d225-41a4-aea7-15c9cabc9fa2",
  "Root": {
    "alive": true,
    "content": [
      "6f4264c4-d96a-48f9-b7ba-b8f8d758cb9f",
      "b4abea6d-ccc2-4045-aa1a-a20ecd59f54b",
      "ac6fe979-51f8-496e-9a4a-7a56c22fa1a2",
      "9af3fa81-66dd-447e-8696-97fe2bef38da",
      "8dc653a0-7afd-4d21-92d4-28ceee8d6d96",
      "1ed2c0a9-f23a-448e-b749-3051ab85f4ba"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551928093942,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "29d60613-d225-41a4-aea7-15c9cabc9fa2",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551928093942,
    "parent_id": "c8277fc4-6841-459e-81f4-c90a99fd83fa",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Binary Search On Sorted Numbers"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928093941,
        "id": "6f4264c4-d96a-48f9-b7ba-b8f8d758cb9f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928093941,
        "parent_id": "29d60613-d225-41a4-aea7-15c9cabc9fa2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It’s easiest to show a binary search on numbers using pseudo-code"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It’s easiest to show a binary search on numbers using pseudo-code"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928093941,
        "id": "b4abea6d-ccc2-4045-aa1a-a20ecd59f54b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928093941,
        "parent_id": "29d60613-d225-41a4-aea7-15c9cabc9fa2",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int array[1000] = { sorted list of numbers };\nint N = 100;  // number of entries in search space;\nint high, low, mid; // our temporaries\nint x; // value to search for\n\nlow = 0;\nhigh = N -1;\nwhile(low \u003c high)\n{\n    mid = (low + high)/2;\n    if(array[mid] \u003c x)\n        low = mid + 1;\n    else\n        high = mid;  \n}  \nif(array[low] == x)\n    // found, index is low\nelse\n    // not found"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int array[1000] = { sorted list of numbers };\nint N = 100;  // number of entries in search space;\nint high, low, mid; // our temporaries\nint x; // value to search for\n\nlow = 0;\nhigh = N -1;\nwhile(low \u003c high)\n{\n    mid = (low + high)/2;\n    if(array[mid] \u003c x)\n        low = mid + 1;\n    else\n        high = mid;  \n}  \nif(array[low] == x)\n    // found, index is low\nelse\n    // not found",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928093941,
        "id": "ac6fe979-51f8-496e-9a4a-7a56c22fa1a2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928093941,
        "parent_id": "29d60613-d225-41a4-aea7-15c9cabc9fa2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Do not attempt to return early by comparing array[mid] to x for equality. The extra comparison can only slow the code down. Note you need to add one to low to avoid becoming trapped by integer division always rounding down."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Do not attempt to return early by comparing array[mid] to x for equality. The extra comparison can only slow the code down. Note you need to add one to low to avoid becoming trapped by integer division always rounding down."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928093941,
        "id": "9af3fa81-66dd-447e-8696-97fe2bef38da",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928093941,
        "parent_id": "29d60613-d225-41a4-aea7-15c9cabc9fa2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Interestingly, the above version of binary search allows you to find the smallest occurrence of x in the array. If the array contains duplicates of x, the algorithm can be modified slightly in order for it to return the largest occurrence of x by simply adding to the if conditional:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Interestingly, the above version of binary search allows you to find the smallest occurrence of x in the array. If the array contains duplicates of x, the algorithm can be modified slightly in order for it to return the largest occurrence of x by simply adding to the if conditional:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928093941,
        "id": "8dc653a0-7afd-4d21-92d4-28ceee8d6d96",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928093941,
        "parent_id": "29d60613-d225-41a4-aea7-15c9cabc9fa2",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "while(low \u003c high)\n    {\n        mid = low + ((high - low) / 2);\n        if(array[mid] \u003c x || (array[mid] == x \u0026\u0026 array[mid + 1] == x))\n            low = mid + 1;\n        else\n            high = mid;  \n    }"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "while(low \u003c high)\n    {\n        mid = low + ((high - low) / 2);\n        if(array[mid] \u003c x || (array[mid] == x \u0026\u0026 array[mid + 1] == x))\n            low = mid + 1;\n        else\n            high = mid;  \n    }",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928093942,
        "id": "1ed2c0a9-f23a-448e-b749-3051ab85f4ba",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928093942,
        "parent_id": "29d60613-d225-41a4-aea7-15c9cabc9fa2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note that instead of doing "
            ],
            [
              "mid = (low + high) / 2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", it may also be a good idea to try "
            ],
            [
              "mid = low + ((high - low) / 2)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " for implementations such as Java implementations to lower the risk of getting an overflow for really large inputs."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note that instead of doing "
          },
          {
            "Text": "mid = (low + high) / 2",
            "AttrFlags": 2
          },
          {
            "Text": ", it may also be a good idea to try "
          },
          {
            "Text": "mid = low + ((high - low) / 2)",
            "AttrFlags": 2
          },
          {
            "Text": " for implementations such as Java implementations to lower the risk of getting an overflow for really large inputs."
          }
        ]
      }
    ],
    "title": "Binary Search On Sorted Numbers",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}