{
  "ID": "923d7de3-2b7b-4101-886b-f2ae9c9590a3",
  "Root": {
    "alive": true,
    "content": [
      "4f51b4bb-5bf9-4312-b4e4-3fd424611175",
      "744fa401-9eea-4f67-8a92-d41a04ccdccb",
      "da134932-bf9f-4631-bf9e-a1af05555875",
      "142f0cac-aaac-4f72-8a16-0da8ce1b55e0"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551928455698,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "923d7de3-2b7b-4101-886b-f2ae9c9590a3",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551928455698,
    "parent_id": "8c1be630-50c9-4162-b355-a5d6917f9e65",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Binary Search Tree - Python"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928455697,
        "id": "4f51b4bb-5bf9-4312-b4e4-3fd424611175",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928455697,
        "parent_id": "923d7de3-2b7b-4101-886b-f2ae9c9590a3",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class Node(object):\n    def __init__(self, val):\n        self.l_child = None\n        self.r_child = None\n        self.val = val"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class Node(object):\n    def __init__(self, val):\n        self.l_child = None\n        self.r_child = None\n        self.val = val",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928455697,
        "id": "744fa401-9eea-4f67-8a92-d41a04ccdccb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928455697,
        "parent_id": "923d7de3-2b7b-4101-886b-f2ae9c9590a3",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class BinarySearchTree(object):\n    def insert(self, root, node):\n        if root is None:\n            return node\n\n        if root.val \u003c node.val:\n            root.r_child = self.insert(root.r_child, node)\n        else:\n            root.l_child = self.insert(root.l_child, node)\n\n        return root\n\n\n    def in_order_place(self, root):\n        if not root:\n            return None\n        else:\n            self.in_order_place(root.l_child)\n            print root.val\n            self.in_order_place(root.r_child)\n\n    def pre_order_place(self, root):\n        if not root:\n            return None\n        else:\n            print root.val\n            self.pre_order_place(root.l_child)\n            self.pre_order_place(root.r_child)\n\n    def post_order_place(self, root):\n        if not root:\n            return None\n        else:\n            self.post_order_place(root.l_child)\n            self.post_order_place(root.r_child)\n            print root.val"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class BinarySearchTree(object):\n    def insert(self, root, node):\n        if root is None:\n            return node\n\n        if root.val \u003c node.val:\n            root.r_child = self.insert(root.r_child, node)\n        else:\n            root.l_child = self.insert(root.l_child, node)\n\n        return root\n\n\n    def in_order_place(self, root):\n        if not root:\n            return None\n        else:\n            self.in_order_place(root.l_child)\n            print root.val\n            self.in_order_place(root.r_child)\n\n    def pre_order_place(self, root):\n        if not root:\n            return None\n        else:\n            print root.val\n            self.pre_order_place(root.l_child)\n            self.pre_order_place(root.r_child)\n\n    def post_order_place(self, root):\n        if not root:\n            return None\n        else:\n            self.post_order_place(root.l_child)\n            self.post_order_place(root.r_child)\n            print root.val",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928455698,
        "id": "da134932-bf9f-4631-bf9e-a1af05555875",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928455698,
        "parent_id": "923d7de3-2b7b-4101-886b-f2ae9c9590a3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "“”” Create different node and insert data into it”””"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "“”” Create different node and insert data into it”””"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928455698,
        "id": "142f0cac-aaac-4f72-8a16-0da8ce1b55e0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928455698,
        "parent_id": "923d7de3-2b7b-4101-886b-f2ae9c9590a3",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "r = Node(3)\nnode = BinarySearchTree()\nnodeList = [1, 8, 5, 12, 14, 6, 15, 7, 16, 8]\n\nfor nd in nodeList:\n    node.insert(r, Node(nd))\n\nprint \"------In order ---------\"\nprint (node.in_order_place(r))\nprint \"------Pre order ---------\"\nprint (node.pre_order_place(r))\nprint \"------Post order ---------\"\nprint (node.post_order_place(r))"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "r = Node(3)\nnode = BinarySearchTree()\nnodeList = [1, 8, 5, 12, 14, 6, 15, 7, 16, 8]\n\nfor nd in nodeList:\n    node.insert(r, Node(nd))\n\nprint \"------In order ---------\"\nprint (node.in_order_place(r))\nprint \"------Pre order ---------\"\nprint (node.pre_order_place(r))\nprint \"------Post order ---------\"\nprint (node.post_order_place(r))",
        "code_language": "Plain Text"
      }
    ],
    "title": "Binary Search Tree - Python",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}