{
  "ID": "218844e2-84bd-49dc-9e92-d7f8b4d8dd06",
  "Root": {
    "alive": true,
    "content": [
      "77721f0a-37d4-42a4-9f09-86de63ed1a6b"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551929206709,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "218844e2-84bd-49dc-9e92-d7f8b4d8dd06",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551929206709,
    "parent_id": "0c0e3472-dac8-416a-833b-40ef5e725f54",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "C Implementation"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551929206708,
        "id": "77721f0a-37d4-42a4-9f09-86de63ed1a6b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551929206708,
        "parent_id": "218844e2-84bd-49dc-9e92-d7f8b4d8dd06",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class Node\n{\n\n    public int Value;\n    public Node Left, Right;\n\n    public Node(int item)\n    {\n        Value = item;\n        Left = Right = null;\n    }\n}\n\nclass Res\n{\n    public int Val;\n}\n\npublic class MaximumPathSum\n{\n    Node _root;\n    int FindMaxUtil(Node node, Res res)\n    {\n        if (node == null) return 0;\n        int l = FindMaxUtil(node.Left, res);\n        int r = FindMaxUtil(node.Right, res);\n        int maxSingle = Math.Max(Math.Max(l, r) + node.Value, node.Value);\n        int maxTop = Math.Max(maxSingle, l + r + node.Value);\n        res.Val = Math.Max(res.Val, maxTop);\n        return maxSingle;\n    }\n\n    int FindMaxSum()\n    {\n        return FindMaxSum(_root);\n    }\n\n    int FindMaxSum(Node node)\n    {\n        Res res = new Res {Val = Int32.MinValue};\n        FindMaxUtil(node, res);\n        return res.Val;\n    }\n\n    public static int Main()\n    {\n        MaximumPathSum tree = new MaximumPathSum\n        {\n            _root = new Node(10)\n            {\n                Left = new Node(2),\n                Right = new Node(10)\n            }\n        };\n        tree._root.Left.Left = new Node(20);\n        tree._root.Left.Right = new Node(1);\n        tree._root.Right.Right = new Node(-25)\n        {\n            Left = new Node(3),\n            Right = new Node(4)\n        };\n        return tree.FindMaxSum();\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class Node\n{\n\n    public int Value;\n    public Node Left, Right;\n\n    public Node(int item)\n    {\n        Value = item;\n        Left = Right = null;\n    }\n}\n\nclass Res\n{\n    public int Val;\n}\n\npublic class MaximumPathSum\n{\n    Node _root;\n    int FindMaxUtil(Node node, Res res)\n    {\n        if (node == null) return 0;\n        int l = FindMaxUtil(node.Left, res);\n        int r = FindMaxUtil(node.Right, res);\n        int maxSingle = Math.Max(Math.Max(l, r) + node.Value, node.Value);\n        int maxTop = Math.Max(maxSingle, l + r + node.Value);\n        res.Val = Math.Max(res.Val, maxTop);\n        return maxSingle;\n    }\n\n    int FindMaxSum()\n    {\n        return FindMaxSum(_root);\n    }\n\n    int FindMaxSum(Node node)\n    {\n        Res res = new Res {Val = Int32.MinValue};\n        FindMaxUtil(node, res);\n        return res.Val;\n    }\n\n    public static int Main()\n    {\n        MaximumPathSum tree = new MaximumPathSum\n        {\n            _root = new Node(10)\n            {\n                Left = new Node(2),\n                Right = new Node(10)\n            }\n        };\n        tree._root.Left.Left = new Node(20);\n        tree._root.Left.Right = new Node(1);\n        tree._root.Right.Right = new Node(-25)\n        {\n            Left = new Node(3),\n            Right = new Node(4)\n        };\n        return tree.FindMaxSum();\n    }\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "C Implementation",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}