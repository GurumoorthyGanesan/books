{
  "ID": "aeefd610-bab5-49e1-aa05-09cd9558017e",
  "Root": {
    "alive": true,
    "content": [
      "5ef973ec-6642-4c56-b620-7e5e45285772",
      "7e634043-9077-40fb-9063-42f906c311a2",
      "a6e1af07-c8e2-4a71-b1f4-1e64e2ea464a",
      "c2703321-e827-4201-9e19-9b679f5f0651",
      "fe68b64f-d7b1-4561-800c-0915715ead60"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551928442730,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "aeefd610-bab5-49e1-aa05-09cd9558017e",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551928442730,
    "parent_id": "a034d8c3-224b-46dc-bc26-d44b569e39e0",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Merge Sort Implementation in Java"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928442727,
        "id": "5ef973ec-6642-4c56-b620-7e5e45285772",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928442727,
        "parent_id": "aeefd610-bab5-49e1-aa05-09cd9558017e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Below there is the implementation in Java using a generics approach. It is the same algorithm, which is presented above."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Below there is the implementation in Java using a generics approach. It is the same algorithm, which is presented above."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928442729,
        "id": "7e634043-9077-40fb-9063-42f906c311a2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928442729,
        "parent_id": "aeefd610-bab5-49e1-aa05-09cd9558017e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public interface InPlaceSort\u003cT extends Comparable\u003cT\u003e\u003e {\nvoid sort(final T[] elements); }"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public interface InPlaceSort\u003cT extends Comparable\u003cT\u003e\u003e {\nvoid sort(final T[] elements); }",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928442730,
        "id": "a6e1af07-c8e2-4a71-b1f4-1e64e2ea464a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928442730,
        "parent_id": "aeefd610-bab5-49e1-aa05-09cd9558017e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class MergeSort \u003c T extends Comparable \u003c T \u003e\u003e implements InPlaceSort \u003c T \u003e {"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class MergeSort \u003c T extends Comparable \u003c T \u003e\u003e implements InPlaceSort \u003c T \u003e {",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928442730,
        "id": "c2703321-e827-4201-9e19-9b679f5f0651",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928442730,
        "parent_id": "aeefd610-bab5-49e1-aa05-09cd9558017e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "@Override\npublic void sort(T[] elements) {\n    T[] arr = (T[]) new Comparable[elements.length];\n    sort(elements, arr, 0, elements.length - 1);\n}\n\n// We check both our sides and then merge them\nprivate void sort(T[] elements, T[] arr, int low, int high) {\n    if (low \u003e= high) return;\n    int mid = low + (high - low) / 2;\n    sort(elements, arr, low, mid);\n    sort(elements, arr, mid + 1, high);\n    merge(elements, arr, low, high, mid);\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "@Override\npublic void sort(T[] elements) {\n    T[] arr = (T[]) new Comparable[elements.length];\n    sort(elements, arr, 0, elements.length - 1);\n}\n\n// We check both our sides and then merge them\nprivate void sort(T[] elements, T[] arr, int low, int high) {\n    if (low \u003e= high) return;\n    int mid = low + (high - low) / 2;\n    sort(elements, arr, low, mid);\n    sort(elements, arr, mid + 1, high);\n    merge(elements, arr, low, high, mid);\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928442730,
        "id": "fe68b64f-d7b1-4561-800c-0915715ead60",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928442730,
        "parent_id": "aeefd610-bab5-49e1-aa05-09cd9558017e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "private void merge(T[] a, T[] b, int low, int high, int mid) {\n    int i = low;\n    int j = mid + 1;\n\n    // We select the smallest element of the two. And then we put it into b\n    for (int k = low; k \u003c= high; k++) {\n\n        if (i \u003c= mid \u0026\u0026 j \u003c= high) {\n            if (a[i].compareTo(a[j]) \u003e= 0) {\n                b[k] = a[j++];\n            } else {\n                b[k] = a[i++];\n            }\n        } else if (j \u003e high \u0026\u0026 i \u003c= mid) {\n            b[k] = a[i++];\n        } else if (i \u003e mid \u0026\u0026 j \u003c= high) {\n            b[k] = a[j++];\n        }\n    }\n\n    for (int n = low; n \u003c= high; n++) {\n        a[n] = b[n];\n    }}}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "private void merge(T[] a, T[] b, int low, int high, int mid) {\n    int i = low;\n    int j = mid + 1;\n\n    // We select the smallest element of the two. And then we put it into b\n    for (int k = low; k \u003c= high; k++) {\n\n        if (i \u003c= mid \u0026\u0026 j \u003c= high) {\n            if (a[i].compareTo(a[j]) \u003e= 0) {\n                b[k] = a[j++];\n            } else {\n                b[k] = a[i++];\n            }\n        } else if (j \u003e high \u0026\u0026 i \u003c= mid) {\n            b[k] = a[i++];\n        } else if (i \u003e mid \u0026\u0026 j \u003c= high) {\n            b[k] = a[j++];\n        }\n    }\n\n    for (int n = low; n \u003c= high; n++) {\n        a[n] = b[n];\n    }}}",
        "code_language": "Plain Text"
      }
    ],
    "title": "Merge Sort Implementation in Java",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}