{
  "ID": "9e69da83-fd17-43db-a31b-4f119ca3155c",
  "Root": {
    "alive": true,
    "content": [
      "21ae21e7-2160-4f87-8af9-c20a083ff080",
      "0500300a-a9a2-4b9e-ad70-7d7cf2696217",
      "0e1bedce-7c28-4755-8631-fc80d55f3dd6",
      "374b723d-201f-4e88-856a-799198490f09",
      "f523adf0-f4e7-4946-a16e-fee24b212a81",
      "963e3b96-8ad9-439b-aafd-e68d89ddec50",
      "c36606de-0383-4faa-944d-abcb63bd0dc2",
      "7d2a08eb-614b-4077-a4c8-3cf92416cb90",
      "2831eb51-6254-4883-aa3a-5ce03659eb9d",
      "e3228ed6-e766-449f-85ed-117966db6e31",
      "436b12de-4014-460c-8991-51d9e1995b15",
      "8225809e-260c-4bd1-9764-3ef1d62bae42",
      "41c8aff1-4404-43d8-b0a6-fdc58e14acf6",
      "68f933d0-e246-4b4a-91ce-5a429903e6b4",
      "0595abc1-da6c-4fcf-ad33-f89e000a1393",
      "600964a6-2eee-4430-a91c-ba6ae68ee253",
      "92852da1-a85d-4662-ba13-263bd2cdbe1e",
      "facd66f8-3521-4ae4-8494-0c0197722c43",
      "c8bf1eb4-ee1a-48d7-8348-14766bf710a3",
      "bd83fab8-e7e5-446a-a308-bb2f7667e622",
      "d72e631d-c2df-4118-b7f0-e5be37118a72",
      "ae0d2de1-3e78-4c8a-a7be-0abba977e6b3",
      "019daf51-8985-4424-8967-5d4b99c703fc",
      "e71d9c3b-00d6-4f22-b9e7-30fef6d8f017",
      "0be6099f-8ae6-4ed8-8853-6225925aea14"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551928503591,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "9e69da83-fd17-43db-a31b-4f119ca3155c",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551928503591,
    "parent_id": "ec9d0bba-8ded-4256-866e-28adfde6676e",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Introduction To Knuth-Morris-Pratt KMP Algorithm"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928503576,
        "id": "21ae21e7-2160-4f87-8af9-c20a083ff080",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928503576,
        "parent_id": "9e69da83-fd17-43db-a31b-4f119ca3155c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Suppose that we have a "
            ],
            [
              "text",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " and a "
            ],
            [
              "pattern",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ". We need to determine if the pattern exists in the text or not. For example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Suppose that we have a "
          },
          {
            "Text": "text",
            "AttrFlags": 4
          },
          {
            "Text": " and a "
          },
          {
            "Text": "pattern",
            "AttrFlags": 4
          },
          {
            "Text": ". We need to determine if the pattern exists in the text or not. For example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928503577,
        "id": "0500300a-a9a2-4b9e-ad70-7d7cf2696217",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928503577,
        "parent_id": "9e69da83-fd17-43db-a31b-4f119ca3155c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "+-------+---+---+---+---+---+---+---+---+\n| Index | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 |\n+-------+---+---+---+---+---+---+---+---+\n|  Text | a | b | c | b | c | g | l | x |\n+-------+---+---+---+---+---+---+---+---+\n\n+---------+---+---+---+---+\n| Index   | 0 | 1 | 2 | 3 |\n+---------+---+---+---+---+\n| Pattern | b | c | g | l |\n+---------+---+---+---+---+"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "+-------+---+---+---+---+---+---+---+---+\n| Index | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 |\n+-------+---+---+---+---+---+---+---+---+\n|  Text | a | b | c | b | c | g | l | x |\n+-------+---+---+---+---+---+---+---+---+\n\n+---------+---+---+---+---+\n| Index   | 0 | 1 | 2 | 3 |\n+---------+---+---+---+---+\n| Pattern | b | c | g | l |\n+---------+---+---+---+---+",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928503577,
        "id": "0e1bedce-7c28-4755-8631-fc80d55f3dd6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928503577,
        "parent_id": "9e69da83-fd17-43db-a31b-4f119ca3155c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This "
            ],
            [
              "pattern",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " does exist in the "
            ],
            [
              "text",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ". So our substring search should return "
            ],
            [
              "3",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", the index of the position from which this "
            ],
            [
              "pattern",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " starts. So how does our brute force substring search procedure work?"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This "
          },
          {
            "Text": "pattern",
            "AttrFlags": 4
          },
          {
            "Text": " does exist in the "
          },
          {
            "Text": "text",
            "AttrFlags": 4
          },
          {
            "Text": ". So our substring search should return "
          },
          {
            "Text": "3",
            "AttrFlags": 1
          },
          {
            "Text": ", the index of the position from which this "
          },
          {
            "Text": "pattern",
            "AttrFlags": 4
          },
          {
            "Text": " starts. So how does our brute force substring search procedure work?"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928503579,
        "id": "374b723d-201f-4e88-856a-799198490f09",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928503579,
        "parent_id": "9e69da83-fd17-43db-a31b-4f119ca3155c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "What we usually do is: we start from the "
            ],
            [
              "0th",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " index of the "
            ],
            [
              "text",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " and the "
            ],
            [
              "0th",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " index of our *pattern and we compare "
            ],
            [
              "Text[0]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " with "
            ],
            [
              "Pattern[0]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". Since they are not a match, we go to the next index of our "
            ],
            [
              "text",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " and we compare "
            ],
            [
              "Text[1]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " with "
            ],
            [
              "Pattern[0]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". Since this is a match, we increment the index of our "
            ],
            [
              "pattern",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " and the index of the "
            ],
            [
              "Text",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " also. We compare "
            ],
            [
              "Text[2]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " with "
            ],
            [
              "Pattern[1]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". They are also a match. Following the same procedure stated before, we now compare "
            ],
            [
              "Text[3]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " with "
            ],
            [
              "Pattern[2]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". As they do not match, we start from the next position where we started finding the match. That is index "
            ],
            [
              "2",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " of the "
            ],
            [
              "Text",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ". We compare "
            ],
            [
              "Text[2]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " with "
            ],
            [
              "Pattern[0]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". They don’t match. Then incrementing index of the "
            ],
            [
              "Text",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ", we compare "
            ],
            [
              "Text[3]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " with "
            ],
            [
              "Pattern[0]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". They match. Again "
            ],
            [
              "Text[4]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "Pattern[1]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " match, "
            ],
            [
              "Text[5]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "Pattern[2]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " match and "
            ],
            [
              "Text[6]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "Pattern[3]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " match. Since we’ve reached the end of our "
            ],
            [
              "Pattern",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ", we now return the index from which our match started, that is "
            ],
            [
              "3",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". If our "
            ],
            [
              "pattern",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " was: "
            ],
            [
              "bcgll",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", that means if the "
            ],
            [
              "pattern",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " didn’t exist in our "
            ],
            [
              "text",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ", our search should return exception or "
            ],
            [
              "-1",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " or any other predefined value. We can clearly see that, in the worst case, this algorithm would take "
            ],
            [
              "O(mn)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " time where "
            ],
            [
              "m",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " is the length of the "
            ],
            [
              "Text",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "n",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " is the length of the "
            ],
            [
              "Pattern",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ". How do we reduce this time complexity? This is where KMP Substring Search Algorithm comes into the picture."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "What we usually do is: we start from the "
          },
          {
            "Text": "0th",
            "AttrFlags": 1
          },
          {
            "Text": " index of the "
          },
          {
            "Text": "text",
            "AttrFlags": 4
          },
          {
            "Text": " and the "
          },
          {
            "Text": "0th",
            "AttrFlags": 1
          },
          {
            "Text": " index of our *pattern and we compare "
          },
          {
            "Text": "Text[0]",
            "AttrFlags": 1
          },
          {
            "Text": " with "
          },
          {
            "Text": "Pattern[0]",
            "AttrFlags": 1
          },
          {
            "Text": ". Since they are not a match, we go to the next index of our "
          },
          {
            "Text": "text",
            "AttrFlags": 4
          },
          {
            "Text": " and we compare "
          },
          {
            "Text": "Text[1]",
            "AttrFlags": 1
          },
          {
            "Text": " with "
          },
          {
            "Text": "Pattern[0]",
            "AttrFlags": 1
          },
          {
            "Text": ". Since this is a match, we increment the index of our "
          },
          {
            "Text": "pattern",
            "AttrFlags": 4
          },
          {
            "Text": " and the index of the "
          },
          {
            "Text": "Text",
            "AttrFlags": 4
          },
          {
            "Text": " also. We compare "
          },
          {
            "Text": "Text[2]",
            "AttrFlags": 1
          },
          {
            "Text": " with "
          },
          {
            "Text": "Pattern[1]",
            "AttrFlags": 1
          },
          {
            "Text": ". They are also a match. Following the same procedure stated before, we now compare "
          },
          {
            "Text": "Text[3]",
            "AttrFlags": 1
          },
          {
            "Text": " with "
          },
          {
            "Text": "Pattern[2]",
            "AttrFlags": 1
          },
          {
            "Text": ". As they do not match, we start from the next position where we started finding the match. That is index "
          },
          {
            "Text": "2",
            "AttrFlags": 1
          },
          {
            "Text": " of the "
          },
          {
            "Text": "Text",
            "AttrFlags": 4
          },
          {
            "Text": ". We compare "
          },
          {
            "Text": "Text[2]",
            "AttrFlags": 1
          },
          {
            "Text": " with "
          },
          {
            "Text": "Pattern[0]",
            "AttrFlags": 1
          },
          {
            "Text": ". They don’t match. Then incrementing index of the "
          },
          {
            "Text": "Text",
            "AttrFlags": 4
          },
          {
            "Text": ", we compare "
          },
          {
            "Text": "Text[3]",
            "AttrFlags": 1
          },
          {
            "Text": " with "
          },
          {
            "Text": "Pattern[0]",
            "AttrFlags": 1
          },
          {
            "Text": ". They match. Again "
          },
          {
            "Text": "Text[4]",
            "AttrFlags": 1
          },
          {
            "Text": " and "
          },
          {
            "Text": "Pattern[1]",
            "AttrFlags": 1
          },
          {
            "Text": " match, "
          },
          {
            "Text": "Text[5]",
            "AttrFlags": 1
          },
          {
            "Text": " and "
          },
          {
            "Text": "Pattern[2]",
            "AttrFlags": 1
          },
          {
            "Text": " match and "
          },
          {
            "Text": "Text[6]",
            "AttrFlags": 1
          },
          {
            "Text": " and "
          },
          {
            "Text": "Pattern[3]",
            "AttrFlags": 1
          },
          {
            "Text": " match. Since we’ve reached the end of our "
          },
          {
            "Text": "Pattern",
            "AttrFlags": 4
          },
          {
            "Text": ", we now return the index from which our match started, that is "
          },
          {
            "Text": "3",
            "AttrFlags": 1
          },
          {
            "Text": ". If our "
          },
          {
            "Text": "pattern",
            "AttrFlags": 4
          },
          {
            "Text": " was: "
          },
          {
            "Text": "bcgll",
            "AttrFlags": 2
          },
          {
            "Text": ", that means if the "
          },
          {
            "Text": "pattern",
            "AttrFlags": 4
          },
          {
            "Text": " didn’t exist in our "
          },
          {
            "Text": "text",
            "AttrFlags": 4
          },
          {
            "Text": ", our search should return exception or "
          },
          {
            "Text": "-1",
            "AttrFlags": 1
          },
          {
            "Text": " or any other predefined value. We can clearly see that, in the worst case, this algorithm would take "
          },
          {
            "Text": "O(mn)",
            "AttrFlags": 2
          },
          {
            "Text": " time where "
          },
          {
            "Text": "m",
            "AttrFlags": 1
          },
          {
            "Text": " is the length of the "
          },
          {
            "Text": "Text",
            "AttrFlags": 4
          },
          {
            "Text": " and "
          },
          {
            "Text": "n",
            "AttrFlags": 1
          },
          {
            "Text": " is the length of the "
          },
          {
            "Text": "Pattern",
            "AttrFlags": 4
          },
          {
            "Text": ". How do we reduce this time complexity? This is where KMP Substring Search Algorithm comes into the picture."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928503580,
        "id": "f523adf0-f4e7-4946-a16e-fee24b212a81",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928503580,
        "parent_id": "9e69da83-fd17-43db-a31b-4f119ca3155c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "Knuth-Morris-Pratt String Searching Algorithm",
              [
                [
                  "a",
                  "https://en.wikipedia.org/wiki/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm"
                ]
              ]
            ],
            [
              " or KMP Algorithm searches for occurrences of a “Pattern” within a main “Text” by employing the observation that when a mismatch occurs, the word itself embodies sufficient information to determine where the next match could begin, thus bypassing re-examination of previously matched characters. The algorithm was conceived in 1970 by "
            ],
            [
              "Donuld Knuth",
              [
                [
                  "a",
                  "https://en.wikipedia.org/wiki/Donald_Knuth"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "Vaughan Pratt",
              [
                [
                  "a",
                  "https://en.wikipedia.org/wiki/Vaughan_Pratt"
                ]
              ]
            ],
            [
              " and independently by "
            ],
            [
              "James H. Morris",
              [
                [
                  "a",
                  "https://en.wikipedia.org/wiki/James_H._Morris"
                ]
              ]
            ],
            [
              ". The trio published it jointly in 1977."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "Knuth-Morris-Pratt String Searching Algorithm",
            "Link": "https://en.wikipedia.org/wiki/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm"
          },
          {
            "Text": " or KMP Algorithm searches for occurrences of a “Pattern” within a main “Text” by employing the observation that when a mismatch occurs, the word itself embodies sufficient information to determine where the next match could begin, thus bypassing re-examination of previously matched characters. The algorithm was conceived in 1970 by "
          },
          {
            "Text": "Donuld Knuth",
            "Link": "https://en.wikipedia.org/wiki/Donald_Knuth"
          },
          {
            "Text": " and "
          },
          {
            "Text": "Vaughan Pratt",
            "Link": "https://en.wikipedia.org/wiki/Vaughan_Pratt"
          },
          {
            "Text": " and independently by "
          },
          {
            "Text": "James H. Morris",
            "Link": "https://en.wikipedia.org/wiki/James_H._Morris"
          },
          {
            "Text": ". The trio published it jointly in 1977."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928503580,
        "id": "963e3b96-8ad9-439b-aafd-e68d89ddec50",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928503580,
        "parent_id": "9e69da83-fd17-43db-a31b-4f119ca3155c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Let’s extend our example "
            ],
            [
              "Text",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "Pattern",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " for better understanding:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Let’s extend our example "
          },
          {
            "Text": "Text",
            "AttrFlags": 4
          },
          {
            "Text": " and "
          },
          {
            "Text": "Pattern",
            "AttrFlags": 4
          },
          {
            "Text": " for better understanding:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928503581,
        "id": "c36606de-0383-4faa-944d-abcb63bd0dc2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928503581,
        "parent_id": "9e69da83-fd17-43db-a31b-4f119ca3155c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "+-------+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n| Index |0 |1 |2 |3 |4 |5 |6 |7 |8 |9 |10|11|12|13|14|15|16|17|18|19|20|21|22|\n+-------+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n|  Text |a |b |c |x |a |b |c |d |a |b |x |a |b |c |d |a |b |c |d |a |b |c |y |\n+-------+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\n+---------+---+---+---+---+---+---+---+---+\n|  Index  | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 |\n+---------+---+---+---+---+---+---+---+---+\n| Pattern | a | b | c | d | a | b | c | y |\n+---------+---+---+---+---+---+---+---+---+"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "+-------+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n| Index |0 |1 |2 |3 |4 |5 |6 |7 |8 |9 |10|11|12|13|14|15|16|17|18|19|20|21|22|\n+-------+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n|  Text |a |b |c |x |a |b |c |d |a |b |x |a |b |c |d |a |b |c |d |a |b |c |y |\n+-------+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\n+---------+---+---+---+---+---+---+---+---+\n|  Index  | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 |\n+---------+---+---+---+---+---+---+---+---+\n| Pattern | a | b | c | d | a | b | c | y |\n+---------+---+---+---+---+---+---+---+---+",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928503582,
        "id": "7d2a08eb-614b-4077-a4c8-3cf92416cb90",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928503582,
        "parent_id": "9e69da83-fd17-43db-a31b-4f119ca3155c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "At first, our "
            ],
            [
              "Text",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "Pattern",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " matches till index "
            ],
            [
              "2",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". "
            ],
            [
              "Text[3]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "Pattern[3]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " doesn’t match. So our aim is to not go backwards in this "
            ],
            [
              "Text",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ", that is, in case of a mismatch, we don’t want our matching to begin again from the position that we started matching with. To achieve that, we’ll look for a "
            ],
            [
              "suffix",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " in our "
            ],
            [
              "Pattern",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " right before our mismatch occurred (substring "
            ],
            [
              "abc",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "), which is also a "
            ],
            [
              "prefix",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " of the substring of our "
            ],
            [
              "Pattern",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ". For our example, since all the characters are unique, there is no suffix, that is the prefix of our matched substring. So what that means is, our next comparison will start from index "
            ],
            [
              "0",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". Hold on for a bit, you’ll understand why we did this. Next, we compare "
            ],
            [
              "Text[3]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " with "
            ],
            [
              "Pattern[0]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " and it doesn’t match. After that, for "
            ],
            [
              "Text",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " from index "
            ],
            [
              "4",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " to index "
            ],
            [
              "9",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " and for "
            ],
            [
              "Pattern",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " from index "
            ],
            [
              "0",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " to index "
            ],
            [
              "5",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", we find a match. We find a mismatch in "
            ],
            [
              "Text[10]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "Pattern[6]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". So we take the substring from "
            ],
            [
              "Pattern",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " right before the point where mismatch occurs (substring "
            ],
            [
              "abcdabc",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "), we check for a suffix, that is also a prefix of this substring. We can see here "
            ],
            [
              "ab",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " is both the suffix and prefix of this substring. What that means is, since we’ve matched until "
            ],
            [
              "Text[10]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", the characters right before the mismatch is "
            ],
            [
              "ab",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". What we can infer from it is that since "
            ],
            [
              "ab",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " is also a prefix of the substring we took, we don’t have to check "
            ],
            [
              "ab",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " again and the next check can start from "
            ],
            [
              "Text[10]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "Pattern[2]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". We didn’t have to look back to the whole "
            ],
            [
              "Text",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ", we can start directly from where our mismatch occurred. Now we check "
            ],
            [
              "Text[10]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "Pattern[2]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", since it’s a mismatch, and the substring before mismatch ("
            ],
            [
              "abc",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ") doesn’t contain a suffix which is also a prefix, we check "
            ],
            [
              "Text[10]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "Pattern[0]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", they don’t match. After that for "
            ],
            [
              "Text",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " from index "
            ],
            [
              "11",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " to index "
            ],
            [
              "17",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " and for "
            ],
            [
              "Pattern",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " from index "
            ],
            [
              "0",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " to index "
            ],
            [
              "6",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". We find a mismatch in "
            ],
            [
              "Text[18]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "Pattern[7]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". So again we check the substring before mismatch (substring "
            ],
            [
              "abcdabc",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ") and find "
            ],
            [
              "abc",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " is both the suffix and the prefix. So since we matched till "
            ],
            [
              "Pattern[7]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "abc",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " must be before "
            ],
            [
              "Text[18]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". That means, we don’t need to compare until "
            ],
            [
              "Text[17]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " and our comparison will start from "
            ],
            [
              "Text[18]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "Pattern[3]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". Thus we will find a match and we’ll return "
            ],
            [
              "15",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " which is our starting index of the match. This is how our KMP Substring Search works using suffix and prefix information."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "At first, our "
          },
          {
            "Text": "Text",
            "AttrFlags": 4
          },
          {
            "Text": " and "
          },
          {
            "Text": "Pattern",
            "AttrFlags": 4
          },
          {
            "Text": " matches till index "
          },
          {
            "Text": "2",
            "AttrFlags": 1
          },
          {
            "Text": ". "
          },
          {
            "Text": "Text[3]",
            "AttrFlags": 1
          },
          {
            "Text": " and "
          },
          {
            "Text": "Pattern[3]",
            "AttrFlags": 1
          },
          {
            "Text": " doesn’t match. So our aim is to not go backwards in this "
          },
          {
            "Text": "Text",
            "AttrFlags": 4
          },
          {
            "Text": ", that is, in case of a mismatch, we don’t want our matching to begin again from the position that we started matching with. To achieve that, we’ll look for a "
          },
          {
            "Text": "suffix",
            "AttrFlags": 1
          },
          {
            "Text": " in our "
          },
          {
            "Text": "Pattern",
            "AttrFlags": 4
          },
          {
            "Text": " right before our mismatch occurred (substring "
          },
          {
            "Text": "abc",
            "AttrFlags": 1
          },
          {
            "Text": "), which is also a "
          },
          {
            "Text": "prefix",
            "AttrFlags": 1
          },
          {
            "Text": " of the substring of our "
          },
          {
            "Text": "Pattern",
            "AttrFlags": 4
          },
          {
            "Text": ". For our example, since all the characters are unique, there is no suffix, that is the prefix of our matched substring. So what that means is, our next comparison will start from index "
          },
          {
            "Text": "0",
            "AttrFlags": 1
          },
          {
            "Text": ". Hold on for a bit, you’ll understand why we did this. Next, we compare "
          },
          {
            "Text": "Text[3]",
            "AttrFlags": 1
          },
          {
            "Text": " with "
          },
          {
            "Text": "Pattern[0]",
            "AttrFlags": 1
          },
          {
            "Text": " and it doesn’t match. After that, for "
          },
          {
            "Text": "Text",
            "AttrFlags": 4
          },
          {
            "Text": " from index "
          },
          {
            "Text": "4",
            "AttrFlags": 1
          },
          {
            "Text": " to index "
          },
          {
            "Text": "9",
            "AttrFlags": 1
          },
          {
            "Text": " and for "
          },
          {
            "Text": "Pattern",
            "AttrFlags": 4
          },
          {
            "Text": " from index "
          },
          {
            "Text": "0",
            "AttrFlags": 1
          },
          {
            "Text": " to index "
          },
          {
            "Text": "5",
            "AttrFlags": 1
          },
          {
            "Text": ", we find a match. We find a mismatch in "
          },
          {
            "Text": "Text[10]",
            "AttrFlags": 1
          },
          {
            "Text": " and "
          },
          {
            "Text": "Pattern[6]",
            "AttrFlags": 1
          },
          {
            "Text": ". So we take the substring from "
          },
          {
            "Text": "Pattern",
            "AttrFlags": 4
          },
          {
            "Text": " right before the point where mismatch occurs (substring "
          },
          {
            "Text": "abcdabc",
            "AttrFlags": 1
          },
          {
            "Text": "), we check for a suffix, that is also a prefix of this substring. We can see here "
          },
          {
            "Text": "ab",
            "AttrFlags": 1
          },
          {
            "Text": " is both the suffix and prefix of this substring. What that means is, since we’ve matched until "
          },
          {
            "Text": "Text[10]",
            "AttrFlags": 1
          },
          {
            "Text": ", the characters right before the mismatch is "
          },
          {
            "Text": "ab",
            "AttrFlags": 1
          },
          {
            "Text": ". What we can infer from it is that since "
          },
          {
            "Text": "ab",
            "AttrFlags": 1
          },
          {
            "Text": " is also a prefix of the substring we took, we don’t have to check "
          },
          {
            "Text": "ab",
            "AttrFlags": 1
          },
          {
            "Text": " again and the next check can start from "
          },
          {
            "Text": "Text[10]",
            "AttrFlags": 1
          },
          {
            "Text": " and "
          },
          {
            "Text": "Pattern[2]",
            "AttrFlags": 1
          },
          {
            "Text": ". We didn’t have to look back to the whole "
          },
          {
            "Text": "Text",
            "AttrFlags": 4
          },
          {
            "Text": ", we can start directly from where our mismatch occurred. Now we check "
          },
          {
            "Text": "Text[10]",
            "AttrFlags": 1
          },
          {
            "Text": " and "
          },
          {
            "Text": "Pattern[2]",
            "AttrFlags": 1
          },
          {
            "Text": ", since it’s a mismatch, and the substring before mismatch ("
          },
          {
            "Text": "abc",
            "AttrFlags": 1
          },
          {
            "Text": ") doesn’t contain a suffix which is also a prefix, we check "
          },
          {
            "Text": "Text[10]",
            "AttrFlags": 1
          },
          {
            "Text": " and "
          },
          {
            "Text": "Pattern[0]",
            "AttrFlags": 1
          },
          {
            "Text": ", they don’t match. After that for "
          },
          {
            "Text": "Text",
            "AttrFlags": 4
          },
          {
            "Text": " from index "
          },
          {
            "Text": "11",
            "AttrFlags": 1
          },
          {
            "Text": " to index "
          },
          {
            "Text": "17",
            "AttrFlags": 1
          },
          {
            "Text": " and for "
          },
          {
            "Text": "Pattern",
            "AttrFlags": 4
          },
          {
            "Text": " from index "
          },
          {
            "Text": "0",
            "AttrFlags": 1
          },
          {
            "Text": " to index "
          },
          {
            "Text": "6",
            "AttrFlags": 1
          },
          {
            "Text": ". We find a mismatch in "
          },
          {
            "Text": "Text[18]",
            "AttrFlags": 1
          },
          {
            "Text": " and "
          },
          {
            "Text": "Pattern[7]",
            "AttrFlags": 1
          },
          {
            "Text": ". So again we check the substring before mismatch (substring "
          },
          {
            "Text": "abcdabc",
            "AttrFlags": 1
          },
          {
            "Text": ") and find "
          },
          {
            "Text": "abc",
            "AttrFlags": 1
          },
          {
            "Text": " is both the suffix and the prefix. So since we matched till "
          },
          {
            "Text": "Pattern[7]",
            "AttrFlags": 1
          },
          {
            "Text": ", "
          },
          {
            "Text": "abc",
            "AttrFlags": 1
          },
          {
            "Text": " must be before "
          },
          {
            "Text": "Text[18]",
            "AttrFlags": 1
          },
          {
            "Text": ". That means, we don’t need to compare until "
          },
          {
            "Text": "Text[17]",
            "AttrFlags": 1
          },
          {
            "Text": " and our comparison will start from "
          },
          {
            "Text": "Text[18]",
            "AttrFlags": 1
          },
          {
            "Text": " and "
          },
          {
            "Text": "Pattern[3]",
            "AttrFlags": 1
          },
          {
            "Text": ". Thus we will find a match and we’ll return "
          },
          {
            "Text": "15",
            "AttrFlags": 1
          },
          {
            "Text": " which is our starting index of the match. This is how our KMP Substring Search works using suffix and prefix information."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928503583,
        "id": "2831eb51-6254-4883-aa3a-5ce03659eb9d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928503583,
        "parent_id": "9e69da83-fd17-43db-a31b-4f119ca3155c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Now, how do we efficiently compute if suffix is same as prefix and at what point to start the check if there is a mismatch of character between "
            ],
            [
              "Text",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "Pattern",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ". Let’s take a look at an example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Now, how do we efficiently compute if suffix is same as prefix and at what point to start the check if there is a mismatch of character between "
          },
          {
            "Text": "Text",
            "AttrFlags": 4
          },
          {
            "Text": " and "
          },
          {
            "Text": "Pattern",
            "AttrFlags": 4
          },
          {
            "Text": ". Let’s take a look at an example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928503583,
        "id": "e3228ed6-e766-449f-85ed-117966db6e31",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928503583,
        "parent_id": "9e69da83-fd17-43db-a31b-4f119ca3155c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "+---------+---+---+---+---+---+---+---+---+\n|  Index  | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 |\n+---------+---+---+---+---+---+---+---+---+\n| Pattern | a | b | c | d | a | b | c | a |\n+---------+---+---+---+---+---+---+---+---+"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "+---------+---+---+---+---+---+---+---+---+\n|  Index  | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 |\n+---------+---+---+---+---+---+---+---+---+\n| Pattern | a | b | c | d | a | b | c | a |\n+---------+---+---+---+---+---+---+---+---+",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928503584,
        "id": "436b12de-4014-460c-8991-51d9e1995b15",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928503584,
        "parent_id": "9e69da83-fd17-43db-a31b-4f119ca3155c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We’ll generate an array containing the required information. Let’s call the array "
            ],
            [
              "S",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". The size of the array will be same as the length of the pattern. Since the first letter of the "
            ],
            [
              "Pattern",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " can’t be the suffix of any prefix, we’ll put "
            ],
            [
              "S[0]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " = "
            ],
            [
              "0",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". We take "
            ],
            [
              "i",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " = "
            ],
            [
              "1",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "j",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " = "
            ],
            [
              "0",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " at first. At each step we compare "
            ],
            [
              "Pattern[i]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "Pattern[j]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " and increment "
            ],
            [
              "i",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". If there is a match we put "
            ],
            [
              "S[i]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " = "
            ],
            [
              "j",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " + "
            ],
            [
              "1",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " and increment "
            ],
            [
              "j",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", if there is a mismatch, we check the previous value position of "
            ],
            [
              "j",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " (if available) and set "
            ],
            [
              "j",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " = "
            ],
            [
              "S[j-1]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " (if "
            ],
            [
              "j",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " is not equal to "
            ],
            [
              "0",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "), we keep doing this until "
            ],
            [
              "S[j]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " doesn’t match with "
            ],
            [
              "S[i]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "j",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " doesn’t become "
            ],
            [
              "0",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". For the later one, we put "
            ],
            [
              "S[i]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " = "
            ],
            [
              "0",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". For our example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "We’ll generate an array containing the required information. Let’s call the array "
          },
          {
            "Text": "S",
            "AttrFlags": 1
          },
          {
            "Text": ". The size of the array will be same as the length of the pattern. Since the first letter of the "
          },
          {
            "Text": "Pattern",
            "AttrFlags": 4
          },
          {
            "Text": " can’t be the suffix of any prefix, we’ll put "
          },
          {
            "Text": "S[0]",
            "AttrFlags": 1
          },
          {
            "Text": " = "
          },
          {
            "Text": "0",
            "AttrFlags": 1
          },
          {
            "Text": ". We take "
          },
          {
            "Text": "i",
            "AttrFlags": 1
          },
          {
            "Text": " = "
          },
          {
            "Text": "1",
            "AttrFlags": 1
          },
          {
            "Text": " and "
          },
          {
            "Text": "j",
            "AttrFlags": 1
          },
          {
            "Text": " = "
          },
          {
            "Text": "0",
            "AttrFlags": 1
          },
          {
            "Text": " at first. At each step we compare "
          },
          {
            "Text": "Pattern[i]",
            "AttrFlags": 1
          },
          {
            "Text": " and "
          },
          {
            "Text": "Pattern[j]",
            "AttrFlags": 1
          },
          {
            "Text": " and increment "
          },
          {
            "Text": "i",
            "AttrFlags": 1
          },
          {
            "Text": ". If there is a match we put "
          },
          {
            "Text": "S[i]",
            "AttrFlags": 1
          },
          {
            "Text": " = "
          },
          {
            "Text": "j",
            "AttrFlags": 1
          },
          {
            "Text": " + "
          },
          {
            "Text": "1",
            "AttrFlags": 1
          },
          {
            "Text": " and increment "
          },
          {
            "Text": "j",
            "AttrFlags": 1
          },
          {
            "Text": ", if there is a mismatch, we check the previous value position of "
          },
          {
            "Text": "j",
            "AttrFlags": 1
          },
          {
            "Text": " (if available) and set "
          },
          {
            "Text": "j",
            "AttrFlags": 1
          },
          {
            "Text": " = "
          },
          {
            "Text": "S[j-1]",
            "AttrFlags": 1
          },
          {
            "Text": " (if "
          },
          {
            "Text": "j",
            "AttrFlags": 1
          },
          {
            "Text": " is not equal to "
          },
          {
            "Text": "0",
            "AttrFlags": 1
          },
          {
            "Text": "), we keep doing this until "
          },
          {
            "Text": "S[j]",
            "AttrFlags": 1
          },
          {
            "Text": " doesn’t match with "
          },
          {
            "Text": "S[i]",
            "AttrFlags": 1
          },
          {
            "Text": " or "
          },
          {
            "Text": "j",
            "AttrFlags": 1
          },
          {
            "Text": " doesn’t become "
          },
          {
            "Text": "0",
            "AttrFlags": 1
          },
          {
            "Text": ". For the later one, we put "
          },
          {
            "Text": "S[i]",
            "AttrFlags": 1
          },
          {
            "Text": " = "
          },
          {
            "Text": "0",
            "AttrFlags": 1
          },
          {
            "Text": ". For our example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928503584,
        "id": "8225809e-260c-4bd1-9764-3ef1d62bae42",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928503584,
        "parent_id": "9e69da83-fd17-43db-a31b-4f119ca3155c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "j   i\n+---------+---+---+---+---+---+---+---+---+\n|  Index  | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 |\n+---------+---+---+---+---+---+---+---+---+\n| Pattern | a | b | c | d | a | b | c | a |\n+---------+---+---+---+---+---+---+---+---+"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "j   i\n+---------+---+---+---+---+---+---+---+---+\n|  Index  | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 |\n+---------+---+---+---+---+---+---+---+---+\n| Pattern | a | b | c | d | a | b | c | a |\n+---------+---+---+---+---+---+---+---+---+",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928503585,
        "id": "41c8aff1-4404-43d8-b0a6-fdc58e14acf6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928503585,
        "parent_id": "9e69da83-fd17-43db-a31b-4f119ca3155c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Pattern[j]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "Pattern[i]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " don’t match, so we increment "
            ],
            [
              "i",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " and since "
            ],
            [
              "j",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " is "
            ],
            [
              "0",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", we don’t check the previous value and put "
            ],
            [
              "Pattern[i]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " = "
            ],
            [
              "0",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". If we keep incrementing "
            ],
            [
              "i",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", for "
            ],
            [
              "i",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " = "
            ],
            [
              "4",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", we’ll get a match, so we put "
            ],
            [
              "S[i]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " = "
            ],
            [
              "S[4]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " = "
            ],
            [
              "j",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " + "
            ],
            [
              "1",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " = "
            ],
            [
              "0",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " + "
            ],
            [
              "1",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " = "
            ],
            [
              "1",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " and increment "
            ],
            [
              "j",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "i",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". Our array will look like:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Pattern[j]",
            "AttrFlags": 1
          },
          {
            "Text": " and "
          },
          {
            "Text": "Pattern[i]",
            "AttrFlags": 1
          },
          {
            "Text": " don’t match, so we increment "
          },
          {
            "Text": "i",
            "AttrFlags": 1
          },
          {
            "Text": " and since "
          },
          {
            "Text": "j",
            "AttrFlags": 1
          },
          {
            "Text": " is "
          },
          {
            "Text": "0",
            "AttrFlags": 1
          },
          {
            "Text": ", we don’t check the previous value and put "
          },
          {
            "Text": "Pattern[i]",
            "AttrFlags": 1
          },
          {
            "Text": " = "
          },
          {
            "Text": "0",
            "AttrFlags": 1
          },
          {
            "Text": ". If we keep incrementing "
          },
          {
            "Text": "i",
            "AttrFlags": 1
          },
          {
            "Text": ", for "
          },
          {
            "Text": "i",
            "AttrFlags": 1
          },
          {
            "Text": " = "
          },
          {
            "Text": "4",
            "AttrFlags": 1
          },
          {
            "Text": ", we’ll get a match, so we put "
          },
          {
            "Text": "S[i]",
            "AttrFlags": 1
          },
          {
            "Text": " = "
          },
          {
            "Text": "S[4]",
            "AttrFlags": 1
          },
          {
            "Text": " = "
          },
          {
            "Text": "j",
            "AttrFlags": 1
          },
          {
            "Text": " + "
          },
          {
            "Text": "1",
            "AttrFlags": 1
          },
          {
            "Text": " = "
          },
          {
            "Text": "0",
            "AttrFlags": 1
          },
          {
            "Text": " + "
          },
          {
            "Text": "1",
            "AttrFlags": 1
          },
          {
            "Text": " = "
          },
          {
            "Text": "1",
            "AttrFlags": 1
          },
          {
            "Text": " and increment "
          },
          {
            "Text": "j",
            "AttrFlags": 1
          },
          {
            "Text": " and "
          },
          {
            "Text": "i",
            "AttrFlags": 1
          },
          {
            "Text": ". Our array will look like:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928503585,
        "id": "68f933d0-e246-4b4a-91ce-5a429903e6b4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928503585,
        "parent_id": "9e69da83-fd17-43db-a31b-4f119ca3155c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "j               i\n+---------+---+---+---+---+---+---+---+---+\n|  Index  | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 |\n+---------+---+---+---+---+---+---+---+---+\n| Pattern | a | b | c | d | a | b | c | a |\n+---------+---+---+---+---+---+---+---+---+\n|    S    | 0 | 0 | 0 | 0 | 1 |   |   |   |\n+---------+---+---+---+---+---+---+---+---+"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "j               i\n+---------+---+---+---+---+---+---+---+---+\n|  Index  | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 |\n+---------+---+---+---+---+---+---+---+---+\n| Pattern | a | b | c | d | a | b | c | a |\n+---------+---+---+---+---+---+---+---+---+\n|    S    | 0 | 0 | 0 | 0 | 1 |   |   |   |\n+---------+---+---+---+---+---+---+---+---+",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928503586,
        "id": "0595abc1-da6c-4fcf-ad33-f89e000a1393",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928503586,
        "parent_id": "9e69da83-fd17-43db-a31b-4f119ca3155c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Since "
            ],
            [
              "Pattern[1]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "Pattern[5]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " is a match, we put "
            ],
            [
              "S[i]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " = "
            ],
            [
              "S[5]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " = "
            ],
            [
              "j",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " + "
            ],
            [
              "1",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " = "
            ],
            [
              "1",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " + "
            ],
            [
              "1",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " = "
            ],
            [
              "2",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". If we continue, we’ll find a mismatch for "
            ],
            [
              "j",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " = "
            ],
            [
              "3",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "i",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " = "
            ],
            [
              "7",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". Since "
            ],
            [
              "j",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " is not equal to "
            ],
            [
              "0",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", we put "
            ],
            [
              "j",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " = "
            ],
            [
              "S[j-1]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". And we’ll compare the characters at "
            ],
            [
              "i",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "j",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " are same or not, since they are same, we’ll put "
            ],
            [
              "S[i]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " = "
            ],
            [
              "j",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " + 1. Our completed array will look like:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Since "
          },
          {
            "Text": "Pattern[1]",
            "AttrFlags": 1
          },
          {
            "Text": " and "
          },
          {
            "Text": "Pattern[5]",
            "AttrFlags": 1
          },
          {
            "Text": " is a match, we put "
          },
          {
            "Text": "S[i]",
            "AttrFlags": 1
          },
          {
            "Text": " = "
          },
          {
            "Text": "S[5]",
            "AttrFlags": 1
          },
          {
            "Text": " = "
          },
          {
            "Text": "j",
            "AttrFlags": 1
          },
          {
            "Text": " + "
          },
          {
            "Text": "1",
            "AttrFlags": 1
          },
          {
            "Text": " = "
          },
          {
            "Text": "1",
            "AttrFlags": 1
          },
          {
            "Text": " + "
          },
          {
            "Text": "1",
            "AttrFlags": 1
          },
          {
            "Text": " = "
          },
          {
            "Text": "2",
            "AttrFlags": 1
          },
          {
            "Text": ". If we continue, we’ll find a mismatch for "
          },
          {
            "Text": "j",
            "AttrFlags": 1
          },
          {
            "Text": " = "
          },
          {
            "Text": "3",
            "AttrFlags": 1
          },
          {
            "Text": " and "
          },
          {
            "Text": "i",
            "AttrFlags": 1
          },
          {
            "Text": " = "
          },
          {
            "Text": "7",
            "AttrFlags": 1
          },
          {
            "Text": ". Since "
          },
          {
            "Text": "j",
            "AttrFlags": 1
          },
          {
            "Text": " is not equal to "
          },
          {
            "Text": "0",
            "AttrFlags": 1
          },
          {
            "Text": ", we put "
          },
          {
            "Text": "j",
            "AttrFlags": 1
          },
          {
            "Text": " = "
          },
          {
            "Text": "S[j-1]",
            "AttrFlags": 1
          },
          {
            "Text": ". And we’ll compare the characters at "
          },
          {
            "Text": "i",
            "AttrFlags": 1
          },
          {
            "Text": " and "
          },
          {
            "Text": "j",
            "AttrFlags": 1
          },
          {
            "Text": " are same or not, since they are same, we’ll put "
          },
          {
            "Text": "S[i]",
            "AttrFlags": 1
          },
          {
            "Text": " = "
          },
          {
            "Text": "j",
            "AttrFlags": 1
          },
          {
            "Text": " + 1. Our completed array will look like:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928503587,
        "id": "600964a6-2eee-4430-a91c-ba6ae68ee253",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928503587,
        "parent_id": "9e69da83-fd17-43db-a31b-4f119ca3155c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "+---------+---+---+---+---+---+---+---+---+\n|    S    | 0 | 0 | 0 | 0 | 1 | 2 | 3 | 1 |\n+---------+---+---+---+---+---+---+---+---+"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "+---------+---+---+---+---+---+---+---+---+\n|    S    | 0 | 0 | 0 | 0 | 1 | 2 | 3 | 1 |\n+---------+---+---+---+---+---+---+---+---+",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928503588,
        "id": "92852da1-a85d-4662-ba13-263bd2cdbe1e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928503588,
        "parent_id": "9e69da83-fd17-43db-a31b-4f119ca3155c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This is our required array. Here a nonzero-value of "
            ],
            [
              "S[i]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " means there is a "
            ],
            [
              "S[i]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " length suffix same as the prefix in that substring (substring from "
            ],
            [
              "0",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " to "
            ],
            [
              "i",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ") and the next comparison will start from "
            ],
            [
              "S[i]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " + "
            ],
            [
              "1",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " position of the "
            ],
            [
              "Pattern",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ". Our algorithm to generate the array would look like:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This is our required array. Here a nonzero-value of "
          },
          {
            "Text": "S[i]",
            "AttrFlags": 1
          },
          {
            "Text": " means there is a "
          },
          {
            "Text": "S[i]",
            "AttrFlags": 1
          },
          {
            "Text": " length suffix same as the prefix in that substring (substring from "
          },
          {
            "Text": "0",
            "AttrFlags": 1
          },
          {
            "Text": " to "
          },
          {
            "Text": "i",
            "AttrFlags": 1
          },
          {
            "Text": ") and the next comparison will start from "
          },
          {
            "Text": "S[i]",
            "AttrFlags": 1
          },
          {
            "Text": " + "
          },
          {
            "Text": "1",
            "AttrFlags": 1
          },
          {
            "Text": " position of the "
          },
          {
            "Text": "Pattern",
            "AttrFlags": 4
          },
          {
            "Text": ". Our algorithm to generate the array would look like:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928503588,
        "id": "facd66f8-3521-4ae4-8494-0c0197722c43",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928503588,
        "parent_id": "9e69da83-fd17-43db-a31b-4f119ca3155c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Procedure GenerateSuffixArray(Pattern):\ni := 1\nj := 0\nn := Pattern.length\nwhile i is less than n\n    if Pattern[i] is equal to Pattern[j]\n        S[i] := j + 1\n        j := j + 1\n        i := i + 1\n    else\n        if j is not equal to 0\n            j := S[j-1]\n        else\n            S[i] := 0\n            i := i + 1\n        end if\n    end if\nend while"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Procedure GenerateSuffixArray(Pattern):\ni := 1\nj := 0\nn := Pattern.length\nwhile i is less than n\n    if Pattern[i] is equal to Pattern[j]\n        S[i] := j + 1\n        j := j + 1\n        i := i + 1\n    else\n        if j is not equal to 0\n            j := S[j-1]\n        else\n            S[i] := 0\n            i := i + 1\n        end if\n    end if\nend while",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928503589,
        "id": "c8bf1eb4-ee1a-48d7-8348-14766bf710a3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928503589,
        "parent_id": "9e69da83-fd17-43db-a31b-4f119ca3155c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The time complexity to build this array is "
            ],
            [
              "O(n)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and the space complexity is also "
            ],
            [
              "O(n)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". To make sure if you have completely understood the algorithm, try to generate an array for pattern "
            ],
            [
              "aabaabaa",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and check if the result matches with "
            ],
            [
              "this",
              [
                [
                  "a",
                  "https://i.stack.imgur.com/4aqZk.jpg"
                ]
              ]
            ],
            [
              " one."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The time complexity to build this array is "
          },
          {
            "Text": "O(n)",
            "AttrFlags": 2
          },
          {
            "Text": " and the space complexity is also "
          },
          {
            "Text": "O(n)",
            "AttrFlags": 2
          },
          {
            "Text": ". To make sure if you have completely understood the algorithm, try to generate an array for pattern "
          },
          {
            "Text": "aabaabaa",
            "AttrFlags": 2
          },
          {
            "Text": " and check if the result matches with "
          },
          {
            "Text": "this",
            "Link": "https://i.stack.imgur.com/4aqZk.jpg"
          },
          {
            "Text": " one."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928503589,
        "id": "bd83fab8-e7e5-446a-a308-bb2f7667e622",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928503589,
        "parent_id": "9e69da83-fd17-43db-a31b-4f119ca3155c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Now let’s do a substring search using the following example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Now let’s do a substring search using the following example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928503589,
        "id": "d72e631d-c2df-4118-b7f0-e5be37118a72",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928503589,
        "parent_id": "9e69da83-fd17-43db-a31b-4f119ca3155c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "+---------+---+---+---+---+---+---+---+---+---+---+---+---+\n|  Index  | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |10 |11 |\n+---------+---+---+---+---+---+---+---+---+---+---+---+---+\n|   Text  | a | b | x | a | b | c | a | b | c | a | b | y |\n+---------+---+---+---+---+---+---+---+---+---+---+---+---+\n\n+---------+---+---+---+---+---+---+\n|  Index  | 0 | 1 | 2 | 3 | 4 | 5 |\n+---------+---+---+---+---+---+---+\n| Pattern | a | b | c | a | b | y |\n+---------+---+---+---+---+---+---+\n|    S    | 0 | 0 | 0 | 1 | 2 | 0 |\n+---------+---+---+---+---+---+---+"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "+---------+---+---+---+---+---+---+---+---+---+---+---+---+\n|  Index  | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |10 |11 |\n+---------+---+---+---+---+---+---+---+---+---+---+---+---+\n|   Text  | a | b | x | a | b | c | a | b | c | a | b | y |\n+---------+---+---+---+---+---+---+---+---+---+---+---+---+\n\n+---------+---+---+---+---+---+---+\n|  Index  | 0 | 1 | 2 | 3 | 4 | 5 |\n+---------+---+---+---+---+---+---+\n| Pattern | a | b | c | a | b | y |\n+---------+---+---+---+---+---+---+\n|    S    | 0 | 0 | 0 | 1 | 2 | 0 |\n+---------+---+---+---+---+---+---+",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928503591,
        "id": "ae0d2de1-3e78-4c8a-a7be-0abba977e6b3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928503591,
        "parent_id": "9e69da83-fd17-43db-a31b-4f119ca3155c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We have a "
            ],
            [
              "Text",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ", a "
            ],
            [
              "Pattern",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " and a pre-calculated array "
            ],
            [
              "S",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " using our logic defined before. We compare "
            ],
            [
              "Text[0]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "Pattern[0]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " and they are same. "
            ],
            [
              "Text[1]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "Pattern[1]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " are same. "
            ],
            [
              "Text[2]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "Pattern[2]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " are not same. We check the value at the position right before the mismatch. Since "
            ],
            [
              "S[1]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " is "
            ],
            [
              "0",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", there is no suffix that is same as the prefix in our substring and our comparison starts at position "
            ],
            [
              "S[1]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", which is "
            ],
            [
              "0",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". So "
            ],
            [
              "Pattern[0]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " is not same as "
            ],
            [
              "Text[2]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", so we move on. "
            ],
            [
              "Text[3]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " is same as "
            ],
            [
              "Pattern[0]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " and there is a match till "
            ],
            [
              "Text[8]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "Pattern[5]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". We go one step back in the "
            ],
            [
              "S",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " array and find "
            ],
            [
              "2",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". So this means there is a prefix of length "
            ],
            [
              "2",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " which is also the suffix of this substring ("
            ],
            [
              "abcab)",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " which is "
            ],
            [
              "ab",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". That also means that there is an "
            ],
            [
              "ab",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " before "
            ],
            [
              "Text[8]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". So we can safely ignore "
            ],
            [
              "Pattern[0]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "Pattern[1]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " and start our next comparison from "
            ],
            [
              "Pattern[2]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "Text[8]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". If we continue, we’ll find the "
            ],
            [
              "Pattern",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " in the "
            ],
            [
              "Text",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ". Our procedure will look like:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "We have a "
          },
          {
            "Text": "Text",
            "AttrFlags": 4
          },
          {
            "Text": ", a "
          },
          {
            "Text": "Pattern",
            "AttrFlags": 4
          },
          {
            "Text": " and a pre-calculated array "
          },
          {
            "Text": "S",
            "AttrFlags": 4
          },
          {
            "Text": " using our logic defined before. We compare "
          },
          {
            "Text": "Text[0]",
            "AttrFlags": 1
          },
          {
            "Text": " and "
          },
          {
            "Text": "Pattern[0]",
            "AttrFlags": 1
          },
          {
            "Text": " and they are same. "
          },
          {
            "Text": "Text[1]",
            "AttrFlags": 1
          },
          {
            "Text": " and "
          },
          {
            "Text": "Pattern[1]",
            "AttrFlags": 1
          },
          {
            "Text": " are same. "
          },
          {
            "Text": "Text[2]",
            "AttrFlags": 1
          },
          {
            "Text": " and "
          },
          {
            "Text": "Pattern[2]",
            "AttrFlags": 1
          },
          {
            "Text": " are not same. We check the value at the position right before the mismatch. Since "
          },
          {
            "Text": "S[1]",
            "AttrFlags": 1
          },
          {
            "Text": " is "
          },
          {
            "Text": "0",
            "AttrFlags": 1
          },
          {
            "Text": ", there is no suffix that is same as the prefix in our substring and our comparison starts at position "
          },
          {
            "Text": "S[1]",
            "AttrFlags": 1
          },
          {
            "Text": ", which is "
          },
          {
            "Text": "0",
            "AttrFlags": 1
          },
          {
            "Text": ". So "
          },
          {
            "Text": "Pattern[0]",
            "AttrFlags": 1
          },
          {
            "Text": " is not same as "
          },
          {
            "Text": "Text[2]",
            "AttrFlags": 1
          },
          {
            "Text": ", so we move on. "
          },
          {
            "Text": "Text[3]",
            "AttrFlags": 1
          },
          {
            "Text": " is same as "
          },
          {
            "Text": "Pattern[0]",
            "AttrFlags": 1
          },
          {
            "Text": " and there is a match till "
          },
          {
            "Text": "Text[8]",
            "AttrFlags": 1
          },
          {
            "Text": " and "
          },
          {
            "Text": "Pattern[5]",
            "AttrFlags": 1
          },
          {
            "Text": ". We go one step back in the "
          },
          {
            "Text": "S",
            "AttrFlags": 1
          },
          {
            "Text": " array and find "
          },
          {
            "Text": "2",
            "AttrFlags": 1
          },
          {
            "Text": ". So this means there is a prefix of length "
          },
          {
            "Text": "2",
            "AttrFlags": 1
          },
          {
            "Text": " which is also the suffix of this substring ("
          },
          {
            "Text": "abcab)",
            "AttrFlags": 1
          },
          {
            "Text": " which is "
          },
          {
            "Text": "ab",
            "AttrFlags": 1
          },
          {
            "Text": ". That also means that there is an "
          },
          {
            "Text": "ab",
            "AttrFlags": 1
          },
          {
            "Text": " before "
          },
          {
            "Text": "Text[8]",
            "AttrFlags": 1
          },
          {
            "Text": ". So we can safely ignore "
          },
          {
            "Text": "Pattern[0]",
            "AttrFlags": 1
          },
          {
            "Text": " and "
          },
          {
            "Text": "Pattern[1]",
            "AttrFlags": 1
          },
          {
            "Text": " and start our next comparison from "
          },
          {
            "Text": "Pattern[2]",
            "AttrFlags": 1
          },
          {
            "Text": " and "
          },
          {
            "Text": "Text[8]",
            "AttrFlags": 1
          },
          {
            "Text": ". If we continue, we’ll find the "
          },
          {
            "Text": "Pattern",
            "AttrFlags": 4
          },
          {
            "Text": " in the "
          },
          {
            "Text": "Text",
            "AttrFlags": 4
          },
          {
            "Text": ". Our procedure will look like:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928503591,
        "id": "019daf51-8985-4424-8967-5d4b99c703fc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928503591,
        "parent_id": "9e69da83-fd17-43db-a31b-4f119ca3155c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Procedure KMP(Text, Pattern)\nGenerateSuffixArray(Pattern)\nm := Text.Length\nn := Pattern.Length\ni := 0\nj := 0\nwhile i is less than m\n    if Pattern[j] is equal to Text[i]\n        j := j + 1\n        i := i + 1\n    if j is equal to n\n        Return (j-i)\n    else if i \u003c m and Pattern[j] is not equal t Text[i]\n        if j is not equal to 0\n            j = S[j-1]\n        else\n            i := i + 1\n        end if\n    end if\nend while\nReturn -1"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Procedure KMP(Text, Pattern)\nGenerateSuffixArray(Pattern)\nm := Text.Length\nn := Pattern.Length\ni := 0\nj := 0\nwhile i is less than m\n    if Pattern[j] is equal to Text[i]\n        j := j + 1\n        i := i + 1\n    if j is equal to n\n        Return (j-i)\n    else if i \u003c m and Pattern[j] is not equal t Text[i]\n        if j is not equal to 0\n            j = S[j-1]\n        else\n            i := i + 1\n        end if\n    end if\nend while\nReturn -1",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928503591,
        "id": "e71d9c3b-00d6-4f22-b9e7-30fef6d8f017",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928503591,
        "parent_id": "9e69da83-fd17-43db-a31b-4f119ca3155c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The time complexity of this algorithm apart from the Suffix Array Calculation is "
            ],
            [
              "O(m)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Since "
            ],
            [
              "GenerateSuffixArray",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " takes "
            ],
            [
              "O(n)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", the total time complexity of KMP Algorithm is: "
            ],
            [
              "O(m+n)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The time complexity of this algorithm apart from the Suffix Array Calculation is "
          },
          {
            "Text": "O(m)",
            "AttrFlags": 2
          },
          {
            "Text": ". Since "
          },
          {
            "Text": "GenerateSuffixArray",
            "AttrFlags": 4
          },
          {
            "Text": " takes "
          },
          {
            "Text": "O(n)",
            "AttrFlags": 2
          },
          {
            "Text": ", the total time complexity of KMP Algorithm is: "
          },
          {
            "Text": "O(m+n)",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928503591,
        "id": "0be6099f-8ae6-4ed8-8853-6225925aea14",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928503591,
        "parent_id": "9e69da83-fd17-43db-a31b-4f119ca3155c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "PS: If you want to find multiple occurrences of "
            ],
            [
              "Pattern",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " in the "
            ],
            [
              "Text",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ", instead of returning the value, print it/store it and set "
            ],
            [
              "j := S[j-1]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Also keep a "
            ],
            [
              "flag",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to track whether you have found any occurrence or not and handle it accordingly."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "PS: If you want to find multiple occurrences of "
          },
          {
            "Text": "Pattern",
            "AttrFlags": 4
          },
          {
            "Text": " in the "
          },
          {
            "Text": "Text",
            "AttrFlags": 4
          },
          {
            "Text": ", instead of returning the value, print it/store it and set "
          },
          {
            "Text": "j := S[j-1]",
            "AttrFlags": 2
          },
          {
            "Text": ". Also keep a "
          },
          {
            "Text": "flag",
            "AttrFlags": 2
          },
          {
            "Text": " to track whether you have found any occurrence or not and handle it accordingly."
          }
        ]
      }
    ],
    "title": "Introduction To Knuth-Morris-Pratt KMP Algorithm",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}