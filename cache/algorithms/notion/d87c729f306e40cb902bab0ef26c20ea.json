{
  "ID": "d87c729f-306e-40cb-902b-ab0ef26c20ea",
  "Root": {
    "alive": true,
    "content": [
      "3d457ba4-2df9-4595-873c-654f6cdfc248",
      "4c7efe61-885f-4339-be5a-9a35ec79cb2b",
      "ccab67ea-3f04-4cd4-9209-2534bbc9c5f7",
      "a2f233de-cb84-4634-abdb-6af791b5eba1"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551928507135,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "d87c729f-306e-40cb-902b-ab0ef26c20ea",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551928507135,
    "parent_id": "ec9d0bba-8ded-4256-866e-28adfde6676e",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Python Implementation of KMP algorithm."
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928507134,
        "id": "3d457ba4-2df9-4595-873c-654f6cdfc248",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928507134,
        "parent_id": "d87c729f-306e-40cb-902b-ab0ef26c20ea",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Haystack",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ": The string in which given pattern needs to be searched. "
            ],
            [
              "Needle",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ": The pattern to be searched."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Haystack",
            "AttrFlags": 1
          },
          {
            "Text": ": The string in which given pattern needs to be searched. "
          },
          {
            "Text": "Needle",
            "AttrFlags": 1
          },
          {
            "Text": ": The pattern to be searched."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928507135,
        "id": "4c7efe61-885f-4339-be5a-9a35ec79cb2b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928507135,
        "parent_id": "d87c729f-306e-40cb-902b-ab0ef26c20ea",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Time complexity",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ": Search portion (strstr method) has the complexity O(n) where "
            ],
            [
              "n",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is the length of haystack but as needle is also pre parsed for building prefix table O(m) is required for building prefix table where "
            ],
            [
              "m",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is the length of the needle. Therefore, overall time complexity for KMP is "
            ],
            [
              "O(n+m)",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "Space complexity",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ": "
            ],
            [
              "O(m)",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " because of prefix table on needle."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Time complexity",
            "AttrFlags": 1
          },
          {
            "Text": ": Search portion (strstr method) has the complexity O(n) where "
          },
          {
            "Text": "n",
            "AttrFlags": 2
          },
          {
            "Text": " is the length of haystack but as needle is also pre parsed for building prefix table O(m) is required for building prefix table where "
          },
          {
            "Text": "m",
            "AttrFlags": 2
          },
          {
            "Text": " is the length of the needle. Therefore, overall time complexity for KMP is "
          },
          {
            "Text": "O(n+m)",
            "AttrFlags": 1
          },
          {
            "Text": " "
          },
          {
            "Text": "Space complexity",
            "AttrFlags": 1
          },
          {
            "Text": ": "
          },
          {
            "Text": "O(m)",
            "AttrFlags": 1
          },
          {
            "Text": " because of prefix table on needle."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928507135,
        "id": "ccab67ea-3f04-4cd4-9209-2534bbc9c5f7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928507135,
        "parent_id": "d87c729f-306e-40cb-902b-ab0ef26c20ea",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note: Following implementation returns the start position of match in haystack (if there is a match) else returns -1, for edge cases like if needle/haystack is an empty string or needle is not found in haystack."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note: Following implementation returns the start position of match in haystack (if there is a match) else returns -1, for edge cases like if needle/haystack is an empty string or needle is not found in haystack."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928507135,
        "id": "a2f233de-cb84-4634-abdb-6af791b5eba1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928507135,
        "parent_id": "d87c729f-306e-40cb-902b-ab0ef26c20ea",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "def get_prefix_table(needle):\n    prefix_set = set()\n    n = len(needle)\n    prefix_table = [0]*n\n    delimeter = 1\n    while(delimeter\u003cn):\n        prefix_set.add(needle[:delimeter])\n        j = 1\n        while(j\u003cdelimeter+1):\n            if needle[j:delimeter+1] in prefix_set:\n                prefix_table[delimeter] = delimeter - j + 1\n                break\n            j += 1\n        delimeter += 1\n    return prefix_table\n\ndef strstr(haystack, needle):\n    # m: denoting the position within S where the prospective match for W begins\n    # i: denoting the index of the currently considered character in W.\n    haystack_len = len(haystack)\n    needle_len = len(needle)\n    if (needle_len \u003e haystack_len) or (not haystack_len) or (not needle_len):\n        return -1\n    prefix_table = get_prefix_table(needle)\n    m = i = 0\n    while((i\u003cneedle_len) and (m\u003chaystack_len)):\n        if haystack[m] == needle[i]:\n            i += 1\n            m += 1\n        else:\n            if i != 0:\n                i = prefix_table[i-1]\n            else:\n                m += 1\n    if i==needle_len and haystack[m-1] == needle[i-1]:\n        return m - needle_len\n    else:\n        return -1\n\nif __name__ == '__main__':\n    needle = 'abcaby'\n    haystack = 'abxabcabcaby'\n    print strstr(haystack, needle)"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "def get_prefix_table(needle):\n    prefix_set = set()\n    n = len(needle)\n    prefix_table = [0]*n\n    delimeter = 1\n    while(delimeter\u003cn):\n        prefix_set.add(needle[:delimeter])\n        j = 1\n        while(j\u003cdelimeter+1):\n            if needle[j:delimeter+1] in prefix_set:\n                prefix_table[delimeter] = delimeter - j + 1\n                break\n            j += 1\n        delimeter += 1\n    return prefix_table\n\ndef strstr(haystack, needle):\n    # m: denoting the position within S where the prospective match for W begins\n    # i: denoting the index of the currently considered character in W.\n    haystack_len = len(haystack)\n    needle_len = len(needle)\n    if (needle_len \u003e haystack_len) or (not haystack_len) or (not needle_len):\n        return -1\n    prefix_table = get_prefix_table(needle)\n    m = i = 0\n    while((i\u003cneedle_len) and (m\u003chaystack_len)):\n        if haystack[m] == needle[i]:\n            i += 1\n            m += 1\n        else:\n            if i != 0:\n                i = prefix_table[i-1]\n            else:\n                m += 1\n    if i==needle_len and haystack[m-1] == needle[i-1]:\n        return m - needle_len\n    else:\n        return -1\n\nif __name__ == '__main__':\n    needle = 'abcaby'\n    haystack = 'abxabcabcaby'\n    print strstr(haystack, needle)",
        "code_language": "Plain Text"
      }
    ],
    "title": "Python Implementation of KMP algorithm.",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}