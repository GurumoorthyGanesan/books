{
  "ID": "3acd33d8-5b78-42c8-9ca0-e7d2689f998b",
  "Root": {
    "alive": true,
    "content": [
      "7511a855-ec14-40e4-98e7-d26e1c74f556",
      "8047559c-9c73-49fd-8a72-7431a67687a6",
      "596f2078-4758-41d6-bbcd-543b5afa199d",
      "9901835c-0a91-405d-81b3-987884986574"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551928441541,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "3acd33d8-5b78-42c8-9ca0-e7d2689f998b",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551928441541,
    "parent_id": "a034d8c3-224b-46dc-bc26-d44b569e39e0",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Merge Sort Implementation in C C"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928441537,
        "id": "7511a855-ec14-40e4-98e7-d26e1c74f556",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928441537,
        "parent_id": "3acd33d8-5b78-42c8-9ca0-e7d2689f998b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "C Merge Sort",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "C Merge Sort",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928441540,
        "id": "8047559c-9c73-49fd-8a72-7431a67687a6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928441540,
        "parent_id": "3acd33d8-5b78-42c8-9ca0-e7d2689f998b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int merge(int arr[],int l,int m,int h)\n{\n  int arr1[10],arr2[10];  // Two temporary arrays to\n  hold the two arrays to be merged\n  int n1,n2,i,j,k;\n  n1=m-l+1;\n  n2=h-m;\n\n  for(i=0; i\u003cn1; i++)\n    arr1[i]=arr[l+i];\n  for(j=0; j\u003cn2; j++)\n    arr2[j]=arr[m+j+1];\n\n  arr1[i]=9999;  // To mark the end of each temporary array\n  arr2[j]=9999;\n\n  i=0;\n  j=0;\n  for(k=l; k\u003c=h; k++) { //process of combining two sorted arrays\n    if(arr1[i]\u003c=arr2[j])\n      arr[k]=arr1[i++];\n    else\n      arr[k]=arr2[j++];\n  }\n\n  return 0;\n}\n\nint merge_sort(int arr[],int low,int high)\n{\n  int mid;\n  if(low\u003chigh) {\n    mid=(low+high)/2;\n    // Divide and Conquer\n    merge_sort(arr,low,mid);\n    merge_sort(arr,mid+1,high);\n    // Combine\n    merge(arr,low,mid,high);\n  }\n\n  return 0;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int merge(int arr[],int l,int m,int h)\n{\n  int arr1[10],arr2[10];  // Two temporary arrays to\n  hold the two arrays to be merged\n  int n1,n2,i,j,k;\n  n1=m-l+1;\n  n2=h-m;\n\n  for(i=0; i\u003cn1; i++)\n    arr1[i]=arr[l+i];\n  for(j=0; j\u003cn2; j++)\n    arr2[j]=arr[m+j+1];\n\n  arr1[i]=9999;  // To mark the end of each temporary array\n  arr2[j]=9999;\n\n  i=0;\n  j=0;\n  for(k=l; k\u003c=h; k++) { //process of combining two sorted arrays\n    if(arr1[i]\u003c=arr2[j])\n      arr[k]=arr1[i++];\n    else\n      arr[k]=arr2[j++];\n  }\n\n  return 0;\n}\n\nint merge_sort(int arr[],int low,int high)\n{\n  int mid;\n  if(low\u003chigh) {\n    mid=(low+high)/2;\n    // Divide and Conquer\n    merge_sort(arr,low,mid);\n    merge_sort(arr,mid+1,high);\n    // Combine\n    merge(arr,low,mid,high);\n  }\n\n  return 0;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928441540,
        "id": "596f2078-4758-41d6-bbcd-543b5afa199d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928441540,
        "parent_id": "3acd33d8-5b78-42c8-9ca0-e7d2689f998b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "C# Merge Sort"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "C# Merge Sort"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928441540,
        "id": "9901835c-0a91-405d-81b3-987884986574",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928441540,
        "parent_id": "3acd33d8-5b78-42c8-9ca0-e7d2689f998b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class MergeSort\n    {\n        static void Merge(int[] input, int l, int m, int r)\n        {\n            int i, j;\n            var n1 = m - l + 1;\n            var n2 = r - m;\n\n            var left = new int[n1];\n            var right = new int[n2];\n\n            for (i = 0; i \u003c n1; i++)\n            {\n                left[i] = input[l + i];\n            }\n\n            for (j = 0; j \u003c n2; j++)\n            {\n                right[j] = input[m + j + 1];\n            }\n\n            i = 0;\n            j = 0;\n            var k = l;\n\n            while (i \u003c n1 \u0026\u0026 j \u003c n2)\n            {\n                if (left[i] \u003c= right[j])\n                {\n                    input[k] = left[i];\n                    i++;\n                }\n                else\n                {\n                    input[k] = right[j];\n                    j++;\n                }\n                k++;\n            }\n\n            while (i \u003c n1)\n            {\n                input[k] = left[i];\n                i++;\n                k++;\n            }\n\n            while (j \u003c n2)\n            {\n                input[k] = right[j];\n                j++;\n                k++;\n            }\n        }\n\n        static void SortMerge(int[] input, int l, int r)\n        {\n            if (l \u003c r)\n            {\n                int m = l + (r - l) / 2;\n                SortMerge(input, l, m);\n                SortMerge(input, m + 1, r);\n                Merge(input, l, m, r);\n            }\n        }\n\n        public static int[] Main(int[] input)\n        {\n            SortMerge(input, 0, input.Length - 1);\n            return input;\n        }\n    }"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class MergeSort\n    {\n        static void Merge(int[] input, int l, int m, int r)\n        {\n            int i, j;\n            var n1 = m - l + 1;\n            var n2 = r - m;\n\n            var left = new int[n1];\n            var right = new int[n2];\n\n            for (i = 0; i \u003c n1; i++)\n            {\n                left[i] = input[l + i];\n            }\n\n            for (j = 0; j \u003c n2; j++)\n            {\n                right[j] = input[m + j + 1];\n            }\n\n            i = 0;\n            j = 0;\n            var k = l;\n\n            while (i \u003c n1 \u0026\u0026 j \u003c n2)\n            {\n                if (left[i] \u003c= right[j])\n                {\n                    input[k] = left[i];\n                    i++;\n                }\n                else\n                {\n                    input[k] = right[j];\n                    j++;\n                }\n                k++;\n            }\n\n            while (i \u003c n1)\n            {\n                input[k] = left[i];\n                i++;\n                k++;\n            }\n\n            while (j \u003c n2)\n            {\n                input[k] = right[j];\n                j++;\n                k++;\n            }\n        }\n\n        static void SortMerge(int[] input, int l, int r)\n        {\n            if (l \u003c r)\n            {\n                int m = l + (r - l) / 2;\n                SortMerge(input, l, m);\n                SortMerge(input, m + 1, r);\n                Merge(input, l, m, r);\n            }\n        }\n\n        public static int[] Main(int[] input)\n        {\n            SortMerge(input, 0, input.Length - 1);\n            return input;\n        }\n    }",
        "code_language": "Plain Text"
      }
    ],
    "title": "Merge Sort Implementation in C C",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}