{
  "ID": "a04ccbec-f407-4bfb-ba44-51ebed6b8fe1",
  "Root": {
    "alive": true,
    "content": [
      "fe9615c4-f492-48b7-9fc8-2e70d77ebc53",
      "b9a6257c-ae78-4562-acbf-003f7c7d6b0d",
      "12e751c3-0541-4514-83a3-0785402918c1",
      "18f56aee-704b-4b3c-804f-ccb271089f87",
      "2e4b572b-e98b-4dce-9c4b-6a1603a6e3aa",
      "07dfb668-eb6b-4e60-abd7-a77a0c6d5410",
      "139c2db0-ce8d-489b-83a1-157fee5f9555",
      "17851937-1337-4d54-9243-fd5b77d680c3",
      "05d00392-a6fc-4f1e-90a7-785eb8c40b6c",
      "45bfff8d-1458-46dc-9834-4eaa49d67ab4",
      "1078b7c8-5779-41cf-844d-691c74ec864a",
      "0b9799a9-6af2-417a-be27-73c61579970a",
      "abe3564a-28e2-419f-983e-2bfd50ff7d53",
      "941737b0-3082-41d0-adae-17c448506f76",
      "7277a4a3-1686-45c0-bcea-8b00851f0b4d",
      "8a3c4b3d-c70e-4ea3-a25a-519710c27455",
      "c62ba195-0f7c-403a-b669-d6933355d662",
      "50472b6b-cca0-414c-8a24-fba78d05316b",
      "0aa164d6-bdc4-46bf-98e2-a337e0620a3f",
      "066bfacd-b42f-4e8a-b349-3bb33dcc2178",
      "178842a0-03c7-49cf-808f-125733cc1845",
      "80caf3f7-9207-4d47-8d08-8fa19d608bfc",
      "3a230213-4ef6-4ba6-955c-30c7267573ce",
      "d082a0f5-a0f8-475d-8abe-4360f4832e69",
      "c2511b6f-f406-4e8d-b20b-c1347214ec0e",
      "693e2e41-3b71-40a0-8e3a-baa3d94b2634",
      "a4884cb3-c62b-430b-8030-97201dbbc9aa",
      "c5eb9e5d-3e3c-42a4-bf53-f5cdabf7e891",
      "88b8be37-6bfc-4a9d-b313-342d76767062",
      "750f99b7-f78c-49b1-ab00-649893a250f2",
      "aaf7a691-da1f-4035-9a01-35aa283ed5fd",
      "76b96656-2490-4b93-b46c-cb61b1030b2c",
      "1bc87c79-bdc7-44d6-a21b-eaeff50165e9",
      "6925d6a4-9ebb-478b-a3e2-35774dbb143f",
      "73952605-1462-462d-89ee-527b4b741d7c",
      "c0ded387-f1b3-4339-a193-ebda0768bb45",
      "2a22e20a-c0da-47e7-a46b-e50fe702bac8",
      "a39e4f74-041f-440a-a5f4-5a83fa68ad5f",
      "97b58d1b-b03e-41f7-bbaa-2f5eebd0a64a",
      "5efb70c2-200b-4482-ab59-b8aaadaa5c55",
      "df398b57-f774-45a2-af21-f2855d45741c",
      "b40010a3-c1fb-4833-b9f2-dcd81644a7b8",
      "562568a8-7f8e-40ac-bd4c-fa4b4632c3cd",
      "e018cc87-246e-4919-b530-36df1357aeff",
      "5b2e231c-4a7f-48de-b39e-5fbb0bf77e6b",
      "b9d39a04-cd5c-4392-9eb4-fcb2d322ce27",
      "4a2b7bd4-28f9-4ab7-b3aa-7a30f74588a7",
      "4d0998b9-684c-4424-81a2-7046123e67b9",
      "d9e3a1fa-9695-4608-b733-57dd8d29773d",
      "39b70c4b-1933-463d-9b71-47beb846483a",
      "67f505e4-1ea1-44ec-b86c-b8d8e2405d47",
      "99ea7665-489d-426d-88d1-1b4afa32227e",
      "c50d1bf9-29ff-47ee-8449-b0606f26e45a"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551928838663,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "a04ccbec-f407-4bfb-ba44-51ebed6b8fe1",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551928838663,
    "parent_id": "db10fdd2-ea0b-4236-ae14-94781b2f7586",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Matrix Exponentiation to Solve Example Problems"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928838655,
        "id": "fe9615c4-f492-48b7-9fc8-2e70d77ebc53",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928838655,
        "parent_id": "a04ccbec-f407-4bfb-ba44-51ebed6b8fe1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Find f(n): nth Fibonacci number.",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " The problem is quite easy when "
            ],
            [
              "n",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " is relatively small. We can use simple recursion, "
            ],
            [
              "f(n) = f(n-1) + f(n-2)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", or we can use dynamic programming approach to avoid the calculation of same function over and over again. But what will you do if the problem says, "
            ],
            [
              "Given 0 \u003c n \u003c 10⁹, find f(n) mod 999983?",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " Dynamic programming will fail, so how do we tackle this problem?"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Find f(n): nth Fibonacci number.",
            "AttrFlags": 4
          },
          {
            "Text": " The problem is quite easy when "
          },
          {
            "Text": "n",
            "AttrFlags": 1
          },
          {
            "Text": " is relatively small. We can use simple recursion, "
          },
          {
            "Text": "f(n) = f(n-1) + f(n-2)",
            "AttrFlags": 2
          },
          {
            "Text": ", or we can use dynamic programming approach to avoid the calculation of same function over and over again. But what will you do if the problem says, "
          },
          {
            "Text": "Given 0 \u003c n \u003c 10⁹, find f(n) mod 999983?",
            "AttrFlags": 1
          },
          {
            "Text": " Dynamic programming will fail, so how do we tackle this problem?"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928838656,
        "id": "b9a6257c-ae78-4562-acbf-003f7c7d6b0d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928838656,
        "parent_id": "a04ccbec-f407-4bfb-ba44-51ebed6b8fe1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "First let’s see how matrix exponentiation can help to represent recursive relation."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "First let’s see how matrix exponentiation can help to represent recursive relation."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928838656,
        "id": "12e751c3-0541-4514-83a3-0785402918c1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928838656,
        "parent_id": "a04ccbec-f407-4bfb-ba44-51ebed6b8fe1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Prerequisites:",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Prerequisites:",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928838656,
        "id": "18f56aee-704b-4b3c-804f-ccb271089f87",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928838656,
        "parent_id": "a04ccbec-f407-4bfb-ba44-51ebed6b8fe1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Given two matrices, know how to find their product. Further, given the product matrix of two matrices, and one of them, know how to find the other matrix."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Given two matrices, know how to find their product. Further, given the product matrix of two matrices, and one of them, know how to find the other matrix."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928838656,
        "id": "2e4b572b-e98b-4dce-9c4b-6a1603a6e3aa",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928838656,
        "parent_id": "a04ccbec-f407-4bfb-ba44-51ebed6b8fe1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Given a matrix of size "
            ],
            [
              "d X d",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", know how to find its nth power in "
            ],
            [
              "O(d3log(n))",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Given a matrix of size "
          },
          {
            "Text": "d X d",
            "AttrFlags": 1
          },
          {
            "Text": ", know how to find its nth power in "
          },
          {
            "Text": "O(d3log(n))",
            "AttrFlags": 1
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928838656,
        "id": "07dfb668-eb6b-4e60-abd7-a77a0c6d5410",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928838656,
        "parent_id": "a04ccbec-f407-4bfb-ba44-51ebed6b8fe1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Patterns:",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Patterns:",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928838657,
        "id": "139c2db0-ce8d-489b-83a1-157fee5f9555",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928838657,
        "parent_id": "a04ccbec-f407-4bfb-ba44-51ebed6b8fe1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "At first we need a recursive relation and we want to find a matrix "
            ],
            [
              "M",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " which can lead us to the desired state from a set of already known states. Let’s assume that, we know the "
            ],
            [
              "k",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " states of a given recurrence relation and we want to find the "
            ],
            [
              "(k+1)th",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " state. Let "
            ],
            [
              "M",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " be a "
            ],
            [
              "k X k",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " matrix, and we build a matrix "
            ],
            [
              "A:[k X 1]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " from the known states of the recurrence relation, now we want to get a matrix "
            ],
            [
              "B:[k X 1]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " which will represent the set of next states, i. e. "
            ],
            [
              "M X A = B",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " as shown below:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "At first we need a recursive relation and we want to find a matrix "
          },
          {
            "Text": "M",
            "AttrFlags": 1
          },
          {
            "Text": " which can lead us to the desired state from a set of already known states. Let’s assume that, we know the "
          },
          {
            "Text": "k",
            "AttrFlags": 1
          },
          {
            "Text": " states of a given recurrence relation and we want to find the "
          },
          {
            "Text": "(k+1)th",
            "AttrFlags": 1
          },
          {
            "Text": " state. Let "
          },
          {
            "Text": "M",
            "AttrFlags": 1
          },
          {
            "Text": " be a "
          },
          {
            "Text": "k X k",
            "AttrFlags": 1
          },
          {
            "Text": " matrix, and we build a matrix "
          },
          {
            "Text": "A:[k X 1]",
            "AttrFlags": 1
          },
          {
            "Text": " from the known states of the recurrence relation, now we want to get a matrix "
          },
          {
            "Text": "B:[k X 1]",
            "AttrFlags": 1
          },
          {
            "Text": " which will represent the set of next states, i. e. "
          },
          {
            "Text": "M X A = B",
            "AttrFlags": 1
          },
          {
            "Text": " as shown below:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928838657,
        "id": "17851937-1337-4d54-9243-fd5b77d680c3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928838657,
        "parent_id": "a04ccbec-f407-4bfb-ba44-51ebed6b8fe1",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "|  f(n)  |     | f(n+1) |\n| f(n-1) |     |  f(n)  |\nM X | f(n-2) |  =  | f(n-1) |\n| ...... |     | ...... |\n| f(n-k) |     |f(n-k+1)|"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "|  f(n)  |     | f(n+1) |\n| f(n-1) |     |  f(n)  |\nM X | f(n-2) |  =  | f(n-1) |\n| ...... |     | ...... |\n| f(n-k) |     |f(n-k+1)|",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928838657,
        "id": "05d00392-a6fc-4f1e-90a7-785eb8c40b6c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928838657,
        "parent_id": "a04ccbec-f407-4bfb-ba44-51ebed6b8fe1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "So, if we can design "
            ],
            [
              "M",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " accordingly, our job will be done! The matrix will then be used to represent the recurrence relation."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "So, if we can design "
          },
          {
            "Text": "M",
            "AttrFlags": 1
          },
          {
            "Text": " accordingly, our job will be done! The matrix will then be used to represent the recurrence relation."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928838657,
        "id": "45bfff8d-1458-46dc-9834-4eaa49d67ab4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928838657,
        "parent_id": "a04ccbec-f407-4bfb-ba44-51ebed6b8fe1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Type 1:",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " Let’s start with the simplest one, "
            ],
            [
              "f(n) = f(n-1) + f(n-2)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " We get, "
            ],
            [
              "f(n+1) = f(n) + f(n-1)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Let’s assume, we know "
            ],
            [
              "f(n)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "f(n-1)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "; We want to find out "
            ],
            [
              "f(n+1)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". From the situation stated above, matrix "
            ],
            [
              "A",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " and matrix "
            ],
            [
              "B",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " can be formed as shown below:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Type 1:",
            "AttrFlags": 1
          },
          {
            "Text": " Let’s start with the simplest one, "
          },
          {
            "Text": "f(n) = f(n-1) + f(n-2)",
            "AttrFlags": 2
          },
          {
            "Text": " We get, "
          },
          {
            "Text": "f(n+1) = f(n) + f(n-1)",
            "AttrFlags": 2
          },
          {
            "Text": ". Let’s assume, we know "
          },
          {
            "Text": "f(n)",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "f(n-1)",
            "AttrFlags": 2
          },
          {
            "Text": "; We want to find out "
          },
          {
            "Text": "f(n+1)",
            "AttrFlags": 2
          },
          {
            "Text": ". From the situation stated above, matrix "
          },
          {
            "Text": "A",
            "AttrFlags": 1
          },
          {
            "Text": " and matrix "
          },
          {
            "Text": "B",
            "AttrFlags": 1
          },
          {
            "Text": " can be formed as shown below:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928838657,
        "id": "1078b7c8-5779-41cf-844d-691c74ec864a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928838657,
        "parent_id": "a04ccbec-f407-4bfb-ba44-51ebed6b8fe1",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Matrix A          Matrix B\n\n|  f(n)  |        | f(n+1) |\n| f(n-1) |        |  f(n)  |"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Matrix A          Matrix B\n\n|  f(n)  |        | f(n+1) |\n| f(n-1) |        |  f(n)  |",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928838658,
        "id": "0b9799a9-6af2-417a-be27-73c61579970a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928838658,
        "parent_id": "a04ccbec-f407-4bfb-ba44-51ebed6b8fe1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "[Note: Matrix "
            ],
            [
              "A",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " will be always designed in such a way that, every state on which "
            ],
            [
              "f(n+1)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " depends, will be present] Now, we need to design a "
            ],
            [
              "2X2",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " matrix "
            ],
            [
              "M",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " such that, it satisfies "
            ],
            [
              "M X A = B",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " as stated above. The first element of "
            ],
            [
              "B",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " is "
            ],
            [
              "f(n+1)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " which is actually "
            ],
            [
              "f(n) + f(n-1)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". To get this, from matrix "
            ],
            [
              "A",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", we need, "
            ],
            [
              "1 X f(n)",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "1 X f(n-1)",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". So the first row of "
            ],
            [
              "M",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " will be "
            ],
            [
              "[1 1]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "[Note: Matrix "
          },
          {
            "Text": "A",
            "AttrFlags": 1
          },
          {
            "Text": " will be always designed in such a way that, every state on which "
          },
          {
            "Text": "f(n+1)",
            "AttrFlags": 2
          },
          {
            "Text": " depends, will be present] Now, we need to design a "
          },
          {
            "Text": "2X2",
            "AttrFlags": 1
          },
          {
            "Text": " matrix "
          },
          {
            "Text": "M",
            "AttrFlags": 1
          },
          {
            "Text": " such that, it satisfies "
          },
          {
            "Text": "M X A = B",
            "AttrFlags": 1
          },
          {
            "Text": " as stated above. The first element of "
          },
          {
            "Text": "B",
            "AttrFlags": 1
          },
          {
            "Text": " is "
          },
          {
            "Text": "f(n+1)",
            "AttrFlags": 2
          },
          {
            "Text": " which is actually "
          },
          {
            "Text": "f(n) + f(n-1)",
            "AttrFlags": 2
          },
          {
            "Text": ". To get this, from matrix "
          },
          {
            "Text": "A",
            "AttrFlags": 1
          },
          {
            "Text": ", we need, "
          },
          {
            "Text": "1 X f(n)",
            "AttrFlags": 1
          },
          {
            "Text": " and "
          },
          {
            "Text": "1 X f(n-1)",
            "AttrFlags": 1
          },
          {
            "Text": ". So the first row of "
          },
          {
            "Text": "M",
            "AttrFlags": 1
          },
          {
            "Text": " will be "
          },
          {
            "Text": "[1 1]",
            "AttrFlags": 1
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928838658,
        "id": "abe3564a-28e2-419f-983e-2bfd50ff7d53",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928838658,
        "parent_id": "a04ccbec-f407-4bfb-ba44-51ebed6b8fe1",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "| 1   1 |  X  |  f(n)  |  =  | f(n+1) |\n| ----- |     | f(n-1) |     | ------ |"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "| 1   1 |  X  |  f(n)  |  =  | f(n+1) |\n| ----- |     | f(n-1) |     | ------ |",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928838658,
        "id": "941737b0-3082-41d0-adae-17c448506f76",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928838658,
        "parent_id": "a04ccbec-f407-4bfb-ba44-51ebed6b8fe1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "[Note: —– means we are not concerned about this value.] Similarly, 2nd item of "
            ],
            [
              "B",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " is "
            ],
            [
              "f(n)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " which can be got by simply taking "
            ],
            [
              "1 X f(n)",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " from "
            ],
            [
              "A",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", so the 2nd row of "
            ],
            [
              "M",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " is [1 0]."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "[Note: —– means we are not concerned about this value.] Similarly, 2nd item of "
          },
          {
            "Text": "B",
            "AttrFlags": 1
          },
          {
            "Text": " is "
          },
          {
            "Text": "f(n)",
            "AttrFlags": 2
          },
          {
            "Text": " which can be got by simply taking "
          },
          {
            "Text": "1 X f(n)",
            "AttrFlags": 1
          },
          {
            "Text": " from "
          },
          {
            "Text": "A",
            "AttrFlags": 1
          },
          {
            "Text": ", so the 2nd row of "
          },
          {
            "Text": "M",
            "AttrFlags": 1
          },
          {
            "Text": " is [1 0]."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928838658,
        "id": "7277a4a3-1686-45c0-bcea-8b00851f0b4d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928838658,
        "parent_id": "a04ccbec-f407-4bfb-ba44-51ebed6b8fe1",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "| ----- |  X  |  f(n)  |  =  | ------ |\n| 1   0 |     | f(n-1) |     |  f(n)  |"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "| ----- |  X  |  f(n)  |  =  | ------ |\n| 1   0 |     | f(n-1) |     |  f(n)  |",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928838658,
        "id": "8a3c4b3d-c70e-4ea3-a25a-519710c27455",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928838658,
        "parent_id": "a04ccbec-f407-4bfb-ba44-51ebed6b8fe1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Then we get our desired "
            ],
            [
              "2 X 2",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " matrix "
            ],
            [
              "M",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Then we get our desired "
          },
          {
            "Text": "2 X 2",
            "AttrFlags": 1
          },
          {
            "Text": " matrix "
          },
          {
            "Text": "M",
            "AttrFlags": 1
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928838658,
        "id": "c62ba195-0f7c-403a-b669-d6933355d662",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928838658,
        "parent_id": "a04ccbec-f407-4bfb-ba44-51ebed6b8fe1",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "| 1   1 |  X  |  f(n)  |  =  | f(n+1) |\n| 1   0 |     | f(n-1) |     |  f(n)  |"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "| 1   1 |  X  |  f(n)  |  =  | f(n+1) |\n| 1   0 |     | f(n-1) |     |  f(n)  |",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928838659,
        "id": "50472b6b-cca0-414c-8a24-fba78d05316b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928838659,
        "parent_id": "a04ccbec-f407-4bfb-ba44-51ebed6b8fe1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "These matrices are simply derived using matrix multiplication."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "These matrices are simply derived using matrix multiplication."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928838659,
        "id": "0aa164d6-bdc4-46bf-98e2-a337e0620a3f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928838659,
        "parent_id": "a04ccbec-f407-4bfb-ba44-51ebed6b8fe1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Type 2:",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Type 2:",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928838659,
        "id": "066bfacd-b42f-4e8a-b349-3bb33dcc2178",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928838659,
        "parent_id": "a04ccbec-f407-4bfb-ba44-51ebed6b8fe1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Let’s make it a little complex: find "
            ],
            [
              "f(n) = a X f(n-1) + b X f(n-2)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", where "
            ],
            [
              "a",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "b",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " are constants. This tells us, "
            ],
            [
              "f(n+1) = a X f(n) + b X f(n-1)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". By this far, this should be clear that the dimension of the matrices will be equal to the number of dependencies, i.e. in this particular example, again 2. So for "
            ],
            [
              "A",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "B",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", we can build two matrices of size "
            ],
            [
              "2 X 1",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Let’s make it a little complex: find "
          },
          {
            "Text": "f(n) = a X f(n-1) + b X f(n-2)",
            "AttrFlags": 2
          },
          {
            "Text": ", where "
          },
          {
            "Text": "a",
            "AttrFlags": 1
          },
          {
            "Text": " and "
          },
          {
            "Text": "b",
            "AttrFlags": 1
          },
          {
            "Text": " are constants. This tells us, "
          },
          {
            "Text": "f(n+1) = a X f(n) + b X f(n-1)",
            "AttrFlags": 2
          },
          {
            "Text": ". By this far, this should be clear that the dimension of the matrices will be equal to the number of dependencies, i.e. in this particular example, again 2. So for "
          },
          {
            "Text": "A",
            "AttrFlags": 1
          },
          {
            "Text": " and "
          },
          {
            "Text": "B",
            "AttrFlags": 1
          },
          {
            "Text": ", we can build two matrices of size "
          },
          {
            "Text": "2 X 1",
            "AttrFlags": 1
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928838659,
        "id": "178842a0-03c7-49cf-808f-125733cc1845",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928838659,
        "parent_id": "a04ccbec-f407-4bfb-ba44-51ebed6b8fe1",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Matrix A             Matrix B\n|  f(n)  |          | f(n+1) |\n| f(n-1) |          |  f(n)  |"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Matrix A             Matrix B\n|  f(n)  |          | f(n+1) |\n| f(n-1) |          |  f(n)  |",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928838659,
        "id": "80caf3f7-9207-4d47-8d08-8fa19d608bfc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928838659,
        "parent_id": "a04ccbec-f407-4bfb-ba44-51ebed6b8fe1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Now for "
            ],
            [
              "f(n+1) = a X f(n) + b X f(n-1)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", we need [a, b] in the first row of objective matrix "
            ],
            [
              "M",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". And for the 2nd item in "
            ],
            [
              "B",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", i.e. "
            ],
            [
              "f(n)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " we already have that in matrix "
            ],
            [
              "A",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", so we just take that, which leads, the 2nd row of the matrix M to [1 0]. This time we get:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Now for "
          },
          {
            "Text": "f(n+1) = a X f(n) + b X f(n-1)",
            "AttrFlags": 2
          },
          {
            "Text": ", we need [a, b] in the first row of objective matrix "
          },
          {
            "Text": "M",
            "AttrFlags": 1
          },
          {
            "Text": ". And for the 2nd item in "
          },
          {
            "Text": "B",
            "AttrFlags": 1
          },
          {
            "Text": ", i.e. "
          },
          {
            "Text": "f(n)",
            "AttrFlags": 2
          },
          {
            "Text": " we already have that in matrix "
          },
          {
            "Text": "A",
            "AttrFlags": 1
          },
          {
            "Text": ", so we just take that, which leads, the 2nd row of the matrix M to [1 0]. This time we get:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928838659,
        "id": "3a230213-4ef6-4ba6-955c-30c7267573ce",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928838659,
        "parent_id": "a04ccbec-f407-4bfb-ba44-51ebed6b8fe1",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "| a   b |  X  |  f(n)  |  =  | f(n+1) |\n| 1   0 |     | f(n-1) |     |  f(n)  |"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "| a   b |  X  |  f(n)  |  =  | f(n+1) |\n| 1   0 |     | f(n-1) |     |  f(n)  |",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928838659,
        "id": "d082a0f5-a0f8-475d-8abe-4360f4832e69",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928838659,
        "parent_id": "a04ccbec-f407-4bfb-ba44-51ebed6b8fe1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Pretty simple, eh?"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Pretty simple, eh?"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928838660,
        "id": "c2511b6f-f406-4e8d-b20b-c1347214ec0e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928838660,
        "parent_id": "a04ccbec-f407-4bfb-ba44-51ebed6b8fe1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Type 3:",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Type 3:",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928838660,
        "id": "693e2e41-3b71-40a0-8e3a-baa3d94b2634",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928838660,
        "parent_id": "a04ccbec-f407-4bfb-ba44-51ebed6b8fe1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If you’ve survived through to this stage, you’ve grown much older, now let’s face a bit complex relation: find "
            ],
            [
              "f(n) = a X f(n-1) + c X f(n-3)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "? Ooops! A few minutes ago, all we saw were contiguous states, but here, the state "
            ],
            [
              "f(n-2)",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " is missing. Now?"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If you’ve survived through to this stage, you’ve grown much older, now let’s face a bit complex relation: find "
          },
          {
            "Text": "f(n) = a X f(n-1) + c X f(n-3)",
            "AttrFlags": 2
          },
          {
            "Text": "? Ooops! A few minutes ago, all we saw were contiguous states, but here, the state "
          },
          {
            "Text": "f(n-2)",
            "AttrFlags": 1
          },
          {
            "Text": " is missing. Now?"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928838660,
        "id": "a4884cb3-c62b-430b-8030-97201dbbc9aa",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928838660,
        "parent_id": "a04ccbec-f407-4bfb-ba44-51ebed6b8fe1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Actually this is not a problem anymore, we can convert the relation as follows: "
            ],
            [
              "f(n) = a X f(n-1) + 0 X f(n-2) + c X f(n-3)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", deducing "
            ],
            [
              "f(n+1) = a X f(n) + 0 X f(n-1) + c X f(n-2)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Now, we see that, this is actually a form described in Type 2. So here the objective matrix "
            ],
            [
              "M",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " will be "
            ],
            [
              "3 X 3",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", and the elements are:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Actually this is not a problem anymore, we can convert the relation as follows: "
          },
          {
            "Text": "f(n) = a X f(n-1) + 0 X f(n-2) + c X f(n-3)",
            "AttrFlags": 2
          },
          {
            "Text": ", deducing "
          },
          {
            "Text": "f(n+1) = a X f(n) + 0 X f(n-1) + c X f(n-2)",
            "AttrFlags": 2
          },
          {
            "Text": ". Now, we see that, this is actually a form described in Type 2. So here the objective matrix "
          },
          {
            "Text": "M",
            "AttrFlags": 1
          },
          {
            "Text": " will be "
          },
          {
            "Text": "3 X 3",
            "AttrFlags": 1
          },
          {
            "Text": ", and the elements are:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928838660,
        "id": "c5eb9e5d-3e3c-42a4-bf53-f5cdabf7e891",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928838660,
        "parent_id": "a04ccbec-f407-4bfb-ba44-51ebed6b8fe1",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "| a 0 c |     |  f(n)  |     | f(n+1) |\n| 1 0 0 |  X  | f(n-1) |  =  |  f(n)  |\n| 0 1 0 |     | f(n-2) |     | f(n-1) |"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "| a 0 c |     |  f(n)  |     | f(n+1) |\n| 1 0 0 |  X  | f(n-1) |  =  |  f(n)  |\n| 0 1 0 |     | f(n-2) |     | f(n-1) |",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928838660,
        "id": "88b8be37-6bfc-4a9d-b313-342d76767062",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928838660,
        "parent_id": "a04ccbec-f407-4bfb-ba44-51ebed6b8fe1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "These are calculated in the same way as type 2, if you find it difficult, try it on pen and paper."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "These are calculated in the same way as type 2, if you find it difficult, try it on pen and paper."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928838660,
        "id": "750f99b7-f78c-49b1-ab00-649893a250f2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928838660,
        "parent_id": "a04ccbec-f407-4bfb-ba44-51ebed6b8fe1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Type 4:",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Type 4:",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928838660,
        "id": "aaf7a691-da1f-4035-9a01-35aa283ed5fd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928838660,
        "parent_id": "a04ccbec-f407-4bfb-ba44-51ebed6b8fe1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Life is getting complex as hell, and Mr, Problem now asks you to find "
            ],
            [
              "f(n) = f(n-1) + f(n-2) + c",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " where "
            ],
            [
              "c",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " is any constant. Now this is a new one and all we have seen in past, after the multiplication, each state in "
            ],
            [
              "A",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " transforms to its next state in "
            ],
            [
              "B",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Life is getting complex as hell, and Mr, Problem now asks you to find "
          },
          {
            "Text": "f(n) = f(n-1) + f(n-2) + c",
            "AttrFlags": 2
          },
          {
            "Text": " where "
          },
          {
            "Text": "c",
            "AttrFlags": 1
          },
          {
            "Text": " is any constant. Now this is a new one and all we have seen in past, after the multiplication, each state in "
          },
          {
            "Text": "A",
            "AttrFlags": 1
          },
          {
            "Text": " transforms to its next state in "
          },
          {
            "Text": "B",
            "AttrFlags": 1
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928838661,
        "id": "76b96656-2490-4b93-b46c-cb61b1030b2c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928838661,
        "parent_id": "a04ccbec-f407-4bfb-ba44-51ebed6b8fe1",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "f(n) = f(n-1) + f(n-2) + c\nf(n+1) = f(n) + f(n-1) + c\nf(n+2) = f(n+1) + f(n) + c\n.................... so on"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "f(n) = f(n-1) + f(n-2) + c\nf(n+1) = f(n) + f(n-1) + c\nf(n+2) = f(n+1) + f(n) + c\n.................... so on",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928838661,
        "id": "1bc87c79-bdc7-44d6-a21b-eaeff50165e9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928838661,
        "parent_id": "a04ccbec-f407-4bfb-ba44-51ebed6b8fe1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "So , normally we can’t get it through previous fashion, but how about we add "
            ],
            [
              "c",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " as a state:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "So , normally we can’t get it through previous fashion, but how about we add "
          },
          {
            "Text": "c",
            "AttrFlags": 1
          },
          {
            "Text": " as a state:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928838661,
        "id": "6925d6a4-9ebb-478b-a3e2-35774dbb143f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928838661,
        "parent_id": "a04ccbec-f407-4bfb-ba44-51ebed6b8fe1",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "|  f(n)  |   | f(n+1) |\nM X | f(n-1) | = |  f(n)  |\n|    c   |   |    c   |"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "|  f(n)  |   | f(n+1) |\nM X | f(n-1) | = |  f(n)  |\n|    c   |   |    c   |",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928838661,
        "id": "73952605-1462-462d-89ee-527b4b741d7c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928838661,
        "parent_id": "a04ccbec-f407-4bfb-ba44-51ebed6b8fe1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Now, its not much hard to design "
            ],
            [
              "M",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". Here’s how its done, but don’t forget to verify:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Now, its not much hard to design "
          },
          {
            "Text": "M",
            "AttrFlags": 1
          },
          {
            "Text": ". Here’s how its done, but don’t forget to verify:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928838661,
        "id": "c0ded387-f1b3-4339-a193-ebda0768bb45",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928838661,
        "parent_id": "a04ccbec-f407-4bfb-ba44-51ebed6b8fe1",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "| 1 1 1 |     |  f(n)  |     | f(n+1) |\n| 1 0 0 |  X  | f(n-1) |  =  |  f(n)  |\n| 0 0 1 |     |    c   |     |    c   |"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "| 1 1 1 |     |  f(n)  |     | f(n+1) |\n| 1 0 0 |  X  | f(n-1) |  =  |  f(n)  |\n| 0 0 1 |     |    c   |     |    c   |",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928838661,
        "id": "2a22e20a-c0da-47e7-a46b-e50fe702bac8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928838661,
        "parent_id": "a04ccbec-f407-4bfb-ba44-51ebed6b8fe1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Type 5:",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Type 5:",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928838661,
        "id": "a39e4f74-041f-440a-a5f4-5a83fa68ad5f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928838661,
        "parent_id": "a04ccbec-f407-4bfb-ba44-51ebed6b8fe1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Let’s put it altogether: find "
            ],
            [
              "f(n) = a X f(n-1) + c X f(n-3) + d X f(n-4) + e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Let’s leave it as an exercise for you. First try to find out the states and matrix "
            ],
            [
              "M",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". And check if it matches with your solution. Also find matrix "
            ],
            [
              "A",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "B",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Let’s put it altogether: find "
          },
          {
            "Text": "f(n) = a X f(n-1) + c X f(n-3) + d X f(n-4) + e",
            "AttrFlags": 2
          },
          {
            "Text": ". Let’s leave it as an exercise for you. First try to find out the states and matrix "
          },
          {
            "Text": "M",
            "AttrFlags": 1
          },
          {
            "Text": ". And check if it matches with your solution. Also find matrix "
          },
          {
            "Text": "A",
            "AttrFlags": 1
          },
          {
            "Text": " and "
          },
          {
            "Text": "B",
            "AttrFlags": 1
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928838661,
        "id": "97b58d1b-b03e-41f7-bbaa-2f5eebd0a64a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928838661,
        "parent_id": "a04ccbec-f407-4bfb-ba44-51ebed6b8fe1",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "| a 0 c d 1 |\n| 1 0 0 0 0 |\n| 0 1 0 0 0 |\n| 0 0 1 0 0 |\n| 0 0 0 0 1 |"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "| a 0 c d 1 |\n| 1 0 0 0 0 |\n| 0 1 0 0 0 |\n| 0 0 1 0 0 |\n| 0 0 0 0 1 |",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928838661,
        "id": "5efb70c2-200b-4482-ab59-b8aaadaa5c55",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928838661,
        "parent_id": "a04ccbec-f407-4bfb-ba44-51ebed6b8fe1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Type 6:",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Type 6:",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928838662,
        "id": "df398b57-f774-45a2-af21-f2855d45741c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928838662,
        "parent_id": "a04ccbec-f407-4bfb-ba44-51ebed6b8fe1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Sometimes the recurrence is given like this:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Sometimes the recurrence is given like this:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928838662,
        "id": "b40010a3-c1fb-4833-b9f2-dcd81644a7b8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928838662,
        "parent_id": "a04ccbec-f407-4bfb-ba44-51ebed6b8fe1",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "f(n) = f(n-1)   -\u003e if n is odd\nf(n) = f(n-2)   -\u003e if n is even"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "f(n) = f(n-1)   -\u003e if n is odd\nf(n) = f(n-2)   -\u003e if n is even",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928838662,
        "id": "562568a8-7f8e-40ac-bd4c-fa4b4632c3cd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928838662,
        "parent_id": "a04ccbec-f407-4bfb-ba44-51ebed6b8fe1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In short:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In short:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928838662,
        "id": "e018cc87-246e-4919-b530-36df1357aeff",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928838662,
        "parent_id": "a04ccbec-f407-4bfb-ba44-51ebed6b8fe1",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "f(n) = (n\u00261) X f(n-1) + (!(n\u00261)) X f(n-2)"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "f(n) = (n\u00261) X f(n-1) + (!(n\u00261)) X f(n-2)",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928838662,
        "id": "5b2e231c-4a7f-48de-b39e-5fbb0bf77e6b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928838662,
        "parent_id": "a04ccbec-f407-4bfb-ba44-51ebed6b8fe1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Here, we can split the functions in the basis of odd even and keep 2 different matrix for both of them and calculate them separately."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Here, we can split the functions in the basis of odd even and keep 2 different matrix for both of them and calculate them separately."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928838662,
        "id": "b9d39a04-cd5c-4392-9eb4-fcb2d322ce27",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928838662,
        "parent_id": "a04ccbec-f407-4bfb-ba44-51ebed6b8fe1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Type 7:",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Type 7:",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928838662,
        "id": "4a2b7bd4-28f9-4ab7-b3aa-7a30f74588a7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928838662,
        "parent_id": "a04ccbec-f407-4bfb-ba44-51ebed6b8fe1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Feeling little too confident? Good for you. Sometimes we may need to maintain more than one recurrence, where they are interested. For example, let a recurrence re;atopm be:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Feeling little too confident? Good for you. Sometimes we may need to maintain more than one recurrence, where they are interested. For example, let a recurrence re;atopm be:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928838662,
        "id": "4d0998b9-684c-4424-81a2-7046123e67b9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928838662,
        "parent_id": "a04ccbec-f407-4bfb-ba44-51ebed6b8fe1",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "g(n) = 2g(n-1) + 2g(n-2) + f(n)"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "g(n) = 2g(n-1) + 2g(n-2) + f(n)",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928838662,
        "id": "d9e3a1fa-9695-4608-b733-57dd8d29773d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928838662,
        "parent_id": "a04ccbec-f407-4bfb-ba44-51ebed6b8fe1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Here, recurrence "
            ],
            [
              "g(n)",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " is dependent upon "
            ],
            [
              "f(n)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and this can be calculated in the same matrix but of increased dimensions. From these let’s at first design the matrices "
            ],
            [
              "A",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "B",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Here, recurrence "
          },
          {
            "Text": "g(n)",
            "AttrFlags": 4
          },
          {
            "Text": " is dependent upon "
          },
          {
            "Text": "f(n)",
            "AttrFlags": 2
          },
          {
            "Text": " and this can be calculated in the same matrix but of increased dimensions. From these let’s at first design the matrices "
          },
          {
            "Text": "A",
            "AttrFlags": 1
          },
          {
            "Text": " and "
          },
          {
            "Text": "B",
            "AttrFlags": 1
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928838662,
        "id": "39b70c4b-1933-463d-9b71-47beb846483a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928838662,
        "parent_id": "a04ccbec-f407-4bfb-ba44-51ebed6b8fe1",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Matrix A            Matrix B\n|  g(n)  |          | g(n+1) |\n| g(n-1) |          |  g(n)  |\n| f(n+1) |          | f(n+2) |\n|  f(n)  |          | f(n+1) |"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Matrix A            Matrix B\n|  g(n)  |          | g(n+1) |\n| g(n-1) |          |  g(n)  |\n| f(n+1) |          | f(n+2) |\n|  f(n)  |          | f(n+1) |",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928838663,
        "id": "67f505e4-1ea1-44ec-b86c-b8d8e2405d47",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928838663,
        "parent_id": "a04ccbec-f407-4bfb-ba44-51ebed6b8fe1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Here, "
            ],
            [
              "g(n+1) = 2g(n-1) + f(n+1) and f(n+2) = 2f(n+1) + 2f(n)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Now, using the processes stated above, we can find the objective matrix "
            ],
            [
              "M",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " to be:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Here, "
          },
          {
            "Text": "g(n+1) = 2g(n-1) + f(n+1) and f(n+2) = 2f(n+1) + 2f(n)",
            "AttrFlags": 2
          },
          {
            "Text": ". Now, using the processes stated above, we can find the objective matrix "
          },
          {
            "Text": "M",
            "AttrFlags": 1
          },
          {
            "Text": " to be:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928838663,
        "id": "99ea7665-489d-426d-88d1-1b4afa32227e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928838663,
        "parent_id": "a04ccbec-f407-4bfb-ba44-51ebed6b8fe1",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "| 2 2 1 0 |\n| 1 0 0 0 |\n| 0 0 2 2 |\n| 0 0 1 0 |"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "| 2 2 1 0 |\n| 1 0 0 0 |\n| 0 0 2 2 |\n| 0 0 1 0 |",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928838663,
        "id": "c50d1bf9-29ff-47ee-8449-b0606f26e45a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928838663,
        "parent_id": "a04ccbec-f407-4bfb-ba44-51ebed6b8fe1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "So, these are the basic categories of recurrence relations which are used to solveby this simple technique."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "So, these are the basic categories of recurrence relations which are used to solveby this simple technique."
          }
        ]
      }
    ],
    "title": "Matrix Exponentiation to Solve Example Problems",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}