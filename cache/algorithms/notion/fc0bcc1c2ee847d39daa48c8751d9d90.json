{
  "ID": "fc0bcc1c-2ee8-47d3-9daa-48c8751d9d90",
  "Root": {
    "alive": true,
    "content": [
      "29e8eac6-be86-44e6-a595-a9e3eb7ae2ac",
      "a9d37327-cdb0-4681-9abb-279b2a053135",
      "6f94e2ab-8f10-4511-870e-d86ca4730bfa",
      "3cb89c29-80cf-436c-aabc-f8aeb7b539ee",
      "c239a9d5-6d1f-40a8-89f4-b214a50d3c0d",
      "270bec22-e872-4df0-81a7-ef40f6e7cfef",
      "46735bc4-29d6-46b0-8e29-8c2374fc110a",
      "29da397e-cf01-4508-bab0-a71fdc3aee24",
      "98036b5c-68e2-4feb-babd-c1d3183e5ef1",
      "180cb243-62c2-48fc-bfa4-f260e0e2350a",
      "6b3a1ec7-6d9f-4e84-9a00-5a2e2f22c9f5",
      "fd95f8a0-34f8-4cbb-b52a-75ffaa3ff1e6",
      "36c168b5-b807-40c0-b59c-a8d8520c8aab",
      "0d0bef7a-3b46-486b-83f4-658580029a7d",
      "478f33c8-d6e4-49fa-a94f-c6a4632c5872",
      "0f0037f4-c1aa-4908-876e-91cb1c367f6b",
      "300817c6-06eb-41aa-bc31-aee82e5938b9",
      "0a6f7e5d-671b-4d34-b5d2-53d2aa9d95dd",
      "6676a150-0af1-4ed8-91b6-18e8fcd720cd",
      "722a2f6f-fa47-42aa-af36-5acda840a061",
      "3f14cece-0fdb-4389-973c-ecc8d83363e6",
      "b453f1a9-e3ea-4040-a31d-c974a2712bb0",
      "3709b8da-a669-4884-b90f-c9ef6a78ae40",
      "fdcf4140-f394-4d2d-85a1-f7129a6743bb",
      "8767e6dc-5e3d-453a-9de2-948a58caeadc",
      "116cd749-8a84-4f65-a85b-2a604fbed844",
      "d812fae3-0d9f-4106-8b8a-54a0d6b13b8d",
      "80edde47-bd01-4b11-a036-b96d8ac69e19",
      "033cc791-21a2-4c31-b500-126fa55d274b",
      "202c5f14-6374-4315-ae58-bbff5563e78a",
      "7ae5b1fa-cb98-4036-8fed-c7d7f65ac0da",
      "6a6e0983-b30a-45e9-93fa-1e8352da4318",
      "cb2d363f-e73b-406e-8a32-25b89817719d",
      "06de8635-48de-4933-bd62-847ab1f8a874",
      "ed2a9984-0cd2-4beb-8ea0-85ba1246544f"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551928756391,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "fc0bcc1c-2ee8-47d3-9daa-48c8751d9d90",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551928756391,
    "parent_id": "3104f50a-b7e2-41fe-97d7-f6e02201ccb8",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Finding the Shortest Path from Source to other Nodes"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928756380,
        "id": "29e8eac6-be86-44e6-a595-a9e3eb7ae2ac",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928756380,
        "parent_id": "fc0bcc1c-2ee8-47d3-9daa-48c8751d9d90",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Breadth-first-search",
              [
                [
                  "a",
                  "https://en.wikipedia.org/wiki/Breadth-first_search"
                ]
              ]
            ],
            [
              " (BFS) is an algorithm for traversing or searching tree or graph data structures. It starts at the tree root (or some arbitrary node of a graph, sometimes referred to as a ‘search key’) and explores the neighbor nodes first, before moving to the next level neighbors. BFS was invented in the late 1950s by "
            ],
            [
              "Edward Forrest Moore",
              [
                [
                  "a",
                  "https://en.wikipedia.org/wiki/Edward_F._Moore"
                ]
              ]
            ],
            [
              ", who used it to find the shortest path out of a maze and discovered independently by C. Y. Lee as a wire routing algorithm in 1961."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Breadth-first-search",
            "Link": "https://en.wikipedia.org/wiki/Breadth-first_search"
          },
          {
            "Text": " (BFS) is an algorithm for traversing or searching tree or graph data structures. It starts at the tree root (or some arbitrary node of a graph, sometimes referred to as a ‘search key’) and explores the neighbor nodes first, before moving to the next level neighbors. BFS was invented in the late 1950s by "
          },
          {
            "Text": "Edward Forrest Moore",
            "Link": "https://en.wikipedia.org/wiki/Edward_F._Moore"
          },
          {
            "Text": ", who used it to find the shortest path out of a maze and discovered independently by C. Y. Lee as a wire routing algorithm in 1961."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928756381,
        "id": "a9d37327-cdb0-4681-9abb-279b2a053135",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928756381,
        "parent_id": "fc0bcc1c-2ee8-47d3-9daa-48c8751d9d90",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The processes of BFS algorithm works under these assumptions:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The processes of BFS algorithm works under these assumptions:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928756382,
        "id": "6f94e2ab-8f10-4511-870e-d86ca4730bfa",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928756382,
        "parent_id": "fc0bcc1c-2ee8-47d3-9daa-48c8751d9d90",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We won’t traverse any node more than once."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "We won’t traverse any node more than once."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928756382,
        "id": "3cb89c29-80cf-436c-aabc-f8aeb7b539ee",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928756382,
        "parent_id": "fc0bcc1c-2ee8-47d3-9daa-48c8751d9d90",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Source node or the node that we’re starting from is situated in level 0."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Source node or the node that we’re starting from is situated in level 0."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928756382,
        "id": "c239a9d5-6d1f-40a8-89f4-b214a50d3c0d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928756382,
        "parent_id": "fc0bcc1c-2ee8-47d3-9daa-48c8751d9d90",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The nodes we can directly reach from source node are level 1 nodes, the nodes we can directly reach from level 1 nodes are level 2 nodes and so on."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "The nodes we can directly reach from source node are level 1 nodes, the nodes we can directly reach from level 1 nodes are level 2 nodes and so on."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928756382,
        "id": "270bec22-e872-4df0-81a7-ef40f6e7cfef",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928756382,
        "parent_id": "fc0bcc1c-2ee8-47d3-9daa-48c8751d9d90",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The level denotes the distance of the shortest path from the source."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "The level denotes the distance of the shortest path from the source."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928756382,
        "id": "46735bc4-29d6-46b0-8e29-8c2374fc110a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928756382,
        "parent_id": "fc0bcc1c-2ee8-47d3-9daa-48c8751d9d90",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Let’s see an example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Let’s see an example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928756383,
        "id": "29da397e-cf01-4508-bab0-a71fdc3aee24",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928756383,
        "parent_id": "fc0bcc1c-2ee8-47d3-9daa-48c8751d9d90",
        "parent_table": "block",
        "properties": {
          "source": [
            [
              "/tmp/59db728f-cc9f-4398-992a-1420e29fc53a/89d0412a424e81970318a54c89ec3804fadb8525.png"
            ]
          ]
        },
        "type": "image",
        "version": 1,
        "source": "/tmp/59db728f-cc9f-4398-992a-1420e29fc53a/89d0412a424e81970318a54c89ec3804fadb8525.png",
        "image_url": "https://www.notion.so/image/https:%2F%2Fwww.notion.so%2Ftmp%2F59db728f-cc9f-4398-992a-1420e29fc53a%2F89d0412a424e81970318a54c89ec3804fadb8525.png"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928756383,
        "id": "98036b5c-68e2-4feb-babd-c1d3183e5ef1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928756383,
        "parent_id": "fc0bcc1c-2ee8-47d3-9daa-48c8751d9d90",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Let’s assume this graph represents connection between multiple cities, where each node denotes a city and an edge between two nodes denote there is a road linking them. We want to go from "
            ],
            [
              "node 1",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " to "
            ],
            [
              "node 10",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". So "
            ],
            [
              "node 1",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " is our "
            ],
            [
              "source",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", which is "
            ],
            [
              "level 0",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". We mark "
            ],
            [
              "node 1",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " as visited. We can go to "
            ],
            [
              "node 2",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "node 3",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "node 4",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " from here. So they’ll be "
            ],
            [
              "level (0+1)",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " = "
            ],
            [
              "level 1",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " nodes. Now we’ll mark them as visited and work with them."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Let’s assume this graph represents connection between multiple cities, where each node denotes a city and an edge between two nodes denote there is a road linking them. We want to go from "
          },
          {
            "Text": "node 1",
            "AttrFlags": 1
          },
          {
            "Text": " to "
          },
          {
            "Text": "node 10",
            "AttrFlags": 1
          },
          {
            "Text": ". So "
          },
          {
            "Text": "node 1",
            "AttrFlags": 1
          },
          {
            "Text": " is our "
          },
          {
            "Text": "source",
            "AttrFlags": 1
          },
          {
            "Text": ", which is "
          },
          {
            "Text": "level 0",
            "AttrFlags": 1
          },
          {
            "Text": ". We mark "
          },
          {
            "Text": "node 1",
            "AttrFlags": 1
          },
          {
            "Text": " as visited. We can go to "
          },
          {
            "Text": "node 2",
            "AttrFlags": 1
          },
          {
            "Text": ", "
          },
          {
            "Text": "node 3",
            "AttrFlags": 1
          },
          {
            "Text": " and "
          },
          {
            "Text": "node 4",
            "AttrFlags": 1
          },
          {
            "Text": " from here. So they’ll be "
          },
          {
            "Text": "level (0+1)",
            "AttrFlags": 1
          },
          {
            "Text": " = "
          },
          {
            "Text": "level 1",
            "AttrFlags": 1
          },
          {
            "Text": " nodes. Now we’ll mark them as visited and work with them."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928756384,
        "id": "180cb243-62c2-48fc-bfa4-f260e0e2350a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928756384,
        "parent_id": "fc0bcc1c-2ee8-47d3-9daa-48c8751d9d90",
        "parent_table": "block",
        "properties": {
          "source": [
            [
              "/tmp/59db728f-cc9f-4398-992a-1420e29fc53a/1f7befe57d776c557311ef515bf3856b4c47146c.png"
            ]
          ]
        },
        "type": "image",
        "version": 1,
        "source": "/tmp/59db728f-cc9f-4398-992a-1420e29fc53a/1f7befe57d776c557311ef515bf3856b4c47146c.png",
        "image_url": "https://www.notion.so/image/https:%2F%2Fwww.notion.so%2Ftmp%2F59db728f-cc9f-4398-992a-1420e29fc53a%2F1f7befe57d776c557311ef515bf3856b4c47146c.png"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928756384,
        "id": "6b3a1ec7-6d9f-4e84-9a00-5a2e2f22c9f5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928756384,
        "parent_id": "fc0bcc1c-2ee8-47d3-9daa-48c8751d9d90",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The colored nodes are visited. The nodes that we’re currently working with will be marked with pink. We won’t visit the same node twice. From "
            ],
            [
              "node 2",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "node 3",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "node 4",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", we can go to "
            ],
            [
              "node 6,",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "node 7",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "node 8",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". Let’s mark them as visited. The level of these nodes will be "
            ],
            [
              "level (1+1)",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " = "
            ],
            [
              "level 2",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The colored nodes are visited. The nodes that we’re currently working with will be marked with pink. We won’t visit the same node twice. From "
          },
          {
            "Text": "node 2",
            "AttrFlags": 1
          },
          {
            "Text": ", "
          },
          {
            "Text": "node 3",
            "AttrFlags": 1
          },
          {
            "Text": " and "
          },
          {
            "Text": "node 4",
            "AttrFlags": 1
          },
          {
            "Text": ", we can go to "
          },
          {
            "Text": "node 6,",
            "AttrFlags": 1
          },
          {
            "Text": " "
          },
          {
            "Text": "node 7",
            "AttrFlags": 1
          },
          {
            "Text": " and "
          },
          {
            "Text": "node 8",
            "AttrFlags": 1
          },
          {
            "Text": ". Let’s mark them as visited. The level of these nodes will be "
          },
          {
            "Text": "level (1+1)",
            "AttrFlags": 1
          },
          {
            "Text": " = "
          },
          {
            "Text": "level 2",
            "AttrFlags": 1
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928756384,
        "id": "fd95f8a0-34f8-4cbb-b52a-75ffaa3ff1e6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928756384,
        "parent_id": "fc0bcc1c-2ee8-47d3-9daa-48c8751d9d90",
        "parent_table": "block",
        "properties": {
          "source": [
            [
              "/tmp/59db728f-cc9f-4398-992a-1420e29fc53a/80d7e2cf33293546b1a69a1a4c24b45815b7cf7b.png"
            ]
          ]
        },
        "type": "image",
        "version": 1,
        "source": "/tmp/59db728f-cc9f-4398-992a-1420e29fc53a/80d7e2cf33293546b1a69a1a4c24b45815b7cf7b.png",
        "image_url": "https://www.notion.so/image/https:%2F%2Fwww.notion.so%2Ftmp%2F59db728f-cc9f-4398-992a-1420e29fc53a%2F80d7e2cf33293546b1a69a1a4c24b45815b7cf7b.png"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928756385,
        "id": "36c168b5-b807-40c0-b59c-a8d8520c8aab",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928756385,
        "parent_id": "fc0bcc1c-2ee8-47d3-9daa-48c8751d9d90",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If you haven’t noticed, the level of nodes simply denote the shortest path distance from the "
            ],
            [
              "source",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". For example: we’ve found "
            ],
            [
              "node 8",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " on "
            ],
            [
              "level 2",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". So the distance from "
            ],
            [
              "source",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " to "
            ],
            [
              "node 8",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " is "
            ],
            [
              "2",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If you haven’t noticed, the level of nodes simply denote the shortest path distance from the "
          },
          {
            "Text": "source",
            "AttrFlags": 1
          },
          {
            "Text": ". For example: we’ve found "
          },
          {
            "Text": "node 8",
            "AttrFlags": 1
          },
          {
            "Text": " on "
          },
          {
            "Text": "level 2",
            "AttrFlags": 1
          },
          {
            "Text": ". So the distance from "
          },
          {
            "Text": "source",
            "AttrFlags": 1
          },
          {
            "Text": " to "
          },
          {
            "Text": "node 8",
            "AttrFlags": 1
          },
          {
            "Text": " is "
          },
          {
            "Text": "2",
            "AttrFlags": 1
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928756385,
        "id": "0d0bef7a-3b46-486b-83f4-658580029a7d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928756385,
        "parent_id": "fc0bcc1c-2ee8-47d3-9daa-48c8751d9d90",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We didn’t yet reach our target node, that is "
            ],
            [
              "node 10",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". So let’s visit the next nodes. we can directly go to from "
            ],
            [
              "node 6",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "node 7",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "node 8",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "We didn’t yet reach our target node, that is "
          },
          {
            "Text": "node 10",
            "AttrFlags": 1
          },
          {
            "Text": ". So let’s visit the next nodes. we can directly go to from "
          },
          {
            "Text": "node 6",
            "AttrFlags": 1
          },
          {
            "Text": ", "
          },
          {
            "Text": "node 7",
            "AttrFlags": 1
          },
          {
            "Text": " and "
          },
          {
            "Text": "node 8",
            "AttrFlags": 1
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928756385,
        "id": "478f33c8-d6e4-49fa-a94f-c6a4632c5872",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928756385,
        "parent_id": "fc0bcc1c-2ee8-47d3-9daa-48c8751d9d90",
        "parent_table": "block",
        "properties": {
          "source": [
            [
              "/tmp/59db728f-cc9f-4398-992a-1420e29fc53a/9b202c413c28b5dd0ff21634a773609d00317470.png"
            ]
          ]
        },
        "type": "image",
        "version": 1,
        "source": "/tmp/59db728f-cc9f-4398-992a-1420e29fc53a/9b202c413c28b5dd0ff21634a773609d00317470.png",
        "image_url": "https://www.notion.so/image/https:%2F%2Fwww.notion.so%2Ftmp%2F59db728f-cc9f-4398-992a-1420e29fc53a%2F9b202c413c28b5dd0ff21634a773609d00317470.png"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928756385,
        "id": "0f0037f4-c1aa-4908-876e-91cb1c367f6b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928756385,
        "parent_id": "fc0bcc1c-2ee8-47d3-9daa-48c8751d9d90",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We can see that, we found "
            ],
            [
              "node 10",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " at "
            ],
            [
              "level 3",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". So the shortest path from "
            ],
            [
              "source",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " to "
            ],
            [
              "node 10",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " is "
            ],
            [
              "3.",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " We searched the graph level by level and found the shortest path. Now let’s erase the edges that we didn’t use:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "We can see that, we found "
          },
          {
            "Text": "node 10",
            "AttrFlags": 1
          },
          {
            "Text": " at "
          },
          {
            "Text": "level 3",
            "AttrFlags": 1
          },
          {
            "Text": ". So the shortest path from "
          },
          {
            "Text": "source",
            "AttrFlags": 1
          },
          {
            "Text": " to "
          },
          {
            "Text": "node 10",
            "AttrFlags": 1
          },
          {
            "Text": " is "
          },
          {
            "Text": "3.",
            "AttrFlags": 1
          },
          {
            "Text": " We searched the graph level by level and found the shortest path. Now let’s erase the edges that we didn’t use:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928756386,
        "id": "300817c6-06eb-41aa-bc31-aee82e5938b9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928756386,
        "parent_id": "fc0bcc1c-2ee8-47d3-9daa-48c8751d9d90",
        "parent_table": "block",
        "properties": {
          "source": [
            [
              "/tmp/59db728f-cc9f-4398-992a-1420e29fc53a/f45632ffc58a033b2fdac5062bd034c7223a4de4.png"
            ]
          ]
        },
        "type": "image",
        "version": 1,
        "source": "/tmp/59db728f-cc9f-4398-992a-1420e29fc53a/f45632ffc58a033b2fdac5062bd034c7223a4de4.png",
        "image_url": "https://www.notion.so/image/https:%2F%2Fwww.notion.so%2Ftmp%2F59db728f-cc9f-4398-992a-1420e29fc53a%2Ff45632ffc58a033b2fdac5062bd034c7223a4de4.png"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928756386,
        "id": "0a6f7e5d-671b-4d34-b5d2-53d2aa9d95dd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928756386,
        "parent_id": "fc0bcc1c-2ee8-47d3-9daa-48c8751d9d90",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "After removing the edges that we didn’t use, we get a tree called BFS tree. This tree shows the shortest path from "
            ],
            [
              "source",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " to all other nodes."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "After removing the edges that we didn’t use, we get a tree called BFS tree. This tree shows the shortest path from "
          },
          {
            "Text": "source",
            "AttrFlags": 1
          },
          {
            "Text": " to all other nodes."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928756386,
        "id": "6676a150-0af1-4ed8-91b6-18e8fcd720cd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928756386,
        "parent_id": "fc0bcc1c-2ee8-47d3-9daa-48c8751d9d90",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "So our task will be, to go from "
            ],
            [
              "source",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " to "
            ],
            [
              "level 1",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " nodes. Then from "
            ],
            [
              "level 1",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " to "
            ],
            [
              "level 2",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " nodes and so on until we reach our destination. We can use "
            ],
            [
              "queue",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " to store the nodes that we are going to process. That is, for each node we’re going to work with, we’ll push all other nodes that can be directly traversed and not yet traversed in the queue."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "So our task will be, to go from "
          },
          {
            "Text": "source",
            "AttrFlags": 1
          },
          {
            "Text": " to "
          },
          {
            "Text": "level 1",
            "AttrFlags": 1
          },
          {
            "Text": " nodes. Then from "
          },
          {
            "Text": "level 1",
            "AttrFlags": 1
          },
          {
            "Text": " to "
          },
          {
            "Text": "level 2",
            "AttrFlags": 1
          },
          {
            "Text": " nodes and so on until we reach our destination. We can use "
          },
          {
            "Text": "queue",
            "AttrFlags": 4
          },
          {
            "Text": " to store the nodes that we are going to process. That is, for each node we’re going to work with, we’ll push all other nodes that can be directly traversed and not yet traversed in the queue."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928756386,
        "id": "722a2f6f-fa47-42aa-af36-5acda840a061",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928756386,
        "parent_id": "fc0bcc1c-2ee8-47d3-9daa-48c8751d9d90",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The simulation of our example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The simulation of our example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928756386,
        "id": "3f14cece-0fdb-4389-973c-ecc8d83363e6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928756386,
        "parent_id": "fc0bcc1c-2ee8-47d3-9daa-48c8751d9d90",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "First we push the source in the queue. Our queue will look like:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "First we push the source in the queue. Our queue will look like:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928756387,
        "id": "b453f1a9-e3ea-4040-a31d-c974a2712bb0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928756387,
        "parent_id": "fc0bcc1c-2ee8-47d3-9daa-48c8751d9d90",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "front\n+-----+\n|  1  |\n+-----+"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "front\n+-----+\n|  1  |\n+-----+",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928756387,
        "id": "3709b8da-a669-4884-b90f-c9ef6a78ae40",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928756387,
        "parent_id": "fc0bcc1c-2ee8-47d3-9daa-48c8751d9d90",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The level of "
            ],
            [
              "node 1",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " will be 0. "
            ],
            [
              "level[1]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " = "
            ],
            [
              "0",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". Now we start our BFS. At first, we pop a node from our queue. We get "
            ],
            [
              "node 1",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". We can go to "
            ],
            [
              "node 4",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "node 3",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "node 2",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " from this one. We’ve reached these nodes from "
            ],
            [
              "node 1",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". So "
            ],
            [
              "level[4]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " = "
            ],
            [
              "level[3]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " = "
            ],
            [
              "level[2]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " = "
            ],
            [
              "level[1]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " + "
            ],
            [
              "1",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " = "
            ],
            [
              "1",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". Now we mark them as visited and push them in the queue."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The level of "
          },
          {
            "Text": "node 1",
            "AttrFlags": 1
          },
          {
            "Text": " will be 0. "
          },
          {
            "Text": "level[1]",
            "AttrFlags": 1
          },
          {
            "Text": " = "
          },
          {
            "Text": "0",
            "AttrFlags": 1
          },
          {
            "Text": ". Now we start our BFS. At first, we pop a node from our queue. We get "
          },
          {
            "Text": "node 1",
            "AttrFlags": 1
          },
          {
            "Text": ". We can go to "
          },
          {
            "Text": "node 4",
            "AttrFlags": 1
          },
          {
            "Text": ", "
          },
          {
            "Text": "node 3",
            "AttrFlags": 1
          },
          {
            "Text": " and "
          },
          {
            "Text": "node 2",
            "AttrFlags": 1
          },
          {
            "Text": " from this one. We’ve reached these nodes from "
          },
          {
            "Text": "node 1",
            "AttrFlags": 1
          },
          {
            "Text": ". So "
          },
          {
            "Text": "level[4]",
            "AttrFlags": 1
          },
          {
            "Text": " = "
          },
          {
            "Text": "level[3]",
            "AttrFlags": 1
          },
          {
            "Text": " = "
          },
          {
            "Text": "level[2]",
            "AttrFlags": 1
          },
          {
            "Text": " = "
          },
          {
            "Text": "level[1]",
            "AttrFlags": 1
          },
          {
            "Text": " + "
          },
          {
            "Text": "1",
            "AttrFlags": 1
          },
          {
            "Text": " = "
          },
          {
            "Text": "1",
            "AttrFlags": 1
          },
          {
            "Text": ". Now we mark them as visited and push them in the queue."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928756388,
        "id": "fdcf4140-f394-4d2d-85a1-f7129a6743bb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928756388,
        "parent_id": "fc0bcc1c-2ee8-47d3-9daa-48c8751d9d90",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "front\n+-----+  +-----+  +-----+\n|  2  |  |  3  |  |  4  |\n+-----+  +-----+  +-----+"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "front\n+-----+  +-----+  +-----+\n|  2  |  |  3  |  |  4  |\n+-----+  +-----+  +-----+",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928756388,
        "id": "8767e6dc-5e3d-453a-9de2-948a58caeadc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928756388,
        "parent_id": "fc0bcc1c-2ee8-47d3-9daa-48c8751d9d90",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Now we pop "
            ],
            [
              "node 4",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " and work with it. We can go to "
            ],
            [
              "node 7",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " from "
            ],
            [
              "node 4",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". "
            ],
            [
              "level[7]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " = "
            ],
            [
              "level[4]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " + "
            ],
            [
              "1",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " = "
            ],
            [
              "2",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". We mark "
            ],
            [
              "node 7",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " as visited and push it in the queue."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Now we pop "
          },
          {
            "Text": "node 4",
            "AttrFlags": 1
          },
          {
            "Text": " and work with it. We can go to "
          },
          {
            "Text": "node 7",
            "AttrFlags": 1
          },
          {
            "Text": " from "
          },
          {
            "Text": "node 4",
            "AttrFlags": 1
          },
          {
            "Text": ". "
          },
          {
            "Text": "level[7]",
            "AttrFlags": 1
          },
          {
            "Text": " = "
          },
          {
            "Text": "level[4]",
            "AttrFlags": 1
          },
          {
            "Text": " + "
          },
          {
            "Text": "1",
            "AttrFlags": 1
          },
          {
            "Text": " = "
          },
          {
            "Text": "2",
            "AttrFlags": 1
          },
          {
            "Text": ". We mark "
          },
          {
            "Text": "node 7",
            "AttrFlags": 1
          },
          {
            "Text": " as visited and push it in the queue."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928756388,
        "id": "116cd749-8a84-4f65-a85b-2a604fbed844",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928756388,
        "parent_id": "fc0bcc1c-2ee8-47d3-9daa-48c8751d9d90",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "front\n+-----+  +-----+  +-----+\n|  7  |  |  2  |  |  3  |\n+-----+  +-----+  +-----+"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "front\n+-----+  +-----+  +-----+\n|  7  |  |  2  |  |  3  |\n+-----+  +-----+  +-----+",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928756389,
        "id": "d812fae3-0d9f-4106-8b8a-54a0d6b13b8d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928756389,
        "parent_id": "fc0bcc1c-2ee8-47d3-9daa-48c8751d9d90",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "From "
            ],
            [
              "node 3",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", we can go to "
            ],
            [
              "node 7",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "node 8",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". Since we’ve already marked "
            ],
            [
              "node 7",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " as visited, we mark "
            ],
            [
              "node 8",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " as visited, we change "
            ],
            [
              "level[8]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " = "
            ],
            [
              "level[3]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " + "
            ],
            [
              "1",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " = "
            ],
            [
              "2",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". We push "
            ],
            [
              "node 8",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " in the queue."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "From "
          },
          {
            "Text": "node 3",
            "AttrFlags": 1
          },
          {
            "Text": ", we can go to "
          },
          {
            "Text": "node 7",
            "AttrFlags": 1
          },
          {
            "Text": " and "
          },
          {
            "Text": "node 8",
            "AttrFlags": 1
          },
          {
            "Text": ". Since we’ve already marked "
          },
          {
            "Text": "node 7",
            "AttrFlags": 1
          },
          {
            "Text": " as visited, we mark "
          },
          {
            "Text": "node 8",
            "AttrFlags": 1
          },
          {
            "Text": " as visited, we change "
          },
          {
            "Text": "level[8]",
            "AttrFlags": 1
          },
          {
            "Text": " = "
          },
          {
            "Text": "level[3]",
            "AttrFlags": 1
          },
          {
            "Text": " + "
          },
          {
            "Text": "1",
            "AttrFlags": 1
          },
          {
            "Text": " = "
          },
          {
            "Text": "2",
            "AttrFlags": 1
          },
          {
            "Text": ". We push "
          },
          {
            "Text": "node 8",
            "AttrFlags": 1
          },
          {
            "Text": " in the queue."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928756389,
        "id": "80edde47-bd01-4b11-a036-b96d8ac69e19",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928756389,
        "parent_id": "fc0bcc1c-2ee8-47d3-9daa-48c8751d9d90",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "front\n+-----+  +-----+  +-----+\n|  6  |  |  7  |  |  2  |\n+-----+  +-----+  +-----+"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "front\n+-----+  +-----+  +-----+\n|  6  |  |  7  |  |  2  |\n+-----+  +-----+  +-----+",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928756389,
        "id": "033cc791-21a2-4c31-b500-126fa55d274b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928756389,
        "parent_id": "fc0bcc1c-2ee8-47d3-9daa-48c8751d9d90",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This process will continue till we reach our destination or the queue becomes empty. The "
            ],
            [
              "level",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " array will provide us with the distance of the shortest path from "
            ],
            [
              "source",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". We can initialize "
            ],
            [
              "level",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " array with "
            ],
            [
              "infinity",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " value, which will mark that the nodes are not yet visited. Our pseudo-code will be:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This process will continue till we reach our destination or the queue becomes empty. The "
          },
          {
            "Text": "level",
            "AttrFlags": 1
          },
          {
            "Text": " array will provide us with the distance of the shortest path from "
          },
          {
            "Text": "source",
            "AttrFlags": 1
          },
          {
            "Text": ". We can initialize "
          },
          {
            "Text": "level",
            "AttrFlags": 1
          },
          {
            "Text": " array with "
          },
          {
            "Text": "infinity",
            "AttrFlags": 4
          },
          {
            "Text": " value, which will mark that the nodes are not yet visited. Our pseudo-code will be:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928756390,
        "id": "202c5f14-6374-4315-ae58-bbff5563e78a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928756390,
        "parent_id": "fc0bcc1c-2ee8-47d3-9daa-48c8751d9d90",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Procedure BFS(Graph, source):\nQ = queue();\nlevel[] = infinity\nlevel[source] := 0\nQ.push(source)\nwhile Q is not empty\n    u -\u003e Q.pop()\n    for all edges from u to v in Adjacency list\n        if level[v] == infinity\n            level[v] := level[u] + 1\n            Q.push(v)\n        end if\n    end for\nend while\nReturn level"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Procedure BFS(Graph, source):\nQ = queue();\nlevel[] = infinity\nlevel[source] := 0\nQ.push(source)\nwhile Q is not empty\n    u -\u003e Q.pop()\n    for all edges from u to v in Adjacency list\n        if level[v] == infinity\n            level[v] := level[u] + 1\n            Q.push(v)\n        end if\n    end for\nend while\nReturn level",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928756390,
        "id": "7ae5b1fa-cb98-4036-8fed-c7d7f65ac0da",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928756390,
        "parent_id": "fc0bcc1c-2ee8-47d3-9daa-48c8751d9d90",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "By iterating through the "
            ],
            [
              "level",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " array, we can find out the distance of each node from source. For example: the distance of "
            ],
            [
              "node 10",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " from "
            ],
            [
              "source",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " will be stored in "
            ],
            [
              "level[10]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "By iterating through the "
          },
          {
            "Text": "level",
            "AttrFlags": 1
          },
          {
            "Text": " array, we can find out the distance of each node from source. For example: the distance of "
          },
          {
            "Text": "node 10",
            "AttrFlags": 1
          },
          {
            "Text": " from "
          },
          {
            "Text": "source",
            "AttrFlags": 1
          },
          {
            "Text": " will be stored in "
          },
          {
            "Text": "level[10]",
            "AttrFlags": 1
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928756390,
        "id": "6a6e0983-b30a-45e9-93fa-1e8352da4318",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928756390,
        "parent_id": "fc0bcc1c-2ee8-47d3-9daa-48c8751d9d90",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Sometimes we might need to print not only the shortest distance, but also the path via which we can go to our destined node from the "
            ],
            [
              "source",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". For this we need to keep a "
            ],
            [
              "parent",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " array. "
            ],
            [
              "parent[source]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " will be NULL. For each update in "
            ],
            [
              "level",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " array, we’ll simply add "
            ],
            [
              "parent[v] := u",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in our pseudo code inside the for loop. After finishing BFS, to find the path, we’ll traverse back the "
            ],
            [
              "parent",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " array until we reach "
            ],
            [
              "source",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " which will be denoted by NULL value. The pseudo-code will be:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Sometimes we might need to print not only the shortest distance, but also the path via which we can go to our destined node from the "
          },
          {
            "Text": "source",
            "AttrFlags": 1
          },
          {
            "Text": ". For this we need to keep a "
          },
          {
            "Text": "parent",
            "AttrFlags": 1
          },
          {
            "Text": " array. "
          },
          {
            "Text": "parent[source]",
            "AttrFlags": 1
          },
          {
            "Text": " will be NULL. For each update in "
          },
          {
            "Text": "level",
            "AttrFlags": 1
          },
          {
            "Text": " array, we’ll simply add "
          },
          {
            "Text": "parent[v] := u",
            "AttrFlags": 2
          },
          {
            "Text": " in our pseudo code inside the for loop. After finishing BFS, to find the path, we’ll traverse back the "
          },
          {
            "Text": "parent",
            "AttrFlags": 1
          },
          {
            "Text": " array until we reach "
          },
          {
            "Text": "source",
            "AttrFlags": 1
          },
          {
            "Text": " which will be denoted by NULL value. The pseudo-code will be:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928756391,
        "id": "cb2d363f-e73b-406e-8a32-25b89817719d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928756391,
        "parent_id": "fc0bcc1c-2ee8-47d3-9daa-48c8751d9d90",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Procedure PrintPath(u):  //recursive    |   Procedure PrintPath(u):   //iterative\nif parent[u] is not equal to null       |   S =  Stack()\n    PrintPath(parent[u])                |   while parent[u] is not equal to null    \nend if                                  |       S.push(u)\nprint -\u003e u                              |       u := parent[u]\n                                        |   end while\n                                        |   while S is not empty\n                                        |       print -\u003e S.pop\n                                        |   end while"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Procedure PrintPath(u):  //recursive    |   Procedure PrintPath(u):   //iterative\nif parent[u] is not equal to null       |   S =  Stack()\n    PrintPath(parent[u])                |   while parent[u] is not equal to null    \nend if                                  |       S.push(u)\nprint -\u003e u                              |       u := parent[u]\n                                        |   end while\n                                        |   while S is not empty\n                                        |       print -\u003e S.pop\n                                        |   end while",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928756391,
        "id": "06de8635-48de-4933-bd62-847ab1f8a874",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928756391,
        "parent_id": "fc0bcc1c-2ee8-47d3-9daa-48c8751d9d90",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Complexity:",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Complexity:",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928756391,
        "id": "ed2a9984-0cd2-4beb-8ea0-85ba1246544f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928756391,
        "parent_id": "fc0bcc1c-2ee8-47d3-9daa-48c8751d9d90",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We’ve visited every node once and every edges once. So the complexity will be "
            ],
            [
              "O(V + E)",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " where "
            ],
            [
              "V",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " is the number of nodes and "
            ],
            [
              "E",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " is the number of edges."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "We’ve visited every node once and every edges once. So the complexity will be "
          },
          {
            "Text": "O(V + E)",
            "AttrFlags": 1
          },
          {
            "Text": " where "
          },
          {
            "Text": "V",
            "AttrFlags": 1
          },
          {
            "Text": " is the number of nodes and "
          },
          {
            "Text": "E",
            "AttrFlags": 1
          },
          {
            "Text": " is the number of edges."
          }
        ]
      }
    ],
    "title": "Finding the Shortest Path from Source to other Nodes",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}