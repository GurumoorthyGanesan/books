{
  "ID": "e11d5cd5-6de3-47a6-a93f-fa6e907f2a8b",
  "Root": {
    "alive": true,
    "content": [
      "a447f18c-2717-4273-a348-65df7828643e",
      "59610b26-96a8-4ae9-b77c-af8a1cb0b4a7",
      "d4b7028f-ddfa-4db2-b454-ca8b8eae38a0",
      "932d58c2-8f44-4442-831d-3387e0a68bcf",
      "206d22d6-5c4a-4592-a8a9-6340cd1908fb",
      "262a1d7c-20cb-41dc-bda4-3a5fe652c91e",
      "e56071df-ca60-4a86-a526-fa5fb5933c12",
      "9f98d919-3b08-4f55-bf41-faede602f4a4",
      "395d6ed8-9934-4699-84db-401f9e9d6577",
      "3df53938-b913-4ecd-b649-72fae6af4726",
      "3179a286-76d9-4e0f-b31b-13164921a793",
      "12ee754d-ff38-40d0-bccb-f68dfef74f81",
      "25f847f4-b57b-41c4-a53f-ba36168d1229",
      "e3d36c4a-50f4-444b-a370-95ec2b40d8a1",
      "1e999d96-e596-40bc-a158-846d897b8f85",
      "6104483d-6ac1-4731-a2c4-ebec5c7325cf",
      "da71f134-cab3-4869-9ffe-5a82b346454f",
      "b498b8be-55f8-4f48-88e6-b7313815e186",
      "1b6020ea-d10e-4987-8399-a96aa8d3db1f",
      "7c86d8b6-ea95-4dd5-870b-a63b79103b74",
      "dc38348d-18a3-4ab6-9d20-5d88e5f512a3",
      "21014aca-3b3b-4cc6-8eca-b7ebccd23660",
      "a7ad3053-f712-49fa-8c0d-057c3171bb96",
      "0aaf69a2-88e3-4a4d-a0a5-16fc12ce3535",
      "4c17ee05-2a46-4315-acff-5ea2d5b5d0d4",
      "9ac8d902-df92-4fce-914b-15347cab9390",
      "c0edaf7e-6a70-4189-83d0-5a162293c2ad",
      "101cae6c-f3e4-4ab7-9f60-ecb48f48089b",
      "1e735eb0-6adb-4b01-a6ca-f6ee09784163",
      "1b7125f6-1134-4620-b960-910c9861d87d",
      "a74cf9c6-ccf1-436b-9d8f-206c2a4e50a4",
      "8418e183-a442-473a-a807-73449e03df71",
      "0d4fb3c0-6e4b-480b-90ac-c6599f410eab",
      "109181b4-0065-4d79-8d10-fba462075a9b"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551928505060,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "e11d5cd5-6de3-47a6-a93f-fa6e907f2a8b",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551928505060,
    "parent_id": "ec9d0bba-8ded-4256-866e-28adfde6676e",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Introduction to Rabin-Karp Algorithm"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928505053,
        "id": "a447f18c-2717-4273-a348-65df7828643e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928505053,
        "parent_id": "e11d5cd5-6de3-47a6-a93f-fa6e907f2a8b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Rabin-Karp Algorithm",
              [
                [
                  "a",
                  "https://en.wikipedia.org/wiki/Rabin%E2%80%93Karp_algorithm"
                ]
              ]
            ],
            [
              " is a string searching algorithm created by "
            ],
            [
              "Richard M. Karp",
              [
                [
                  "a",
                  "https://en.wikipedia.org/wiki/Richard_M._Karp"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "Michael O. Rabin",
              [
                [
                  "a",
                  "https://en.wikipedia.org/wiki/Michael_O._Rabin"
                ]
              ]
            ],
            [
              " that uses hashing to find any one of a set of pattern strings in a text."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Rabin-Karp Algorithm",
            "Link": "https://en.wikipedia.org/wiki/Rabin%E2%80%93Karp_algorithm"
          },
          {
            "Text": " is a string searching algorithm created by "
          },
          {
            "Text": "Richard M. Karp",
            "Link": "https://en.wikipedia.org/wiki/Richard_M._Karp"
          },
          {
            "Text": " and "
          },
          {
            "Text": "Michael O. Rabin",
            "Link": "https://en.wikipedia.org/wiki/Michael_O._Rabin"
          },
          {
            "Text": " that uses hashing to find any one of a set of pattern strings in a text."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928505053,
        "id": "59610b26-96a8-4ae9-b77c-af8a1cb0b4a7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928505053,
        "parent_id": "e11d5cd5-6de3-47a6-a93f-fa6e907f2a8b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A substring of a string is another string that occurs in. For example, "
            ],
            [
              "ver",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " is a substring of "
            ],
            [
              "stackoverflow",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ". Not to be confused with subsequence because "
            ],
            [
              "cover",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " is a subsequence of the same string. In other words, any subset of consecutive letters in a string is a substring of the given string."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A substring of a string is another string that occurs in. For example, "
          },
          {
            "Text": "ver",
            "AttrFlags": 4
          },
          {
            "Text": " is a substring of "
          },
          {
            "Text": "stackoverflow",
            "AttrFlags": 4
          },
          {
            "Text": ". Not to be confused with subsequence because "
          },
          {
            "Text": "cover",
            "AttrFlags": 4
          },
          {
            "Text": " is a subsequence of the same string. In other words, any subset of consecutive letters in a string is a substring of the given string."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928505054,
        "id": "d4b7028f-ddfa-4db2-b454-ca8b8eae38a0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928505054,
        "parent_id": "e11d5cd5-6de3-47a6-a93f-fa6e907f2a8b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In Rabin-Karp algorithm, we’ll generate a hash of our "
            ],
            [
              "pattern",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " that we are looking for \u0026 check if the rolling hash of our "
            ],
            [
              "text",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " matches the "
            ],
            [
              "pattern",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " or not. If it doesn’t match, we can guarantee that the "
            ],
            [
              "pattern",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "doesn’t exist",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " in the "
            ],
            [
              "text",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ". However, if it does match, the "
            ],
            [
              "pattern",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "can",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " be present in the "
            ],
            [
              "text",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ". Let’s look at an example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In Rabin-Karp algorithm, we’ll generate a hash of our "
          },
          {
            "Text": "pattern",
            "AttrFlags": 4
          },
          {
            "Text": " that we are looking for \u0026 check if the rolling hash of our "
          },
          {
            "Text": "text",
            "AttrFlags": 4
          },
          {
            "Text": " matches the "
          },
          {
            "Text": "pattern",
            "AttrFlags": 4
          },
          {
            "Text": " or not. If it doesn’t match, we can guarantee that the "
          },
          {
            "Text": "pattern",
            "AttrFlags": 4
          },
          {
            "Text": " "
          },
          {
            "Text": "doesn’t exist",
            "AttrFlags": 1
          },
          {
            "Text": " in the "
          },
          {
            "Text": "text",
            "AttrFlags": 4
          },
          {
            "Text": ". However, if it does match, the "
          },
          {
            "Text": "pattern",
            "AttrFlags": 4
          },
          {
            "Text": " "
          },
          {
            "Text": "can",
            "AttrFlags": 1
          },
          {
            "Text": " be present in the "
          },
          {
            "Text": "text",
            "AttrFlags": 4
          },
          {
            "Text": ". Let’s look at an example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928505054,
        "id": "932d58c2-8f44-4442-831d-3387e0a68bcf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928505054,
        "parent_id": "e11d5cd5-6de3-47a6-a93f-fa6e907f2a8b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Let’s say we have a text: "
            ],
            [
              "yeminsajid",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " and we want to find out if the pattern "
            ],
            [
              "nsa",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " exists in the text. To calculate the hash and rolling hash, we’ll need to use a prime number. This can be any prime number. Let’s take "
            ],
            [
              "prime",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " = "
            ],
            [
              "11",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " for this example. We’ll determine hash value using this formula:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Let’s say we have a text: "
          },
          {
            "Text": "yeminsajid",
            "AttrFlags": 1
          },
          {
            "Text": " and we want to find out if the pattern "
          },
          {
            "Text": "nsa",
            "AttrFlags": 1
          },
          {
            "Text": " exists in the text. To calculate the hash and rolling hash, we’ll need to use a prime number. This can be any prime number. Let’s take "
          },
          {
            "Text": "prime",
            "AttrFlags": 1
          },
          {
            "Text": " = "
          },
          {
            "Text": "11",
            "AttrFlags": 1
          },
          {
            "Text": " for this example. We’ll determine hash value using this formula:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928505054,
        "id": "206d22d6-5c4a-4592-a8a9-6340cd1908fb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928505054,
        "parent_id": "e11d5cd5-6de3-47a6-a93f-fa6e907f2a8b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "(1st letter) X (prime) + (2nd letter) X (prime)¹ + (3rd letter) X (prime)² X + ......"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "(1st letter) X (prime) + (2nd letter) X (prime)¹ + (3rd letter) X (prime)² X + ......",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928505054,
        "id": "262a1d7c-20cb-41dc-bda4-3a5fe652c91e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928505054,
        "parent_id": "e11d5cd5-6de3-47a6-a93f-fa6e907f2a8b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We’ll denote:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "We’ll denote:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928505054,
        "id": "e56071df-ca60-4a86-a526-fa5fb5933c12",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928505054,
        "parent_id": "e11d5cd5-6de3-47a6-a93f-fa6e907f2a8b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "a -\u003e 1    g -\u003e 7    m -\u003e 13   s -\u003e 19   y -\u003e 25\nb -\u003e 2    h -\u003e 8    n -\u003e 14   t -\u003e 20   z -\u003e 26\nc -\u003e 3    i -\u003e 9    o -\u003e 15   u -\u003e 21\nd -\u003e 4    j -\u003e 10   p -\u003e 16   v -\u003e 22\ne -\u003e 5    k -\u003e 11   q -\u003e 17   w -\u003e 23\nf -\u003e 6    l -\u003e 12   r -\u003e 18   x -\u003e 24"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "a -\u003e 1    g -\u003e 7    m -\u003e 13   s -\u003e 19   y -\u003e 25\nb -\u003e 2    h -\u003e 8    n -\u003e 14   t -\u003e 20   z -\u003e 26\nc -\u003e 3    i -\u003e 9    o -\u003e 15   u -\u003e 21\nd -\u003e 4    j -\u003e 10   p -\u003e 16   v -\u003e 22\ne -\u003e 5    k -\u003e 11   q -\u003e 17   w -\u003e 23\nf -\u003e 6    l -\u003e 12   r -\u003e 18   x -\u003e 24",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928505055,
        "id": "9f98d919-3b08-4f55-bf41-faede602f4a4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928505055,
        "parent_id": "e11d5cd5-6de3-47a6-a93f-fa6e907f2a8b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The hash value of "
            ],
            [
              "nsa",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " will be:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The hash value of "
          },
          {
            "Text": "nsa",
            "AttrFlags": 1
          },
          {
            "Text": " will be:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928505055,
        "id": "395d6ed8-9934-4699-84db-401f9e9d6577",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928505055,
        "parent_id": "e11d5cd5-6de3-47a6-a93f-fa6e907f2a8b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "14 X 11⁰ + 19 X 11¹ + 1 X 11² = 344"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "14 X 11⁰ + 19 X 11¹ + 1 X 11² = 344",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928505055,
        "id": "3df53938-b913-4ecd-b649-72fae6af4726",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928505055,
        "parent_id": "e11d5cd5-6de3-47a6-a93f-fa6e907f2a8b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Now we find the rolling-hash of our text. If the rolling hash matches with the hash value of our pattern, we’ll check if the strings match or not. Since our pattern has "
            ],
            [
              "3",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " letters, we’ll take 1st "
            ],
            [
              "3",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " letters "
            ],
            [
              "yem",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " from our text and calculate hash value. We get:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Now we find the rolling-hash of our text. If the rolling hash matches with the hash value of our pattern, we’ll check if the strings match or not. Since our pattern has "
          },
          {
            "Text": "3",
            "AttrFlags": 1
          },
          {
            "Text": " letters, we’ll take 1st "
          },
          {
            "Text": "3",
            "AttrFlags": 1
          },
          {
            "Text": " letters "
          },
          {
            "Text": "yem",
            "AttrFlags": 1
          },
          {
            "Text": " from our text and calculate hash value. We get:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928505055,
        "id": "3179a286-76d9-4e0f-b31b-13164921a793",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928505055,
        "parent_id": "e11d5cd5-6de3-47a6-a93f-fa6e907f2a8b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "25 X 11⁰ + 5 X 11¹ + 13 X 11² = 1653"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "25 X 11⁰ + 5 X 11¹ + 13 X 11² = 1653",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928505055,
        "id": "12ee754d-ff38-40d0-bccb-f68dfef74f81",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928505055,
        "parent_id": "e11d5cd5-6de3-47a6-a93f-fa6e907f2a8b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This value doesn’t match with our pattern’s hash value. So the string doesn’t exists here. Now we need to consider the next step. To calculate the hash value of our next string "
            ],
            [
              "emi",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". We can calculate this using our formula. But that would be rather trivial and cost us more. Instead, we use another technique."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This value doesn’t match with our pattern’s hash value. So the string doesn’t exists here. Now we need to consider the next step. To calculate the hash value of our next string "
          },
          {
            "Text": "emi",
            "AttrFlags": 1
          },
          {
            "Text": ". We can calculate this using our formula. But that would be rather trivial and cost us more. Instead, we use another technique."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928505056,
        "id": "25f847f4-b57b-41c4-a53f-ba36168d1229",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928505056,
        "parent_id": "e11d5cd5-6de3-47a6-a93f-fa6e907f2a8b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We subtract the value of the "
            ],
            [
              "First Letter of Previous String",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " from our current hash value. In this case, "
            ],
            [
              "y",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". We get, "
            ],
            [
              "1653 - 25 = 1628",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "We subtract the value of the "
          },
          {
            "Text": "First Letter of Previous String",
            "AttrFlags": 1
          },
          {
            "Text": " from our current hash value. In this case, "
          },
          {
            "Text": "y",
            "AttrFlags": 1
          },
          {
            "Text": ". We get, "
          },
          {
            "Text": "1653 - 25 = 1628",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928505056,
        "id": "e3d36c4a-50f4-444b-a370-95ec2b40d8a1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928505056,
        "parent_id": "e11d5cd5-6de3-47a6-a93f-fa6e907f2a8b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We divide the difference with our "
            ],
            [
              "prime",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", which is "
            ],
            [
              "11",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " for this example. We get, "
            ],
            [
              "1628 / 11 = 148",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "We divide the difference with our "
          },
          {
            "Text": "prime",
            "AttrFlags": 1
          },
          {
            "Text": ", which is "
          },
          {
            "Text": "11",
            "AttrFlags": 1
          },
          {
            "Text": " for this example. We get, "
          },
          {
            "Text": "1628 / 11 = 148",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928505057,
        "id": "1e999d96-e596-40bc-a158-846d897b8f85",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928505057,
        "parent_id": "e11d5cd5-6de3-47a6-a93f-fa6e907f2a8b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We add "
            ],
            [
              "new letter X (prime)ᵐ⁻¹",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", where "
            ],
            [
              "m",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " is the length of the pattern, with the quotient, which is "
            ],
            [
              "i",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " = "
            ],
            [
              "9",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". We get, "
            ],
            [
              "148 + 9 X 11² = 1237",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "We add "
          },
          {
            "Text": "new letter X (prime)ᵐ⁻¹",
            "AttrFlags": 1
          },
          {
            "Text": ", where "
          },
          {
            "Text": "m",
            "AttrFlags": 1
          },
          {
            "Text": " is the length of the pattern, with the quotient, which is "
          },
          {
            "Text": "i",
            "AttrFlags": 1
          },
          {
            "Text": " = "
          },
          {
            "Text": "9",
            "AttrFlags": 1
          },
          {
            "Text": ". We get, "
          },
          {
            "Text": "148 + 9 X 11² = 1237",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928505057,
        "id": "6104483d-6ac1-4731-a2c4-ebec5c7325cf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928505057,
        "parent_id": "e11d5cd5-6de3-47a6-a93f-fa6e907f2a8b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The new hash value is not equal to our patterns hash value. Moving on, for "
            ],
            [
              "n",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " we get:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The new hash value is not equal to our patterns hash value. Moving on, for "
          },
          {
            "Text": "n",
            "AttrFlags": 1
          },
          {
            "Text": " we get:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928505057,
        "id": "da71f134-cab3-4869-9ffe-5a82b346454f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928505057,
        "parent_id": "e11d5cd5-6de3-47a6-a93f-fa6e907f2a8b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Previous String: emi\nFirst Letter of Previous String: e(5)\nNew Letter: n(14)\nNew String: \"min\"\n1237 - 5 = 1232\n1232 / 11 = 112\n112 + 14 X 11² = 1806"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Previous String: emi\nFirst Letter of Previous String: e(5)\nNew Letter: n(14)\nNew String: \"min\"\n1237 - 5 = 1232\n1232 / 11 = 112\n112 + 14 X 11² = 1806",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928505057,
        "id": "b498b8be-55f8-4f48-88e6-b7313815e186",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928505057,
        "parent_id": "e11d5cd5-6de3-47a6-a93f-fa6e907f2a8b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It doesn’t match. After that, for "
            ],
            [
              "s",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", we get:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It doesn’t match. After that, for "
          },
          {
            "Text": "s",
            "AttrFlags": 1
          },
          {
            "Text": ", we get:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928505057,
        "id": "1b6020ea-d10e-4987-8399-a96aa8d3db1f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928505057,
        "parent_id": "e11d5cd5-6de3-47a6-a93f-fa6e907f2a8b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Previous String: min\nFirst Letter of Previous String: m(13)\nNew Letter: s(19)\nNew String: \"ins\"\n1806 - 13 = 1793\n1793 / 11 = 163\n163 + 19 X 11² = 2462"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Previous String: min\nFirst Letter of Previous String: m(13)\nNew Letter: s(19)\nNew String: \"ins\"\n1806 - 13 = 1793\n1793 / 11 = 163\n163 + 19 X 11² = 2462",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928505058,
        "id": "7c86d8b6-ea95-4dd5-870b-a63b79103b74",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928505058,
        "parent_id": "e11d5cd5-6de3-47a6-a93f-fa6e907f2a8b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It doesn’t match. Next, for "
            ],
            [
              "a",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", we get:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It doesn’t match. Next, for "
          },
          {
            "Text": "a",
            "AttrFlags": 1
          },
          {
            "Text": ", we get:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928505058,
        "id": "dc38348d-18a3-4ab6-9d20-5d88e5f512a3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928505058,
        "parent_id": "e11d5cd5-6de3-47a6-a93f-fa6e907f2a8b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Previous String: ins\nFirst Letter of Previous String: i(9)\nNew Letter: a(1)\nNew String: \"nsa\"\n2462 - 9 = 2453\n2453 / 11 = 223\n223 + 1 X 11² = 344"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Previous String: ins\nFirst Letter of Previous String: i(9)\nNew Letter: a(1)\nNew String: \"nsa\"\n2462 - 9 = 2453\n2453 / 11 = 223\n223 + 1 X 11² = 344",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928505058,
        "id": "21014aca-3b3b-4cc6-8eca-b7ebccd23660",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928505058,
        "parent_id": "e11d5cd5-6de3-47a6-a93f-fa6e907f2a8b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It’s a match! Now we compare our pattern with the current string. Since both the strings match, the substring exists in this string. And we return the starting position of our substring."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It’s a match! Now we compare our pattern with the current string. Since both the strings match, the substring exists in this string. And we return the starting position of our substring."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928505058,
        "id": "a7ad3053-f712-49fa-8c0d-057c3171bb96",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928505058,
        "parent_id": "e11d5cd5-6de3-47a6-a93f-fa6e907f2a8b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The pseudo-code will be:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The pseudo-code will be:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928505058,
        "id": "0aaf69a2-88e3-4a4d-a0a5-16fc12ce3535",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928505058,
        "parent_id": "e11d5cd5-6de3-47a6-a93f-fa6e907f2a8b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Hash Calculation:",
              [
                [
                  "i"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Hash Calculation:",
            "AttrFlags": 4
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928505058,
        "id": "4c17ee05-2a46-4315-acff-5ea2d5b5d0d4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928505058,
        "parent_id": "e11d5cd5-6de3-47a6-a93f-fa6e907f2a8b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Procedure Calculate-Hash(String, Prime, x):\nhash := 0                                  // Here x denotes the length to be considered\nfor m from 1 to x                          // to find the hash value\n    hash := hash + (Value of String[m])ᵐ⁻¹\nend for\nReturn hash"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Procedure Calculate-Hash(String, Prime, x):\nhash := 0                                  // Here x denotes the length to be considered\nfor m from 1 to x                          // to find the hash value\n    hash := hash + (Value of String[m])ᵐ⁻¹\nend for\nReturn hash",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928505058,
        "id": "9ac8d902-df92-4fce-914b-15347cab9390",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928505058,
        "parent_id": "e11d5cd5-6de3-47a6-a93f-fa6e907f2a8b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Hash Recalculation:",
              [
                [
                  "i"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Hash Recalculation:",
            "AttrFlags": 4
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928505058,
        "id": "c0edaf7e-6a70-4189-83d0-5a162293c2ad",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928505058,
        "parent_id": "e11d5cd5-6de3-47a6-a93f-fa6e907f2a8b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Procedure Recalculate-Hash(String, Curr, Prime, Hash):\nHash := Hash - Value of String[Curr]  //here Curr denotes First Letter of Previous String\nHash := Hash / Prime\nm := String.length\nNew := Curr + m - 1\nHash := Hash + (Value of String[New])ᵐ⁻¹\nReturn Hash"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Procedure Recalculate-Hash(String, Curr, Prime, Hash):\nHash := Hash - Value of String[Curr]  //here Curr denotes First Letter of Previous String\nHash := Hash / Prime\nm := String.length\nNew := Curr + m - 1\nHash := Hash + (Value of String[New])ᵐ⁻¹\nReturn Hash",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928505059,
        "id": "101cae6c-f3e4-4ab7-9f60-ecb48f48089b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928505059,
        "parent_id": "e11d5cd5-6de3-47a6-a93f-fa6e907f2a8b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "String Match:",
              [
                [
                  "i"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "String Match:",
            "AttrFlags": 4
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928505059,
        "id": "1e735eb0-6adb-4b01-a6ca-f6ee09784163",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928505059,
        "parent_id": "e11d5cd5-6de3-47a6-a93f-fa6e907f2a8b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Procedure String-Match(Text, Pattern, m):\nfor i from m to Pattern-length + m - 1\n    if Text[i] is not equal to Pattern[i]\n        Return false\n    end if\nend for\nReturn true"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Procedure String-Match(Text, Pattern, m):\nfor i from m to Pattern-length + m - 1\n    if Text[i] is not equal to Pattern[i]\n        Return false\n    end if\nend for\nReturn true",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928505059,
        "id": "1b7125f6-1134-4620-b960-910c9861d87d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928505059,
        "parent_id": "e11d5cd5-6de3-47a6-a93f-fa6e907f2a8b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Rabin-Karp:",
              [
                [
                  "i"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Rabin-Karp:",
            "AttrFlags": 4
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928505059,
        "id": "a74cf9c6-ccf1-436b-9d8f-206c2a4e50a4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928505059,
        "parent_id": "e11d5cd5-6de3-47a6-a93f-fa6e907f2a8b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Procedure Rabin-Karp(Text, Pattern, Prime):\nm := Pattern.Length\nHashValue := Calculate-Hash(Pattern, Prime, m)\nCurrValue := Calculate-Hash(Pattern, Prime, m)\nfor i from 1 to Text.length - m\n    if HashValue == CurrValue and String-Match(Text, Pattern, i) is true\n        Return i\n    end if\n    CurrValue := Recalculate-Hash(String, i+1, Prime, CurrValue)\nend for\nReturn -1"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Procedure Rabin-Karp(Text, Pattern, Prime):\nm := Pattern.Length\nHashValue := Calculate-Hash(Pattern, Prime, m)\nCurrValue := Calculate-Hash(Pattern, Prime, m)\nfor i from 1 to Text.length - m\n    if HashValue == CurrValue and String-Match(Text, Pattern, i) is true\n        Return i\n    end if\n    CurrValue := Recalculate-Hash(String, i+1, Prime, CurrValue)\nend for\nReturn -1",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928505059,
        "id": "8418e183-a442-473a-a807-73449e03df71",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928505059,
        "parent_id": "e11d5cd5-6de3-47a6-a93f-fa6e907f2a8b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If the algorithm doesn’t find any match, it simply returns "
            ],
            [
              "-1",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If the algorithm doesn’t find any match, it simply returns "
          },
          {
            "Text": "-1",
            "AttrFlags": 1
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928505059,
        "id": "0d4fb3c0-6e4b-480b-90ac-c6599f410eab",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928505059,
        "parent_id": "e11d5cd5-6de3-47a6-a93f-fa6e907f2a8b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This algorithm is used in detecting plagiarism. Given source material, the algorithm can rapidly search through a paper for instances of sentences from the source material, ignoring details such as case and punctuation. Because of the abundance of the sought strings, single-string searching algorithms are impractical here. Again, "
            ],
            [
              "Knuth-Morris-Pratt algorithm",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "Boyer-Moore String Search algorithm",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " is faster single pattern string searching algorithm, than "
            ],
            [
              "Rabin-Karp",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". However, it is an algorithm of choice for multiple pattern search. If we want to find any of the large number, say k, fixed length patterns in a text, we can create a simple variant of the Rabin-Karp algorithm."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This algorithm is used in detecting plagiarism. Given source material, the algorithm can rapidly search through a paper for instances of sentences from the source material, ignoring details such as case and punctuation. Because of the abundance of the sought strings, single-string searching algorithms are impractical here. Again, "
          },
          {
            "Text": "Knuth-Morris-Pratt algorithm",
            "AttrFlags": 1
          },
          {
            "Text": " or "
          },
          {
            "Text": "Boyer-Moore String Search algorithm",
            "AttrFlags": 1
          },
          {
            "Text": " is faster single pattern string searching algorithm, than "
          },
          {
            "Text": "Rabin-Karp",
            "AttrFlags": 1
          },
          {
            "Text": ". However, it is an algorithm of choice for multiple pattern search. If we want to find any of the large number, say k, fixed length patterns in a text, we can create a simple variant of the Rabin-Karp algorithm."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928505060,
        "id": "109181b4-0065-4d79-8d10-fba462075a9b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928505060,
        "parent_id": "e11d5cd5-6de3-47a6-a93f-fa6e907f2a8b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For text of length "
            ],
            [
              "n",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "p",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " patterns of combined length "
            ],
            [
              "m",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", its average and best case running time is "
            ],
            [
              "O(n+m)",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " in space "
            ],
            [
              "O(p)",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", but its worst-case time is "
            ],
            [
              "O(nm)",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For text of length "
          },
          {
            "Text": "n",
            "AttrFlags": 1
          },
          {
            "Text": " and "
          },
          {
            "Text": "p",
            "AttrFlags": 1
          },
          {
            "Text": " patterns of combined length "
          },
          {
            "Text": "m",
            "AttrFlags": 1
          },
          {
            "Text": ", its average and best case running time is "
          },
          {
            "Text": "O(n+m)",
            "AttrFlags": 1
          },
          {
            "Text": " in space "
          },
          {
            "Text": "O(p)",
            "AttrFlags": 1
          },
          {
            "Text": ", but its worst-case time is "
          },
          {
            "Text": "O(nm)",
            "AttrFlags": 1
          },
          {
            "Text": "."
          }
        ]
      }
    ],
    "title": "Introduction to Rabin-Karp Algorithm",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}