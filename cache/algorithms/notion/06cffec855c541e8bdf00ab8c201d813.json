{
  "ID": "06cffec8-55c5-41e8-bdf0-0ab8c201d813",
  "Root": {
    "alive": true,
    "content": [
      "7b33b6ba-9d30-4177-a74e-d1a38f886ef8",
      "b41f3c1c-dd54-4204-ba09-f3dc801d42c0",
      "8700dde6-c390-4e8f-b140-7bfe10e644b4",
      "4c73b5b7-ae7a-4316-a9f2-6d765b0b62f8",
      "9241e14b-26f7-4bb3-bb0f-efd08e2e160c",
      "fcf136b8-f8f6-49c9-9a35-0c90839b125e",
      "56a7400e-96ef-42a1-947d-67b5dd6ac554",
      "5adf104d-9b94-470d-a10c-24b9f256dc18",
      "f218fe16-ebcc-4eb6-af46-fcd3ce74fc04",
      "dad4055a-7e43-49fc-ae37-2882e01b51fd",
      "0707906e-3bb9-40d7-8617-006960d9bc43",
      "afe1d913-7030-420a-8f29-33f715ac3884"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551928431990,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "06cffec8-55c5-41e8-bdf0-0ab8c201d813",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551928431990,
    "parent_id": "2bfd570f-dc07-4daa-b3b2-a794ef12f08e",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Detecting Negative Cycle in a Graph"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928431986,
        "id": "7b33b6ba-9d30-4177-a74e-d1a38f886ef8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928431986,
        "parent_id": "06cffec8-55c5-41e8-bdf0-0ab8c201d813",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To understand this example, it is recommended to have a brief idea about Bellman-Ford algorithm which can be found ",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              "here",
              [
                [
                  "i"
                ],
                [
                  "a",
                  "http://stackoverflow.com/documentation/algorithm/4791/bellman-ford-algorithm/24021/single-source-shortest-path-algorithm-given-there-is-a-negative-cycle-in-a-grap"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To understand this example, it is recommended to have a brief idea about Bellman-Ford algorithm which can be found ",
            "AttrFlags": 4
          },
          {
            "Text": "here",
            "AttrFlags": 4,
            "Link": "http://stackoverflow.com/documentation/algorithm/4791/bellman-ford-algorithm/24021/single-source-shortest-path-algorithm-given-there-is-a-negative-cycle-in-a-grap"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928431987,
        "id": "b41f3c1c-dd54-4204-ba09-f3dc801d42c0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928431987,
        "parent_id": "06cffec8-55c5-41e8-bdf0-0ab8c201d813",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Using Bellman-Ford algorithm, we can detect if there is a negative cycle in our graph. We know that, to find out the shortest path, we need to "
            ],
            [
              "relax",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " all the edges of the graph "
            ],
            [
              "(V-1)",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " times, where "
            ],
            [
              "V",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " is the number of vertices in a graph. We have already seen that in this "
            ],
            [
              "example",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/algorithm/4791/bellman-ford-algorithm/24029/why-do-we-need-to-relax-all-the-edges-at-most-v-1-times"
                ]
              ]
            ],
            [
              ", after "
            ],
            [
              "(V-1)",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " iterations, we can’t update "
            ],
            [
              "d[]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", no matter how many iterations we do. Or can we?"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Using Bellman-Ford algorithm, we can detect if there is a negative cycle in our graph. We know that, to find out the shortest path, we need to "
          },
          {
            "Text": "relax",
            "AttrFlags": 4
          },
          {
            "Text": " all the edges of the graph "
          },
          {
            "Text": "(V-1)",
            "AttrFlags": 1
          },
          {
            "Text": " times, where "
          },
          {
            "Text": "V",
            "AttrFlags": 1
          },
          {
            "Text": " is the number of vertices in a graph. We have already seen that in this "
          },
          {
            "Text": "example",
            "Link": "http://stackoverflow.com/documentation/algorithm/4791/bellman-ford-algorithm/24029/why-do-we-need-to-relax-all-the-edges-at-most-v-1-times"
          },
          {
            "Text": ", after "
          },
          {
            "Text": "(V-1)",
            "AttrFlags": 1
          },
          {
            "Text": " iterations, we can’t update "
          },
          {
            "Text": "d[]",
            "AttrFlags": 1
          },
          {
            "Text": ", no matter how many iterations we do. Or can we?"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928431988,
        "id": "8700dde6-c390-4e8f-b140-7bfe10e644b4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928431988,
        "parent_id": "06cffec8-55c5-41e8-bdf0-0ab8c201d813",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If there is a negative cycle in a graph, even after "
            ],
            [
              "(V-1)",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " iterations, we can update "
            ],
            [
              "d[]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". This happens because for every iteration, traversing through the negative cycle always decreases the cost of the shortest path. This is why Bellman-Ford algorithm limits the number of iterations to "
            ],
            [
              "(V-1)",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". If we used "
            ],
            [
              "Dijkstra’s Algorithm",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/algorithm/7151/dijkstra-s-algorithm/23947/dijkstras-shortest-path-algorithm#t=20161002124031483303"
                ]
              ]
            ],
            [
              " here, we’d be stuck in an endless loop. However, let’s concentrate on finding negative cycle."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If there is a negative cycle in a graph, even after "
          },
          {
            "Text": "(V-1)",
            "AttrFlags": 1
          },
          {
            "Text": " iterations, we can update "
          },
          {
            "Text": "d[]",
            "AttrFlags": 1
          },
          {
            "Text": ". This happens because for every iteration, traversing through the negative cycle always decreases the cost of the shortest path. This is why Bellman-Ford algorithm limits the number of iterations to "
          },
          {
            "Text": "(V-1)",
            "AttrFlags": 1
          },
          {
            "Text": ". If we used "
          },
          {
            "Text": "Dijkstra’s Algorithm",
            "Link": "http://stackoverflow.com/documentation/algorithm/7151/dijkstra-s-algorithm/23947/dijkstras-shortest-path-algorithm#t=20161002124031483303"
          },
          {
            "Text": " here, we’d be stuck in an endless loop. However, let’s concentrate on finding negative cycle."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928431988,
        "id": "4c73b5b7-ae7a-4316-a9f2-6d765b0b62f8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928431988,
        "parent_id": "06cffec8-55c5-41e8-bdf0-0ab8c201d813",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Let’s assume, we have a graph:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Let’s assume, we have a graph:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928431989,
        "id": "9241e14b-26f7-4bb3-bb0f-efd08e2e160c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928431989,
        "parent_id": "06cffec8-55c5-41e8-bdf0-0ab8c201d813",
        "parent_table": "block",
        "properties": {
          "source": [
            [
              "/tmp/12018fb8-9bab-4bee-8ccd-32ddd38bf965/07fc6035ca5b8004473bca67b74d9fd139e30608.png"
            ]
          ]
        },
        "type": "image",
        "version": 1,
        "source": "/tmp/12018fb8-9bab-4bee-8ccd-32ddd38bf965/07fc6035ca5b8004473bca67b74d9fd139e30608.png",
        "image_url": "https://www.notion.so/image/https:%2F%2Fwww.notion.so%2Ftmp%2F12018fb8-9bab-4bee-8ccd-32ddd38bf965%2F07fc6035ca5b8004473bca67b74d9fd139e30608.png"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928431989,
        "id": "fcf136b8-f8f6-49c9-9a35-0c90839b125e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928431989,
        "parent_id": "06cffec8-55c5-41e8-bdf0-0ab8c201d813",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Let’s pick "
            ],
            [
              "vertex 1",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " as the "
            ],
            [
              "source",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". After applying Bellman-Ford’s single source shortest path algorithm to the graph, we’ll find out the distances from the "
            ],
            [
              "source",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " to all the other vertices."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Let’s pick "
          },
          {
            "Text": "vertex 1",
            "AttrFlags": 1
          },
          {
            "Text": " as the "
          },
          {
            "Text": "source",
            "AttrFlags": 1
          },
          {
            "Text": ". After applying Bellman-Ford’s single source shortest path algorithm to the graph, we’ll find out the distances from the "
          },
          {
            "Text": "source",
            "AttrFlags": 1
          },
          {
            "Text": " to all the other vertices."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928431989,
        "id": "56a7400e-96ef-42a1-947d-67b5dd6ac554",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928431989,
        "parent_id": "06cffec8-55c5-41e8-bdf0-0ab8c201d813",
        "parent_table": "block",
        "properties": {
          "source": [
            [
              "/tmp/12018fb8-9bab-4bee-8ccd-32ddd38bf965/a2f1a8a1ef0bcc3d546983baf8d0b36305440fe3.png"
            ]
          ]
        },
        "type": "image",
        "version": 1,
        "source": "/tmp/12018fb8-9bab-4bee-8ccd-32ddd38bf965/a2f1a8a1ef0bcc3d546983baf8d0b36305440fe3.png",
        "image_url": "https://www.notion.so/image/https:%2F%2Fwww.notion.so%2Ftmp%2F12018fb8-9bab-4bee-8ccd-32ddd38bf965%2Fa2f1a8a1ef0bcc3d546983baf8d0b36305440fe3.png"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928431989,
        "id": "5adf104d-9b94-470d-a10c-24b9f256dc18",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928431989,
        "parent_id": "06cffec8-55c5-41e8-bdf0-0ab8c201d813",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This is how the graph looks like after "
            ],
            [
              "(V-1)",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " = "
            ],
            [
              "3",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " iterations. It should be the result since there are "
            ],
            [
              "4",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " edges, we need at most "
            ],
            [
              "3",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " iterations to find out the shortest path. So either this is the answer, or there is a negative weight cycle in the graph. To find that, after "
            ],
            [
              "(V-1)",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " iterations, we do one more final iteration and if the distance continues to decrease, it means that there is definitely a negative weight cycle in the graph."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This is how the graph looks like after "
          },
          {
            "Text": "(V-1)",
            "AttrFlags": 1
          },
          {
            "Text": " = "
          },
          {
            "Text": "3",
            "AttrFlags": 1
          },
          {
            "Text": " iterations. It should be the result since there are "
          },
          {
            "Text": "4",
            "AttrFlags": 1
          },
          {
            "Text": " edges, we need at most "
          },
          {
            "Text": "3",
            "AttrFlags": 1
          },
          {
            "Text": " iterations to find out the shortest path. So either this is the answer, or there is a negative weight cycle in the graph. To find that, after "
          },
          {
            "Text": "(V-1)",
            "AttrFlags": 1
          },
          {
            "Text": " iterations, we do one more final iteration and if the distance continues to decrease, it means that there is definitely a negative weight cycle in the graph."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928431990,
        "id": "f218fe16-ebcc-4eb6-af46-fcd3ce74fc04",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928431990,
        "parent_id": "06cffec8-55c5-41e8-bdf0-0ab8c201d813",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For this example: if we check "
            ],
            [
              "2-3",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "d[2]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " + "
            ],
            [
              "cost[2][3]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " will give us "
            ],
            [
              "1",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " which is less than "
            ],
            [
              "d[3]",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". So we can conclude that there is a negative cycle in our graph."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For this example: if we check "
          },
          {
            "Text": "2-3",
            "AttrFlags": 1
          },
          {
            "Text": ", "
          },
          {
            "Text": "d[2]",
            "AttrFlags": 1
          },
          {
            "Text": " + "
          },
          {
            "Text": "cost[2][3]",
            "AttrFlags": 1
          },
          {
            "Text": " will give us "
          },
          {
            "Text": "1",
            "AttrFlags": 1
          },
          {
            "Text": " which is less than "
          },
          {
            "Text": "d[3]",
            "AttrFlags": 1
          },
          {
            "Text": ". So we can conclude that there is a negative cycle in our graph."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928431990,
        "id": "dad4055a-7e43-49fc-ae37-2882e01b51fd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928431990,
        "parent_id": "06cffec8-55c5-41e8-bdf0-0ab8c201d813",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "So how do we find out the negative cycle? We do a bit modification to Bellman-Ford procedure:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "So how do we find out the negative cycle? We do a bit modification to Bellman-Ford procedure:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928431990,
        "id": "0707906e-3bb9-40d7-8617-006960d9bc43",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928431990,
        "parent_id": "06cffec8-55c5-41e8-bdf0-0ab8c201d813",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Procedure NegativeCycleDetector(Graph, source):\nn := number of vertices in Graph\nfor i from 1 to n\n    d[i] := infinity\nend for\nd[source] := 0\nfor i from 1 to n-1\n    flag := false\n    for all edges from (u,v) in Graph\n        if d[u] + cost[u][v] \u003c d[v]\n            d[v] := d[u] + cost[u][v]\n            flag := true\n        end if\n    end for\n    if flag == false\n        break\nend for\nfor all edges from (u,v) in Graph\n    if d[u] + cost[u][v] \u003c d[v]\n        Return \"Negative Cycle Detected\"\n    end if\nend for\nReturn \"No Negative Cycle\""
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Procedure NegativeCycleDetector(Graph, source):\nn := number of vertices in Graph\nfor i from 1 to n\n    d[i] := infinity\nend for\nd[source] := 0\nfor i from 1 to n-1\n    flag := false\n    for all edges from (u,v) in Graph\n        if d[u] + cost[u][v] \u003c d[v]\n            d[v] := d[u] + cost[u][v]\n            flag := true\n        end if\n    end for\n    if flag == false\n        break\nend for\nfor all edges from (u,v) in Graph\n    if d[u] + cost[u][v] \u003c d[v]\n        Return \"Negative Cycle Detected\"\n    end if\nend for\nReturn \"No Negative Cycle\"",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928431990,
        "id": "afe1d913-7030-420a-8f29-33f715ac3884",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928431990,
        "parent_id": "06cffec8-55c5-41e8-bdf0-0ab8c201d813",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This is how we find out if there is a negative cycle in a graph. We can also modify Bellman-Ford Algorithm to keep track of negative cycles."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This is how we find out if there is a negative cycle in a graph. We can also modify Bellman-Ford Algorithm to keep track of negative cycles."
          }
        ]
      }
    ],
    "title": "Detecting Negative Cycle in a Graph",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}