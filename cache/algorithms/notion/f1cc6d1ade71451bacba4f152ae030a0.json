{
  "ID": "f1cc6d1a-de71-451b-acba-4f152ae030a0",
  "Root": {
    "alive": true,
    "content": [
      "ce1857df-296e-49c6-85c8-b31c8c02da0c",
      "67469c31-3ec3-4ad9-9d51-c1745ae72e51",
      "6af29efc-1d22-4670-8e04-1aa9caa4713c",
      "e34e672c-6369-4e02-9f40-5cf1dd3fb58c",
      "75963df2-50aa-4490-8a97-481d1bea78a3",
      "2318e9bb-c712-42b2-aede-eac7664bc57c",
      "a89814e7-98c7-4892-a3e9-b7b8c29e5a49",
      "ff1afd55-791c-4bbb-a594-95e4a3d9ded5",
      "360f1764-ce3e-4f69-b257-a689017c6a5f",
      "97b34b79-850a-46d8-a29f-5e85e0a94e63"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551928086040,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "f1cc6d1a-de71-451b-acba-4f152ae030a0",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551928086040,
    "parent_id": "fb292c5c-1e2c-4d16-9d29-fce0aff04b2b",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Change-making problem"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928086036,
        "id": "ce1857df-296e-49c6-85c8-b31c8c02da0c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928086036,
        "parent_id": "f1cc6d1a-de71-451b-acba-4f152ae030a0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Given a money system, is it possible to give an amount of coins and how to find a minimal set of coins corresponding to this amount."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Given a money system, is it possible to give an amount of coins and how to find a minimal set of coins corresponding to this amount."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928086038,
        "id": "67469c31-3ec3-4ad9-9d51-c1745ae72e51",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928086038,
        "parent_id": "f1cc6d1a-de71-451b-acba-4f152ae030a0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Canonical money systems.",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " For some money system, like the ones we use in the real life, the “intuitive” solution works perfectly. For example, if the different euro coins and bills (excluding cents) are 1€, 2€, 5€, 10€, giving the highest coin or bill until we reach the amount and repeating this procedure will lead to the minimal set of coins."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Canonical money systems.",
            "AttrFlags": 1
          },
          {
            "Text": " For some money system, like the ones we use in the real life, the “intuitive” solution works perfectly. For example, if the different euro coins and bills (excluding cents) are 1€, 2€, 5€, 10€, giving the highest coin or bill until we reach the amount and repeating this procedure will lead to the minimal set of coins."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928086039,
        "id": "6af29efc-1d22-4670-8e04-1aa9caa4713c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928086039,
        "parent_id": "f1cc6d1a-de71-451b-acba-4f152ae030a0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We can do that recursively with OCaml :"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "We can do that recursively with OCaml :"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928086039,
        "id": "e34e672c-6369-4e02-9f40-5cf1dd3fb58c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928086039,
        "parent_id": "f1cc6d1a-de71-451b-acba-4f152ae030a0",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "(* assuming the money system is sorted in decreasing order *)\nlet change_make money_system amount =\n  let rec loop given amount =\n    if amount = 0 then given\n    else \n      (* we find the first value smaller or equal to the remaining amount *)\n      let coin = List.find ((\u003e=) amount) money_system in\n      loop (coin::given) (amount - coin)\n  in loop [] amount"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "(* assuming the money system is sorted in decreasing order *)\nlet change_make money_system amount =\n  let rec loop given amount =\n    if amount = 0 then given\n    else \n      (* we find the first value smaller or equal to the remaining amount *)\n      let coin = List.find ((\u003e=) amount) money_system in\n      loop (coin::given) (amount - coin)\n  in loop [] amount",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928086039,
        "id": "75963df2-50aa-4490-8a97-481d1bea78a3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928086039,
        "parent_id": "f1cc6d1a-de71-451b-acba-4f152ae030a0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "These systems are made so that change-making is easy. The problem gets harder when it comes to arbitrary money system."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "These systems are made so that change-making is easy. The problem gets harder when it comes to arbitrary money system."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928086039,
        "id": "2318e9bb-c712-42b2-aede-eac7664bc57c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928086039,
        "parent_id": "f1cc6d1a-de71-451b-acba-4f152ae030a0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "General case.",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " How to give 99€ with coins of 10€, 7€ and 5€? Here, giving coins of 10€ until we are left with 9€ leads obviously to no solution. Worse than that a solution may not exist. This problem is in fact np-hard, but acceptable solutions mixing "
            ],
            [
              "greediness",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "memoization",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " exist. The idea is to explore all the possibilies and pick the one with the minimal number of coins."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "General case.",
            "AttrFlags": 1
          },
          {
            "Text": " How to give 99€ with coins of 10€, 7€ and 5€? Here, giving coins of 10€ until we are left with 9€ leads obviously to no solution. Worse than that a solution may not exist. This problem is in fact np-hard, but acceptable solutions mixing "
          },
          {
            "Text": "greediness",
            "AttrFlags": 1
          },
          {
            "Text": " and "
          },
          {
            "Text": "memoization",
            "AttrFlags": 1
          },
          {
            "Text": " exist. The idea is to explore all the possibilies and pick the one with the minimal number of coins."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928086040,
        "id": "a89814e7-98c7-4892-a3e9-b7b8c29e5a49",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928086040,
        "parent_id": "f1cc6d1a-de71-451b-acba-4f152ae030a0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To give an amount X \u003e 0, we choose a piece P in the money system, and then solve the sub-problem corresponding to X-P. We try this for all the pieces of the system. The solution, if it exists, is then the smallest path that led to 0."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To give an amount X \u003e 0, we choose a piece P in the money system, and then solve the sub-problem corresponding to X-P. We try this for all the pieces of the system. The solution, if it exists, is then the smallest path that led to 0."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928086040,
        "id": "ff1afd55-791c-4bbb-a594-95e4a3d9ded5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928086040,
        "parent_id": "f1cc6d1a-de71-451b-acba-4f152ae030a0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Here an OCaml recursive function corresponding to this method. It returns None, if no solution exists."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Here an OCaml recursive function corresponding to this method. It returns None, if no solution exists."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928086040,
        "id": "360f1764-ce3e-4f69-b257-a689017c6a5f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928086040,
        "parent_id": "f1cc6d1a-de71-451b-acba-4f152ae030a0",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "(* option utilities *)\nlet optmin x y =\n  match x,y with\n  | None,a | a,None -\u003e a\n  | Some x, Some y-\u003e Some (min x y)\n\nlet optsucc = function\n  | Some x -\u003e Some (x+1)\n  | None -\u003e None\n\n(* Change-making problem*)\nlet change_make money_system amount =\n  let rec loop n =\n    let onepiece acc piece =\n      match n - piece with\n      | 0 -\u003e (*problem solved with one coin*) \n             Some 1\n      | x -\u003e if x \u003c 0 then \n               (*we don't reach 0, we discard this solution*)\n               None\n             else\n               (*we search the smallest path different to None with the remaining pieces*) \n               optmin (optsucc (loop x)) acc\n    in\n    (*we call onepiece forall the pieces*)\n    List.fold_left onepiece None money_system\n  in loop amount"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "(* option utilities *)\nlet optmin x y =\n  match x,y with\n  | None,a | a,None -\u003e a\n  | Some x, Some y-\u003e Some (min x y)\n\nlet optsucc = function\n  | Some x -\u003e Some (x+1)\n  | None -\u003e None\n\n(* Change-making problem*)\nlet change_make money_system amount =\n  let rec loop n =\n    let onepiece acc piece =\n      match n - piece with\n      | 0 -\u003e (*problem solved with one coin*) \n             Some 1\n      | x -\u003e if x \u003c 0 then \n               (*we don't reach 0, we discard this solution*)\n               None\n             else\n               (*we search the smallest path different to None with the remaining pieces*) \n               optmin (optsucc (loop x)) acc\n    in\n    (*we call onepiece forall the pieces*)\n    List.fold_left onepiece None money_system\n  in loop amount",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551928086040,
        "id": "97b34b79-850a-46d8-a29f-5e85e0a94e63",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551928086040,
        "parent_id": "f1cc6d1a-de71-451b-acba-4f152ae030a0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ": We can remark that this procedure may compute several times the change set for the same value. In practice, using memoization to avoid these repetitions leads to faster (way faster) results."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note",
            "AttrFlags": 1
          },
          {
            "Text": ": We can remark that this procedure may compute several times the change set for the same value. In practice, using memoization to avoid these repetitions leads to faster (way faster) results."
          }
        ]
      }
    ],
    "title": "Change-making problem",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}