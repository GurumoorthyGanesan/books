{
  "ID": "77462ad0-ceeb-4b9c-92b0-d1973664b23f",
  "Root": {
    "alive": true,
    "content": [
      "0fecf373-94f1-4099-9d97-427af274ac92",
      "1f191331-f382-42f9-9090-685ebce7c9c2",
      "9610781b-e295-411e-8f9e-f2e592e07260",
      "2f3fcbf5-1fc3-4796-9b4e-d84895d76417",
      "aa2ba11f-28f3-4bfb-a764-120b72f0b4c7",
      "e887eb56-26fb-4488-8869-749ee1daab67",
      "56978e8d-6d7f-4ebc-90f9-422989d228a9",
      "4b6f680e-49af-45f4-b2a4-3bbbf9ab6a68",
      "de2b9e68-b497-416a-ad6b-a70c0d796ae6",
      "bdff54bd-0aad-4477-abd7-385bf84c8a76",
      "c9451556-f961-43d5-b518-ed197e0ae235"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552017894159,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "77462ad0-ceeb-4b9c-92b0-d1973664b23f",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552017894159,
    "parent_id": "f2951439-dbd4-468d-b709-5d05eeed9c64",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Using middleware and the next callback"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552017894157,
        "id": "0fecf373-94f1-4099-9d97-427af274ac92",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552017894157,
        "parent_id": "77462ad0-ceeb-4b9c-92b0-d1973664b23f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Express passes a "
            ],
            [
              "next",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " callback to every route handler and middleware function that can be used to break logic for single routes across multiple handlers. Calling "
            ],
            [
              "next()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " with no arguments tells express to continue to the next matching middleware or route handler. Calling "
            ],
            [
              "next(err)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " with an error will trigger any error handler middleware. Calling "
            ],
            [
              "next('route')",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will bypass any subsequent middleware on the current route and jump to the next matching route. This allows domain logic to be decoupled into reusable components that are self-contained, simpler to test, and easier to maintain and change."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Express passes a "
          },
          {
            "Text": "next",
            "AttrFlags": 2
          },
          {
            "Text": " callback to every route handler and middleware function that can be used to break logic for single routes across multiple handlers. Calling "
          },
          {
            "Text": "next()",
            "AttrFlags": 2
          },
          {
            "Text": " with no arguments tells express to continue to the next matching middleware or route handler. Calling "
          },
          {
            "Text": "next(err)",
            "AttrFlags": 2
          },
          {
            "Text": " with an error will trigger any error handler middleware. Calling "
          },
          {
            "Text": "next('route')",
            "AttrFlags": 2
          },
          {
            "Text": " will bypass any subsequent middleware on the current route and jump to the next matching route. This allows domain logic to be decoupled into reusable components that are self-contained, simpler to test, and easier to maintain and change."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552017894158,
        "id": "1f191331-f382-42f9-9090-685ebce7c9c2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552017894158,
        "parent_id": "77462ad0-ceeb-4b9c-92b0-d1973664b23f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Multiple matching routes",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Multiple matching routes",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552017894158,
        "id": "9610781b-e295-411e-8f9e-f2e592e07260",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552017894158,
        "parent_id": "77462ad0-ceeb-4b9c-92b0-d1973664b23f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Requests to "
            ],
            [
              "/api/foo",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or to "
            ],
            [
              "/api/bar",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will run the initial handler to look up the member and then pass control to the actual handler for each route."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Requests to "
          },
          {
            "Text": "/api/foo",
            "AttrFlags": 2
          },
          {
            "Text": " or to "
          },
          {
            "Text": "/api/bar",
            "AttrFlags": 2
          },
          {
            "Text": " will run the initial handler to look up the member and then pass control to the actual handler for each route."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552017894158,
        "id": "2f3fcbf5-1fc3-4796-9b4e-d84895d76417",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552017894158,
        "parent_id": "77462ad0-ceeb-4b9c-92b0-d1973664b23f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "app.get('/api', function(req, res, next) {\n  // Both /api/foo and /api/bar will run this\n  lookupMember(function(err, member) {\n    if (err) return next(err);\n    req.member = member;\n    next();\n  });\n});\n\napp.get('/api/foo', function(req, res, next) {\n  // Only /api/foo will run this\n  doSomethingWithMember(req.member);\n});\n\napp.get('/api/bar', function(req, res, next) {\n  // Only /api/bar will run this\n  doSomethingDifferentWithMember(req.member);\n});"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "app.get('/api', function(req, res, next) {\n  // Both /api/foo and /api/bar will run this\n  lookupMember(function(err, member) {\n    if (err) return next(err);\n    req.member = member;\n    next();\n  });\n});\n\napp.get('/api/foo', function(req, res, next) {\n  // Only /api/foo will run this\n  doSomethingWithMember(req.member);\n});\n\napp.get('/api/bar', function(req, res, next) {\n  // Only /api/bar will run this\n  doSomethingDifferentWithMember(req.member);\n});",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552017894158,
        "id": "aa2ba11f-28f3-4bfb-a764-120b72f0b4c7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552017894158,
        "parent_id": "77462ad0-ceeb-4b9c-92b0-d1973664b23f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Error handler",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Error handler",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552017894158,
        "id": "e887eb56-26fb-4488-8869-749ee1daab67",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552017894158,
        "parent_id": "77462ad0-ceeb-4b9c-92b0-d1973664b23f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Error handlers are middleware with the signature "
            ],
            [
              "function(err, req, res, next)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". They could be set up per route (e.g. "
            ],
            [
              "app.get('/foo', function(err, req, res, next)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") but typically, a single error handler that renders an error page is sufficient."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Error handlers are middleware with the signature "
          },
          {
            "Text": "function(err, req, res, next)",
            "AttrFlags": 2
          },
          {
            "Text": ". They could be set up per route (e.g. "
          },
          {
            "Text": "app.get('/foo', function(err, req, res, next)",
            "AttrFlags": 2
          },
          {
            "Text": ") but typically, a single error handler that renders an error page is sufficient."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552017894159,
        "id": "56978e8d-6d7f-4ebc-90f9-422989d228a9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552017894159,
        "parent_id": "77462ad0-ceeb-4b9c-92b0-d1973664b23f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "app.get('/foo', function(req, res, next) {\n  doSomethingAsync(function(err, data) {\n    if (err) return next(err);\n    renderPage(data);\n  });\n});\n\n// In the case that doSomethingAsync return an error, this special\n// error handler middleware will be called with the error as the \n// first parameter.\napp.use(function(err, req, res, next) {\n  renderErrorPage(err);\n});"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "app.get('/foo', function(req, res, next) {\n  doSomethingAsync(function(err, data) {\n    if (err) return next(err);\n    renderPage(data);\n  });\n});\n\n// In the case that doSomethingAsync return an error, this special\n// error handler middleware will be called with the error as the \n// first parameter.\napp.use(function(err, req, res, next) {\n  renderErrorPage(err);\n});",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552017894159,
        "id": "4b6f680e-49af-45f4-b2a4-3bbbf9ab6a68",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552017894159,
        "parent_id": "77462ad0-ceeb-4b9c-92b0-d1973664b23f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Middleware",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Middleware",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552017894159,
        "id": "de2b9e68-b497-416a-ad6b-a70c0d796ae6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552017894159,
        "parent_id": "77462ad0-ceeb-4b9c-92b0-d1973664b23f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Each of the functions above is actually a middleware function that is run whenever a request matches the route defined, but any number of middleware functions can be defined on a single route. This allows middleware to be defined in separate files and common logic to be reused across multiple routes."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Each of the functions above is actually a middleware function that is run whenever a request matches the route defined, but any number of middleware functions can be defined on a single route. This allows middleware to be defined in separate files and common logic to be reused across multiple routes."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552017894159,
        "id": "bdff54bd-0aad-4477-abd7-385bf84c8a76",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552017894159,
        "parent_id": "77462ad0-ceeb-4b9c-92b0-d1973664b23f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "app.get('/bananas', function(req, res, next) {\n  getMember(function(err, member) {\n    if (err) return next(err);\n    // If there's no member, don't try to look\n    // up data. Just go render the page now.\n    if (!member) return next('route');\n    // Otherwise, call the next middleware and fetch\n    // the member's data.\n    req.member = member;\n    next();\n  });\n}, function(req, res, next) {\n  getMemberData(req.member, function(err, data) {\n    if (err) return next(err);\n    // If this member has no data, don't bother\n    // parsing it. Just go render the page now.\n    if (!data) return next('route');\n    // Otherwise, call the next middleware and parse\n    // the member's data. THEN render the page.\n    req.member.data = data;\n    next();\n  });\n}, function(req, res, next) {\n  req.member.parsedData = parseMemberData(req.member.data);\n  next();\n});\n\napp.get('/bananas', function(req, res, next) {\n  renderBananas(req.member);\n});"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "app.get('/bananas', function(req, res, next) {\n  getMember(function(err, member) {\n    if (err) return next(err);\n    // If there's no member, don't try to look\n    // up data. Just go render the page now.\n    if (!member) return next('route');\n    // Otherwise, call the next middleware and fetch\n    // the member's data.\n    req.member = member;\n    next();\n  });\n}, function(req, res, next) {\n  getMemberData(req.member, function(err, data) {\n    if (err) return next(err);\n    // If this member has no data, don't bother\n    // parsing it. Just go render the page now.\n    if (!data) return next('route');\n    // Otherwise, call the next middleware and parse\n    // the member's data. THEN render the page.\n    req.member.data = data;\n    next();\n  });\n}, function(req, res, next) {\n  req.member.parsedData = parseMemberData(req.member.data);\n  next();\n});\n\napp.get('/bananas', function(req, res, next) {\n  renderBananas(req.member);\n});",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552017894159,
        "id": "c9451556-f961-43d5-b518-ed197e0ae235",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552017894159,
        "parent_id": "77462ad0-ceeb-4b9c-92b0-d1973664b23f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In this example, each middleware function would be either in it’s own file or in a variable elsewhere in the file so that it could be reused in other routes."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In this example, each middleware function would be either in it’s own file or in a variable elsewhere in the file so that it could be reused in other routes."
          }
        ]
      }
    ],
    "title": "Using middleware and the next callback",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}