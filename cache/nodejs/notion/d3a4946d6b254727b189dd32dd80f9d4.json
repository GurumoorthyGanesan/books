{
  "ID": "d3a4946d-6b25-4727-b189-dd32dd80f9d4",
  "Root": {
    "alive": true,
    "content": [
      "263120ab-5021-4f04-a924-40af11e8811d",
      "22fb4f99-6d42-42a0-8946-789089e644af",
      "cabc90ea-16e0-4e45-9b0b-e9f074653cba"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552018302125,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "d3a4946d-6b25-4727-b189-dd32dd80f9d4",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552018302125,
    "parent_id": "6154e406-49be-4b00-9e86-05faa7dbf5e2",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "async.timesTo handle for loop in better way"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552018302124,
        "id": "263120ab-5021-4f04-a924-40af11e8811d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552018302124,
        "parent_id": "d3a4946d-6b25-4727-b189-dd32dd80f9d4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To execute a function within a loop in node.js, it’s fine to use a "
            ],
            [
              "for",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " loop for short loops. But the loop is long, using "
            ],
            [
              "for",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " loop will increase the time of processing which might cause the node process to hang. In such scenarios, you can use: "
            ],
            [
              "asycn.times",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To execute a function within a loop in node.js, it’s fine to use a "
          },
          {
            "Text": "for",
            "AttrFlags": 2
          },
          {
            "Text": " loop for short loops. But the loop is long, using "
          },
          {
            "Text": "for",
            "AttrFlags": 2
          },
          {
            "Text": " loop will increase the time of processing which might cause the node process to hang. In such scenarios, you can use: "
          },
          {
            "Text": "asycn.times",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552018302125,
        "id": "22fb4f99-6d42-42a0-8946-789089e644af",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552018302125,
        "parent_id": "d3a4946d-6b25-4727-b189-dd32dd80f9d4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "function recursiveAction(n, callback)\n{\n    //do whatever want to do repeatedly\n    callback(err, result);\n}\nasync.times(5, function(n, next) {\n    recursiveAction(n, function(err, result) {\n        next(err, result);\n    });\n}, function(err, results) {\n    // we should now have 5 result\n});"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "function recursiveAction(n, callback)\n{\n    //do whatever want to do repeatedly\n    callback(err, result);\n}\nasync.times(5, function(n, next) {\n    recursiveAction(n, function(err, result) {\n        next(err, result);\n    });\n}, function(err, results) {\n    // we should now have 5 result\n});",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552018302125,
        "id": "cabc90ea-16e0-4e45-9b0b-e9f074653cba",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552018302125,
        "parent_id": "d3a4946d-6b25-4727-b189-dd32dd80f9d4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This is called in parallel. When we want to call it one at a time, use: "
            ],
            [
              "async.timesSeries",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This is called in parallel. When we want to call it one at a time, use: "
          },
          {
            "Text": "async.timesSeries",
            "AttrFlags": 1
          }
        ]
      }
    ],
    "title": "async.timesTo handle for loop in better way",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}