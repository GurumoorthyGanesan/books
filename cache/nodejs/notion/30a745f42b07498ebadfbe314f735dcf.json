{
  "ID": "30a745f4-2b07-498e-badf-be314f735dcf",
  "Root": {
    "alive": true,
    "content": [
      "32943aac-bcbb-4d61-8978-f556debe6def",
      "cc6b7201-69a2-4075-b785-390f876cdb40"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552017895240,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "30a745f4-2b07-498e-badf-be314f735dcf",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552017895240,
    "parent_id": "b60b83af-cc4e-47ae-ab6e-4110865abee0",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Reading a file into a Buffer using streams"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552017895239,
        "id": "32943aac-bcbb-4d61-8978-f556debe6def",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552017895239,
        "parent_id": "30a745f4-2b07-498e-badf-be314f735dcf",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "While reading content from a file is already asynchronous using the "
            ],
            [
              "fs.readFile()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method, sometimes we want to get the data in a Stream versus in a simple callback. This allows us to pipe this data to other locations or to process it as it comes in versus all at once at the end."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "While reading content from a file is already asynchronous using the "
          },
          {
            "Text": "fs.readFile()",
            "AttrFlags": 2
          },
          {
            "Text": " method, sometimes we want to get the data in a Stream versus in a simple callback. This allows us to pipe this data to other locations or to process it as it comes in versus all at once at the end."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552017895240,
        "id": "cc6b7201-69a2-4075-b785-390f876cdb40",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552017895240,
        "parent_id": "30a745f4-2b07-498e-badf-be314f735dcf",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "const fs = require('fs');\n\n// Store file data chunks in this array\nlet chunks = [];\n// We can use this variable to store the final data\nlet fileBuffer;\n\n// Read file into stream.Readable\nlet fileStream = fs.createReadStream('text.txt');\n\n// An error occurred with the stream\nfileStream.once('error', (err) =\u003e {\n    // Be sure to handle this properly!\n    console.error(err); \n});\n\n// File is done being read\nfileStream.once('end', () =\u003e {\n    // create the final data Buffer from data chunks;\n    fileBuffer = Buffer.concat(chunks);\n    \n    // Of course, you can do anything else you need to here, like emit an event!\n});\n\n// Data is flushed from fileStream in chunks,\n// this callback will be executed for each chunk\nfileStream.on('data', (chunk) =\u003e {\n    chunks.push(chunk); // push data chunk to array\n\n    // We can perform actions on the partial data we have so far!\n});"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "const fs = require('fs');\n\n// Store file data chunks in this array\nlet chunks = [];\n// We can use this variable to store the final data\nlet fileBuffer;\n\n// Read file into stream.Readable\nlet fileStream = fs.createReadStream('text.txt');\n\n// An error occurred with the stream\nfileStream.once('error', (err) =\u003e {\n    // Be sure to handle this properly!\n    console.error(err); \n});\n\n// File is done being read\nfileStream.once('end', () =\u003e {\n    // create the final data Buffer from data chunks;\n    fileBuffer = Buffer.concat(chunks);\n    \n    // Of course, you can do anything else you need to here, like emit an event!\n});\n\n// Data is flushed from fileStream in chunks,\n// this callback will be executed for each chunk\nfileStream.on('data', (chunk) =\u003e {\n    chunks.push(chunk); // push data chunk to array\n\n    // We can perform actions on the partial data we have so far!\n});",
        "code_language": "Plain Text"
      }
    ],
    "title": "Reading a file into a Buffer using streams",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}