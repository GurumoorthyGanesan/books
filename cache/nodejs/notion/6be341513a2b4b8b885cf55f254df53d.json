{
  "ID": "6be34151-3a2b-4b8b-885c-f55f254df53d",
  "Root": {
    "alive": true,
    "content": [
      "063e7a22-45dc-43db-b29c-c6199ffd97d0",
      "6b5ac1bb-e32d-46d2-a691-72114c787d13",
      "423212ab-b6d7-4bfa-af76-6134c214203e",
      "48c3213d-13aa-4fe4-b93e-a8624eafa8da",
      "766b0539-f2ad-4fbe-bb44-b262df78f14c"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552020293157,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "6be34151-3a2b-4b8b-885c-f55f254df53d",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552020293157,
    "parent_id": "4fad85d1-d36e-41df-952d-b4ea8df24e6e",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Callback hell"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552020293154,
        "id": "063e7a22-45dc-43db-b29c-c6199ffd97d0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552020293154,
        "parent_id": "6be34151-3a2b-4b8b-885c-f55f254df53d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Callback hell (also a pyramid of doom or boomerang effect) arises when you nest too many callback functions inside a callback function. Here is an example to read a file (in ES6)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Callback hell (also a pyramid of doom or boomerang effect) arises when you nest too many callback functions inside a callback function. Here is an example to read a file (in ES6)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552020293155,
        "id": "6b5ac1bb-e32d-46d2-a691-72114c787d13",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552020293155,
        "parent_id": "6be34151-3a2b-4b8b-885c-f55f254df53d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "const fs = require('fs');\nlet filename = `${__dirname}/myfile.txt`;\n\nfs.exists(filename, exists =\u003e {\n    if (exists) {\n        fs.stat(filename, (err, stats) =\u003e {\n            if (err) {\n                throw err;\n            }\n            if (stats.isFile()) {\n                fs.readFile(filename, null, (err, data) =\u003e {\n                    if (err) {\n                        throw err;\n                    }\n                    console.log(data);\n                });\n            }\n            else {\n                throw new Error(\"This location contains not a file\");\n            }\n        });\n    }\n    else {\n        throw new Error(\"404: file not found\");\n    }\n});"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "const fs = require('fs');\nlet filename = `${__dirname}/myfile.txt`;\n\nfs.exists(filename, exists =\u003e {\n    if (exists) {\n        fs.stat(filename, (err, stats) =\u003e {\n            if (err) {\n                throw err;\n            }\n            if (stats.isFile()) {\n                fs.readFile(filename, null, (err, data) =\u003e {\n                    if (err) {\n                        throw err;\n                    }\n                    console.log(data);\n                });\n            }\n            else {\n                throw new Error(\"This location contains not a file\");\n            }\n        });\n    }\n    else {\n        throw new Error(\"404: file not found\");\n    }\n});",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552020293155,
        "id": "423212ab-b6d7-4bfa-af76-6134c214203e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552020293155,
        "parent_id": "6be34151-3a2b-4b8b-885c-f55f254df53d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "How to avoid “Callback Hell”",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "How to avoid “Callback Hell”",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552020293157,
        "id": "48c3213d-13aa-4fe4-b93e-a8624eafa8da",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552020293157,
        "parent_id": "6be34151-3a2b-4b8b-885c-f55f254df53d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It is recommended to nest no more than 2 callback functions. This will help you maintain code readability and will me much easier to maintain in the future. If you have a need to nest more than 2 callbacks, try to make use of "
            ],
            [
              "distributed events",
              [
                [
                  "a",
                  "https://nodejs.org/api/events.html"
                ]
              ]
            ],
            [
              " instead."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It is recommended to nest no more than 2 callback functions. This will help you maintain code readability and will me much easier to maintain in the future. If you have a need to nest more than 2 callbacks, try to make use of "
          },
          {
            "Text": "distributed events",
            "Link": "https://nodejs.org/api/events.html"
          },
          {
            "Text": " instead."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552020293157,
        "id": "766b0539-f2ad-4fbe-bb44-b262df78f14c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552020293157,
        "parent_id": "6be34151-3a2b-4b8b-885c-f55f254df53d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "There also exists a library called "
            ],
            [
              "async",
              [
                [
                  "a",
                  "https://caolan.github.io/async/"
                ]
              ]
            ],
            [
              " that helps manage callbacks and their execution available on npm. It increases the readability of callback code and gives you more control over your callback code flow, including allowing you to run them in parallel or in series."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "There also exists a library called "
          },
          {
            "Text": "async",
            "Link": "https://caolan.github.io/async/"
          },
          {
            "Text": " that helps manage callbacks and their execution available on npm. It increases the readability of callback code and gives you more control over your callback code flow, including allowing you to run them in parallel or in series."
          }
        ]
      }
    ],
    "title": "Callback hell",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}