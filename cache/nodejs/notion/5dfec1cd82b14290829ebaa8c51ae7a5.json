{
  "ID": "5dfec1cd-82b1-4290-829e-baa8c51ae7a5",
  "Root": {
    "alive": true,
    "content": [
      "6d054339-2a3b-48fe-a16c-db39a5ea474c",
      "77ed5d02-ae00-4526-93b0-6c7148a25d1e",
      "27d626ed-7598-4a36-9124-11a691e835cd",
      "014ec4b7-12e2-4824-be3e-0f8d4581fd6c",
      "30cc1b76-4ef5-4c50-b1a8-e7a487dd4b8b",
      "40e3ef58-63e4-4491-ad35-4e4817adb944",
      "83f23ffa-4920-496f-82dd-ca1c348a6022",
      "1523cea6-52ee-4117-91f1-30b1eadf2142",
      "5ef310f3-6a66-4901-a5f7-55b7a5373c65",
      "1e992655-32fd-45bb-96c0-0595fa175b51"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552020294356,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "5dfec1cd-82b1-4290-829e-baa8c51ae7a5",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552020294356,
    "parent_id": "4fad85d1-d36e-41df-952d-b4ea8df24e6e",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Native Promises"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552020294351,
        "id": "6d054339-2a3b-48fe-a16c-db39a5ea474c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552020294351,
        "parent_id": "5dfec1cd-82b1-4290-829e-baa8c51ae7a5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Promises are a tool for async programming. In JavaScript promises are known for their "
            ],
            [
              "then",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " methods. Promises have two main states ‘pending’ and ‘settled’. Once a promise is ‘settled’ it cannot go back to ‘pending’. This means that promises are mostly good for events that only occur once. The ‘settled’ state has two states as well ‘resolved’ and ‘rejected’. You can create a new promise using the "
            ],
            [
              "new",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " keyword and passing a function into the constructor "
            ],
            [
              "new Promise(function (resolve, reject) {})",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Promises are a tool for async programming. In JavaScript promises are known for their "
          },
          {
            "Text": "then",
            "AttrFlags": 2
          },
          {
            "Text": " methods. Promises have two main states ‘pending’ and ‘settled’. Once a promise is ‘settled’ it cannot go back to ‘pending’. This means that promises are mostly good for events that only occur once. The ‘settled’ state has two states as well ‘resolved’ and ‘rejected’. You can create a new promise using the "
          },
          {
            "Text": "new",
            "AttrFlags": 2
          },
          {
            "Text": " keyword and passing a function into the constructor "
          },
          {
            "Text": "new Promise(function (resolve, reject) {})",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552020294354,
        "id": "77ed5d02-ae00-4526-93b0-6c7148a25d1e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552020294354,
        "parent_id": "5dfec1cd-82b1-4290-829e-baa8c51ae7a5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The function passed into the Promise constructor always receives a first and second parameter usually named "
            ],
            [
              "resolve",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "reject",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " respectively. The naming of these two parameters is convention, but they will put the promise into either the ‘resolved’ state or the ‘rejected’ state. When either one of these is called the promise goes from being ‘pending’ to ‘settled’. "
            ],
            [
              "resolve",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is called when the desired action, which is often asynchronous, has been performed and "
            ],
            [
              "reject",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is used if the action has errored."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The function passed into the Promise constructor always receives a first and second parameter usually named "
          },
          {
            "Text": "resolve",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "reject",
            "AttrFlags": 2
          },
          {
            "Text": " respectively. The naming of these two parameters is convention, but they will put the promise into either the ‘resolved’ state or the ‘rejected’ state. When either one of these is called the promise goes from being ‘pending’ to ‘settled’. "
          },
          {
            "Text": "resolve",
            "AttrFlags": 2
          },
          {
            "Text": " is called when the desired action, which is often asynchronous, has been performed and "
          },
          {
            "Text": "reject",
            "AttrFlags": 2
          },
          {
            "Text": " is used if the action has errored."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552020294355,
        "id": "27d626ed-7598-4a36-9124-11a691e835cd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552020294355,
        "parent_id": "5dfec1cd-82b1-4290-829e-baa8c51ae7a5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In the below timeout is a function that returns a Promise."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In the below timeout is a function that returns a Promise."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552020294355,
        "id": "014ec4b7-12e2-4824-be3e-0f8d4581fd6c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552020294355,
        "parent_id": "5dfec1cd-82b1-4290-829e-baa8c51ae7a5",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "function timeout (ms) {\n  return new Promise(function (resolve, reject) {\n    setTimeout(function () {\n      resolve(\"It was resolved!\");\n    }, ms)\n  });\n}\n\ntimeout(1000).then(function (dataFromPromise) {\n  // logs \"It was resolved!\"\n  console.log(dataFromPromise);\n})\n\nconsole.log(\"waiting...\");"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "function timeout (ms) {\n  return new Promise(function (resolve, reject) {\n    setTimeout(function () {\n      resolve(\"It was resolved!\");\n    }, ms)\n  });\n}\n\ntimeout(1000).then(function (dataFromPromise) {\n  // logs \"It was resolved!\"\n  console.log(dataFromPromise);\n})\n\nconsole.log(\"waiting...\");",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552020294355,
        "id": "30cc1b76-4ef5-4c50-b1a8-e7a487dd4b8b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552020294355,
        "parent_id": "5dfec1cd-82b1-4290-829e-baa8c51ae7a5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "console output"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "console output"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552020294355,
        "id": "40e3ef58-63e4-4491-ad35-4e4817adb944",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552020294355,
        "parent_id": "5dfec1cd-82b1-4290-829e-baa8c51ae7a5",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "waiting...\n// \u003c\u003c pauses for one second\u003e\u003e\nIt was resolved!"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "waiting...\n// \u003c\u003c pauses for one second\u003e\u003e\nIt was resolved!",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552020294355,
        "id": "83f23ffa-4920-496f-82dd-ca1c348a6022",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552020294355,
        "parent_id": "5dfec1cd-82b1-4290-829e-baa8c51ae7a5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When timeout is called the function passed to the Promise constructor is executed without delay. Then the setTimeout method is executed and its callback is set to fire in the next "
            ],
            [
              "ms",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " milliseconds, in this case "
            ],
            [
              "ms=1000",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Since the callback to the setTimeout isn’t fired yet the timeout function returns control to the calling scope. The chain of "
            ],
            [
              "then",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " methods are then stored to be called later when/if the Promise has resolved. If there were "
            ],
            [
              "catch",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " methods here they would be stored as well, but would be fired when/if the promise ‘rejects’."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When timeout is called the function passed to the Promise constructor is executed without delay. Then the setTimeout method is executed and its callback is set to fire in the next "
          },
          {
            "Text": "ms",
            "AttrFlags": 2
          },
          {
            "Text": " milliseconds, in this case "
          },
          {
            "Text": "ms=1000",
            "AttrFlags": 2
          },
          {
            "Text": ". Since the callback to the setTimeout isn’t fired yet the timeout function returns control to the calling scope. The chain of "
          },
          {
            "Text": "then",
            "AttrFlags": 2
          },
          {
            "Text": " methods are then stored to be called later when/if the Promise has resolved. If there were "
          },
          {
            "Text": "catch",
            "AttrFlags": 2
          },
          {
            "Text": " methods here they would be stored as well, but would be fired when/if the promise ‘rejects’."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552020294356,
        "id": "1523cea6-52ee-4117-91f1-30b1eadf2142",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552020294356,
        "parent_id": "5dfec1cd-82b1-4290-829e-baa8c51ae7a5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The script then prints ‘waiting…’. One second later the setTimeout calls its callback which calls the resolve function with the string “It was resolved!”. That string is then passed into the "
            ],
            [
              "then",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method’s callback and is then logged to the user."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The script then prints ‘waiting…’. One second later the setTimeout calls its callback which calls the resolve function with the string “It was resolved!”. That string is then passed into the "
          },
          {
            "Text": "then",
            "AttrFlags": 2
          },
          {
            "Text": " method’s callback and is then logged to the user."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552020294356,
        "id": "5ef310f3-6a66-4901-a5f7-55b7a5373c65",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552020294356,
        "parent_id": "5dfec1cd-82b1-4290-829e-baa8c51ae7a5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In the same sense you can wrap the asynchronous setTimeout function which requires a callback you can wrap any singular asynchronous action with a promise."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In the same sense you can wrap the asynchronous setTimeout function which requires a callback you can wrap any singular asynchronous action with a promise."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552020294356,
        "id": "1e992655-32fd-45bb-96c0-0595fa175b51",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552020294356,
        "parent_id": "5dfec1cd-82b1-4290-829e-baa8c51ae7a5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Read more about promises in the JavaScript documentation http://stackoverflow.com/documentation/javascript/231/promises#t=201704200048290479802."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Read more about promises in the JavaScript documentation http://stackoverflow.com/documentation/javascript/231/promises#t=201704200048290479802."
          }
        ]
      }
    ],
    "title": "Native Promises",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}