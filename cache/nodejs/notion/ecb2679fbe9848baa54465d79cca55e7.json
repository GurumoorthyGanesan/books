{
  "ID": "ecb2679f-be98-48ba-a544-65d79cca55e7",
  "Root": {
    "alive": true,
    "content": [
      "c526c4f1-f2aa-4691-899b-221e34b555de",
      "08a1b09f-f7a4-4559-8f9c-8d095e2945db"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552020656735,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "ecb2679f-be98-48ba-a544-65d79cca55e7",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552020656735,
    "parent_id": "6f6f8932-b7d8-4496-b062-4591bc5f3030",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Creating a Node.js Library that Supports Both Promises and Error-First Callbacks"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552020656732,
        "id": "c526c4f1-f2aa-4691-899b-221e34b555de",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552020656732,
        "parent_id": "ecb2679f-be98-48ba-a544-65d79cca55e7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Introduction"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Introduction"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552020656734,
        "id": "08a1b09f-f7a4-4559-8f9c-8d095e2945db",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552020656734,
        "parent_id": "ecb2679f-be98-48ba-a544-65d79cca55e7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Many people like working with promises and/or async/await syntax, but when writing a module it would be useful to some programmers to support classic callback style methods as well. Rather than creating two modules, or two sets of functions, or having the programmer promisify your module, your module can support both programming methods at one using bluebird’s asCallback() or Q’s nodeify()."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Many people like working with promises and/or async/await syntax, but when writing a module it would be useful to some programmers to support classic callback style methods as well. Rather than creating two modules, or two sets of functions, or having the programmer promisify your module, your module can support both programming methods at one using bluebird’s asCallback() or Q’s nodeify()."
          }
        ]
      }
    ],
    "title": "Creating a Node.js Library that Supports Both Promises and Error-First Callbacks",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}