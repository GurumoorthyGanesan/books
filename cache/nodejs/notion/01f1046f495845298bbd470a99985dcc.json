{
  "ID": "01f1046f-4958-4529-8bbd-470a99985dcc",
  "Root": {
    "alive": true,
    "content": [
      "19c8bd0d-3098-43ec-9f85-909a58b2da47",
      "3034fae5-e956-4ddb-98a6-c3b4f1781059",
      "9bbd35bf-ec5d-4806-aaad-c405de2c9b44",
      "a398724d-4c47-4e51-bd36-fd20d1fad11a",
      "e36419bc-0b5e-4f23-806c-68e02e4cfaa4"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552017990311,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "01f1046f-4958-4529-8bbd-470a99985dcc",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552017990311,
    "parent_id": "eec055cf-46d0-4084-a9cb-b9d077313c4f",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Hello World"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552017990308,
        "id": "19c8bd0d-3098-43ec-9f85-909a58b2da47",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552017990308,
        "parent_id": "01f1046f-4958-4529-8bbd-470a99985dcc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This is your "
            ],
            [
              "cluster.js",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This is your "
          },
          {
            "Text": "cluster.js",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552017990311,
        "id": "3034fae5-e956-4ddb-98a6-c3b4f1781059",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552017990311,
        "parent_id": "01f1046f-4958-4529-8bbd-470a99985dcc",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "const cluster = require('cluster');\nconst http = require('http');\nconst numCPUs = require('os').cpus().length;\n\nif (cluster.isMaster) {\n  // Fork workers.\n  for (let i = 0; i \u003c numCPUs; i++) {\n    cluster.fork();\n  }\n\n  cluster.on('exit', (worker, code, signal) =\u003e {\n    console.log(`worker ${worker.process.pid} died`);\n  });\n} else {\n  // Workers can share any TCP connection\n  // In this case it is an HTTP server\n  require('./server.js')();\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "const cluster = require('cluster');\nconst http = require('http');\nconst numCPUs = require('os').cpus().length;\n\nif (cluster.isMaster) {\n  // Fork workers.\n  for (let i = 0; i \u003c numCPUs; i++) {\n    cluster.fork();\n  }\n\n  cluster.on('exit', (worker, code, signal) =\u003e {\n    console.log(`worker ${worker.process.pid} died`);\n  });\n} else {\n  // Workers can share any TCP connection\n  // In this case it is an HTTP server\n  require('./server.js')();\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552017990311,
        "id": "9bbd35bf-ec5d-4806-aaad-c405de2c9b44",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552017990311,
        "parent_id": "01f1046f-4958-4529-8bbd-470a99985dcc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This is your main "
            ],
            [
              "server.js",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This is your main "
          },
          {
            "Text": "server.js",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552017990311,
        "id": "a398724d-4c47-4e51-bd36-fd20d1fad11a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552017990311,
        "parent_id": "01f1046f-4958-4529-8bbd-470a99985dcc",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "const http = require('http');\n\nfunction startServer() {\n    const server = http.createServer((req, res) =\u003e {\n      res.writeHead(200);\n      res.end('Hello Http');\n    });\n\n    server.listen(3000);\n}\n\nif(!module.parent) {\n    // Start server if file is run directly\n    startServer();\n} else {\n    // Export server, if file is referenced via cluster\n    module.exports = startServer;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "const http = require('http');\n\nfunction startServer() {\n    const server = http.createServer((req, res) =\u003e {\n      res.writeHead(200);\n      res.end('Hello Http');\n    });\n\n    server.listen(3000);\n}\n\nif(!module.parent) {\n    // Start server if file is run directly\n    startServer();\n} else {\n    // Export server, if file is referenced via cluster\n    module.exports = startServer;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552017990311,
        "id": "e36419bc-0b5e-4f23-806c-68e02e4cfaa4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552017990311,
        "parent_id": "01f1046f-4958-4529-8bbd-470a99985dcc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In this example, we host a basic web server, however, we spin up workers (child processes) using the built-in "
            ],
            [
              "cluster",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " module. The number of processes forker depend on the number of CPU cores available. This enables a Node.js application to take advantage of multi-core CPUs, since a single instance of Node.js runs in a single thread. The application will now share the port 8000 across all the processes. Loads will automatically be distributed between workers using the Round-Robin method by default."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In this example, we host a basic web server, however, we spin up workers (child processes) using the built-in "
          },
          {
            "Text": "cluster",
            "AttrFlags": 1
          },
          {
            "Text": " module. The number of processes forker depend on the number of CPU cores available. This enables a Node.js application to take advantage of multi-core CPUs, since a single instance of Node.js runs in a single thread. The application will now share the port 8000 across all the processes. Loads will automatically be distributed between workers using the Round-Robin method by default."
          }
        ]
      }
    ],
    "title": "Hello World",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}