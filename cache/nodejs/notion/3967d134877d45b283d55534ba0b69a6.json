{
  "ID": "3967d134-877d-45b2-83d5-5534ba0b69a6",
  "Root": {
    "alive": true,
    "content": [
      "bd01fb15-b945-4691-ae19-f9946f4d02cc",
      "4d9f6376-79d3-4fa6-a849-f653ddec8239",
      "eec8ec49-8065-441d-af48-8facac00b39b",
      "a7263a20-9b63-4242-8ee1-3c79071d3798",
      "fe475d15-aa03-4412-9edf-84d8cd052802",
      "025e2d18-dec6-4ec0-a9e0-34597a4a41c5",
      "6b485850-6156-48e0-b35e-6068af2e7d79",
      "05b5dbaf-dee3-4838-bd37-70450d95b89a",
      "3dc53f3b-cdf5-4828-932a-2123dd5619b9",
      "d688c9cb-24c7-4238-a39f-ffb7d8ee821e",
      "859e255c-8290-4a50-bce7-6275d682ef65",
      "f60481be-dc65-46d9-a382-3e5c7b2390cc"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552019457167,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "3967d134-877d-45b2-83d5-5534ba0b69a6",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552019457167,
    "parent_id": "2a8c1fc6-7a53-4fdc-a435-fcd9bd10d66f",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Basic program for signup"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552019457163,
        "id": "bd01fb15-b945-4691-ae19-f9946f4d02cc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552019457163,
        "parent_id": "3967d134-877d-45b2-83d5-5534ba0b69a6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Through this example, it will be explained to divide the "
            ],
            [
              "node.js",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " code into different "
            ],
            [
              "modules/folders",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " for better undertandibility. Following this technique makes it easier for other developers to understand the code as he can directly refer to concerned file instead of going through whole code. The major use is when you are working in a team and a new developer joins at a later stage, it will get easier for him to gel up with the code itself."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Through this example, it will be explained to divide the "
          },
          {
            "Text": "node.js",
            "AttrFlags": 1
          },
          {
            "Text": " code into different "
          },
          {
            "Text": "modules/folders",
            "AttrFlags": 1
          },
          {
            "Text": " for better undertandibility. Following this technique makes it easier for other developers to understand the code as he can directly refer to concerned file instead of going through whole code. The major use is when you are working in a team and a new developer joins at a later stage, it will get easier for him to gel up with the code itself."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552019457166,
        "id": "4d9f6376-79d3-4fa6-a849-f653ddec8239",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552019457166,
        "parent_id": "3967d134-877d-45b2-83d5-5534ba0b69a6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "index.js",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " :- This file will manage server connection."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "index.js",
            "AttrFlags": 1
          },
          {
            "Text": " :- This file will manage server connection."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552019457166,
        "id": "eec8ec49-8065-441d-af48-8facac00b39b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552019457166,
        "parent_id": "3967d134-877d-45b2-83d5-5534ba0b69a6",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "//Import Libraries\nvar express = require('express'),\n    session = require('express-session'),\n    mongoose = require('mongoose'),\n    request = require('request');\n\n//Import custom modules\nvar userRoutes = require('./app/routes/userRoutes');\nvar config = require('./app/config/config');\n\n//Connect to Mongo DB\nmongoose.connect(config.getDBString());\n\n//Create a new Express application and Configure it\nvar app = express();\n\n//Configure Routes\napp.use(config.API_PATH, userRoutes());\n\n//Start the server\napp.listen(config.PORT); \nconsole.log('Server started at - '+ config.URL+ \":\" +config.PORT);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "//Import Libraries\nvar express = require('express'),\n    session = require('express-session'),\n    mongoose = require('mongoose'),\n    request = require('request');\n\n//Import custom modules\nvar userRoutes = require('./app/routes/userRoutes');\nvar config = require('./app/config/config');\n\n//Connect to Mongo DB\nmongoose.connect(config.getDBString());\n\n//Create a new Express application and Configure it\nvar app = express();\n\n//Configure Routes\napp.use(config.API_PATH, userRoutes());\n\n//Start the server\napp.listen(config.PORT); \nconsole.log('Server started at - '+ config.URL+ \":\" +config.PORT);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552019457166,
        "id": "a7263a20-9b63-4242-8ee1-3c79071d3798",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552019457166,
        "parent_id": "3967d134-877d-45b2-83d5-5534ba0b69a6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "config.js",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ":-This file will manage all the configuration related params which will remain same throughout."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "config.js",
            "AttrFlags": 1
          },
          {
            "Text": ":-This file will manage all the configuration related params which will remain same throughout."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552019457166,
        "id": "fe475d15-aa03-4412-9edf-84d8cd052802",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552019457166,
        "parent_id": "3967d134-877d-45b2-83d5-5534ba0b69a6",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "var config = {\nVERSION: 1,\nBUILD: 1,\nURL: 'http://127.0.0.1',\nAPI_PATH : '/api', \nPORT : process.env.PORT || 8080,\nDB : {\n    //MongoDB configuration\n    HOST : 'localhost',\n    PORT : '27017',\n    DATABASE : 'db'\n},\n\n/* \n * Get DB Connection String for connecting to MongoDB database\n */\ngetDBString : function(){\n    return 'mongodb://'+ this.DB.HOST +':'+ this.DB.PORT +'/'+ this.DB.DATABASE;\n},\n\n/*\n * Get the http URL \n */\ngetHTTPUrl : function(){\n    return 'http://' + this.URL + \":\" + this.PORT;\n}\n\nmodule.exports = config;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "var config = {\nVERSION: 1,\nBUILD: 1,\nURL: 'http://127.0.0.1',\nAPI_PATH : '/api', \nPORT : process.env.PORT || 8080,\nDB : {\n    //MongoDB configuration\n    HOST : 'localhost',\n    PORT : '27017',\n    DATABASE : 'db'\n},\n\n/* \n * Get DB Connection String for connecting to MongoDB database\n */\ngetDBString : function(){\n    return 'mongodb://'+ this.DB.HOST +':'+ this.DB.PORT +'/'+ this.DB.DATABASE;\n},\n\n/*\n * Get the http URL \n */\ngetHTTPUrl : function(){\n    return 'http://' + this.URL + \":\" + this.PORT;\n}\n\nmodule.exports = config;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552019457167,
        "id": "025e2d18-dec6-4ec0-a9e0-34597a4a41c5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552019457167,
        "parent_id": "3967d134-877d-45b2-83d5-5534ba0b69a6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "user.js",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ":- Model file where schema is defined"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "user.js",
            "AttrFlags": 1
          },
          {
            "Text": ":- Model file where schema is defined"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552019457167,
        "id": "6b485850-6156-48e0-b35e-6068af2e7d79",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552019457167,
        "parent_id": "3967d134-877d-45b2-83d5-5534ba0b69a6",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "var mongoose = require('mongoose');\nvar Schema = mongoose.Schema;\n\n//Schema for User\nvar UserSchema = new Schema({\n    name: {\n        type: String,\n    //    required: true\n    },\n    email: {\n        type: String\n    },\n    password: {\n        type: String,\n        //required: true\n    },\n    dob: {\n        type: Date,\n        //required: true\n    },\n    gender: {\n        type: String, // Male/Female\n    //    required: true\n    }\n});\n\n//Define the model for User\nvar User;\nif(mongoose.models.User)\n    User = mongoose.model('User');\nelse\n    User = mongoose.model('User', UserSchema);\n\n//Export the User Model\nmodule.exports = User;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "var mongoose = require('mongoose');\nvar Schema = mongoose.Schema;\n\n//Schema for User\nvar UserSchema = new Schema({\n    name: {\n        type: String,\n    //    required: true\n    },\n    email: {\n        type: String\n    },\n    password: {\n        type: String,\n        //required: true\n    },\n    dob: {\n        type: Date,\n        //required: true\n    },\n    gender: {\n        type: String, // Male/Female\n    //    required: true\n    }\n});\n\n//Define the model for User\nvar User;\nif(mongoose.models.User)\n    User = mongoose.model('User');\nelse\n    User = mongoose.model('User', UserSchema);\n\n//Export the User Model\nmodule.exports = User;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552019457167,
        "id": "05b5dbaf-dee3-4838-bd37-70450d95b89a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552019457167,
        "parent_id": "3967d134-877d-45b2-83d5-5534ba0b69a6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "userController",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ":- This file contains the function for user signUp"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "userController",
            "AttrFlags": 1
          },
          {
            "Text": ":- This file contains the function for user signUp"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552019457167,
        "id": "3dc53f3b-cdf5-4828-932a-2123dd5619b9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552019457167,
        "parent_id": "3967d134-877d-45b2-83d5-5534ba0b69a6",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "var User = require('../models/user');\nvar crypto = require('crypto');\n\n//Controller for User\nvar UserController = {\n\n    //Create a User\n    create: function(req, res){\n        var repassword = req.body.repassword;\n        var password = req.body.password;\n        var userEmail = req.body.email;\n\n        //Check if the email address already exists\n        User.find({\"email\": userEmail}, function(err, usr){\n            if(usr.length \u003e 0){\n                //Email Exists\n                \n                res.json('Email already exists');\n                return;\n            }\n            else\n            {\n                //New Email\n                \n                //Check for same passwords\n                if(password != repassword){\n                    res.json('Passwords does not match');\n                    return;\n                }\n\n                //Generate Password hash based on sha1\n                var shasum = crypto.createHash('sha1');\n                shasum.update(req.body.password);\n                var passwordHash = shasum.digest('hex');\n\n                //Create User\n                var user = new User();\n                user.name = req.body.name;\n                user.email = req.body.email;\n                user.password = passwordHash;\n                user.dob = Date.parse(req.body.dob) || \"\";\n                user.gender = req.body.gender;\n\n                //Validate the User\n                user.validate(function(err){\n                    if(err){\n                        res.json(err);\n                        return;\n                    }else{\n                        //Finally save the User\n                        user.save(function(err){\n                            if(err)\n                            {\n                                res.json(err);\n                                return;\n                            }\n                \n                            //Remove Password before sending User details\n                            user.password = undefined;\n                            res.json(user);\n                            return;\n                        });\n                    }\n                });\n             }\n        });\n    }\n\n}\n\nmodule.exports = UserController;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "var User = require('../models/user');\nvar crypto = require('crypto');\n\n//Controller for User\nvar UserController = {\n\n    //Create a User\n    create: function(req, res){\n        var repassword = req.body.repassword;\n        var password = req.body.password;\n        var userEmail = req.body.email;\n\n        //Check if the email address already exists\n        User.find({\"email\": userEmail}, function(err, usr){\n            if(usr.length \u003e 0){\n                //Email Exists\n                \n                res.json('Email already exists');\n                return;\n            }\n            else\n            {\n                //New Email\n                \n                //Check for same passwords\n                if(password != repassword){\n                    res.json('Passwords does not match');\n                    return;\n                }\n\n                //Generate Password hash based on sha1\n                var shasum = crypto.createHash('sha1');\n                shasum.update(req.body.password);\n                var passwordHash = shasum.digest('hex');\n\n                //Create User\n                var user = new User();\n                user.name = req.body.name;\n                user.email = req.body.email;\n                user.password = passwordHash;\n                user.dob = Date.parse(req.body.dob) || \"\";\n                user.gender = req.body.gender;\n\n                //Validate the User\n                user.validate(function(err){\n                    if(err){\n                        res.json(err);\n                        return;\n                    }else{\n                        //Finally save the User\n                        user.save(function(err){\n                            if(err)\n                            {\n                                res.json(err);\n                                return;\n                            }\n                \n                            //Remove Password before sending User details\n                            user.password = undefined;\n                            res.json(user);\n                            return;\n                        });\n                    }\n                });\n             }\n        });\n    }\n\n}\n\nmodule.exports = UserController;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552019457167,
        "id": "d688c9cb-24c7-4238-a39f-ffb7d8ee821e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552019457167,
        "parent_id": "3967d134-877d-45b2-83d5-5534ba0b69a6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "userRoutes.js",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ":- This the route for userController"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "userRoutes.js",
            "AttrFlags": 1
          },
          {
            "Text": ":- This the route for userController"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552019457167,
        "id": "859e255c-8290-4a50-bce7-6275d682ef65",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552019457167,
        "parent_id": "3967d134-877d-45b2-83d5-5534ba0b69a6",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "var express = require('express');\nvar UserController = require('../controllers/userController');\n\n//Routes for User\nvar UserRoutes = function(app)\n{\n    var router = express.Router();\n\nrouter.route('/users')\n    .post(UserController.create);\n\nreturn router;\n\n}\n\nmodule.exports = UserRoutes;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "var express = require('express');\nvar UserController = require('../controllers/userController');\n\n//Routes for User\nvar UserRoutes = function(app)\n{\n    var router = express.Router();\n\nrouter.route('/users')\n    .post(UserController.create);\n\nreturn router;\n\n}\n\nmodule.exports = UserRoutes;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552019457167,
        "id": "f60481be-dc65-46d9-a382-3e5c7b2390cc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552019457167,
        "parent_id": "3967d134-877d-45b2-83d5-5534ba0b69a6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The above example may appear too big but if a beginner at node.js with a little blend of express knowledge tries to go through this will find it easy and really helpful."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The above example may appear too big but if a beginner at node.js with a little blend of express knowledge tries to go through this will find it easy and really helpful."
          }
        ]
      }
    ],
    "title": "Basic program for signup",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}