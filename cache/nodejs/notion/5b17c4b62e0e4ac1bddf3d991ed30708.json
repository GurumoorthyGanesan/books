{
  "ID": "5b17c4b6-2e0e-4ac1-bddf-3d991ed30708",
  "Root": {
    "alive": true,
    "content": [
      "5a694859-02cd-4f05-9e72-c2d02f269346",
      "7af2755d-e0de-4a95-b216-f35d0c50ca85"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552019392493,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "5b17c4b6-2e0e-4ac1-bddf-3d991ed30708",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552019392493,
    "parent_id": "386448f0-e55f-4249-8944-8777876a5e7f",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "w Express jQuery and Jade"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552019392490,
        "id": "5a694859-02cd-4f05-9e72-c2d02f269346",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552019392490,
        "parent_id": "5b17c4b6-2e0e-4ac1-bddf-3d991ed30708",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "//'client.jade'    \n\n//a button is placed down; similar in HTML\nbutton(type='button', id='send_by_button') Modify data\n    \n    #modify Lorem ipsum Sender\n    \n    //loading jQuery; it can be done from an online source as well\n    script(src='./js/jquery-2.2.0.min.js')\n\n    //AJAX request using jQuery\n    script\n        $(function () {\n            $('#send_by_button').click(function (e) {\n                e.preventDefault();\n                \n                //test: the text within brackets should appear when clicking on said button\n                //window.alert('You clicked on me.  - jQuery');\n        \n                //a variable and a JSON initialized in the code\n                var predeclared = \"Katamori\";\n                var data = {\n                    Title: \"Name_SenderTest\",\n                    Nick: predeclared,\n                    FirstName: \"Zoltan\",\n                    Surname: \"Schmidt\"\n                };\n                \n                //an AJAX request with given parameters\n                $.ajax({\n                    type: 'POST',\n                    data: JSON.stringify(data),\n                    contentType: 'application/json',\n                    url: 'http://localhost:7776/domaintest',\n\n                    //on success, received data is used as 'data' function input\n                    success: function (data) {\n                        window.alert('Request sent; data received.');\n        \n                        var jsonstr = JSON.stringify(data);\n                        var jsonobj = JSON.parse(jsonstr);\n                        \n                        //if the 'nick' member of the JSON does not equal to the predeclared string (as it was initialized), then the backend script was executed, meaning that communication has been established\n                        if(data.Nick != predeclared){\n                            document.getElementById(\"modify\").innerHTML = \"JSON changed!\\n\" + jsonstr;\n                        };\n        \n                    }\n                });\n            });\n            });\n\n//'domaintest_route.js'\n\nvar express = require('express');\nvar router = express.Router();\n\n//an Express router listening to GET requests - in this case, it's empty, meaning that nothing is displayed when you reach 'localhost/domaintest'\nrouter.get('/', function(req, res, next) {\n});\n\n//same for POST requests - notice, how the AJAX request above was defined as POST \nrouter.post('/', function(req, res) {\n    res.setHeader('Content-Type', 'application/json');\n\n    //content generated here\n    var some_json = {\n        Title: \"Test\",\n        Item: \"Crate\"\n    };\n\n    var result = JSON.stringify(some_json);\n\n    //content got 'client.jade'\n    var sent_data = req.body;\n    sent_data.Nick = \"ttony33\";\n\n    res.send(sent_data);\n\n});\n\n\nmodule.exports = router;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "//'client.jade'    \n\n//a button is placed down; similar in HTML\nbutton(type='button', id='send_by_button') Modify data\n    \n    #modify Lorem ipsum Sender\n    \n    //loading jQuery; it can be done from an online source as well\n    script(src='./js/jquery-2.2.0.min.js')\n\n    //AJAX request using jQuery\n    script\n        $(function () {\n            $('#send_by_button').click(function (e) {\n                e.preventDefault();\n                \n                //test: the text within brackets should appear when clicking on said button\n                //window.alert('You clicked on me.  - jQuery');\n        \n                //a variable and a JSON initialized in the code\n                var predeclared = \"Katamori\";\n                var data = {\n                    Title: \"Name_SenderTest\",\n                    Nick: predeclared,\n                    FirstName: \"Zoltan\",\n                    Surname: \"Schmidt\"\n                };\n                \n                //an AJAX request with given parameters\n                $.ajax({\n                    type: 'POST',\n                    data: JSON.stringify(data),\n                    contentType: 'application/json',\n                    url: 'http://localhost:7776/domaintest',\n\n                    //on success, received data is used as 'data' function input\n                    success: function (data) {\n                        window.alert('Request sent; data received.');\n        \n                        var jsonstr = JSON.stringify(data);\n                        var jsonobj = JSON.parse(jsonstr);\n                        \n                        //if the 'nick' member of the JSON does not equal to the predeclared string (as it was initialized), then the backend script was executed, meaning that communication has been established\n                        if(data.Nick != predeclared){\n                            document.getElementById(\"modify\").innerHTML = \"JSON changed!\\n\" + jsonstr;\n                        };\n        \n                    }\n                });\n            });\n            });\n\n//'domaintest_route.js'\n\nvar express = require('express');\nvar router = express.Router();\n\n//an Express router listening to GET requests - in this case, it's empty, meaning that nothing is displayed when you reach 'localhost/domaintest'\nrouter.get('/', function(req, res, next) {\n});\n\n//same for POST requests - notice, how the AJAX request above was defined as POST \nrouter.post('/', function(req, res) {\n    res.setHeader('Content-Type', 'application/json');\n\n    //content generated here\n    var some_json = {\n        Title: \"Test\",\n        Item: \"Crate\"\n    };\n\n    var result = JSON.stringify(some_json);\n\n    //content got 'client.jade'\n    var sent_data = req.body;\n    sent_data.Nick = \"ttony33\";\n\n    res.send(sent_data);\n\n});\n\n\nmodule.exports = router;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552019392492,
        "id": "7af2755d-e0de-4a95-b216-f35d0c50ca85",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552019392492,
        "parent_id": "5b17c4b6-2e0e-4ac1-bddf-3d991ed30708",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "//based on a personally used gist: https://gist.github.com/Katamori/5c9850f02e4baf6e9896"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "//based on a personally used gist: https://gist.github.com/Katamori/5c9850f02e4baf6e9896"
          }
        ]
      }
    ],
    "title": "w Express jQuery and Jade",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}