{
  "ID": "5cd4092c-7b9e-4818-8a4c-8cef82e61ab1",
  "Root": {
    "alive": true,
    "content": [
      "3e6e8be8-f4a2-4e13-9e4b-f49a3cabadd2",
      "ded9c97c-bb1d-412e-8a27-013284134ba6",
      "ce3ca7e4-d561-472a-9761-6b78ca54b7a6",
      "bd254a6e-958a-47c9-9e18-1ab2e515b82f",
      "67e1e58a-647c-4bf8-80f7-d80dfd9e87f8",
      "00021262-be2f-4bbe-8f61-5eaae43a0fea",
      "5c279971-5676-44ec-bdb7-7bc79608a158",
      "9e92c752-f14d-418c-b593-cdc13857473c",
      "b254b1c5-3259-44f1-b432-f93fdee2de92",
      "336cdaff-a57d-4960-8315-aac1434efc8f",
      "37117288-cd6c-4e8b-a864-174c4b191f49",
      "6a5ebe74-835b-4751-b17d-9a75265e125f",
      "e1a0a7fa-7c10-42e5-b627-4a455d161832",
      "7f49213e-ccd4-409c-aa20-ad2dd227398e",
      "77d0a459-5f10-4306-8e85-9860f273bbff"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552017998321,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "5cd4092c-7b9e-4818-8a4c-8cef82e61ab1",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552017998321,
    "parent_id": "f808cbc7-ed6a-4f29-af39-4dbab21890cb",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Handling Exception In Node.Js"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552017998315,
        "id": "3e6e8be8-f4a2-4e13-9e4b-f49a3cabadd2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552017998315,
        "parent_id": "5cd4092c-7b9e-4818-8a4c-8cef82e61ab1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Node.js has 3 basic ways to handle exceptions/errors:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Node.js has 3 basic ways to handle exceptions/errors:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552017998318,
        "id": "ded9c97c-bb1d-412e-8a27-013284134ba6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552017998318,
        "parent_id": "5cd4092c-7b9e-4818-8a4c-8cef82e61ab1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "try",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "-"
            ],
            [
              "catch",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " block"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "try",
            "AttrFlags": 1
          },
          {
            "Text": "-"
          },
          {
            "Text": "catch",
            "AttrFlags": 1
          },
          {
            "Text": " block"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552017998318,
        "id": "ce3ca7e4-d561-472a-9761-6b78ca54b7a6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552017998318,
        "parent_id": "5cd4092c-7b9e-4818-8a4c-8cef82e61ab1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "error",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " as the first argument to a "
            ],
            [
              "callback",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "error",
            "AttrFlags": 1
          },
          {
            "Text": " as the first argument to a "
          },
          {
            "Text": "callback",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552017998319,
        "id": "bd254a6e-958a-47c9-9e18-1ab2e515b82f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552017998319,
        "parent_id": "5cd4092c-7b9e-4818-8a4c-8cef82e61ab1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "emit",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " an "
            ],
            [
              "error",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " event using eventEmitter"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "emit",
            "AttrFlags": 2
          },
          {
            "Text": " an "
          },
          {
            "Text": "error",
            "AttrFlags": 1
          },
          {
            "Text": " event using eventEmitter"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552017998319,
        "id": "67e1e58a-647c-4bf8-80f7-d80dfd9e87f8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552017998319,
        "parent_id": "5cd4092c-7b9e-4818-8a4c-8cef82e61ab1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "try-catch",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " is used to catch the exceptions thrown from the synchronous code execution. If the caller (or the caller’s caller, …) used try/catch, then they can catch the error. If none of the callers had try-catch than the program crashes."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "try-catch",
            "AttrFlags": 1
          },
          {
            "Text": " is used to catch the exceptions thrown from the synchronous code execution. If the caller (or the caller’s caller, …) used try/catch, then they can catch the error. If none of the callers had try-catch than the program crashes."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552017998319,
        "id": "00021262-be2f-4bbe-8f61-5eaae43a0fea",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552017998319,
        "parent_id": "5cd4092c-7b9e-4818-8a4c-8cef82e61ab1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If using try-catch on an async operation and exception was thrown from callback of async method than it will not get caught by try-catch. To catch an exception from async operation callback, it is preferred to use "
            ],
            [
              "promises",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If using try-catch on an async operation and exception was thrown from callback of async method than it will not get caught by try-catch. To catch an exception from async operation callback, it is preferred to use "
          },
          {
            "Text": "promises",
            "AttrFlags": 4
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552017998319,
        "id": "5c279971-5676-44ec-bdb7-7bc79608a158",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552017998319,
        "parent_id": "5cd4092c-7b9e-4818-8a4c-8cef82e61ab1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Example to understand it better"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Example to understand it better"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552017998319,
        "id": "9e92c752-f14d-418c-b593-cdc13857473c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552017998319,
        "parent_id": "5cd4092c-7b9e-4818-8a4c-8cef82e61ab1",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// ** Example - 1  **\nfunction doSomeSynchronousOperation(req, res) {\n    if(req.body.username === ''){\n        throw new Error('User Name cannot be empty');\n    }  \n    return true;  \n}\n\n// calling the method above\ntry {\n    // synchronous code   \n    doSomeSynchronousOperation(req, res)    \ncatch(e) {\n    //exception handled here   \n    console.log(e.message);  \n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// ** Example - 1  **\nfunction doSomeSynchronousOperation(req, res) {\n    if(req.body.username === ''){\n        throw new Error('User Name cannot be empty');\n    }  \n    return true;  \n}\n\n// calling the method above\ntry {\n    // synchronous code   \n    doSomeSynchronousOperation(req, res)    \ncatch(e) {\n    //exception handled here   \n    console.log(e.message);  \n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552017998320,
        "id": "b254b1c5-3259-44f1-b432-f93fdee2de92",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552017998320,
        "parent_id": "5cd4092c-7b9e-4818-8a4c-8cef82e61ab1",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// ** Example - 2 **\nfunction doSomeAsynchronousOperation(req, res, cb) {\n    // imitating async operation\n    return setTimeout(function(){\n        cb(null, []);\n    },1000);\n}\n \ntry {\n    // asynchronous code   \n    doSomeAsynchronousOperation(req, res, function(err, rs){\n        throw new Error(\"async operation exception\");\n    })   \n} catch(e) {\n     // Exception will not get handled here\n     console.log(e.message);  \n}\n// The exception is unhandled and hence will cause application to break"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// ** Example - 2 **\nfunction doSomeAsynchronousOperation(req, res, cb) {\n    // imitating async operation\n    return setTimeout(function(){\n        cb(null, []);\n    },1000);\n}\n \ntry {\n    // asynchronous code   \n    doSomeAsynchronousOperation(req, res, function(err, rs){\n        throw new Error(\"async operation exception\");\n    })   \n} catch(e) {\n     // Exception will not get handled here\n     console.log(e.message);  \n}\n// The exception is unhandled and hence will cause application to break",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552017998320,
        "id": "336cdaff-a57d-4960-8315-aac1434efc8f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552017998320,
        "parent_id": "5cd4092c-7b9e-4818-8a4c-8cef82e61ab1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "callbacks",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " are mostly used in Node.js as callback delivers an event asynchronously. The user passes you a function (the callback), and you invoke it sometime later when the asynchronous operation completes."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "callbacks",
            "AttrFlags": 1
          },
          {
            "Text": " are mostly used in Node.js as callback delivers an event asynchronously. The user passes you a function (the callback), and you invoke it sometime later when the asynchronous operation completes."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552017998320,
        "id": "37117288-cd6c-4e8b-a864-174c4b191f49",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552017998320,
        "parent_id": "5cd4092c-7b9e-4818-8a4c-8cef82e61ab1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The usual pattern is that the callback is invoked as a "
            ],
            [
              "callback(err, result)",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ", where only one of err and result is non-null, depending on whether the operation succeeded or failed."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The usual pattern is that the callback is invoked as a "
          },
          {
            "Text": "callback(err, result)",
            "AttrFlags": 4
          },
          {
            "Text": ", where only one of err and result is non-null, depending on whether the operation succeeded or failed."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552017998320,
        "id": "6a5ebe74-835b-4751-b17d-9a75265e125f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552017998320,
        "parent_id": "5cd4092c-7b9e-4818-8a4c-8cef82e61ab1",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "function doSomeAsynchronousOperation(req, res, callback) {\n   setTimeout(function(){\n        return callback(new Error('User Name cannot be empty'));    \n   }, 1000);  \n   return true;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "function doSomeAsynchronousOperation(req, res, callback) {\n   setTimeout(function(){\n        return callback(new Error('User Name cannot be empty'));    \n   }, 1000);  \n   return true;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552017998320,
        "id": "e1a0a7fa-7c10-42e5-b627-4a455d161832",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552017998320,
        "parent_id": "5cd4092c-7b9e-4818-8a4c-8cef82e61ab1",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "doSomeAsynchronousOperation(req, res, function(err, result) {\n   if (err) {\n       //exception handled here \n       console.log(err.message);\n   }\n   \n   //do some stuff with valid data\n});"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "doSomeAsynchronousOperation(req, res, function(err, result) {\n   if (err) {\n       //exception handled here \n       console.log(err.message);\n   }\n   \n   //do some stuff with valid data\n});",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552017998320,
        "id": "7f49213e-ccd4-409c-aa20-ad2dd227398e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552017998320,
        "parent_id": "5cd4092c-7b9e-4818-8a4c-8cef82e61ab1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "emit",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " For more complicated cases, instead of using a callback, the function itself can return an EventEmitter object, and the caller would be expected to listen for error events on the emitter."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "emit",
            "AttrFlags": 1
          },
          {
            "Text": " For more complicated cases, instead of using a callback, the function itself can return an EventEmitter object, and the caller would be expected to listen for error events on the emitter."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552017998320,
        "id": "77d0a459-5f10-4306-8e85-9860f273bbff",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552017998320,
        "parent_id": "5cd4092c-7b9e-4818-8a4c-8cef82e61ab1",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "const EventEmitter = require('events');\n\nfunction doSomeAsynchronousOperation(req, res) {\n    let myEvent = new EventEmitter();\n\n    // runs asynchronously\n    setTimeout(function(){\n        myEvent.emit('error', new Error('User Name cannot be empty'));\n    }, 1000);\n\n    return myEvent;\n}\n\n// Invoke the function\nlet event = doSomeAsynchronousOperation(req, res);\n\nevent.on('error', function(err) {\n    console.log(err);\n});\n\nevent.on('done', function(result) {\n    console.log(result); // true\n});"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "const EventEmitter = require('events');\n\nfunction doSomeAsynchronousOperation(req, res) {\n    let myEvent = new EventEmitter();\n\n    // runs asynchronously\n    setTimeout(function(){\n        myEvent.emit('error', new Error('User Name cannot be empty'));\n    }, 1000);\n\n    return myEvent;\n}\n\n// Invoke the function\nlet event = doSomeAsynchronousOperation(req, res);\n\nevent.on('error', function(err) {\n    console.log(err);\n});\n\nevent.on('done', function(result) {\n    console.log(result); // true\n});",
        "code_language": "Plain Text"
      }
    ],
    "title": "Handling Exception In Node.Js",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}