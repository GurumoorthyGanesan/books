{
  "ID": "f2dbc609-e81e-4526-aa99-d6c5fce85855",
  "Root": {
    "alive": true,
    "content": [
      "9eb20f65-09e6-45b5-9f01-9db206646b4a"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552020282141,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "f2dbc609-e81e-4526-aa99-d6c5fce85855",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552020282141,
    "parent_id": "aff29832-6a94-41a3-95a4-bbd22ab2e1c2",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Example of LocalStrategy in passport.js"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552020282139,
        "id": "9eb20f65-09e6-45b5-9f01-9db206646b4a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552020282139,
        "parent_id": "f2dbc609-e81e-4526-aa99-d6c5fce85855",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "var passport = require('passport');\nvar LocalStrategy = require('passport-local').Strategy;\n\npassport.serializeUser(function(user, done) { //In serialize user you decide what to store in the session. Here I'm storing the user id only.\n  done(null, user.id);\n});\n\npassport.deserializeUser(function(id, done) { //Here you retrieve all the info of the user from the session storage using the user id stored in the session earlier using serialize user.\n  db.findById(id, function(err, user) {\n    done(err, user);\n    });\n});\n\npassport.use(new LocalStrategy(function(username, password, done) {\n    db.findOne({'username':username},function(err,student){\n        if(err)return done(err,{message:message});//wrong roll_number or password; \n        var pass_retrieved = student.pass_word;\n        bcrypt.compare(password, pass_retrieved, function(err3, correct) {\n          if(err3){\n            message = [{\"msg\": \"Incorrect Password!\"}];\n            return done(null,false,{message:message});  // wrong password\n          }       \n          if(correct){\n              return done(null,student);\n          } \n        });\n    });\n}));\n\napp.use(session({ secret: 'super secret' })); //to make passport remember the user on other pages too.(Read about session store. I used express-sessions.)\napp.use(passport.initialize());\napp.use(passport.session());\n\napp.post('/',passport.authenticate('local',{successRedirect:'/users' failureRedirect: '/'}),\n    function(req,res,next){\n});"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "var passport = require('passport');\nvar LocalStrategy = require('passport-local').Strategy;\n\npassport.serializeUser(function(user, done) { //In serialize user you decide what to store in the session. Here I'm storing the user id only.\n  done(null, user.id);\n});\n\npassport.deserializeUser(function(id, done) { //Here you retrieve all the info of the user from the session storage using the user id stored in the session earlier using serialize user.\n  db.findById(id, function(err, user) {\n    done(err, user);\n    });\n});\n\npassport.use(new LocalStrategy(function(username, password, done) {\n    db.findOne({'username':username},function(err,student){\n        if(err)return done(err,{message:message});//wrong roll_number or password; \n        var pass_retrieved = student.pass_word;\n        bcrypt.compare(password, pass_retrieved, function(err3, correct) {\n          if(err3){\n            message = [{\"msg\": \"Incorrect Password!\"}];\n            return done(null,false,{message:message});  // wrong password\n          }       \n          if(correct){\n              return done(null,student);\n          } \n        });\n    });\n}));\n\napp.use(session({ secret: 'super secret' })); //to make passport remember the user on other pages too.(Read about session store. I used express-sessions.)\napp.use(passport.initialize());\napp.use(passport.session());\n\napp.post('/',passport.authenticate('local',{successRedirect:'/users' failureRedirect: '/'}),\n    function(req,res,next){\n});",
        "code_language": "Plain Text"
      }
    ],
    "title": "Example of LocalStrategy in passport.js",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}