{
  "ID": "bfb92bb2-f68c-49a3-86b2-e5af1a50aee2",
  "Root": {
    "alive": true,
    "content": [
      "0f43b79e-443f-4451-b6e8-dfe8c4adf814"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552019481100,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "bfb92bb2-f68c-49a3-86b2-e5af1a50aee2",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552019481100,
    "parent_id": "8a470a5a-e085-4285-b053-7cc97da24b2c",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "A simple TCP server"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552019481100,
        "id": "0f43b79e-443f-4451-b6e8-dfe8c4adf814",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552019481100,
        "parent_id": "bfb92bb2-f68c-49a3-86b2-e5af1a50aee2",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// Include Nodejs' net module.\nconst Net = require('net');\n// The port on which the server is listening.\nconst port = 8080;\n\n// Use net.createServer() in your code. This is just for illustration purpose.\n// Create a new TCP server.\nconst server = new Net.Server();\n// The server listens to a socket for a client to make a connection request.\n// Think of a socket as an end point.\nserver.listen(port, function() {\n    console.log(`Server listening for connection requests on socket localhost:${port}`.);\n});\n\n// When a client requests a connection with the server, the server creates a new\n// socket dedicated to that client.\nserver.on('connection', function(socket) {\n    console.log('A new connection has been established.');\n\n    // Now that a TCP connection has been established, the server can send data to\n    // the client by writing to its socket.\n    socket.write('Hello, client.');\n\n    // The server can also receive data from the client by reading from its socket.\n    socket.on('data', function(chunk) {\n        console.log(`Data received from client: ${chunk.toString()`.});\n    });\n\n    // When the client requests to end the TCP connection with the server, the server\n    // ends the connection.\n    socket.on('end', function() {\n        console.log('Closing connection with the client');\n    });\n\n    // Don't forget to catch error, for your own sake.\n    socket.on('error', function(err) {\n        console.log(`Error: ${err}`);\n    });\n});"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// Include Nodejs' net module.\nconst Net = require('net');\n// The port on which the server is listening.\nconst port = 8080;\n\n// Use net.createServer() in your code. This is just for illustration purpose.\n// Create a new TCP server.\nconst server = new Net.Server();\n// The server listens to a socket for a client to make a connection request.\n// Think of a socket as an end point.\nserver.listen(port, function() {\n    console.log(`Server listening for connection requests on socket localhost:${port}`.);\n});\n\n// When a client requests a connection with the server, the server creates a new\n// socket dedicated to that client.\nserver.on('connection', function(socket) {\n    console.log('A new connection has been established.');\n\n    // Now that a TCP connection has been established, the server can send data to\n    // the client by writing to its socket.\n    socket.write('Hello, client.');\n\n    // The server can also receive data from the client by reading from its socket.\n    socket.on('data', function(chunk) {\n        console.log(`Data received from client: ${chunk.toString()`.});\n    });\n\n    // When the client requests to end the TCP connection with the server, the server\n    // ends the connection.\n    socket.on('end', function() {\n        console.log('Closing connection with the client');\n    });\n\n    // Don't forget to catch error, for your own sake.\n    socket.on('error', function(err) {\n        console.log(`Error: ${err}`);\n    });\n});",
        "code_language": "Plain Text"
      }
    ],
    "title": "A simple TCP server",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}