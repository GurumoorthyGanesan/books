{
  "ID": "e550fecf-9ecb-4e80-b289-bfdf0e1b015e",
  "Root": {
    "alive": true,
    "content": [
      "f5e3ce49-a574-44b4-8aff-21ef5db15caa",
      "746a43d8-9e9c-45dc-9e0f-542e564c86b8",
      "93b7bd38-b05f-4354-959f-72476dd3bb6f",
      "8f3c3bf3-5ec7-46db-a243-a373e93190c9",
      "dca99dbb-05f3-48b7-954a-2068ca477eba",
      "62a075cb-55ec-4b31-8f06-d3c0b4749e0f",
      "89587aec-d7c1-4258-be9a-40ff5ee084c9",
      "7b322139-c9ce-46cd-9a30-cce2e14abb14",
      "7a7878e6-4a12-444e-9f5d-2428b25d99eb",
      "6c736a8a-5d0d-4b3f-843c-b519e01752b4",
      "c9fb357b-6068-4b93-8514-6f265283a5df",
      "e1800287-60c6-49c2-ab60-9c67ecf73dd4",
      "7a830bf0-9d50-46a5-a142-ec8e95fbb928",
      "324c3918-e5e9-4154-893a-ed0dac960a48",
      "537af470-4ee9-43a2-aa05-cc8ed8fa7883",
      "d276a621-2a5d-49ce-b650-0b2436f23b6b",
      "43662c82-6189-41e5-8131-b53115b7b6ad"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552020266135,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "e550fecf-9ecb-4e80-b289-bfdf0e1b015e",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552020266135,
    "parent_id": "7b60ba32-ce98-44a6-b67b-24396d34de86",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "How the concept of event loop evolved."
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552020266118,
        "id": "f5e3ce49-a574-44b4-8aff-21ef5db15caa",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552020266118,
        "parent_id": "e550fecf-9ecb-4e80-b289-bfdf0e1b015e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Eventloop in pseudo code"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Eventloop in pseudo code"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552020266121,
        "id": "746a43d8-9e9c-45dc-9e0f-542e564c86b8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552020266121,
        "parent_id": "e550fecf-9ecb-4e80-b289-bfdf0e1b015e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "An event loop is a loop that waits for events and then reacts to those events"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "An event loop is a loop that waits for events and then reacts to those events"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552020266122,
        "id": "93b7bd38-b05f-4354-959f-72476dd3bb6f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552020266122,
        "parent_id": "e550fecf-9ecb-4e80-b289-bfdf0e1b015e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "while true:\n    wait for something to happen\n    react to whatever happened"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "while true:\n    wait for something to happen\n    react to whatever happened",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552020266122,
        "id": "8f3c3bf3-5ec7-46db-a243-a373e93190c9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552020266122,
        "parent_id": "e550fecf-9ecb-4e80-b289-bfdf0e1b015e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Example of a single-threaded HTTP server with no event loop"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Example of a single-threaded HTTP server with no event loop"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552020266122,
        "id": "dca99dbb-05f3-48b7-954a-2068ca477eba",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552020266122,
        "parent_id": "e550fecf-9ecb-4e80-b289-bfdf0e1b015e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "while true:\nsocket = wait for the next TCP connection\nread the HTTP request headers from (socket)\nfile_contents = fetch the requested file from disk\nwrite the HTTP response headers to (socket)\nwrite the (file_contents) to (socket)\nclose(socket)"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "while true:\nsocket = wait for the next TCP connection\nread the HTTP request headers from (socket)\nfile_contents = fetch the requested file from disk\nwrite the HTTP response headers to (socket)\nwrite the (file_contents) to (socket)\nclose(socket)",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552020266122,
        "id": "62a075cb-55ec-4b31-8f06-d3c0b4749e0f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552020266122,
        "parent_id": "e550fecf-9ecb-4e80-b289-bfdf0e1b015e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Here’s a simple form of a HTTP server which is a single threaded but no event loop. The problem here is that it waits until each request is finished before starting to process the next one. If it takes a while to read the HTTP request headers or to fetch the file from disk, we should be able to start processing the next request while we wait for that to finish."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Here’s a simple form of a HTTP server which is a single threaded but no event loop. The problem here is that it waits until each request is finished before starting to process the next one. If it takes a while to read the HTTP request headers or to fetch the file from disk, we should be able to start processing the next request while we wait for that to finish."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552020266122,
        "id": "89587aec-d7c1-4258-be9a-40ff5ee084c9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552020266122,
        "parent_id": "e550fecf-9ecb-4e80-b289-bfdf0e1b015e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The most common solution is to make the program multi-threaded."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The most common solution is to make the program multi-threaded."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552020266122,
        "id": "7b322139-c9ce-46cd-9a30-cce2e14abb14",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552020266122,
        "parent_id": "e550fecf-9ecb-4e80-b289-bfdf0e1b015e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Example of a multi-threaded HTTP server with no event loop"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Example of a multi-threaded HTTP server with no event loop"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552020266122,
        "id": "7a7878e6-4a12-444e-9f5d-2428b25d99eb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552020266122,
        "parent_id": "e550fecf-9ecb-4e80-b289-bfdf0e1b015e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "function handle_connection(socket):\n    read the HTTP request headers from (socket)\n    file_contents = fetch the requested file from disk\n    write the HTTP response headers to (socket)\n    write the (file_contents) to (socket)\n    close(socket)\nwhile true:\n    socket = wait for the next TCP connection\n    spawn a new thread doing handle_connection(socket)"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "function handle_connection(socket):\n    read the HTTP request headers from (socket)\n    file_contents = fetch the requested file from disk\n    write the HTTP response headers to (socket)\n    write the (file_contents) to (socket)\n    close(socket)\nwhile true:\n    socket = wait for the next TCP connection\n    spawn a new thread doing handle_connection(socket)",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552020266123,
        "id": "6c736a8a-5d0d-4b3f-843c-b519e01752b4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552020266123,
        "parent_id": "e550fecf-9ecb-4e80-b289-bfdf0e1b015e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Now we have made our little HTTP server multi threaded. This way, we can immediately move on to the next request because the current request is running in a background thread. Many servers, including Apache, use this approach."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Now we have made our little HTTP server multi threaded. This way, we can immediately move on to the next request because the current request is running in a background thread. Many servers, including Apache, use this approach."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552020266123,
        "id": "c9fb357b-6068-4b93-8514-6f265283a5df",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552020266123,
        "parent_id": "e550fecf-9ecb-4e80-b289-bfdf0e1b015e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "But it’s not perfect. One limitation is that you can only spawn so many threads. For workloads where you have a huge number of connections, but each connection only requires attention every once in a while, the multi-threaded model won’t perform very well. The solution for those cases is to use an event loop:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "But it’s not perfect. One limitation is that you can only spawn so many threads. For workloads where you have a huge number of connections, but each connection only requires attention every once in a while, the multi-threaded model won’t perform very well. The solution for those cases is to use an event loop:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552020266123,
        "id": "e1800287-60c6-49c2-ab60-9c67ecf73dd4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552020266123,
        "parent_id": "e550fecf-9ecb-4e80-b289-bfdf0e1b015e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Example of a HTTP server with event loop"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Example of a HTTP server with event loop"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552020266123,
        "id": "7a830bf0-9d50-46a5-a142-ec8e95fbb928",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552020266123,
        "parent_id": "e550fecf-9ecb-4e80-b289-bfdf0e1b015e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "while true:\n    event = wait for the next event to happen\n    if (event.type == NEW_TCP_CONNECTION):\n        conn = new Connection\n        conn.socket = event.socket\n        start reading HTTP request headers from (conn.socket) with userdata = (conn)\n    else if (event.type == FINISHED_READING_FROM_SOCKET):\n        conn = event.userdata\n        start fetching the requested file from disk with userdata = (conn)\n    else if (event.type == FINISHED_READING_FROM_DISK):\n        conn = event.userdata\n        conn.file_contents = the data we fetched from disk\n        conn.current_state = \"writing headers\"\n        start writing the HTTP response headers to (conn.socket) with userdata = (conn)\n    else if (event.type == FINISHED_WRITING_TO_SOCKET):\n        conn = event.userdata\n        if (conn.current_state == \"writing headers\"):\n            conn.current_state = \"writing file contents\"\n            start writing (conn.file_contents) to (conn.socket) with userdata = (conn)\n        else if (conn.current_state == \"writing file contents\"):\n            close(conn.socket)"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "while true:\n    event = wait for the next event to happen\n    if (event.type == NEW_TCP_CONNECTION):\n        conn = new Connection\n        conn.socket = event.socket\n        start reading HTTP request headers from (conn.socket) with userdata = (conn)\n    else if (event.type == FINISHED_READING_FROM_SOCKET):\n        conn = event.userdata\n        start fetching the requested file from disk with userdata = (conn)\n    else if (event.type == FINISHED_READING_FROM_DISK):\n        conn = event.userdata\n        conn.file_contents = the data we fetched from disk\n        conn.current_state = \"writing headers\"\n        start writing the HTTP response headers to (conn.socket) with userdata = (conn)\n    else if (event.type == FINISHED_WRITING_TO_SOCKET):\n        conn = event.userdata\n        if (conn.current_state == \"writing headers\"):\n            conn.current_state = \"writing file contents\"\n            start writing (conn.file_contents) to (conn.socket) with userdata = (conn)\n        else if (conn.current_state == \"writing file contents\"):\n            close(conn.socket)",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552020266123,
        "id": "324c3918-e5e9-4154-893a-ed0dac960a48",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552020266123,
        "parent_id": "e550fecf-9ecb-4e80-b289-bfdf0e1b015e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Hopefully this pseudocode is intelligible. Here’s what’s going on: We wait for things to happen. Whenever a new connection is created or an existing connection needs our attention, we go deal with it, then go back to waiting. That way, we perform well when there are many connections and each one only rarely requires attention."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Hopefully this pseudocode is intelligible. Here’s what’s going on: We wait for things to happen. Whenever a new connection is created or an existing connection needs our attention, we go deal with it, then go back to waiting. That way, we perform well when there are many connections and each one only rarely requires attention."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552020266135,
        "id": "537af470-4ee9-43a2-aa05-cc8ed8fa7883",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552020266135,
        "parent_id": "e550fecf-9ecb-4e80-b289-bfdf0e1b015e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In a real application (not pseudocode) running on Linux, the “wait for the next event to happen” part would be implemented by calling the poll() or epoll() system call. The “start reading/writing something to a socket” parts would be implemented by calling the recv() or send() system calls in non-blocking mode."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In a real application (not pseudocode) running on Linux, the “wait for the next event to happen” part would be implemented by calling the poll() or epoll() system call. The “start reading/writing something to a socket” parts would be implemented by calling the recv() or send() system calls in non-blocking mode."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552020266135,
        "id": "d276a621-2a5d-49ce-b650-0b2436f23b6b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552020266135,
        "parent_id": "e550fecf-9ecb-4e80-b289-bfdf0e1b015e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Reference:",
              [
                [
                  "i"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Reference:",
            "AttrFlags": 4
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552020266135,
        "id": "43662c82-6189-41e5-8131-b53115b7b6ad",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552020266135,
        "parent_id": "e550fecf-9ecb-4e80-b289-bfdf0e1b015e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "[1]. “How does an event loop work?” [Online]. Available : https://www.quora.com/How-does-an-event-loop-work"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "[1]. “How does an event loop work?” [Online]. Available : https://www.quora.com/How-does-an-event-loop-work"
          }
        ]
      }
    ],
    "title": "How the concept of event loop evolved.",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}