{
  "ID": "4bca5b05-6f08-47fc-857e-9bd58b297e03",
  "Root": {
    "alive": true,
    "content": [
      "32ac6f8d-9314-408a-bcbd-82894d90ef7c",
      "ffa87920-b726-4803-bfc3-95f42d1d45ae",
      "7f88acb6-4ab5-48a4-9bde-73476ab8860c",
      "0ae4c8d3-47fb-4ed1-83f6-1cd78ae6a6a5",
      "d55db330-f408-45fd-9155-b1c9470438ca",
      "99ad5fc0-63e2-418b-becc-a496c1d16918",
      "ff9c3ed3-e582-4909-9d61-1dff382b4b74"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552018254398,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "4bca5b05-6f08-47fc-857e-9bd58b297e03",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552018254398,
    "parent_id": "ecaf025e-b182-47ec-a1fd-bc34897b9351",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Read Data from TextFile with Streams"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552018254394,
        "id": "32ac6f8d-9314-408a-bcbd-82894d90ef7c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552018254394,
        "parent_id": "4bca5b05-6f08-47fc-857e-9bd58b297e03",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "I/O in node is asynchronous, so interacting with the disk and network involves passing callbacks to functions. You might be tempted to write code that serves up a file from disk like this:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "I/O in node is asynchronous, so interacting with the disk and network involves passing callbacks to functions. You might be tempted to write code that serves up a file from disk like this:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552018254397,
        "id": "ffa87920-b726-4803-bfc3-95f42d1d45ae",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552018254397,
        "parent_id": "4bca5b05-6f08-47fc-857e-9bd58b297e03",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "var http = require('http');\nvar fs = require('fs');\n\nvar server = http.createServer(function (req, res) {\n    fs.readFile(__dirname + '/data.txt', function (err, data) {\n        res.end(data);\n    });\n});\nserver.listen(8000);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "var http = require('http');\nvar fs = require('fs');\n\nvar server = http.createServer(function (req, res) {\n    fs.readFile(__dirname + '/data.txt', function (err, data) {\n        res.end(data);\n    });\n});\nserver.listen(8000);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552018254397,
        "id": "7f88acb6-4ab5-48a4-9bde-73476ab8860c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552018254397,
        "parent_id": "4bca5b05-6f08-47fc-857e-9bd58b297e03",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This code works but it’s bulky and buffers up the entire data.txt file into memory for every request before writing the result back to clients. If data.txt is very large, your program could start eating a lot of memory as it serves lots of users concurrently, particularly for users on slow connections."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This code works but it’s bulky and buffers up the entire data.txt file into memory for every request before writing the result back to clients. If data.txt is very large, your program could start eating a lot of memory as it serves lots of users concurrently, particularly for users on slow connections."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552018254397,
        "id": "0ae4c8d3-47fb-4ed1-83f6-1cd78ae6a6a5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552018254397,
        "parent_id": "4bca5b05-6f08-47fc-857e-9bd58b297e03",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The user experience is poor too because users will need to wait for the whole file to be buffered into memory on your server before they can start receiving any contents."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The user experience is poor too because users will need to wait for the whole file to be buffered into memory on your server before they can start receiving any contents."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552018254398,
        "id": "d55db330-f408-45fd-9155-b1c9470438ca",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552018254398,
        "parent_id": "4bca5b05-6f08-47fc-857e-9bd58b297e03",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Luckily both of the (req, res) arguments are streams, which means we can write this in a much better way using fs.createReadStream() instead of fs.readFile():"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Luckily both of the (req, res) arguments are streams, which means we can write this in a much better way using fs.createReadStream() instead of fs.readFile():"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552018254398,
        "id": "99ad5fc0-63e2-418b-becc-a496c1d16918",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552018254398,
        "parent_id": "4bca5b05-6f08-47fc-857e-9bd58b297e03",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "var http = require('http');\nvar fs = require('fs');\n\nvar server = http.createServer(function (req, res) {\n    var stream = fs.createReadStream(__dirname + '/data.txt');\n    stream.pipe(res);\n});\nserver.listen(8000);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "var http = require('http');\nvar fs = require('fs');\n\nvar server = http.createServer(function (req, res) {\n    var stream = fs.createReadStream(__dirname + '/data.txt');\n    stream.pipe(res);\n});\nserver.listen(8000);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552018254398,
        "id": "ff9c3ed3-e582-4909-9d61-1dff382b4b74",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552018254398,
        "parent_id": "4bca5b05-6f08-47fc-857e-9bd58b297e03",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Here .pipe() takes care of listening for ‘data’ and ‘end’ events from the fs.createReadStream(). This code is not only cleaner, but now the data.txt file will be written to clients one chunk at a time immediately as they are received from the disk."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Here .pipe() takes care of listening for ‘data’ and ‘end’ events from the fs.createReadStream(). This code is not only cleaner, but now the data.txt file will be written to clients one chunk at a time immediately as they are received from the disk."
          }
        ]
      }
    ],
    "title": "Read Data from TextFile with Streams",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}