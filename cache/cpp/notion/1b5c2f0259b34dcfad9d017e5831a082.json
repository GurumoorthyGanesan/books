{
  "ID": "1b5c2f02-59b3-4dcf-ad9d-017e5831a082",
  "Root": {
    "alive": true,
    "content": [
      "62bc2348-974d-417e-b572-dacce0bc3977",
      "01ed76b5-5e84-44aa-83ac-fbfe987c0bfd",
      "828f1179-4b2d-4215-8a57-2df9f1d2c4b5",
      "20ac7a59-305e-4b5c-bf23-f3a3080449b2",
      "f9561636-c22c-454f-babe-14e7a2204cb8",
      "701bcf35-c16f-4282-9d8d-69d56591a780",
      "db98eb2c-368c-4b60-8367-15871fe4eb76",
      "1df20e87-fad4-490b-a83a-81a703d52b11"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550523388492,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "1b5c2f02-59b3-4dcf-ad9d-017e5831a082",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551687391418,
    "parent_id": "106e396c-5cd1-4e4b-a70c-30ba85edca56",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Using std nth element To Find The Median Or Other Quantiles"
        ]
      ]
    },
    "type": "page",
    "version": 4,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523388490,
        "id": "62bc2348-974d-417e-b572-dacce0bc3977",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523388491,
        "parent_id": "1b5c2f02-59b3-4dcf-ad9d-017e5831a082",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "std::nth_element",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://en.cppreference.com/w/cpp/algorithm/nth_element"
                ]
              ]
            ],
            [
              " algorithm takes three iterators: an iterator to the beginning, "
            ],
            [
              "n",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              "th position, and end. Once the function returns, the "
            ],
            [
              "n",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              "th element (by order) will be the "
            ],
            [
              "n",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              "th smallest element. (The function has more elaborate overloads, e.g., some taking comparison functors; see the above link for all the variations.)"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "std::nth_element",
            "AttrFlags": 2,
            "Link": "http://en.cppreference.com/w/cpp/algorithm/nth_element"
          },
          {
            "Text": " algorithm takes three iterators: an iterator to the beginning, "
          },
          {
            "Text": "n",
            "AttrFlags": 4
          },
          {
            "Text": "th position, and end. Once the function returns, the "
          },
          {
            "Text": "n",
            "AttrFlags": 4
          },
          {
            "Text": "th element (by order) will be the "
          },
          {
            "Text": "n",
            "AttrFlags": 4
          },
          {
            "Text": "th smallest element. (The function has more elaborate overloads, e.g., some taking comparison functors; see the above link for all the variations.)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523388491,
        "id": "01ed76b5-5e84-44aa-83ac-fbfe987c0bfd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523388491,
        "parent_id": "1b5c2f02-59b3-4dcf-ad9d-017e5831a082",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " This function is very efficient - it has linear complexity."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note",
            "AttrFlags": 1
          },
          {
            "Text": " This function is very efficient - it has linear complexity."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523388491,
        "id": "828f1179-4b2d-4215-8a57-2df9f1d2c4b5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523388491,
        "parent_id": "1b5c2f02-59b3-4dcf-ad9d-017e5831a082",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For the sake of this example, let’s define the median of a sequence of length "
            ],
            [
              "n",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " as the element that would be in position ⌈n / 2⌉. For example, the median of a sequence of length 5 is the 3rd smallest element, and so is the median of a sequence of length 6."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For the sake of this example, let’s define the median of a sequence of length "
          },
          {
            "Text": "n",
            "AttrFlags": 4
          },
          {
            "Text": " as the element that would be in position ⌈n / 2⌉. For example, the median of a sequence of length 5 is the 3rd smallest element, and so is the median of a sequence of length 6."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523388491,
        "id": "20ac7a59-305e-4b5c-bf23-f3a3080449b2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523388491,
        "parent_id": "1b5c2f02-59b3-4dcf-ad9d-017e5831a082",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To use this function to find the median, we can use the following. Say we start with"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To use this function to find the median, we can use the following. Say we start with"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523388491,
        "id": "f9561636-c22c-454f-babe-14e7a2204cb8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523388491,
        "parent_id": "1b5c2f02-59b3-4dcf-ad9d-017e5831a082",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "std::vector\u003cint\u003e v{5, 1, 2, 3, 4};    \n\nstd::vector\u003cint\u003e::iterator b = v.begin();\nstd::vector\u003cint\u003e::iterator e = v.end();\n\nstd::vector\u003cint\u003e::iterator med = b;\nstd::advance(med, v.size() / 2); \n\n// This makes the 2nd position hold the median.\nstd::nth_element(b, med, e);    \n\n// The median is now at v[2]."
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "std::vector\u003cint\u003e v{5, 1, 2, 3, 4};    \n\nstd::vector\u003cint\u003e::iterator b = v.begin();\nstd::vector\u003cint\u003e::iterator e = v.end();\n\nstd::vector\u003cint\u003e::iterator med = b;\nstd::advance(med, v.size() / 2); \n\n// This makes the 2nd position hold the median.\nstd::nth_element(b, med, e);    \n\n// The median is now at v[2].",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523388492,
        "id": "701bcf35-c16f-4282-9d8d-69d56591a780",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523388492,
        "parent_id": "1b5c2f02-59b3-4dcf-ad9d-017e5831a082",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To find the "
            ],
            [
              "p",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              "th "
            ],
            [
              "quantile",
              [
                [
                  "a",
                  "https://en.wikipedia.org/wiki/Quantile"
                ]
              ]
            ],
            [
              ", we would change some of the lines above:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To find the "
          },
          {
            "Text": "p",
            "AttrFlags": 4
          },
          {
            "Text": "th "
          },
          {
            "Text": "quantile",
            "Link": "https://en.wikipedia.org/wiki/Quantile"
          },
          {
            "Text": ", we would change some of the lines above:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523388492,
        "id": "db98eb2c-368c-4b60-8367-15871fe4eb76",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523388492,
        "parent_id": "1b5c2f02-59b3-4dcf-ad9d-017e5831a082",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "const std::size_t pos = p * std::distance(b, e);\n\nstd::advance(nth, pos);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "const std::size_t pos = p * std::distance(b, e);\n\nstd::advance(nth, pos);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523388492,
        "id": "1df20e87-fad4-490b-a83a-81a703d52b11",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523388492,
        "parent_id": "1b5c2f02-59b3-4dcf-ad9d-017e5831a082",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "and look for the quantile at position "
            ],
            [
              "pos",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "and look for the quantile at position "
          },
          {
            "Text": "pos",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      }
    ],
    "title": "Using std nth element To Find The Median Or Other Quantiles",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}