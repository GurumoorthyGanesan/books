{
  "ID": "9000a6be-4e4b-4eac-9ab8-80243a05a262",
  "Root": {
    "alive": true,
    "content": [
      "d4f686c4-070a-4d62-8df1-c846899ea9e4",
      "34e9f72d-8f4b-4ebd-b401-3bceb0663c7b",
      "c14feb9b-247e-4280-b82a-480ea42c9fb5",
      "090f31e8-7cc4-4bab-ae2e-ce7d57742a40",
      "464b4a45-10f6-4cc9-91c5-9ba456460f9e",
      "a3198ffc-0ed1-4c4e-8107-d9766e218185",
      "4cea3fc6-5ee0-44cf-a5cc-0906b2ee25f5",
      "7019d443-bf20-459c-b4b8-be51eb5614b6",
      "dc8ed0a2-673b-4d00-8d21-506d3084871d",
      "d4a14490-a8aa-418a-9cce-9a445ce4dc42",
      "e550b339-a330-46db-b4cf-ddf83cf1f2a9",
      "4d5bfdfc-45f0-4254-acd5-f26ef661c165",
      "2c4430fe-624c-4199-8658-7c56486634f7",
      "e6451e05-be8a-4ddb-a5cd-fd74aab3ffdd",
      "d6256bef-7d9c-4311-93ce-1ba15fc6b3b3",
      "0def4428-dfb6-4844-8a5e-95bab94c2a02",
      "878966c3-03ba-451b-9652-389d05614542"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522048676,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "9000a6be-4e4b-4eac-9ab8-80243a05a262",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552343760000,
    "parent_id": "8655f492-9c51-4f68-ad52-8b6c1e02a277",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "vector\u003cbool\u003e : the exception to many rules"
        ]
      ]
    },
    "type": "page",
    "version": 31,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522048670,
        "id": "d4f686c4-070a-4d62-8df1-c846899ea9e4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522048670,
        "parent_id": "9000a6be-4e4b-4eac-9ab8-80243a05a262",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The standard (section 23.3.7) specifies that a specialization of "
            ],
            [
              "vector\u003cbool\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is provided, which optimizes space by packing the "
            ],
            [
              "bool",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " values, so that each takes up only one bit. Since bits aren’t addressable in C++, this means that several requirements on "
            ],
            [
              "vector",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " are not placed on "
            ],
            [
              "vector\u003cbool\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The standard (section 23.3.7) specifies that a specialization of "
          },
          {
            "Text": "vector\u003cbool\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " is provided, which optimizes space by packing the "
          },
          {
            "Text": "bool",
            "AttrFlags": 2
          },
          {
            "Text": " values, so that each takes up only one bit. Since bits aren’t addressable in C++, this means that several requirements on "
          },
          {
            "Text": "vector",
            "AttrFlags": 2
          },
          {
            "Text": " are not placed on "
          },
          {
            "Text": "vector\u003cbool\u003e",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522048673,
        "id": "34e9f72d-8f4b-4ebd-b401-3bceb0663c7b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522048673,
        "parent_id": "9000a6be-4e4b-4eac-9ab8-80243a05a262",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The data stored is not required to be contiguous, so a "
            ],
            [
              "vector\u003cbool\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can’t be passed to a C API which expects a "
            ],
            [
              "bool",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " array."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "The data stored is not required to be contiguous, so a "
          },
          {
            "Text": "vector\u003cbool\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " can’t be passed to a C API which expects a "
          },
          {
            "Text": "bool",
            "AttrFlags": 2
          },
          {
            "Text": " array."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522048673,
        "id": "c14feb9b-247e-4280-b82a-480ea42c9fb5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522048673,
        "parent_id": "9000a6be-4e4b-4eac-9ab8-80243a05a262",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "at()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "operator []",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", and dereferencing of iterators do not return a reference to "
            ],
            [
              "bool",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Rather they return a proxy object that (imperfectly) simulates a reference to a "
            ],
            [
              "bool",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " by overloading its assignment operators. As an example, the following code may not be valid for "
            ],
            [
              "std::vector\u003cbool\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", because dereferencing an iterator does not return a reference:"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "at()",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "operator []",
            "AttrFlags": 2
          },
          {
            "Text": ", and dereferencing of iterators do not return a reference to "
          },
          {
            "Text": "bool",
            "AttrFlags": 2
          },
          {
            "Text": ". Rather they return a proxy object that (imperfectly) simulates a reference to a "
          },
          {
            "Text": "bool",
            "AttrFlags": 2
          },
          {
            "Text": " by overloading its assignment operators. As an example, the following code may not be valid for "
          },
          {
            "Text": "std::vector\u003cbool\u003e",
            "AttrFlags": 2
          },
          {
            "Text": ", because dereferencing an iterator does not return a reference:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522048674,
        "id": "090f31e8-7cc4-4bab-ae2e-ce7d57742a40",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552343760000,
        "parent_id": "9000a6be-4e4b-4eac-9ab8-80243a05a262",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "std::vector\u003cbool\u003e v = {true, false};\nfor (auto \u0026b: v) { } // error"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "std::vector\u003cbool\u003e v = {true, false};\nfor (auto \u0026b: v) { } // error",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522048674,
        "id": "464b4a45-10f6-4cc9-91c5-9ba456460f9e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522048674,
        "parent_id": "9000a6be-4e4b-4eac-9ab8-80243a05a262",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Similarly, functions expecting a "
            ],
            [
              "bool\u0026",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " argument cannot be used with the result of "
            ],
            [
              "operator []",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "at()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " applied to "
            ],
            [
              "vector\u003cbool\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", or with the result of dereferencing its iterator:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Similarly, functions expecting a "
          },
          {
            "Text": "bool\u0026",
            "AttrFlags": 2
          },
          {
            "Text": " argument cannot be used with the result of "
          },
          {
            "Text": "operator []",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "at()",
            "AttrFlags": 2
          },
          {
            "Text": " applied to "
          },
          {
            "Text": "vector\u003cbool\u003e",
            "AttrFlags": 2
          },
          {
            "Text": ", or with the result of dereferencing its iterator:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522048674,
        "id": "a3198ffc-0ed1-4c4e-8107-d9766e218185",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552343760000,
        "parent_id": "9000a6be-4e4b-4eac-9ab8-80243a05a262",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "void f(bool\u0026 b);\nf(v[0]);             // error\nf(*v.begin());       // error"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "void f(bool\u0026 b);\nf(v[0]);             // error\nf(*v.begin());       // error",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522048674,
        "id": "4cea3fc6-5ee0-44cf-a5cc-0906b2ee25f5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522048674,
        "parent_id": "9000a6be-4e4b-4eac-9ab8-80243a05a262",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The implementation of "
            ],
            [
              "std::vector\u003cbool\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is dependent on both the compiler and architecture. The specialisation is implemented by packing "
            ],
            [
              "n",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " Booleans into the lowest addressable section of memory. Here, "
            ],
            [
              "n",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is the size in bits of the lowest addressable memory. In most modern systems this is 1 byte or 8 bits. This means that one byte can store 8 Boolean values. This is an improvement over the traditional implementation where 1 Boolean value is stored in 1 byte of memory."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The implementation of "
          },
          {
            "Text": "std::vector\u003cbool\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " is dependent on both the compiler and architecture. The specialisation is implemented by packing "
          },
          {
            "Text": "n",
            "AttrFlags": 2
          },
          {
            "Text": " Booleans into the lowest addressable section of memory. Here, "
          },
          {
            "Text": "n",
            "AttrFlags": 2
          },
          {
            "Text": " is the size in bits of the lowest addressable memory. In most modern systems this is 1 byte or 8 bits. This means that one byte can store 8 Boolean values. This is an improvement over the traditional implementation where 1 Boolean value is stored in 1 byte of memory."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522048674,
        "id": "7019d443-bf20-459c-b4b8-be51eb5614b6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552343760000,
        "parent_id": "9000a6be-4e4b-4eac-9ab8-80243a05a262",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note:",
              [
                [
                  "b"
                ],
                [
                  "i"
                ]
              ]
            ],
            [
              " The below example shows possible bit-wise values of individual bytes in a traditional vs. optimized "
            ],
            [
              "vector\u003cbool\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". This will not always hold true in all architectures. It is, however, a good way of visualizing the optimization. In the below examples a byte is represented as [x, x, x, x, x, x, x, x]."
            ]
          ]
        },
        "type": "text",
        "version": 5,
        "inline_content": [
          {
            "Text": "Note:",
            "AttrFlags": 5
          },
          {
            "Text": " The below example shows possible bit-wise values of individual bytes in a traditional vs. optimized "
          },
          {
            "Text": "vector\u003cbool\u003e",
            "AttrFlags": 2
          },
          {
            "Text": ". This will not always hold true in all architectures. It is, however, a good way of visualizing the optimization. In the below examples a byte is represented as [x, x, x, x, x, x, x, x]."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522048675,
        "id": "dc8ed0a2-673b-4d00-8d21-506d3084871d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522048675,
        "parent_id": "9000a6be-4e4b-4eac-9ab8-80243a05a262",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Traditional",
              [
                [
                  "b"
                ],
                [
                  "i"
                ]
              ]
            ],
            [
              " ",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              "std::vector\u003cchar\u003e",
              [
                [
                  "i"
                ],
                [
                  "c"
                ]
              ]
            ],
            [
              " storing 8 Boolean values:",
              [
                [
                  "i"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Traditional",
            "AttrFlags": 5
          },
          {
            "Text": " ",
            "AttrFlags": 4
          },
          {
            "Text": "std::vector\u003cchar\u003e",
            "AttrFlags": 6
          },
          {
            "Text": " storing 8 Boolean values:",
            "AttrFlags": 4
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522048675,
        "id": "d4a14490-a8aa-418a-9cce-9a445ce4dc42",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552343760000,
        "parent_id": "9000a6be-4e4b-4eac-9ab8-80243a05a262",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "std::vector\u003cchar\u003e trad_vect = {true, false, false, false, true, false, true, true};"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "std::vector\u003cchar\u003e trad_vect = {true, false, false, false, true, false, true, true};",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522048675,
        "id": "e550b339-a330-46db-b4cf-ddf83cf1f2a9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522048675,
        "parent_id": "9000a6be-4e4b-4eac-9ab8-80243a05a262",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Bitwise representation:",
              [
                [
                  "i"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Bitwise representation:",
            "AttrFlags": 4
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522048675,
        "id": "4d5bfdfc-45f0-4254-acd5-f26ef661c165",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552343760000,
        "parent_id": "9000a6be-4e4b-4eac-9ab8-80243a05a262",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "[0,0,0,0,0,0,0,1], [0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0], \n[0,0,0,0,0,0,0,1], [0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,1], [0,0,0,0,0,0,0,1]"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "[0,0,0,0,0,0,0,1], [0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0], \n[0,0,0,0,0,0,0,1], [0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,1], [0,0,0,0,0,0,0,1]",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522048675,
        "id": "2c4430fe-624c-4199-8658-7c56486634f7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522048675,
        "parent_id": "9000a6be-4e4b-4eac-9ab8-80243a05a262",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Specialized",
              [
                [
                  "b"
                ],
                [
                  "i"
                ]
              ]
            ],
            [
              " ",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              "std::vector\u003cbool\u003e",
              [
                [
                  "i"
                ],
                [
                  "c"
                ]
              ]
            ],
            [
              " storing 8 Boolean values:",
              [
                [
                  "i"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Specialized",
            "AttrFlags": 5
          },
          {
            "Text": " ",
            "AttrFlags": 4
          },
          {
            "Text": "std::vector\u003cbool\u003e",
            "AttrFlags": 6
          },
          {
            "Text": " storing 8 Boolean values:",
            "AttrFlags": 4
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522048675,
        "id": "e6451e05-be8a-4ddb-a5cd-fd74aab3ffdd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552343760000,
        "parent_id": "9000a6be-4e4b-4eac-9ab8-80243a05a262",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "std::vector\u003cbool\u003e optimized_vect = {true, false, false, false, true, false, true, true};"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "std::vector\u003cbool\u003e optimized_vect = {true, false, false, false, true, false, true, true};",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522048675,
        "id": "d6256bef-7d9c-4311-93ce-1ba15fc6b3b3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522048675,
        "parent_id": "9000a6be-4e4b-4eac-9ab8-80243a05a262",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Bitwise representation:",
              [
                [
                  "i"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Bitwise representation:",
            "AttrFlags": 4
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522048676,
        "id": "0def4428-dfb6-4844-8a5e-95bab94c2a02",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552343760000,
        "parent_id": "9000a6be-4e4b-4eac-9ab8-80243a05a262",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "[1,0,0,0,1,0,1,1]"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "[1,0,0,0,1,0,1,1]",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522048676,
        "id": "878966c3-03ba-451b-9652-389d05614542",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522048676,
        "parent_id": "9000a6be-4e4b-4eac-9ab8-80243a05a262",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Notice in the above example, that in the traditional version of "
            ],
            [
              "std::vector\u003cbool\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", 8 Boolean values take up 8 bytes of memory, whereas in the optimized version of "
            ],
            [
              "std::vector\u003cbool\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", they only use 1 byte of memory. This is a significant improvement on memory usage. If you need to pass a "
            ],
            [
              "vector\u003cbool\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to an C-style API, you may need to copy the values to an array, or find a better way to use the API, if memory and performance are at risk."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Notice in the above example, that in the traditional version of "
          },
          {
            "Text": "std::vector\u003cbool\u003e",
            "AttrFlags": 2
          },
          {
            "Text": ", 8 Boolean values take up 8 bytes of memory, whereas in the optimized version of "
          },
          {
            "Text": "std::vector\u003cbool\u003e",
            "AttrFlags": 2
          },
          {
            "Text": ", they only use 1 byte of memory. This is a significant improvement on memory usage. If you need to pass a "
          },
          {
            "Text": "vector\u003cbool\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " to an C-style API, you may need to copy the values to an array, or find a better way to use the API, if memory and performance are at risk."
          }
        ]
      }
    ],
    "title": "vector\u003cbool\u003e : the exception to many rules",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}