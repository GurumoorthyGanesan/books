{
  "ID": "b1b94dee-0944-4bb3-b258-5ce4e12a3e87",
  "Root": {
    "alive": true,
    "content": [
      "41bdaee1-e9f2-4104-9e94-67be5bb21a9f",
      "8df391ec-5e8a-430a-941a-c75b29d5d679",
      "62f1c5fe-2b67-4147-b059-ee763f40e7c6",
      "709c1c0a-4e44-48d1-a2a9-9957d451611c",
      "b5144462-0a4d-4091-b562-354ca4b7b050",
      "f234b57d-466a-43c1-a178-a00a8fd36a5a",
      "3a2ab772-ee54-4507-9e75-56524bf4a903",
      "b40d121e-b8f0-494d-859b-291b589d51a0",
      "b2f5da03-f096-42c0-92be-cb3805d9ede5",
      "a7aee473-80c2-4868-9098-bfef5ecb4d80",
      "ea35b6f8-7e31-4294-8aae-ec0f7fea9157",
      "488244be-949e-4e64-bb44-3525fc125725",
      "357d0988-eea8-4224-b02f-5de925405dda",
      "c759e77f-f57c-4b5e-a4bb-63846e9c2c7c",
      "37ebe1db-9f14-4f96-aee7-fe89d58d77b6",
      "58b4cd84-e187-4b5f-927f-cbb324439bfb",
      "f4003b60-52ec-4e69-bdf5-7f0504e3b37b",
      "4125b75a-1baa-4142-92d6-816218ee2af5",
      "32900c3f-53d6-493b-9dd3-dc53a257b518",
      "b112f6ec-2ebb-4866-af6d-3708b72523f2",
      "390107f8-7df1-4371-a376-54d0e93f31a7",
      "c9875209-241f-4fa6-ab64-affc8be869f0",
      "6bec0c28-f307-420d-9d2f-e5d468a4e176",
      "ff62fa25-6bb0-4e29-8e12-50262b0bf6d9",
      "aabef0c9-33c9-417f-88fd-0afee10c81c9",
      "c51aa9ed-0bf2-4ba3-8f09-1f9eda7d6fae",
      "9d7f159d-1642-4814-9993-b5be1f3448d5",
      "a2e5e62f-bd84-4153-bb00-90f91a7e49be",
      "3a2b5efa-dc81-4ca1-9b64-23535c1cd2f5",
      "a46e3e53-f66a-4f0a-969d-10168bd12235",
      "044080a4-5dd0-45ac-bcf0-65ca549d14d2",
      "bdf5bbf5-b1ae-4bed-b32d-48e0d5ebf4d2",
      "a04572ce-a10c-43c1-a7ca-c4d5ad2ebb4a",
      "b0c2f3fe-5096-4c3f-ba61-f18b5fd6387e"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522300529,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "b1b94dee-0944-4bb3-b258-5ce4e12a3e87",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550655120000,
    "parent_id": "83f01298-2804-4599-8deb-99728a5d557a",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Macros"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522300516,
        "id": "41bdaee1-e9f2-4104-9e94-67be5bb21a9f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522300516,
        "parent_id": "b1b94dee-0944-4bb3-b258-5ce4e12a3e87",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Macros are categorized into two main groups: object-like macros and function-like macros. Macros are treated as a token substitution early in the compilation process. This means that large (or repeating) sections of code can be abstracted into a preprocessor macro."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Macros are categorized into two main groups: object-like macros and function-like macros. Macros are treated as a token substitution early in the compilation process. This means that large (or repeating) sections of code can be abstracted into a preprocessor macro."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522300517,
        "id": "8df391ec-5e8a-430a-941a-c75b29d5d679",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522300517,
        "parent_id": "b1b94dee-0944-4bb3-b258-5ce4e12a3e87",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// This is an object-like macro\n#define    PI         3.14159265358979\n\n// This is a function-like macro.\n// Note that we can use previously defined macros\n// in other macro definitions (object-like or function-like)\n// But watch out, its quite useful if you know what you're doing, but the\n// Compiler doesnt know which type to handle, so using inline functions instead\n// is quite recommended (But e.g. for Minimum/Maximum functions it is quite useful)\n#define    AREA(r)    (PI*(r)*(r))\n\n// They can be used like this:\ndouble pi_macro   = PI;\ndouble area_macro = AREA(4.6);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// This is an object-like macro\n#define    PI         3.14159265358979\n\n// This is a function-like macro.\n// Note that we can use previously defined macros\n// in other macro definitions (object-like or function-like)\n// But watch out, its quite useful if you know what you're doing, but the\n// Compiler doesnt know which type to handle, so using inline functions instead\n// is quite recommended (But e.g. for Minimum/Maximum functions it is quite useful)\n#define    AREA(r)    (PI*(r)*(r))\n\n// They can be used like this:\ndouble pi_macro   = PI;\ndouble area_macro = AREA(4.6);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522300525,
        "id": "62f1c5fe-2b67-4147-b059-ee763f40e7c6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522300525,
        "parent_id": "b1b94dee-0944-4bb3-b258-5ce4e12a3e87",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The Qt library makes use of this technique to create a meta-object system by having the user declare the Q_OBJECT macro at the head of the user-defined class extending QObject."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The Qt library makes use of this technique to create a meta-object system by having the user declare the Q_OBJECT macro at the head of the user-defined class extending QObject."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522300525,
        "id": "709c1c0a-4e44-48d1-a2a9-9957d451611c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522300525,
        "parent_id": "b1b94dee-0944-4bb3-b258-5ce4e12a3e87",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Macro names are usually written in all caps, to make them easier to differentiate from normal code. This isn’t a requirement, but is merely considered good style by many programmers."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Macro names are usually written in all caps, to make them easier to differentiate from normal code. This isn’t a requirement, but is merely considered good style by many programmers."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522300525,
        "id": "b5144462-0a4d-4091-b562-354ca4b7b050",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522300525,
        "parent_id": "b1b94dee-0944-4bb3-b258-5ce4e12a3e87",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522300525,
        "id": "f234b57d-466a-43c1-a178-a00a8fd36a5a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522300525,
        "parent_id": "b1b94dee-0944-4bb3-b258-5ce4e12a3e87",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When an object-like macro is encountered, it’s expanded as a simple copy-paste operation, with the macro’s name being replaced with its definition. When a function-like macro is encountered, both its name and its parameters are expanded."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When an object-like macro is encountered, it’s expanded as a simple copy-paste operation, with the macro’s name being replaced with its definition. When a function-like macro is encountered, both its name and its parameters are expanded."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522300525,
        "id": "3a2ab772-ee54-4507-9e75-56524bf4a903",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522300525,
        "parent_id": "b1b94dee-0944-4bb3-b258-5ce4e12a3e87",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "double pi_squared = PI * PI;\n// Compiler sees:\ndouble pi_squared = 3.14159265358979 * 3.14159265358979;\n\ndouble area = AREA(5);\n// Compiler sees:\ndouble area = (3.14159265358979*(5)*(5))"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "double pi_squared = PI * PI;\n// Compiler sees:\ndouble pi_squared = 3.14159265358979 * 3.14159265358979;\n\ndouble area = AREA(5);\n// Compiler sees:\ndouble area = (3.14159265358979*(5)*(5))",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522300525,
        "id": "b40d121e-b8f0-494d-859b-291b589d51a0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522300525,
        "parent_id": "b1b94dee-0944-4bb3-b258-5ce4e12a3e87",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Due to this, function-like macro parameters are often enclosed within parentheses, as in "
            ],
            [
              "AREA()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " above. This is to prevent any bugs that can occur during macro expansion, specifically bugs caused by a single macro parameter being composed of multiple actual values."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Due to this, function-like macro parameters are often enclosed within parentheses, as in "
          },
          {
            "Text": "AREA()",
            "AttrFlags": 2
          },
          {
            "Text": " above. This is to prevent any bugs that can occur during macro expansion, specifically bugs caused by a single macro parameter being composed of multiple actual values."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522300525,
        "id": "b2f5da03-f096-42c0-92be-cb3805d9ede5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522300525,
        "parent_id": "b1b94dee-0944-4bb3-b258-5ce4e12a3e87",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#define BAD_AREA(r) PI * r * r\n\ndouble bad_area = BAD_AREA(5 + 1.6);\n// Compiler sees:\ndouble bad_area = 3.14159265358979 * 5 + 1.6 * 5 + 1.6;\n\ndouble good_area = AREA(5 + 1.6);\n// Compiler sees:\ndouble good_area = (3.14159265358979*(5 + 1.6)*(5 + 1.6));"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#define BAD_AREA(r) PI * r * r\n\ndouble bad_area = BAD_AREA(5 + 1.6);\n// Compiler sees:\ndouble bad_area = 3.14159265358979 * 5 + 1.6 * 5 + 1.6;\n\ndouble good_area = AREA(5 + 1.6);\n// Compiler sees:\ndouble good_area = (3.14159265358979*(5 + 1.6)*(5 + 1.6));",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522300526,
        "id": "a7aee473-80c2-4868-9098-bfef5ecb4d80",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522300526,
        "parent_id": "b1b94dee-0944-4bb3-b258-5ce4e12a3e87",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Also note that due to this simple expansion, care must be taken with the parameters passed to macros, to prevent unexpected side effects. If the parameter is modified during evaluation, it will be modified each time it is used in the expanded macro, which usually isn’t what we want. This is true even if the macro encloses the parameters in parentheses to prevent expansion from breaking anything."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Also note that due to this simple expansion, care must be taken with the parameters passed to macros, to prevent unexpected side effects. If the parameter is modified during evaluation, it will be modified each time it is used in the expanded macro, which usually isn’t what we want. This is true even if the macro encloses the parameters in parentheses to prevent expansion from breaking anything."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522300526,
        "id": "ea35b6f8-7e31-4294-8aae-ec0f7fea9157",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522300526,
        "parent_id": "b1b94dee-0944-4bb3-b258-5ce4e12a3e87",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int oops = 5;\ndouble incremental_damage = AREA(oops++);\n// Compiler sees:\ndouble incremental_damage = (3.14159265358979*(oops++)*(oops++));"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int oops = 5;\ndouble incremental_damage = AREA(oops++);\n// Compiler sees:\ndouble incremental_damage = (3.14159265358979*(oops++)*(oops++));",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522300526,
        "id": "488244be-949e-4e64-bb44-3525fc125725",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522300526,
        "parent_id": "b1b94dee-0944-4bb3-b258-5ce4e12a3e87",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Additionally, macros provide no type-safety, leading to hard-to-understand errors about type mismatch."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Additionally, macros provide no type-safety, leading to hard-to-understand errors about type mismatch."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522300526,
        "id": "357d0988-eea8-4224-b02f-5de925405dda",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522300526,
        "parent_id": "b1b94dee-0944-4bb3-b258-5ce4e12a3e87",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522300526,
        "id": "c759e77f-f57c-4b5e-a4bb-63846e9c2c7c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522300526,
        "parent_id": "b1b94dee-0944-4bb3-b258-5ce4e12a3e87",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As programmers normally terminate lines with a semicolon, macros that are intended to be used as standalone lines are often designed to “swallow” a semicolon; this prevents any unintended bugs from being caused by an extra semicolon."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "As programmers normally terminate lines with a semicolon, macros that are intended to be used as standalone lines are often designed to “swallow” a semicolon; this prevents any unintended bugs from being caused by an extra semicolon."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522300526,
        "id": "37ebe1db-9f14-4f96-aee7-fe89d58d77b6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522300526,
        "parent_id": "b1b94dee-0944-4bb3-b258-5ce4e12a3e87",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#define IF_BREAKER(Func) Func();\n\nif (some_condition)\n    // Oops.\n    IF_BREAKER(some_func);\nelse\n    std::cout \u003c\u003c \"I am accidentally an orphan.\" \u003c\u003c std::endl;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#define IF_BREAKER(Func) Func();\n\nif (some_condition)\n    // Oops.\n    IF_BREAKER(some_func);\nelse\n    std::cout \u003c\u003c \"I am accidentally an orphan.\" \u003c\u003c std::endl;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522300527,
        "id": "58b4cd84-e187-4b5f-927f-cbb324439bfb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522300527,
        "parent_id": "b1b94dee-0944-4bb3-b258-5ce4e12a3e87",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In this example, the inadvertent double semicolon breaks the "
            ],
            [
              "if...else",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " block, preventing the compiler from matching the "
            ],
            [
              "else",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to the "
            ],
            [
              "if",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". To prevent this, the semicolon is omitted from the macro definition, which will cause it to “swallow” the semicolon immediately following any usage of it."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In this example, the inadvertent double semicolon breaks the "
          },
          {
            "Text": "if...else",
            "AttrFlags": 2
          },
          {
            "Text": " block, preventing the compiler from matching the "
          },
          {
            "Text": "else",
            "AttrFlags": 2
          },
          {
            "Text": " to the "
          },
          {
            "Text": "if",
            "AttrFlags": 2
          },
          {
            "Text": ". To prevent this, the semicolon is omitted from the macro definition, which will cause it to “swallow” the semicolon immediately following any usage of it."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522300527,
        "id": "f4003b60-52ec-4e69-bdf5-7f0504e3b37b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522300527,
        "parent_id": "b1b94dee-0944-4bb3-b258-5ce4e12a3e87",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#define IF_FIXER(Func) Func()\n\nif (some_condition)\n    IF_FIXER(some_func);\nelse\n    std::cout \u003c\u003c \"Hooray!  I work again!\" \u003c\u003c std::endl;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#define IF_FIXER(Func) Func()\n\nif (some_condition)\n    IF_FIXER(some_func);\nelse\n    std::cout \u003c\u003c \"Hooray!  I work again!\" \u003c\u003c std::endl;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522300528,
        "id": "4125b75a-1baa-4142-92d6-816218ee2af5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522300528,
        "parent_id": "b1b94dee-0944-4bb3-b258-5ce4e12a3e87",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Leaving off the trailing semicolon also allows the macro to be used without ending the current statement, which can be beneficial."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Leaving off the trailing semicolon also allows the macro to be used without ending the current statement, which can be beneficial."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522300528,
        "id": "32900c3f-53d6-493b-9dd3-dc53a257b518",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522300528,
        "parent_id": "b1b94dee-0944-4bb3-b258-5ce4e12a3e87",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#define DO_SOMETHING(Func, Param) Func(Param, 2)\n\n// ...\n\nsome_function(DO_SOMETHING(some_func, 3), DO_SOMETHING(some_func, 42));"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#define DO_SOMETHING(Func, Param) Func(Param, 2)\n\n// ...\n\nsome_function(DO_SOMETHING(some_func, 3), DO_SOMETHING(some_func, 42));",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522300528,
        "id": "b112f6ec-2ebb-4866-af6d-3708b72523f2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522300528,
        "parent_id": "b1b94dee-0944-4bb3-b258-5ce4e12a3e87",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522300528,
        "id": "390107f8-7df1-4371-a376-54d0e93f31a7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522300528,
        "parent_id": "b1b94dee-0944-4bb3-b258-5ce4e12a3e87",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Normally, a macro definition ends at the end of the line. If a macro needs to cover multiple lines, however, a backslash can be used at the end of a line to indicate this. This backslash must be the last character in the line, which indicates to the preprocessor that the following line should be concatenated onto the current line, treating them as a single line. This can be used multiple times in a row."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Normally, a macro definition ends at the end of the line. If a macro needs to cover multiple lines, however, a backslash can be used at the end of a line to indicate this. This backslash must be the last character in the line, which indicates to the preprocessor that the following line should be concatenated onto the current line, treating them as a single line. This can be used multiple times in a row."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522300528,
        "id": "c9875209-241f-4fa6-ab64-affc8be869f0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522300528,
        "parent_id": "b1b94dee-0944-4bb3-b258-5ce4e12a3e87",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#define TEXT \"I \\\nam \\\nmany \\\nlines.\"\n\n// ...\n\nstd::cout \u003c\u003c TEXT \u003c\u003c std::endl; // Output:   I am many lines."
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#define TEXT \"I \\\nam \\\nmany \\\nlines.\"\n\n// ...\n\nstd::cout \u003c\u003c TEXT \u003c\u003c std::endl; // Output:   I am many lines.",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522300528,
        "id": "6bec0c28-f307-420d-9d2f-e5d468a4e176",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522300528,
        "parent_id": "b1b94dee-0944-4bb3-b258-5ce4e12a3e87",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This is especially useful in complex function-like macros, which may need to cover multiple lines."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This is especially useful in complex function-like macros, which may need to cover multiple lines."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522300528,
        "id": "ff62fa25-6bb0-4e29-8e12-50262b0bf6d9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522300528,
        "parent_id": "b1b94dee-0944-4bb3-b258-5ce4e12a3e87",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#define CREATE_OUTPUT_AND_DELETE(Str) \\\n    std::string* tmp = new std::string(Str); \\\n    std::cout \u003c\u003c *tmp \u003c\u003c std::endl; \\\n    delete tmp;\n\n// ...\n\nCREATE_OUTPUT_AND_DELETE(\"There's no real need for this to use 'new'.\")"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#define CREATE_OUTPUT_AND_DELETE(Str) \\\n    std::string* tmp = new std::string(Str); \\\n    std::cout \u003c\u003c *tmp \u003c\u003c std::endl; \\\n    delete tmp;\n\n// ...\n\nCREATE_OUTPUT_AND_DELETE(\"There's no real need for this to use 'new'.\")",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522300528,
        "id": "aabef0c9-33c9-417f-88fd-0afee10c81c9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522300528,
        "parent_id": "b1b94dee-0944-4bb3-b258-5ce4e12a3e87",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522300528,
        "id": "c51aa9ed-0bf2-4ba3-8f09-1f9eda7d6fae",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522300528,
        "parent_id": "b1b94dee-0944-4bb3-b258-5ce4e12a3e87",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In the case of more complex function-like macros, it can be useful to give them their own scope to prevent possible name collisions or to cause objects to be destroyed at the end of the macro, similar to an actual function. A common idiom for this is "
            ],
            [
              "do while 0",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ", where the macro is enclosed in a "
            ],
            [
              "do-while",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " block. This block is generally "
            ],
            [
              "not",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " followed with a semicolon, allowing it to swallow a semicolon."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In the case of more complex function-like macros, it can be useful to give them their own scope to prevent possible name collisions or to cause objects to be destroyed at the end of the macro, similar to an actual function. A common idiom for this is "
          },
          {
            "Text": "do while 0",
            "AttrFlags": 4
          },
          {
            "Text": ", where the macro is enclosed in a "
          },
          {
            "Text": "do-while",
            "AttrFlags": 4
          },
          {
            "Text": " block. This block is generally "
          },
          {
            "Text": "not",
            "AttrFlags": 4
          },
          {
            "Text": " followed with a semicolon, allowing it to swallow a semicolon."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522300528,
        "id": "9d7f159d-1642-4814-9993-b5be1f3448d5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522300528,
        "parent_id": "b1b94dee-0944-4bb3-b258-5ce4e12a3e87",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#define DO_STUFF(Type, Param, ReturnVar) do { \\\n    Type temp(some_setup_values); \\\n    ReturnVar = temp.process(Param); \\\n} while (0)\n\nint x;\nDO_STUFF(MyClass, 41153.7, x);\n\n// Compiler sees:\n\nint x;\ndo {\n    MyClass temp(some_setup_values);\n    x = temp.process(41153.7);\n} while (0);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#define DO_STUFF(Type, Param, ReturnVar) do { \\\n    Type temp(some_setup_values); \\\n    ReturnVar = temp.process(Param); \\\n} while (0)\n\nint x;\nDO_STUFF(MyClass, 41153.7, x);\n\n// Compiler sees:\n\nint x;\ndo {\n    MyClass temp(some_setup_values);\n    x = temp.process(41153.7);\n} while (0);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522300529,
        "id": "a2e5e62f-bd84-4153-bb00-90f91a7e49be",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522300529,
        "parent_id": "b1b94dee-0944-4bb3-b258-5ce4e12a3e87",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522300529,
        "id": "3a2b5efa-dc81-4ca1-9b64-23535c1cd2f5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522300529,
        "parent_id": "b1b94dee-0944-4bb3-b258-5ce4e12a3e87",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "There are also variadic macros; similarly to variadic functions, these take a variable number of arguments, and then expand them all in place of a special “Varargs” parameter, "
            ],
            [
              "__VA_ARGS__",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "There are also variadic macros; similarly to variadic functions, these take a variable number of arguments, and then expand them all in place of a special “Varargs” parameter, "
          },
          {
            "Text": "__VA_ARGS__",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522300529,
        "id": "a46e3e53-f66a-4f0a-969d-10168bd12235",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522300529,
        "parent_id": "b1b94dee-0944-4bb3-b258-5ce4e12a3e87",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#define VARIADIC(Param, ...) Param(__VA_ARGS__)\n\nVARIADIC(printf, \"%d\", 8);\n// Compiler sees:\nprintf(\"%d\", 8);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#define VARIADIC(Param, ...) Param(__VA_ARGS__)\n\nVARIADIC(printf, \"%d\", 8);\n// Compiler sees:\nprintf(\"%d\", 8);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522300529,
        "id": "044080a4-5dd0-45ac-bcf0-65ca549d14d2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522300529,
        "parent_id": "b1b94dee-0944-4bb3-b258-5ce4e12a3e87",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note that during expansion, "
            ],
            [
              "__VA_ARGS__",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can be placed anywhere in the definition, and will be expanded correctly."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note that during expansion, "
          },
          {
            "Text": "__VA_ARGS__",
            "AttrFlags": 2
          },
          {
            "Text": " can be placed anywhere in the definition, and will be expanded correctly."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522300529,
        "id": "bdf5bbf5-b1ae-4bed-b32d-48e0d5ebf4d2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522300529,
        "parent_id": "b1b94dee-0944-4bb3-b258-5ce4e12a3e87",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#define VARIADIC2(POne, PTwo, PThree, ...) POne(PThree, __VA_ARGS__, PTwo)\n\nVARIADIC2(some_func, 3, 8, 6, 9);\n// Compiler sees:\nsome_func(8, 6, 9, 3);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#define VARIADIC2(POne, PTwo, PThree, ...) POne(PThree, __VA_ARGS__, PTwo)\n\nVARIADIC2(some_func, 3, 8, 6, 9);\n// Compiler sees:\nsome_func(8, 6, 9, 3);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522300529,
        "id": "a04572ce-a10c-43c1-a7ca-c4d5ad2ebb4a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522300529,
        "parent_id": "b1b94dee-0944-4bb3-b258-5ce4e12a3e87",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In the case of a zero-argument variadic parameter, different compilers will handle the trailing comma differently. Some compilers, such as Visual Studio, will silently swallow the comma without any special syntax. Other compilers, such as GCC, require you to place "
            ],
            [
              "##",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " immediately before "
            ],
            [
              "__VA_ARGS__",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Due to this, it is wise to conditionally define variadic macros when portability is a concern."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In the case of a zero-argument variadic parameter, different compilers will handle the trailing comma differently. Some compilers, such as Visual Studio, will silently swallow the comma without any special syntax. Other compilers, such as GCC, require you to place "
          },
          {
            "Text": "##",
            "AttrFlags": 2
          },
          {
            "Text": " immediately before "
          },
          {
            "Text": "__VA_ARGS__",
            "AttrFlags": 2
          },
          {
            "Text": ". Due to this, it is wise to conditionally define variadic macros when portability is a concern."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522300529,
        "id": "b0c2f3fe-5096-4c3f-ba61-f18b5fd6387e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522300529,
        "parent_id": "b1b94dee-0944-4bb3-b258-5ce4e12a3e87",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// In this example, COMPILER is a user-defined macro specifying the compiler being used.\n\n#if       COMPILER == \"VS\"\n    #define VARIADIC3(Name, Param, ...) Name(Param, __VA_ARGS__)\n#elif     COMPILER == \"GCC\"\n    #define VARIADIC3(Name, Param, ...) Name(Param, ##__VA_ARGS__)\n#endif /* COMPILER */"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// In this example, COMPILER is a user-defined macro specifying the compiler being used.\n\n#if       COMPILER == \"VS\"\n    #define VARIADIC3(Name, Param, ...) Name(Param, __VA_ARGS__)\n#elif     COMPILER == \"GCC\"\n    #define VARIADIC3(Name, Param, ...) Name(Param, ##__VA_ARGS__)\n#endif /* COMPILER */",
        "code_language": "Plain Text"
      }
    ],
    "title": "Macros",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}