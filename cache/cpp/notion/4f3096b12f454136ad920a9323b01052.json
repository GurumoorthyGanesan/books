{
  "ID": "4f3096b1-2f45-4136-ad92-0a9323b01052",
  "Root": {
    "alive": true,
    "content": [
      "56ad66da-a45c-4121-8826-c6c9bb67b03e",
      "0e9c2d71-84f0-478a-92f1-444031feb76c",
      "63442995-96fe-4f89-a1c7-c5f16c496331",
      "99f994cb-9848-47d0-b473-4dc1064a689b",
      "ab6dd0ed-3db3-4f8a-b69d-ff423241decc",
      "5bad3dc6-f8e9-4854-b442-165a872831b9"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550524773331,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "4f3096b1-2f45-4136-ad92-0a9323b01052",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551688815711,
    "parent_id": "cbbee582-eb1d-4f69-a297-e10ba2cd83ab",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Resource Acquisition Is Initialization"
        ]
      ]
    },
    "type": "page",
    "version": 4,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524773330,
        "id": "56ad66da-a45c-4121-8826-c6c9bb67b03e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524773330,
        "parent_id": "4f3096b1-2f45-4136-ad92-0a9323b01052",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Resource Acquisition Is Initialization (RAII) is a common idiom in resource management. In the case of dynamic memory, it uses "
            ],
            [
              "smart pointers",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%2B%2B/509/smart-pointers#t=201612210638370818186"
                ]
              ]
            ],
            [
              " to accomplish resource management. When using RAII, an acquired resource is immediately given ownership to a smart pointer or equivalent resource manager. The resource is only accessed through this manager, so the manager can keep track of various operations. For example, "
            ],
            [
              "std::auto_ptr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " automatically frees its corresponding resource when it falls out of scope or is otherwise deleted."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Resource Acquisition Is Initialization (RAII) is a common idiom in resource management. In the case of dynamic memory, it uses "
          },
          {
            "Text": "smart pointers",
            "Link": "http://stackoverflow.com/documentation/c%2B%2B/509/smart-pointers#t=201612210638370818186"
          },
          {
            "Text": " to accomplish resource management. When using RAII, an acquired resource is immediately given ownership to a smart pointer or equivalent resource manager. The resource is only accessed through this manager, so the manager can keep track of various operations. For example, "
          },
          {
            "Text": "std::auto_ptr",
            "AttrFlags": 2
          },
          {
            "Text": " automatically frees its corresponding resource when it falls out of scope or is otherwise deleted."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524773331,
        "id": "0e9c2d71-84f0-478a-92f1-444031feb76c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524773331,
        "parent_id": "4f3096b1-2f45-4136-ad92-0a9323b01052",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cmemory\u003e\n#include \u003ciostream\u003e\nusing namespace std;\n\nint main() {\n    {\n        auto_ptr ap(new int(5)); // dynamic memory is the resource\n        cout \u003c\u003c *ap \u003c\u003c endl; // prints 5\n    } // auto_ptr is destroyed, its resource is automatically freed\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cmemory\u003e\n#include \u003ciostream\u003e\nusing namespace std;\n\nint main() {\n    {\n        auto_ptr ap(new int(5)); // dynamic memory is the resource\n        cout \u003c\u003c *ap \u003c\u003c endl; // prints 5\n    } // auto_ptr is destroyed, its resource is automatically freed\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524773331,
        "id": "63442995-96fe-4f89-a1c7-c5f16c496331",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524773331,
        "parent_id": "4f3096b1-2f45-4136-ad92-0a9323b01052",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "std::auto_ptr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "‘s main problem is that it can’t copied without transferring ownership:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "std::auto_ptr",
            "AttrFlags": 2
          },
          {
            "Text": "‘s main problem is that it can’t copied without transferring ownership:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524773331,
        "id": "99f994cb-9848-47d0-b473-4dc1064a689b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524773331,
        "parent_id": "4f3096b1-2f45-4136-ad92-0a9323b01052",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cmemory\u003e\n#include \u003ciostream\u003e\nusing namespace std;\n\nint main() {\n    auto_ptr ap1(new int(5));\n    cout \u003c\u003c *ap1 \u003c\u003c endl; // prints 5\n    auto_ptr ap2(ap1); // copy ap2 from ap1; ownership now transfers to ap2\n    cout \u003c\u003c *ap2 \u003c\u003c endl; // prints 5\n    cout \u003c\u003c ap1 == nullptr \u003c\u003c endl; // prints 1; ap1 has lost ownership of resource\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cmemory\u003e\n#include \u003ciostream\u003e\nusing namespace std;\n\nint main() {\n    auto_ptr ap1(new int(5));\n    cout \u003c\u003c *ap1 \u003c\u003c endl; // prints 5\n    auto_ptr ap2(ap1); // copy ap2 from ap1; ownership now transfers to ap2\n    cout \u003c\u003c *ap2 \u003c\u003c endl; // prints 5\n    cout \u003c\u003c ap1 == nullptr \u003c\u003c endl; // prints 1; ap1 has lost ownership of resource\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524773331,
        "id": "ab6dd0ed-3db3-4f8a-b69d-ff423241decc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524773331,
        "parent_id": "4f3096b1-2f45-4136-ad92-0a9323b01052",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Because of these weird copy semantics, "
            ],
            [
              "std::auto_ptr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can’t be used in containers, among other things. The reason it does this is to prevent deleting memory twice: if there are two "
            ],
            [
              "auto_ptrs",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " with ownership of the same resource, they both try to free it when they’re destroyed. Freeing an already freed resource can generally cause problems, so it is important to prevent it. However, "
            ],
            [
              "std::shared_ptr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " has a method to avoid this while not transferring ownership when copying:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Because of these weird copy semantics, "
          },
          {
            "Text": "std::auto_ptr",
            "AttrFlags": 2
          },
          {
            "Text": " can’t be used in containers, among other things. The reason it does this is to prevent deleting memory twice: if there are two "
          },
          {
            "Text": "auto_ptrs",
            "AttrFlags": 2
          },
          {
            "Text": " with ownership of the same resource, they both try to free it when they’re destroyed. Freeing an already freed resource can generally cause problems, so it is important to prevent it. However, "
          },
          {
            "Text": "std::shared_ptr",
            "AttrFlags": 2
          },
          {
            "Text": " has a method to avoid this while not transferring ownership when copying:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524773331,
        "id": "5bad3dc6-f8e9-4854-b442-165a872831b9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524773331,
        "parent_id": "4f3096b1-2f45-4136-ad92-0a9323b01052",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cmemory\u003e\n#include \u003ciostream\u003e\nusing namespace std;\n\nint main() {\n    shared_ptr sp2;\n    {\n        shared_ptr sp1(new int(5)); // give ownership to sp1\n        cout \u003c\u003c *sp1 \u003c\u003c endl; // prints 5\n        sp2 = sp1; // copy sp2 from sp1; both have ownership of resource\n        cout \u003c\u003c *sp1 \u003c\u003c endl; // prints 5\n        cout \u003c\u003c *sp2 \u003c\u003c endl; // prints 5\n    } // sp1 goes out of scope and is destroyed; sp2 has sole ownership of resource\n    cout \u003c\u003c *sp2 \u003c\u003c endl;        \n} // sp2 goes out of scope; nothing has ownership, so resource is freed"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cmemory\u003e\n#include \u003ciostream\u003e\nusing namespace std;\n\nint main() {\n    shared_ptr sp2;\n    {\n        shared_ptr sp1(new int(5)); // give ownership to sp1\n        cout \u003c\u003c *sp1 \u003c\u003c endl; // prints 5\n        sp2 = sp1; // copy sp2 from sp1; both have ownership of resource\n        cout \u003c\u003c *sp1 \u003c\u003c endl; // prints 5\n        cout \u003c\u003c *sp2 \u003c\u003c endl; // prints 5\n    } // sp1 goes out of scope and is destroyed; sp2 has sole ownership of resource\n    cout \u003c\u003c *sp2 \u003c\u003c endl;        \n} // sp2 goes out of scope; nothing has ownership, so resource is freed",
        "code_language": "Plain Text"
      }
    ],
    "title": "Resource Acquisition Is Initialization",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}