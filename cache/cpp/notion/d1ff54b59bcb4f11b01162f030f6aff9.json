{
  "ID": "d1ff54b5-9bcb-4f11-b011-62f030f6aff9",
  "Root": {
    "alive": true,
    "content": [
      "dccfb5b1-8abc-4b5d-a2c1-9d7593d27047",
      "995a4581-a069-4bc2-8f8f-7b1a44f3514a",
      "91af3530-e160-4655-95e7-b198bb5ea300",
      "8321b09d-b51c-4ada-826b-09c9a5c2e78a",
      "ff604ebe-54a1-44fa-8934-c0732cec5d32",
      "a9fa1f9a-a33d-4f14-a18b-693bf80c8ae2",
      "c1a4e435-b79f-485b-9a40-758bcd6bfe05",
      "30c8665a-85d5-4b2a-84ab-e6ff9c387b86",
      "05ee79c1-7832-436f-8e77-6e50f695cb52",
      "3e06169c-6262-4b89-a123-ff7e34a95f91",
      "ca524ef9-92f6-4728-9a26-a1726d4d7247",
      "39025b7f-00e8-4ff5-bd7a-a6730471b41b"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550521991540,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "d1ff54b5-9bcb-4f11-b011-62f030f6aff9",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550656440000,
    "parent_id": "b886ff5d-614b-4aa9-9e99-851b7998439b",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Trimming characters at start / end"
        ]
      ]
    },
    "type": "page",
    "version": 13,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521991534,
        "id": "dccfb5b1-8abc-4b5d-a2c1-9d7593d27047",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521991534,
        "parent_id": "d1ff54b5-9bcb-4f11-b011-62f030f6aff9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This example requires the headers "
            ],
            [
              "\u003calgorithm\u003e",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://en.cppreference.com/w/cpp/header/algorithm"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "\u003clocale\u003e",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://en.cppreference.com/w/cpp/header/locale"
                ]
              ]
            ],
            [
              ", and "
            ],
            [
              "\u003cutility\u003e",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://en.cppreference.com/w/cpp/header/utility"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This example requires the headers "
          },
          {
            "Text": "\u003calgorithm\u003e",
            "AttrFlags": 2,
            "Link": "http://en.cppreference.com/w/cpp/header/algorithm"
          },
          {
            "Text": ", "
          },
          {
            "Text": "\u003clocale\u003e",
            "AttrFlags": 2,
            "Link": "http://en.cppreference.com/w/cpp/header/locale"
          },
          {
            "Text": ", and "
          },
          {
            "Text": "\u003cutility\u003e",
            "AttrFlags": 2,
            "Link": "http://en.cppreference.com/w/cpp/header/utility"
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521991535,
        "id": "995a4581-a069-4bc2-8f8f-7b1a44f3514a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521991535,
        "parent_id": "d1ff54b5-9bcb-4f11-b011-62f030f6aff9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To "
            ],
            [
              "trim",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " a sequence or string means to remove all leading and trailing elements (or characters) matching a certain predicate. We first trim the trailing elements, because it doesn’t involve moving any elements, and then trim the leading elements. Note that the generalizations below work for all types of "
            ],
            [
              "std::basic_string",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (e.g. "
            ],
            [
              "std::string",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "std::wstring",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "), and accidentally also for sequence containers (e.g. "
            ],
            [
              "std::vector",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "std::list",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ")."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To "
          },
          {
            "Text": "trim",
            "AttrFlags": 4
          },
          {
            "Text": " a sequence or string means to remove all leading and trailing elements (or characters) matching a certain predicate. We first trim the trailing elements, because it doesn’t involve moving any elements, and then trim the leading elements. Note that the generalizations below work for all types of "
          },
          {
            "Text": "std::basic_string",
            "AttrFlags": 2
          },
          {
            "Text": " (e.g. "
          },
          {
            "Text": "std::string",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "std::wstring",
            "AttrFlags": 2
          },
          {
            "Text": "), and accidentally also for sequence containers (e.g. "
          },
          {
            "Text": "std::vector",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "std::list",
            "AttrFlags": 2
          },
          {
            "Text": ")."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521991535,
        "id": "91af3530-e160-4655-95e7-b198bb5ea300",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521991535,
        "parent_id": "d1ff54b5-9bcb-4f11-b011-62f030f6aff9",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "template \u003ctypename Sequence, // any basic_string, vector, list etc.\n          typename Pred\u003e     // a predicate on the element (character) type\nSequence\u0026 trim(Sequence\u0026 seq, Pred pred) {\n    return trim_start(trim_end(seq, pred), pred);\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "template \u003ctypename Sequence, // any basic_string, vector, list etc.\n          typename Pred\u003e     // a predicate on the element (character) type\nSequence\u0026 trim(Sequence\u0026 seq, Pred pred) {\n    return trim_start(trim_end(seq, pred), pred);\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521991535,
        "id": "8321b09d-b51c-4ada-826b-09c9a5c2e78a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521991535,
        "parent_id": "d1ff54b5-9bcb-4f11-b011-62f030f6aff9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Trimming the trailing elements involves finding the "
            ],
            [
              "last",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " element not matching the predicate, and erasing from there on:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Trimming the trailing elements involves finding the "
          },
          {
            "Text": "last",
            "AttrFlags": 4
          },
          {
            "Text": " element not matching the predicate, and erasing from there on:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521991535,
        "id": "ff604ebe-54a1-44fa-8934-c0732cec5d32",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521991535,
        "parent_id": "d1ff54b5-9bcb-4f11-b011-62f030f6aff9",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "template \u003ctypename Sequence, typename Pred\u003e\nSequence\u0026 trim_end(Sequence\u0026 seq, Pred pred) {\n    auto last = std::find_if_not(seq.rbegin(),\n                                 seq.rend(),\n                                 pred);\n    seq.erase(last.base(), seq.end());\n    return seq;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "template \u003ctypename Sequence, typename Pred\u003e\nSequence\u0026 trim_end(Sequence\u0026 seq, Pred pred) {\n    auto last = std::find_if_not(seq.rbegin(),\n                                 seq.rend(),\n                                 pred);\n    seq.erase(last.base(), seq.end());\n    return seq;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521991535,
        "id": "a9fa1f9a-a33d-4f14-a18b-693bf80c8ae2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521991535,
        "parent_id": "d1ff54b5-9bcb-4f11-b011-62f030f6aff9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Trimming the leading elements involves finding the "
            ],
            [
              "first",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " element not matching the predicate and erasing up to there:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Trimming the leading elements involves finding the "
          },
          {
            "Text": "first",
            "AttrFlags": 4
          },
          {
            "Text": " element not matching the predicate and erasing up to there:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521991535,
        "id": "c1a4e435-b79f-485b-9a40-758bcd6bfe05",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521991535,
        "parent_id": "d1ff54b5-9bcb-4f11-b011-62f030f6aff9",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "template \u003ctypename Sequence, typename Pred\u003e\nSequence\u0026 trim_start(Sequence\u0026 seq, Pred pred) {\n    auto first = std::find_if_not(seq.begin(),\n                                  seq.end(),\n                                  pred);\n    seq.erase(seq.begin(), first);\n    return seq;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "template \u003ctypename Sequence, typename Pred\u003e\nSequence\u0026 trim_start(Sequence\u0026 seq, Pred pred) {\n    auto first = std::find_if_not(seq.begin(),\n                                  seq.end(),\n                                  pred);\n    seq.erase(seq.begin(), first);\n    return seq;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521991536,
        "id": "30c8665a-85d5-4b2a-84ab-e6ff9c387b86",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521991536,
        "parent_id": "d1ff54b5-9bcb-4f11-b011-62f030f6aff9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To specialize the above for trimming whitespace in a "
            ],
            [
              "std::string",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " we can use the "
            ],
            [
              "std::isspace()",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://en.cppreference.com/w/cpp/locale/isspace"
                ]
              ]
            ],
            [
              " function as a predicate:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To specialize the above for trimming whitespace in a "
          },
          {
            "Text": "std::string",
            "AttrFlags": 2
          },
          {
            "Text": " we can use the "
          },
          {
            "Text": "std::isspace()",
            "AttrFlags": 2,
            "Link": "http://en.cppreference.com/w/cpp/locale/isspace"
          },
          {
            "Text": " function as a predicate:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521991536,
        "id": "05ee79c1-7832-436f-8e77-6e50f695cb52",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521991536,
        "parent_id": "d1ff54b5-9bcb-4f11-b011-62f030f6aff9",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "std::string\u0026 trim(std::string\u0026 str, const std::locale\u0026 loc = std::locale()) {\n    return trim(str, [\u0026loc](const char c){ return std::isspace(c, loc); });\n}\n\nstd::string\u0026 trim_start(std::string\u0026 str, const std::locale\u0026 loc = std::locale()) {\n    return trim_start(str, [\u0026loc](const char c){ return std::isspace(c, loc); });\n}\n\nstd::string\u0026 trim_end(std::string\u0026 str, const std::locale\u0026 loc = std::locale()) {\n    return trim_end(str, [\u0026loc](const char c){ return std::isspace(c, loc); });\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "std::string\u0026 trim(std::string\u0026 str, const std::locale\u0026 loc = std::locale()) {\n    return trim(str, [\u0026loc](const char c){ return std::isspace(c, loc); });\n}\n\nstd::string\u0026 trim_start(std::string\u0026 str, const std::locale\u0026 loc = std::locale()) {\n    return trim_start(str, [\u0026loc](const char c){ return std::isspace(c, loc); });\n}\n\nstd::string\u0026 trim_end(std::string\u0026 str, const std::locale\u0026 loc = std::locale()) {\n    return trim_end(str, [\u0026loc](const char c){ return std::isspace(c, loc); });\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521991537,
        "id": "3e06169c-6262-4b89-a123-ff7e34a95f91",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521991537,
        "parent_id": "d1ff54b5-9bcb-4f11-b011-62f030f6aff9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Similarly, we can use the "
            ],
            [
              "std::iswspace()",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://en.cppreference.com/w/cpp/string/wide/iswspace"
                ]
              ]
            ],
            [
              " function for "
            ],
            [
              "std::wstring",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " etc."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Similarly, we can use the "
          },
          {
            "Text": "std::iswspace()",
            "AttrFlags": 2,
            "Link": "http://en.cppreference.com/w/cpp/string/wide/iswspace"
          },
          {
            "Text": " function for "
          },
          {
            "Text": "std::wstring",
            "AttrFlags": 2
          },
          {
            "Text": " etc."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521991540,
        "id": "ca524ef9-92f6-4728-9a26-a1726d4d7247",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521991540,
        "parent_id": "d1ff54b5-9bcb-4f11-b011-62f030f6aff9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If you wish to create a "
            ],
            [
              "new",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " sequence that is a trimmed copy, then you can use a separate function:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If you wish to create a "
          },
          {
            "Text": "new",
            "AttrFlags": 4
          },
          {
            "Text": " sequence that is a trimmed copy, then you can use a separate function:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521991540,
        "id": "39025b7f-00e8-4ff5-bd7a-a6730471b41b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521991540,
        "parent_id": "d1ff54b5-9bcb-4f11-b011-62f030f6aff9",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "template \u003ctypename Sequence, typename Pred\u003e\nSequence trim_copy(Sequence seq, Pred pred) { // NOTE: passing seq by value\n    trim(seq, pred);\n    return seq;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "template \u003ctypename Sequence, typename Pred\u003e\nSequence trim_copy(Sequence seq, Pred pred) { // NOTE: passing seq by value\n    trim(seq, pred);\n    return seq;\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "Trimming characters at start / end",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}