{
  "ID": "33dc3d24-f698-44cb-932a-8e1caabd8a52",
  "Root": {
    "alive": true,
    "content": [
      "0fb8e74c-94b9-4346-adf4-24c357b7b067",
      "5bd954f0-2045-481d-85bf-4c9dc858a2f9",
      "be19832e-0cd6-4092-9e2e-8cba1aaa75fd",
      "b5967ac5-6a56-44b5-9f9d-ae1060a74f91"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522071513,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "33dc3d24-f698-44cb-932a-8e1caabd8a52",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550655600000,
    "parent_id": "71517390-0244-456d-87c4-82c582ca8abf",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Capture by reference"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522071509,
        "id": "0fb8e74c-94b9-4346-adf4-24c357b7b067",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522071509,
        "parent_id": "33dc3d24-f698-44cb-932a-8e1caabd8a52",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If you precede a local variable’s name with an "
            ],
            [
              "\u0026",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", then the variable will be captured by reference. Conceptually, this means that the lambda’s closure type will have a reference variable, initialized as a reference to the corresponding variable from outside of the lambda’s scope. Any use of the variable in the lambda body will refer to the original variable:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If you precede a local variable’s name with an "
          },
          {
            "Text": "\u0026",
            "AttrFlags": 2
          },
          {
            "Text": ", then the variable will be captured by reference. Conceptually, this means that the lambda’s closure type will have a reference variable, initialized as a reference to the corresponding variable from outside of the lambda’s scope. Any use of the variable in the lambda body will refer to the original variable:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522071512,
        "id": "5bd954f0-2045-481d-85bf-4c9dc858a2f9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522071512,
        "parent_id": "33dc3d24-f698-44cb-932a-8e1caabd8a52",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// Declare variable 'a'\nint a = 0;\n\n// Declare a lambda which captures 'a' by reference\nauto set = [\u0026a]() {\n    a = 1;\n};\n\nset();\nassert(a == 1);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// Declare variable 'a'\nint a = 0;\n\n// Declare a lambda which captures 'a' by reference\nauto set = [\u0026a]() {\n    a = 1;\n};\n\nset();\nassert(a == 1);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522071512,
        "id": "be19832e-0cd6-4092-9e2e-8cba1aaa75fd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522071512,
        "parent_id": "33dc3d24-f698-44cb-932a-8e1caabd8a52",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The keyword "
            ],
            [
              "mutable",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is not needed, because "
            ],
            [
              "a",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " itself is not "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The keyword "
          },
          {
            "Text": "mutable",
            "AttrFlags": 2
          },
          {
            "Text": " is not needed, because "
          },
          {
            "Text": "a",
            "AttrFlags": 2
          },
          {
            "Text": " itself is not "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522071513,
        "id": "b5967ac5-6a56-44b5-9f9d-ae1060a74f91",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522071513,
        "parent_id": "33dc3d24-f698-44cb-932a-8e1caabd8a52",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Of course, capturing by reference means that the lambda "
            ],
            [
              "must not",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " escape the scope of the variables it captures. So you could call functions that take a function, but you must not call a function that will "
            ],
            [
              "store",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " the lambda beyond the scope of your references. And you must not return the lambda."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Of course, capturing by reference means that the lambda "
          },
          {
            "Text": "must not",
            "AttrFlags": 1
          },
          {
            "Text": " escape the scope of the variables it captures. So you could call functions that take a function, but you must not call a function that will "
          },
          {
            "Text": "store",
            "AttrFlags": 4
          },
          {
            "Text": " the lambda beyond the scope of your references. And you must not return the lambda."
          }
        ]
      }
    ],
    "title": "Capture by reference",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}