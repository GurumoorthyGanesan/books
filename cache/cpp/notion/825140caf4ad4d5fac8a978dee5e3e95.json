{
  "ID": "825140ca-f4ad-4d5f-ac8a-978dee5e3e95",
  "Root": {
    "alive": true,
    "content": [
      "a3e7e47e-2ce1-4dea-8cb4-1a467f29e641",
      "79f5d658-9f6f-480f-bbb1-e783af3b3d43",
      "32e85fef-ffd6-4e15-b5e2-0a053dffda0a",
      "f7d48404-ea5b-4b0e-b093-05e41499545c",
      "d6aa4bd1-5876-45d1-bcd5-1c5b2db898d0",
      "8f01dceb-46a4-44ec-a827-4b19ab6438ec",
      "f498e1d4-3947-4b7e-92f5-74b3c8c79a33",
      "7cbbbbcc-b68e-47a5-9a38-82e3fa4f7cd4",
      "04298b4e-c8ad-459e-8512-1016b5f7882b",
      "3c8a9e32-1d59-4398-bf8c-e0da92df9951"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522052574,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "825140ca-f4ad-4d5f-ac8a-978dee5e3e95",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550655840000,
    "parent_id": "8655f492-9c51-4f68-ad52-8b6c1e02a277",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Finding an Element in std::vector"
        ]
      ]
    },
    "type": "page",
    "version": 11,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522052572,
        "id": "a3e7e47e-2ce1-4dea-8cb4-1a467f29e641",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522052572,
        "parent_id": "825140ca-f4ad-4d5f-ac8a-978dee5e3e95",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The function "
            ],
            [
              "std::find",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://en.cppreference.com/w/cpp/algorithm/find"
                ]
              ]
            ],
            [
              ", defined in the "
            ],
            [
              "\u003calgorithm\u003e",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://en.cppreference.com/w/cpp/algorithm"
                ]
              ]
            ],
            [
              " header, can be used to find an element in a "
            ],
            [
              "std::vector",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The function "
          },
          {
            "Text": "std::find",
            "AttrFlags": 2,
            "Link": "http://en.cppreference.com/w/cpp/algorithm/find"
          },
          {
            "Text": ", defined in the "
          },
          {
            "Text": "\u003calgorithm\u003e",
            "AttrFlags": 2,
            "Link": "http://en.cppreference.com/w/cpp/algorithm"
          },
          {
            "Text": " header, can be used to find an element in a "
          },
          {
            "Text": "std::vector",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522052572,
        "id": "79f5d658-9f6f-480f-bbb1-e783af3b3d43",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522052572,
        "parent_id": "825140ca-f4ad-4d5f-ac8a-978dee5e3e95",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "std::find",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " uses the "
            ],
            [
              "operator==",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to compare elements for equality. It returns an iterator to the first element in the range that compares equal to the value."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "std::find",
            "AttrFlags": 2
          },
          {
            "Text": " uses the "
          },
          {
            "Text": "operator==",
            "AttrFlags": 2
          },
          {
            "Text": " to compare elements for equality. It returns an iterator to the first element in the range that compares equal to the value."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522052573,
        "id": "32e85fef-ffd6-4e15-b5e2-0a053dffda0a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522052573,
        "parent_id": "825140ca-f4ad-4d5f-ac8a-978dee5e3e95",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If the element in question is not found, "
            ],
            [
              "std::find",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " returns "
            ],
            [
              "std::vector::end",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (or "
            ],
            [
              "std::vector::cend",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " if the vector is "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ")."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If the element in question is not found, "
          },
          {
            "Text": "std::find",
            "AttrFlags": 2
          },
          {
            "Text": " returns "
          },
          {
            "Text": "std::vector::end",
            "AttrFlags": 2
          },
          {
            "Text": " (or "
          },
          {
            "Text": "std::vector::cend",
            "AttrFlags": 2
          },
          {
            "Text": " if the vector is "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": ")."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522052573,
        "id": "f7d48404-ea5b-4b0e-b093-05e41499545c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522052573,
        "parent_id": "825140ca-f4ad-4d5f-ac8a-978dee5e3e95",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "static const int arr[] = {5, 4, 3, 2, 1};\nstd::vector\u003cint\u003e v (arr, arr + sizeof(arr) / sizeof(arr[0]) );\n\nstd::vector\u003cint\u003e::iterator it = std::find(v.begin(), v.end(), 4);\nstd::vector\u003cint\u003e::difference_type index = std::distance(v.begin(), it);\n// `it` points to the second element of the vector, `index` is 1\n\nstd::vector\u003cint\u003e::iterator missing = std::find(v.begin(), v.end(), 10);\nstd::vector\u003cint\u003e::difference_type index_missing = std::distance(v.begin(), missing);\n// `missing` is v.end(), `index_missing` is 5 (ie. size of the vector)"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "static const int arr[] = {5, 4, 3, 2, 1};\nstd::vector\u003cint\u003e v (arr, arr + sizeof(arr) / sizeof(arr[0]) );\n\nstd::vector\u003cint\u003e::iterator it = std::find(v.begin(), v.end(), 4);\nstd::vector\u003cint\u003e::difference_type index = std::distance(v.begin(), it);\n// `it` points to the second element of the vector, `index` is 1\n\nstd::vector\u003cint\u003e::iterator missing = std::find(v.begin(), v.end(), 10);\nstd::vector\u003cint\u003e::difference_type index_missing = std::distance(v.begin(), missing);\n// `missing` is v.end(), `index_missing` is 5 (ie. size of the vector)",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522052573,
        "id": "d6aa4bd1-5876-45d1-bcd5-1c5b2db898d0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522052573,
        "parent_id": "825140ca-f4ad-4d5f-ac8a-978dee5e3e95",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "std::vector\u003cint\u003e v { 5, 4, 3, 2, 1 };\n\nauto it = std::find(v.begin(), v.end(), 4);\nauto index = std::distance(v.begin(), it);\n// `it` points to the second element of the vector, `index` is 1\n\nauto missing = std::find(v.begin(), v.end(), 10);\nauto index_missing = std::distance(v.begin(), missing);\n// `missing` is v.end(), `index_missing` is 5 (ie. size of the vector)"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "std::vector\u003cint\u003e v { 5, 4, 3, 2, 1 };\n\nauto it = std::find(v.begin(), v.end(), 4);\nauto index = std::distance(v.begin(), it);\n// `it` points to the second element of the vector, `index` is 1\n\nauto missing = std::find(v.begin(), v.end(), 10);\nauto index_missing = std::distance(v.begin(), missing);\n// `missing` is v.end(), `index_missing` is 5 (ie. size of the vector)",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522052573,
        "id": "8f01dceb-46a4-44ec-a827-4b19ab6438ec",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522052573,
        "parent_id": "825140ca-f4ad-4d5f-ac8a-978dee5e3e95",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If you need to perform many searches in a large vector, then you may want to consider sorting the vector first, before using the "
            ],
            [
              "binary_search",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://en.cppreference.com/w/cpp/algorithm/binary_search"
                ]
              ]
            ],
            [
              " algorithm."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If you need to perform many searches in a large vector, then you may want to consider sorting the vector first, before using the "
          },
          {
            "Text": "binary_search",
            "AttrFlags": 2,
            "Link": "http://en.cppreference.com/w/cpp/algorithm/binary_search"
          },
          {
            "Text": " algorithm."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522052573,
        "id": "f498e1d4-3947-4b7e-92f5-74b3c8c79a33",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522052573,
        "parent_id": "825140ca-f4ad-4d5f-ac8a-978dee5e3e95",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522052574,
        "id": "7cbbbbcc-b68e-47a5-9a38-82e3fa4f7cd4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522052574,
        "parent_id": "825140ca-f4ad-4d5f-ac8a-978dee5e3e95",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To find the first element in a vector that satisfies a condition, "
            ],
            [
              "std::find_if",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can be used. In addition to the two parameters given to "
            ],
            [
              "std::find",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "std::find_if",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " accepts a third argument which is a function object or function pointer to a predicate function. The predicate should accept an element from the container as an argument and return a value convertible to "
            ],
            [
              "bool",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", without modifying the container:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To find the first element in a vector that satisfies a condition, "
          },
          {
            "Text": "std::find_if",
            "AttrFlags": 2
          },
          {
            "Text": " can be used. In addition to the two parameters given to "
          },
          {
            "Text": "std::find",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "std::find_if",
            "AttrFlags": 2
          },
          {
            "Text": " accepts a third argument which is a function object or function pointer to a predicate function. The predicate should accept an element from the container as an argument and return a value convertible to "
          },
          {
            "Text": "bool",
            "AttrFlags": 2
          },
          {
            "Text": ", without modifying the container:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522052574,
        "id": "04298b4e-c8ad-459e-8512-1016b5f7882b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522052574,
        "parent_id": "825140ca-f4ad-4d5f-ac8a-978dee5e3e95",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "bool isEven(int val) {\n    return (val % 2 == 0); \n}\n\nstruct moreThan {\n    moreThan(int limit) : _limit(limit) {}\n    \n    bool operator()(int val) {\n        return val \u003e _limit;\n    }\n    \n    int _limit;\n};\n\nstatic const int arr[] = {1, 3, 7, 8};\nstd::vector\u003cint\u003e v (arr, arr + sizeof(arr) / sizeof(arr[0]) );\n    \nstd::vector\u003cint\u003e::iterator it = std::find_if(v.begin(), v.end(), isEven);\n// `it` points to 8, the first even element\n\nstd::vector\u003cint\u003e::iterator missing = std::find_if(v.begin(), v.end(), moreThan(10));\n// `missing` is v.end(), as no element is greater than 10"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "bool isEven(int val) {\n    return (val % 2 == 0); \n}\n\nstruct moreThan {\n    moreThan(int limit) : _limit(limit) {}\n    \n    bool operator()(int val) {\n        return val \u003e _limit;\n    }\n    \n    int _limit;\n};\n\nstatic const int arr[] = {1, 3, 7, 8};\nstd::vector\u003cint\u003e v (arr, arr + sizeof(arr) / sizeof(arr[0]) );\n    \nstd::vector\u003cint\u003e::iterator it = std::find_if(v.begin(), v.end(), isEven);\n// `it` points to 8, the first even element\n\nstd::vector\u003cint\u003e::iterator missing = std::find_if(v.begin(), v.end(), moreThan(10));\n// `missing` is v.end(), as no element is greater than 10",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522052574,
        "id": "3c8a9e32-1d59-4398-bf8c-e0da92df9951",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522052574,
        "parent_id": "825140ca-f4ad-4d5f-ac8a-978dee5e3e95",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// find the first value that is even\nstd::vector\u003cint\u003e v = {1, 3, 7, 8};\nauto it = std::find_if(v.begin(), v.end(), [](int val){return val % 2 == 0;});\n// `it` points to 8, the first even element\n\nauto missing = std::find_if(v.begin(), v.end(), [](int val){return val \u003e 10;});\n// `missing` is v.end(), as no element is greater than 10"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// find the first value that is even\nstd::vector\u003cint\u003e v = {1, 3, 7, 8};\nauto it = std::find_if(v.begin(), v.end(), [](int val){return val % 2 == 0;});\n// `it` points to 8, the first even element\n\nauto missing = std::find_if(v.begin(), v.end(), [](int val){return val \u003e 10;});\n// `missing` is v.end(), as no element is greater than 10",
        "code_language": "Plain Text"
      }
    ],
    "title": "Finding an Element in std::vector",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}