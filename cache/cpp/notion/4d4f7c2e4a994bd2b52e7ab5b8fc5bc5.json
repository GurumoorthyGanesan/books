{
  "ID": "4d4f7c2e-4a99-4bd2-b52e-7ab5b8fc5bc5",
  "Root": {
    "alive": true,
    "content": [
      "bfe7242c-41c4-4777-877f-d562c5f17998",
      "dbd30af5-40ed-45cd-b612-cc64ac0c5ace",
      "46b4fae7-3e80-46d7-867f-4083ddb27218",
      "80329701-2d29-46cc-8881-e740df9524c2",
      "876158fa-8d96-4f40-b5cb-a2c9543abffb",
      "b858e3d1-e2d6-4c39-b92d-db6deb3c9675",
      "24659d95-506b-4e2c-9c4a-e53fc8895f01",
      "b0dd86cf-fd1e-4cc4-ad1e-aeb5058c733f",
      "6d8c21c5-a387-4034-a55a-da02df518b37",
      "a7cc9fca-199a-439e-8814-cb35bbd7fa36",
      "0f35d6a8-7d57-4ad1-a367-91b29f933dec"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522669584,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "4d4f7c2e-4a99-4bd2-b52e-7ab5b8fc5bc5",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550710560000,
    "parent_id": "5fbdea23-a3bd-48e3-9bb9-c7ca69fd9aa2",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Steps of Overload Resolution"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522669579,
        "id": "bfe7242c-41c4-4777-877f-d562c5f17998",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522669579,
        "parent_id": "4d4f7c2e-4a99-4bd2-b52e-7ab5b8fc5bc5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The steps of overload resolution are:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The steps of overload resolution are:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522669582,
        "id": "dbd30af5-40ed-45cd-b612-cc64ac0c5ace",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522669582,
        "parent_id": "4d4f7c2e-4a99-4bd2-b52e-7ab5b8fc5bc5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Find candidate functions via name lookup. Unqualified calls will perform both regular unqualified lookup as well as argument-dependent lookup (if applicable)."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Find candidate functions via name lookup. Unqualified calls will perform both regular unqualified lookup as well as argument-dependent lookup (if applicable)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522669582,
        "id": "46b4fae7-3e80-46d7-867f-4083ddb27218",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522669582,
        "parent_id": "4d4f7c2e-4a99-4bd2-b52e-7ab5b8fc5bc5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Filter the set of candidate functions to a set of "
            ],
            [
              "viable",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " functions. A viable function for which there exists an implicit conversion sequence between the arguments the function is called with and the parameters the function takes."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Filter the set of candidate functions to a set of "
          },
          {
            "Text": "viable",
            "AttrFlags": 4
          },
          {
            "Text": " functions. A viable function for which there exists an implicit conversion sequence between the arguments the function is called with and the parameters the function takes."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522669582,
        "id": "80329701-2d29-46cc-8881-e740df9524c2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522669582,
        "parent_id": "4d4f7c2e-4a99-4bd2-b52e-7ab5b8fc5bc5",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "void f(char);          // (1)\nvoid f(int ) = delete; // (2)\nvoid f();              // (3)\nvoid f(int\u0026 );         // (4)\n\nf(4); // 1,2 are viable (even though 2 is deleted!) \n      // 3 is not viable because the argument lists don't match\n      // 4 is not viable because we cannot bind a temporary to \n      //     a non-const lvalue reference"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "void f(char);          // (1)\nvoid f(int ) = delete; // (2)\nvoid f();              // (3)\nvoid f(int\u0026 );         // (4)\n\nf(4); // 1,2 are viable (even though 2 is deleted!) \n      // 3 is not viable because the argument lists don't match\n      // 4 is not viable because we cannot bind a temporary to \n      //     a non-const lvalue reference",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522669583,
        "id": "876158fa-8d96-4f40-b5cb-a2c9543abffb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522669583,
        "parent_id": "4d4f7c2e-4a99-4bd2-b52e-7ab5b8fc5bc5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Pick the best viable candidate. A viable function "
            ],
            [
              "F1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is a better function than another viable function "
            ],
            [
              "F2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " if the implicit conversion sequence for each argument in "
            ],
            [
              "F1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is not worse than the corresponding implicit conversion sequence in "
            ],
            [
              "F2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", and…:"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Pick the best viable candidate. A viable function "
          },
          {
            "Text": "F1",
            "AttrFlags": 2
          },
          {
            "Text": " is a better function than another viable function "
          },
          {
            "Text": "F2",
            "AttrFlags": 2
          },
          {
            "Text": " if the implicit conversion sequence for each argument in "
          },
          {
            "Text": "F1",
            "AttrFlags": 2
          },
          {
            "Text": " is not worse than the corresponding implicit conversion sequence in "
          },
          {
            "Text": "F2",
            "AttrFlags": 2
          },
          {
            "Text": ", and…:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522669583,
        "id": "b858e3d1-e2d6-4c39-b92d-db6deb3c9675",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522669583,
        "parent_id": "4d4f7c2e-4a99-4bd2-b52e-7ab5b8fc5bc5",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "3.1. For some argument, the implicit conversion sequence for that argument in `F1` is a better conversion sequence than for that argument in `F2`, or\n\n    void f(int );  // (1)\n    void f(char ); // (2)\n\n    f(4);  // call (1), better conversion sequence\n\n3.2. In a user-defined conversion, the standard conversion sequence from the return of `F1` to the destination type is a better conversion sequence than that of the return type of `F2`, or\n\n    struct A \n    {\n        operator int();\n        operator double();\n    } a;\n\n    int i = a; // a.operator int() is better than a.operator double() and a conversion\n    float f = a; // ambiguous\n\u003c!-- --\u003e\n\n3.3. In a direct reference binding, `F1` has the same kind of reference by `F2` is not, or\n\n    struct A \n    {\n        operator X\u0026();  // #1\n        operator X\u0026\u0026(); // #2\n    };\n    A a;\n    X\u0026 lx = a;  // calls #1\n    X\u0026\u0026 rx = a; // calls #2\n\n3.4. `F1` is not a function template specialization, but `F2` is, or\n\n    template \u003cclass T\u003e void f(T ); // #1\n    void f(int );                  // #2\n\n    f(42); // calls #2, the non-template\n\n3.5. `F1` and `F2` are both function template specializations, but `F1` is more specialized than `F2`.\n\n    template \u003cclass T\u003e void f(T );  // #1\n    template \u003cclass T\u003e void f(T* ); // #2\n\n    int* p;\n    f(p); // calls #2, more specialized"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "3.1. For some argument, the implicit conversion sequence for that argument in `F1` is a better conversion sequence than for that argument in `F2`, or\n\n    void f(int );  // (1)\n    void f(char ); // (2)\n\n    f(4);  // call (1), better conversion sequence\n\n3.2. In a user-defined conversion, the standard conversion sequence from the return of `F1` to the destination type is a better conversion sequence than that of the return type of `F2`, or\n\n    struct A \n    {\n        operator int();\n        operator double();\n    } a;\n\n    int i = a; // a.operator int() is better than a.operator double() and a conversion\n    float f = a; // ambiguous\n\u003c!-- --\u003e\n\n3.3. In a direct reference binding, `F1` has the same kind of reference by `F2` is not, or\n\n    struct A \n    {\n        operator X\u0026();  // #1\n        operator X\u0026\u0026(); // #2\n    };\n    A a;\n    X\u0026 lx = a;  // calls #1\n    X\u0026\u0026 rx = a; // calls #2\n\n3.4. `F1` is not a function template specialization, but `F2` is, or\n\n    template \u003cclass T\u003e void f(T ); // #1\n    void f(int );                  // #2\n\n    f(42); // calls #2, the non-template\n\n3.5. `F1` and `F2` are both function template specializations, but `F1` is more specialized than `F2`.\n\n    template \u003cclass T\u003e void f(T );  // #1\n    template \u003cclass T\u003e void f(T* ); // #2\n\n    int* p;\n    f(p); // calls #2, more specialized",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522669583,
        "id": "24659d95-506b-4e2c-9c4a-e53fc8895f01",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522669583,
        "parent_id": "4d4f7c2e-4a99-4bd2-b52e-7ab5b8fc5bc5",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522669583,
        "id": "b0dd86cf-fd1e-4cc4-ad1e-aeb5058c733f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522669583,
        "parent_id": "4d4f7c2e-4a99-4bd2-b52e-7ab5b8fc5bc5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The ordering here is significant. The better conversion sequence check happens before the template vs non-template check. This leads to a common error with overloading on forwarding reference:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The ordering here is significant. The better conversion sequence check happens before the template vs non-template check. This leads to a common error with overloading on forwarding reference:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522669583,
        "id": "6d8c21c5-a387-4034-a55a-da02df518b37",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522669583,
        "parent_id": "4d4f7c2e-4a99-4bd2-b52e-7ab5b8fc5bc5",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "struct A {\n    A(A const\u0026 ); // #1\n    \n    template \u003cclass T\u003e\n    A(T\u0026\u0026 );      // #2, not constrained\n};\n\nA a;\nA b(a); // calls #2!\n        // #1 is not a template but #2 resolves to\n        // A(A\u0026 ), which is a less cv-qualified reference than #1\n        // which makes it a better implicit conversion sequence"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "struct A {\n    A(A const\u0026 ); // #1\n    \n    template \u003cclass T\u003e\n    A(T\u0026\u0026 );      // #2, not constrained\n};\n\nA a;\nA b(a); // calls #2!\n        // #1 is not a template but #2 resolves to\n        // A(A\u0026 ), which is a less cv-qualified reference than #1\n        // which makes it a better implicit conversion sequence",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522669584,
        "id": "a7cc9fca-199a-439e-8814-cb35bbd7fa36",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522669584,
        "parent_id": "4d4f7c2e-4a99-4bd2-b52e-7ab5b8fc5bc5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If there’s no single best viable candidate at the end, the call is ambiguous:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If there’s no single best viable candidate at the end, the call is ambiguous:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522669584,
        "id": "0f35d6a8-7d57-4ad1-a367-91b29f933dec",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522669584,
        "parent_id": "4d4f7c2e-4a99-4bd2-b52e-7ab5b8fc5bc5",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "void f(double ) { }\nvoid f(float ) { }\n\nf(42); // error: ambiguous"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "void f(double ) { }\nvoid f(float ) { }\n\nf(42); // error: ambiguous",
        "code_language": "Plain Text"
      }
    ],
    "title": "Steps of Overload Resolution",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}