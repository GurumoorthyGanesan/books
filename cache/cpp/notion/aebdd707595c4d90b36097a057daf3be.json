{
  "ID": "aebdd707-595c-4d90-b360-97a057daf3be",
  "Root": {
    "alive": true,
    "content": [
      "2b925e94-5a68-4307-8bdf-58ee993ac708",
      "d809bc13-dbd3-4893-9bb0-ba8cc6ce7443",
      "63ce645a-4a9a-4229-a11c-7b3d0e607028",
      "2724e281-503c-4dfd-989d-db4ae226d93d",
      "d757e948-52fe-42d2-a28c-98a5790dff1b",
      "2cc02c11-06af-4788-81cc-00beba3e99f6",
      "c6357418-b57d-4d4a-99b7-d3b33356cf71",
      "7e2766a0-ba75-46a0-9de7-9b77c18104ea",
      "33bb3b67-d8c2-4bab-91b0-e2fb7bded17d",
      "4c0ba13f-2777-42fd-a1e0-9551f60cff77",
      "f0dcc0af-9a41-45de-8035-df3b9b949ccc",
      "c0eab11b-56f4-4e73-af11-d1ff2293dfd6",
      "9eedb28b-77a3-4c8e-9fc5-719fedb2e78b",
      "43a5973b-9054-4ed7-be81-7f0fe5b8cd6f",
      "e1b48829-b2ce-4cfa-a082-9bd942b89d49",
      "1638df48-3aa5-4428-9fe4-3064d674ee48"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522309496,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "aebdd707-595c-4d90-b360-97a057daf3be",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550655060000,
    "parent_id": "0b17f7b9-11d1-4229-931e-966fb51d1ba9",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "enable_if"
        ]
      ]
    },
    "type": "page",
    "version": 10,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522309490,
        "id": "2b925e94-5a68-4307-8bdf-58ee993ac708",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522309490,
        "parent_id": "aebdd707-595c-4d90-b360-97a057daf3be",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "std::enable_if",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is a convenient utility to use boolean conditions to trigger SFINAE. It is defined as:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "std::enable_if",
            "AttrFlags": 2
          },
          {
            "Text": " is a convenient utility to use boolean conditions to trigger SFINAE. It is defined as:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522309493,
        "id": "d809bc13-dbd3-4893-9bb0-ba8cc6ce7443",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522309493,
        "parent_id": "aebdd707-595c-4d90-b360-97a057daf3be",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "template \u003cbool Cond, typename Result=void\u003e\nstruct enable_if { };\n\ntemplate \u003ctypename Result\u003e\nstruct enable_if\u003ctrue, Result\u003e {\n    using type = Result;\n};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "template \u003cbool Cond, typename Result=void\u003e\nstruct enable_if { };\n\ntemplate \u003ctypename Result\u003e\nstruct enable_if\u003ctrue, Result\u003e {\n    using type = Result;\n};",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522309493,
        "id": "63ce645a-4a9a-4229-a11c-7b3d0e607028",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522309493,
        "parent_id": "aebdd707-595c-4d90-b360-97a057daf3be",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "That is, "
            ],
            [
              "enable_if\u003ctrue, R\u003e::type",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is an alias for "
            ],
            [
              "R",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", whereas "
            ],
            [
              "enable_if\u003cfalse, T\u003e::type",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is ill-formed as that specialization of "
            ],
            [
              "enable_if",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " does not have a "
            ],
            [
              "type",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " member type."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "That is, "
          },
          {
            "Text": "enable_if\u003ctrue, R\u003e::type",
            "AttrFlags": 2
          },
          {
            "Text": " is an alias for "
          },
          {
            "Text": "R",
            "AttrFlags": 2
          },
          {
            "Text": ", whereas "
          },
          {
            "Text": "enable_if\u003cfalse, T\u003e::type",
            "AttrFlags": 2
          },
          {
            "Text": " is ill-formed as that specialization of "
          },
          {
            "Text": "enable_if",
            "AttrFlags": 2
          },
          {
            "Text": " does not have a "
          },
          {
            "Text": "type",
            "AttrFlags": 2
          },
          {
            "Text": " member type."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522309493,
        "id": "2724e281-503c-4dfd-989d-db4ae226d93d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522309493,
        "parent_id": "aebdd707-595c-4d90-b360-97a057daf3be",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "std::enable_if",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can be used to constrain templates:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "std::enable_if",
            "AttrFlags": 2
          },
          {
            "Text": " can be used to constrain templates:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522309493,
        "id": "d757e948-52fe-42d2-a28c-98a5790dff1b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522309493,
        "parent_id": "aebdd707-595c-4d90-b360-97a057daf3be",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int negate(int i) { return -i; }\n\ntemplate \u003cclass F\u003e\nauto negate(F f) { return -f(); }"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int negate(int i) { return -i; }\n\ntemplate \u003cclass F\u003e\nauto negate(F f) { return -f(); }",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522309493,
        "id": "2cc02c11-06af-4788-81cc-00beba3e99f6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522309493,
        "parent_id": "aebdd707-595c-4d90-b360-97a057daf3be",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Here, a call to "
            ],
            [
              "negate(1)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " would fail due to ambiguity. But the second overload is not intended to be used for integral types, so we can add:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Here, a call to "
          },
          {
            "Text": "negate(1)",
            "AttrFlags": 2
          },
          {
            "Text": " would fail due to ambiguity. But the second overload is not intended to be used for integral types, so we can add:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522309494,
        "id": "c6357418-b57d-4d4a-99b7-d3b33356cf71",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522309494,
        "parent_id": "aebdd707-595c-4d90-b360-97a057daf3be",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int negate(int i) { return -i; }\n\ntemplate \u003cclass F, class = typename std::enable_if\u003c!std::is_arithmetic\u003cF\u003e::value\u003e::type\u003e\nauto negate(F f) { return -f(); }"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int negate(int i) { return -i; }\n\ntemplate \u003cclass F, class = typename std::enable_if\u003c!std::is_arithmetic\u003cF\u003e::value\u003e::type\u003e\nauto negate(F f) { return -f(); }",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522309494,
        "id": "7e2766a0-ba75-46a0-9de7-9b77c18104ea",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522309494,
        "parent_id": "aebdd707-595c-4d90-b360-97a057daf3be",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Now, instantiating "
            ],
            [
              "negate\u003cint\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " would result in a substitution failure since "
            ],
            [
              "!std::is_arithmetic\u003cint\u003e::value",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is "
            ],
            [
              "false",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Due to SFINAE, this is not a hard error, this candidate is simply removed from the overload set. As a result, "
            ],
            [
              "negate(1)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " only has one single viable candidate - which is then called."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Now, instantiating "
          },
          {
            "Text": "negate\u003cint\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " would result in a substitution failure since "
          },
          {
            "Text": "!std::is_arithmetic\u003cint\u003e::value",
            "AttrFlags": 2
          },
          {
            "Text": " is "
          },
          {
            "Text": "false",
            "AttrFlags": 2
          },
          {
            "Text": ". Due to SFINAE, this is not a hard error, this candidate is simply removed from the overload set. As a result, "
          },
          {
            "Text": "negate(1)",
            "AttrFlags": 2
          },
          {
            "Text": " only has one single viable candidate - which is then called."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522309494,
        "id": "33bb3b67-d8c2-4bab-91b0-e2fb7bded17d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522309494,
        "parent_id": "aebdd707-595c-4d90-b360-97a057daf3be",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When to use it"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "When to use it"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522309494,
        "id": "4c0ba13f-2777-42fd-a1e0-9551f60cff77",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522309494,
        "parent_id": "aebdd707-595c-4d90-b360-97a057daf3be",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It’s worth keeping in mind that "
            ],
            [
              "std::enable_if",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is a helper "
            ],
            [
              "on top",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " of SFINAE, but it’s not what makes SFINAE work in the first place. Let’s consider these two alternatives for implementing functionality similar to "
            ],
            [
              "std::size",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", i.e. an overload set "
            ],
            [
              "size(arg)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " that produces the size of a container or array:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It’s worth keeping in mind that "
          },
          {
            "Text": "std::enable_if",
            "AttrFlags": 2
          },
          {
            "Text": " is a helper "
          },
          {
            "Text": "on top",
            "AttrFlags": 4
          },
          {
            "Text": " of SFINAE, but it’s not what makes SFINAE work in the first place. Let’s consider these two alternatives for implementing functionality similar to "
          },
          {
            "Text": "std::size",
            "AttrFlags": 2
          },
          {
            "Text": ", i.e. an overload set "
          },
          {
            "Text": "size(arg)",
            "AttrFlags": 2
          },
          {
            "Text": " that produces the size of a container or array:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522309494,
        "id": "f0dcc0af-9a41-45de-8035-df3b9b949ccc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522309494,
        "parent_id": "aebdd707-595c-4d90-b360-97a057daf3be",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// for containers\ntemplate\u003ctypename Cont\u003e\nauto size1(Cont const\u0026 cont) -\u003e decltype( cont.size() );\n\n// for arrays\ntemplate\u003ctypename Elt, std::size_t Size\u003e\nstd::size_t size1(Elt const(\u0026arr)[Size]);\n\n// implementation omitted\ntemplate\u003ctypename Cont\u003e\nstruct is_sizeable;\n\n// for containers\ntemplate\u003ctypename Cont, std::enable_if_t\u003cstd::is_sizeable\u003cCont\u003e::value, int\u003e = 0\u003e\nauto size2(Cont const\u0026 cont);\n\n// for arrays\ntemplate\u003ctypename Elt, std::size_t Size\u003e\nstd::size_t size2(Elt const(\u0026arr)[Size]);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// for containers\ntemplate\u003ctypename Cont\u003e\nauto size1(Cont const\u0026 cont) -\u003e decltype( cont.size() );\n\n// for arrays\ntemplate\u003ctypename Elt, std::size_t Size\u003e\nstd::size_t size1(Elt const(\u0026arr)[Size]);\n\n// implementation omitted\ntemplate\u003ctypename Cont\u003e\nstruct is_sizeable;\n\n// for containers\ntemplate\u003ctypename Cont, std::enable_if_t\u003cstd::is_sizeable\u003cCont\u003e::value, int\u003e = 0\u003e\nauto size2(Cont const\u0026 cont);\n\n// for arrays\ntemplate\u003ctypename Elt, std::size_t Size\u003e\nstd::size_t size2(Elt const(\u0026arr)[Size]);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522309495,
        "id": "c0eab11b-56f4-4e73-af11-d1ff2293dfd6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522309495,
        "parent_id": "aebdd707-595c-4d90-b360-97a057daf3be",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Assuming that "
            ],
            [
              "is_sizeable",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is written appropriately, these two declarations should be exactly equivalent with respect to SFINAE. Which is the easiest to write, and which is the easiest to review and understand at a glance?"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Assuming that "
          },
          {
            "Text": "is_sizeable",
            "AttrFlags": 2
          },
          {
            "Text": " is written appropriately, these two declarations should be exactly equivalent with respect to SFINAE. Which is the easiest to write, and which is the easiest to review and understand at a glance?"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522309495,
        "id": "9eedb28b-77a3-4c8e-9fc5-719fedb2e78b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522309495,
        "parent_id": "aebdd707-595c-4d90-b360-97a057daf3be",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Now let’s consider how we might want to implement arithmetic helpers that avoid signed integer overflow in favour of wrap around or modular behaviour. Which is to say that e.g. "
            ],
            [
              "incr(i, 3)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " would be the same as "
            ],
            [
              "i += 3",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " save for the fact that the result would always be defined even if "
            ],
            [
              "i",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is an "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " with value "
            ],
            [
              "INT_MAX",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". These are two possible alternatives:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Now let’s consider how we might want to implement arithmetic helpers that avoid signed integer overflow in favour of wrap around or modular behaviour. Which is to say that e.g. "
          },
          {
            "Text": "incr(i, 3)",
            "AttrFlags": 2
          },
          {
            "Text": " would be the same as "
          },
          {
            "Text": "i += 3",
            "AttrFlags": 2
          },
          {
            "Text": " save for the fact that the result would always be defined even if "
          },
          {
            "Text": "i",
            "AttrFlags": 2
          },
          {
            "Text": " is an "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": " with value "
          },
          {
            "Text": "INT_MAX",
            "AttrFlags": 2
          },
          {
            "Text": ". These are two possible alternatives:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522309495,
        "id": "43a5973b-9054-4ed7-be81-7f0fe5b8cd6f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522309495,
        "parent_id": "aebdd707-595c-4d90-b360-97a057daf3be",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// handle signed types\ntemplate\u003ctypename Int\u003e\nauto incr1(Int\u0026 target, Int amount)\n-\u003e std::void_t\u003cint[static_cast\u003cInt\u003e(-1) \u003c static_cast\u003cInt\u003e(0)]\u003e;\n\n// handle unsigned types by just doing target += amount\n// since unsigned arithmetic already behaves as intended\ntemplate\u003ctypename Int\u003e\nauto incr1(Int\u0026 target, Int amount)\n-\u003e std::void_t\u003cint[static_cast\u003cInt\u003e(0) \u003c static_cast\u003cInt\u003e(-1)]\u003e;\n \ntemplate\u003ctypename Int, std::enable_if_t\u003cstd::is_signed\u003cInt\u003e::value, int\u003e = 0\u003e\nvoid incr2(Int\u0026 target, Int amount);\n \ntemplate\u003ctypename Int, std::enable_if_t\u003cstd::is_unsigned\u003cInt\u003e::value, int\u003e = 0\u003e\nvoid incr2(Int\u0026 target, Int amount);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// handle signed types\ntemplate\u003ctypename Int\u003e\nauto incr1(Int\u0026 target, Int amount)\n-\u003e std::void_t\u003cint[static_cast\u003cInt\u003e(-1) \u003c static_cast\u003cInt\u003e(0)]\u003e;\n\n// handle unsigned types by just doing target += amount\n// since unsigned arithmetic already behaves as intended\ntemplate\u003ctypename Int\u003e\nauto incr1(Int\u0026 target, Int amount)\n-\u003e std::void_t\u003cint[static_cast\u003cInt\u003e(0) \u003c static_cast\u003cInt\u003e(-1)]\u003e;\n \ntemplate\u003ctypename Int, std::enable_if_t\u003cstd::is_signed\u003cInt\u003e::value, int\u003e = 0\u003e\nvoid incr2(Int\u0026 target, Int amount);\n \ntemplate\u003ctypename Int, std::enable_if_t\u003cstd::is_unsigned\u003cInt\u003e::value, int\u003e = 0\u003e\nvoid incr2(Int\u0026 target, Int amount);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522309495,
        "id": "e1b48829-b2ce-4cfa-a082-9bd942b89d49",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522309495,
        "parent_id": "aebdd707-595c-4d90-b360-97a057daf3be",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Once again which is the easiest to write, and which is the easiest to review and understand at a glance?"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Once again which is the easiest to write, and which is the easiest to review and understand at a glance?"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522309495,
        "id": "1638df48-3aa5-4428-9fe4-3064d674ee48",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522309495,
        "parent_id": "aebdd707-595c-4d90-b360-97a057daf3be",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A strength of "
            ],
            [
              "std::enable_if",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is how it plays with refactoring and API design. If "
            ],
            [
              "is_sizeable\u003cCont\u003e::value",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is meant to reflect whether "
            ],
            [
              "cont.size()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is valid then just using the expression as it appears for "
            ],
            [
              "size1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can be more concise, although that could depend on whether "
            ],
            [
              "is_sizeable",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " would be used in several places or not. Contrast that with "
            ],
            [
              "std::is_signed",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " which reflects its intention much more clearly than when its implementation leaks into the declaration of "
            ],
            [
              "incr1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A strength of "
          },
          {
            "Text": "std::enable_if",
            "AttrFlags": 2
          },
          {
            "Text": " is how it plays with refactoring and API design. If "
          },
          {
            "Text": "is_sizeable\u003cCont\u003e::value",
            "AttrFlags": 2
          },
          {
            "Text": " is meant to reflect whether "
          },
          {
            "Text": "cont.size()",
            "AttrFlags": 2
          },
          {
            "Text": " is valid then just using the expression as it appears for "
          },
          {
            "Text": "size1",
            "AttrFlags": 2
          },
          {
            "Text": " can be more concise, although that could depend on whether "
          },
          {
            "Text": "is_sizeable",
            "AttrFlags": 2
          },
          {
            "Text": " would be used in several places or not. Contrast that with "
          },
          {
            "Text": "std::is_signed",
            "AttrFlags": 2
          },
          {
            "Text": " which reflects its intention much more clearly than when its implementation leaks into the declaration of "
          },
          {
            "Text": "incr1",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      }
    ],
    "title": "enable_if",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}