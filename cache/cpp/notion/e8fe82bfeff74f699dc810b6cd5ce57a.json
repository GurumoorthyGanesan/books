{
  "ID": "e8fe82bf-eff7-4f69-9dc8-10b6cd5ce57a",
  "Root": {
    "alive": true,
    "content": [
      "2c8def57-44f1-4885-a214-1e56559135ea",
      "508b2bb7-4bc0-4031-ac51-1a444557420a",
      "3d312da7-ea70-48c9-9445-859983531cf5",
      "a87d5736-ea17-47d2-b81b-e082abbe8226",
      "0c068ca7-14fc-4ba0-8920-8c6e55ae8c14",
      "e1029d87-7a93-4d31-94cf-9f28ae47a71e",
      "86e85893-c3b0-4336-9f58-ecd2ca85b052",
      "c9bd70eb-f1a2-4b18-90d1-10fff3e07472",
      "aecde101-d31c-42b0-85be-b24eda02e2c0",
      "9ad78b50-5ac3-4e2f-ad27-c1bf9898a673",
      "9e87ff50-e841-4090-9656-f4183505f18f",
      "cc7c7bca-23e6-437a-b9d6-47cca38b6e6f",
      "0664f62c-66f1-4bbc-bab5-0fd1300618d0",
      "86aae6ac-8a1a-44a4-8358-9cfbe6847e47",
      "62d01b8d-d867-4a58-8917-b5539d25950a",
      "28d32fed-c537-4efd-b454-6fd33e778c75"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522027668,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "e8fe82bf-eff7-4f69-9dc8-10b6cd5ce57a",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550656020000,
    "parent_id": "402ef4da-a4e3-4503-ab08-9a4aa56821b5",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Using custom deleters to create a wrapper to a C interface"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522027661,
        "id": "2c8def57-44f1-4885-a214-1e56559135ea",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522027661,
        "parent_id": "e8fe82bf-eff7-4f69-9dc8-10b6cd5ce57a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Many C interfaces such as "
            ],
            [
              "SDL2",
              [
                [
                  "a",
                  "https://www.libsdl.org/"
                ]
              ]
            ],
            [
              " have their own deletion functions. This means that you cannot use smart pointers directly:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Many C interfaces such as "
          },
          {
            "Text": "SDL2",
            "Link": "https://www.libsdl.org/"
          },
          {
            "Text": " have their own deletion functions. This means that you cannot use smart pointers directly:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522027663,
        "id": "508b2bb7-4bc0-4031-ac51-1a444557420a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522027663,
        "parent_id": "e8fe82bf-eff7-4f69-9dc8-10b6cd5ce57a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "std::unique_ptr\u003cSDL_Surface\u003e a; // won't work, UNSAFE!"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "std::unique_ptr\u003cSDL_Surface\u003e a; // won't work, UNSAFE!",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522027664,
        "id": "3d312da7-ea70-48c9-9445-859983531cf5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522027664,
        "parent_id": "e8fe82bf-eff7-4f69-9dc8-10b6cd5ce57a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Instead, you need to define your own deleter. The examples here use the "
            ],
            [
              "SDL_Surface",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://wiki.libsdl.org/SDL_Surface"
                ]
              ]
            ],
            [
              " structure which should be freed using the "
            ],
            [
              "SDL_FreeSurface()",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://wiki.libsdl.org/SDL_FreeSurface"
                ]
              ]
            ],
            [
              " function, but they should be adaptable to many other C interfaces."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Instead, you need to define your own deleter. The examples here use the "
          },
          {
            "Text": "SDL_Surface",
            "AttrFlags": 2,
            "Link": "https://wiki.libsdl.org/SDL_Surface"
          },
          {
            "Text": " structure which should be freed using the "
          },
          {
            "Text": "SDL_FreeSurface()",
            "AttrFlags": 2,
            "Link": "https://wiki.libsdl.org/SDL_FreeSurface"
          },
          {
            "Text": " function, but they should be adaptable to many other C interfaces."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522027664,
        "id": "a87d5736-ea17-47d2-b81b-e082abbe8226",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522027664,
        "parent_id": "e8fe82bf-eff7-4f69-9dc8-10b6cd5ce57a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The deleter must be callable with a pointer argument, and therefore can be e.g. a simple function pointer:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The deleter must be callable with a pointer argument, and therefore can be e.g. a simple function pointer:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522027664,
        "id": "0c068ca7-14fc-4ba0-8920-8c6e55ae8c14",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522027664,
        "parent_id": "e8fe82bf-eff7-4f69-9dc8-10b6cd5ce57a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "std::unique_ptr\u003cSDL_Surface, void(*)(SDL_Surface*)\u003e a(pointer, SDL_FreeSurface);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "std::unique_ptr\u003cSDL_Surface, void(*)(SDL_Surface*)\u003e a(pointer, SDL_FreeSurface);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522027664,
        "id": "e1029d87-7a93-4d31-94cf-9f28ae47a71e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522027664,
        "parent_id": "e8fe82bf-eff7-4f69-9dc8-10b6cd5ce57a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Any other callable object will work, too, for example a class with an "
            ],
            [
              "operator()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Any other callable object will work, too, for example a class with an "
          },
          {
            "Text": "operator()",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522027664,
        "id": "86e85893-c3b0-4336-9f58-ecd2ca85b052",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522027664,
        "parent_id": "e8fe82bf-eff7-4f69-9dc8-10b6cd5ce57a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "struct SurfaceDeleter {\n    void operator()(SDL_Surface* surf) {\n        SDL_FreeSurface(surf);\n    }\n};\n\nstd::unique_ptr\u003cSDL_Surface, SurfaceDeleter\u003e a(pointer, SurfaceDeleter{}); // safe\nstd::unique_ptr\u003cSDL_Surface, SurfaceDeleter\u003e b(pointer); // equivalent to the above\n                                                         // as the deleter is value-initialized"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "struct SurfaceDeleter {\n    void operator()(SDL_Surface* surf) {\n        SDL_FreeSurface(surf);\n    }\n};\n\nstd::unique_ptr\u003cSDL_Surface, SurfaceDeleter\u003e a(pointer, SurfaceDeleter{}); // safe\nstd::unique_ptr\u003cSDL_Surface, SurfaceDeleter\u003e b(pointer); // equivalent to the above\n                                                         // as the deleter is value-initialized",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522027665,
        "id": "c9bd70eb-f1a2-4b18-90d1-10fff3e07472",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522027665,
        "parent_id": "e8fe82bf-eff7-4f69-9dc8-10b6cd5ce57a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This not only provides you with safe, zero overhead (if you use "
            ],
            [
              "unique_ptr",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://en.cppreference.com/w/cpp/memory/unique_ptr"
                ]
              ]
            ],
            [
              ") automatic memory management, you also get exception safety."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This not only provides you with safe, zero overhead (if you use "
          },
          {
            "Text": "unique_ptr",
            "AttrFlags": 2,
            "Link": "http://en.cppreference.com/w/cpp/memory/unique_ptr"
          },
          {
            "Text": ") automatic memory management, you also get exception safety."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522027666,
        "id": "aecde101-d31c-42b0-85be-b24eda02e2c0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522027666,
        "parent_id": "e8fe82bf-eff7-4f69-9dc8-10b6cd5ce57a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note that the deleter is part of the type for "
            ],
            [
              "unique_ptr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", and the implementation can use the "
            ],
            [
              "empty base optimization",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%2B%2B/3944/empty-base-optimization#t=201607261453124463486"
                ]
              ]
            ],
            [
              " to avoid any change in size for empty custom deleters. So while "
            ],
            [
              "std::unique_ptr\u003cSDL_Surface, SurfaceDeleter\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "std::unique_ptr\u003cSDL_Surface, void(*)(SDL_Surface*)\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " solve the same problem in a similar way, the former type is still only the size of a pointer while the latter type has to hold "
            ],
            [
              "two",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " pointers: both the "
            ],
            [
              "SDL_Surface*",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and the function pointer! When having free function custom deleters, it is preferable to wrap the function in an empty type."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note that the deleter is part of the type for "
          },
          {
            "Text": "unique_ptr",
            "AttrFlags": 2
          },
          {
            "Text": ", and the implementation can use the "
          },
          {
            "Text": "empty base optimization",
            "Link": "http://stackoverflow.com/documentation/c%2B%2B/3944/empty-base-optimization#t=201607261453124463486"
          },
          {
            "Text": " to avoid any change in size for empty custom deleters. So while "
          },
          {
            "Text": "std::unique_ptr\u003cSDL_Surface, SurfaceDeleter\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "std::unique_ptr\u003cSDL_Surface, void(*)(SDL_Surface*)\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " solve the same problem in a similar way, the former type is still only the size of a pointer while the latter type has to hold "
          },
          {
            "Text": "two",
            "AttrFlags": 4
          },
          {
            "Text": " pointers: both the "
          },
          {
            "Text": "SDL_Surface*",
            "AttrFlags": 2
          },
          {
            "Text": " and the function pointer! When having free function custom deleters, it is preferable to wrap the function in an empty type."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522027666,
        "id": "9ad78b50-5ac3-4e2f-ad27-c1bf9898a673",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522027666,
        "parent_id": "e8fe82bf-eff7-4f69-9dc8-10b6cd5ce57a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In cases where reference counting is important, one could use a "
            ],
            [
              "shared_ptr",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://en.cppreference.com/w/cpp/memory/shared_ptr"
                ]
              ]
            ],
            [
              " instead of an "
            ],
            [
              "unique_ptr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". The "
            ],
            [
              "shared_ptr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " always stores a deleter, this erases the type of the deleter, which might be useful in APIs. The disadvantages of using "
            ],
            [
              "shared_ptr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " over "
            ],
            [
              "unique_ptr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " include a higher memory cost for storing the deleter and a performance cost for maintaining the reference count."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In cases where reference counting is important, one could use a "
          },
          {
            "Text": "shared_ptr",
            "AttrFlags": 2,
            "Link": "http://en.cppreference.com/w/cpp/memory/shared_ptr"
          },
          {
            "Text": " instead of an "
          },
          {
            "Text": "unique_ptr",
            "AttrFlags": 2
          },
          {
            "Text": ". The "
          },
          {
            "Text": "shared_ptr",
            "AttrFlags": 2
          },
          {
            "Text": " always stores a deleter, this erases the type of the deleter, which might be useful in APIs. The disadvantages of using "
          },
          {
            "Text": "shared_ptr",
            "AttrFlags": 2
          },
          {
            "Text": " over "
          },
          {
            "Text": "unique_ptr",
            "AttrFlags": 2
          },
          {
            "Text": " include a higher memory cost for storing the deleter and a performance cost for maintaining the reference count."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522027667,
        "id": "9e87ff50-e841-4090-9656-f4183505f18f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522027667,
        "parent_id": "e8fe82bf-eff7-4f69-9dc8-10b6cd5ce57a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// deleter required at construction time and is part of the type\nstd::unique_ptr\u003cSDL_Surface, void(*)(SDL_Surface*)\u003e a(pointer, SDL_FreeSurface);\n\n// deleter is only required at construction time, not part of the type\nstd::shared_ptr\u003cSDL_Surface\u003e b(pointer, SDL_FreeSurface);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// deleter required at construction time and is part of the type\nstd::unique_ptr\u003cSDL_Surface, void(*)(SDL_Surface*)\u003e a(pointer, SDL_FreeSurface);\n\n// deleter is only required at construction time, not part of the type\nstd::shared_ptr\u003cSDL_Surface\u003e b(pointer, SDL_FreeSurface);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522027667,
        "id": "cc7c7bca-23e6-437a-b9d6-47cca38b6e6f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522027667,
        "parent_id": "e8fe82bf-eff7-4f69-9dc8-10b6cd5ce57a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "With "
            ],
            [
              "template auto",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", we can make it even easier to wrap our custom deleters:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "With "
          },
          {
            "Text": "template auto",
            "AttrFlags": 2
          },
          {
            "Text": ", we can make it even easier to wrap our custom deleters:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522027667,
        "id": "0664f62c-66f1-4bbc-bab5-0fd1300618d0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522027667,
        "parent_id": "e8fe82bf-eff7-4f69-9dc8-10b6cd5ce57a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "template \u003cauto DeleteFn\u003e\nstruct FunctionDeleter {\n    template \u003cclass T\u003e\n    void operator()(T* ptr) {\n        DeleteFn(ptr);\n    }\n};\n\ntemplate \u003cclass T, auto DeleteFn\u003e\nusing unique_ptr_deleter = std::unique_ptr\u003cT, FunctionDeleter\u003cDeleteFn\u003e\u003e;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "template \u003cauto DeleteFn\u003e\nstruct FunctionDeleter {\n    template \u003cclass T\u003e\n    void operator()(T* ptr) {\n        DeleteFn(ptr);\n    }\n};\n\ntemplate \u003cclass T, auto DeleteFn\u003e\nusing unique_ptr_deleter = std::unique_ptr\u003cT, FunctionDeleter\u003cDeleteFn\u003e\u003e;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522027667,
        "id": "86aae6ac-8a1a-44a4-8358-9cfbe6847e47",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522027667,
        "parent_id": "e8fe82bf-eff7-4f69-9dc8-10b6cd5ce57a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "With which the above example is simply:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "With which the above example is simply:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522027667,
        "id": "62d01b8d-d867-4a58-8917-b5539d25950a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522027667,
        "parent_id": "e8fe82bf-eff7-4f69-9dc8-10b6cd5ce57a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "unique_ptr_deleter\u003cSDL_Surface, SDL_FreeSurface\u003e c(pointer);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "unique_ptr_deleter\u003cSDL_Surface, SDL_FreeSurface\u003e c(pointer);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522027667,
        "id": "28d32fed-c537-4efd-b454-6fd33e778c75",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522027667,
        "parent_id": "e8fe82bf-eff7-4f69-9dc8-10b6cd5ce57a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Here, the purpose of "
            ],
            [
              "auto",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is to handle all free functions, whether they return "
            ],
            [
              "void",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (e.g. "
            ],
            [
              "SDL_FreeSurface",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") or not (e.g. "
            ],
            [
              "fclose",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ")."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Here, the purpose of "
          },
          {
            "Text": "auto",
            "AttrFlags": 2
          },
          {
            "Text": " is to handle all free functions, whether they return "
          },
          {
            "Text": "void",
            "AttrFlags": 2
          },
          {
            "Text": " (e.g. "
          },
          {
            "Text": "SDL_FreeSurface",
            "AttrFlags": 2
          },
          {
            "Text": ") or not (e.g. "
          },
          {
            "Text": "fclose",
            "AttrFlags": 2
          },
          {
            "Text": ")."
          }
        ]
      }
    ],
    "title": "Using custom deleters to create a wrapper to a C interface",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}