{
  "ID": "1913cb38-5d2b-4e52-b2de-c384ddf12433",
  "Root": {
    "alive": true,
    "content": [
      "29ee3e94-1edb-434c-a969-110ec4d5a2fe",
      "99d68e3e-455a-464c-9150-abdc23ffb4ae",
      "c164c39f-700a-4453-a5dc-6818d178ec97",
      "3e74d67e-952d-49f6-902d-08d5eee6b256",
      "e4a18fe1-7fe6-44f1-8aa9-9bfe1ac6836c",
      "59945ef9-e2e3-45c8-a13a-fee1de1747ea",
      "0ab940ea-9618-462c-aa1c-ba930fcac848",
      "2c27f9c3-da27-4fe1-ba99-3f59fd6254df",
      "d18b1a10-23ed-4e83-be31-86a1c31d3638",
      "1f6dd57e-4a3b-4b7e-8a46-d553a6691133",
      "13676537-679d-4e54-9200-26552f07969c"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522000451,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "1913cb38-5d2b-4e52-b2de-c384ddf12433",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550656500000,
    "parent_id": "b886ff5d-614b-4aa9-9e99-851b7998439b",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Conversion to integersfloating point types"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522000446,
        "id": "29ee3e94-1edb-434c-a969-110ec4d5a2fe",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522000446,
        "parent_id": "1913cb38-5d2b-4e52-b2de-c384ddf12433",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A "
            ],
            [
              "std::string",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " containing a number can be converted into an integer type, or a floating point type, using conversion functions."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A "
          },
          {
            "Text": "std::string",
            "AttrFlags": 2
          },
          {
            "Text": " containing a number can be converted into an integer type, or a floating point type, using conversion functions."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522000449,
        "id": "99d68e3e-455a-464c-9150-abdc23ffb4ae",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522000449,
        "parent_id": "1913cb38-5d2b-4e52-b2de-c384ddf12433",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note that",
              [
                [
                  "b"
                ],
                [
                  "i"
                ]
              ]
            ],
            [
              " all of these functions stop parsing the input string as soon as they encounter a non-numeric character, so "
            ],
            [
              "\"123abc\"",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will be converted into "
            ],
            [
              "123",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note that",
            "AttrFlags": 5
          },
          {
            "Text": " all of these functions stop parsing the input string as soon as they encounter a non-numeric character, so "
          },
          {
            "Text": "\"123abc\"",
            "AttrFlags": 2
          },
          {
            "Text": " will be converted into "
          },
          {
            "Text": "123",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522000449,
        "id": "c164c39f-700a-4453-a5dc-6818d178ec97",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522000449,
        "parent_id": "1913cb38-5d2b-4e52-b2de-c384ddf12433",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522000449,
        "id": "3e74d67e-952d-49f6-902d-08d5eee6b256",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522000449,
        "parent_id": "1913cb38-5d2b-4e52-b2de-c384ddf12433",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "std::ato*",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " family of functions converts C-style strings (character arrays) to integer or floating-point types:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "std::ato*",
            "AttrFlags": 2
          },
          {
            "Text": " family of functions converts C-style strings (character arrays) to integer or floating-point types:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522000450,
        "id": "e4a18fe1-7fe6-44f1-8aa9-9bfe1ac6836c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522000450,
        "parent_id": "1913cb38-5d2b-4e52-b2de-c384ddf12433",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "std::string ten = \"10\";\n\ndouble num1 = std::atof(ten.c_str());\nint num2 = std::atoi(ten.c_str());\nlong num3 = std::atol(ten.c_str());"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "std::string ten = \"10\";\n\ndouble num1 = std::atof(ten.c_str());\nint num2 = std::atoi(ten.c_str());\nlong num3 = std::atol(ten.c_str());",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522000450,
        "id": "59945ef9-e2e3-45c8-a13a-fee1de1747ea",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522000450,
        "parent_id": "1913cb38-5d2b-4e52-b2de-c384ddf12433",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "long long num4 = std::atoll(ten.c_str());"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "long long num4 = std::atoll(ten.c_str());",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522000450,
        "id": "0ab940ea-9618-462c-aa1c-ba930fcac848",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522000450,
        "parent_id": "1913cb38-5d2b-4e52-b2de-c384ddf12433",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "However, use of these functions is discouraged because they return "
            ],
            [
              "0",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " if they fail to parse the string. This is bad because "
            ],
            [
              "0",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " could also be a valid result, if for example the input string was “0”, so it is impossible to determine if the conversion actually failed."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "However, use of these functions is discouraged because they return "
          },
          {
            "Text": "0",
            "AttrFlags": 2
          },
          {
            "Text": " if they fail to parse the string. This is bad because "
          },
          {
            "Text": "0",
            "AttrFlags": 2
          },
          {
            "Text": " could also be a valid result, if for example the input string was “0”, so it is impossible to determine if the conversion actually failed."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522000450,
        "id": "2c27f9c3-da27-4fe1-ba99-3f59fd6254df",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522000450,
        "parent_id": "1913cb38-5d2b-4e52-b2de-c384ddf12433",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The newer "
            ],
            [
              "std::sto*",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " family of functions convert "
            ],
            [
              "std::string",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "s to integer or floating-point types, and throw exceptions if they could not parse their input. "
            ],
            [
              "You should use these functions if possible",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The newer "
          },
          {
            "Text": "std::sto*",
            "AttrFlags": 2
          },
          {
            "Text": " family of functions convert "
          },
          {
            "Text": "std::string",
            "AttrFlags": 2
          },
          {
            "Text": "s to integer or floating-point types, and throw exceptions if they could not parse their input. "
          },
          {
            "Text": "You should use these functions if possible",
            "AttrFlags": 4
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522000450,
        "id": "d18b1a10-23ed-4e83-be31-86a1c31d3638",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522000450,
        "parent_id": "1913cb38-5d2b-4e52-b2de-c384ddf12433",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "std::string ten = \"10\";\n\nint num1 = std::stoi(ten);\nlong num2 = std::stol(ten);\nlong long num3 = std::stoll(ten);\n\nfloat num4 = std::stof(ten);\ndouble num5 = std::stod(ten);\nlong double num6 = std::stold(ten);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "std::string ten = \"10\";\n\nint num1 = std::stoi(ten);\nlong num2 = std::stol(ten);\nlong long num3 = std::stoll(ten);\n\nfloat num4 = std::stof(ten);\ndouble num5 = std::stod(ten);\nlong double num6 = std::stold(ten);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522000451,
        "id": "1f6dd57e-4a3b-4b7e-8a46-d553a6691133",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522000451,
        "parent_id": "1913cb38-5d2b-4e52-b2de-c384ddf12433",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Furthermore, these functions also handle octal and hex strings unlike the "
            ],
            [
              "std::ato*",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " family. The second parameter is a pointer to the first unconverted character in the input string (not illustrated here), and the third parameter is the base to use. "
            ],
            [
              "0",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is automatic detection of octal (starting with "
            ],
            [
              "0",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") and hex (starting with "
            ],
            [
              "0x",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "0X",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "), and any other value is the base to use"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Furthermore, these functions also handle octal and hex strings unlike the "
          },
          {
            "Text": "std::ato*",
            "AttrFlags": 2
          },
          {
            "Text": " family. The second parameter is a pointer to the first unconverted character in the input string (not illustrated here), and the third parameter is the base to use. "
          },
          {
            "Text": "0",
            "AttrFlags": 2
          },
          {
            "Text": " is automatic detection of octal (starting with "
          },
          {
            "Text": "0",
            "AttrFlags": 2
          },
          {
            "Text": ") and hex (starting with "
          },
          {
            "Text": "0x",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "0X",
            "AttrFlags": 2
          },
          {
            "Text": "), and any other value is the base to use"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522000451,
        "id": "13676537-679d-4e54-9200-26552f07969c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522000451,
        "parent_id": "1913cb38-5d2b-4e52-b2de-c384ddf12433",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "std::string ten = \"10\";\nstd::string ten_octal = \"12\";\nstd::string ten_hex = \"0xA\";\n\nint num1 = std::stoi(ten, 0, 2); // Returns 2\nint num2 = std::stoi(ten_octal, 0, 8); // Returns 10\nlong num3 = std::stol(ten_hex, 0, 16);  // Returns 10\nlong num4 = std::stol(ten_hex);  // Returns 0\nlong num5 = std::stol(ten_hex, 0, 0); // Returns 10 as it detects the leading 0x"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "std::string ten = \"10\";\nstd::string ten_octal = \"12\";\nstd::string ten_hex = \"0xA\";\n\nint num1 = std::stoi(ten, 0, 2); // Returns 2\nint num2 = std::stoi(ten_octal, 0, 8); // Returns 10\nlong num3 = std::stol(ten_hex, 0, 16);  // Returns 10\nlong num4 = std::stol(ten_hex);  // Returns 0\nlong num5 = std::stol(ten_hex, 0, 0); // Returns 10 as it detects the leading 0x",
        "code_language": "Plain Text"
      }
    ],
    "title": "Conversion to integersfloating point types",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}