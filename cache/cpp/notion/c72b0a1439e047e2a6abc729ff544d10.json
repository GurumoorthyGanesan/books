{
  "ID": "c72b0a14-39e0-47e2-a6ab-c729ff544d10",
  "Root": {
    "alive": true,
    "content": [
      "ccdf694b-2369-4cab-b051-185019d371cb",
      "78cef29b-46ec-4265-ad1c-da3eac08258c",
      "6a3b0a3d-d5d0-4179-ad5d-fab6afe0963f",
      "f0420e9e-6ff1-4157-ae79-af15dc3394fb",
      "7793f08c-0fc0-4c85-b03a-a4d66c9a1f54",
      "90a98bfc-6014-4a67-8af1-1de2e7c2765e",
      "01ec1071-d0f3-46eb-a7be-cbc20be18f68",
      "87b9fd02-243a-4ae0-a25c-14e5486b7a14",
      "bed240c0-e9f4-41e5-96ac-197eacdb34cc",
      "4b7b5c6f-5ef5-4c0f-8e58-533e1f7edd62",
      "cdd38710-5e7b-42b1-bf57-a6f911d38dfc",
      "e54fceca-6cee-47c0-84d6-30a0cc030ded",
      "06bf8492-631f-46bd-b435-2a4695855e88",
      "a0a0e67e-b471-4e2c-b635-1702d0f5423d",
      "a133ebbd-22d1-4564-bdd8-1d80abae297b"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522072662,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "c72b0a14-39e0-47e2-a6ab-c729ff544d10",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550655600000,
    "parent_id": "71517390-0244-456d-87c4-82c582ca8abf",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Generalized capture"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522072653,
        "id": "ccdf694b-2369-4cab-b051-185019d371cb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522072653,
        "parent_id": "c72b0a14-39e0-47e2-a6ab-c729ff544d10",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Lambdas can capture expressions, rather than just variables. This permits lambdas to store move-only types:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Lambdas can capture expressions, rather than just variables. This permits lambdas to store move-only types:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522072657,
        "id": "78cef29b-46ec-4265-ad1c-da3eac08258c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522072657,
        "parent_id": "c72b0a14-39e0-47e2-a6ab-c729ff544d10",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "auto p = std::make_unique\u003cT\u003e(...);\n\nauto lamb = [p = std::move(p)]() //Overrides capture-by-value of `p`.\n{\n  p-\u003eSomeFunc();\n};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "auto p = std::make_unique\u003cT\u003e(...);\n\nauto lamb = [p = std::move(p)]() //Overrides capture-by-value of `p`.\n{\n  p-\u003eSomeFunc();\n};",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522072658,
        "id": "6a3b0a3d-d5d0-4179-ad5d-fab6afe0963f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522072658,
        "parent_id": "c72b0a14-39e0-47e2-a6ab-c729ff544d10",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This moves the outer "
            ],
            [
              "p",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " variable into the lambda capture variable, also called "
            ],
            [
              "p",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". "
            ],
            [
              "lamb",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " now owns the memory allocated by "
            ],
            [
              "make_unique",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Because the closure contains a type that is non-copyable, this means that "
            ],
            [
              "lamb",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is itself non-copyable. But it can be moved:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This moves the outer "
          },
          {
            "Text": "p",
            "AttrFlags": 2
          },
          {
            "Text": " variable into the lambda capture variable, also called "
          },
          {
            "Text": "p",
            "AttrFlags": 2
          },
          {
            "Text": ". "
          },
          {
            "Text": "lamb",
            "AttrFlags": 2
          },
          {
            "Text": " now owns the memory allocated by "
          },
          {
            "Text": "make_unique",
            "AttrFlags": 2
          },
          {
            "Text": ". Because the closure contains a type that is non-copyable, this means that "
          },
          {
            "Text": "lamb",
            "AttrFlags": 2
          },
          {
            "Text": " is itself non-copyable. But it can be moved:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522072658,
        "id": "f0420e9e-6ff1-4157-ae79-af15dc3394fb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522072658,
        "parent_id": "c72b0a14-39e0-47e2-a6ab-c729ff544d10",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "auto lamb_copy = lamb; //Illegal\nauto lamb_move = std::move(lamb); //legal."
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "auto lamb_copy = lamb; //Illegal\nauto lamb_move = std::move(lamb); //legal.",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522072658,
        "id": "7793f08c-0fc0-4c85-b03a-a4d66c9a1f54",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522072658,
        "parent_id": "c72b0a14-39e0-47e2-a6ab-c729ff544d10",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Now "
            ],
            [
              "lamb_move",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " owns the memory."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Now "
          },
          {
            "Text": "lamb_move",
            "AttrFlags": 2
          },
          {
            "Text": " owns the memory."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522072658,
        "id": "90a98bfc-6014-4a67-8af1-1de2e7c2765e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522072658,
        "parent_id": "c72b0a14-39e0-47e2-a6ab-c729ff544d10",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522072661,
        "id": "01ec1071-d0f3-46eb-a7be-cbc20be18f68",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522072661,
        "parent_id": "c72b0a14-39e0-47e2-a6ab-c729ff544d10",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note that "
            ],
            [
              "std::function\u003c\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " requires that the values stored be copyable. You can write your own "
            ],
            [
              "move-only-requiring ",
              [
                [
                  "a",
                  "https://stackoverflow.com/documentation/c%2B%2B/2872/type-erasure/18042/a-move-only-stdfunction#t=201608061624094409548"
                ]
              ]
            ],
            [
              "std::function",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://stackoverflow.com/documentation/c%2B%2B/2872/type-erasure/18042/a-move-only-stdfunction#t=201608061624094409548"
                ]
              ]
            ],
            [
              ", or you could just stuff the lambda into a "
            ],
            [
              "shared_ptr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " wrapper:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note that "
          },
          {
            "Text": "std::function\u003c\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " requires that the values stored be copyable. You can write your own "
          },
          {
            "Text": "move-only-requiring ",
            "Link": "https://stackoverflow.com/documentation/c%2B%2B/2872/type-erasure/18042/a-move-only-stdfunction#t=201608061624094409548"
          },
          {
            "Text": "std::function",
            "AttrFlags": 2,
            "Link": "https://stackoverflow.com/documentation/c%2B%2B/2872/type-erasure/18042/a-move-only-stdfunction#t=201608061624094409548"
          },
          {
            "Text": ", or you could just stuff the lambda into a "
          },
          {
            "Text": "shared_ptr",
            "AttrFlags": 2
          },
          {
            "Text": " wrapper:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522072661,
        "id": "87b9fd02-243a-4ae0-a25c-14e5486b7a14",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522072661,
        "parent_id": "c72b0a14-39e0-47e2-a6ab-c729ff544d10",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "auto shared_lambda = [](auto\u0026\u0026 f){\n  return [spf = std::make_shared\u003cstd::decay_t\u003cdecltype(f)\u003e\u003e(decltype(f)(f))]\n  (auto\u0026\u0026...args)-\u003edecltype(auto) {\n    return (*spf)(decltype(args)(args)...);\n  };\n};\nauto lamb_shared = shared_lambda(std::move(lamb_move));"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "auto shared_lambda = [](auto\u0026\u0026 f){\n  return [spf = std::make_shared\u003cstd::decay_t\u003cdecltype(f)\u003e\u003e(decltype(f)(f))]\n  (auto\u0026\u0026...args)-\u003edecltype(auto) {\n    return (*spf)(decltype(args)(args)...);\n  };\n};\nauto lamb_shared = shared_lambda(std::move(lamb_move));",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522072661,
        "id": "bed240c0-e9f4-41e5-96ac-197eacdb34cc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522072661,
        "parent_id": "c72b0a14-39e0-47e2-a6ab-c729ff544d10",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "takes our move-only lambda and stuffs its state into a shared pointer then returns a lambda that "
            ],
            [
              "can",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " be copied, and then stored in a "
            ],
            [
              "std::function",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or similar."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "takes our move-only lambda and stuffs its state into a shared pointer then returns a lambda that "
          },
          {
            "Text": "can",
            "AttrFlags": 4
          },
          {
            "Text": " be copied, and then stored in a "
          },
          {
            "Text": "std::function",
            "AttrFlags": 2
          },
          {
            "Text": " or similar."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522072661,
        "id": "4b7b5c6f-5ef5-4c0f-8e58-533e1f7edd62",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522072661,
        "parent_id": "c72b0a14-39e0-47e2-a6ab-c729ff544d10",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522072661,
        "id": "cdd38710-5e7b-42b1-bf57-a6f911d38dfc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522072661,
        "parent_id": "c72b0a14-39e0-47e2-a6ab-c729ff544d10",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Generalized capture uses "
            ],
            [
              "auto",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " type deduction for the variable’s type. It will declare these captures as values by default, but they can be references as well:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Generalized capture uses "
          },
          {
            "Text": "auto",
            "AttrFlags": 2
          },
          {
            "Text": " type deduction for the variable’s type. It will declare these captures as values by default, but they can be references as well:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522072662,
        "id": "e54fceca-6cee-47c0-84d6-30a0cc030ded",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522072662,
        "parent_id": "c72b0a14-39e0-47e2-a6ab-c729ff544d10",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int a = 0;\n\nauto lamb = [\u0026v = a](int add) //Note that `a` and `v` have different names\n{\n  v += add; //Modifies `a`\n};\n\nlamb(20); //`a` becomes 20."
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int a = 0;\n\nauto lamb = [\u0026v = a](int add) //Note that `a` and `v` have different names\n{\n  v += add; //Modifies `a`\n};\n\nlamb(20); //`a` becomes 20.",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522072662,
        "id": "06bf8492-631f-46bd-b435-2a4695855e88",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522072662,
        "parent_id": "c72b0a14-39e0-47e2-a6ab-c729ff544d10",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Generalize capture does not need to capture an external variable at all. It can capture an arbitrary expression:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Generalize capture does not need to capture an external variable at all. It can capture an arbitrary expression:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522072662,
        "id": "a0a0e67e-b471-4e2c-b635-1702d0f5423d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522072662,
        "parent_id": "c72b0a14-39e0-47e2-a6ab-c729ff544d10",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "auto lamb = [p = std::make_unique\u003cT\u003e(...)]()\n{\n    p-\u003eSomeFunc();\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "auto lamb = [p = std::make_unique\u003cT\u003e(...)]()\n{\n    p-\u003eSomeFunc();\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522072662,
        "id": "a133ebbd-22d1-4564-bdd8-1d80abae297b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522072662,
        "parent_id": "c72b0a14-39e0-47e2-a6ab-c729ff544d10",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This is useful for giving lambdas arbitrary values that they can hold and potentially modify, without having to declare them externally to the lambda. Of course, that is only useful if you do not intend to access those variables after the lambda has completed its work."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This is useful for giving lambdas arbitrary values that they can hold and potentially modify, without having to declare them externally to the lambda. Of course, that is only useful if you do not intend to access those variables after the lambda has completed its work."
          }
        ]
      }
    ],
    "title": "Generalized capture",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}