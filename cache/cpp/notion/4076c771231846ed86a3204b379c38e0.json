{
  "ID": "4076c771-2318-46ed-86a3-204b379c38e0",
  "Root": {
    "alive": true,
    "content": [
      "76d6bbd5-3183-449c-a3d4-3c8d0f420de4",
      "c170a988-d837-4dc6-80c5-472e218da95a",
      "1cd6e67c-1b77-4756-a0e9-e80e1fefa9d3",
      "e4ea3d4d-2fb3-4315-aba2-ae1ad57ee065",
      "afc3a272-9fb9-4f02-b5c3-fddf85a7c69c",
      "ef97068b-d62e-4940-9bbd-21c0705099f5",
      "f43286cf-7599-4983-b7b0-e9f78be510d8",
      "f7189bfe-6d44-4fd9-a702-f4574c0f500c",
      "34cbb049-ee8f-44a3-b44b-a6101343658c",
      "b9ce96a2-2da6-4722-85d6-c0860fe78155",
      "54cdb013-9348-46ea-85b4-f367bb51ecef",
      "a84a9abb-5353-4618-82ab-19c51cdf708e",
      "eb56497c-02e5-4e05-afcd-a2d7deafd208",
      "45e26b0b-32d7-4d03-9662-5baf6a89055c",
      "81944437-d587-43f0-bce3-71205e70c28c",
      "7ae23d39-5704-448c-8805-8c08ed7bf6ea",
      "70ee0d1b-4b74-433c-bafb-b8cf55fa45c5",
      "ee73b3de-f729-45c9-8208-5d6ab47344f4",
      "c2b39a69-21fe-4835-a40e-a5e297eb6af2",
      "700d1d0c-8692-4e3d-84e1-1330269d62ec",
      "cfb3220e-1d87-46ad-9769-4e58521000c3",
      "814f6107-162b-48b9-af86-5fa383abdd91"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522267666,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "4076c771-2318-46ed-86a3-204b379c38e0",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550655420000,
    "parent_id": "50a27510-120b-4da0-9ecb-cf15396a0108",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Inserting elements"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522267657,
        "id": "76d6bbd5-3183-449c-a3d4-3c8d0f420de4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522267657,
        "parent_id": "4076c771-2318-46ed-86a3-204b379c38e0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "An element can be inserted into a "
            ],
            [
              "std::map",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " only if its key is not already present in the map. Given for example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "An element can be inserted into a "
          },
          {
            "Text": "std::map",
            "AttrFlags": 2
          },
          {
            "Text": " only if its key is not already present in the map. Given for example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522267660,
        "id": "c170a988-d837-4dc6-80c5-472e218da95a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522267660,
        "parent_id": "4076c771-2318-46ed-86a3-204b379c38e0",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "std::map\u003c std::string, size_t \u003e fruits_count;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "std::map\u003c std::string, size_t \u003e fruits_count;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522267662,
        "id": "1cd6e67c-1b77-4756-a0e9-e80e1fefa9d3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522267662,
        "parent_id": "4076c771-2318-46ed-86a3-204b379c38e0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A key-value pair is inserted into a "
            ],
            [
              "std::map",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " through the "
            ],
            [
              "insert()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " member function. It requires a "
            ],
            [
              "pair",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " as an argument:"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "A key-value pair is inserted into a "
          },
          {
            "Text": "std::map",
            "AttrFlags": 2
          },
          {
            "Text": " through the "
          },
          {
            "Text": "insert()",
            "AttrFlags": 2
          },
          {
            "Text": " member function. It requires a "
          },
          {
            "Text": "pair",
            "AttrFlags": 2
          },
          {
            "Text": " as an argument:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522267662,
        "id": "e4ea3d4d-2fb3-4315-aba2-ae1ad57ee065",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522267662,
        "parent_id": "4076c771-2318-46ed-86a3-204b379c38e0",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "fruits_count.insert({\"grapes\", 20});\nfruits_count.insert(make_pair(\"orange\", 30));\nfruits_count.insert(pair\u003cstd::string, size_t\u003e(\"banana\", 40));\nfruits_count.insert(map\u003cstd::string, size_t\u003e::value_type(\"cherry\", 50));"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "fruits_count.insert({\"grapes\", 20});\nfruits_count.insert(make_pair(\"orange\", 30));\nfruits_count.insert(pair\u003cstd::string, size_t\u003e(\"banana\", 40));\nfruits_count.insert(map\u003cstd::string, size_t\u003e::value_type(\"cherry\", 50));",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522267662,
        "id": "afc3a272-9fb9-4f02-b5c3-fddf85a7c69c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522267662,
        "parent_id": "4076c771-2318-46ed-86a3-204b379c38e0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "insert()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " function returns a "
            ],
            [
              "pair",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " consisting of an iterator and a "
            ],
            [
              "bool",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " value:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "insert()",
            "AttrFlags": 2
          },
          {
            "Text": " function returns a "
          },
          {
            "Text": "pair",
            "AttrFlags": 2
          },
          {
            "Text": " consisting of an iterator and a "
          },
          {
            "Text": "bool",
            "AttrFlags": 2
          },
          {
            "Text": " value:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522267662,
        "id": "ef97068b-d62e-4940-9bbd-21c0705099f5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522267662,
        "parent_id": "4076c771-2318-46ed-86a3-204b379c38e0",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "- If the insertion was successful, the iterator points to the newly inserted element, and the `bool` value is `true`.\n- If there was already an element with the same `key`, the insertion fails. When that happens, the iterator points to the element causing the conflict, and the `bool` is value is `false`."
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "- If the insertion was successful, the iterator points to the newly inserted element, and the `bool` value is `true`.\n- If there was already an element with the same `key`, the insertion fails. When that happens, the iterator points to the element causing the conflict, and the `bool` is value is `false`.",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522267662,
        "id": "f43286cf-7599-4983-b7b0-e9f78be510d8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522267662,
        "parent_id": "4076c771-2318-46ed-86a3-204b379c38e0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The following method can be used to combine insertion and searching operation:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The following method can be used to combine insertion and searching operation:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522267662,
        "id": "f7189bfe-6d44-4fd9-a702-f4574c0f500c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522267662,
        "parent_id": "4076c771-2318-46ed-86a3-204b379c38e0",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "auto success = fruits_count.insert({\"grapes\", 20});\nif (!success.second) {           // we already have 'grapes' in the map\n    success.first-\u003esecond += 20; // access the iterator to update the value\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "auto success = fruits_count.insert({\"grapes\", 20});\nif (!success.second) {           // we already have 'grapes' in the map\n    success.first-\u003esecond += 20; // access the iterator to update the value\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522267663,
        "id": "34cbb049-ee8f-44a3-b44b-a6101343658c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522267663,
        "parent_id": "4076c771-2318-46ed-86a3-204b379c38e0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For convenience, the "
            ],
            [
              "std::map",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " container provides the subscript operator to access elements in the map and to insert new ones if they don’t exist:"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "For convenience, the "
          },
          {
            "Text": "std::map",
            "AttrFlags": 2
          },
          {
            "Text": " container provides the subscript operator to access elements in the map and to insert new ones if they don’t exist:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522267663,
        "id": "b9ce96a2-2da6-4722-85d6-c0860fe78155",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522267663,
        "parent_id": "4076c771-2318-46ed-86a3-204b379c38e0",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "fruits_count[\"apple\"] = 10;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "fruits_count[\"apple\"] = 10;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522267663,
        "id": "54cdb013-9348-46ea-85b4-f367bb51ecef",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522267663,
        "parent_id": "4076c771-2318-46ed-86a3-204b379c38e0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "While simpler, it prevents the user from checking if the element already exists. If an element is missing, "
            ],
            [
              "std::map::operator[]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " implicitly creates it, initializing it with the default constructor before overwriting it with the supplied value."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "While simpler, it prevents the user from checking if the element already exists. If an element is missing, "
          },
          {
            "Text": "std::map::operator[]",
            "AttrFlags": 2
          },
          {
            "Text": " implicitly creates it, initializing it with the default constructor before overwriting it with the supplied value."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522267663,
        "id": "a84a9abb-5353-4618-82ab-19c51cdf708e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522267663,
        "parent_id": "4076c771-2318-46ed-86a3-204b379c38e0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "insert()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can be used to add several elements at once using a braced list of pairs. This version of insert() returns void:"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "insert()",
            "AttrFlags": 2
          },
          {
            "Text": " can be used to add several elements at once using a braced list of pairs. This version of insert() returns void:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522267663,
        "id": "eb56497c-02e5-4e05-afcd-a2d7deafd208",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522267663,
        "parent_id": "4076c771-2318-46ed-86a3-204b379c38e0",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "fruits_count.insert({{\"apricot\", 1}, {\"jackfruit\", 1}, {\"lime\", 1}, {\"mango\", 7}});"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "fruits_count.insert({{\"apricot\", 1}, {\"jackfruit\", 1}, {\"lime\", 1}, {\"mango\", 7}});",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522267664,
        "id": "45e26b0b-32d7-4d03-9662-5baf6a89055c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522267664,
        "parent_id": "4076c771-2318-46ed-86a3-204b379c38e0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "insert()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can also be used to add elements by using iterators denoting the begin and end of "
            ],
            [
              "value_type",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " values:"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "insert()",
            "AttrFlags": 2
          },
          {
            "Text": " can also be used to add elements by using iterators denoting the begin and end of "
          },
          {
            "Text": "value_type",
            "AttrFlags": 2
          },
          {
            "Text": " values:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522267664,
        "id": "81944437-d587-43f0-bce3-71205e70c28c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522267664,
        "parent_id": "4076c771-2318-46ed-86a3-204b379c38e0",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "std::map\u003c std::string, size_t \u003e fruit_list{ {\"lemon\", 0}, {\"olive\", 0}, {\"plum\", 0}};\nfruits_count.insert(fruit_list.begin(), fruit_list.end());"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "std::map\u003c std::string, size_t \u003e fruit_list{ {\"lemon\", 0}, {\"olive\", 0}, {\"plum\", 0}};\nfruits_count.insert(fruit_list.begin(), fruit_list.end());",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522267664,
        "id": "7ae23d39-5704-448c-8805-8c08ed7bf6ea",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522267664,
        "parent_id": "4076c771-2318-46ed-86a3-204b379c38e0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522267664,
        "id": "70ee0d1b-4b74-433c-bafb-b8cf55fa45c5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522267664,
        "parent_id": "4076c771-2318-46ed-86a3-204b379c38e0",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "std::map\u003cstd::string, size_t\u003e fruits_count;\nstd::string fruit;\nwhile(std::cin \u003e\u003e fruit){\n    // insert an element with 'fruit' as key and '1' as value\n    // (if the key is already stored in fruits_count, insert does nothing)\n    auto ret = fruits_count.insert({fruit, 1});\n    if(!ret.second){            // 'fruit' is already in the map \n        ++ret.first-\u003esecond;    // increment the counter\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "std::map\u003cstd::string, size_t\u003e fruits_count;\nstd::string fruit;\nwhile(std::cin \u003e\u003e fruit){\n    // insert an element with 'fruit' as key and '1' as value\n    // (if the key is already stored in fruits_count, insert does nothing)\n    auto ret = fruits_count.insert({fruit, 1});\n    if(!ret.second){            // 'fruit' is already in the map \n        ++ret.first-\u003esecond;    // increment the counter\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522267665,
        "id": "ee73b3de-f729-45c9-8208-5d6ab47344f4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522267665,
        "parent_id": "4076c771-2318-46ed-86a3-204b379c38e0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Time complexity for an insertion operation is O(log n) because "
            ],
            [
              "std::map",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " are implemented as trees."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Time complexity for an insertion operation is O(log n) because "
          },
          {
            "Text": "std::map",
            "AttrFlags": 2
          },
          {
            "Text": " are implemented as trees."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522267665,
        "id": "c2b39a69-21fe-4835-a40e-a5e297eb6af2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522267665,
        "parent_id": "4076c771-2318-46ed-86a3-204b379c38e0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A "
            ],
            [
              "pair",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can be constructed explicitly using "
            ],
            [
              "make_pair()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "emplace()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A "
          },
          {
            "Text": "pair",
            "AttrFlags": 2
          },
          {
            "Text": " can be constructed explicitly using "
          },
          {
            "Text": "make_pair()",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "emplace()",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522267665,
        "id": "700d1d0c-8692-4e3d-84e1-1330269d62ec",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522267665,
        "parent_id": "4076c771-2318-46ed-86a3-204b379c38e0",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "std::map\u003c std::string , int \u003e runs;\nruns.emplace(\"Babe Ruth\", 714);\nruns.insert(make_pair(\"Barry Bonds\", 762));"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "std::map\u003c std::string , int \u003e runs;\nruns.emplace(\"Babe Ruth\", 714);\nruns.insert(make_pair(\"Barry Bonds\", 762));",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522267665,
        "id": "cfb3220e-1d87-46ad-9769-4e58521000c3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522267665,
        "parent_id": "4076c771-2318-46ed-86a3-204b379c38e0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If we know where the new element will be inserted, then we can use "
            ],
            [
              "emplace_hint()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to specify an iterator "
            ],
            [
              "hint",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". If the new element can be inserted just before "
            ],
            [
              "hint",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", then the insertion can be done in constant time. Otherwise it behaves in the same way as "
            ],
            [
              "emplace()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If we know where the new element will be inserted, then we can use "
          },
          {
            "Text": "emplace_hint()",
            "AttrFlags": 2
          },
          {
            "Text": " to specify an iterator "
          },
          {
            "Text": "hint",
            "AttrFlags": 2
          },
          {
            "Text": ". If the new element can be inserted just before "
          },
          {
            "Text": "hint",
            "AttrFlags": 2
          },
          {
            "Text": ", then the insertion can be done in constant time. Otherwise it behaves in the same way as "
          },
          {
            "Text": "emplace()",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522267665,
        "id": "814f6107-162b-48b9-af86-5fa383abdd91",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522267665,
        "parent_id": "4076c771-2318-46ed-86a3-204b379c38e0",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "std::map\u003c std::string , int \u003e runs;\nauto it = runs.emplace(\"Barry Bonds\", 762); // get iterator to the inserted element\n// the next element will be before \"Barry Bonds\", so it is inserted before 'it'\nruns.emplace_hint(it, \"Babe Ruth\", 714);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "std::map\u003c std::string , int \u003e runs;\nauto it = runs.emplace(\"Barry Bonds\", 762); // get iterator to the inserted element\n// the next element will be before \"Barry Bonds\", so it is inserted before 'it'\nruns.emplace_hint(it, \"Babe Ruth\", 714);",
        "code_language": "Plain Text"
      }
    ],
    "title": "Inserting elements",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}