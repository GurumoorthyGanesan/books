{
  "ID": "bd18f393-1023-4509-898e-2ad2b36171be",
  "Root": {
    "alive": true,
    "content": [
      "94811607-c77f-4960-9ce8-de558b7bf317",
      "4b44b607-870f-414c-ae25-14ffa035fb27",
      "fedad438-0d15-427a-9ee3-80030764b594",
      "7611bcc5-5658-4343-a35b-3c3dfb8cd7cc",
      "b3ebf120-8306-4a16-a053-adc28cd3f7ed",
      "df0786a1-62f2-4810-b94e-e84ac399baf3",
      "b9db3cbb-5c3b-464f-9efa-1453d35fd544",
      "fc9fa5ae-1aca-43ec-b3b9-9bddf1c6521b",
      "826deccd-f286-4d4a-900b-8ee8c0d41024",
      "1b808b59-889e-4539-a76f-28443caf06af"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550521962502,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "bd18f393-1023-4509-898e-2ad2b36171be",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550796840000,
    "parent_id": "cbd900b3-1684-4f0d-977a-5a5b2a20aff3",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Calculating power with C++ 11"
        ]
      ]
    },
    "type": "page",
    "version": 27,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521962500,
        "id": "94811607-c77f-4960-9ce8-de558b7bf317",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521962500,
        "parent_id": "bd18f393-1023-4509-898e-2ad2b36171be",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "With C++11 and higher calculations at compile time can be much easier. For example calculating the power of a given number at compile time will be following:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "With C++11 and higher calculations at compile time can be much easier. For example calculating the power of a given number at compile time will be following:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521962500,
        "id": "4b44b607-870f-414c-ae25-14ffa035fb27",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550796780000,
        "parent_id": "bd18f393-1023-4509-898e-2ad2b36171be",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "template \u003ctypename T\u003e\nconstexpr T calculatePower(T value, unsigned power) {\n    return power == 0 ? 1 : value * calculatePower(value, power-1);\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "template \u003ctypename T\u003e\nconstexpr T calculatePower(T value, unsigned power) {\n    return power == 0 ? 1 : value * calculatePower(value, power-1);\n}",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521962501,
        "id": "fedad438-0d15-427a-9ee3-80030764b594",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521962501,
        "parent_id": "bd18f393-1023-4509-898e-2ad2b36171be",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Keyword "
            ],
            [
              "constexpr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is responsible for calculating function in compilation time, then and only then, when all the requirements for this will be met (see more at constexpr keyword reference) for example all the arguments must be known at compile time."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Keyword "
          },
          {
            "Text": "constexpr",
            "AttrFlags": 2
          },
          {
            "Text": " is responsible for calculating function in compilation time, then and only then, when all the requirements for this will be met (see more at constexpr keyword reference) for example all the arguments must be known at compile time."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521962501,
        "id": "7611bcc5-5658-4343-a35b-3c3dfb8cd7cc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521962501,
        "parent_id": "bd18f393-1023-4509-898e-2ad2b36171be",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note: In C++11 "
            ],
            [
              "constexpr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " function must compose only from one return statement."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note: In C++11 "
          },
          {
            "Text": "constexpr",
            "AttrFlags": 2
          },
          {
            "Text": " function must compose only from one return statement."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521962501,
        "id": "b3ebf120-8306-4a16-a053-adc28cd3f7ed",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521962501,
        "parent_id": "bd18f393-1023-4509-898e-2ad2b36171be",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Advantages: Comparing this to the standard way of compile time calculation, this method is also useful for runtime calculations. It means, that if the arguments of the function are not known at the compilation time (e.g. value and power are given as input via user), then function is run in a compilation time, so there’s no need to duplicate a code (as we would be forced in older standards of C++)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Advantages: Comparing this to the standard way of compile time calculation, this method is also useful for runtime calculations. It means, that if the arguments of the function are not known at the compilation time (e.g. value and power are given as input via user), then function is run in a compilation time, so there’s no need to duplicate a code (as we would be forced in older standards of C++)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521962501,
        "id": "df0786a1-62f2-4810-b94e-e84ac399baf3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521962501,
        "parent_id": "bd18f393-1023-4509-898e-2ad2b36171be",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "E.g."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "E.g."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521962501,
        "id": "b9db3cbb-5c3b-464f-9efa-1453d35fd544",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550796780000,
        "parent_id": "bd18f393-1023-4509-898e-2ad2b36171be",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "void useExample() {\n    constexpr int compileTimeCalculated = calculatePower(3, 3); // computes at compile time,\n                               // as both arguments are known at compilation time\n                               // and used for a constant expression.\n    int value;\n    std::cin \u003e\u003e value;\n    int runtimeCalculated = calculatePower(value, 3);  // runtime calculated,\n                                    // because value is known only at runtime.\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "void useExample() {\n    constexpr int compileTimeCalculated = calculatePower(3, 3); // computes at compile time,\n                               // as both arguments are known at compilation time\n                               // and used for a constant expression.\n    int value;\n    std::cin \u003e\u003e value;\n    int runtimeCalculated = calculatePower(value, 3);  // runtime calculated,\n                                    // because value is known only at runtime.\n}",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521962501,
        "id": "fc9fa5ae-1aca-43ec-b3b9-9bddf1c6521b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521962501,
        "parent_id": "bd18f393-1023-4509-898e-2ad2b36171be",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Another way to calculate power at compile time can make use of fold expression as follows:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Another way to calculate power at compile time can make use of fold expression as follows:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521962501,
        "id": "826deccd-f286-4d4a-900b-8ee8c0d41024",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550796780000,
        "parent_id": "bd18f393-1023-4509-898e-2ad2b36171be",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "#include \u003ciostream\u003e\n#include \u003cutility\u003e\n\ntemplate \u003cclass T, T V, T N, class I = std::make_integer_sequence\u003cT, N\u003e\u003e\nstruct power;\n\ntemplate \u003cclass T, T V, T N, T... Is\u003e\nstruct power\u003cT, V, N, std::integer_sequence\u003cT, Is...\u003e\u003e {\n   static constexpr T value = (static_cast\u003cT\u003e(1) * ... * (V * static_cast\u003cbool\u003e(Is + 1)));\n};\n\nint main() {\n   std::cout \u003c\u003c power\u003cint, 4, 2\u003e::value \u003c\u003c std::endl;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "#include \u003ciostream\u003e\n#include \u003cutility\u003e\n\ntemplate \u003cclass T, T V, T N, class I = std::make_integer_sequence\u003cT, N\u003e\u003e\nstruct power;\n\ntemplate \u003cclass T, T V, T N, T... Is\u003e\nstruct power\u003cT, V, N, std::integer_sequence\u003cT, Is...\u003e\u003e {\n   static constexpr T value = (static_cast\u003cT\u003e(1) * ... * (V * static_cast\u003cbool\u003e(Is + 1)));\n};\n\nint main() {\n   std::cout \u003c\u003c power\u003cint, 4, 2\u003e::value \u003c\u003c std::endl;\n}",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550796840000,
        "id": "1b808b59-889e-4539-a76f-28443caf06af",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550796840000,
        "parent_id": "bd18f393-1023-4509-898e-2ad2b36171be",
        "parent_table": "block",
        "type": "text",
        "version": 3
      }
    ],
    "title": "Calculating power with C++ 11",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}