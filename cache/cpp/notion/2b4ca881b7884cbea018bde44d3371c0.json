{
  "ID": "2b4ca881-b788-4cbe-a018-bde44d3371c0",
  "Root": {
    "alive": true,
    "content": [
      "53918171-0796-4674-9a0f-76e363080272",
      "f1e0fcac-8c8e-48ed-ab8a-ca808bbf4324",
      "1dbe7484-b74e-46f1-9a5c-9a19a02af5d2",
      "58b2f165-7170-4718-ac37-7b0ea116277a",
      "28fef6a9-94fd-4722-9857-687cc9b03703",
      "39542373-6ad9-4c88-9016-e252fddba219",
      "04d443e6-1499-4e02-ae8a-70083377fd1b",
      "b55d453c-322e-403c-baba-092ab3c4bb93",
      "fa2c2be8-1fcf-4fb2-8615-257530164e4b",
      "83d4818e-748e-4e28-a891-1b02e25b79e4",
      "fc8034e8-95bc-4278-810f-b98fa648a8a6",
      "c0f926de-ca4b-48b9-a850-4a8cbfd1988b",
      "9aadef89-d6d8-4b51-9532-0931583ecd88",
      "35e1c9bf-3464-466e-807d-ab6d159bcb64",
      "c63c2e8f-6fd1-4b54-a4a4-87421698baf3",
      "26cd4c33-e5bc-4943-ba42-960b804bed74",
      "0ed2bd04-f1ae-44a3-9bd2-44e59342ea60",
      "ad09a7cf-bdd1-43ae-9404-3b97c7e91e20",
      "f0a2b809-af09-44da-87fd-89b7448831bf",
      "60aca60b-99d0-42e3-8175-e825e50ae8c4"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522047541,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "2b4ca881-b788-4cbe-a018-bde44d3371c0",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550655840000,
    "parent_id": "8655f492-9c51-4f68-ad52-8b6c1e02a277",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Iterating over std::vector"
        ]
      ]
    },
    "type": "page",
    "version": 16,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522047536,
        "id": "53918171-0796-4674-9a0f-76e363080272",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522047536,
        "parent_id": "2b4ca881-b788-4cbe-a018-bde44d3371c0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You can iterate over a "
            ],
            [
              "std::vector",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://en.cppreference.com/w/cpp/container/vector"
                ]
              ]
            ],
            [
              " in several ways. For each of the following sections, "
            ],
            [
              "v",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is defined as follows:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You can iterate over a "
          },
          {
            "Text": "std::vector",
            "AttrFlags": 2,
            "Link": "http://en.cppreference.com/w/cpp/container/vector"
          },
          {
            "Text": " in several ways. For each of the following sections, "
          },
          {
            "Text": "v",
            "AttrFlags": 2
          },
          {
            "Text": " is defined as follows:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522047537,
        "id": "f1e0fcac-8c8e-48ed-ab8a-ca808bbf4324",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522047537,
        "parent_id": "2b4ca881-b788-4cbe-a018-bde44d3371c0",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "std::vector\u003cint\u003e v;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "std::vector\u003cint\u003e v;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522047537,
        "id": "1dbe7484-b74e-46f1-9a5c-9a19a02af5d2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522047537,
        "parent_id": "2b4ca881-b788-4cbe-a018-bde44d3371c0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Iterating in the Forward Direction"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Iterating in the Forward Direction"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522047537,
        "id": "58b2f165-7170-4718-ac37-7b0ea116277a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522047537,
        "parent_id": "2b4ca881-b788-4cbe-a018-bde44d3371c0",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// Range based for\nfor(const auto\u0026 value: v) {\n    std::cout \u003c\u003c value \u003c\u003c \"\\n\";\n}\n\n// Using a for loop with iterator\nfor(auto it = std::begin(v); it != std::end(v); ++it) {\n    std::cout \u003c\u003c *it \u003c\u003c \"\\n\";\n}\n\n// Using for_each algorithm, using a function or functor:\nvoid fun(int const\u0026 value) {\n    std::cout \u003c\u003c value \u003c\u003c \"\\n\";\n}\n\nstd::for_each(std::begin(v), std::end(v), fun);\n\n// Using for_each algorithm. Using a lambda:\nstd::for_each(std::begin(v), std::end(v), [](int const\u0026 value) {\n    std::cout \u003c\u003c value \u003c\u003c \"\\n\";\n});"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// Range based for\nfor(const auto\u0026 value: v) {\n    std::cout \u003c\u003c value \u003c\u003c \"\\n\";\n}\n\n// Using a for loop with iterator\nfor(auto it = std::begin(v); it != std::end(v); ++it) {\n    std::cout \u003c\u003c *it \u003c\u003c \"\\n\";\n}\n\n// Using for_each algorithm, using a function or functor:\nvoid fun(int const\u0026 value) {\n    std::cout \u003c\u003c value \u003c\u003c \"\\n\";\n}\n\nstd::for_each(std::begin(v), std::end(v), fun);\n\n// Using for_each algorithm. Using a lambda:\nstd::for_each(std::begin(v), std::end(v), [](int const\u0026 value) {\n    std::cout \u003c\u003c value \u003c\u003c \"\\n\";\n});",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522047537,
        "id": "28fef6a9-94fd-4722-9857-687cc9b03703",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522047537,
        "parent_id": "2b4ca881-b788-4cbe-a018-bde44d3371c0",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// Using a for loop with iterator\nfor(std::vector\u003cint\u003e::iterator it = std::begin(v); it != std::end(v); ++it) {\n    std::cout \u003c\u003c *it \u003c\u003c \"\\n\";\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// Using a for loop with iterator\nfor(std::vector\u003cint\u003e::iterator it = std::begin(v); it != std::end(v); ++it) {\n    std::cout \u003c\u003c *it \u003c\u003c \"\\n\";\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522047537,
        "id": "39542373-6ad9-4c88-9016-e252fddba219",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522047537,
        "parent_id": "2b4ca881-b788-4cbe-a018-bde44d3371c0",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// Using a for loop with index\nfor(std::size_t i = 0; i \u003c v.size(); ++i) {\n    std::cout \u003c\u003c v[i] \u003c\u003c \"\\n\";\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// Using a for loop with index\nfor(std::size_t i = 0; i \u003c v.size(); ++i) {\n    std::cout \u003c\u003c v[i] \u003c\u003c \"\\n\";\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522047537,
        "id": "04d443e6-1499-4e02-ae8a-70083377fd1b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522047537,
        "parent_id": "2b4ca881-b788-4cbe-a018-bde44d3371c0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Iterating in the Reverse Direction"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Iterating in the Reverse Direction"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522047538,
        "id": "b55d453c-322e-403c-baba-092ab3c4bb93",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522047538,
        "parent_id": "2b4ca881-b788-4cbe-a018-bde44d3371c0",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// There is no standard way to use range based for for this.\n// See below for alternatives.\n\n// Using for_each algorithm\n// Note: Using a lambda for clarity. But a function or functor will work\nstd::for_each(std::rbegin(v), std::rend(v), [](auto const\u0026 value) {\n    std::cout \u003c\u003c value \u003c\u003c \"\\n\";\n});\n\n// Using a for loop with iterator\nfor(auto rit = std::rbegin(v); rit != std::rend(v); ++rit) {\n    std::cout \u003c\u003c *rit \u003c\u003c \"\\n\";\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// There is no standard way to use range based for for this.\n// See below for alternatives.\n\n// Using for_each algorithm\n// Note: Using a lambda for clarity. But a function or functor will work\nstd::for_each(std::rbegin(v), std::rend(v), [](auto const\u0026 value) {\n    std::cout \u003c\u003c value \u003c\u003c \"\\n\";\n});\n\n// Using a for loop with iterator\nfor(auto rit = std::rbegin(v); rit != std::rend(v); ++rit) {\n    std::cout \u003c\u003c *rit \u003c\u003c \"\\n\";\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522047538,
        "id": "fa2c2be8-1fcf-4fb2-8615-257530164e4b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522047538,
        "parent_id": "2b4ca881-b788-4cbe-a018-bde44d3371c0",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// Using a for loop with index\nfor(std::size_t i = 0; i \u003c v.size(); ++i) {\n    std::cout \u003c\u003c v[v.size() - 1 - i] \u003c\u003c \"\\n\";\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// Using a for loop with index\nfor(std::size_t i = 0; i \u003c v.size(); ++i) {\n    std::cout \u003c\u003c v[v.size() - 1 - i] \u003c\u003c \"\\n\";\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522047538,
        "id": "83d4818e-748e-4e28-a891-1b02e25b79e4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522047538,
        "parent_id": "2b4ca881-b788-4cbe-a018-bde44d3371c0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Though there is no built-in way to use the range based for to reverse iterate; it is relatively simple to fix this. The range based for uses "
            ],
            [
              "begin()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "end()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to get iterators and thus simulating this with a wrapper object can achieve the results we require."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Though there is no built-in way to use the range based for to reverse iterate; it is relatively simple to fix this. The range based for uses "
          },
          {
            "Text": "begin()",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "end()",
            "AttrFlags": 2
          },
          {
            "Text": " to get iterators and thus simulating this with a wrapper object can achieve the results we require."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522047538,
        "id": "fc8034e8-95bc-4278-810f-b98fa648a8a6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522047538,
        "parent_id": "2b4ca881-b788-4cbe-a018-bde44d3371c0",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "template\u003cclass C\u003e\nstruct ReverseRange {\n  C c; // could be a reference or a copy, if the original was a temporary\n  ReverseRange(C\u0026\u0026 cin): c(std::forward\u003cC\u003e(cin)) {}\n  ReverseRange(ReverseRange\u0026\u0026)=default;\n  ReverseRange\u0026 operator=(ReverseRange\u0026\u0026)=delete;\n  auto begin() const {return std::rbegin(c);}\n  auto end()   const {return std::rend(c);}\n};\n// C is meant to be deduced, and perfect forwarded into\ntemplate\u003cclass C\u003e\nReverseRange\u003cC\u003e make_ReverseRange(C\u0026\u0026 c) {return {std::forward\u003cC\u003e(c)};}\n\nint main() {\n    std::vector\u003cint\u003e v { 1,2,3,4};\n    for(auto const\u0026 value: make_ReverseRange(v)) {\n        std::cout \u003c\u003c value \u003c\u003c \"\\n\";\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "template\u003cclass C\u003e\nstruct ReverseRange {\n  C c; // could be a reference or a copy, if the original was a temporary\n  ReverseRange(C\u0026\u0026 cin): c(std::forward\u003cC\u003e(cin)) {}\n  ReverseRange(ReverseRange\u0026\u0026)=default;\n  ReverseRange\u0026 operator=(ReverseRange\u0026\u0026)=delete;\n  auto begin() const {return std::rbegin(c);}\n  auto end()   const {return std::rend(c);}\n};\n// C is meant to be deduced, and perfect forwarded into\ntemplate\u003cclass C\u003e\nReverseRange\u003cC\u003e make_ReverseRange(C\u0026\u0026 c) {return {std::forward\u003cC\u003e(c)};}\n\nint main() {\n    std::vector\u003cint\u003e v { 1,2,3,4};\n    for(auto const\u0026 value: make_ReverseRange(v)) {\n        std::cout \u003c\u003c value \u003c\u003c \"\\n\";\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522047538,
        "id": "c0f926de-ca4b-48b9-a850-4a8cbfd1988b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522047538,
        "parent_id": "2b4ca881-b788-4cbe-a018-bde44d3371c0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Enforcing const elements"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Enforcing const elements"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522047538,
        "id": "9aadef89-d6d8-4b51-9532-0931583ecd88",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522047538,
        "parent_id": "2b4ca881-b788-4cbe-a018-bde44d3371c0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Since C++11 the "
            ],
            [
              "cbegin()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "cend()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " methods allow you to obtain a "
            ],
            [
              "constant iterator",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " for a vector, even if the vector is non-const. A constant iterator allows you to read but not modify the contents of the vector which is useful to enforce const correctness:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Since C++11 the "
          },
          {
            "Text": "cbegin()",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "cend()",
            "AttrFlags": 2
          },
          {
            "Text": " methods allow you to obtain a "
          },
          {
            "Text": "constant iterator",
            "AttrFlags": 4
          },
          {
            "Text": " for a vector, even if the vector is non-const. A constant iterator allows you to read but not modify the contents of the vector which is useful to enforce const correctness:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522047539,
        "id": "35e1c9bf-3464-466e-807d-ab6d159bcb64",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522047539,
        "parent_id": "2b4ca881-b788-4cbe-a018-bde44d3371c0",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// forward iteration\nfor (auto pos = v.cbegin(); pos != v.cend(); ++pos) {\n   // type of pos is vector\u003cT\u003e::const_iterator\n   // *pos = 5; // Compile error - can't write via const iterator\n}\n\n// reverse iteration\nfor (auto pos = v.crbegin(); pos != v.crend(); ++pos) {\n   // type of pos is vector\u003cT\u003e::const_iterator\n   // *pos = 5; // Compile error - can't write via const iterator\n}\n\n// expects Functor::operand()(T\u0026) \nfor_each(v.begin(), v.end(), Functor());\n\n// expects Functor::operand()(const T\u0026)\nfor_each(v.cbegin(), v.cend(), Functor())"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// forward iteration\nfor (auto pos = v.cbegin(); pos != v.cend(); ++pos) {\n   // type of pos is vector\u003cT\u003e::const_iterator\n   // *pos = 5; // Compile error - can't write via const iterator\n}\n\n// reverse iteration\nfor (auto pos = v.crbegin(); pos != v.crend(); ++pos) {\n   // type of pos is vector\u003cT\u003e::const_iterator\n   // *pos = 5; // Compile error - can't write via const iterator\n}\n\n// expects Functor::operand()(T\u0026) \nfor_each(v.begin(), v.end(), Functor());\n\n// expects Functor::operand()(const T\u0026)\nfor_each(v.cbegin(), v.cend(), Functor())",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522047539,
        "id": "c63c2e8f-6fd1-4b54-a4a4-87421698baf3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522047539,
        "parent_id": "2b4ca881-b788-4cbe-a018-bde44d3371c0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "as_const",
              [
                [
                  "a",
                  "http://en.cppreference.com/w/cpp/utility/as_const"
                ]
              ]
            ],
            [
              " extends this to range iteration:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "as_const",
            "Link": "http://en.cppreference.com/w/cpp/utility/as_const"
          },
          {
            "Text": " extends this to range iteration:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522047539,
        "id": "26cd4c33-e5bc-4943-ba42-960b804bed74",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522047539,
        "parent_id": "2b4ca881-b788-4cbe-a018-bde44d3371c0",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "for (auto const\u0026 e : std::as_const(v)) {\n  std::cout \u003c\u003c e \u003c\u003c '\\n';\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "for (auto const\u0026 e : std::as_const(v)) {\n  std::cout \u003c\u003c e \u003c\u003c '\\n';\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522047539,
        "id": "0ed2bd04-f1ae-44a3-9bd2-44e59342ea60",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522047539,
        "parent_id": "2b4ca881-b788-4cbe-a018-bde44d3371c0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This is easy to implement in earlier versions of C++:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This is easy to implement in earlier versions of C++:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522047539,
        "id": "ad09a7cf-bdd1-43ae-9404-3b97c7e91e20",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522047539,
        "parent_id": "2b4ca881-b788-4cbe-a018-bde44d3371c0",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "template \u003cclass T\u003e\nconstexpr std::add_const_t\u003cT\u003e\u0026 as_const(T\u0026 t) noexcept {\n  return t;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "template \u003cclass T\u003e\nconstexpr std::add_const_t\u003cT\u003e\u0026 as_const(T\u0026 t) noexcept {\n  return t;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522047539,
        "id": "f0a2b809-af09-44da-87fd-89b7448831bf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522047539,
        "parent_id": "2b4ca881-b788-4cbe-a018-bde44d3371c0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A Note on Efficiency"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "A Note on Efficiency"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522047541,
        "id": "60aca60b-99d0-42e3-8175-e825e50ae8c4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522047541,
        "parent_id": "2b4ca881-b788-4cbe-a018-bde44d3371c0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Since the class "
            ],
            [
              "std::vector",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is basically a class that manages a dynamically allocated contiguous array, the same principle explained "
            ],
            [
              "here",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c/322/arrays/8977/iterating-through-an-array-efficiently-and-row-major-order"
                ]
              ]
            ],
            [
              " applies to C++ vectors. Accessing the vector’s content by index is much more efficient when following the row-major order principle. Of course, each access to the vector also puts its management content into the cache as well, but as has been debated many times (notably "
            ],
            [
              "here",
              [
                [
                  "a",
                  "http://stackoverflow.com/questions/381621/using-arrays-or-stdvectors-in-c-whats-the-performance-gap"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "here",
              [
                [
                  "a",
                  "http://stackoverflow.com/questions/3664272/is-stdvector-so-much-slower-than-plain-arrays"
                ]
              ]
            ],
            [
              "), the difference in performance for iterating over a "
            ],
            [
              "std::vector",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " compared to a raw array is negligible. So the same principle of efficiency for raw arrays in C also applies for C++’s "
            ],
            [
              "std::vector",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Since the class "
          },
          {
            "Text": "std::vector",
            "AttrFlags": 2
          },
          {
            "Text": " is basically a class that manages a dynamically allocated contiguous array, the same principle explained "
          },
          {
            "Text": "here",
            "Link": "http://stackoverflow.com/documentation/c/322/arrays/8977/iterating-through-an-array-efficiently-and-row-major-order"
          },
          {
            "Text": " applies to C++ vectors. Accessing the vector’s content by index is much more efficient when following the row-major order principle. Of course, each access to the vector also puts its management content into the cache as well, but as has been debated many times (notably "
          },
          {
            "Text": "here",
            "Link": "http://stackoverflow.com/questions/381621/using-arrays-or-stdvectors-in-c-whats-the-performance-gap"
          },
          {
            "Text": " and "
          },
          {
            "Text": "here",
            "Link": "http://stackoverflow.com/questions/3664272/is-stdvector-so-much-slower-than-plain-arrays"
          },
          {
            "Text": "), the difference in performance for iterating over a "
          },
          {
            "Text": "std::vector",
            "AttrFlags": 2
          },
          {
            "Text": " compared to a raw array is negligible. So the same principle of efficiency for raw arrays in C also applies for C++’s "
          },
          {
            "Text": "std::vector",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      }
    ],
    "title": "Iterating over std::vector",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}