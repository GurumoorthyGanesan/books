{
  "ID": "3a5256c5-9dd0-49fb-afcb-4927fe1b59e5",
  "Root": {
    "alive": true,
    "content": [
      "a5b89dce-ebf8-4254-a080-1870a12824a6",
      "8ed9f5a5-fb3b-4def-a772-427950c5d7aa",
      "2557131a-6658-4728-9505-137749c87ee4",
      "9d9270d0-8863-44fc-9ff6-51759e9d3ed7",
      "bbb7e833-2a84-49ac-b253-8194e0326e3e",
      "11ed2589-bcdd-4279-a2fb-36afd6f5c927"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522311491,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "3a5256c5-9dd0-49fb-afcb-4927fe1b59e5",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550655060000,
    "parent_id": "0b17f7b9-11d1-4229-931e-966fb51d1ba9",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Overload resolution with a large number of options"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522311488,
        "id": "a5b89dce-ebf8-4254-a080-1870a12824a6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522311488,
        "parent_id": "3a5256c5-9dd0-49fb-afcb-4927fe1b59e5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If you need to select between several options, enabling just one via "
            ],
            [
              "enable_if\u003c\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can be quite cumbersome, since several conditions needs to be negated too."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If you need to select between several options, enabling just one via "
          },
          {
            "Text": "enable_if\u003c\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " can be quite cumbersome, since several conditions needs to be negated too."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522311490,
        "id": "8ed9f5a5-fb3b-4def-a772-427950c5d7aa",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522311490,
        "parent_id": "3a5256c5-9dd0-49fb-afcb-4927fe1b59e5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The ordering between overloads can instead be selected using inheritance, i.e. tag dispatch."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The ordering between overloads can instead be selected using inheritance, i.e. tag dispatch."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522311491,
        "id": "2557131a-6658-4728-9505-137749c87ee4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522311491,
        "parent_id": "3a5256c5-9dd0-49fb-afcb-4927fe1b59e5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Instead of testing for the thing that needs to be well-formed, and also testing the negation of all the other versions conditions, we instead test just for what we need, preferably in a "
            ],
            [
              "decltype",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in a trailing return. This might leave several option well formed, we differentiate between those using ‘tags’, similar to iterator-trait tags ("
            ],
            [
              "random_access_tag",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " et al). This works because a direct match is better that a base class, which is better that a base class of a base class, etc."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Instead of testing for the thing that needs to be well-formed, and also testing the negation of all the other versions conditions, we instead test just for what we need, preferably in a "
          },
          {
            "Text": "decltype",
            "AttrFlags": 2
          },
          {
            "Text": " in a trailing return. This might leave several option well formed, we differentiate between those using ‘tags’, similar to iterator-trait tags ("
          },
          {
            "Text": "random_access_tag",
            "AttrFlags": 2
          },
          {
            "Text": " et al). This works because a direct match is better that a base class, which is better that a base class of a base class, etc."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522311491,
        "id": "9d9270d0-8863-44fc-9ff6-51759e9d3ed7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522311491,
        "parent_id": "3a5256c5-9dd0-49fb-afcb-4927fe1b59e5",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003calgorithm\u003e\n#include \u003citerator\u003e\n\nnamespace detail\n{\n    // this gives us infinite types, that inherit from each other\n    template\u003cstd::size_t N\u003e\n    struct pick : pick\u003cN-1\u003e {};\n    template\u003c\u003e\n    struct pick\u003c0\u003e {};\n\n    // the overload we want to be preferred have a higher N in pick\u003cN\u003e\n    // this is the first helper template function\n    template\u003ctypename T\u003e\n    auto stable_sort(T\u0026 t, pick\u003c2\u003e)\n        -\u003e decltype( t.stable_sort(), void() )\n    {\n        // if the container have a member stable_sort, use that\n        t.stable_sort();\n    }\n\n    // this helper will be second best match\n    template\u003ctypename T\u003e\n    auto stable_sort(T\u0026 t, pick\u003c1\u003e)\n        -\u003e decltype( t.sort(), void() )\n    {\n        // if the container have a member sort, but no member stable_sort\n        // it's customary that the sort member is stable\n        t.sort();\n    }\n\n    // this helper will be picked last\n    template\u003ctypename T\u003e\n    auto stable_sort(T\u0026 t, pick\u003c0\u003e)\n        -\u003e decltype( std::stable_sort(std::begin(t), std::end(t)), void() )\n    {\n        // the container have neither a member sort, nor member stable_sort\n        std::stable_sort(std::begin(t), std::end(t));\n    }\n\n}\n\n// this is the function the user calls. it will dispatch the call\n// to the correct implementation with the help of 'tags'.\ntemplate\u003ctypename T\u003e\nvoid stable_sort(T\u0026 t)\n{\n    // use an N that is higher that any used above.\n    // this will pick the highest overload that is well formed.\n    detail::stable_sort(t, detail::pick\u003c10\u003e{});\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003calgorithm\u003e\n#include \u003citerator\u003e\n\nnamespace detail\n{\n    // this gives us infinite types, that inherit from each other\n    template\u003cstd::size_t N\u003e\n    struct pick : pick\u003cN-1\u003e {};\n    template\u003c\u003e\n    struct pick\u003c0\u003e {};\n\n    // the overload we want to be preferred have a higher N in pick\u003cN\u003e\n    // this is the first helper template function\n    template\u003ctypename T\u003e\n    auto stable_sort(T\u0026 t, pick\u003c2\u003e)\n        -\u003e decltype( t.stable_sort(), void() )\n    {\n        // if the container have a member stable_sort, use that\n        t.stable_sort();\n    }\n\n    // this helper will be second best match\n    template\u003ctypename T\u003e\n    auto stable_sort(T\u0026 t, pick\u003c1\u003e)\n        -\u003e decltype( t.sort(), void() )\n    {\n        // if the container have a member sort, but no member stable_sort\n        // it's customary that the sort member is stable\n        t.sort();\n    }\n\n    // this helper will be picked last\n    template\u003ctypename T\u003e\n    auto stable_sort(T\u0026 t, pick\u003c0\u003e)\n        -\u003e decltype( std::stable_sort(std::begin(t), std::end(t)), void() )\n    {\n        // the container have neither a member sort, nor member stable_sort\n        std::stable_sort(std::begin(t), std::end(t));\n    }\n\n}\n\n// this is the function the user calls. it will dispatch the call\n// to the correct implementation with the help of 'tags'.\ntemplate\u003ctypename T\u003e\nvoid stable_sort(T\u0026 t)\n{\n    // use an N that is higher that any used above.\n    // this will pick the highest overload that is well formed.\n    detail::stable_sort(t, detail::pick\u003c10\u003e{});\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522311491,
        "id": "bbb7e833-2a84-49ac-b253-8194e0326e3e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522311491,
        "parent_id": "3a5256c5-9dd0-49fb-afcb-4927fe1b59e5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "There are other methods commonly used to differentiate between overloads, such as exact match being better than conversion, being better than ellipsis."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "There are other methods commonly used to differentiate between overloads, such as exact match being better than conversion, being better than ellipsis."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522311491,
        "id": "11ed2589-bcdd-4279-a2fb-36afd6f5c927",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522311491,
        "parent_id": "3a5256c5-9dd0-49fb-afcb-4927fe1b59e5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "However, tag-dispatch can extend to any number of choices, and is a bit more clear in intent."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "However, tag-dispatch can extend to any number of choices, and is a bit more clear in intent."
          }
        ]
      }
    ],
    "title": "Overload resolution with a large number of options",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}