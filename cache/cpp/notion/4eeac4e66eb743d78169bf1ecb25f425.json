{
  "ID": "4eeac4e6-6eb7-43d7-8169-bf1ecb25f425",
  "Root": {
    "alive": true,
    "content": [
      "1cf338bc-5ae7-4576-be52-c58b3b5e80d6",
      "82defd1f-0cfb-43ac-bbe3-7b2d0f35948b",
      "6277e782-9528-4c6f-99bd-0775eff2c152",
      "d5ccf960-447d-4ea5-ab0f-0413e1302ed9"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550525406216,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "4eeac4e6-6eb7-43d7-8169-bf1ecb25f425",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551689196692,
    "parent_id": "b1cbbef7-66d3-49c3-aaff-f598af5cdf47",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "std packaged task and std future"
        ]
      ]
    },
    "type": "page",
    "version": 4,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525406212,
        "id": "1cf338bc-5ae7-4576-be52-c58b3b5e80d6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525406212,
        "parent_id": "4eeac4e6-6eb7-43d7-8169-bf1ecb25f425",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "std::packaged_task",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " bundles a function and the associated promise for its return type:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "std::packaged_task",
            "AttrFlags": 2
          },
          {
            "Text": " bundles a function and the associated promise for its return type:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525406215,
        "id": "82defd1f-0cfb-43ac-bbe3-7b2d0f35948b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525406215,
        "parent_id": "4eeac4e6-6eb7-43d7-8169-bf1ecb25f425",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "template\u003ctypename F\u003e\nauto async_deferred(F\u0026\u0026 func) -\u003e std::future\u003cdecltype(func())\u003e\n{\n    auto task   = std::packaged_task\u003cdecltype(func())()\u003e(std::forward\u003cF\u003e(func));\n    auto future = task.get_future();\n\n    std::thread(std::move(task)).detach();\n\n    return std::move(future);\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "template\u003ctypename F\u003e\nauto async_deferred(F\u0026\u0026 func) -\u003e std::future\u003cdecltype(func())\u003e\n{\n    auto task   = std::packaged_task\u003cdecltype(func())()\u003e(std::forward\u003cF\u003e(func));\n    auto future = task.get_future();\n\n    std::thread(std::move(task)).detach();\n\n    return std::move(future);\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525406215,
        "id": "6277e782-9528-4c6f-99bd-0775eff2c152",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525406215,
        "parent_id": "4eeac4e6-6eb7-43d7-8169-bf1ecb25f425",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The thread starts running immediately. We can either detach it, or have join it at the end of the scope. When the function call to std::thread finishes, the result is ready."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The thread starts running immediately. We can either detach it, or have join it at the end of the scope. When the function call to std::thread finishes, the result is ready."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525406216,
        "id": "d5ccf960-447d-4ea5-ab0f-0413e1302ed9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525406216,
        "parent_id": "4eeac4e6-6eb7-43d7-8169-bf1ecb25f425",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note that this is slightly different from "
            ],
            [
              "std::async",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " where the returned "
            ],
            [
              "std::future",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " when destructed will actually "
            ],
            [
              "block",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " until the thread is finished."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note that this is slightly different from "
          },
          {
            "Text": "std::async",
            "AttrFlags": 2
          },
          {
            "Text": " where the returned "
          },
          {
            "Text": "std::future",
            "AttrFlags": 2
          },
          {
            "Text": " when destructed will actually "
          },
          {
            "Text": "block",
            "AttrFlags": 1
          },
          {
            "Text": " until the thread is finished."
          }
        ]
      }
    ],
    "title": "std packaged task and std future",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}