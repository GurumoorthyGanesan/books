{
  "ID": "00dae280-3460-44a6-9074-297da6094226",
  "Root": {
    "alive": true,
    "content": [
      "5b5bfa96-c2ee-4d0e-a6c1-12b1bca36e03",
      "d91054d8-ed44-46df-bf5b-9f51407f394a",
      "f4e0123b-67bf-4674-82be-ddb5ebda4a41",
      "ebbaae4f-5de5-4ee5-a687-48c2c588a9b7",
      "f466eeef-4d7e-4423-ae20-cb73280733ea"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550523021678,
    "id": "00dae280-3460-44a6-9074-297da6094226",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550523021678,
    "parent_id": "d3696e4f-8789-4401-af6c-2f073d356228",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "010 Self-made user-defined literal for binary"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523021675,
        "id": "5b5bfa96-c2ee-4d0e-a6c1-12b1bca36e03",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523021675,
        "parent_id": "00dae280-3460-44a6-9074-297da6094226",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Despite you can write a binary number in C++14 like:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Despite you can write a binary number in C++14 like:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523021678,
        "id": "d91054d8-ed44-46df-bf5b-9f51407f394a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523021678,
        "parent_id": "00dae280-3460-44a6-9074-297da6094226",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "int number =0b0001'0101; // ==21",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "int number =0b0001'0101; // ==21",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523021678,
        "id": "f4e0123b-67bf-4674-82be-ddb5ebda4a41",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523021678,
        "parent_id": "00dae280-3460-44a6-9074-297da6094226",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "here comes a famous example with a self-made implementation for binary numbers:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "here comes a famous example with a self-made implementation for binary numbers:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523021678,
        "id": "ebbaae4f-5de5-4ee5-a687-48c2c588a9b7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523021678,
        "parent_id": "00dae280-3460-44a6-9074-297da6094226",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note: The whole template expanding program is running at compile time."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note: The whole template expanding program is running at compile time."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523021678,
        "id": "f466eeef-4d7e-4423-ae20-cb73280733ea",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523021678,
        "parent_id": "00dae280-3460-44a6-9074-297da6094226",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "template\u003c char FIRST, char... REST \u003e struct binary\n{\n    static_assert( FIRST == '0' || FIRST == '1', \"invalid binary digit\" ) ;\n    enum { value = ( ( FIRST - '0' ) \u003c\u003c sizeof...(REST) ) + binary\u003cREST...\u003e::value  } ;\n};\n\ntemplate\u003c\u003e struct binary\u003c'0'\u003e { enum { value = 0 } ; };\ntemplate\u003c\u003e struct binary\u003c'1'\u003e { enum { value = 1 } ; };\n\n\n// raw literal operator\ntemplate\u003c  char... LITERAL \u003e inline\nconstexpr unsigned int operator \"\" _b() { return binary\u003cLITERAL...\u003e::value ; }\n\n// raw literal operator\ntemplate\u003c  char... LITERAL \u003e inline\nconstexpr unsigned int operator \"\" _B() { return binary\u003cLITERAL...\u003e::value ; }\n\n#include \u003ciostream\u003e\n\nint main()\n{\n    std::cout  \u003c\u003c 10101_B \u003c\u003c \", \" \u003c\u003c 011011000111_b  \u003c\u003c '\\n' ; // prints 21, 1735\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "template\u003c char FIRST, char... REST \u003e struct binary\n{\n    static_assert( FIRST == '0' || FIRST == '1', \"invalid binary digit\" ) ;\n    enum { value = ( ( FIRST - '0' ) \u003c\u003c sizeof...(REST) ) + binary\u003cREST...\u003e::value  } ;\n};\n\ntemplate\u003c\u003e struct binary\u003c'0'\u003e { enum { value = 0 } ; };\ntemplate\u003c\u003e struct binary\u003c'1'\u003e { enum { value = 1 } ; };\n\n\n// raw literal operator\ntemplate\u003c  char... LITERAL \u003e inline\nconstexpr unsigned int operator \"\" _b() { return binary\u003cLITERAL...\u003e::value ; }\n\n// raw literal operator\ntemplate\u003c  char... LITERAL \u003e inline\nconstexpr unsigned int operator \"\" _B() { return binary\u003cLITERAL...\u003e::value ; }\n\n#include \u003ciostream\u003e\n\nint main()\n{\n    std::cout  \u003c\u003c 10101_B \u003c\u003c \", \" \u003c\u003c 011011000111_b  \u003c\u003c '\\n' ; // prints 21, 1735\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "010 Self-made user-defined literal for binary"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}