{
  "ID": "898c28de-b8f5-4157-be57-2e625d1880e0",
  "Root": {
    "alive": true,
    "content": [
      "aaaf2f5e-ddce-449c-a17c-e41b45111901",
      "0319df1e-ddea-4262-b8d8-b0769c1c16bd",
      "c5c58752-840a-4734-b219-f4070b8396f6",
      "55d092b2-4af1-4633-8118-72ea5cdfa32b",
      "c3072a7a-8c41-4a05-89a7-98a915c3b5f4",
      "81066365-070d-4645-9ebb-2fbd9363103a"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522325531,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "898c28de-b8f5-4157-be57-2e625d1880e0",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550709600000,
    "parent_id": "96325b08-db02-4f4f-a7a3-7510a746dbe2",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Locking"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522325527,
        "id": "aaaf2f5e-ddce-449c-a17c-e41b45111901",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522325527,
        "parent_id": "898c28de-b8f5-4157-be57-2e625d1880e0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Bad locking:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Bad locking:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522325530,
        "id": "0319df1e-ddea-4262-b8d8-b0769c1c16bd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522325530,
        "parent_id": "898c28de-b8f5-4157-be57-2e625d1880e0",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "std::mutex mtx;\n\nvoid bad_lock_example() {\n    mtx.lock();\n    try\n    {\n        foo();\n        bar();\n        if (baz()) {\n            mtx.unlock();   // Have to unlock on each exit point.\n            return;\n        }\n        quux();\n        mtx.unlock();       // Normal unlock happens here.\n    }\n    catch(...) {\n        mtx.unlock();       // Must also force unlock in the presence of\n        throw;              // exceptions and allow the exception to continue.\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "std::mutex mtx;\n\nvoid bad_lock_example() {\n    mtx.lock();\n    try\n    {\n        foo();\n        bar();\n        if (baz()) {\n            mtx.unlock();   // Have to unlock on each exit point.\n            return;\n        }\n        quux();\n        mtx.unlock();       // Normal unlock happens here.\n    }\n    catch(...) {\n        mtx.unlock();       // Must also force unlock in the presence of\n        throw;              // exceptions and allow the exception to continue.\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522325530,
        "id": "c5c58752-840a-4734-b219-f4070b8396f6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522325530,
        "parent_id": "898c28de-b8f5-4157-be57-2e625d1880e0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "That is the wrong way to implement the locking and unlocking of the mutex. To ensure the correct release of the mutex with "
            ],
            [
              "unlock()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " requires the programer to make sure that all the flows resulting in the exiting of the function result in a call to "
            ],
            [
              "unlock()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". As shown above this is a brittle processes as it requires any maintainers to continue following the pattern manually."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "That is the wrong way to implement the locking and unlocking of the mutex. To ensure the correct release of the mutex with "
          },
          {
            "Text": "unlock()",
            "AttrFlags": 2
          },
          {
            "Text": " requires the programer to make sure that all the flows resulting in the exiting of the function result in a call to "
          },
          {
            "Text": "unlock()",
            "AttrFlags": 2
          },
          {
            "Text": ". As shown above this is a brittle processes as it requires any maintainers to continue following the pattern manually."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522325531,
        "id": "55d092b2-4af1-4633-8118-72ea5cdfa32b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522325531,
        "parent_id": "898c28de-b8f5-4157-be57-2e625d1880e0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Using an appropriately crafted class to implement RAII, the problem is trivial:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Using an appropriately crafted class to implement RAII, the problem is trivial:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522325531,
        "id": "c3072a7a-8c41-4a05-89a7-98a915c3b5f4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522325531,
        "parent_id": "898c28de-b8f5-4157-be57-2e625d1880e0",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "std::mutex mtx;\n\nvoid good_lock_example() {\n    std::lock_guard\u003cstd::mutex\u003e lk(mtx);   // constructor locks.\n                                           // destructor unlocks. destructor call\n                                           // guaranteed by language.\n    foo();\n    bar();\n    if (baz()) {\n        return;\n    }\n    quux();\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "std::mutex mtx;\n\nvoid good_lock_example() {\n    std::lock_guard\u003cstd::mutex\u003e lk(mtx);   // constructor locks.\n                                           // destructor unlocks. destructor call\n                                           // guaranteed by language.\n    foo();\n    bar();\n    if (baz()) {\n        return;\n    }\n    quux();\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522325531,
        "id": "81066365-070d-4645-9ebb-2fbd9363103a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522325531,
        "parent_id": "898c28de-b8f5-4157-be57-2e625d1880e0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "lock_guard",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is an extremely simple class template that simply calls "
            ],
            [
              "lock()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " on its argument in its constructor, keeps a reference to the argument, and calls "
            ],
            [
              "unlock()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " on the argument in its destructor. That is, when the "
            ],
            [
              "lock_guard",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " goes out of scope, the "
            ],
            [
              "mutex",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is guaranteed to be unlocked. It doesnâ€™t matter if the reason it went out of scope is an exception or an early return - all cases are handled; regardless of the control flow, we have guaranteed that we will unlock correctly."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "lock_guard",
            "AttrFlags": 2
          },
          {
            "Text": " is an extremely simple class template that simply calls "
          },
          {
            "Text": "lock()",
            "AttrFlags": 2
          },
          {
            "Text": " on its argument in its constructor, keeps a reference to the argument, and calls "
          },
          {
            "Text": "unlock()",
            "AttrFlags": 2
          },
          {
            "Text": " on the argument in its destructor. That is, when the "
          },
          {
            "Text": "lock_guard",
            "AttrFlags": 2
          },
          {
            "Text": " goes out of scope, the "
          },
          {
            "Text": "mutex",
            "AttrFlags": 2
          },
          {
            "Text": " is guaranteed to be unlocked. It doesnâ€™t matter if the reason it went out of scope is an exception or an early return - all cases are handled; regardless of the control flow, we have guaranteed that we will unlock correctly."
          }
        ]
      }
    ],
    "title": "Locking",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}