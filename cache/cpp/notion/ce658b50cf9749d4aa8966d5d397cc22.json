{
  "ID": "ce658b50-cf97-49d4-aa89-66d5d397cc22",
  "Root": {
    "alive": true,
    "content": [
      "d14a8611-073f-4e79-b44c-bc61c6c41451",
      "7ff15af0-714e-44bf-bb02-7e10686ae1a3",
      "c234ca20-578d-436c-861f-6ee90eace4b8",
      "5a49d689-e931-433d-95c9-2cb9a14afc6c",
      "db716aff-3a24-460a-b335-254ef23bc183",
      "78b7d960-a085-4139-8c4a-b465a7417fe7",
      "eaebb40c-c402-4d14-922f-fffeeccec5da",
      "e63a6b7c-f3bc-4ac3-82a8-ece640de079c",
      "c5924712-c52c-42d0-846d-bb344de92816",
      "a3178b30-96c0-4a2e-8b3c-b44f652d0cf0",
      "396b2c20-ee11-4bf8-8e16-57e27d9ef9b9",
      "ffe19d9a-dfd6-4c9d-80c4-d0de1eabd459",
      "402cdece-27f9-4a28-9e7b-64cfc343f886",
      "f2d597d0-fd44-4c7b-8797-2a1cb1ce8c8f",
      "fab35445-35fc-4309-8f65-a7ff3f8b1a12",
      "1e97b8d5-1fc2-4038-ab90-4b551cacfc34",
      "6aebe9d3-3d78-4e3d-bb25-e31b34ac385a",
      "a3bbadd6-0d44-4ccc-9336-3a7a356c5b4b",
      "29160cc2-813e-40cb-a870-d9edb8fe0018",
      "097d51f3-2583-4b2c-a468-87eba4964ff9",
      "5f610967-b07d-4cbf-8d2d-25b468156832",
      "9de2eae0-03d3-4192-ab7b-7cfa4be2bb87",
      "b9efee9c-91a0-44bd-9e06-6c50820b0fb8",
      "281cf725-0aa6-449e-a357-ab9c974ffd23",
      "bea3db6b-16b5-471c-89d3-9776e28d2ddd",
      "94f4bacd-21c0-4e42-9e83-766a22827cee",
      "616d2c74-f12c-4018-a1a2-4de0e3842d05"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550525222860,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "ce658b50-cf97-49d4-aa89-66d5d397cc22",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551689162839,
    "parent_id": "e819fb9f-77e3-490d-9b3b-288189045e39",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "My C program ends with segfault - valgrind"
        ]
      ]
    },
    "type": "page",
    "version": 4,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525222855,
        "id": "d14a8611-073f-4e79-b44c-bc61c6c41451",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525222855,
        "parent_id": "ce658b50-cf97-49d4-aa89-66d5d397cc22",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Let’s have a basic failing program:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Let’s have a basic failing program:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525222857,
        "id": "7ff15af0-714e-44bf-bb02-7e10686ae1a3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525222857,
        "parent_id": "ce658b50-cf97-49d4-aa89-66d5d397cc22",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003ciostream\u003e\n\nvoid fail() {\n    int *p1;\n    int *p2(NULL);\n    int *p3 = p1;\n    if (p3) {\n        std::cout \u003c\u003c *p3 \u003c\u003c std::endl;\n    } \n}\n\nint main() { \n    fail();\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003ciostream\u003e\n\nvoid fail() {\n    int *p1;\n    int *p2(NULL);\n    int *p3 = p1;\n    if (p3) {\n        std::cout \u003c\u003c *p3 \u003c\u003c std::endl;\n    } \n}\n\nint main() { \n    fail();\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525222857,
        "id": "c234ca20-578d-436c-861f-6ee90eace4b8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525222857,
        "parent_id": "ce658b50-cf97-49d4-aa89-66d5d397cc22",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Build it (add -g to include debug info):"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Build it (add -g to include debug info):"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525222857,
        "id": "5a49d689-e931-433d-95c9-2cb9a14afc6c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525222857,
        "parent_id": "ce658b50-cf97-49d4-aa89-66d5d397cc22",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "g++ -g -o main main.cpp"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "g++ -g -o main main.cpp",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525222858,
        "id": "db716aff-3a24-460a-b335-254ef23bc183",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525222858,
        "parent_id": "ce658b50-cf97-49d4-aa89-66d5d397cc22",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Run:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Run:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525222858,
        "id": "78b7d960-a085-4139-8c4a-b465a7417fe7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525222858,
        "parent_id": "ce658b50-cf97-49d4-aa89-66d5d397cc22",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "$ ./main\nSegmentation fault (core dumped)\n$"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "$ ./main\nSegmentation fault (core dumped)\n$",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525222858,
        "id": "eaebb40c-c402-4d14-922f-fffeeccec5da",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525222858,
        "parent_id": "ce658b50-cf97-49d4-aa89-66d5d397cc22",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Let’s debug it with valgrind:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Let’s debug it with valgrind:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525222858,
        "id": "e63a6b7c-f3bc-4ac3-82a8-ece640de079c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525222858,
        "parent_id": "ce658b50-cf97-49d4-aa89-66d5d397cc22",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "$ valgrind ./main\n==8515== Memcheck, a memory error detector\n==8515== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.\n==8515== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info\n==8515== Command: ./main\n==8515==\n==8515== Conditional jump or move depends on uninitialised value(s)\n==8515==    at 0x400813: fail() (main.cpp:7)\n==8515==    by 0x40083F: main (main.cpp:13)\n==8515==\n==8515== Invalid read of size 4\n==8515==    at 0x400819: fail() (main.cpp:8)\n==8515==    by 0x40083F: main (main.cpp:13)\n==8515==  Address 0x0 is not stack'd, malloc'd or (recently) free'd\n==8515==\n==8515==\n==8515== Process terminating with default action of signal 11 (SIGSEGV): dumping core\n==8515==  Access not within mapped region at address 0x0\n==8515==    at 0x400819: fail() (main.cpp:8)\n==8515==    by 0x40083F: main (main.cpp:13)\n==8515==  If you believe this happened as a result of a stack\n==8515==  overflow in your program's main thread (unlikely but\n==8515==  possible), you can try to increase the size of the\n==8515==  main thread stack using the --main-stacksize= flag.\n==8515==  The main thread stack size used in this run was 8388608.\n==8515==\n==8515== HEAP SUMMARY:\n==8515==     in use at exit: 72,704 bytes in 1 blocks\n==8515==   total heap usage: 1 allocs, 0 frees, 72,704 bytes allocated\n==8515==\n==8515== LEAK SUMMARY:\n==8515==    definitely lost: 0 bytes in 0 blocks\n==8515==    indirectly lost: 0 bytes in 0 blocks\n==8515==      possibly lost: 0 bytes in 0 blocks\n==8515==    still reachable: 72,704 bytes in 1 blocks\n==8515==         suppressed: 0 bytes in 0 blocks\n==8515== Rerun with --leak-check=full to see details of leaked memory\n==8515==\n==8515== For counts of detected and suppressed errors, rerun with: -v\n==8515== Use --track-origins=yes to see where uninitialised values come from\n==8515== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)\n$"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "$ valgrind ./main\n==8515== Memcheck, a memory error detector\n==8515== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.\n==8515== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info\n==8515== Command: ./main\n==8515==\n==8515== Conditional jump or move depends on uninitialised value(s)\n==8515==    at 0x400813: fail() (main.cpp:7)\n==8515==    by 0x40083F: main (main.cpp:13)\n==8515==\n==8515== Invalid read of size 4\n==8515==    at 0x400819: fail() (main.cpp:8)\n==8515==    by 0x40083F: main (main.cpp:13)\n==8515==  Address 0x0 is not stack'd, malloc'd or (recently) free'd\n==8515==\n==8515==\n==8515== Process terminating with default action of signal 11 (SIGSEGV): dumping core\n==8515==  Access not within mapped region at address 0x0\n==8515==    at 0x400819: fail() (main.cpp:8)\n==8515==    by 0x40083F: main (main.cpp:13)\n==8515==  If you believe this happened as a result of a stack\n==8515==  overflow in your program's main thread (unlikely but\n==8515==  possible), you can try to increase the size of the\n==8515==  main thread stack using the --main-stacksize= flag.\n==8515==  The main thread stack size used in this run was 8388608.\n==8515==\n==8515== HEAP SUMMARY:\n==8515==     in use at exit: 72,704 bytes in 1 blocks\n==8515==   total heap usage: 1 allocs, 0 frees, 72,704 bytes allocated\n==8515==\n==8515== LEAK SUMMARY:\n==8515==    definitely lost: 0 bytes in 0 blocks\n==8515==    indirectly lost: 0 bytes in 0 blocks\n==8515==      possibly lost: 0 bytes in 0 blocks\n==8515==    still reachable: 72,704 bytes in 1 blocks\n==8515==         suppressed: 0 bytes in 0 blocks\n==8515== Rerun with --leak-check=full to see details of leaked memory\n==8515==\n==8515== For counts of detected and suppressed errors, rerun with: -v\n==8515== Use --track-origins=yes to see where uninitialised values come from\n==8515== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)\n$",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525222858,
        "id": "c5924712-c52c-42d0-846d-bb344de92816",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525222858,
        "parent_id": "ce658b50-cf97-49d4-aa89-66d5d397cc22",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "First we focus on this block:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "First we focus on this block:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525222858,
        "id": "a3178b30-96c0-4a2e-8b3c-b44f652d0cf0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525222858,
        "parent_id": "ce658b50-cf97-49d4-aa89-66d5d397cc22",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "==8515== Invalid read of size 4\n==8515==    at 0x400819: fail() (main.cpp:8)\n==8515==    by 0x40083F: main (main.cpp:13)\n==8515==  Address 0x0 is not stack'd, malloc'd or (recently) free'd"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "==8515== Invalid read of size 4\n==8515==    at 0x400819: fail() (main.cpp:8)\n==8515==    by 0x40083F: main (main.cpp:13)\n==8515==  Address 0x0 is not stack'd, malloc'd or (recently) free'd",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525222858,
        "id": "396b2c20-ee11-4bf8-8e16-57e27d9ef9b9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525222858,
        "parent_id": "ce658b50-cf97-49d4-aa89-66d5d397cc22",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The first line tells us that segfault is caused by reading 4 bytes. The second and the third lines are call stack. It means that the invalid read is performed at the "
            ],
            [
              "fail()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " function, line 8 of main.cpp, which is called by main, line 13 of main.cpp."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The first line tells us that segfault is caused by reading 4 bytes. The second and the third lines are call stack. It means that the invalid read is performed at the "
          },
          {
            "Text": "fail()",
            "AttrFlags": 2
          },
          {
            "Text": " function, line 8 of main.cpp, which is called by main, line 13 of main.cpp."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525222858,
        "id": "ffe19d9a-dfd6-4c9d-80c4-d0de1eabd459",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525222858,
        "parent_id": "ce658b50-cf97-49d4-aa89-66d5d397cc22",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Looking at line 8 of main.cpp we see"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Looking at line 8 of main.cpp we see"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525222859,
        "id": "402cdece-27f9-4a28-9e7b-64cfc343f886",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525222859,
        "parent_id": "ce658b50-cf97-49d4-aa89-66d5d397cc22",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "std::cout \u003c\u003c *p3 \u003c\u003c std::endl;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "std::cout \u003c\u003c *p3 \u003c\u003c std::endl;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525222859,
        "id": "f2d597d0-fd44-4c7b-8797-2a1cb1ce8c8f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525222859,
        "parent_id": "ce658b50-cf97-49d4-aa89-66d5d397cc22",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "But we check the pointer first, so what’s wrong? Lets check the other block:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "But we check the pointer first, so what’s wrong? Lets check the other block:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525222859,
        "id": "fab35445-35fc-4309-8f65-a7ff3f8b1a12",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525222859,
        "parent_id": "ce658b50-cf97-49d4-aa89-66d5d397cc22",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "==8515== Conditional jump or move depends on uninitialised value(s)\n==8515==    at 0x400813: fail() (main.cpp:7)\n==8515==    by 0x40083F: main (main.cpp:13)"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "==8515== Conditional jump or move depends on uninitialised value(s)\n==8515==    at 0x400813: fail() (main.cpp:7)\n==8515==    by 0x40083F: main (main.cpp:13)",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525222859,
        "id": "1e97b8d5-1fc2-4038-ab90-4b551cacfc34",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525222859,
        "parent_id": "ce658b50-cf97-49d4-aa89-66d5d397cc22",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It tells us that there is an unitialized variable at line 7 and we read it:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It tells us that there is an unitialized variable at line 7 and we read it:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525222859,
        "id": "6aebe9d3-3d78-4e3d-bb25-e31b34ac385a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525222859,
        "parent_id": "ce658b50-cf97-49d4-aa89-66d5d397cc22",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "if (p3) {"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "if (p3) {",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525222859,
        "id": "a3bbadd6-0d44-4ccc-9336-3a7a356c5b4b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525222859,
        "parent_id": "ce658b50-cf97-49d4-aa89-66d5d397cc22",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Which points us to the line where we check p3 instead of p2. But how is it possible that p3 is uninitialized? We initialize it by:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Which points us to the line where we check p3 instead of p2. But how is it possible that p3 is uninitialized? We initialize it by:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525222859,
        "id": "29160cc2-813e-40cb-a870-d9edb8fe0018",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525222859,
        "parent_id": "ce658b50-cf97-49d4-aa89-66d5d397cc22",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int *p3 = p1;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int *p3 = p1;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525222859,
        "id": "097d51f3-2583-4b2c-a468-87eba4964ff9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525222859,
        "parent_id": "ce658b50-cf97-49d4-aa89-66d5d397cc22",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Valgrind advices us to rerun with "
            ],
            [
              "--track-origins=yes",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", let’s do it:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Valgrind advices us to rerun with "
          },
          {
            "Text": "--track-origins=yes",
            "AttrFlags": 2
          },
          {
            "Text": ", let’s do it:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525222859,
        "id": "5f610967-b07d-4cbf-8d2d-25b468156832",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525222859,
        "parent_id": "ce658b50-cf97-49d4-aa89-66d5d397cc22",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "valgrind --track-origins=yes ./main"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "valgrind --track-origins=yes ./main",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525222860,
        "id": "9de2eae0-03d3-4192-ab7b-7cfa4be2bb87",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525222860,
        "parent_id": "ce658b50-cf97-49d4-aa89-66d5d397cc22",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The argument for valgrind is just after valgrind. If we put it after our program, it would be passed to our program."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The argument for valgrind is just after valgrind. If we put it after our program, it would be passed to our program."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525222860,
        "id": "b9efee9c-91a0-44bd-9e06-6c50820b0fb8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525222860,
        "parent_id": "ce658b50-cf97-49d4-aa89-66d5d397cc22",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The output is almost the same, there is only one difference:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The output is almost the same, there is only one difference:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525222860,
        "id": "281cf725-0aa6-449e-a357-ab9c974ffd23",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525222860,
        "parent_id": "ce658b50-cf97-49d4-aa89-66d5d397cc22",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "==8517== Conditional jump or move depends on uninitialised value(s)\n==8517==    at 0x400813: fail() (main.cpp:7)\n==8517==    by 0x40083F: main (main.cpp:13)\n==8517==  Uninitialised value was created by a stack allocation\n==8517==    at 0x4007F6: fail() (main.cpp:3)"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "==8517== Conditional jump or move depends on uninitialised value(s)\n==8517==    at 0x400813: fail() (main.cpp:7)\n==8517==    by 0x40083F: main (main.cpp:13)\n==8517==  Uninitialised value was created by a stack allocation\n==8517==    at 0x4007F6: fail() (main.cpp:3)",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525222860,
        "id": "bea3db6b-16b5-471c-89d3-9776e28d2ddd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525222860,
        "parent_id": "ce658b50-cf97-49d4-aa89-66d5d397cc22",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Which tells us that the uninitialized value we used at line 7 was created at line 3:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Which tells us that the uninitialized value we used at line 7 was created at line 3:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525222860,
        "id": "94f4bacd-21c0-4e42-9e83-766a22827cee",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525222860,
        "parent_id": "ce658b50-cf97-49d4-aa89-66d5d397cc22",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int *p1;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int *p1;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525222860,
        "id": "616d2c74-f12c-4018-a1a2-4de0e3842d05",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525222860,
        "parent_id": "ce658b50-cf97-49d4-aa89-66d5d397cc22",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "which guides us to our uninitialized pointer."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "which guides us to our uninitialized pointer."
          }
        ]
      }
    ],
    "title": "My C program ends with segfault - valgrind",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}