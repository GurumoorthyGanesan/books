{
  "ID": "0c7c897d-b4eb-4871-9fed-59350129419e",
  "Root": {
    "alive": true,
    "content": [
      "85707425-9aaf-4336-bd61-87d4ec3b54eb",
      "f9f5b4a1-1ad8-4629-b5a1-d9a163220867",
      "54dc0b85-c6a5-4ce5-939b-c5ee15707995",
      "4bd05362-5cbe-48b9-8ebc-25900c0c8a2b",
      "3224aa02-3269-4f54-8ba3-9672f6ecc515",
      "43a354ee-bfe3-4300-974c-af417013159b",
      "d77edea4-872e-4bed-94c3-a1ac566b4fda",
      "862c9936-be98-4c4e-a23d-4885b2219d28",
      "a6c4c3f7-45e1-4c09-951b-841bd34951a5",
      "7512b445-a290-4ea2-b11e-415727a4f7c0",
      "a09179e2-cdd7-40b0-8a25-5e99e28998f6",
      "a9c144ee-6ebe-4d11-a0a1-8f751462c208",
      "20e93c19-0bfa-490f-9dcf-54c9535dba4d",
      "0fad5e50-35cc-4526-ba10-d10419ea563e",
      "ebcb3d99-4375-49c1-9bd5-7d2ed86a58f2",
      "f34b4d48-05a8-4f41-b10f-ff4f6915f725",
      "81c0b51a-68fd-4db5-baaa-918e92920064",
      "be465f2c-21fb-40ab-af7b-3653e0ce7cda",
      "d84d91eb-e164-4c2e-b3ca-305825ef6d6b",
      "bf44cd9d-3dcf-4855-877e-b8e0a1c35e50",
      "68e833c1-85fc-44ff-91a2-19eb1491ac46",
      "651a91b6-c3d3-4686-a7c8-40730c46edb2"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522308576,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "0c7c897d-b4eb-4871-9fed-59350129419e",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550655060000,
    "parent_id": "0b17f7b9-11d1-4229-931e-966fb51d1ba9",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "void_t"
        ]
      ]
    },
    "type": "page",
    "version": 14,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522308567,
        "id": "85707425-9aaf-4336-bd61-87d4ec3b54eb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522308567,
        "parent_id": "0c7c897d-b4eb-4871-9fed-59350129419e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "void_t",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is a meta-function that maps any (number of) types to type "
            ],
            [
              "void",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". The primary purpose of "
            ],
            [
              "void_t",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is to facilitate writing of type traits."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "void_t",
            "AttrFlags": 2
          },
          {
            "Text": " is a meta-function that maps any (number of) types to type "
          },
          {
            "Text": "void",
            "AttrFlags": 2
          },
          {
            "Text": ". The primary purpose of "
          },
          {
            "Text": "void_t",
            "AttrFlags": 2
          },
          {
            "Text": " is to facilitate writing of type traits."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522308570,
        "id": "f9f5b4a1-1ad8-4629-b5a1-d9a163220867",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522308570,
        "parent_id": "0c7c897d-b4eb-4871-9fed-59350129419e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "std::void_t",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://en.cppreference.com/w/cpp/types/void_t"
                ]
              ]
            ],
            [
              " will be part of C++17, but until then, it is extremely straightforward to implement:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "std::void_t",
            "AttrFlags": 2,
            "Link": "http://en.cppreference.com/w/cpp/types/void_t"
          },
          {
            "Text": " will be part of C++17, but until then, it is extremely straightforward to implement:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522308571,
        "id": "54dc0b85-c6a5-4ce5-939b-c5ee15707995",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522308571,
        "parent_id": "0c7c897d-b4eb-4871-9fed-59350129419e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "template \u003cclass...\u003e using void_t = void;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "template \u003cclass...\u003e using void_t = void;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522308571,
        "id": "4bd05362-5cbe-48b9-8ebc-25900c0c8a2b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522308571,
        "parent_id": "0c7c897d-b4eb-4871-9fed-59350129419e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Some compilers "
            ],
            [
              "require",
              [
                [
                  "a",
                  "http://open-std.org/JTC1/SC22/WG21/docs/cwg_defects.html#1558"
                ]
              ]
            ],
            [
              " a slightly different implementation:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Some compilers "
          },
          {
            "Text": "require",
            "Link": "http://open-std.org/JTC1/SC22/WG21/docs/cwg_defects.html#1558"
          },
          {
            "Text": " a slightly different implementation:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522308571,
        "id": "3224aa02-3269-4f54-8ba3-9672f6ecc515",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522308571,
        "parent_id": "0c7c897d-b4eb-4871-9fed-59350129419e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "template \u003cclass...\u003e\nstruct make_void { using type = void; };\n\ntemplate \u003ctypename... T\u003e\nusing void_t = typename make_void\u003cT...\u003e::type;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "template \u003cclass...\u003e\nstruct make_void { using type = void; };\n\ntemplate \u003ctypename... T\u003e\nusing void_t = typename make_void\u003cT...\u003e::type;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522308572,
        "id": "43a354ee-bfe3-4300-974c-af417013159b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522308572,
        "parent_id": "0c7c897d-b4eb-4871-9fed-59350129419e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The primary application of "
            ],
            [
              "void_t",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is writing type traits that check validity of a statement. For example, let’s check if a type has a member function "
            ],
            [
              "foo()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " that takes no arguments:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The primary application of "
          },
          {
            "Text": "void_t",
            "AttrFlags": 2
          },
          {
            "Text": " is writing type traits that check validity of a statement. For example, let’s check if a type has a member function "
          },
          {
            "Text": "foo()",
            "AttrFlags": 2
          },
          {
            "Text": " that takes no arguments:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522308572,
        "id": "d77edea4-872e-4bed-94c3-a1ac566b4fda",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522308572,
        "parent_id": "0c7c897d-b4eb-4871-9fed-59350129419e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "template \u003cclass T, class=void\u003e\nstruct has_foo : std::false_type {};\n\ntemplate \u003cclass T\u003e\nstruct has_foo\u003cT, void_t\u003cdecltype(std::declval\u003cT\u0026\u003e().foo())\u003e\u003e : std::true_type {};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "template \u003cclass T, class=void\u003e\nstruct has_foo : std::false_type {};\n\ntemplate \u003cclass T\u003e\nstruct has_foo\u003cT, void_t\u003cdecltype(std::declval\u003cT\u0026\u003e().foo())\u003e\u003e : std::true_type {};",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522308572,
        "id": "862c9936-be98-4c4e-a23d-4885b2219d28",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522308572,
        "parent_id": "0c7c897d-b4eb-4871-9fed-59350129419e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "How does this work? When I try to instantiate "
            ],
            [
              "has_foo\u003cT\u003e::value",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", that will cause the compiler to try to look for the best specialization for "
            ],
            [
              "has_foo\u003cT, void\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". We have two options: the primary, and this secondary one which involves having to instantiate that underlying expression:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "How does this work? When I try to instantiate "
          },
          {
            "Text": "has_foo\u003cT\u003e::value",
            "AttrFlags": 2
          },
          {
            "Text": ", that will cause the compiler to try to look for the best specialization for "
          },
          {
            "Text": "has_foo\u003cT, void\u003e",
            "AttrFlags": 2
          },
          {
            "Text": ". We have two options: the primary, and this secondary one which involves having to instantiate that underlying expression:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522308573,
        "id": "a6c4c3f7-45e1-4c09-951b-841bd34951a5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522308573,
        "parent_id": "0c7c897d-b4eb-4871-9fed-59350129419e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If "
            ],
            [
              "T",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "does",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " have a member function "
            ],
            [
              "foo()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", then whatever type that returns gets converted to "
            ],
            [
              "void",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", and the specialization is preferred to the primary based on the template partial ordering rules. So "
            ],
            [
              "has_foo\u003cT\u003e::value",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will be "
            ],
            [
              "true",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "If "
          },
          {
            "Text": "T",
            "AttrFlags": 2
          },
          {
            "Text": " "
          },
          {
            "Text": "does",
            "AttrFlags": 4
          },
          {
            "Text": " have a member function "
          },
          {
            "Text": "foo()",
            "AttrFlags": 2
          },
          {
            "Text": ", then whatever type that returns gets converted to "
          },
          {
            "Text": "void",
            "AttrFlags": 2
          },
          {
            "Text": ", and the specialization is preferred to the primary based on the template partial ordering rules. So "
          },
          {
            "Text": "has_foo\u003cT\u003e::value",
            "AttrFlags": 2
          },
          {
            "Text": " will be "
          },
          {
            "Text": "true",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522308573,
        "id": "7512b445-a290-4ea2-b11e-415727a4f7c0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522308573,
        "parent_id": "0c7c897d-b4eb-4871-9fed-59350129419e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If "
            ],
            [
              "T",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "doesn’t",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " have such a member function (or it requires more than one argument), then substitution fails for the specialization and we only have the primary template to fallback on. Hence, "
            ],
            [
              "has_foo\u003cT\u003e::value",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is "
            ],
            [
              "false",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "If "
          },
          {
            "Text": "T",
            "AttrFlags": 2
          },
          {
            "Text": " "
          },
          {
            "Text": "doesn’t",
            "AttrFlags": 4
          },
          {
            "Text": " have such a member function (or it requires more than one argument), then substitution fails for the specialization and we only have the primary template to fallback on. Hence, "
          },
          {
            "Text": "has_foo\u003cT\u003e::value",
            "AttrFlags": 2
          },
          {
            "Text": " is "
          },
          {
            "Text": "false",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522308574,
        "id": "a09179e2-cdd7-40b0-8a25-5e99e28998f6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522308574,
        "parent_id": "0c7c897d-b4eb-4871-9fed-59350129419e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A simpler case:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A simpler case:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522308574,
        "id": "a9c144ee-6ebe-4d11-a0a1-8f751462c208",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522308574,
        "parent_id": "0c7c897d-b4eb-4871-9fed-59350129419e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "template\u003cclass T, class=void\u003e\nstruct can_reference : std::false_type {};\n\ntemplate\u003cclass T\u003e\nstruct can_reference\u003cT, std::void_t\u003cT\u0026\u003e\u003e : std::true_type {};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "template\u003cclass T, class=void\u003e\nstruct can_reference : std::false_type {};\n\ntemplate\u003cclass T\u003e\nstruct can_reference\u003cT, std::void_t\u003cT\u0026\u003e\u003e : std::true_type {};",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522308574,
        "id": "20e93c19-0bfa-490f-9dcf-54c9535dba4d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522308574,
        "parent_id": "0c7c897d-b4eb-4871-9fed-59350129419e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "this doesn’t use "
            ],
            [
              "std::declval",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "decltype",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "this doesn’t use "
          },
          {
            "Text": "std::declval",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "decltype",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522308574,
        "id": "0fad5e50-35cc-4526-ba10-d10419ea563e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522308574,
        "parent_id": "0c7c897d-b4eb-4871-9fed-59350129419e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You may notice a common pattern of a void argument. We can factor this out:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You may notice a common pattern of a void argument. We can factor this out:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522308574,
        "id": "ebcb3d99-4375-49c1-9bd5-7d2ed86a58f2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522308574,
        "parent_id": "0c7c897d-b4eb-4871-9fed-59350129419e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "struct details {\n  template\u003ctemplate\u003cclass...\u003eclass Z, class=void, class...Ts\u003e\n  struct can_apply:\n    std::false_type\n  {};\n  template\u003ctemplate\u003cclass...\u003eclass Z, class...Ts\u003e\n  struct can_apply\u003cZ, std::void_t\u003cZ\u003cTs...\u003e\u003e, Ts...\u003e:\n    std::true_type\n  {};\n};\n\ntemplate\u003ctemplate\u003cclass...\u003eclass Z, class...Ts\u003e\nusing can_apply = details::can_apply\u003cZ, void, Ts...\u003e;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "struct details {\n  template\u003ctemplate\u003cclass...\u003eclass Z, class=void, class...Ts\u003e\n  struct can_apply:\n    std::false_type\n  {};\n  template\u003ctemplate\u003cclass...\u003eclass Z, class...Ts\u003e\n  struct can_apply\u003cZ, std::void_t\u003cZ\u003cTs...\u003e\u003e, Ts...\u003e:\n    std::true_type\n  {};\n};\n\ntemplate\u003ctemplate\u003cclass...\u003eclass Z, class...Ts\u003e\nusing can_apply = details::can_apply\u003cZ, void, Ts...\u003e;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522308574,
        "id": "f34b4d48-05a8-4f41-b10f-ff4f6915f725",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522308574,
        "parent_id": "0c7c897d-b4eb-4871-9fed-59350129419e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "which hides the use of "
            ],
            [
              "std::void_t",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and makes "
            ],
            [
              "can_apply",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " act like an indicator whether the type supplied as the first template argument is well-formed after substituting the other types into it. The previous examples may now be rewritten using "
            ],
            [
              "can_apply",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " as:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "which hides the use of "
          },
          {
            "Text": "std::void_t",
            "AttrFlags": 2
          },
          {
            "Text": " and makes "
          },
          {
            "Text": "can_apply",
            "AttrFlags": 2
          },
          {
            "Text": " act like an indicator whether the type supplied as the first template argument is well-formed after substituting the other types into it. The previous examples may now be rewritten using "
          },
          {
            "Text": "can_apply",
            "AttrFlags": 2
          },
          {
            "Text": " as:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522308574,
        "id": "81c0b51a-68fd-4db5-baaa-918e92920064",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522308574,
        "parent_id": "0c7c897d-b4eb-4871-9fed-59350129419e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "template\u003cclass T\u003e\nusing ref_t = T\u0026;\n\ntemplate\u003cclass T\u003e\nusing can_reference = can_apply\u003cref_t, T\u003e;    // Is T\u0026 well formed for T?"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "template\u003cclass T\u003e\nusing ref_t = T\u0026;\n\ntemplate\u003cclass T\u003e\nusing can_reference = can_apply\u003cref_t, T\u003e;    // Is T\u0026 well formed for T?",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522308575,
        "id": "be465f2c-21fb-40ab-af7b-3653e0ce7cda",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522308575,
        "parent_id": "0c7c897d-b4eb-4871-9fed-59350129419e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "and:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "and:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522308575,
        "id": "d84d91eb-e164-4c2e-b3ca-305825ef6d6b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522308575,
        "parent_id": "0c7c897d-b4eb-4871-9fed-59350129419e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "template\u003cclass T\u003e\nusing dot_foo_r = decltype(std::declval\u003cT\u0026\u003e().foo());\n\ntemplate\u003cclass T\u003e\nusing can_dot_foo = can_apply\u003c dot_foo_r, T \u003e;    // Is T.foo() well formed for T?"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "template\u003cclass T\u003e\nusing dot_foo_r = decltype(std::declval\u003cT\u0026\u003e().foo());\n\ntemplate\u003cclass T\u003e\nusing can_dot_foo = can_apply\u003c dot_foo_r, T \u003e;    // Is T.foo() well formed for T?",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522308575,
        "id": "bf44cd9d-3dcf-4855-877e-b8e0a1c35e50",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522308575,
        "parent_id": "0c7c897d-b4eb-4871-9fed-59350129419e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "which seems simpler than the original versions."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "which seems simpler than the original versions."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522308575,
        "id": "68e833c1-85fc-44ff-91a2-19eb1491ac46",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522308575,
        "parent_id": "0c7c897d-b4eb-4871-9fed-59350129419e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "There are post-C++17 proposals for "
            ],
            [
              "std",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " traits similar to "
            ],
            [
              "can_apply",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "There are post-C++17 proposals for "
          },
          {
            "Text": "std",
            "AttrFlags": 2
          },
          {
            "Text": " traits similar to "
          },
          {
            "Text": "can_apply",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522308576,
        "id": "651a91b6-c3d3-4686-a7c8-40730c46edb2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522308576,
        "parent_id": "0c7c897d-b4eb-4871-9fed-59350129419e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The utility of "
            ],
            [
              "void_t",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " was discovered by Walter Brown. He gave a wonderful "
            ],
            [
              "presentation",
              [
                [
                  "a",
                  "https://youtu.be/a0FliKwcwXE?t=1747"
                ]
              ]
            ],
            [
              " on it at CppCon 2016."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The utility of "
          },
          {
            "Text": "void_t",
            "AttrFlags": 2
          },
          {
            "Text": " was discovered by Walter Brown. He gave a wonderful "
          },
          {
            "Text": "presentation",
            "Link": "https://youtu.be/a0FliKwcwXE?t=1747"
          },
          {
            "Text": " on it at CppCon 2016."
          }
        ]
      }
    ],
    "title": "void_t",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}