{
  "ID": "08a55a0a-c3e6-4533-ae70-42952b7e8fa9",
  "Root": {
    "alive": true,
    "content": [
      "105b1eee-b7d3-43de-a68a-488494c266f0",
      "634386a0-bf86-44f6-9f43-a6e8435f376c",
      "6144f671-b8e0-4b51-99b7-ac3a9d9beb58",
      "7dbe42b7-db4e-4628-8bb8-fe9d3f0ad0ab",
      "94aac5b6-cc0d-4427-8e45-ed6ac18a10bb",
      "daceba86-e81d-496e-babf-3037bec4e574"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522749554,
    "id": "08a55a0a-c3e6-4533-ae70-42952b7e8fa9",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550522749554,
    "parent_id": "a29d7b5a-3989-43f1-8efa-86ef82101f43",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "060 Copy initialization elision"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522749552,
        "id": "105b1eee-b7d3-43de-a68a-488494c266f0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522749552,
        "parent_id": "08a55a0a-c3e6-4533-ae70-42952b7e8fa9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If you use a "
            ],
            [
              "prvalue expression",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%2B%2B/763/value-categories/2603/prvalue#t=201607301613191630536"
                ]
              ]
            ],
            [
              " to copy initialize a variable, and that variable has the same type as the prvalue expression, then the copying can be elided."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If you use a "
          },
          {
            "Text": "prvalue expression",
            "Link": "http://stackoverflow.com/documentation/c%2B%2B/763/value-categories/2603/prvalue#t=201607301613191630536"
          },
          {
            "Text": " to copy initialize a variable, and that variable has the same type as the prvalue expression, then the copying can be elided."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522749553,
        "id": "634386a0-bf86-44f6-9f43-a6e8435f376c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522749553,
        "parent_id": "08a55a0a-c3e6-4533-ae70-42952b7e8fa9",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "std::string str = std::string(\"foo\");"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "std::string str = std::string(\"foo\");",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522749553,
        "id": "6144f671-b8e0-4b51-99b7-ac3a9d9beb58",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522749553,
        "parent_id": "08a55a0a-c3e6-4533-ae70-42952b7e8fa9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Copy initialization effectively transforms this into "
            ],
            [
              "std::string str(\"foo\");",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (there are minor differences)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Copy initialization effectively transforms this into "
          },
          {
            "Text": "std::string str(\"foo\");",
            "AttrFlags": 2
          },
          {
            "Text": " (there are minor differences)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522749553,
        "id": "7dbe42b7-db4e-4628-8bb8-fe9d3f0ad0ab",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522749553,
        "parent_id": "08a55a0a-c3e6-4533-ae70-42952b7e8fa9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This also works with return values:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This also works with return values:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522749554,
        "id": "94aac5b6-cc0d-4427-8e45-ed6ac18a10bb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522749554,
        "parent_id": "08a55a0a-c3e6-4533-ae70-42952b7e8fa9",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "std::string func()\n{\n  return std::string(\"foo\");\n}\n\nstd::string str = func();"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "std::string func()\n{\n  return std::string(\"foo\");\n}\n\nstd::string str = func();",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522749554,
        "id": "daceba86-e81d-496e-babf-3037bec4e574",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522749554,
        "parent_id": "08a55a0a-c3e6-4533-ae70-42952b7e8fa9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Without copy elision, this would provoke 2 calls to "
            ],
            [
              "std::string",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "’s move constructor. Copy elision permits this to call the move constructor 1 or zero times, and most compilers will opt for the latter."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Without copy elision, this would provoke 2 calls to "
          },
          {
            "Text": "std::string",
            "AttrFlags": 2
          },
          {
            "Text": "’s move constructor. Copy elision permits this to call the move constructor 1 or zero times, and most compilers will opt for the latter."
          }
        ]
      }
    ],
    "title": "060 Copy initialization elision"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}