{
  "ID": "a99be976-78bd-4461-90d4-0e3abc221fe4",
  "Root": {
    "alive": true,
    "content": [
      "3a774524-231e-4d2d-91fe-e5bd112fb3d6",
      "99bd2536-c02a-43db-8207-9b78a8f50ea6",
      "7333a362-56cf-46b9-ad74-dd4842851b62",
      "a3f63824-4a8e-460a-8aa9-c1456ace79ee",
      "a9355c34-e2fb-4699-9541-e3726ea7efef",
      "0d97926b-1942-4814-bff9-535bbc132154",
      "0fa4a2be-f3f6-4969-b516-ffe97e4b8ee1",
      "227d081b-801f-48c7-affb-9b84310df6b1",
      "91665e38-665c-476d-87fa-6ebb4a0ed247",
      "f966aeec-2ba0-4b52-8425-d030c53c0628",
      "806d87d3-f9b2-4464-9006-1796c9ab4daa",
      "25c5ca1e-ed4e-4fe5-b825-816e95e6a17e",
      "3c8f4463-77d8-4f66-8611-90f8d6730a17"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522278465,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "a99be976-78bd-4461-90d4-0e3abc221fe4",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550655240000,
    "parent_id": "f1b860db-be5a-41ed-a67b-b7b0181ec59f",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Creating a std::thread"
        ]
      ]
    },
    "type": "page",
    "version": 16,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522278457,
        "id": "3a774524-231e-4d2d-91fe-e5bd112fb3d6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522278457,
        "parent_id": "a99be976-78bd-4461-90d4-0e3abc221fe4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In C++, threads are created using the std::thread class. A thread is a separate flow of execution; it is analogous to having a helper perform one task while you simultaneously perform another. When all the code in the thread is executed, it "
            ],
            [
              "terminates",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ". When creating a thread, you need to pass something to be executed on it. A few things that you can pass to a thread:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In C++, threads are created using the std::thread class. A thread is a separate flow of execution; it is analogous to having a helper perform one task while you simultaneously perform another. When all the code in the thread is executed, it "
          },
          {
            "Text": "terminates",
            "AttrFlags": 4
          },
          {
            "Text": ". When creating a thread, you need to pass something to be executed on it. A few things that you can pass to a thread:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522278460,
        "id": "99bd2536-c02a-43db-8207-9b78a8f50ea6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522278460,
        "parent_id": "a99be976-78bd-4461-90d4-0e3abc221fe4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Free functions"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Free functions"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522278461,
        "id": "7333a362-56cf-46b9-ad74-dd4842851b62",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522278461,
        "parent_id": "a99be976-78bd-4461-90d4-0e3abc221fe4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Member functions"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Member functions"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522278461,
        "id": "a3f63824-4a8e-460a-8aa9-c1456ace79ee",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522278461,
        "parent_id": "a99be976-78bd-4461-90d4-0e3abc221fe4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Functor objects"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Functor objects"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522278461,
        "id": "a9355c34-e2fb-4699-9541-e3726ea7efef",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522278461,
        "parent_id": "a99be976-78bd-4461-90d4-0e3abc221fe4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Lambda expressions"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Lambda expressions"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522278463,
        "id": "0d97926b-1942-4814-bff9-535bbc132154",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522278463,
        "parent_id": "a99be976-78bd-4461-90d4-0e3abc221fe4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Free function example - executes a function on a separate thread ("
            ],
            [
              "Live Example",
              [
                [
                  "a",
                  "http://ideone.com/hX1Ygn"
                ]
              ]
            ],
            [
              "):"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Free function example - executes a function on a separate thread ("
          },
          {
            "Text": "Live Example",
            "Link": "http://ideone.com/hX1Ygn"
          },
          {
            "Text": "):"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522278463,
        "id": "0fa4a2be-f3f6-4969-b516-ffe97e4b8ee1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522278463,
        "parent_id": "a99be976-78bd-4461-90d4-0e3abc221fe4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003ciostream\u003e\n#include \u003cthread\u003e\n \nvoid foo(int a)\n{\n    std::cout \u003c\u003c a \u003c\u003c '\\n';\n}\n \nint main()\n{\n    // Create and execute the thread\n    std::thread thread(foo, 10); // foo is the function to execute, 10 is the\n                                 // argument to pass to it\n \n    // Keep going; the thread is executed separately\n \n    // Wait for the thread to finish; we stay here until it is done\n    thread.join();\n \n    return 0;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003ciostream\u003e\n#include \u003cthread\u003e\n \nvoid foo(int a)\n{\n    std::cout \u003c\u003c a \u003c\u003c '\\n';\n}\n \nint main()\n{\n    // Create and execute the thread\n    std::thread thread(foo, 10); // foo is the function to execute, 10 is the\n                                 // argument to pass to it\n \n    // Keep going; the thread is executed separately\n \n    // Wait for the thread to finish; we stay here until it is done\n    thread.join();\n \n    return 0;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522278463,
        "id": "227d081b-801f-48c7-affb-9b84310df6b1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522278463,
        "parent_id": "a99be976-78bd-4461-90d4-0e3abc221fe4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Member function example - executes a member function on a separate thread ("
            ],
            [
              "Live Example",
              [
                [
                  "a",
                  "http://ideone.com/4QeG4E"
                ]
              ]
            ],
            [
              "):"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Member function example - executes a member function on a separate thread ("
          },
          {
            "Text": "Live Example",
            "Link": "http://ideone.com/4QeG4E"
          },
          {
            "Text": "):"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522278464,
        "id": "91665e38-665c-476d-87fa-6ebb4a0ed247",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522278464,
        "parent_id": "a99be976-78bd-4461-90d4-0e3abc221fe4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003ciostream\u003e\n#include \u003cthread\u003e\n \nclass Bar\n{\npublic:\n    void foo(int a)\n    {\n        std::cout \u003c\u003c a \u003c\u003c '\\n';\n    }\n};\n \nint main()\n{\n    Bar bar;\n    \n    // Create and execute the thread\n    std::thread thread(\u0026Bar::foo, \u0026bar, 10); // Pass 10 to member function\n \n    // The member function will be executed in a separate thread\n \n    // Wait for the thread to finish, this is a blocking operation\n    thread.join();\n \n    return 0;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003ciostream\u003e\n#include \u003cthread\u003e\n \nclass Bar\n{\npublic:\n    void foo(int a)\n    {\n        std::cout \u003c\u003c a \u003c\u003c '\\n';\n    }\n};\n \nint main()\n{\n    Bar bar;\n    \n    // Create and execute the thread\n    std::thread thread(\u0026Bar::foo, \u0026bar, 10); // Pass 10 to member function\n \n    // The member function will be executed in a separate thread\n \n    // Wait for the thread to finish, this is a blocking operation\n    thread.join();\n \n    return 0;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522278464,
        "id": "f966aeec-2ba0-4b52-8425-d030c53c0628",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522278464,
        "parent_id": "a99be976-78bd-4461-90d4-0e3abc221fe4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Functor object example ("
            ],
            [
              "Live Example",
              [
                [
                  "a",
                  "http://ideone.com/h2EepE"
                ]
              ]
            ],
            [
              "):"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Functor object example ("
          },
          {
            "Text": "Live Example",
            "Link": "http://ideone.com/h2EepE"
          },
          {
            "Text": "):"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522278464,
        "id": "806d87d3-f9b2-4464-9006-1796c9ab4daa",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522278464,
        "parent_id": "a99be976-78bd-4461-90d4-0e3abc221fe4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003ciostream\u003e\n#include \u003cthread\u003e\n \nclass Bar\n{\npublic:\n    void operator()(int a)\n    {\n        std::cout \u003c\u003c a \u003c\u003c '\\n';\n    }\n};\n \nint main()\n{\n    Bar bar;\n    \n    // Create and execute the thread\n    std::thread thread(bar, 10); // Pass 10 to functor object\n \n    // The functor object will be executed in a separate thread\n \n    // Wait for the thread to finish, this is a blocking operation\n    thread.join();\n \n    return 0;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003ciostream\u003e\n#include \u003cthread\u003e\n \nclass Bar\n{\npublic:\n    void operator()(int a)\n    {\n        std::cout \u003c\u003c a \u003c\u003c '\\n';\n    }\n};\n \nint main()\n{\n    Bar bar;\n    \n    // Create and execute the thread\n    std::thread thread(bar, 10); // Pass 10 to functor object\n \n    // The functor object will be executed in a separate thread\n \n    // Wait for the thread to finish, this is a blocking operation\n    thread.join();\n \n    return 0;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522278465,
        "id": "25c5ca1e-ed4e-4fe5-b825-816e95e6a17e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522278465,
        "parent_id": "a99be976-78bd-4461-90d4-0e3abc221fe4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Lambda expression example ("
            ],
            [
              "Live Example",
              [
                [
                  "a",
                  "http://ideone.com/UacLRf"
                ]
              ]
            ],
            [
              "):"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Lambda expression example ("
          },
          {
            "Text": "Live Example",
            "Link": "http://ideone.com/UacLRf"
          },
          {
            "Text": "):"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522278465,
        "id": "3c8f4463-77d8-4f66-8611-90f8d6730a17",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522278465,
        "parent_id": "a99be976-78bd-4461-90d4-0e3abc221fe4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003ciostream\u003e\n#include \u003cthread\u003e\n \nint main()\n{\n    auto lambda = [](int a) { std::cout \u003c\u003c a \u003c\u003c '\\n'; };\n\n    // Create and execute the thread\n    std::thread thread(lambda, 10); // Pass 10 to the lambda expression\n \n    // The lambda expression will be executed in a separate thread\n \n    // Wait for the thread to finish, this is a blocking operation\n    thread.join();\n \n    return 0;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003ciostream\u003e\n#include \u003cthread\u003e\n \nint main()\n{\n    auto lambda = [](int a) { std::cout \u003c\u003c a \u003c\u003c '\\n'; };\n\n    // Create and execute the thread\n    std::thread thread(lambda, 10); // Pass 10 to the lambda expression\n \n    // The lambda expression will be executed in a separate thread\n \n    // Wait for the thread to finish, this is a blocking operation\n    thread.join();\n \n    return 0;\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "Creating a std::thread",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}