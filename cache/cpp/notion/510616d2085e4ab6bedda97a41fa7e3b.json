{
  "ID": "510616d2-085e-4ab6-bedd-a97a41fa7e3b",
  "Root": {
    "alive": true,
    "content": [
      "b339e50a-2cec-4d78-b2ac-ce3f59175a76",
      "30cc8636-2ea2-487e-aeed-3aee61c66cb4",
      "9444eb3b-c5eb-41e8-8b3d-b5a1c1c85f86",
      "4a09a91d-04f8-4e37-bc48-bf5efffd74bb",
      "185647cc-3634-4a2f-8641-1a27e4eb071e"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522656504,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "510616d2-085e-4ab6-bedd-a97a41fa7e3b",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550710260000,
    "parent_id": "6c5aa9dd-7698-4690-bd9e-644763376917",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Incorrect pairing of memory allocation and deallocation"
        ]
      ]
    },
    "type": "page",
    "version": 7,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522656500,
        "id": "b339e50a-2cec-4d78-b2ac-ce3f59175a76",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522656500,
        "parent_id": "510616d2-085e-4ab6-bedd-a97a41fa7e3b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "An object can only be deallocated by "
            ],
            [
              "delete",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " if it was allocated by "
            ],
            [
              "new",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and is not an array. If the argument to "
            ],
            [
              "delete",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " was not returned by "
            ],
            [
              "new",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or is an array, the behavior is undefined."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "An object can only be deallocated by "
          },
          {
            "Text": "delete",
            "AttrFlags": 2
          },
          {
            "Text": " if it was allocated by "
          },
          {
            "Text": "new",
            "AttrFlags": 2
          },
          {
            "Text": " and is not an array. If the argument to "
          },
          {
            "Text": "delete",
            "AttrFlags": 2
          },
          {
            "Text": " was not returned by "
          },
          {
            "Text": "new",
            "AttrFlags": 2
          },
          {
            "Text": " or is an array, the behavior is undefined."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522656503,
        "id": "30cc8636-2ea2-487e-aeed-3aee61c66cb4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522656503,
        "parent_id": "510616d2-085e-4ab6-bedd-a97a41fa7e3b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "An object can only be deallocated by "
            ],
            [
              "delete[]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " if it was allocated by "
            ],
            [
              "new",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and is an array. If the argument to "
            ],
            [
              "delete[]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " was not returned by "
            ],
            [
              "new",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or is not an array, the behavior is undefined."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "An object can only be deallocated by "
          },
          {
            "Text": "delete[]",
            "AttrFlags": 2
          },
          {
            "Text": " if it was allocated by "
          },
          {
            "Text": "new",
            "AttrFlags": 2
          },
          {
            "Text": " and is an array. If the argument to "
          },
          {
            "Text": "delete[]",
            "AttrFlags": 2
          },
          {
            "Text": " was not returned by "
          },
          {
            "Text": "new",
            "AttrFlags": 2
          },
          {
            "Text": " or is not an array, the behavior is undefined."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522656503,
        "id": "9444eb3b-c5eb-41e8-8b3d-b5a1c1c85f86",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522656503,
        "parent_id": "510616d2-085e-4ab6-bedd-a97a41fa7e3b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If the argument to "
            ],
            [
              "free",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " was not returned by "
            ],
            [
              "malloc",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", the behavior is undefined."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If the argument to "
          },
          {
            "Text": "free",
            "AttrFlags": 2
          },
          {
            "Text": " was not returned by "
          },
          {
            "Text": "malloc",
            "AttrFlags": 2
          },
          {
            "Text": ", the behavior is undefined."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522656503,
        "id": "4a09a91d-04f8-4e37-bc48-bf5efffd74bb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550710260000,
        "parent_id": "510616d2-085e-4ab6-bedd-a97a41fa7e3b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "int* p1 = new int;\ndelete p1;      // correct\n// delete[] p1; // undefined\n// free(p1);    // undefined\n\nint* p2 = new int[10];\ndelete[] p2;    // correct\n// delete p2;   // undefined\n// free(p2);    // undefined\n\nint* p3 = static_cast\u003cint*\u003e(malloc(sizeof(int)));\nfree(p3);       // correct\n// delete p3;   // undefined\n// delete[] p3; // undefined"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "int* p1 = new int;\ndelete p1;      // correct\n// delete[] p1; // undefined\n// free(p1);    // undefined\n\nint* p2 = new int[10];\ndelete[] p2;    // correct\n// delete p2;   // undefined\n// free(p2);    // undefined\n\nint* p3 = static_cast\u003cint*\u003e(malloc(sizeof(int)));\nfree(p3);       // correct\n// delete p3;   // undefined\n// delete[] p3; // undefined",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522656503,
        "id": "185647cc-3634-4a2f-8641-1a27e4eb071e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522656503,
        "parent_id": "510616d2-085e-4ab6-bedd-a97a41fa7e3b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Such issues can be avoided by completely avoiding "
            ],
            [
              "malloc",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "free",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in C++ programs, preferring the standard library smart pointers over raw "
            ],
            [
              "new",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "delete",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", and preferring "
            ],
            [
              "std::vector",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "std::string",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " over raw "
            ],
            [
              "new",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "delete[]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Such issues can be avoided by completely avoiding "
          },
          {
            "Text": "malloc",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "free",
            "AttrFlags": 2
          },
          {
            "Text": " in C++ programs, preferring the standard library smart pointers over raw "
          },
          {
            "Text": "new",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "delete",
            "AttrFlags": 2
          },
          {
            "Text": ", and preferring "
          },
          {
            "Text": "std::vector",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "std::string",
            "AttrFlags": 2
          },
          {
            "Text": " over raw "
          },
          {
            "Text": "new",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "delete[]",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      }
    ],
    "title": "Incorrect pairing of memory allocation and deallocation",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}