{
  "ID": "6da251d4-9f73-46f9-8628-1fc97977b652",
  "Root": {
    "alive": true,
    "content": [
      "70f08bcf-ec9e-4469-8f74-b1471b9800df",
      "8a904b28-c673-4993-9750-eb3abc2d213f"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522397591,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "6da251d4-9f73-46f9-8628-1fc97977b652",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550709960000,
    "parent_id": "e1dd94ae-aa5a-4f89-b959-f2ec61771796",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Basic regex match and regex search Examples"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522397590,
        "id": "70f08bcf-ec9e-4469-8f74-b1471b9800df",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522397590,
        "parent_id": "6da251d4-9f73-46f9-8628-1fc97977b652",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "const auto input = \"Some people, when confronted with a problem, think \\\"I know, I'll use regular expressions.\\\"\"s;\nsmatch sm;\n\ncout \u003c\u003c input \u003c\u003c endl;\n\n// If input ends in a quotation that contains a word that begins with \"reg\" and another word begining with \"ex\" then capture the preceeding portion of input\nif (regex_match(input, sm, regex(\"(.*)\\\".*\\\\breg.*\\\\bex.*\\\"\\\\s*$\"))) {\n    const auto capture = sm[1].str();\n    \n    cout \u003c\u003c '\\t' \u003c\u003c capture \u003c\u003c endl; // Outputs: \"\\tSome people, when confronted with a problem, think\\n\"\n    \n    // Search our capture for \"a problem\" or \"# problems\"\n    if(regex_search(capture, sm, regex(\"(a|d+)\\\\s+problems?\"))) {\n        const auto count = sm[1] == \"a\"s ? 1 : stoi(sm[1]);\n        \n        cout \u003c\u003c '\\t' \u003c\u003c count \u003c\u003c (count \u003e 1 ? \" problems\\n\" : \" problem\\n\"); // Outputs: \"\\t1 problem\\n\"\n        cout \u003c\u003c \"Now they have \" \u003c\u003c count + 1 \u003c\u003c \" problems.\\n\"; // Ouputs: \"Now they have 2 problems\\n\"\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "const auto input = \"Some people, when confronted with a problem, think \\\"I know, I'll use regular expressions.\\\"\"s;\nsmatch sm;\n\ncout \u003c\u003c input \u003c\u003c endl;\n\n// If input ends in a quotation that contains a word that begins with \"reg\" and another word begining with \"ex\" then capture the preceeding portion of input\nif (regex_match(input, sm, regex(\"(.*)\\\".*\\\\breg.*\\\\bex.*\\\"\\\\s*$\"))) {\n    const auto capture = sm[1].str();\n    \n    cout \u003c\u003c '\\t' \u003c\u003c capture \u003c\u003c endl; // Outputs: \"\\tSome people, when confronted with a problem, think\\n\"\n    \n    // Search our capture for \"a problem\" or \"# problems\"\n    if(regex_search(capture, sm, regex(\"(a|d+)\\\\s+problems?\"))) {\n        const auto count = sm[1] == \"a\"s ? 1 : stoi(sm[1]);\n        \n        cout \u003c\u003c '\\t' \u003c\u003c count \u003c\u003c (count \u003e 1 ? \" problems\\n\" : \" problem\\n\"); // Outputs: \"\\t1 problem\\n\"\n        cout \u003c\u003c \"Now they have \" \u003c\u003c count + 1 \u003c\u003c \" problems.\\n\"; // Ouputs: \"Now they have 2 problems\\n\"\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522397590,
        "id": "8a904b28-c673-4993-9750-eb3abc2d213f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522397590,
        "parent_id": "6da251d4-9f73-46f9-8628-1fc97977b652",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Live Example",
              [
                [
                  "a",
                  "http://ideone.com/nSRXEa"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Live Example",
            "Link": "http://ideone.com/nSRXEa"
          }
        ]
      }
    ],
    "title": "Basic regex match and regex search Examples",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}