{
  "ID": "1341607b-863d-409e-bb62-efac44f1ca7e",
  "Root": {
    "alive": true,
    "content": [
      "aaaa1718-4d1a-4bae-bc8e-8257abaf41ff",
      "bd99faeb-1b7f-465d-8b57-ccf8d9e9cb19",
      "8bc8a138-93d6-4fd7-8eea-a68a006806e5",
      "022ef616-6716-4543-a8ec-43ec2ad0179e",
      "6fbe89d1-e206-4cd4-b804-6d7fb2084e34",
      "cb7f5c2a-8c32-4a7f-b4fa-26b3d990bd62",
      "420544b6-b88c-4f77-bd9c-e5d701b03a97",
      "619c7a32-18f0-46f5-8b08-d73ce206042a",
      "cc1bb307-4358-406e-8e7c-f2a481926f70",
      "4781db29-87a1-471e-96f9-1e37af6a829c",
      "09b8144d-d4ef-4fae-9832-e4d02e7684d9"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550524342876,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "1341607b-863d-409e-bb62-efac44f1ca7e",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551688543287,
    "parent_id": "1e648ce1-cc7e-4997-bf6e-9a33d2ac504d",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Const Correct Class Design"
        ]
      ]
    },
    "type": "page",
    "version": 4,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524342873,
        "id": "aaaa1718-4d1a-4bae-bc8e-8257abaf41ff",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524342873,
        "parent_id": "1341607b-863d-409e-bb62-efac44f1ca7e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In a "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "-correct class, all member functions which don’t change logical state have "
            ],
            [
              "this",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " cv-qualified as "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", indicating that they don’t modify the object (apart from any "
            ],
            [
              "mutable",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%2B%2B/2705/mutable-keyword/9058/non-static-class-member-modifier#t=201610041643529340028"
                ]
              ]
            ],
            [
              " fields, which can freely be modified even in "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " instances); if a "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " cv-qualified function returns a reference, that reference should also be "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". This allows them to be called on both constant and non-cv-qualified instances, as a "
            ],
            [
              "const T*",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is capable of binding to either a "
            ],
            [
              "T*",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or a "
            ],
            [
              "const T*",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". This, in turn, allows functions to declare their passed-by-reference parameters as "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " when they don’t need to be modified, without losing any functionality."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In a "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": "-correct class, all member functions which don’t change logical state have "
          },
          {
            "Text": "this",
            "AttrFlags": 2
          },
          {
            "Text": " cv-qualified as "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": ", indicating that they don’t modify the object (apart from any "
          },
          {
            "Text": "mutable",
            "AttrFlags": 2,
            "Link": "http://stackoverflow.com/documentation/c%2B%2B/2705/mutable-keyword/9058/non-static-class-member-modifier#t=201610041643529340028"
          },
          {
            "Text": " fields, which can freely be modified even in "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": " instances); if a "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": " cv-qualified function returns a reference, that reference should also be "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": ". This allows them to be called on both constant and non-cv-qualified instances, as a "
          },
          {
            "Text": "const T*",
            "AttrFlags": 2
          },
          {
            "Text": " is capable of binding to either a "
          },
          {
            "Text": "T*",
            "AttrFlags": 2
          },
          {
            "Text": " or a "
          },
          {
            "Text": "const T*",
            "AttrFlags": 2
          },
          {
            "Text": ". This, in turn, allows functions to declare their passed-by-reference parameters as "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": " when they don’t need to be modified, without losing any functionality."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524342874,
        "id": "bd99faeb-1b7f-465d-8b57-ccf8d9e9cb19",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524342874,
        "parent_id": "1341607b-863d-409e-bb62-efac44f1ca7e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Furthermore, in a "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " correct class, all passed-by-reference function parameters will be "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " correct, as discussed in "
            ],
            [
              "Const Correct Function Parameters",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", so that they can only be modified when the function explicitly "
            ],
            [
              "needs",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " to modify them."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Furthermore, in a "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": " correct class, all passed-by-reference function parameters will be "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": " correct, as discussed in "
          },
          {
            "Text": "Const Correct Function Parameters",
            "AttrFlags": 2
          },
          {
            "Text": ", so that they can only be modified when the function explicitly "
          },
          {
            "Text": "needs",
            "AttrFlags": 4
          },
          {
            "Text": " to modify them."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524342874,
        "id": "8bc8a138-93d6-4fd7-8eea-a68a006806e5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524342874,
        "parent_id": "1341607b-863d-409e-bb62-efac44f1ca7e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "First, let’s look at "
            ],
            [
              "this",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " cv-qualifiers:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "First, let’s look at "
          },
          {
            "Text": "this",
            "AttrFlags": 2
          },
          {
            "Text": " cv-qualifiers:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524342874,
        "id": "022ef616-6716-4543-a8ec-43ec2ad0179e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524342874,
        "parent_id": "1341607b-863d-409e-bb62-efac44f1ca7e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// Assume class Field, with member function \"void insert_value(int);\".\n\nclass ConstIncorrect {\n    Field fld;\n\n  public:\n    ConstIncorrect(Field\u0026 f); // Modifies.\n\n    Field\u0026 getField();        // Might modify.  Also exposes member as non-const reference,\n                              //  allowing indirect modification.\n    void setField(Field\u0026 f);  // Modifies.\n\n    void doSomething(int i);  // Might modify.\n    void doNothing();         // Might modify.\n};\n\nConstIncorrect::ConstIncorrect(Field\u0026 f) : fld(f) {} // Modifies.\nField\u0026 ConstIncorrect::getField() { return fld; }    // Doesn't modify.\nvoid ConstIncorrect::setField(Field\u0026 f) { fld = f; } // Modifies.\nvoid ConstIncorrect::doSomething(int i) {            // Modifies.\n    fld.insert_value(i);\n}\nvoid ConstIncorrect::doNothing() {}                  // Doesn't modify."
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// Assume class Field, with member function \"void insert_value(int);\".\n\nclass ConstIncorrect {\n    Field fld;\n\n  public:\n    ConstIncorrect(Field\u0026 f); // Modifies.\n\n    Field\u0026 getField();        // Might modify.  Also exposes member as non-const reference,\n                              //  allowing indirect modification.\n    void setField(Field\u0026 f);  // Modifies.\n\n    void doSomething(int i);  // Might modify.\n    void doNothing();         // Might modify.\n};\n\nConstIncorrect::ConstIncorrect(Field\u0026 f) : fld(f) {} // Modifies.\nField\u0026 ConstIncorrect::getField() { return fld; }    // Doesn't modify.\nvoid ConstIncorrect::setField(Field\u0026 f) { fld = f; } // Modifies.\nvoid ConstIncorrect::doSomething(int i) {            // Modifies.\n    fld.insert_value(i);\n}\nvoid ConstIncorrect::doNothing() {}                  // Doesn't modify.",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524342874,
        "id": "6fbe89d1-e206-4cd4-b804-6d7fb2084e34",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524342874,
        "parent_id": "1341607b-863d-409e-bb62-efac44f1ca7e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class ConstCorrectCVQ {\n    Field fld;\n\n  public:\n    ConstCorrectCVQ(Field\u0026 f);     // Modifies.\n\n    const Field\u0026 getField() const; // Doesn't modify.  Exposes member as const reference,\n                                   //  preventing indirect modification.\n    void setField(Field\u0026 f);       // Modifies.\n\n    void doSomething(int i);       // Modifies.\n    void doNothing() const;        // Doesn't modify.\n};\n\nConstCorrectCVQ::ConstCorrectCVQ(Field\u0026 f) : fld(f) {}\nField\u0026 ConstCorrectCVQ::getField() const { return fld; }\nvoid ConstCorrectCVQ::setField(Field\u0026 f) { fld = f; }\nvoid ConstCorrectCVQ::doSomething(int i) {\n    fld.insert_value(i);\n}\nvoid ConstCorrectCVQ::doNothing() const  {}\n\n// This won't work.\n// No member functions can be called on const ConstIncorrect instances.\nvoid const_correct_func(const ConstIncorrect\u0026 c) {\n    Field f = c.getField();\n    c.do_nothing();\n}\n\n// But this will.\n// getField() and doNothing() can be called on const ConstCorrectCVQ instances.\nvoid const_correct_func(const ConstCorrectCVQ\u0026 c) {\n    Field f = c.getField();\n    c.do_nothing();\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class ConstCorrectCVQ {\n    Field fld;\n\n  public:\n    ConstCorrectCVQ(Field\u0026 f);     // Modifies.\n\n    const Field\u0026 getField() const; // Doesn't modify.  Exposes member as const reference,\n                                   //  preventing indirect modification.\n    void setField(Field\u0026 f);       // Modifies.\n\n    void doSomething(int i);       // Modifies.\n    void doNothing() const;        // Doesn't modify.\n};\n\nConstCorrectCVQ::ConstCorrectCVQ(Field\u0026 f) : fld(f) {}\nField\u0026 ConstCorrectCVQ::getField() const { return fld; }\nvoid ConstCorrectCVQ::setField(Field\u0026 f) { fld = f; }\nvoid ConstCorrectCVQ::doSomething(int i) {\n    fld.insert_value(i);\n}\nvoid ConstCorrectCVQ::doNothing() const  {}\n\n// This won't work.\n// No member functions can be called on const ConstIncorrect instances.\nvoid const_correct_func(const ConstIncorrect\u0026 c) {\n    Field f = c.getField();\n    c.do_nothing();\n}\n\n// But this will.\n// getField() and doNothing() can be called on const ConstCorrectCVQ instances.\nvoid const_correct_func(const ConstCorrectCVQ\u0026 c) {\n    Field f = c.getField();\n    c.do_nothing();\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524342875,
        "id": "cb7f5c2a-8c32-4a7f-b4fa-26b3d990bd62",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524342875,
        "parent_id": "1341607b-863d-409e-bb62-efac44f1ca7e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We can then combine this with "
            ],
            [
              "Const Correct Function Parameters",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", causing the class to be fully "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "-correct."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "We can then combine this with "
          },
          {
            "Text": "Const Correct Function Parameters",
            "AttrFlags": 2
          },
          {
            "Text": ", causing the class to be fully "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": "-correct."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524342875,
        "id": "420544b6-b88c-4f77-bd9c-e5d701b03a97",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524342875,
        "parent_id": "1341607b-863d-409e-bb62-efac44f1ca7e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class ConstCorrect {\n    Field fld;\n\n  public:\n    ConstCorrect(const Field\u0026 f);  // Modifies instance.  Doesn't modify parameter.\n\n    const Field\u0026 getField() const; // Doesn't modify.  Exposes member as const reference,\n                                   //  preventing indirect modification.\n    void setField(const Field\u0026 f); // Modifies instance.  Doesn't modify parameter.\n\n    void doSomething(int i);       // Modifies.  Doesn't modify parameter (passed by value).\n    void doNothing() const;        // Doesn't modify.\n};\n\nConstCorrect::ConstCorrect(const Field\u0026 f) : fld(f) {}\nField\u0026 ConstCorrect::getField() const { return fld; }\nvoid ConstCorrect::setField(const Field\u0026 f) { fld = f; }\nvoid ConstCorrect::doSomething(int i) {\n    fld.insert_value(i);\n}\nvoid ConstCorrect::doNothing() const {}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class ConstCorrect {\n    Field fld;\n\n  public:\n    ConstCorrect(const Field\u0026 f);  // Modifies instance.  Doesn't modify parameter.\n\n    const Field\u0026 getField() const; // Doesn't modify.  Exposes member as const reference,\n                                   //  preventing indirect modification.\n    void setField(const Field\u0026 f); // Modifies instance.  Doesn't modify parameter.\n\n    void doSomething(int i);       // Modifies.  Doesn't modify parameter (passed by value).\n    void doNothing() const;        // Doesn't modify.\n};\n\nConstCorrect::ConstCorrect(const Field\u0026 f) : fld(f) {}\nField\u0026 ConstCorrect::getField() const { return fld; }\nvoid ConstCorrect::setField(const Field\u0026 f) { fld = f; }\nvoid ConstCorrect::doSomething(int i) {\n    fld.insert_value(i);\n}\nvoid ConstCorrect::doNothing() const {}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524342875,
        "id": "619c7a32-18f0-46f5-8b08-d73ce206042a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524342875,
        "parent_id": "1341607b-863d-409e-bb62-efac44f1ca7e",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524342875,
        "id": "cc1bb307-4358-406e-8e7c-f2a481926f70",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524342875,
        "parent_id": "1341607b-863d-409e-bb62-efac44f1ca7e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This can also be combined with overloading based on "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "ness, in the case that we want one behaviour if the instance is "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", and a different behaviour if it isn’t; a common use for this is constainers providing accessors that only allow modification if the container itself is non-"
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This can also be combined with overloading based on "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": "ness, in the case that we want one behaviour if the instance is "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": ", and a different behaviour if it isn’t; a common use for this is constainers providing accessors that only allow modification if the container itself is non-"
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524342875,
        "id": "4781db29-87a1-471e-96f9-1e37af6a829c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524342875,
        "parent_id": "1341607b-863d-409e-bb62-efac44f1ca7e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class ConstCorrectContainer {\n    int arr[5];\n\n  public:\n    // Subscript operator provides read access if instance is const, or read/write access\n    // otherwise.    \n          int\u0026 operator[](size_t index)       { return arr[index]; }\n    const int\u0026 operator[](size_t index) const { return arr[index]; }\n\n    // ...\n};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class ConstCorrectContainer {\n    int arr[5];\n\n  public:\n    // Subscript operator provides read access if instance is const, or read/write access\n    // otherwise.    \n          int\u0026 operator[](size_t index)       { return arr[index]; }\n    const int\u0026 operator[](size_t index) const { return arr[index]; }\n\n    // ...\n};",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524342876,
        "id": "09b8144d-d4ef-4fae-9832-e4d02e7684d9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524342876,
        "parent_id": "1341607b-863d-409e-bb62-efac44f1ca7e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This is commonly used in the standard library, with most containers providing overloads to take "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "ness into account."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This is commonly used in the standard library, with most containers providing overloads to take "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": "ness into account."
          }
        ]
      }
    ],
    "title": "Const Correct Class Design",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}