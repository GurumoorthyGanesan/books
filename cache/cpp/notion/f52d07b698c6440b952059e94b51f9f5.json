{
  "ID": "f52d07b6-98c6-440b-9520-59e94b51f9f5",
  "Root": {
    "alive": true,
    "content": [
      "dde9933e-db23-477f-9998-f1729c558861",
      "50d8b401-19f5-4c40-9041-fa3a25f27526",
      "10ab466e-f68b-4ddf-8b1e-04e51d14cfb7",
      "172d6d0f-fe63-4f89-bd00-3b5ff7e3d52c",
      "6df8c3b7-93e8-4594-97a6-40891eda833c",
      "29351f25-740d-46a0-bab3-09c00f0ba073",
      "0c2e63a6-58dd-44f6-a1e1-47c7fb9ef5cd",
      "fb8bbc1c-8248-427b-8f15-1914945054c1",
      "c3a35f14-51dc-4881-97bd-21dedf87e05c",
      "41e34e2e-1e5b-4afc-b87c-88dadf5aed0d",
      "17b6f584-024e-4093-a1e9-59102d4a1d6c",
      "066a268c-fbf1-4f5d-9fb4-be4aae1e5724",
      "9c28d0fc-b22c-490b-a22a-0691e3f78115",
      "8f991c78-86ca-474e-a9f9-eb9c2f139669",
      "dd225077-34e6-4068-a065-2c35359a82d8",
      "f77c2ed9-22b0-47c3-a066-023f921b23f0",
      "1d8ac695-5c6f-40e3-bd31-9295ed95c2c2",
      "ddaf06d7-3d1b-4895-808f-a77838a9501f",
      "df567dd9-57b6-4609-bc2f-a9c9cc2d12bb",
      "fe5e147e-c47e-402e-9cf6-7307efffcc4c"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522007565,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "f52d07b6-98c6-440b-9520-59e94b51f9f5",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550779740000,
    "parent_id": "b96c747c-3d87-49a0-b2bb-264f7c11b216",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Reading from a file"
        ]
      ]
    },
    "type": "page",
    "version": 14,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522007556,
        "id": "dde9933e-db23-477f-9998-f1729c558861",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522007556,
        "parent_id": "f52d07b6-98c6-440b-9520-59e94b51f9f5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "There are several ways to read data from a file."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "There are several ways to read data from a file."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522007559,
        "id": "50d8b401-19f5-4c40-9041-fa3a25f27526",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522007559,
        "parent_id": "f52d07b6-98c6-440b-9520-59e94b51f9f5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If you know how the data is formatted, you can use the stream extraction operator ("
            ],
            [
              "\u003e\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "). Let’s assume you have a file named "
            ],
            [
              "foo.txt",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " which contains the following data:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If you know how the data is formatted, you can use the stream extraction operator ("
          },
          {
            "Text": "\u003e\u003e",
            "AttrFlags": 2
          },
          {
            "Text": "). Let’s assume you have a file named "
          },
          {
            "Text": "foo.txt",
            "AttrFlags": 4
          },
          {
            "Text": " which contains the following data:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522007560,
        "id": "10ab466e-f68b-4ddf-8b1e-04e51d14cfb7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522007560,
        "parent_id": "f52d07b6-98c6-440b-9520-59e94b51f9f5",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "John Doe 25 4 6 1987\nJane Doe 15 5 24 1976"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "John Doe 25 4 6 1987\nJane Doe 15 5 24 1976",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522007560,
        "id": "172d6d0f-fe63-4f89-bd00-3b5ff7e3d52c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522007560,
        "parent_id": "f52d07b6-98c6-440b-9520-59e94b51f9f5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Then you can use the following code to read that data from the file:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Then you can use the following code to read that data from the file:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522007560,
        "id": "6df8c3b7-93e8-4594-97a6-40891eda833c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550779620000,
        "parent_id": "f52d07b6-98c6-440b-9520-59e94b51f9f5",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "// Define variables.\nstd::ifstream is(\"foo.txt\");\nstd::string firstname, lastname;\nint age, bmonth, bday, byear;\n\n// Extract firstname, lastname, age, bday month, bday day, and bday year in that order.\n// Note: '\u003e\u003e' returns false if it reached EOF (end of file) or if the input data doesn't\n// correspond to the type of the input variable (for example, the string \"foo\" can't be\n// extracted into an 'int' variable).\nwhile (is \u003e\u003e firstname \u003e\u003e lastname \u003e\u003e age \u003e\u003e bmonth \u003e\u003e bday \u003e\u003e byear)\n    // Process the data that has been read."
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "// Define variables.\nstd::ifstream is(\"foo.txt\");\nstd::string firstname, lastname;\nint age, bmonth, bday, byear;\n\n// Extract firstname, lastname, age, bday month, bday day, and bday year in that order.\n// Note: '\u003e\u003e' returns false if it reached EOF (end of file) or if the input data doesn't\n// correspond to the type of the input variable (for example, the string \"foo\" can't be\n// extracted into an 'int' variable).\nwhile (is \u003e\u003e firstname \u003e\u003e lastname \u003e\u003e age \u003e\u003e bmonth \u003e\u003e bday \u003e\u003e byear)\n    // Process the data that has been read.",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522007560,
        "id": "29351f25-740d-46a0-bab3-09c00f0ba073",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522007560,
        "parent_id": "f52d07b6-98c6-440b-9520-59e94b51f9f5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The stream extraction operator "
            ],
            [
              "\u003e\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " extracts every character and stops if it finds a character that can’t be stored or if it is a special character:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The stream extraction operator "
          },
          {
            "Text": "\u003e\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " extracts every character and stops if it finds a character that can’t be stored or if it is a special character:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522007561,
        "id": "0c2e63a6-58dd-44f6-a1e1-47c7fb9ef5cd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550779740000,
        "parent_id": "f52d07b6-98c6-440b-9520-59e94b51f9f5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For string types, the operator stops at a whitespace ("
            ],
            [
              " ",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") or at a newline ("
            ],
            [
              "\\n",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ")."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 18,
        "inline_content": [
          {
            "Text": "For string types, the operator stops at a whitespace ("
          },
          {
            "Text": " ",
            "AttrFlags": 2
          },
          {
            "Text": ") or at a newline ("
          },
          {
            "Text": "\\n",
            "AttrFlags": 2
          },
          {
            "Text": ")."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522007561,
        "id": "fb8bbc1c-8248-427b-8f15-1914945054c1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522007561,
        "parent_id": "f52d07b6-98c6-440b-9520-59e94b51f9f5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For numbers, the operator stops at a non-number character."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "For numbers, the operator stops at a non-number character."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522007561,
        "id": "c3a35f14-51dc-4881-97bd-21dedf87e05c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522007561,
        "parent_id": "f52d07b6-98c6-440b-9520-59e94b51f9f5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This means that the following version of the file "
            ],
            [
              "foo.txt",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " will also be successfully read by the previous code:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This means that the following version of the file "
          },
          {
            "Text": "foo.txt",
            "AttrFlags": 4
          },
          {
            "Text": " will also be successfully read by the previous code:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522007561,
        "id": "41e34e2e-1e5b-4afc-b87c-88dadf5aed0d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522007561,
        "parent_id": "f52d07b6-98c6-440b-9520-59e94b51f9f5",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "John \nDoe 25\n4 6 1987\n\n\nJane\nDoe \n15 5\n24\n1976"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "John \nDoe 25\n4 6 1987\n\n\nJane\nDoe \n15 5\n24\n1976",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522007562,
        "id": "17b6f584-024e-4093-a1e9-59102d4a1d6c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522007562,
        "parent_id": "f52d07b6-98c6-440b-9520-59e94b51f9f5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The stream extraction operator "
            ],
            [
              "\u003e\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " always returns the stream given to it. Therefore, multiple operators can be chained together in order to read data consecutively. However, a stream can also be used as a Boolean expression (as shown in the "
            ],
            [
              "while",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " loop in the previous code). This is because the stream classes have a conversion operator for the type "
            ],
            [
              "bool",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". This "
            ],
            [
              "bool()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " operator will return "
            ],
            [
              "true",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " as long as the stream has no errors. If a stream goes into an error state (for example, because no more data can be extracted), then the "
            ],
            [
              "bool()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " operator will return "
            ],
            [
              "false",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Therefore, the "
            ],
            [
              "while",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " loop in the previous code will be exited after the input file has been read to its end."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The stream extraction operator "
          },
          {
            "Text": "\u003e\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " always returns the stream given to it. Therefore, multiple operators can be chained together in order to read data consecutively. However, a stream can also be used as a Boolean expression (as shown in the "
          },
          {
            "Text": "while",
            "AttrFlags": 2
          },
          {
            "Text": " loop in the previous code). This is because the stream classes have a conversion operator for the type "
          },
          {
            "Text": "bool",
            "AttrFlags": 2
          },
          {
            "Text": ". This "
          },
          {
            "Text": "bool()",
            "AttrFlags": 2
          },
          {
            "Text": " operator will return "
          },
          {
            "Text": "true",
            "AttrFlags": 2
          },
          {
            "Text": " as long as the stream has no errors. If a stream goes into an error state (for example, because no more data can be extracted), then the "
          },
          {
            "Text": "bool()",
            "AttrFlags": 2
          },
          {
            "Text": " operator will return "
          },
          {
            "Text": "false",
            "AttrFlags": 2
          },
          {
            "Text": ". Therefore, the "
          },
          {
            "Text": "while",
            "AttrFlags": 2
          },
          {
            "Text": " loop in the previous code will be exited after the input file has been read to its end."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522007562,
        "id": "066a268c-fbf1-4f5d-9fb4-be4aae1e5724",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522007562,
        "parent_id": "f52d07b6-98c6-440b-9520-59e94b51f9f5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If you wish to read an entire file as a string, you may use the following code:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If you wish to read an entire file as a string, you may use the following code:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522007562,
        "id": "9c28d0fc-b22c-490b-a22a-0691e3f78115",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550779680000,
        "parent_id": "f52d07b6-98c6-440b-9520-59e94b51f9f5",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "// opens 'foo.txt'\nstd::ifstream is(\"foo.txt\");\nstd::string whole_file;\n\n// Sets position to the end of the file.\nis.seekg(0, std::ios::end);\n\n// Reserves memory for the file.\nwhole_file.reserve(is.tellg());\n\n// Sets position to the start of the file.\nis.seekg(0, std::ios::beg);\n\n// Sets contents of 'whole_file' to all characters in the file.\nwhole_file.assign(std::istreambuf_iterator\u003cchar\u003e(is),\n  std::istreambuf_iterator\u003cchar\u003e());"
            ]
          ]
        },
        "type": "code",
        "version": 39,
        "code": "// opens 'foo.txt'\nstd::ifstream is(\"foo.txt\");\nstd::string whole_file;\n\n// Sets position to the end of the file.\nis.seekg(0, std::ios::end);\n\n// Reserves memory for the file.\nwhole_file.reserve(is.tellg());\n\n// Sets position to the start of the file.\nis.seekg(0, std::ios::beg);\n\n// Sets contents of 'whole_file' to all characters in the file.\nwhole_file.assign(std::istreambuf_iterator\u003cchar\u003e(is),\n  std::istreambuf_iterator\u003cchar\u003e());",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522007562,
        "id": "8f991c78-86ca-474e-a9f9-eb9c2f139669",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522007562,
        "parent_id": "f52d07b6-98c6-440b-9520-59e94b51f9f5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This code reserves space for the "
            ],
            [
              "string",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in order to cut down on unneeded memory allocations."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This code reserves space for the "
          },
          {
            "Text": "string",
            "AttrFlags": 2
          },
          {
            "Text": " in order to cut down on unneeded memory allocations."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522007564,
        "id": "dd225077-34e6-4068-a065-2c35359a82d8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522007564,
        "parent_id": "f52d07b6-98c6-440b-9520-59e94b51f9f5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If you want to read a file line by line, you can use the function "
            ],
            [
              "getline()",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://en.cppreference.com/w/cpp/string/basic_string/getline"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If you want to read a file line by line, you can use the function "
          },
          {
            "Text": "getline()",
            "AttrFlags": 2,
            "Link": "http://en.cppreference.com/w/cpp/string/basic_string/getline"
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522007564,
        "id": "f77c2ed9-22b0-47c3-a066-023f921b23f0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550779620000,
        "parent_id": "f52d07b6-98c6-440b-9520-59e94b51f9f5",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "std::ifstream is(\"foo.txt\");   \n\n// The function getline returns false if there are no more lines.\nfor (std::string str; std::getline(is, str);) {\n    // Process the line that has been read.\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "std::ifstream is(\"foo.txt\");   \n\n// The function getline returns false if there are no more lines.\nfor (std::string str; std::getline(is, str);) {\n    // Process the line that has been read.\n}",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522007564,
        "id": "1d8ac695-5c6f-40e3-bd31-9295ed95c2c2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522007564,
        "parent_id": "f52d07b6-98c6-440b-9520-59e94b51f9f5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If you want to read a fixed number of characters, you can use the stream’s member function "
            ],
            [
              "read()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If you want to read a fixed number of characters, you can use the stream’s member function "
          },
          {
            "Text": "read()",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522007564,
        "id": "ddaf06d7-3d1b-4895-808f-a77838a9501f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550779620000,
        "parent_id": "f52d07b6-98c6-440b-9520-59e94b51f9f5",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "std::ifstream is(\"foo.txt\");\nchar str[4];\n\n// Read 4 characters from the file.\nis.read(str, 4);"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "std::ifstream is(\"foo.txt\");\nchar str[4];\n\n// Read 4 characters from the file.\nis.read(str, 4);",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522007564,
        "id": "df567dd9-57b6-4609-bc2f-a9c9cc2d12bb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522007564,
        "parent_id": "f52d07b6-98c6-440b-9520-59e94b51f9f5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "After executing a read command, you should always check if the error state flag "
            ],
            [
              "failbit",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " has been set, as it indicates whether the operation failed or not. This can be done by calling the file stream’s member function "
            ],
            [
              "fail()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "After executing a read command, you should always check if the error state flag "
          },
          {
            "Text": "failbit",
            "AttrFlags": 2
          },
          {
            "Text": " has been set, as it indicates whether the operation failed or not. This can be done by calling the file stream’s member function "
          },
          {
            "Text": "fail()",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522007564,
        "id": "fe5e147e-c47e-402e-9cf6-7307efffcc4c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550779620000,
        "parent_id": "f52d07b6-98c6-440b-9520-59e94b51f9f5",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "is.read(str, 4); // this operation might fail for any reason.\n\nif (is.fail()) {\n    // failed to read!\n}"
            ]
          ]
        },
        "type": "code",
        "version": 14,
        "code": "is.read(str, 4); // this operation might fail for any reason.\n\nif (is.fail()) {\n    // failed to read!\n}",
        "code_language": "C++"
      }
    ],
    "title": "Reading from a file",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}