{
  "ID": "c7043639-b52c-4b3a-9f97-b65d8514b796",
  "Root": {
    "alive": true,
    "content": [
      "d3572642-3665-4e2b-9bd6-3281db7784bb",
      "4c2bc012-4b50-4016-86f0-7b8d7ddc290d",
      "6d5f347a-b75c-4582-8a1e-67180a45c7d8"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550523941543,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "c7043639-b52c-4b3a-9f97-b65d8514b796",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551688358741,
    "parent_id": "2f06e164-6745-4c46-9402-92f51f9f9266",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Encapsulation"
        ]
      ]
    },
    "type": "page",
    "version": 4,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523941539,
        "id": "d3572642-3665-4e2b-9bd6-3281db7784bb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523941539,
        "parent_id": "c7043639-b52c-4b3a-9f97-b65d8514b796",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A common use of member functions is for encapsulation, using an "
            ],
            [
              "accessor",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " (commonly known as a getter) and a "
            ],
            [
              "mutator",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " (commonly known as a setter) instead of accessing fields directly."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A common use of member functions is for encapsulation, using an "
          },
          {
            "Text": "accessor",
            "AttrFlags": 4
          },
          {
            "Text": " (commonly known as a getter) and a "
          },
          {
            "Text": "mutator",
            "AttrFlags": 4
          },
          {
            "Text": " (commonly known as a setter) instead of accessing fields directly."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523941542,
        "id": "4c2bc012-4b50-4016-86f0-7b8d7ddc290d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523941542,
        "parent_id": "c7043639-b52c-4b3a-9f97-b65d8514b796",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class Encapsulator {\n    int encapsulated;\n\n  public:\n    int  get_encapsulated() const { return encapsulated; }\n    void set_encapsulated(int e)  { encapsulated = e; }\n\n    void some_func() {\n        do_something_with(encapsulated);\n    }\n};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class Encapsulator {\n    int encapsulated;\n\n  public:\n    int  get_encapsulated() const { return encapsulated; }\n    void set_encapsulated(int e)  { encapsulated = e; }\n\n    void some_func() {\n        do_something_with(encapsulated);\n    }\n};",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523941543,
        "id": "6d5f347a-b75c-4582-8a1e-67180a45c7d8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523941543,
        "parent_id": "c7043639-b52c-4b3a-9f97-b65d8514b796",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Inside the class, "
            ],
            [
              "encapsulated",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can be freely accessed by any non-static member function; outside the class, access to it is regulated by member functions, using "
            ],
            [
              "get_encapsulated()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to read it and "
            ],
            [
              "set_encapsulated()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to modify it. This prevents unintentional modifications to the variable, as separate functions are used to read and write it. [There are many discussions on whether getters and setters provide or break encapsulation, with good arguments for both claims; such heated debate is outside the scope of this example.]"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Inside the class, "
          },
          {
            "Text": "encapsulated",
            "AttrFlags": 2
          },
          {
            "Text": " can be freely accessed by any non-static member function; outside the class, access to it is regulated by member functions, using "
          },
          {
            "Text": "get_encapsulated()",
            "AttrFlags": 2
          },
          {
            "Text": " to read it and "
          },
          {
            "Text": "set_encapsulated()",
            "AttrFlags": 2
          },
          {
            "Text": " to modify it. This prevents unintentional modifications to the variable, as separate functions are used to read and write it. [There are many discussions on whether getters and setters provide or break encapsulation, with good arguments for both claims; such heated debate is outside the scope of this example.]"
          }
        ]
      }
    ],
    "title": "Encapsulation",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}