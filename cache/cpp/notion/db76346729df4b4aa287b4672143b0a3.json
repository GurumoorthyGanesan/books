{
  "ID": "db763467-29df-4b4a-a287-b4672143b0a3",
  "Root": {
    "alive": true,
    "content": [
      "4c271240-9400-4800-98e7-a83ad1b9e9b8",
      "5d167ec1-6981-4e4b-ac21-7847ae4a9509",
      "5b6c0c53-2120-490b-b255-eb7dc56ed12c",
      "ebc58312-b923-4d6d-a0c9-c537f9eb9dc1",
      "42b36a47-299d-4b3f-8bdd-07465c41d05f",
      "b4e9a96f-7b70-42c4-85bc-08f5dc0e6346",
      "e0f01e13-c4a1-42db-8d33-4fa7fe9205b2",
      "574989c7-e536-444b-b837-5e998a11807f",
      "2edd8e48-ed85-4977-b6a8-533ee36530be",
      "965e621d-e892-4f46-adbf-f493877b3fc0"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550525425689,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "db763467-29df-4b4a-a287-b4672143b0a3",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551689257226,
    "parent_id": "f0a4483b-95d9-4c82-8e41-15c96d864674",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Strategies for lock classes std try to lock std adopt lock std defer lock"
        ]
      ]
    },
    "type": "page",
    "version": 4,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525425684,
        "id": "4c271240-9400-4800-98e7-a83ad1b9e9b8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525425684,
        "parent_id": "db763467-29df-4b4a-a287-b4672143b0a3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When creating a std::unique_lock, there are three different locking strategies to choose from: "
            ],
            [
              "std::try_to_lock",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "std::defer_lock",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "std::adopt_lock",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When creating a std::unique_lock, there are three different locking strategies to choose from: "
          },
          {
            "Text": "std::try_to_lock",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "std::defer_lock",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "std::adopt_lock",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525425688,
        "id": "5d167ec1-6981-4e4b-ac21-7847ae4a9509",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525425688,
        "parent_id": "db763467-29df-4b4a-a287-b4672143b0a3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "std::try_to_lock",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " allows for trying a lock without blocking:"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "std::try_to_lock",
            "AttrFlags": 2
          },
          {
            "Text": " allows for trying a lock without blocking:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525425688,
        "id": "5b6c0c53-2120-490b-b255-eb7dc56ed12c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525425688,
        "parent_id": "db763467-29df-4b4a-a287-b4672143b0a3",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "{\n    std::atomic_int temp {0};\n    std::mutex _mutex;\n    \n    std::thread t( [\u0026](){\n        \n        while( temp!= -1){\n            std::this_thread::sleep_for(std::chrono::seconds(5));\n            std::unique_lock\u003cstd::mutex\u003e lock( _mutex, std::try_to_lock);\n            \n            if(lock.owns_lock()){\n                //do something\n                temp=0;\n            }\n        }\n    });\n    \n    while ( true )\n    {\n        std::this_thread::sleep_for(std::chrono::seconds(1));\n        std::unique_lock\u003cstd::mutex\u003e lock( _mutex, std::try_to_lock);\n        if(lock.owns_lock()){\n            if (temp \u003c INT_MAX){\n                ++temp;\n            }\n            std::cout \u003c\u003c temp \u003c\u003c std::endl;\n        }\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "{\n    std::atomic_int temp {0};\n    std::mutex _mutex;\n    \n    std::thread t( [\u0026](){\n        \n        while( temp!= -1){\n            std::this_thread::sleep_for(std::chrono::seconds(5));\n            std::unique_lock\u003cstd::mutex\u003e lock( _mutex, std::try_to_lock);\n            \n            if(lock.owns_lock()){\n                //do something\n                temp=0;\n            }\n        }\n    });\n    \n    while ( true )\n    {\n        std::this_thread::sleep_for(std::chrono::seconds(1));\n        std::unique_lock\u003cstd::mutex\u003e lock( _mutex, std::try_to_lock);\n        if(lock.owns_lock()){\n            if (temp \u003c INT_MAX){\n                ++temp;\n            }\n            std::cout \u003c\u003c temp \u003c\u003c std::endl;\n        }\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525425688,
        "id": "ebc58312-b923-4d6d-a0c9-c537f9eb9dc1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525425688,
        "parent_id": "db763467-29df-4b4a-a287-b4672143b0a3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "std::defer_lock",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " allows for creating a lock structure without acquiring the lock. When locking more than one mutex, there is a window of opportunity for a deadlock if two function callers try to acquire the locks at the same time:"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "std::defer_lock",
            "AttrFlags": 2
          },
          {
            "Text": " allows for creating a lock structure without acquiring the lock. When locking more than one mutex, there is a window of opportunity for a deadlock if two function callers try to acquire the locks at the same time:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525425688,
        "id": "42b36a47-299d-4b3f-8bdd-07465c41d05f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525425688,
        "parent_id": "db763467-29df-4b4a-a287-b4672143b0a3",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "{\n    std::unique_lock\u003cstd::mutex\u003e lock1(_mutex1, std::defer_lock);\n    std::unique_lock\u003cstd::mutex\u003e lock2(_mutex2, std::defer_lock);\n    lock1.lock()\n    lock2.lock(); // deadlock here\n    std::cout \u003c\u003c \"Locked! \u003c\u003c std::endl;\n    //...\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "{\n    std::unique_lock\u003cstd::mutex\u003e lock1(_mutex1, std::defer_lock);\n    std::unique_lock\u003cstd::mutex\u003e lock2(_mutex2, std::defer_lock);\n    lock1.lock()\n    lock2.lock(); // deadlock here\n    std::cout \u003c\u003c \"Locked! \u003c\u003c std::endl;\n    //...\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525425688,
        "id": "b4e9a96f-7b70-42c4-85bc-08f5dc0e6346",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525425688,
        "parent_id": "db763467-29df-4b4a-a287-b4672143b0a3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "With the following code, whatever happens in the function, the locks are acquired and released in appropriate order:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "With the following code, whatever happens in the function, the locks are acquired and released in appropriate order:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525425688,
        "id": "e0f01e13-c4a1-42db-8d33-4fa7fe9205b2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525425688,
        "parent_id": "db763467-29df-4b4a-a287-b4672143b0a3",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "{\n    std::unique_lock\u003cstd::mutex\u003e lock1(_mutex1, std::defer_lock);\n    std::unique_lock\u003cstd::mutex\u003e lock2(_mutex2, std::defer_lock);\n    std::lock(lock1,lock2); // no deadlock possible\n    std::cout \u003c\u003c \"Locked! \u003c\u003c std::endl;\n    //...\n    \n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "{\n    std::unique_lock\u003cstd::mutex\u003e lock1(_mutex1, std::defer_lock);\n    std::unique_lock\u003cstd::mutex\u003e lock2(_mutex2, std::defer_lock);\n    std::lock(lock1,lock2); // no deadlock possible\n    std::cout \u003c\u003c \"Locked! \u003c\u003c std::endl;\n    //...\n    \n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525425689,
        "id": "574989c7-e536-444b-b837-5e998a11807f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525425689,
        "parent_id": "db763467-29df-4b4a-a287-b4672143b0a3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "std::adopt_lock",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " does not attempt to lock a second time if the calling thread currently owns the lock."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "std::adopt_lock",
            "AttrFlags": 2
          },
          {
            "Text": " does not attempt to lock a second time if the calling thread currently owns the lock."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525425689,
        "id": "2edd8e48-ed85-4977-b6a8-533ee36530be",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525425689,
        "parent_id": "db763467-29df-4b4a-a287-b4672143b0a3",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "{\n    std::unique_lock\u003cstd::mutex\u003e lock1(_mutex1, std::adopt_lock);\n    std::unique_lock\u003cstd::mutex\u003e lock2(_mutex2, std::adopt_lock);\n    std::cout \u003c\u003c \"Locked! \u003c\u003c std::endl;\n    //...\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "{\n    std::unique_lock\u003cstd::mutex\u003e lock1(_mutex1, std::adopt_lock);\n    std::unique_lock\u003cstd::mutex\u003e lock2(_mutex2, std::adopt_lock);\n    std::cout \u003c\u003c \"Locked! \u003c\u003c std::endl;\n    //...\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525425689,
        "id": "965e621d-e892-4f46-adbf-f493877b3fc0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525425689,
        "parent_id": "db763467-29df-4b4a-a287-b4672143b0a3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Something to keep in mind is that std::adopt_lock is not a substitute for recursive mutex usage. When the lock goes out of scope the mutex is "
            ],
            [
              "released",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Something to keep in mind is that std::adopt_lock is not a substitute for recursive mutex usage. When the lock goes out of scope the mutex is "
          },
          {
            "Text": "released",
            "AttrFlags": 1
          },
          {
            "Text": "."
          }
        ]
      }
    ],
    "title": "Strategies for lock classes std try to lock std adopt lock std defer lock",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}