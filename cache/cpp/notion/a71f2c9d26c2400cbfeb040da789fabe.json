{
  "ID": "a71f2c9d-26c2-400c-bfeb-040da789fabe",
  "Root": {
    "alive": true,
    "content": [
      "44e34971-3766-4783-b2cb-b01d5777d670",
      "6743cb99-7abe-41af-b69f-b4da963f23cf",
      "89143ee4-ebaf-411e-815d-db96638e4e25",
      "a357299a-85b2-4c04-99ba-fc42afad6fa3",
      "3b138523-599f-458c-8950-551310654dfc"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550525424500,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "a71f2c9d-26c2-400c-bfeb-040da789fabe",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551689252560,
    "parent_id": "f0a4483b-95d9-4c82-8e41-15c96d864674",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "std unique lock std shared lock std lock guard"
        ]
      ]
    },
    "type": "page",
    "version": 4,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525424499,
        "id": "44e34971-3766-4783-b2cb-b01d5777d670",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525424499,
        "parent_id": "a71f2c9d-26c2-400c-bfeb-040da789fabe",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Used for the RAII style acquiring of try locks, timed try locks and recursive locks."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Used for the RAII style acquiring of try locks, timed try locks and recursive locks."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525424499,
        "id": "6743cb99-7abe-41af-b69f-b4da963f23cf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525424499,
        "parent_id": "a71f2c9d-26c2-400c-bfeb-040da789fabe",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "std::unique_lock",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " allows for exclusive ownership of mutexes."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "std::unique_lock",
            "AttrFlags": 2
          },
          {
            "Text": " allows for exclusive ownership of mutexes."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525424500,
        "id": "89143ee4-ebaf-411e-815d-db96638e4e25",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525424500,
        "parent_id": "a71f2c9d-26c2-400c-bfeb-040da789fabe",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "std::shared_lock",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " allows for shared ownership of mutexes. Several threads can hold "
            ],
            [
              "std::shared_locks",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " on a "
            ],
            [
              "std::shared_mutex",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Available from C++ 14."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "std::shared_lock",
            "AttrFlags": 2
          },
          {
            "Text": " allows for shared ownership of mutexes. Several threads can hold "
          },
          {
            "Text": "std::shared_locks",
            "AttrFlags": 2
          },
          {
            "Text": " on a "
          },
          {
            "Text": "std::shared_mutex",
            "AttrFlags": 2
          },
          {
            "Text": ". Available from C++ 14."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525424500,
        "id": "a357299a-85b2-4c04-99ba-fc42afad6fa3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525424500,
        "parent_id": "a71f2c9d-26c2-400c-bfeb-040da789fabe",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "std::lock_guard",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is a lightweight alternative to "
            ],
            [
              "std::unique_lock",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "std::shared_lock",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "std::lock_guard",
            "AttrFlags": 2
          },
          {
            "Text": " is a lightweight alternative to "
          },
          {
            "Text": "std::unique_lock",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "std::shared_lock",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525424500,
        "id": "3b138523-599f-458c-8950-551310654dfc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525424500,
        "parent_id": "a71f2c9d-26c2-400c-bfeb-040da789fabe",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cunordered_map\u003e\n#include \u003cmutex\u003e\n#include \u003cshared_mutex\u003e\n#include \u003cthread\u003e\n#include \u003cstring\u003e\n#include \u003ciostream\u003e\n\nclass PhoneBook {\npublic:\n    std::string getPhoneNo( const std::string \u0026 name )\n    {\n        std::shared_lock\u003cstd::shared_timed_mutex\u003e l(_protect);\n        auto it =  _phonebook.find( name );\n        if ( it != _phonebook.end() )\n            return (*it).second;\n        return \"\";\n    }\n    void addPhoneNo ( const std::string \u0026 name, const std::string \u0026 phone )\n    {\n        std::unique_lock\u003cstd::shared_timed_mutex\u003e l(_protect);\n        _phonebook[name] = phone;\n    }\n    \n    std::shared_timed_mutex _protect;\n    std::unordered_map\u003cstd::string,std::string\u003e  _phonebook;\n};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cunordered_map\u003e\n#include \u003cmutex\u003e\n#include \u003cshared_mutex\u003e\n#include \u003cthread\u003e\n#include \u003cstring\u003e\n#include \u003ciostream\u003e\n\nclass PhoneBook {\npublic:\n    std::string getPhoneNo( const std::string \u0026 name )\n    {\n        std::shared_lock\u003cstd::shared_timed_mutex\u003e l(_protect);\n        auto it =  _phonebook.find( name );\n        if ( it != _phonebook.end() )\n            return (*it).second;\n        return \"\";\n    }\n    void addPhoneNo ( const std::string \u0026 name, const std::string \u0026 phone )\n    {\n        std::unique_lock\u003cstd::shared_timed_mutex\u003e l(_protect);\n        _phonebook[name] = phone;\n    }\n    \n    std::shared_timed_mutex _protect;\n    std::unordered_map\u003cstd::string,std::string\u003e  _phonebook;\n};",
        "code_language": "Plain Text"
      }
    ],
    "title": "std unique lock std shared lock std lock guard",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}