{
  "ID": "5ee199fc-91ba-4bec-9e4f-b009a8833e2e",
  "Root": {
    "alive": true,
    "content": [
      "7f47a454-cb18-4b33-93ba-8c97dd3e85bd",
      "d69a12da-2193-42ef-b871-7c3055955158",
      "a496be8a-8fae-4889-bf14-ae7efb5f01d7",
      "fc055861-3116-461d-a3c0-3a25519c1f96",
      "4099b334-35c0-402e-a90d-f554f95cba5b"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522335910,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "5ee199fc-91ba-4bec-9e4f-b009a8833e2e",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552301040000,
    "parent_id": "5a1044bb-eec6-47e0-932c-1a000fc67e20",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Rethrow propagate exception"
        ]
      ]
    },
    "type": "page",
    "version": 12,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522335906,
        "id": "7f47a454-cb18-4b33-93ba-8c97dd3e85bd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522335906,
        "parent_id": "5ee199fc-91ba-4bec-9e4f-b009a8833e2e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Sometimes you want to do something with the exception you catch (like write to log or print a warning) and let it bubble up to the upper scope to be handled. To do so, you can rethrow any exception you catch:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Sometimes you want to do something with the exception you catch (like write to log or print a warning) and let it bubble up to the upper scope to be handled. To do so, you can rethrow any exception you catch:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522335908,
        "id": "d69a12da-2193-42ef-b871-7c3055955158",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552300980000,
        "parent_id": "5ee199fc-91ba-4bec-9e4f-b009a8833e2e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "try {\n    ... // some code here\n} catch (const SomeException\u0026 e) {\n    std::cout \u003c\u003c \"caught an exception\";\n    throw;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "try {\n    ... // some code here\n} catch (const SomeException\u0026 e) {\n    std::cout \u003c\u003c \"caught an exception\";\n    throw;\n}",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522335909,
        "id": "a496be8a-8fae-4889-bf14-ae7efb5f01d7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522335909,
        "parent_id": "5ee199fc-91ba-4bec-9e4f-b009a8833e2e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Using "
            ],
            [
              "throw;",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " without arguments will re-throw the currently caught exception."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Using "
          },
          {
            "Text": "throw;",
            "AttrFlags": 2
          },
          {
            "Text": " without arguments will re-throw the currently caught exception."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522335909,
        "id": "fc055861-3116-461d-a3c0-3a25519c1f96",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522335909,
        "parent_id": "5ee199fc-91ba-4bec-9e4f-b009a8833e2e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To rethrow a managed "
            ],
            [
              "std::exception_ptr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", the C++ Standard Library has the "
            ],
            [
              "rethrow_exception",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " function that can be used by including the "
            ],
            [
              "\u003cexception\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " header in your program."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To rethrow a managed "
          },
          {
            "Text": "std::exception_ptr",
            "AttrFlags": 2
          },
          {
            "Text": ", the C++ Standard Library has the "
          },
          {
            "Text": "rethrow_exception",
            "AttrFlags": 2
          },
          {
            "Text": " function that can be used by including the "
          },
          {
            "Text": "\u003cexception\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " header in your program."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522335910,
        "id": "4099b334-35c0-402e-a90d-f554f95cba5b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552301040000,
        "parent_id": "5ee199fc-91ba-4bec-9e4f-b009a8833e2e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "// :glot\n#include \u003ciostream\u003e\n#include \u003cstring\u003e\n#include \u003cexception\u003e\n#include \u003cstdexcept\u003e\n \nvoid handle_eptr(std::exception_ptr eptr) // passing by value is ok\n{\n    try {\n        if (eptr) {\n            std::rethrow_exception(eptr);\n        }\n    } catch(const std::exception\u0026 e) {\n        std::cout \u003c\u003c \"Caught exception \\\"\" \u003c\u003c e.what() \u003c\u003c \"\\\"\\n\";\n    }\n}\n \nint main()\n{\n    std::exception_ptr eptr;\n    try {\n        std::string().at(1); // this generates an std::out_of_range\n    } catch(...) {\n        eptr = std::current_exception(); // capture\n    }\n    handle_eptr(eptr);\n} // destructor for std::out_of_range called here, when the eptr is destructed"
            ]
          ]
        },
        "type": "code",
        "version": 6,
        "code": "// :glot\n#include \u003ciostream\u003e\n#include \u003cstring\u003e\n#include \u003cexception\u003e\n#include \u003cstdexcept\u003e\n \nvoid handle_eptr(std::exception_ptr eptr) // passing by value is ok\n{\n    try {\n        if (eptr) {\n            std::rethrow_exception(eptr);\n        }\n    } catch(const std::exception\u0026 e) {\n        std::cout \u003c\u003c \"Caught exception \\\"\" \u003c\u003c e.what() \u003c\u003c \"\\\"\\n\";\n    }\n}\n \nint main()\n{\n    std::exception_ptr eptr;\n    try {\n        std::string().at(1); // this generates an std::out_of_range\n    } catch(...) {\n        eptr = std::current_exception(); // capture\n    }\n    handle_eptr(eptr);\n} // destructor for std::out_of_range called here, when the eptr is destructed",
        "code_language": "C++"
      }
    ],
    "title": "Rethrow propagate exception",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}