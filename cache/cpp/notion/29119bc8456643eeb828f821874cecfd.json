{
  "ID": "29119bc8-4566-43ee-b828-f821874cecfd",
  "Root": {
    "alive": true,
    "content": [
      "3e9367b5-98c0-49fe-af7e-15033f396693",
      "516f2a5b-523e-47ea-a301-db1fb1c7a8f8",
      "f82b9835-7dbc-4d10-9d55-28c310a1834c",
      "7da3f16b-04e2-49d6-854b-0ab273185819",
      "6f961786-2dfc-4658-8f01-b8b60d04c133",
      "9aac94c2-eca1-4edf-92c0-fc290e5bf459",
      "2673081c-4035-4a1f-965d-8d5f845854b0",
      "a433b33b-48c9-4872-9f16-fa4b590d951c",
      "05c2dab6-9053-47c3-a4a1-cc8d13b9ff4e",
      "c89b2b62-6ca1-4531-93b5-a55a671fbe7c",
      "0173546e-a40f-43e7-afec-c9b913265c5b",
      "d4a88fd9-02f7-4a86-97e8-9bb88ac502bf",
      "88fabe14-c1e5-4271-a4a7-a4f8da4dcab6"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522028553,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "29119bc8-4566-43ee-b828-f821874cecfd",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552347240000,
    "parent_id": "402ef4da-a4e3-4503-ab08-9a4aa56821b5",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Unique ownership without move semantics std::auto_ptr"
        ]
      ]
    },
    "type": "page",
    "version": 24,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522028549,
        "id": "3e9367b5-98c0-49fe-af7e-15033f396693",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522028549,
        "parent_id": "29119bc8-4566-43ee-b828-f821874cecfd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "NOTE:",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "std::auto_ptr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " has been deprecated in C++11 and will be removed in C++17. You should only use this if you are forced to use C++03 or earlier and are willing to be careful. It is recommended to move to unique_ptr in combination with "
            ],
            [
              "std::move",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to replace "
            ],
            [
              "std::auto_ptr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " behavior."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "NOTE:",
            "AttrFlags": 1
          },
          {
            "Text": " "
          },
          {
            "Text": "std::auto_ptr",
            "AttrFlags": 2
          },
          {
            "Text": " has been deprecated in C++11 and will be removed in C++17. You should only use this if you are forced to use C++03 or earlier and are willing to be careful. It is recommended to move to unique_ptr in combination with "
          },
          {
            "Text": "std::move",
            "AttrFlags": 2
          },
          {
            "Text": " to replace "
          },
          {
            "Text": "std::auto_ptr",
            "AttrFlags": 2
          },
          {
            "Text": " behavior."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522028549,
        "id": "516f2a5b-523e-47ea-a301-db1fb1c7a8f8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522028549,
        "parent_id": "29119bc8-4566-43ee-b828-f821874cecfd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Before we had "
            ],
            [
              "std::unique_ptr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", before we had move semantics, we had "
            ],
            [
              "std::auto_ptr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". "
            ],
            [
              "std::auto_ptr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " provides unique ownership but transfers ownership upon copy."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Before we had "
          },
          {
            "Text": "std::unique_ptr",
            "AttrFlags": 2
          },
          {
            "Text": ", before we had move semantics, we had "
          },
          {
            "Text": "std::auto_ptr",
            "AttrFlags": 2
          },
          {
            "Text": ". "
          },
          {
            "Text": "std::auto_ptr",
            "AttrFlags": 2
          },
          {
            "Text": " provides unique ownership but transfers ownership upon copy."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522028551,
        "id": "f82b9835-7dbc-4d10-9d55-28c310a1834c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522028551,
        "parent_id": "29119bc8-4566-43ee-b828-f821874cecfd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As with all smart pointers, "
            ],
            [
              "std::auto_ptr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " automatically cleans up resources (see "
            ],
            [
              "RAII",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%2B%2B/1320/raii-resource-acquisition-is-initialization#t=201607231428426338521"
                ]
              ]
            ],
            [
              "):"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "As with all smart pointers, "
          },
          {
            "Text": "std::auto_ptr",
            "AttrFlags": 2
          },
          {
            "Text": " automatically cleans up resources (see "
          },
          {
            "Text": "RAII",
            "Link": "http://stackoverflow.com/documentation/c%2B%2B/1320/raii-resource-acquisition-is-initialization#t=201607231428426338521"
          },
          {
            "Text": "):"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522028551,
        "id": "7da3f16b-04e2-49d6-854b-0ab273185819",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550801040000,
        "parent_id": "29119bc8-4566-43ee-b828-f821874cecfd",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "{\n    std::auto_ptr\u003cint\u003e p(new int(42));\n    std::cout \u003c\u003c *p;\n} // p is deleted here, no memory leaked"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "{\n    std::auto_ptr\u003cint\u003e p(new int(42));\n    std::cout \u003c\u003c *p;\n} // p is deleted here, no memory leaked",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522028551,
        "id": "6f961786-2dfc-4658-8f01-b8b60d04c133",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522028551,
        "parent_id": "29119bc8-4566-43ee-b828-f821874cecfd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "but allows only one owner:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "but allows only one owner:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522028552,
        "id": "9aac94c2-eca1-4edf-92c0-fc290e5bf459",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550801040000,
        "parent_id": "29119bc8-4566-43ee-b828-f821874cecfd",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "std::auto_ptr\u003cX\u003e px = ...;\nstd::auto_ptr\u003cX\u003e py = px; \n  // px is now empty"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "std::auto_ptr\u003cX\u003e px = ...;\nstd::auto_ptr\u003cX\u003e py = px; \n  // px is now empty",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522028552,
        "id": "2673081c-4035-4a1f-965d-8d5f845854b0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522028552,
        "parent_id": "29119bc8-4566-43ee-b828-f821874cecfd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This allows to use std::auto_ptr to keep ownership explicit and unique at the danger of losing ownership unintended:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This allows to use std::auto_ptr to keep ownership explicit and unique at the danger of losing ownership unintended:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522028552,
        "id": "a433b33b-48c9-4872-9f16-fa4b590d951c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550801040000,
        "parent_id": "29119bc8-4566-43ee-b828-f821874cecfd",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "void f(std::auto_ptr\u003cX\u003e ) {\n    // assumes ownership of X\n    // deletes it at end of scope\n};\n\nstd::auto_ptr\u003cX\u003e px = ...;\nf(px); // f acquires ownership of underlying X\n       // px is now empty\npx-\u003efoo(); // NPE!\n// px.~auto_ptr() does NOT delete"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "void f(std::auto_ptr\u003cX\u003e ) {\n    // assumes ownership of X\n    // deletes it at end of scope\n};\n\nstd::auto_ptr\u003cX\u003e px = ...;\nf(px); // f acquires ownership of underlying X\n       // px is now empty\npx-\u003efoo(); // NPE!\n// px.~auto_ptr() does NOT delete",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522028552,
        "id": "05c2dab6-9053-47c3-a4a1-cc8d13b9ff4e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522028552,
        "parent_id": "29119bc8-4566-43ee-b828-f821874cecfd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The transfer of ownership happened in the “copy” constructor. "
            ],
            [
              "auto_ptr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "’s copy constructor and copy assignment operator take their operands by non-"
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " reference so that they could be modified. An example implementation might be:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The transfer of ownership happened in the “copy” constructor. "
          },
          {
            "Text": "auto_ptr",
            "AttrFlags": 2
          },
          {
            "Text": "’s copy constructor and copy assignment operator take their operands by non-"
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": " reference so that they could be modified. An example implementation might be:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522028552,
        "id": "c89b2b62-6ca1-4531-93b5-a55a671fbe7c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550801040000,
        "parent_id": "29119bc8-4566-43ee-b828-f821874cecfd",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "template \u003ctypename T\u003e\nclass auto_ptr {\n    T* ptr;\npublic:\n    auto_ptr(auto_ptr\u0026 rhs)\n    : ptr(rhs.release())\n    { }\n\n    auto_ptr\u0026 operator=(auto_ptr\u0026 rhs) {\n        reset(rhs.release());\n        return *this;\n    }\n\n    T* release() {\n        T* tmp = ptr;\n        ptr = nullptr;\n        return tmp;\n    }\n\n    void reset(T* tmp = nullptr) {\n        if (ptr != tmp) {\n            delete ptr;\n            ptr = tmp;\n        }\n    }\n\n    /* other functions ... */\n};"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "template \u003ctypename T\u003e\nclass auto_ptr {\n    T* ptr;\npublic:\n    auto_ptr(auto_ptr\u0026 rhs)\n    : ptr(rhs.release())\n    { }\n\n    auto_ptr\u0026 operator=(auto_ptr\u0026 rhs) {\n        reset(rhs.release());\n        return *this;\n    }\n\n    T* release() {\n        T* tmp = ptr;\n        ptr = nullptr;\n        return tmp;\n    }\n\n    void reset(T* tmp = nullptr) {\n        if (ptr != tmp) {\n            delete ptr;\n            ptr = tmp;\n        }\n    }\n\n    /* other functions ... */\n};",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522028552,
        "id": "0173546e-a40f-43e7-afec-c9b913265c5b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522028552,
        "parent_id": "29119bc8-4566-43ee-b828-f821874cecfd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This breaks copy semantics, which require that copying an object leaves you with two equivalent versions of it. For any copyable type, "
            ],
            [
              "T",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", I should be able to write:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This breaks copy semantics, which require that copying an object leaves you with two equivalent versions of it. For any copyable type, "
          },
          {
            "Text": "T",
            "AttrFlags": 2
          },
          {
            "Text": ", I should be able to write:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522028552,
        "id": "d4a88fd9-02f7-4a86-97e8-9bb88ac502bf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550801100000,
        "parent_id": "29119bc8-4566-43ee-b828-f821874cecfd",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "T a = ...;\nT b(a);\nassert(b == a);"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "T a = ...;\nT b(a);\nassert(b == a);",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522028553,
        "id": "88fabe14-c1e5-4271-a4a7-a4f8da4dcab6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522028553,
        "parent_id": "29119bc8-4566-43ee-b828-f821874cecfd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "But for "
            ],
            [
              "auto_ptr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", this is not the case. As a result, it is not safe to put "
            ],
            [
              "auto_ptr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "s in containers."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "But for "
          },
          {
            "Text": "auto_ptr",
            "AttrFlags": 2
          },
          {
            "Text": ", this is not the case. As a result, it is not safe to put "
          },
          {
            "Text": "auto_ptr",
            "AttrFlags": 2
          },
          {
            "Text": "s in containers."
          }
        ]
      }
    ],
    "title": "Unique ownership without move semantics std::auto_ptr",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}