{
  "ID": "0bebbc99-5e29-496a-b04c-bb82009be6e4",
  "Root": {
    "alive": true,
    "content": [
      "075f6763-5956-4a8d-8133-d23855bc1bfa",
      "16f46b44-3047-44fb-bc86-731bff8c2566",
      "7c10dffe-b36e-4b21-b538-c6fbba1b6b1d",
      "406390f2-c6f6-4d51-92a8-ad5c781dd569",
      "3c12abe4-d1bb-433e-a784-c89de351a298",
      "18bfaccb-febe-40a0-a641-78e617af994f",
      "63568952-50ac-4198-a523-51d6337d2400",
      "16546ae9-e356-46b2-9bcc-00cd7321c337",
      "70f65405-c8bd-40c6-923b-6ddd4a784685",
      "34d2648b-62b7-40e8-8cdb-51104b67a20b",
      "e785ef17-ea65-49b1-9cdb-a0a33bc79e97"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550523504143,
    "id": "0bebbc99-5e29-496a-b04c-bb82009be6e4",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550523504143,
    "parent_id": "f6be37ea-b1ea-4d12-902e-1e55a74f3c28",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "050 Small Object Optimization"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523504135,
        "id": "075f6763-5956-4a8d-8133-d23855bc1bfa",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523504135,
        "parent_id": "0bebbc99-5e29-496a-b04c-bb82009be6e4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Small object optimization is a technique which is used within low level data structures, for instance the "
            ],
            [
              "std::string",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (Sometimes referred to as Short/Small String Optimization). It's meant to use stack space as a buffer instead of some allocated memory in case the content is small enough to fit within the reserved space."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Small object optimization is a technique which is used within low level data structures, for instance the "
          },
          {
            "Text": "std::string",
            "AttrFlags": 2
          },
          {
            "Text": " (Sometimes referred to as Short/Small String Optimization). It's meant to use stack space as a buffer instead of some allocated memory in case the content is small enough to fit within the reserved space."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523504138,
        "id": "16f46b44-3047-44fb-bc86-731bff8c2566",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523504138,
        "parent_id": "0bebbc99-5e29-496a-b04c-bb82009be6e4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "By adding extra memory overhead and extra calculations, it tries to prevent an expensive heap allocation. The benefits of this technique are dependent on the usage and can even hurt performance if incorrectly used."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "By adding extra memory overhead and extra calculations, it tries to prevent an expensive heap allocation. The benefits of this technique are dependent on the usage and can even hurt performance if incorrectly used."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523504138,
        "id": "7c10dffe-b36e-4b21-b538-c6fbba1b6b1d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523504138,
        "parent_id": "0bebbc99-5e29-496a-b04c-bb82009be6e4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Example"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Example"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523504138,
        "id": "406390f2-c6f6-4d51-92a8-ad5c781dd569",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523504138,
        "parent_id": "0bebbc99-5e29-496a-b04c-bb82009be6e4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A very naive way of implementing a string with this optimization would the following:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A very naive way of implementing a string with this optimization would the following:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523504138,
        "id": "3c12abe4-d1bb-433e-a784-c89de351a298",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523504138,
        "parent_id": "0bebbc99-5e29-496a-b04c-bb82009be6e4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003ccstring\u003e\n\nclass string final\n{\n    constexpr static auto SMALL_BUFFER_SIZE = 16;\n\n    bool _isAllocated{false};                       ///\u003c Remember if we allocated memory\n    char *_buffer{nullptr};                         ///\u003c Pointer to the buffer we are using\n    char _smallBuffer[SMALL_BUFFER_SIZE]= {'\\0'};   ///\u003c Stack space used for SMALL OBJECT OPTIMIZATION\n\npublic:\n    ~string()\n    {\n        if (_isAllocated)\n            delete [] _buffer;\n    }        \n\n    explicit string(const char *cStyleString)\n    {\n        auto stringSize = std::strlen(cStyleString);\n        _isAllocated = (stringSize \u003e SMALL_BUFFER_SIZE);\n        if (_isAllocated)\n            _buffer = new char[stringSize];\n        else\n            _buffer = \u0026_smallBuffer[0];\n        std::strcpy(_buffer, \u0026cStyleString[0]);\n    }\n\n    string(string \u0026\u0026rhs)\n       : _isAllocated(rhs._isAllocated)\n       , _buffer(rhs._buffer)\n       , _smallBuffer(rhs._smallBuffer) //\u003c Not needed if allocated\n    {\n        if (_isAllocated)\n        {\n           // Prevent double deletion of the memory\n           rhs._buffer = nullptr;\n        }\n        else\n        {\n            // Copy over data\n            std::strcpy(_smallBuffer, rhs._smallBuffer);\n            _buffer = \u0026_smallBuffer[0];\n        }\n    }\n    // Other methods, including other constructors, copy constructor,\n    // assignment operators have been omitted for readability\n};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003ccstring\u003e\n\nclass string final\n{\n    constexpr static auto SMALL_BUFFER_SIZE = 16;\n\n    bool _isAllocated{false};                       ///\u003c Remember if we allocated memory\n    char *_buffer{nullptr};                         ///\u003c Pointer to the buffer we are using\n    char _smallBuffer[SMALL_BUFFER_SIZE]= {'\\0'};   ///\u003c Stack space used for SMALL OBJECT OPTIMIZATION\n\npublic:\n    ~string()\n    {\n        if (_isAllocated)\n            delete [] _buffer;\n    }        \n\n    explicit string(const char *cStyleString)\n    {\n        auto stringSize = std::strlen(cStyleString);\n        _isAllocated = (stringSize \u003e SMALL_BUFFER_SIZE);\n        if (_isAllocated)\n            _buffer = new char[stringSize];\n        else\n            _buffer = \u0026_smallBuffer[0];\n        std::strcpy(_buffer, \u0026cStyleString[0]);\n    }\n\n    string(string \u0026\u0026rhs)\n       : _isAllocated(rhs._isAllocated)\n       , _buffer(rhs._buffer)\n       , _smallBuffer(rhs._smallBuffer) //\u003c Not needed if allocated\n    {\n        if (_isAllocated)\n        {\n           // Prevent double deletion of the memory\n           rhs._buffer = nullptr;\n        }\n        else\n        {\n            // Copy over data\n            std::strcpy(_smallBuffer, rhs._smallBuffer);\n            _buffer = \u0026_smallBuffer[0];\n        }\n    }\n    // Other methods, including other constructors, copy constructor,\n    // assignment operators have been omitted for readability\n};",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523504138,
        "id": "18bfaccb-febe-40a0-a641-78e617af994f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523504138,
        "parent_id": "0bebbc99-5e29-496a-b04c-bb82009be6e4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As you can see in the code above, some extra complexity has been added in order to prevent some "
            ],
            [
              "new",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "delete",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " operations. On top of this, the class has a larger memory footprint which might not be used except in a couple of cases."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "As you can see in the code above, some extra complexity has been added in order to prevent some "
          },
          {
            "Text": "new",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "delete",
            "AttrFlags": 2
          },
          {
            "Text": " operations. On top of this, the class has a larger memory footprint which might not be used except in a couple of cases."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523504140,
        "id": "63568952-50ac-4198-a523-51d6337d2400",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523504140,
        "parent_id": "0bebbc99-5e29-496a-b04c-bb82009be6e4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Often it is tried to encode the bool value "
            ],
            [
              "_isAllocated",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", within the pointer "
            ],
            [
              "_buffer",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " with "
            ],
            [
              "bit manipulation",
              [
                [
                  "a",
                  "https://stackoverflow.com/documentation/c%2b%2b/3016/bit-manipulation"
                ]
              ]
            ],
            [
              " to reduce the size of a single instance (intel 64 bit: Could reduce size by 8 byte). An optimization which is only possible when its known what the alignment rules of the platform is."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Often it is tried to encode the bool value "
          },
          {
            "Text": "_isAllocated",
            "AttrFlags": 2
          },
          {
            "Text": ", within the pointer "
          },
          {
            "Text": "_buffer",
            "AttrFlags": 2
          },
          {
            "Text": " with "
          },
          {
            "Text": "bit manipulation",
            "Link": "https://stackoverflow.com/documentation/c%2b%2b/3016/bit-manipulation"
          },
          {
            "Text": " to reduce the size of a single instance (intel 64 bit: Could reduce size by 8 byte). An optimization which is only possible when its known what the alignment rules of the platform is."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523504141,
        "id": "16546ae9-e356-46b2-9bcc-00cd7321c337",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523504141,
        "parent_id": "0bebbc99-5e29-496a-b04c-bb82009be6e4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When to use?"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "When to use?"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523504142,
        "id": "70f65405-c8bd-40c6-923b-6ddd4a784685",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523504142,
        "parent_id": "0bebbc99-5e29-496a-b04c-bb82009be6e4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As this optimization adds a lot of complexity, it is not recommended to use this optimization on every single class. It will often be encountered in commonly used, low-level data structures. In common C++11 "
            ],
            [
              "standard library",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " implementations one can find usages in "
            ],
            [
              "std::basic_string\u003c\u003e",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://stackoverflow.com/documentation/c%2b%2b/488/stdstring"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "std::function\u003c\u003e",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://stackoverflow.com/documentation/c%2b%2b/2294/stdfunction-to-wrap-any-element-that-is-callable"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "As this optimization adds a lot of complexity, it is not recommended to use this optimization on every single class. It will often be encountered in commonly used, low-level data structures. In common C++11 "
          },
          {
            "Text": "standard library",
            "AttrFlags": 2
          },
          {
            "Text": " implementations one can find usages in "
          },
          {
            "Text": "std::basic_string\u003c\u003e",
            "AttrFlags": 2,
            "Link": "https://stackoverflow.com/documentation/c%2b%2b/488/stdstring"
          },
          {
            "Text": " and "
          },
          {
            "Text": "std::function\u003c\u003e",
            "AttrFlags": 2,
            "Link": "https://stackoverflow.com/documentation/c%2b%2b/2294/stdfunction-to-wrap-any-element-that-is-callable"
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523504142,
        "id": "34d2648b-62b7-40e8-8cdb-51104b67a20b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523504142,
        "parent_id": "0bebbc99-5e29-496a-b04c-bb82009be6e4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As this optimization only prevents memory allocations when the stored data is smaller than the buffer, it will only give benefits if the class is often used with small data."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "As this optimization only prevents memory allocations when the stored data is smaller than the buffer, it will only give benefits if the class is often used with small data."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523504143,
        "id": "e785ef17-ea65-49b1-9cdb-a0a33bc79e97",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523504143,
        "parent_id": "0bebbc99-5e29-496a-b04c-bb82009be6e4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A final drawback of this optimization is that extra effort is required when moving the buffer, making the move-operation more expensive than when the buffer would not be used. This is especially true when the buffer contains a non-POD type."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A final drawback of this optimization is that extra effort is required when moving the buffer, making the move-operation more expensive than when the buffer would not be used. This is especially true when the buffer contains a non-POD type."
          }
        ]
      }
    ],
    "title": "050 Small Object Optimization"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}