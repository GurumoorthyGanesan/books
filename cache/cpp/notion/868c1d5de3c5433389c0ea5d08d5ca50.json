{
  "ID": "868c1d5d-e3c5-4333-89c0-ea5d08d5ca50",
  "Root": {
    "alive": true,
    "content": [
      "806055e1-f32d-4c05-a0e9-975be258aa72",
      "e3637cc4-511f-42fc-8c49-d2db67fa212a",
      "d959dc40-dcb7-40ed-a53f-812d84b2ae5b",
      "1ede429a-c58b-4fac-9a0a-1a4e844eaff5",
      "155dc948-2cba-4e1a-85b4-b9d70479c174",
      "19dffda4-d96c-4cb7-85e3-d67abafe1c97",
      "f43117b0-699e-453e-965a-1b1e3f7edece",
      "b301e4ba-b933-4318-870b-f95ac2fff41d",
      "a8df7ab3-1cf8-4386-9d6e-a25b2e4347f0",
      "941c4d67-7c34-4460-9c94-8925fabcd7fd",
      "6d91cb83-7484-4d35-a561-533405d7e47f",
      "e04efe2f-8613-459d-b478-0b08b10763c0",
      "1c7dfc1e-d5a3-49bc-82e4-9a30118284af",
      "b52ac5f2-5853-4e44-a472-8f0feb78a890",
      "6c446b95-6633-49de-9d28-06f753ae5851",
      "4ec4f3c8-94d2-441a-8a8b-6ad4542b49d4",
      "f0470c1d-61e0-4f4c-9223-b65513808cf2",
      "491051cc-9f9a-445b-a21e-203066758fa9",
      "eeb1a642-e9a9-4f88-88c3-a26daaa0bae1",
      "f2d73ba8-c98e-4100-82d1-0d2cfc3a484c",
      "d1264c0c-3f46-4dd2-a4b3-9e68ba84f6ee",
      "18277463-69a6-4414-905d-425a856feeea"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550521952586,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "868c1d5d-e3c5-4333-89c0-ea5d08d5ca50",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552347780000,
    "parent_id": "94bfa868-4e02-4b90-841b-817c34132524",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Variadic template data structures"
        ]
      ]
    },
    "type": "page",
    "version": 9,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521952579,
        "id": "806055e1-f32d-4c05-a0e9-975be258aa72",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521952579,
        "parent_id": "868c1d5d-e3c5-4333-89c0-ea5d08d5ca50",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It is often useful to define classes or structures that have a variable number and type of data members which are defined at compile time. The canonical example is "
            ],
            [
              "std::tuple",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", but sometimes is it is necessary to define your own custom structures. Here is an example that defines the structure using compounding (rather than inheritance as with "
            ],
            [
              "std::tuple",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Start with the general (empty) definition, which also serves as the base-case for recrusion termination in the later specialisation:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It is often useful to define classes or structures that have a variable number and type of data members which are defined at compile time. The canonical example is "
          },
          {
            "Text": "std::tuple",
            "AttrFlags": 2
          },
          {
            "Text": ", but sometimes is it is necessary to define your own custom structures. Here is an example that defines the structure using compounding (rather than inheritance as with "
          },
          {
            "Text": "std::tuple",
            "AttrFlags": 2
          },
          {
            "Text": ". Start with the general (empty) definition, which also serves as the base-case for recrusion termination in the later specialisation:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521952581,
        "id": "e3637cc4-511f-42fc-8c49-d2db67fa212a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552347780000,
        "parent_id": "868c1d5d-e3c5-4333-89c0-ea5d08d5ca50",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "template\u003ctypename ... T\u003e\nstruct DataStructure {};"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "template\u003ctypename ... T\u003e\nstruct DataStructure {};",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521952581,
        "id": "d959dc40-dcb7-40ed-a53f-812d84b2ae5b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521952581,
        "parent_id": "868c1d5d-e3c5-4333-89c0-ea5d08d5ca50",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This already allows us to define an empty structure, "
            ],
            [
              "DataStructure\u003c\u003e data",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", albeit that isn’t very useful yet."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This already allows us to define an empty structure, "
          },
          {
            "Text": "DataStructure\u003c\u003e data",
            "AttrFlags": 2
          },
          {
            "Text": ", albeit that isn’t very useful yet."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521952581,
        "id": "1ede429a-c58b-4fac-9a0a-1a4e844eaff5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521952581,
        "parent_id": "868c1d5d-e3c5-4333-89c0-ea5d08d5ca50",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Next comes the recursive case specialisation:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Next comes the recursive case specialisation:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521952581,
        "id": "155dc948-2cba-4e1a-85b4-b9d70479c174",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552347780000,
        "parent_id": "868c1d5d-e3c5-4333-89c0-ea5d08d5ca50",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "template\u003ctypename T, typename ... Rest\u003e\nstruct DataStructure\u003cT, Rest ...\u003e\n{\n    DataStructure(const T\u0026 first, const Rest\u0026 ... rest)\n        : first(first)\n        , rest(rest...)\n    {}\n    \n    T first;                                \n    DataStructure\u003cRest ... \u003e rest;\n};"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "template\u003ctypename T, typename ... Rest\u003e\nstruct DataStructure\u003cT, Rest ...\u003e\n{\n    DataStructure(const T\u0026 first, const Rest\u0026 ... rest)\n        : first(first)\n        , rest(rest...)\n    {}\n    \n    T first;                                \n    DataStructure\u003cRest ... \u003e rest;\n};",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521952582,
        "id": "19dffda4-d96c-4cb7-85e3-d67abafe1c97",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521952582,
        "parent_id": "868c1d5d-e3c5-4333-89c0-ea5d08d5ca50",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This is now sufficient for us to create arbitrary data structures, like "
            ],
            [
              "DataStructure\u003cint, float, std::string\u003e data(1, 2.1, \"hello\")",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This is now sufficient for us to create arbitrary data structures, like "
          },
          {
            "Text": "DataStructure\u003cint, float, std::string\u003e data(1, 2.1, \"hello\")",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521952582,
        "id": "f43117b0-699e-453e-965a-1b1e3f7edece",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521952582,
        "parent_id": "868c1d5d-e3c5-4333-89c0-ea5d08d5ca50",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "So what’s going on? First, note that this is a specialisation whose requirement is that at least one variadic template parameter (namely "
            ],
            [
              "T",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " above) exists, whilst not caring about the specific makeup of the pack "
            ],
            [
              "Rest",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Knowing that "
            ],
            [
              "T",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " exists allows the definition of its data member, "
            ],
            [
              "first",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". The rest of the data is recursively packaged as "
            ],
            [
              "DataStructure\u003cRest ... \u003e rest",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". The constructor initiates both of those members, including a recursive constructor call to the "
            ],
            [
              "rest",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " member."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "So what’s going on? First, note that this is a specialisation whose requirement is that at least one variadic template parameter (namely "
          },
          {
            "Text": "T",
            "AttrFlags": 2
          },
          {
            "Text": " above) exists, whilst not caring about the specific makeup of the pack "
          },
          {
            "Text": "Rest",
            "AttrFlags": 2
          },
          {
            "Text": ". Knowing that "
          },
          {
            "Text": "T",
            "AttrFlags": 2
          },
          {
            "Text": " exists allows the definition of its data member, "
          },
          {
            "Text": "first",
            "AttrFlags": 2
          },
          {
            "Text": ". The rest of the data is recursively packaged as "
          },
          {
            "Text": "DataStructure\u003cRest ... \u003e rest",
            "AttrFlags": 2
          },
          {
            "Text": ". The constructor initiates both of those members, including a recursive constructor call to the "
          },
          {
            "Text": "rest",
            "AttrFlags": 2
          },
          {
            "Text": " member."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521952583,
        "id": "b301e4ba-b933-4318-870b-f95ac2fff41d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521952583,
        "parent_id": "868c1d5d-e3c5-4333-89c0-ea5d08d5ca50",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To understand this better, we can work through an example: suppose you have a declaration "
            ],
            [
              "DataStructure\u003cint, float\u003e data",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". The declaration first matches against the specialisation, yielding a structure with "
            ],
            [
              "int first",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "DataStructure\u003cfloat\u003e rest",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " data members. The "
            ],
            [
              "rest",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " definition again matches this specialisation, creating its own "
            ],
            [
              "float first",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "DataStructure\u003c\u003e rest",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " members. Finally this last "
            ],
            [
              "rest",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " matches against the base-case defintion, producing an empty structure."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To understand this better, we can work through an example: suppose you have a declaration "
          },
          {
            "Text": "DataStructure\u003cint, float\u003e data",
            "AttrFlags": 2
          },
          {
            "Text": ". The declaration first matches against the specialisation, yielding a structure with "
          },
          {
            "Text": "int first",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "DataStructure\u003cfloat\u003e rest",
            "AttrFlags": 2
          },
          {
            "Text": " data members. The "
          },
          {
            "Text": "rest",
            "AttrFlags": 2
          },
          {
            "Text": " definition again matches this specialisation, creating its own "
          },
          {
            "Text": "float first",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "DataStructure\u003c\u003e rest",
            "AttrFlags": 2
          },
          {
            "Text": " members. Finally this last "
          },
          {
            "Text": "rest",
            "AttrFlags": 2
          },
          {
            "Text": " matches against the base-case defintion, producing an empty structure."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521952583,
        "id": "a8df7ab3-1cf8-4386-9d6e-a25b2e4347f0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521952583,
        "parent_id": "868c1d5d-e3c5-4333-89c0-ea5d08d5ca50",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You can visualise this as follows:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You can visualise this as follows:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521952583,
        "id": "941c4d67-7c34-4460-9c94-8925fabcd7fd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521952583,
        "parent_id": "868c1d5d-e3c5-4333-89c0-ea5d08d5ca50",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "DataStructure\u003cint, float\u003e\n   -\u003e int first\n   -\u003e DataStructure\u003cfloat\u003e rest\n         -\u003e float first\n         -\u003e DataStructure\u003c\u003e rest\n              -\u003e (empty)"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "DataStructure\u003cint, float\u003e\n   -\u003e int first\n   -\u003e DataStructure\u003cfloat\u003e rest\n         -\u003e float first\n         -\u003e DataStructure\u003c\u003e rest\n              -\u003e (empty)",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521952583,
        "id": "6d91cb83-7484-4d35-a561-533405d7e47f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521952583,
        "parent_id": "868c1d5d-e3c5-4333-89c0-ea5d08d5ca50",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Now we have the data structure, but its not terribly useful yet as we cannot easily access the individual data elements (for example to access the last member of "
            ],
            [
              "DataStructure\u003cint, float, std::string\u003e data",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " we would have to use "
            ],
            [
              "data.rest.rest.first",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", which is not exactly user-friendly). So we add a "
            ],
            [
              "get",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method to it (only needed in the specialisation as the base-case structure has no data to "
            ],
            [
              "get",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "):"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Now we have the data structure, but its not terribly useful yet as we cannot easily access the individual data elements (for example to access the last member of "
          },
          {
            "Text": "DataStructure\u003cint, float, std::string\u003e data",
            "AttrFlags": 2
          },
          {
            "Text": " we would have to use "
          },
          {
            "Text": "data.rest.rest.first",
            "AttrFlags": 2
          },
          {
            "Text": ", which is not exactly user-friendly). So we add a "
          },
          {
            "Text": "get",
            "AttrFlags": 2
          },
          {
            "Text": " method to it (only needed in the specialisation as the base-case structure has no data to "
          },
          {
            "Text": "get",
            "AttrFlags": 2
          },
          {
            "Text": "):"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521952583,
        "id": "e04efe2f-8613-459d-b478-0b08b10763c0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552347780000,
        "parent_id": "868c1d5d-e3c5-4333-89c0-ea5d08d5ca50",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "template\u003ctypename T, typename ... Rest\u003e\nstruct DataStructure\u003cT, Rest ...\u003e\n{\n    ...\n    template\u003csize_t idx\u003e\n    auto get()\n    {\n        return GetHelper\u003cidx, DataStructure\u003cT,Rest...\u003e\u003e::get(*this);\n    }\n    ...\n};"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "template\u003ctypename T, typename ... Rest\u003e\nstruct DataStructure\u003cT, Rest ...\u003e\n{\n    ...\n    template\u003csize_t idx\u003e\n    auto get()\n    {\n        return GetHelper\u003cidx, DataStructure\u003cT,Rest...\u003e\u003e::get(*this);\n    }\n    ...\n};",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521952584,
        "id": "1c7dfc1e-d5a3-49bc-82e4-9a30118284af",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521952584,
        "parent_id": "868c1d5d-e3c5-4333-89c0-ea5d08d5ca50",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As you can see this "
            ],
            [
              "get",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " member function is itself templated - this time on the index of the member that is needed (so usage can be things like "
            ],
            [
              "data.get\u003c1\u003e()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", similar to "
            ],
            [
              "std::tuple",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "). The actual work is done by a static function in a helper class, "
            ],
            [
              "GetHelper",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". The reason we can’t define the required functionality directly in "
            ],
            [
              "DataStructure",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "‘s "
            ],
            [
              "get",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is because (as we will shortly see) we would need to specialise on "
            ],
            [
              "idx",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " - but it isn’t possible to specialise a template member function without specialising the containing class template. Note also the use of a C++14-style "
            ],
            [
              "auto",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " here makes our lives significantly simpler as otherwise we would need quite a complicated expression for the return type."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "As you can see this "
          },
          {
            "Text": "get",
            "AttrFlags": 2
          },
          {
            "Text": " member function is itself templated - this time on the index of the member that is needed (so usage can be things like "
          },
          {
            "Text": "data.get\u003c1\u003e()",
            "AttrFlags": 2
          },
          {
            "Text": ", similar to "
          },
          {
            "Text": "std::tuple",
            "AttrFlags": 2
          },
          {
            "Text": "). The actual work is done by a static function in a helper class, "
          },
          {
            "Text": "GetHelper",
            "AttrFlags": 2
          },
          {
            "Text": ". The reason we can’t define the required functionality directly in "
          },
          {
            "Text": "DataStructure",
            "AttrFlags": 2
          },
          {
            "Text": "‘s "
          },
          {
            "Text": "get",
            "AttrFlags": 2
          },
          {
            "Text": " is because (as we will shortly see) we would need to specialise on "
          },
          {
            "Text": "idx",
            "AttrFlags": 2
          },
          {
            "Text": " - but it isn’t possible to specialise a template member function without specialising the containing class template. Note also the use of a C++14-style "
          },
          {
            "Text": "auto",
            "AttrFlags": 2
          },
          {
            "Text": " here makes our lives significantly simpler as otherwise we would need quite a complicated expression for the return type."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521952584,
        "id": "b52ac5f2-5853-4e44-a472-8f0feb78a890",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521952584,
        "parent_id": "868c1d5d-e3c5-4333-89c0-ea5d08d5ca50",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "So on to the helper class. This time we will need an empty forward declaration and two specialisations. First the declaration:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "So on to the helper class. This time we will need an empty forward declaration and two specialisations. First the declaration:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521952584,
        "id": "6c446b95-6633-49de-9d28-06f753ae5851",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552347780000,
        "parent_id": "868c1d5d-e3c5-4333-89c0-ea5d08d5ca50",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "template\u003csize_t idx, typename T\u003e\nstruct GetHelper;"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "template\u003csize_t idx, typename T\u003e\nstruct GetHelper;",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521952585,
        "id": "4ec4f3c8-94d2-441a-8a8b-6ad4542b49d4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521952585,
        "parent_id": "868c1d5d-e3c5-4333-89c0-ea5d08d5ca50",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Now the base-case (when "
            ],
            [
              "idx==0",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "). In this case we just return the "
            ],
            [
              "first",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " member:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Now the base-case (when "
          },
          {
            "Text": "idx==0",
            "AttrFlags": 2
          },
          {
            "Text": "). In this case we just return the "
          },
          {
            "Text": "first",
            "AttrFlags": 2
          },
          {
            "Text": " member:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521952585,
        "id": "f0470c1d-61e0-4f4c-9223-b65513808cf2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552347780000,
        "parent_id": "868c1d5d-e3c5-4333-89c0-ea5d08d5ca50",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "template\u003ctypename T, typename ... Rest\u003e\nstruct GetHelper\u003c0, DataStructure\u003cT, Rest ... \u003e\u003e\n{\n    static T get(DataStructure\u003cT, Rest...\u003e\u0026 data)\n    {\n        return data.first;\n    }\n};"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "template\u003ctypename T, typename ... Rest\u003e\nstruct GetHelper\u003c0, DataStructure\u003cT, Rest ... \u003e\u003e\n{\n    static T get(DataStructure\u003cT, Rest...\u003e\u0026 data)\n    {\n        return data.first;\n    }\n};",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521952585,
        "id": "491051cc-9f9a-445b-a21e-203066758fa9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521952585,
        "parent_id": "868c1d5d-e3c5-4333-89c0-ea5d08d5ca50",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In the recursive case, we decrement "
            ],
            [
              "idx",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and invoke the "
            ],
            [
              "GetHelper",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " for the "
            ],
            [
              "rest",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " member:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In the recursive case, we decrement "
          },
          {
            "Text": "idx",
            "AttrFlags": 2
          },
          {
            "Text": " and invoke the "
          },
          {
            "Text": "GetHelper",
            "AttrFlags": 2
          },
          {
            "Text": " for the "
          },
          {
            "Text": "rest",
            "AttrFlags": 2
          },
          {
            "Text": " member:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521952585,
        "id": "eeb1a642-e9a9-4f88-88c3-a26daaa0bae1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552347780000,
        "parent_id": "868c1d5d-e3c5-4333-89c0-ea5d08d5ca50",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "template\u003csize_t idx, typename T, typename ... Rest\u003e\nstruct GetHelper\u003cidx, DataStructure\u003cT, Rest ... \u003e\u003e\n{\n    static auto get(DataStructure\u003cT, Rest...\u003e\u0026 data)\n    {\n        return GetHelper\u003cidx-1, DataStructure\u003cRest ...\u003e\u003e::get(data.rest);\n    }\n};"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "template\u003csize_t idx, typename T, typename ... Rest\u003e\nstruct GetHelper\u003cidx, DataStructure\u003cT, Rest ... \u003e\u003e\n{\n    static auto get(DataStructure\u003cT, Rest...\u003e\u0026 data)\n    {\n        return GetHelper\u003cidx-1, DataStructure\u003cRest ...\u003e\u003e::get(data.rest);\n    }\n};",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521952586,
        "id": "f2d73ba8-c98e-4100-82d1-0d2cfc3a484c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521952586,
        "parent_id": "868c1d5d-e3c5-4333-89c0-ea5d08d5ca50",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To work through an example, suppose we have "
            ],
            [
              "DataStructure\u003cint, float\u003e data",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and we need "
            ],
            [
              "data.get\u003c1\u003e()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". This invokes "
            ],
            [
              "GetHelper\u003c1, DataStructure\u003cint, float\u003e\u003e::get(data)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (the 2nd specialisation), which in turn invokes "
            ],
            [
              "GetHelper\u003c0, DataStructure\u003cfloat\u003e\u003e::get(data.rest)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", which finally returns (by the 1st specialisation as now "
            ],
            [
              "idx",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is 0) "
            ],
            [
              "data.rest.first",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To work through an example, suppose we have "
          },
          {
            "Text": "DataStructure\u003cint, float\u003e data",
            "AttrFlags": 2
          },
          {
            "Text": " and we need "
          },
          {
            "Text": "data.get\u003c1\u003e()",
            "AttrFlags": 2
          },
          {
            "Text": ". This invokes "
          },
          {
            "Text": "GetHelper\u003c1, DataStructure\u003cint, float\u003e\u003e::get(data)",
            "AttrFlags": 2
          },
          {
            "Text": " (the 2nd specialisation), which in turn invokes "
          },
          {
            "Text": "GetHelper\u003c0, DataStructure\u003cfloat\u003e\u003e::get(data.rest)",
            "AttrFlags": 2
          },
          {
            "Text": ", which finally returns (by the 1st specialisation as now "
          },
          {
            "Text": "idx",
            "AttrFlags": 2
          },
          {
            "Text": " is 0) "
          },
          {
            "Text": "data.rest.first",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521952586,
        "id": "d1264c0c-3f46-4dd2-a4b3-9e68ba84f6ee",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521952586,
        "parent_id": "868c1d5d-e3c5-4333-89c0-ea5d08d5ca50",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "So that’s it! Here is the whole functioning code, with some example use in the "
            ],
            [
              "main",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " function:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "So that’s it! Here is the whole functioning code, with some example use in the "
          },
          {
            "Text": "main",
            "AttrFlags": 2
          },
          {
            "Text": " function:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521952586,
        "id": "18277463-69a6-4414-905d-425a856feeea",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552347780000,
        "parent_id": "868c1d5d-e3c5-4333-89c0-ea5d08d5ca50",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "#include \u003ciostream\u003e\n\ntemplate\u003csize_t idx, typename T\u003e\nstruct GetHelper;\n\ntemplate\u003ctypename ... T\u003e\nstruct DataStructure\n{\n};\n\ntemplate\u003ctypename T, typename ... Rest\u003e\nstruct DataStructure\u003cT, Rest ...\u003e\n{\n    DataStructure(const T\u0026 first, const Rest\u0026 ... rest)\n        : first(first)\n        , rest(rest...)\n    {}\n    \n    T first;\n    DataStructure\u003cRest ... \u003e rest;\n    \n    template\u003csize_t idx\u003e\n    auto get()\n    {\n        return GetHelper\u003cidx, DataStructure\u003cT,Rest...\u003e\u003e::get(*this);\n    }\n};\n\ntemplate\u003ctypename T, typename ... Rest\u003e\nstruct GetHelper\u003c0, DataStructure\u003cT, Rest ... \u003e\u003e\n{\n    static T get(DataStructure\u003cT, Rest...\u003e\u0026 data)\n    {\n        return data.first;\n    }\n};\n\ntemplate\u003csize_t idx, typename T, typename ... Rest\u003e\nstruct GetHelper\u003cidx, DataStructure\u003cT, Rest ... \u003e\u003e\n{\n    static auto get(DataStructure\u003cT, Rest...\u003e\u0026 data)\n    {\n        return GetHelper\u003cidx-1, DataStructure\u003cRest ...\u003e\u003e::get(data.rest);\n    }\n};\n\nint main()\n{\n    DataStructure\u003cint, float, std::string\u003e data(1, 2.1, \"Hello\");\n        \n    std::cout \u003c\u003c data.get\u003c0\u003e() \u003c\u003c std::endl;\n    std::cout \u003c\u003c data.get\u003c1\u003e() \u003c\u003c std::endl;\n    std::cout \u003c\u003c data.get\u003c2\u003e() \u003c\u003c std::endl;\n    \n    return 0;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "#include \u003ciostream\u003e\n\ntemplate\u003csize_t idx, typename T\u003e\nstruct GetHelper;\n\ntemplate\u003ctypename ... T\u003e\nstruct DataStructure\n{\n};\n\ntemplate\u003ctypename T, typename ... Rest\u003e\nstruct DataStructure\u003cT, Rest ...\u003e\n{\n    DataStructure(const T\u0026 first, const Rest\u0026 ... rest)\n        : first(first)\n        , rest(rest...)\n    {}\n    \n    T first;\n    DataStructure\u003cRest ... \u003e rest;\n    \n    template\u003csize_t idx\u003e\n    auto get()\n    {\n        return GetHelper\u003cidx, DataStructure\u003cT,Rest...\u003e\u003e::get(*this);\n    }\n};\n\ntemplate\u003ctypename T, typename ... Rest\u003e\nstruct GetHelper\u003c0, DataStructure\u003cT, Rest ... \u003e\u003e\n{\n    static T get(DataStructure\u003cT, Rest...\u003e\u0026 data)\n    {\n        return data.first;\n    }\n};\n\ntemplate\u003csize_t idx, typename T, typename ... Rest\u003e\nstruct GetHelper\u003cidx, DataStructure\u003cT, Rest ... \u003e\u003e\n{\n    static auto get(DataStructure\u003cT, Rest...\u003e\u0026 data)\n    {\n        return GetHelper\u003cidx-1, DataStructure\u003cRest ...\u003e\u003e::get(data.rest);\n    }\n};\n\nint main()\n{\n    DataStructure\u003cint, float, std::string\u003e data(1, 2.1, \"Hello\");\n        \n    std::cout \u003c\u003c data.get\u003c0\u003e() \u003c\u003c std::endl;\n    std::cout \u003c\u003c data.get\u003c1\u003e() \u003c\u003c std::endl;\n    std::cout \u003c\u003c data.get\u003c2\u003e() \u003c\u003c std::endl;\n    \n    return 0;\n}",
        "code_language": "C++"
      }
    ],
    "title": "Variadic template data structures",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}