{
  "ID": "e16e7ebd-d0b0-4a80-9f48-5d17268ad6be",
  "Root": {
    "alive": true,
    "content": [
      "5ab9db2f-764b-4d87-868d-fc29a1ff7e61",
      "fcbaabd0-7bd4-4203-b1f0-4c88cf8fbef2",
      "a06a6b5c-d1a4-4ca4-b83f-fa4482e70f9d",
      "103b9503-7eea-4c02-b4ad-214d45ceef6e",
      "836ac4d1-cf97-4c7b-888f-b32657269344",
      "114b0ef3-50b9-4bca-8f0a-cc5cb7990aec",
      "21c48a72-35b6-42d4-bda3-e3d2a0c6c2cb",
      "0deae1c4-f54d-4651-8599-d4d5265b9ccf",
      "c762a4ea-f991-493f-9fa3-f3b7383ebb94",
      "85c597d8-e9be-425f-80b4-dbde05f96653",
      "528bbbf7-a31a-406c-8c4f-83f5d6e2aa3d",
      "57b80545-7c69-4254-a928-72b7dbb7ce3f",
      "d722fc1d-8d63-47ea-92e7-60cc8e9d5ef3"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550521948556,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "e16e7ebd-d0b0-4a80-9f48-5d17268ad6be",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552347720000,
    "parent_id": "94bfa868-4e02-4b90-841b-817c34132524",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Curiously recurring template pattern (CRTP)"
        ]
      ]
    },
    "type": "page",
    "version": 26,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521948551,
        "id": "5ab9db2f-764b-4d87-868d-fc29a1ff7e61",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521948551,
        "parent_id": "e16e7ebd-d0b0-4a80-9f48-5d17268ad6be",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "CRTP is a powerful, static alternative to virtual functions and traditional inheritance that can be used to give types properties at compile time. It works by having a base class template which takes, as one of its template parameters, the derived class. This permits it to legally perform a "
            ],
            [
              "static_cast",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " of its "
            ],
            [
              "this",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " pointer to the derived class."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "CRTP is a powerful, static alternative to virtual functions and traditional inheritance that can be used to give types properties at compile time. It works by having a base class template which takes, as one of its template parameters, the derived class. This permits it to legally perform a "
          },
          {
            "Text": "static_cast",
            "AttrFlags": 2
          },
          {
            "Text": " of its "
          },
          {
            "Text": "this",
            "AttrFlags": 2
          },
          {
            "Text": " pointer to the derived class."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521948554,
        "id": "fcbaabd0-7bd4-4203-b1f0-4c88cf8fbef2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521948554,
        "parent_id": "e16e7ebd-d0b0-4a80-9f48-5d17268ad6be",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Of course, this also means that a CRTP class must "
            ],
            [
              "always",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " be used as the base class of some other class. And the derived class must pass itself to the base class."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Of course, this also means that a CRTP class must "
          },
          {
            "Text": "always",
            "AttrFlags": 4
          },
          {
            "Text": " be used as the base class of some other class. And the derived class must pass itself to the base class."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521948554,
        "id": "a06a6b5c-d1a4-4ca4-b83f-fa4482e70f9d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521948554,
        "parent_id": "e16e7ebd-d0b0-4a80-9f48-5d17268ad6be",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Let’s say you have a set of containers that all support the functions "
            ],
            [
              "begin()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "end()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". The standard library’s requirements for containers require more functionality. We can design a CRTP base class that provides that functionality, based solely on "
            ],
            [
              "begin()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "end()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Let’s say you have a set of containers that all support the functions "
          },
          {
            "Text": "begin()",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "end()",
            "AttrFlags": 2
          },
          {
            "Text": ". The standard library’s requirements for containers require more functionality. We can design a CRTP base class that provides that functionality, based solely on "
          },
          {
            "Text": "begin()",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "end()",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521948554,
        "id": "103b9503-7eea-4c02-b4ad-214d45ceef6e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552347720000,
        "parent_id": "e16e7ebd-d0b0-4a80-9f48-5d17268ad6be",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "#include \u003citerator\u003e\ntemplate \u003ctypename Sub\u003e\nclass Container {\n  private:\n    // self() yields a reference to the derived type\n    Sub\u0026 self() { return *static_cast\u003cSub*\u003e(this); }\n    Sub const\u0026 self() const { return *static_cast\u003cSub const*\u003e(this); }\n\n  public:\n    decltype(auto) front() {\n      return *self().begin();\n    }\n\n    decltype(auto) back() {\n      return *std::prev(self().end());\n    }\n\n    decltype(auto) size() const {\n      return std::distance(self().begin(), self().end());\n    }\n\n    decltype(auto) operator[](std::size_t i) {\n      return *std::next(self().begin(), i);\n    }\n};"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "#include \u003citerator\u003e\ntemplate \u003ctypename Sub\u003e\nclass Container {\n  private:\n    // self() yields a reference to the derived type\n    Sub\u0026 self() { return *static_cast\u003cSub*\u003e(this); }\n    Sub const\u0026 self() const { return *static_cast\u003cSub const*\u003e(this); }\n\n  public:\n    decltype(auto) front() {\n      return *self().begin();\n    }\n\n    decltype(auto) back() {\n      return *std::prev(self().end());\n    }\n\n    decltype(auto) size() const {\n      return std::distance(self().begin(), self().end());\n    }\n\n    decltype(auto) operator[](std::size_t i) {\n      return *std::next(self().begin(), i);\n    }\n};",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521948555,
        "id": "836ac4d1-cf97-4c7b-888f-b32657269344",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521948555,
        "parent_id": "e16e7ebd-d0b0-4a80-9f48-5d17268ad6be",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The above class provides the functions "
            ],
            [
              "front()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "back()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "size()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", and "
            ],
            [
              "operator[]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " for any subclass which provides "
            ],
            [
              "begin()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "end()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". An example subclass is a simple dynamically allocated array:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The above class provides the functions "
          },
          {
            "Text": "front()",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "back()",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "size()",
            "AttrFlags": 2
          },
          {
            "Text": ", and "
          },
          {
            "Text": "operator[]",
            "AttrFlags": 2
          },
          {
            "Text": " for any subclass which provides "
          },
          {
            "Text": "begin()",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "end()",
            "AttrFlags": 2
          },
          {
            "Text": ". An example subclass is a simple dynamically allocated array:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521948555,
        "id": "114b0ef3-50b9-4bca-8f0a-cc5cb7990aec",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552347720000,
        "parent_id": "e16e7ebd-d0b0-4a80-9f48-5d17268ad6be",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "#include \u003cmemory\u003e\n// A dynamically allocated array\ntemplate \u003ctypename T\u003e\nclass DynArray : public Container\u003cDynArray\u003cT\u003e\u003e {\n  public:\n    using Base = Container\u003cDynArray\u003cT\u003e\u003e;\n\n    DynArray(std::size_t size)\n      : size_{size},\n      data_{std::make_unique\u003cT[]\u003e(size_)}\n    { }\n\n    T* begin() { return data_.get(); }\n    const T* begin() const { return data_.get(); }\n    T* end() { return data_.get() + size_; }\n    const T* end() const { return data_.get() + size_; }\n\n  private:\n    std::size_t size_;\n    std::unique_ptr\u003cT[]\u003e data_;\n};"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "#include \u003cmemory\u003e\n// A dynamically allocated array\ntemplate \u003ctypename T\u003e\nclass DynArray : public Container\u003cDynArray\u003cT\u003e\u003e {\n  public:\n    using Base = Container\u003cDynArray\u003cT\u003e\u003e;\n\n    DynArray(std::size_t size)\n      : size_{size},\n      data_{std::make_unique\u003cT[]\u003e(size_)}\n    { }\n\n    T* begin() { return data_.get(); }\n    const T* begin() const { return data_.get(); }\n    T* end() { return data_.get() + size_; }\n    const T* end() const { return data_.get() + size_; }\n\n  private:\n    std::size_t size_;\n    std::unique_ptr\u003cT[]\u003e data_;\n};",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521948555,
        "id": "21c48a72-35b6-42d4-bda3-e3d2a0c6c2cb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521948555,
        "parent_id": "e16e7ebd-d0b0-4a80-9f48-5d17268ad6be",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Users of the "
            ],
            [
              "DynArray",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " class can use the interfaces provided by the CRTP base class easily as follows:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Users of the "
          },
          {
            "Text": "DynArray",
            "AttrFlags": 2
          },
          {
            "Text": " class can use the interfaces provided by the CRTP base class easily as follows:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521948555,
        "id": "0deae1c4-f54d-4651-8599-d4d5265b9ccf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552347720000,
        "parent_id": "e16e7ebd-d0b0-4a80-9f48-5d17268ad6be",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "DynArray\u003cint\u003e arr(10);\narr.front() = 2;\narr[2] = 5;\nassert(arr.size() == 10);"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "DynArray\u003cint\u003e arr(10);\narr.front() = 2;\narr[2] = 5;\nassert(arr.size() == 10);",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521948555,
        "id": "c762a4ea-f991-493f-9fa3-f3b7383ebb94",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521948555,
        "parent_id": "e16e7ebd-d0b0-4a80-9f48-5d17268ad6be",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Usefulness:",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " This pattern particularly avoids virtual function calls at run-time which occur to traverse down the inheritance hierarchy and simply relies on static casts:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Usefulness:",
            "AttrFlags": 1
          },
          {
            "Text": " This pattern particularly avoids virtual function calls at run-time which occur to traverse down the inheritance hierarchy and simply relies on static casts:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521948555,
        "id": "85c597d8-e9be-425f-80b4-dbde05f96653",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552347720000,
        "parent_id": "e16e7ebd-d0b0-4a80-9f48-5d17268ad6be",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "DynArray\u003cint\u003e arr(10);\nDynArray\u003cint\u003e::Base \u0026 base = arr;\nbase.begin(); // no virtual calls"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "DynArray\u003cint\u003e arr(10);\nDynArray\u003cint\u003e::Base \u0026 base = arr;\nbase.begin(); // no virtual calls",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521948556,
        "id": "528bbbf7-a31a-406c-8c4f-83f5d6e2aa3d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521948556,
        "parent_id": "e16e7ebd-d0b0-4a80-9f48-5d17268ad6be",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The only static cast inside the function "
            ],
            [
              "begin()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in the base class "
            ],
            [
              "Container\u003cDynArray\u003cint\u003e\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " allows the compiler to drastically optimize the code and no virtual table look up happens at runtime."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The only static cast inside the function "
          },
          {
            "Text": "begin()",
            "AttrFlags": 2
          },
          {
            "Text": " in the base class "
          },
          {
            "Text": "Container\u003cDynArray\u003cint\u003e\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " allows the compiler to drastically optimize the code and no virtual table look up happens at runtime."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521948556,
        "id": "57b80545-7c69-4254-a928-72b7dbb7ce3f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521948556,
        "parent_id": "e16e7ebd-d0b0-4a80-9f48-5d17268ad6be",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Limitations:",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " Because the base class is templated and different for two different "
            ],
            [
              "DynArray",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "s it is not possible to store pointers to their base classes in an type-homogenous array as one could generally do with normal inheritance where the base class is not dependent on the derived type:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Limitations:",
            "AttrFlags": 1
          },
          {
            "Text": " Because the base class is templated and different for two different "
          },
          {
            "Text": "DynArray",
            "AttrFlags": 2
          },
          {
            "Text": "s it is not possible to store pointers to their base classes in an type-homogenous array as one could generally do with normal inheritance where the base class is not dependent on the derived type:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521948556,
        "id": "d722fc1d-8d63-47ea-92e7-60cc8e9d5ef3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552347720000,
        "parent_id": "e16e7ebd-d0b0-4a80-9f48-5d17268ad6be",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "class A {};\nclass B: public A{};\n\nA* a = new B;"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "class A {};\nclass B: public A{};\n\nA* a = new B;",
        "code_language": "C++"
      }
    ],
    "title": "Curiously recurring template pattern (CRTP)",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}