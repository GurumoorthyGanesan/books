{
  "ID": "eef0876e-4662-42d7-9a36-9ff9a83492df",
  "Root": {
    "alive": true,
    "content": [
      "c115235d-de5c-4126-96be-290a1dd16f4d",
      "9b9235e7-e387-4e1f-862d-1c1f4b753d44"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550521947996,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "eef0876e-4662-42d7-9a36-9ff9a83492df",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552347720000,
    "parent_id": "94bfa868-4e02-4b90-841b-817c34132524",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Basic class template"
        ]
      ]
    },
    "type": "page",
    "version": 13,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521947993,
        "id": "c115235d-de5c-4126-96be-290a1dd16f4d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521947993,
        "parent_id": "eef0876e-4662-42d7-9a36-9ff9a83492df",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The basic idea of a class template is that the template parameter gets substituted by a type at compile time. The result is that the same class can be reused for multiple types. The user specifies which type will be used when a variable of the class is declared. Three examples of this are shown in "
            ],
            [
              "main()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The basic idea of a class template is that the template parameter gets substituted by a type at compile time. The result is that the same class can be reused for multiple types. The user specifies which type will be used when a variable of the class is declared. Three examples of this are shown in "
          },
          {
            "Text": "main()",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521947996,
        "id": "9b9235e7-e387-4e1f-862d-1c1f4b753d44",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552347720000,
        "parent_id": "eef0876e-4662-42d7-9a36-9ff9a83492df",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "#include \u003ciostream\u003e\nusing std::cout;\n\ntemplate \u003ctypename T\u003e         // A simple class to hold one number of any type\nclass Number {\npublic:\n    void setNum(T n);         // Sets the class field to the given number\n    T plus1() const;          // returns class field's \"follower\"\nprivate:\n    T num;                    // Class field\n};\n\ntemplate \u003ctypename T\u003e         // Set the class field to the given number\nvoid Number\u003cT\u003e::setNum(T n) {\n    num = n;\n}\n\ntemplate \u003ctypename T\u003e         // returns class field's \"follower\"\nT Number\u003cT\u003e::plus1() const {\n    return num + 1;\n}\n\nint main() {\n    Number\u003cint\u003e anInt;        // Test with an integer (int replaces T in the class)\n    anInt.setNum(1);\n    cout \u003c\u003c \"My integer + 1 is \" \u003c\u003c anInt.plus1() \u003c\u003c \"\\n\";     // Prints 2\n\n    Number\u003cdouble\u003e aDouble;   // Test with a double\n    aDouble.setNum(3.1415926535897);\n    cout \u003c\u003c \"My double + 1 is \" \u003c\u003c aDouble.plus1() \u003c\u003c \"\\n\";    // Prints 4.14159\n\n    Number\u003cfloat\u003e aFloat;     // Test with a float\n    aFloat.setNum(1.4);\n    cout \u003c\u003c \"My float + 1 is \" \u003c\u003c aFloat.plus1() \u003c\u003c \"\\n\";      // Prints 2.4\n\n    return 0;  // Successful completion\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "#include \u003ciostream\u003e\nusing std::cout;\n\ntemplate \u003ctypename T\u003e         // A simple class to hold one number of any type\nclass Number {\npublic:\n    void setNum(T n);         // Sets the class field to the given number\n    T plus1() const;          // returns class field's \"follower\"\nprivate:\n    T num;                    // Class field\n};\n\ntemplate \u003ctypename T\u003e         // Set the class field to the given number\nvoid Number\u003cT\u003e::setNum(T n) {\n    num = n;\n}\n\ntemplate \u003ctypename T\u003e         // returns class field's \"follower\"\nT Number\u003cT\u003e::plus1() const {\n    return num + 1;\n}\n\nint main() {\n    Number\u003cint\u003e anInt;        // Test with an integer (int replaces T in the class)\n    anInt.setNum(1);\n    cout \u003c\u003c \"My integer + 1 is \" \u003c\u003c anInt.plus1() \u003c\u003c \"\\n\";     // Prints 2\n\n    Number\u003cdouble\u003e aDouble;   // Test with a double\n    aDouble.setNum(3.1415926535897);\n    cout \u003c\u003c \"My double + 1 is \" \u003c\u003c aDouble.plus1() \u003c\u003c \"\\n\";    // Prints 4.14159\n\n    Number\u003cfloat\u003e aFloat;     // Test with a float\n    aFloat.setNum(1.4);\n    cout \u003c\u003c \"My float + 1 is \" \u003c\u003c aFloat.plus1() \u003c\u003c \"\\n\";      // Prints 2.4\n\n    return 0;  // Successful completion\n}",
        "code_language": "C++"
      }
    ],
    "title": "Basic class template",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}