{
  "ID": "cead2940-d9cd-4e40-82dc-b972269a5507",
  "Root": {
    "alive": true,
    "content": [
      "58922c6a-f0d2-4553-baa2-81697a620d49",
      "f6e7fd91-1686-4624-98d5-c60f8cf171f9",
      "6eec8734-f5aa-44f2-8340-e04ce4e2f96d",
      "57e26da1-a210-4fde-95d2-a20d8cd334b5",
      "1e266c90-be6c-458c-a215-b8053d990def",
      "92b8e072-926b-412b-9a34-046eb6681870"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522398460,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "cead2940-d9cd-4e40-82dc-b972269a5507",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550709960000,
    "parent_id": "e1dd94ae-aa5a-4f89-b959-f2ec61771796",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "regex iterator Example"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522398455,
        "id": "58922c6a-f0d2-4553-baa2-81697a620d49",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522398455,
        "parent_id": "cead2940-d9cd-4e40-82dc-b972269a5507",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When processing of captures has to be done iteratively a "
            ],
            [
              "regex_iterator",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is a good choice. Dereferencing a "
            ],
            [
              "regex_iterator",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " returns a "
            ],
            [
              "match_result",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". This is great for conditional captures or captures which have interdependence. Let’s say that we want to tokenize some C++ code. Given:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When processing of captures has to be done iteratively a "
          },
          {
            "Text": "regex_iterator",
            "AttrFlags": 2
          },
          {
            "Text": " is a good choice. Dereferencing a "
          },
          {
            "Text": "regex_iterator",
            "AttrFlags": 2
          },
          {
            "Text": " returns a "
          },
          {
            "Text": "match_result",
            "AttrFlags": 2
          },
          {
            "Text": ". This is great for conditional captures or captures which have interdependence. Let’s say that we want to tokenize some C++ code. Given:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522398458,
        "id": "f6e7fd91-1686-4624-98d5-c60f8cf171f9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522398458,
        "parent_id": "cead2940-d9cd-4e40-82dc-b972269a5507",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "enum TOKENS {\n    NUMBER,\n    ADDITION,\n    SUBTRACTION,\n    MULTIPLICATION,\n    DIVISION,\n    EQUALITY,\n    OPEN_PARENTHESIS,\n    CLOSE_PARENTHESIS\n};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "enum TOKENS {\n    NUMBER,\n    ADDITION,\n    SUBTRACTION,\n    MULTIPLICATION,\n    DIVISION,\n    EQUALITY,\n    OPEN_PARENTHESIS,\n    CLOSE_PARENTHESIS\n};",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522398458,
        "id": "6eec8734-f5aa-44f2-8340-e04ce4e2f96d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522398458,
        "parent_id": "cead2940-d9cd-4e40-82dc-b972269a5507",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We can tokenize this string: "
            ],
            [
              "const auto input = \"42/2 + -8\\t=\\n(2 + 2) * 2 * 2 -3\"s",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " with a "
            ],
            [
              "regex_iterator",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " like this:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "We can tokenize this string: "
          },
          {
            "Text": "const auto input = \"42/2 + -8\\t=\\n(2 + 2) * 2 * 2 -3\"s",
            "AttrFlags": 2
          },
          {
            "Text": " with a "
          },
          {
            "Text": "regex_iterator",
            "AttrFlags": 2
          },
          {
            "Text": " like this:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522398458,
        "id": "57e26da1-a210-4fde-95d2-a20d8cd334b5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522398458,
        "parent_id": "cead2940-d9cd-4e40-82dc-b972269a5507",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "vector\u003cTOKENS\u003e tokens;\nconst regex re{ \"\\\\s*(\\\\(?)\\\\s*(-?\\\\s*\\\\d+)\\\\s*(\\\\)?)\\\\s*(?:(\\\\+)|(-)|(\\\\*)|(/)|(=))\" };\n\nfor_each(sregex_iterator(cbegin(input), cend(input), re), sregex_iterator(), [\u0026](const auto\u0026 i) {\n    if(i[1].length() \u003e 0) {\n        tokens.push_back(OPEN_PARENTHESIS);\n    }\n    \n    tokens.push_back(i[2].str().front() == '-' ? NEGATIVE_NUMBER : NON_NEGATIVE_NUMBER);\n    \n    if(i[3].length() \u003e 0) {\n        tokens.push_back(CLOSE_PARENTHESIS);\n    }        \n    \n    auto it = next(cbegin(i), 4);\n    \n    for(int result = ADDITION; it != cend(i); ++result, ++it) {\n        if (it-\u003elength() \u003e 0U) {\n            tokens.push_back(static_cast\u003cTOKENS\u003e(result));\n            break;\n        }\n    }\n});\n\nmatch_results\u003cstring::const_reverse_iterator\u003e sm;\n\nif(regex_search(crbegin(input), crend(input), sm, regex{ tokens.back() == SUBTRACTION ? \"^\\\\s*\\\\d+\\\\s*-\\\\s*(-?)\" : \"^\\\\s*\\\\d+\\\\s*(-?)\" })) {\n    tokens.push_back(sm[1].length() == 0 ? NON_NEGATIVE_NUMBER : NEGATIVE_NUMBER);\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "vector\u003cTOKENS\u003e tokens;\nconst regex re{ \"\\\\s*(\\\\(?)\\\\s*(-?\\\\s*\\\\d+)\\\\s*(\\\\)?)\\\\s*(?:(\\\\+)|(-)|(\\\\*)|(/)|(=))\" };\n\nfor_each(sregex_iterator(cbegin(input), cend(input), re), sregex_iterator(), [\u0026](const auto\u0026 i) {\n    if(i[1].length() \u003e 0) {\n        tokens.push_back(OPEN_PARENTHESIS);\n    }\n    \n    tokens.push_back(i[2].str().front() == '-' ? NEGATIVE_NUMBER : NON_NEGATIVE_NUMBER);\n    \n    if(i[3].length() \u003e 0) {\n        tokens.push_back(CLOSE_PARENTHESIS);\n    }        \n    \n    auto it = next(cbegin(i), 4);\n    \n    for(int result = ADDITION; it != cend(i); ++result, ++it) {\n        if (it-\u003elength() \u003e 0U) {\n            tokens.push_back(static_cast\u003cTOKENS\u003e(result));\n            break;\n        }\n    }\n});\n\nmatch_results\u003cstring::const_reverse_iterator\u003e sm;\n\nif(regex_search(crbegin(input), crend(input), sm, regex{ tokens.back() == SUBTRACTION ? \"^\\\\s*\\\\d+\\\\s*-\\\\s*(-?)\" : \"^\\\\s*\\\\d+\\\\s*(-?)\" })) {\n    tokens.push_back(sm[1].length() == 0 ? NON_NEGATIVE_NUMBER : NEGATIVE_NUMBER);\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522398460,
        "id": "1e266c90-be6c-458c-a215-b8053d990def",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522398460,
        "parent_id": "cead2940-d9cd-4e40-82dc-b972269a5507",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Live Example",
              [
                [
                  "a",
                  "http://ideone.com/Rv5WNI"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Live Example",
            "Link": "http://ideone.com/Rv5WNI"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522398460,
        "id": "92b8e072-926b-412b-9a34-046eb6681870",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522398460,
        "parent_id": "cead2940-d9cd-4e40-82dc-b972269a5507",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A notable gotcha with regex iterators is that the "
            ],
            [
              "regex",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " argument must be an L-value, an R-value will not work: http://stackoverflow.com/q/29895747/2642059"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A notable gotcha with regex iterators is that the "
          },
          {
            "Text": "regex",
            "AttrFlags": 2
          },
          {
            "Text": " argument must be an L-value, an R-value will not work: http://stackoverflow.com/q/29895747/2642059"
          }
        ]
      }
    ],
    "title": "regex iterator Example",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}