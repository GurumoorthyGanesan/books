{
  "ID": "f7d52e52-6ae9-4254-b2d1-a1f11e9e73ed",
  "Root": {
    "alive": true,
    "content": [
      "fa9d47e9-bbc6-4039-b3fd-08c797b90c59",
      "068ac655-192b-4367-8a22-b9caa793643c",
      "35f709e3-42e0-4aa8-b63c-8b852a8318d1",
      "9ce0c216-e454-47ac-872f-e3825bd2f9ac",
      "79fa1e3b-7489-4a10-acaf-2c8e3f788887"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550523931239,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "f7d52e52-6ae9-4254-b2d1-a1f11e9e73ed",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551688333345,
    "parent_id": "c70aafee-9819-4bd7-9b37-69e9f016666b",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Return Type Covariance"
        ]
      ]
    },
    "type": "page",
    "version": 4,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523931234,
        "id": "fa9d47e9-bbc6-4039-b3fd-08c797b90c59",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523931234,
        "parent_id": "f7d52e52-6ae9-4254-b2d1-a1f11e9e73ed",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Remarks"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Remarks"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523931237,
        "id": "068ac655-192b-4367-8a22-b9caa793643c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523931237,
        "parent_id": "f7d52e52-6ae9-4254-b2d1-a1f11e9e73ed",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Covariance",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " of a parameter or a return value for a virtual member function "
            ],
            [
              "m",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is where its type "
            ],
            [
              "T",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " gets more specific in a derived class’ override of "
            ],
            [
              "m",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". The type "
            ],
            [
              "T",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " then varies ("
            ],
            [
              "variance",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ") in specificity in the same way ("
            ],
            [
              "co",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ") as the classes providing "
            ],
            [
              "m",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". C++ provides language support for covariant "
            ],
            [
              "return types",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " that are raw pointers or raw references – the covariance is for the pointee or referent type."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Covariance",
            "AttrFlags": 1
          },
          {
            "Text": " of a parameter or a return value for a virtual member function "
          },
          {
            "Text": "m",
            "AttrFlags": 2
          },
          {
            "Text": " is where its type "
          },
          {
            "Text": "T",
            "AttrFlags": 2
          },
          {
            "Text": " gets more specific in a derived class’ override of "
          },
          {
            "Text": "m",
            "AttrFlags": 2
          },
          {
            "Text": ". The type "
          },
          {
            "Text": "T",
            "AttrFlags": 2
          },
          {
            "Text": " then varies ("
          },
          {
            "Text": "variance",
            "AttrFlags": 4
          },
          {
            "Text": ") in specificity in the same way ("
          },
          {
            "Text": "co",
            "AttrFlags": 4
          },
          {
            "Text": ") as the classes providing "
          },
          {
            "Text": "m",
            "AttrFlags": 2
          },
          {
            "Text": ". C++ provides language support for covariant "
          },
          {
            "Text": "return types",
            "AttrFlags": 4
          },
          {
            "Text": " that are raw pointers or raw references – the covariance is for the pointee or referent type."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523931239,
        "id": "35f709e3-42e0-4aa8-b63c-8b852a8318d1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523931239,
        "parent_id": "f7d52e52-6ae9-4254-b2d1-a1f11e9e73ed",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The C++ support is limited to return types because function return values are the only pure "
            ],
            [
              "out-arguments",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " in C++, and covariance is only type safe for a pure out-argument. Otherwise calling code could supply an object of less specific type than the receiving code expects. MIT professor Barbara Liskov investigated this and related variance type safety issues, and it’s now known as the Liskov Substitution Principle, or "
            ],
            [
              "LSP",
              [
                [
                  "b"
                ],
                [
                  "a",
                  "https://en.wikipedia.org/wiki/Liskov_substitution_principle"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The C++ support is limited to return types because function return values are the only pure "
          },
          {
            "Text": "out-arguments",
            "AttrFlags": 1
          },
          {
            "Text": " in C++, and covariance is only type safe for a pure out-argument. Otherwise calling code could supply an object of less specific type than the receiving code expects. MIT professor Barbara Liskov investigated this and related variance type safety issues, and it’s now known as the Liskov Substitution Principle, or "
          },
          {
            "Text": "LSP",
            "AttrFlags": 1,
            "Link": "https://en.wikipedia.org/wiki/Liskov_substitution_principle"
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523931239,
        "id": "9ce0c216-e454-47ac-872f-e3825bd2f9ac",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523931239,
        "parent_id": "f7d52e52-6ae9-4254-b2d1-a1f11e9e73ed",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The covariance support essentially helps to avoid downcasting and dynamic type checking."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The covariance support essentially helps to avoid downcasting and dynamic type checking."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523931239,
        "id": "79fa1e3b-7489-4a10-acaf-2c8e3f788887",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523931239,
        "parent_id": "f7d52e52-6ae9-4254-b2d1-a1f11e9e73ed",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Since smart pointers are of class type one cannot use the built-in support for covariance directly for smart pointer results, but one can define "
            ],
            [
              "apparently covariant",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " non-"
            ],
            [
              "virtual",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " smart pointer result wrapper functions for a covariant "
            ],
            [
              "virtual",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " function that produces raw pointers."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Since smart pointers are of class type one cannot use the built-in support for covariance directly for smart pointer results, but one can define "
          },
          {
            "Text": "apparently covariant",
            "AttrFlags": 4
          },
          {
            "Text": " non-"
          },
          {
            "Text": "virtual",
            "AttrFlags": 2
          },
          {
            "Text": " smart pointer result wrapper functions for a covariant "
          },
          {
            "Text": "virtual",
            "AttrFlags": 2
          },
          {
            "Text": " function that produces raw pointers."
          }
        ]
      }
    ],
    "title": "Return Type Covariance",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}