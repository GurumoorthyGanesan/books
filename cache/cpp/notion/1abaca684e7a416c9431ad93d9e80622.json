{
  "ID": "1abaca68-4e7a-416c-9431-ad93d9e80622",
  "Root": {
    "alive": true,
    "content": [
      "e559dc6f-53ab-4f91-bc79-7f6f21901663",
      "0b42bfea-8aaf-45b9-8099-8673d74160fa",
      "e4aaafc7-8577-457a-b997-c9401fcd0f05",
      "3697c3a1-1c43-4201-8222-18765fa64d53",
      "231fc57a-a0b4-4cc6-a88a-3e47fe5bc352",
      "ea5516e2-c14c-4814-8571-43270d48d158",
      "fda0c83e-0361-4605-914f-906147f60e89",
      "13f8d2d8-671b-4d2a-ae0f-5582cd168094",
      "8ef2428f-b9b4-4c32-ab25-93a07561089a",
      "effde4b5-3411-4021-a377-ab54795376ac",
      "d493d819-1766-44f3-b0ad-46513f57b474",
      "2e775894-e07e-4d29-9f7d-547d322ec123"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550521972515,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "1abaca68-4e7a-416c-9431-ad93d9e80622",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550778780000,
    "parent_id": "ee86edbe-8dd9-497a-a24c-fa516272404e",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "C iterators (pointers)"
        ]
      ]
    },
    "type": "page",
    "version": 23,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521972511,
        "id": "e559dc6f-53ab-4f91-bc79-7f6f21901663",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550778720000,
        "parent_id": "1abaca68-4e7a-416c-9431-ad93d9e80622",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "// This creates an array with 5 values.\nconst int array[] = { 1, 2, 3, 4, 5 };\n\n#ifdef BEFORE_CPP11\n\n// You can use `sizeof` to determine how many elements are in an array.\nconst int* first = array;\nconst int* afterLast = first + sizeof(array) / sizeof(array[0]);\n\n// Then you can iterate over the array by incrementing a pointer until\n// it reaches past the end of our array.\nfor (const int* i = first; i \u003c afterLast; ++i) {\n    std::cout \u003c\u003c *i \u003c\u003c std::endl;\n}\n\n#else\n\n// With C++11, you can let the STL compute the start and end iterators:\nfor (auto i = std::begin(array); i != std::end(array); ++i) {\n    std::cout \u003c\u003c *i \u003c\u003c std::endl;\n}\n\n#endif"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "// This creates an array with 5 values.\nconst int array[] = { 1, 2, 3, 4, 5 };\n\n#ifdef BEFORE_CPP11\n\n// You can use `sizeof` to determine how many elements are in an array.\nconst int* first = array;\nconst int* afterLast = first + sizeof(array) / sizeof(array[0]);\n\n// Then you can iterate over the array by incrementing a pointer until\n// it reaches past the end of our array.\nfor (const int* i = first; i \u003c afterLast; ++i) {\n    std::cout \u003c\u003c *i \u003c\u003c std::endl;\n}\n\n#else\n\n// With C++11, you can let the STL compute the start and end iterators:\nfor (auto i = std::begin(array); i != std::end(array); ++i) {\n    std::cout \u003c\u003c *i \u003c\u003c std::endl;\n}\n\n#endif",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521972513,
        "id": "0b42bfea-8aaf-45b9-8099-8673d74160fa",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521972513,
        "parent_id": "1abaca68-4e7a-416c-9431-ad93d9e80622",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This code would output the numbers 1 through 5, one on each line like this:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This code would output the numbers 1 through 5, one on each line like this:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521972513,
        "id": "e4aaafc7-8577-457a-b997-c9401fcd0f05",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550778720000,
        "parent_id": "1abaca68-4e7a-416c-9431-ad93d9e80622",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "1\n2\n3\n4\n5"
            ]
          ]
        },
        "type": "quote",
        "version": 10,
        "inline_content": [
          {
            "Text": "1\n2\n3\n4\n5"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521972514,
        "id": "3697c3a1-1c43-4201-8222-18765fa64d53",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521972514,
        "parent_id": "1abaca68-4e7a-416c-9431-ad93d9e80622",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Breaking It Down"
            ]
          ]
        },
        "type": "sub_sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Breaking It Down"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521972514,
        "id": "231fc57a-a0b4-4cc6-a88a-3e47fe5bc352",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550778720000,
        "parent_id": "1abaca68-4e7a-416c-9431-ad93d9e80622",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "const int array[] = { 1, 2, 3, 4, 5 };"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "const int array[] = { 1, 2, 3, 4, 5 };",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521972514,
        "id": "ea5516e2-c14c-4814-8571-43270d48d158",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521972514,
        "parent_id": "1abaca68-4e7a-416c-9431-ad93d9e80622",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This line creates a new integer array with 5 values. C arrays are just pointers to memory where each value is stored together in a contiguous block."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This line creates a new integer array with 5 values. C arrays are just pointers to memory where each value is stored together in a contiguous block."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521972514,
        "id": "fda0c83e-0361-4605-914f-906147f60e89",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550778720000,
        "parent_id": "1abaca68-4e7a-416c-9431-ad93d9e80622",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "const int* first = array;\nconst int* afterLast = first + sizeof(array) / sizeof(array[0]);"
            ]
          ]
        },
        "type": "code",
        "version": 4,
        "code": "const int* first = array;\nconst int* afterLast = first + sizeof(array) / sizeof(array[0]);",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521972514,
        "id": "13f8d2d8-671b-4d2a-ae0f-5582cd168094",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521972514,
        "parent_id": "1abaca68-4e7a-416c-9431-ad93d9e80622",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "These lines create two pointers. The first pointer is given the value of the array pointer, which is the address of the first element in the array. The "
            ],
            [
              "sizeof",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " operator when used on a C array returns the size of the array in bytes. Divided by the size of an element this gives the number of elements in the array. We can use this to find the address of the block "
            ],
            [
              "after",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " the array."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "These lines create two pointers. The first pointer is given the value of the array pointer, which is the address of the first element in the array. The "
          },
          {
            "Text": "sizeof",
            "AttrFlags": 2
          },
          {
            "Text": " operator when used on a C array returns the size of the array in bytes. Divided by the size of an element this gives the number of elements in the array. We can use this to find the address of the block "
          },
          {
            "Text": "after",
            "AttrFlags": 4
          },
          {
            "Text": " the array."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521972515,
        "id": "8ef2428f-b9b4-4c32-ab25-93a07561089a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550778780000,
        "parent_id": "1abaca68-4e7a-416c-9431-ad93d9e80622",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "for (const int* i = first; i \u003c afterLast; ++i) {"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "for (const int* i = first; i \u003c afterLast; ++i) {",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521972515,
        "id": "effde4b5-3411-4021-a377-ab54795376ac",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521972515,
        "parent_id": "1abaca68-4e7a-416c-9431-ad93d9e80622",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Here we create a pointer which we will use as an iterator. It is initialized with the address of the first element we want to iterate over, and we’ll continue to iterate as long as "
            ],
            [
              "i",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is less than "
            ],
            [
              "afterLast",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", which means as long as "
            ],
            [
              "i",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is pointing to an address within "
            ],
            [
              "array",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Here we create a pointer which we will use as an iterator. It is initialized with the address of the first element we want to iterate over, and we’ll continue to iterate as long as "
          },
          {
            "Text": "i",
            "AttrFlags": 2
          },
          {
            "Text": " is less than "
          },
          {
            "Text": "afterLast",
            "AttrFlags": 2
          },
          {
            "Text": ", which means as long as "
          },
          {
            "Text": "i",
            "AttrFlags": 2
          },
          {
            "Text": " is pointing to an address within "
          },
          {
            "Text": "array",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521972515,
        "id": "d493d819-1766-44f3-b0ad-46513f57b474",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550778780000,
        "parent_id": "1abaca68-4e7a-416c-9431-ad93d9e80622",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "std::cout \u003c\u003c *i \u003c\u003c std::endl;"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "std::cout \u003c\u003c *i \u003c\u003c std::endl;",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521972515,
        "id": "2e775894-e07e-4d29-9f7d-547d322ec123",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521972515,
        "parent_id": "1abaca68-4e7a-416c-9431-ad93d9e80622",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Finally, within the loop we can access the value our iterator "
            ],
            [
              "i",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is pointing to by dereferencing it. Here the dereference operator "
            ],
            [
              "\\*",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " returns the value at the address in "
            ],
            [
              "i",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Finally, within the loop we can access the value our iterator "
          },
          {
            "Text": "i",
            "AttrFlags": 2
          },
          {
            "Text": " is pointing to by dereferencing it. Here the dereference operator "
          },
          {
            "Text": "\\*",
            "AttrFlags": 2
          },
          {
            "Text": " returns the value at the address in "
          },
          {
            "Text": "i",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      }
    ],
    "title": "C iterators (pointers)",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}