{
  "ID": "e4854680-559d-469e-b90e-ff9adb2c2998",
  "Root": {
    "alive": true,
    "content": [
      "37531196-d877-4e2c-b202-cbd1c5cad72e",
      "fd2c32e2-149f-4984-9d44-e767865bcef5"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550525404431,
    "id": "e4854680-559d-469e-b90e-ff9adb2c2998",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550525404431,
    "parent_id": "b1cbbef7-66d3-49c3-aaff-f598af5cdf47",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "030 Deferred async example"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525404428,
        "id": "37531196-d877-4e2c-b202-cbd1c5cad72e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525404428,
        "parent_id": "e4854680-559d-469e-b90e-ff9adb2c2998",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This code implements a version of "
            ],
            [
              "std::async",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", but it behaves as if "
            ],
            [
              "async",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " were always called with the "
            ],
            [
              "deferred",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " launch policy. This function also does not have "
            ],
            [
              "async",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "’s special "
            ],
            [
              "future",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " behavior; the returned "
            ],
            [
              "future",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can be destroyed without ever acquiring its value."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This code implements a version of "
          },
          {
            "Text": "std::async",
            "AttrFlags": 2
          },
          {
            "Text": ", but it behaves as if "
          },
          {
            "Text": "async",
            "AttrFlags": 2
          },
          {
            "Text": " were always called with the "
          },
          {
            "Text": "deferred",
            "AttrFlags": 2
          },
          {
            "Text": " launch policy. This function also does not have "
          },
          {
            "Text": "async",
            "AttrFlags": 2
          },
          {
            "Text": "’s special "
          },
          {
            "Text": "future",
            "AttrFlags": 2
          },
          {
            "Text": " behavior; the returned "
          },
          {
            "Text": "future",
            "AttrFlags": 2
          },
          {
            "Text": " can be destroyed without ever acquiring its value."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525404431,
        "id": "fd2c32e2-149f-4984-9d44-e767865bcef5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525404431,
        "parent_id": "e4854680-559d-469e-b90e-ff9adb2c2998",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "template\u003ctypename F\u003e\nauto async_deferred(F\u0026\u0026 func) -\u003e std::future\u003cdecltype(func())\u003e\n{\n    using result_type = decltype(func());\n\n    auto promise = std::promise\u003cresult_type\u003e();\n    auto future  = promise.get_future();\n\n    std::thread(std::bind([=](std::promise\u003cresult_type\u003e\u0026 promise)\n    {\n        try\n        {\n            promise.set_value(func()); \n            // Note: Will not work with std::promise\u003cvoid\u003e. Needs some meta-template programming which is out of scope for this example.\n        }\n        catch(...)\n        {\n            promise.set_exception(std::current_exception());\n        }\n    }, std::move(promise))).detach();\n\n    return future;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "template\u003ctypename F\u003e\nauto async_deferred(F\u0026\u0026 func) -\u003e std::future\u003cdecltype(func())\u003e\n{\n    using result_type = decltype(func());\n\n    auto promise = std::promise\u003cresult_type\u003e();\n    auto future  = promise.get_future();\n\n    std::thread(std::bind([=](std::promise\u003cresult_type\u003e\u0026 promise)\n    {\n        try\n        {\n            promise.set_value(func()); \n            // Note: Will not work with std::promise\u003cvoid\u003e. Needs some meta-template programming which is out of scope for this example.\n        }\n        catch(...)\n        {\n            promise.set_exception(std::current_exception());\n        }\n    }, std::move(promise))).detach();\n\n    return future;\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "030 Deferred async example"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}