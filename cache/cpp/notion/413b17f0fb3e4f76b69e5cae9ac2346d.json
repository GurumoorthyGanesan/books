{
  "ID": "413b17f0-fb3e-4f76-b69e-5cae9ac2346d",
  "Root": {
    "alive": true,
    "content": [
      "4178e705-bf6f-4e82-9ea0-a2f053d7ed76",
      "f414d6ec-de2d-4a2e-9210-00dcab0149b1",
      "b5d6bcb3-f215-413b-ac99-5ff8300cc3c6",
      "16547ee6-30e0-4ad7-8cf9-f2e877c7ff22",
      "5ae69bbc-9e5b-4054-81fc-9a64a4ef05cb",
      "dfcc3e88-6e7d-4da9-9e92-b2a20e8bd3b1",
      "65a5e18c-b661-45b1-a8f3-db24fbebeb0c",
      "99f38349-274c-48cf-ab9c-f7996937c28f"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522268943,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "413b17f0-fb3e-4f76-b69e-5cae9ac2346d",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550655420000,
    "parent_id": "50a27510-120b-4da0-9ecb-cf15396a0108",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Searching in std map or in std multimap"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522268937,
        "id": "4178e705-bf6f-4e82-9ea0-a2f053d7ed76",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522268937,
        "parent_id": "413b17f0-fb3e-4f76-b69e-5cae9ac2346d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "There are several ways to search a key in "
            ],
            [
              "std::map",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or in "
            ],
            [
              "std::multimap",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "There are several ways to search a key in "
          },
          {
            "Text": "std::map",
            "AttrFlags": 2
          },
          {
            "Text": " or in "
          },
          {
            "Text": "std::multimap",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522268940,
        "id": "f414d6ec-de2d-4a2e-9210-00dcab0149b1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522268940,
        "parent_id": "413b17f0-fb3e-4f76-b69e-5cae9ac2346d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To get the iterator of the first occurrence of a key, the "
            ],
            [
              "find()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " function can be used. It returns "
            ],
            [
              "end()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " if the key does not exist."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "To get the iterator of the first occurrence of a key, the "
          },
          {
            "Text": "find()",
            "AttrFlags": 2
          },
          {
            "Text": " function can be used. It returns "
          },
          {
            "Text": "end()",
            "AttrFlags": 2
          },
          {
            "Text": " if the key does not exist."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522268940,
        "id": "b5d6bcb3-f215-413b-ac99-5ff8300cc3c6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522268940,
        "parent_id": "413b17f0-fb3e-4f76-b69e-5cae9ac2346d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "std::multimap\u003c int , int \u003e mmp{ {1, 2}, {3, 4}, {6, 5}, {8, 9}, {3, 4}, {6, 7} };\nauto it = mmp.find(6);\nif(it!=mmp.end())\n    std::cout \u003c\u003c it-\u003efirst \u003c\u003c \", \" \u003c\u003c it-\u003esecond \u003c\u003c std::endl; //prints: 6, 5\nelse\n    std::cout \u003c\u003c \"Value does not exist!\" \u003c\u003c std::endl;\n\nit = mmp.find(66);\nif(it!=mmp.end())\n    std::cout \u003c\u003c it-\u003efirst \u003c\u003c \", \" \u003c\u003c it-\u003esecond \u003c\u003c std::endl; \nelse\n    std::cout \u003c\u003c \"Value does not exist!\" \u003c\u003c std::endl; // This line would be executed."
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "std::multimap\u003c int , int \u003e mmp{ {1, 2}, {3, 4}, {6, 5}, {8, 9}, {3, 4}, {6, 7} };\nauto it = mmp.find(6);\nif(it!=mmp.end())\n    std::cout \u003c\u003c it-\u003efirst \u003c\u003c \", \" \u003c\u003c it-\u003esecond \u003c\u003c std::endl; //prints: 6, 5\nelse\n    std::cout \u003c\u003c \"Value does not exist!\" \u003c\u003c std::endl;\n\nit = mmp.find(66);\nif(it!=mmp.end())\n    std::cout \u003c\u003c it-\u003efirst \u003c\u003c \", \" \u003c\u003c it-\u003esecond \u003c\u003c std::endl; \nelse\n    std::cout \u003c\u003c \"Value does not exist!\" \u003c\u003c std::endl; // This line would be executed.",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522268941,
        "id": "16547ee6-30e0-4ad7-8cf9-f2e877c7ff22",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522268941,
        "parent_id": "413b17f0-fb3e-4f76-b69e-5cae9ac2346d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Another way to find whether an entry exists in "
            ],
            [
              "std::map",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or in "
            ],
            [
              "std::multimap",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is using the "
            ],
            [
              "count()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " function, which counts how many values are associated with a given key. Since "
            ],
            [
              "std::map",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " associates only one value with each key, its "
            ],
            [
              "count()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " function can only return 0 (if the key is not present) or 1 (if it is). For "
            ],
            [
              "std::multimap",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "count()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can return values greater than 1 since there can be several values associated with the same key."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Another way to find whether an entry exists in "
          },
          {
            "Text": "std::map",
            "AttrFlags": 2
          },
          {
            "Text": " or in "
          },
          {
            "Text": "std::multimap",
            "AttrFlags": 2
          },
          {
            "Text": " is using the "
          },
          {
            "Text": "count()",
            "AttrFlags": 2
          },
          {
            "Text": " function, which counts how many values are associated with a given key. Since "
          },
          {
            "Text": "std::map",
            "AttrFlags": 2
          },
          {
            "Text": " associates only one value with each key, its "
          },
          {
            "Text": "count()",
            "AttrFlags": 2
          },
          {
            "Text": " function can only return 0 (if the key is not present) or 1 (if it is). For "
          },
          {
            "Text": "std::multimap",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "count()",
            "AttrFlags": 2
          },
          {
            "Text": " can return values greater than 1 since there can be several values associated with the same key."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522268941,
        "id": "5ae69bbc-9e5b-4054-81fc-9a64a4ef05cb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522268941,
        "parent_id": "413b17f0-fb3e-4f76-b69e-5cae9ac2346d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "std::map\u003c int , int \u003e mp{ {1, 2}, {3, 4}, {6, 5}, {8, 9}, {3, 4}, {6, 7} };\n    if(mp.count(3) \u003e 0) // 3 exists as a key in map\n        std::cout \u003c\u003c \"The key exists!\" \u003c\u003c std::endl; // This line would be executed.\n    else\n        std::cout \u003c\u003c \"The key does not exist!\" \u003c\u003c std::endl;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "std::map\u003c int , int \u003e mp{ {1, 2}, {3, 4}, {6, 5}, {8, 9}, {3, 4}, {6, 7} };\n    if(mp.count(3) \u003e 0) // 3 exists as a key in map\n        std::cout \u003c\u003c \"The key exists!\" \u003c\u003c std::endl; // This line would be executed.\n    else\n        std::cout \u003c\u003c \"The key does not exist!\" \u003c\u003c std::endl;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522268942,
        "id": "dfcc3e88-6e7d-4da9-9e92-b2a20e8bd3b1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522268942,
        "parent_id": "413b17f0-fb3e-4f76-b69e-5cae9ac2346d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If you only care whether some element exists, "
            ],
            [
              "find",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is strictly better: it documents your intent and, for "
            ],
            [
              "multimaps",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", it can stop once the first matching element has been found."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If you only care whether some element exists, "
          },
          {
            "Text": "find",
            "AttrFlags": 2
          },
          {
            "Text": " is strictly better: it documents your intent and, for "
          },
          {
            "Text": "multimaps",
            "AttrFlags": 2
          },
          {
            "Text": ", it can stop once the first matching element has been found."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522268943,
        "id": "65a5e18c-b661-45b1-a8f3-db24fbebeb0c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522268943,
        "parent_id": "413b17f0-fb3e-4f76-b69e-5cae9ac2346d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In the case of "
            ],
            [
              "std::multimap",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", there could be several elements having the same key. To get this range, the "
            ],
            [
              "equal_range()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " function is used which returns "
            ],
            [
              "std::pair",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " having iterator lower bound (inclusive) and upper bound (exclusive) respectively. If the key does not exist, both iterators would point to "
            ],
            [
              "end()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "In the case of "
          },
          {
            "Text": "std::multimap",
            "AttrFlags": 2
          },
          {
            "Text": ", there could be several elements having the same key. To get this range, the "
          },
          {
            "Text": "equal_range()",
            "AttrFlags": 2
          },
          {
            "Text": " function is used which returns "
          },
          {
            "Text": "std::pair",
            "AttrFlags": 2
          },
          {
            "Text": " having iterator lower bound (inclusive) and upper bound (exclusive) respectively. If the key does not exist, both iterators would point to "
          },
          {
            "Text": "end()",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522268943,
        "id": "99f38349-274c-48cf-ab9c-f7996937c28f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522268943,
        "parent_id": "413b17f0-fb3e-4f76-b69e-5cae9ac2346d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "auto eqr = mmp.equal_range(6);\nauto st = eqr.first, en = eqr.second;\nfor(auto it = st; it != en; ++it){\n    std::cout \u003c\u003c it-\u003efirst \u003c\u003c \", \" \u003c\u003c it-\u003esecond \u003c\u003c std::endl; \n}\n    // prints: 6, 5\n    //         6, 7"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "auto eqr = mmp.equal_range(6);\nauto st = eqr.first, en = eqr.second;\nfor(auto it = st; it != en; ++it){\n    std::cout \u003c\u003c it-\u003efirst \u003c\u003c \", \" \u003c\u003c it-\u003esecond \u003c\u003c std::endl; \n}\n    // prints: 6, 5\n    //         6, 7",
        "code_language": "Plain Text"
      }
    ],
    "title": "Searching in std map or in std multimap",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}