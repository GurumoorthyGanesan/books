{
  "ID": "3079e5ab-cd91-4536-a6e9-100edf3ff05a",
  "Root": {
    "alive": true,
    "content": [
      "21ae67fd-44ce-46e2-b0e4-98f157dbfd36",
      "05606f1e-e091-4cbc-965e-efffbed8e1ff",
      "5b98e7f1-4466-4fae-8869-a70c92e891ce",
      "99a6bc6d-f158-4924-ba04-4c9bd0951fc1",
      "4078ecc6-2f4b-4a91-aced-f94eb07b3bc7",
      "f9bd32e0-15a6-4ae3-84f0-10c6d02ed58d",
      "8cea6e5e-0596-4e95-afa6-e8e10d3ce03d",
      "ae5a32bb-77ca-4e77-9a1c-6877fb346964",
      "ec982abb-7a22-408f-9e1d-a7c04f4f2a71",
      "2978ad4d-f4fd-4ea2-8db7-f6587e328464",
      "bc1ee210-773f-4947-a073-ac4ade09eaa3",
      "b5c2c28e-1b26-4e79-9640-fcd42a5b7d9f",
      "d29e2b68-653f-4f34-a7b5-c9cf200e2da5",
      "3785d596-e8c9-4ae1-a175-ccc01bfbee2e",
      "0c8815df-71f3-49d3-8361-d2332cbb97a7"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550521987837,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "3079e5ab-cd91-4536-a6e9-100edf3ff05a",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550656380000,
    "parent_id": "b886ff5d-614b-4aa9-9e99-851b7998439b",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Tokenize"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521987825,
        "id": "21ae67fd-44ce-46e2-b0e4-98f157dbfd36",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521987825,
        "parent_id": "3079e5ab-cd91-4536-a6e9-100edf3ff05a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Listed from least expensive to most expensive at run-time:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Listed from least expensive to most expensive at run-time:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521987829,
        "id": "05606f1e-e091-4cbc-965e-efffbed8e1ff",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521987829,
        "parent_id": "3079e5ab-cd91-4536-a6e9-100edf3ff05a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "str::strtok",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is the cheapest standard provided tokenization method, it also allows the delimiter to be modified between tokens, but it incurs 3 difficulties with modern C++:"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "str::strtok",
            "AttrFlags": 2
          },
          {
            "Text": " is the cheapest standard provided tokenization method, it also allows the delimiter to be modified between tokens, but it incurs 3 difficulties with modern C++:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521987831,
        "id": "5b98e7f1-4466-4fae-8869-a70c92e891ce",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521987831,
        "parent_id": "3079e5ab-cd91-4536-a6e9-100edf3ff05a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "std::strtok",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " cannot be used on multiple "
            ],
            [
              "strings",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " at the same time (though some implementations do extend to support this, such as: "
            ],
            [
              "strtok_s",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://msdn.microsoft.com/en-us/library/ftsafwz3.aspx"
                ]
              ]
            ],
            [
              ")"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "std::strtok",
            "AttrFlags": 2
          },
          {
            "Text": " cannot be used on multiple "
          },
          {
            "Text": "strings",
            "AttrFlags": 2
          },
          {
            "Text": " at the same time (though some implementations do extend to support this, such as: "
          },
          {
            "Text": "strtok_s",
            "AttrFlags": 2,
            "Link": "https://msdn.microsoft.com/en-us/library/ftsafwz3.aspx"
          },
          {
            "Text": ")"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521987832,
        "id": "99a6bc6d-f158-4924-ba04-4c9bd0951fc1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521987832,
        "parent_id": "3079e5ab-cd91-4536-a6e9-100edf3ff05a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For the same reason "
            ],
            [
              "std::strtok",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " cannot be used on multiple threads simultaneously (this may however be implementation defined, for example: "
            ],
            [
              "Visual Studio’s implementation is thread safe",
              [
                [
                  "a",
                  "https://msdn.microsoft.com/en-us/library/2c8d19sb.aspx#Anchor_3"
                ]
              ]
            ],
            [
              ")"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "For the same reason "
          },
          {
            "Text": "std::strtok",
            "AttrFlags": 2
          },
          {
            "Text": " cannot be used on multiple threads simultaneously (this may however be implementation defined, for example: "
          },
          {
            "Text": "Visual Studio’s implementation is thread safe",
            "Link": "https://msdn.microsoft.com/en-us/library/2c8d19sb.aspx#Anchor_3"
          },
          {
            "Text": ")"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521987832,
        "id": "4078ecc6-2f4b-4a91-aced-f94eb07b3bc7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521987832,
        "parent_id": "3079e5ab-cd91-4536-a6e9-100edf3ff05a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Calling "
            ],
            [
              "std::strtok",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " modifies the "
            ],
            [
              "std::string",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " it is operating on, so it cannot be used on "
            ],
            [
              "const string",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "s, "
            ],
            [
              "const char*",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "s, or literal strings, to tokenize any of these with "
            ],
            [
              "std::strtok",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or to operate on a "
            ],
            [
              "std::string",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " who’s contents need to be preserved, the input would have to be copied, then the copy could be operated on"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Calling "
          },
          {
            "Text": "std::strtok",
            "AttrFlags": 2
          },
          {
            "Text": " modifies the "
          },
          {
            "Text": "std::string",
            "AttrFlags": 2
          },
          {
            "Text": " it is operating on, so it cannot be used on "
          },
          {
            "Text": "const string",
            "AttrFlags": 2
          },
          {
            "Text": "s, "
          },
          {
            "Text": "const char*",
            "AttrFlags": 2
          },
          {
            "Text": "s, or literal strings, to tokenize any of these with "
          },
          {
            "Text": "std::strtok",
            "AttrFlags": 2
          },
          {
            "Text": " or to operate on a "
          },
          {
            "Text": "std::string",
            "AttrFlags": 2
          },
          {
            "Text": " who’s contents need to be preserved, the input would have to be copied, then the copy could be operated on"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521987833,
        "id": "f9bd32e0-15a6-4ae3-84f0-10c6d02ed58d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521987833,
        "parent_id": "3079e5ab-cd91-4536-a6e9-100edf3ff05a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Generally any of these options cost will be hidden in the allocation cost of the tokens, but if the cheapest algorithm is required and "
            ],
            [
              "std::strtok",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "’s difficulties are not overcomable consider a "
            ],
            [
              "hand-spun solution",
              [
                [
                  "a",
                  "http://stackoverflow.com/a/38595708/2642059"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Generally any of these options cost will be hidden in the allocation cost of the tokens, but if the cheapest algorithm is required and "
          },
          {
            "Text": "std::strtok",
            "AttrFlags": 2
          },
          {
            "Text": "’s difficulties are not overcomable consider a "
          },
          {
            "Text": "hand-spun solution",
            "Link": "http://stackoverflow.com/a/38595708/2642059"
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521987833,
        "id": "8cea6e5e-0596-4e95-afa6-e8e10d3ce03d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521987833,
        "parent_id": "3079e5ab-cd91-4536-a6e9-100edf3ff05a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// String to tokenize\nstd::string str{ \"The quick brown fox\" };\n// Vector to store tokens\nvector\u003cstd::string\u003e tokens;\n\nfor (auto i = strtok(\u0026str[0], \" \"); i != NULL; i = strtok(NULL, \" \"))\n    tokens.push_back(i);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// String to tokenize\nstd::string str{ \"The quick brown fox\" };\n// Vector to store tokens\nvector\u003cstd::string\u003e tokens;\n\nfor (auto i = strtok(\u0026str[0], \" \"); i != NULL; i = strtok(NULL, \" \"))\n    tokens.push_back(i);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521987833,
        "id": "ae5a32bb-77ca-4e77-9a1c-6877fb346964",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521987833,
        "parent_id": "3079e5ab-cd91-4536-a6e9-100edf3ff05a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Live Example",
              [
                [
                  "a",
                  "http://ideone.com/8kAGoa"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Live Example",
            "Link": "http://ideone.com/8kAGoa"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521987834,
        "id": "ec982abb-7a22-408f-9e1d-a7c04f4f2a71",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521987834,
        "parent_id": "3079e5ab-cd91-4536-a6e9-100edf3ff05a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "std::istream_iterator",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " uses the stream’s extraction operator iteratively. If the input "
            ],
            [
              "std::string",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is white-space delimited this is able to expand on the "
            ],
            [
              "std::strtok",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " option by eliminating its difficulties, allowing inline tokenization thereby supporting the generation of a "
            ],
            [
              "const vector\u003cstring\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", and by adding support for multiple delimiting white-space character:"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "std::istream_iterator",
            "AttrFlags": 2
          },
          {
            "Text": " uses the stream’s extraction operator iteratively. If the input "
          },
          {
            "Text": "std::string",
            "AttrFlags": 2
          },
          {
            "Text": " is white-space delimited this is able to expand on the "
          },
          {
            "Text": "std::strtok",
            "AttrFlags": 2
          },
          {
            "Text": " option by eliminating its difficulties, allowing inline tokenization thereby supporting the generation of a "
          },
          {
            "Text": "const vector\u003cstring\u003e",
            "AttrFlags": 2
          },
          {
            "Text": ", and by adding support for multiple delimiting white-space character:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521987834,
        "id": "2978ad4d-f4fd-4ea2-8db7-f6587e328464",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521987834,
        "parent_id": "3079e5ab-cd91-4536-a6e9-100edf3ff05a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// String to tokenize\nconst std::string str(\"The  quick \\tbrown \\nfox\");\nstd::istringstream is(str);\n// Vector to store tokens\nconst std::vector\u003cstd::string\u003e tokens = std::vector\u003cstd::string\u003e(\n                                        std::istream_iterator\u003cstd::string\u003e(is),\n                                        std::istream_iterator\u003cstd::string\u003e());"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// String to tokenize\nconst std::string str(\"The  quick \\tbrown \\nfox\");\nstd::istringstream is(str);\n// Vector to store tokens\nconst std::vector\u003cstd::string\u003e tokens = std::vector\u003cstd::string\u003e(\n                                        std::istream_iterator\u003cstd::string\u003e(is),\n                                        std::istream_iterator\u003cstd::string\u003e());",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521987835,
        "id": "bc1ee210-773f-4947-a073-ac4ade09eaa3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521987835,
        "parent_id": "3079e5ab-cd91-4536-a6e9-100edf3ff05a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Live Example",
              [
                [
                  "a",
                  "http://ideone.com/gWmfV9"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Live Example",
            "Link": "http://ideone.com/gWmfV9"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521987835,
        "id": "b5c2c28e-1b26-4e79-9640-fcd42a5b7d9f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521987835,
        "parent_id": "3079e5ab-cd91-4536-a6e9-100edf3ff05a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "std::regex_token_iterator",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " uses a "
            ],
            [
              "std::regex",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to iteratively tokenize. It provides for a more flexible delimiter definition. For example, non-delimited commas and white-space:"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "std::regex_token_iterator",
            "AttrFlags": 2
          },
          {
            "Text": " uses a "
          },
          {
            "Text": "std::regex",
            "AttrFlags": 2
          },
          {
            "Text": " to iteratively tokenize. It provides for a more flexible delimiter definition. For example, non-delimited commas and white-space:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521987835,
        "id": "d29e2b68-653f-4f34-a7b5-c9cf200e2da5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521987835,
        "parent_id": "3079e5ab-cd91-4536-a6e9-100edf3ff05a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// String to tokenize\nconst std::string str{ \"The ,qu\\\\,ick ,\\tbrown, fox\" };\nconst std::regex re{ \"\\\\s*((?:[^\\\\\\\\,]|\\\\\\\\.)*?)\\\\s*(?:,|$)\" };\n// Vector to store tokens\nconst std::vector\u003cstd::string\u003e tokens{ \n    std::sregex_token_iterator(str.begin(), str.end(), re, 1), \n    std::sregex_token_iterator() \n};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// String to tokenize\nconst std::string str{ \"The ,qu\\\\,ick ,\\tbrown, fox\" };\nconst std::regex re{ \"\\\\s*((?:[^\\\\\\\\,]|\\\\\\\\.)*?)\\\\s*(?:,|$)\" };\n// Vector to store tokens\nconst std::vector\u003cstd::string\u003e tokens{ \n    std::sregex_token_iterator(str.begin(), str.end(), re, 1), \n    std::sregex_token_iterator() \n};",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521987836,
        "id": "3785d596-e8c9-4ae1-a175-ccc01bfbee2e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521987836,
        "parent_id": "3079e5ab-cd91-4536-a6e9-100edf3ff05a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Live Example",
              [
                [
                  "a",
                  "http://ideone.com/q58zoX"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Live Example",
            "Link": "http://ideone.com/q58zoX"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521987837,
        "id": "0c8815df-71f3-49d3-8361-d2332cbb97a7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521987837,
        "parent_id": "3079e5ab-cd91-4536-a6e9-100edf3ff05a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "See the "
            ],
            [
              "regex_token_iterator",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%2B%2B/1681/regular-expressions/5425/regex-token-iterator-example"
                ]
              ]
            ],
            [
              " Example",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%2B%2B/1681/regular-expressions/5425/regex-token-iterator-example"
                ]
              ]
            ],
            [
              " for more details."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "See the "
          },
          {
            "Text": "regex_token_iterator",
            "AttrFlags": 2,
            "Link": "http://stackoverflow.com/documentation/c%2B%2B/1681/regular-expressions/5425/regex-token-iterator-example"
          },
          {
            "Text": " Example",
            "Link": "http://stackoverflow.com/documentation/c%2B%2B/1681/regular-expressions/5425/regex-token-iterator-example"
          },
          {
            "Text": " for more details."
          }
        ]
      }
    ],
    "title": "Tokenize",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}