{
  "ID": "402ef4da-a4e3-4503-ab08-9a4aa56821b5",
  "Root": {
    "alive": true,
    "content": [
      "8bcd6b0f-8caa-4689-a096-8d727a9b3123",
      "4994a319-aa98-46d3-8eaf-ed92dfe8a3dc",
      "a962ec77-5ed5-440f-ac51-572ea8dfd418",
      "6b86d7e2-8754-4dd0-8dbe-6f6f4af95783",
      "a4fc6666-5aed-4515-b570-294e3ab29449",
      "fdb8caa6-c165-4ec7-9f09-b89f8f40debe",
      "3d6fdfa3-c64c-48f7-be4a-62eb606f6e19",
      "1defc7a7-df12-444c-a79a-a4176fe24af2",
      "3b6d600f-bea0-4739-90b0-7485a8a2d805",
      "2c402093-dfd5-4905-9f52-ee98f2639798",
      "99bed065-9918-4c51-a1eb-841ae4c5127d",
      "98e9c06f-de8c-40a2-b8fc-b1a440076fa9",
      "2bc888e0-c538-4a3e-8a26-c16026530590",
      "e8fe82bf-eff7-4f69-9dc8-10b6cd5ce57a",
      "84e68bcf-6c45-47e1-a9db-2ea49a787872",
      "92bf8be1-80dc-466e-a11d-adc259b3da5c",
      "cb1e4cb3-b919-4d5f-98ac-d4cb085d2af1",
      "29119bc8-4566-43ee-b828-f821874cecfd"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550521980000,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "402ef4da-a4e3-4503-ab08-9a4aa56821b5",
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552347300000,
    "parent_id": "ad527dc6-d4a7-420b-9234-94d0b9bfb560",
    "parent_table": "block",
    "permissions": [
      {
        "role": "editor",
        "type": "user_permission",
        "user_id": "bb760e2d-d679-4b64-b2a9-03005b21870a"
      }
    ],
    "properties": {
      "title": [
        [
          "Smart pointers"
        ]
      ]
    },
    "type": "page",
    "version": 59,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522023618,
        "id": "8bcd6b0f-8caa-4689-a096-8d727a9b3123",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550800800000,
        "parent_id": "402ef4da-a4e3-4503-ab08-9a4aa56821b5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Syntax"
            ]
          ]
        },
        "type": "sub_header",
        "version": 3,
        "inline_content": [
          {
            "Text": "Syntax"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522023619,
        "id": "4994a319-aa98-46d3-8eaf-ed92dfe8a3dc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550800800000,
        "parent_id": "402ef4da-a4e3-4503-ab08-9a4aa56821b5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "std::shared_ptr\u003cClassType\u003e variableName = std::make_shared\u003cClassType\u003e(arg1, arg2, ...);",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 3,
        "inline_content": [
          {
            "Text": "std::shared_ptr\u003cClassType\u003e variableName = std::make_shared\u003cClassType\u003e(arg1, arg2, ...);",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522023620,
        "id": "a962ec77-5ed5-440f-ac51-572ea8dfd418",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550800800000,
        "parent_id": "402ef4da-a4e3-4503-ab08-9a4aa56821b5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "std::shared_ptr\u003cClassType\u003e variableName (new ClassType(arg1, arg2, ...));",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 3,
        "inline_content": [
          {
            "Text": "std::shared_ptr\u003cClassType\u003e variableName (new ClassType(arg1, arg2, ...));",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522023620,
        "id": "6b86d7e2-8754-4dd0-8dbe-6f6f4af95783",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550800800000,
        "parent_id": "402ef4da-a4e3-4503-ab08-9a4aa56821b5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "std::unique_ptr\u003cClassType\u003e variableName = std::make_unique\u003cClassType\u003e(arg1, arg2, ...);",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " // C++14"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 3,
        "inline_content": [
          {
            "Text": "std::unique_ptr\u003cClassType\u003e variableName = std::make_unique\u003cClassType\u003e(arg1, arg2, ...);",
            "AttrFlags": 2
          },
          {
            "Text": " // C++14"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522023620,
        "id": "a4fc6666-5aed-4515-b570-294e3ab29449",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550800800000,
        "parent_id": "402ef4da-a4e3-4503-ab08-9a4aa56821b5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "std::unique_ptr\u003cClassType\u003e variableName (new ClassType(arg1, arg2, ...));",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 4,
        "inline_content": [
          {
            "Text": "std::unique_ptr\u003cClassType\u003e variableName (new ClassType(arg1, arg2, ...));",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522023620,
        "id": "fdb8caa6-c165-4ec7-9f09-b89f8f40debe",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550800800000,
        "parent_id": "402ef4da-a4e3-4503-ab08-9a4aa56821b5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "C++ is not a memory-managed language. Dynamically allocated memory (i.e. objects created with "
            ],
            [
              "new",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") will be “leaked” if it is not explicitly deallocated (with "
            ],
            [
              "delete",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "). It is the programmer’s responsibility to ensure that the dynamically allocated memory is freed before discarding the last pointer to that object."
            ]
          ]
        },
        "type": "text",
        "version": 3,
        "inline_content": [
          {
            "Text": "C++ is not a memory-managed language. Dynamically allocated memory (i.e. objects created with "
          },
          {
            "Text": "new",
            "AttrFlags": 2
          },
          {
            "Text": ") will be “leaked” if it is not explicitly deallocated (with "
          },
          {
            "Text": "delete",
            "AttrFlags": 2
          },
          {
            "Text": "). It is the programmer’s responsibility to ensure that the dynamically allocated memory is freed before discarding the last pointer to that object."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522023620,
        "id": "3d6fdfa3-c64c-48f7-be4a-62eb606f6e19",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550800800000,
        "parent_id": "402ef4da-a4e3-4503-ab08-9a4aa56821b5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Smart pointers can be used to automatically manage the scope of dynamically allocated memory (i.e. when the last pointer reference goes out of scope it is deleted)."
            ]
          ]
        },
        "type": "text",
        "version": 3,
        "inline_content": [
          {
            "Text": "Smart pointers can be used to automatically manage the scope of dynamically allocated memory (i.e. when the last pointer reference goes out of scope it is deleted)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522023621,
        "id": "1defc7a7-df12-444c-a79a-a4176fe24af2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550800800000,
        "parent_id": "402ef4da-a4e3-4503-ab08-9a4aa56821b5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Smart pointers are preferred over “raw” pointers in most cases. They make the ownership semantics of dynamically allocated memory explicit, by communicating in their names whether an object is intended to be shared or uniquely owned."
            ]
          ]
        },
        "type": "text",
        "version": 3,
        "inline_content": [
          {
            "Text": "Smart pointers are preferred over “raw” pointers in most cases. They make the ownership semantics of dynamically allocated memory explicit, by communicating in their names whether an object is intended to be shared or uniquely owned."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522023621,
        "id": "3b6d600f-bea0-4739-90b0-7485a8a2d805",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550800800000,
        "parent_id": "402ef4da-a4e3-4503-ab08-9a4aa56821b5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Use "
            ],
            [
              "#include \u003cmemory\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to be able to use smart pointers."
            ]
          ]
        },
        "type": "text",
        "version": 3,
        "inline_content": [
          {
            "Text": "Use "
          },
          {
            "Text": "#include \u003cmemory\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " to be able to use smart pointers."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550800800000,
        "id": "2c402093-dfd5-4905-9f52-ee98f2639798",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550800800000,
        "parent_id": "402ef4da-a4e3-4503-ab08-9a4aa56821b5",
        "parent_table": "block",
        "type": "text",
        "version": 4
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522024590,
        "format": {
          "page_full_width": true,
          "page_small_text": true
        },
        "id": "99bed065-9918-4c51-a1eb-841ae4c5127d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550800920000,
        "parent_id": "402ef4da-a4e3-4503-ab08-9a4aa56821b5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Unique ownership (std::unique_ptr)"
            ]
          ]
        },
        "type": "page",
        "version": 26,
        "title": "Unique ownership (std::unique_ptr)",
        "format_page": {
          "page_cover": "",
          "page_cover_position": 0,
          "page_font": "",
          "page_full_width": true,
          "page_icon": "",
          "page_small_text": true
        }
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522025622,
        "format": {
          "page_full_width": true,
          "page_small_text": true
        },
        "id": "98e9c06f-de8c-40a2-b8fc-b1a440076fa9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550800980000,
        "parent_id": "402ef4da-a4e3-4503-ab08-9a4aa56821b5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Sharing ownership std::shared_ptr"
            ]
          ]
        },
        "type": "page",
        "version": 19,
        "title": "Sharing ownership std::shared_ptr",
        "format_page": {
          "page_cover": "",
          "page_cover_position": 0,
          "page_font": "",
          "page_full_width": true,
          "page_icon": "",
          "page_small_text": true
        }
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522026615,
        "format": {
          "page_full_width": true,
          "page_small_text": true
        },
        "id": "2bc888e0-c538-4a3e-8a26-c16026530590",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550801040000,
        "parent_id": "402ef4da-a4e3-4503-ab08-9a4aa56821b5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Sharing with temporary ownership std::weak_ptr"
            ]
          ]
        },
        "type": "page",
        "version": 17,
        "title": "Sharing with temporary ownership std::weak_ptr",
        "format_page": {
          "page_cover": "",
          "page_cover_position": 0,
          "page_font": "",
          "page_full_width": true,
          "page_icon": "",
          "page_small_text": true
        }
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522027668,
        "format": {
          "page_full_width": true,
          "page_small_text": true
        },
        "id": "e8fe82bf-eff7-4f69-9dc8-10b6cd5ce57a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550801040000,
        "parent_id": "402ef4da-a4e3-4503-ab08-9a4aa56821b5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Using custom deleters to create a wrapper to a C interface"
            ]
          ]
        },
        "type": "page",
        "version": 9,
        "title": "Using custom deleters to create a wrapper to a C interface",
        "format_page": {
          "page_cover": "",
          "page_cover_position": 0,
          "page_font": "",
          "page_full_width": true,
          "page_icon": "",
          "page_small_text": true
        }
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522029530,
        "format": {
          "page_full_width": true,
          "page_small_text": true
        },
        "id": "84e68bcf-6c45-47e1-a9db-2ea49a787872",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550801100000,
        "parent_id": "402ef4da-a4e3-4503-ab08-9a4aa56821b5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Casting std::shared_ptr pointers"
            ]
          ]
        },
        "type": "page",
        "version": 14,
        "title": "Casting std::shared_ptr pointers",
        "format_page": {
          "page_cover": "",
          "page_cover_position": 0,
          "page_font": "",
          "page_full_width": true,
          "page_icon": "",
          "page_small_text": true
        }
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522030502,
        "format": {
          "page_full_width": true,
          "page_small_text": true
        },
        "id": "92bf8be1-80dc-466e-a11d-adc259b3da5c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550801100000,
        "parent_id": "402ef4da-a4e3-4503-ab08-9a4aa56821b5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Writing a smart pointer value_ptr"
            ]
          ]
        },
        "type": "page",
        "version": 11,
        "title": "Writing a smart pointer value_ptr",
        "format_page": {
          "page_cover": "",
          "page_cover_position": 0,
          "page_font": "",
          "page_full_width": true,
          "page_icon": "",
          "page_small_text": true
        }
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522031725,
        "format": {
          "page_full_width": true,
          "page_small_text": true
        },
        "id": "cb1e4cb3-b919-4d5f-98ac-d4cb085d2af1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550801160000,
        "parent_id": "402ef4da-a4e3-4503-ab08-9a4aa56821b5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Getting a shared_ptr referring to this"
            ]
          ]
        },
        "type": "page",
        "version": 15,
        "title": "Getting a shared_ptr referring to this",
        "format_page": {
          "page_cover": "",
          "page_cover_position": 0,
          "page_font": "",
          "page_full_width": true,
          "page_icon": "",
          "page_small_text": true
        }
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522028553,
        "format": {
          "page_full_width": true,
          "page_small_text": true
        },
        "id": "29119bc8-4566-43ee-b828-f821874cecfd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552347240000,
        "parent_id": "402ef4da-a4e3-4503-ab08-9a4aa56821b5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Unique ownership without move semantics std::auto_ptr"
            ]
          ]
        },
        "type": "page",
        "version": 24,
        "title": "Unique ownership without move semantics std::auto_ptr",
        "format_page": {
          "page_cover": "",
          "page_cover_position": 0,
          "page_font": "",
          "page_full_width": true,
          "page_icon": "",
          "page_small_text": true
        }
      }
    ],
    "title": "Smart pointers",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}