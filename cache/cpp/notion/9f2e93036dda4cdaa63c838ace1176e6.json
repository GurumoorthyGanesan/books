{
  "ID": "9f2e9303-6dda-4cda-a63c-838ace1176e6",
  "Root": {
    "alive": true,
    "content": [
      "9ddd1e6a-b965-4c23-a4be-2ff3b32e26da",
      "3cf0cabc-6eaa-4f37-90e5-545af9ed0847",
      "28efd4a4-58f3-4a99-86e1-70d06da67c05",
      "27e46a9d-beb2-4687-892a-1d0a7eacce68",
      "639f1aeb-5276-452d-bad3-6465fd6fc216",
      "9674d35e-9322-4e35-b4af-85e12ca799c3",
      "f073a793-91ce-498e-b571-8029b255cb6d",
      "5abf10d7-0b7a-4511-93d6-db028d3b5f3d",
      "dd6acacf-c597-4e82-9189-4b82c33aff04",
      "8cbefd23-9a60-4031-bf4a-cff00e9037c4"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522756852,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "9f2e9303-6dda-4cda-a63c-838ace1176e6",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550736540000,
    "parent_id": "c48a63c8-822c-4a23-a960-60de4face6ae",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "\u0026 - bitwise AND"
        ]
      ]
    },
    "type": "page",
    "version": 11,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522756848,
        "id": "9ddd1e6a-b965-4c23-a4be-2ff3b32e26da",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550736540000,
        "parent_id": "9f2e9303-6dda-4cda-a63c-838ace1176e6",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "int a = 6;     // 0110b  (0x06)\nint b = 10;    // 1010b  (0x0A)\nint c = a \u0026 b; // 0010b  (0x02)\n\nstd::cout \u003c\u003c \"a = \" \u003c\u003c a \u003c\u003c \", b = \" \u003c\u003c b \u003c\u003c \", c = \" \u003c\u003c c \u003c\u003c std::endl;"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "int a = 6;     // 0110b  (0x06)\nint b = 10;    // 1010b  (0x0A)\nint c = a \u0026 b; // 0010b  (0x02)\n\nstd::cout \u003c\u003c \"a = \" \u003c\u003c a \u003c\u003c \", b = \" \u003c\u003c b \u003c\u003c \", c = \" \u003c\u003c c \u003c\u003c std::endl;",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522756850,
        "id": "3cf0cabc-6eaa-4f37-90e5-545af9ed0847",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522756850,
        "parent_id": "9f2e9303-6dda-4cda-a63c-838ace1176e6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Output"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Output"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522756850,
        "id": "28efd4a4-58f3-4a99-86e1-70d06da67c05",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522756850,
        "parent_id": "9f2e9303-6dda-4cda-a63c-838ace1176e6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "a = 6, b = 10, c = 2",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "a = 6, b = 10, c = 2",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522756851,
        "id": "27e46a9d-beb2-4687-892a-1d0a7eacce68",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550736540000,
        "parent_id": "9f2e9303-6dda-4cda-a63c-838ace1176e6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Why",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 3,
        "inline_content": [
          {
            "Text": "Why",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522756851,
        "id": "639f1aeb-5276-452d-bad3-6465fd6fc216",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522756851,
        "parent_id": "9f2e9303-6dda-4cda-a63c-838ace1176e6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A bit wise "
            ],
            [
              "AND",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " operates on the bit level and uses the following Boolean truth table:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A bit wise "
          },
          {
            "Text": "AND",
            "AttrFlags": 2
          },
          {
            "Text": " operates on the bit level and uses the following Boolean truth table:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522756851,
        "id": "9674d35e-9322-4e35-b4af-85e12ca799c3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550736540000,
        "parent_id": "9f2e9303-6dda-4cda-a63c-838ace1176e6",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "TRUE  AND TRUE  = TRUE\nTRUE  AND FALSE = FALSE\nFALSE AND FALSE = FALSE"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "TRUE  AND TRUE  = TRUE\nTRUE  AND FALSE = FALSE\nFALSE AND FALSE = FALSE",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522756851,
        "id": "f073a793-91ce-498e-b571-8029b255cb6d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522756851,
        "parent_id": "9f2e9303-6dda-4cda-a63c-838ace1176e6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When the binary value for "
            ],
            [
              "a",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " ("
            ],
            [
              "0110",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") and the binary value for "
            ],
            [
              "b",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " ("
            ],
            [
              "1010",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") are "
            ],
            [
              "AND",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "’ed together we get the binary value of "
            ],
            [
              "0010",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When the binary value for "
          },
          {
            "Text": "a",
            "AttrFlags": 2
          },
          {
            "Text": " ("
          },
          {
            "Text": "0110",
            "AttrFlags": 2
          },
          {
            "Text": ") and the binary value for "
          },
          {
            "Text": "b",
            "AttrFlags": 2
          },
          {
            "Text": " ("
          },
          {
            "Text": "1010",
            "AttrFlags": 2
          },
          {
            "Text": ") are "
          },
          {
            "Text": "AND",
            "AttrFlags": 2
          },
          {
            "Text": "’ed together we get the binary value of "
          },
          {
            "Text": "0010",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522756851,
        "id": "5abf10d7-0b7a-4511-93d6-db028d3b5f3d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550736540000,
        "parent_id": "9f2e9303-6dda-4cda-a63c-838ace1176e6",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "int a = 0 1 1 0\nint b = 1 0 1 0 \u0026\n        ---------\nint c = 0 0 1 0"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "int a = 0 1 1 0\nint b = 1 0 1 0 \u0026\n        ---------\nint c = 0 0 1 0",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522756852,
        "id": "dd6acacf-c597-4e82-9189-4b82c33aff04",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522756852,
        "parent_id": "9f2e9303-6dda-4cda-a63c-838ace1176e6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The bit wise AND does not change the value of the original values unless specifically assigned to using the bit wise assignment compound operator "
            ],
            [
              "\u0026=",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The bit wise AND does not change the value of the original values unless specifically assigned to using the bit wise assignment compound operator "
          },
          {
            "Text": "\u0026=",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522756852,
        "id": "8cbefd23-9a60-4031-bf4a-cff00e9037c4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550736540000,
        "parent_id": "9f2e9303-6dda-4cda-a63c-838ace1176e6",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "int a = 5;  // 0101b  (0x05)\na \u0026= 10;    // a = 0101b \u0026 1010b"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "int a = 5;  // 0101b  (0x05)\na \u0026= 10;    // a = 0101b \u0026 1010b",
        "code_language": "C++"
      }
    ],
    "title": "\u0026 - bitwise AND",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}