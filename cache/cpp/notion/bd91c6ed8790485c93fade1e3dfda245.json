{
  "ID": "bd91c6ed-8790-485c-93fa-de1e3dfda245",
  "Root": {
    "alive": true,
    "content": [
      "0b1c2c26-e398-4c26-9e53-f0db106ba351",
      "46634bcf-6fb0-43d7-b710-dceb371b8510",
      "ea7332c8-5785-427f-ac1e-492227938c94",
      "ddcb88c2-28e5-4d5f-8576-23c1785af540",
      "41f93f0e-b6eb-4eb6-84cb-9325e24f91f9",
      "14c3e3ff-e882-40ce-b633-009318d665ce",
      "994cdbe2-41bd-41a7-baf7-3a10d4a21ffc",
      "72b81bad-9b7b-4533-a453-85860bb01007",
      "2b446a99-ed49-489f-8c33-52a1d1eaae90",
      "e0233428-6276-4b2f-9f9d-7caf2d1cdc5c"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522035647,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "bd91c6ed-8790-485c-93fa-de1e3dfda245",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550655960000,
    "parent_id": "3b14aac5-20b3-4de0-9a04-adc1cc273aec",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Member Function cv-qualifier Overloading"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522035640,
        "id": "0b1c2c26-e398-4c26-9e53-f0db106ba351",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522035640,
        "parent_id": "bd91c6ed-8790-485c-93fa-de1e3dfda245",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Functions within a class can be overloaded for when they are accessed through a cv-qualified reference to that class; this is most commonly used to overload for "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", but can be used to overload for "
            ],
            [
              "volatile",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "const volatile",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", too. This is because all non-static member functions take "
            ],
            [
              "this",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " as a hidden parameter, which the cv-qualifiers are applied to. This is most commonly used to overload for "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", but can also be used for "
            ],
            [
              "volatile",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "const volatile",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Functions within a class can be overloaded for when they are accessed through a cv-qualified reference to that class; this is most commonly used to overload for "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": ", but can be used to overload for "
          },
          {
            "Text": "volatile",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "const volatile",
            "AttrFlags": 2
          },
          {
            "Text": ", too. This is because all non-static member functions take "
          },
          {
            "Text": "this",
            "AttrFlags": 2
          },
          {
            "Text": " as a hidden parameter, which the cv-qualifiers are applied to. This is most commonly used to overload for "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": ", but can also be used for "
          },
          {
            "Text": "volatile",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "const volatile",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522035643,
        "id": "46634bcf-6fb0-43d7-b710-dceb371b8510",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522035643,
        "parent_id": "bd91c6ed-8790-485c-93fa-de1e3dfda245",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This is necessary because a member function can only be called if it is at least as cv-qualified as the instance it’s called on. While a non-"
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " instance can call both "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and non-"
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " members, a "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " instance can only call "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " members. This allows a function to have different behaviour depending on the calling instance’s cv-qualifiers, and allows the programmer to disallow functions for an undesired cv-qualifier(s) by not providing a version with that qualifier(s)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This is necessary because a member function can only be called if it is at least as cv-qualified as the instance it’s called on. While a non-"
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": " instance can call both "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": " and non-"
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": " members, a "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": " instance can only call "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": " members. This allows a function to have different behaviour depending on the calling instance’s cv-qualifiers, and allows the programmer to disallow functions for an undesired cv-qualifier(s) by not providing a version with that qualifier(s)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522035644,
        "id": "ea7332c8-5785-427f-ac1e-492227938c94",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522035644,
        "parent_id": "bd91c6ed-8790-485c-93fa-de1e3dfda245",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A class with some basic "
            ],
            [
              "print",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method could be "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " overloaded like so:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A class with some basic "
          },
          {
            "Text": "print",
            "AttrFlags": 2
          },
          {
            "Text": " method could be "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": " overloaded like so:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522035644,
        "id": "ddcb88c2-28e5-4d5f-8576-23c1785af540",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522035644,
        "parent_id": "bd91c6ed-8790-485c-93fa-de1e3dfda245",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003ciostream\u003e\n\nclass Integer\n{\n    public:\n        Integer(int i_): i{i_}{}\n\n        void print()\n        {\n            std::cout \u003c\u003c \"int: \" \u003c\u003c i \u003c\u003c std::endl;\n        }\n\n        void print() const\n        {\n            std::cout \u003c\u003c \"const int: \" \u003c\u003c i \u003c\u003c std::endl;\n        }\n\n    protected:\n        int i;\n};\n\nint main()\n{\n    Integer i{5};\n    const Integer \u0026ic = i;\n    \n    i.print(); // prints \"int: 5\"\n    ic.print(); // prints \"const int: 5\"\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003ciostream\u003e\n\nclass Integer\n{\n    public:\n        Integer(int i_): i{i_}{}\n\n        void print()\n        {\n            std::cout \u003c\u003c \"int: \" \u003c\u003c i \u003c\u003c std::endl;\n        }\n\n        void print() const\n        {\n            std::cout \u003c\u003c \"const int: \" \u003c\u003c i \u003c\u003c std::endl;\n        }\n\n    protected:\n        int i;\n};\n\nint main()\n{\n    Integer i{5};\n    const Integer \u0026ic = i;\n    \n    i.print(); // prints \"int: 5\"\n    ic.print(); // prints \"const int: 5\"\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522035644,
        "id": "41f93f0e-b6eb-4eb6-84cb-9325e24f91f9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522035644,
        "parent_id": "bd91c6ed-8790-485c-93fa-de1e3dfda245",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This is a key tenet of "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " correctness: By marking member functions as "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", they are allowed to be called on "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " instances, which in turn allows functions to take instances as "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " pointers/references if they don’t need to modify them. This allows code to specify whether it modifies state by taking unmodified parameters as "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and modified parameters without cv-qualifiers, making code both safer and more readable."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This is a key tenet of "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": " correctness: By marking member functions as "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": ", they are allowed to be called on "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": " instances, which in turn allows functions to take instances as "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": " pointers/references if they don’t need to modify them. This allows code to specify whether it modifies state by taking unmodified parameters as "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": " and modified parameters without cv-qualifiers, making code both safer and more readable."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522035645,
        "id": "14c3e3ff-e882-40ce-b633-009318d665ce",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522035645,
        "parent_id": "bd91c6ed-8790-485c-93fa-de1e3dfda245",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class ConstCorrect \n{\n  public:\n    void good_func() const \n    {\n        std::cout \u003c\u003c \"I care not whether the instance is const.\" \u003c\u003c std::endl;\n    }\n\n    void bad_func() \n    {\n        std::cout \u003c\u003c \"I can only be called on non-const, non-volatile instances.\" \u003c\u003c std::endl;\n    }\n};\n\nvoid i_change_no_state(const ConstCorrect\u0026 cc) \n{\n    std::cout \u003c\u003c \"I can take either a const or a non-const ConstCorrect.\" \u003c\u003c std::endl;\n    cc.good_func(); // Good.  Can be called from const or non-const instance.\n    cc.bad_func();  // Error.  Can only be called from non-const instance.\n}\n\nvoid const_incorrect_func(ConstCorrect\u0026 cc) \n{\n    cc.good_func(); // Good.  Can be called from const or non-const instance.\n    cc.bad_func();  // Good.  Can only be called from non-const instance.\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class ConstCorrect \n{\n  public:\n    void good_func() const \n    {\n        std::cout \u003c\u003c \"I care not whether the instance is const.\" \u003c\u003c std::endl;\n    }\n\n    void bad_func() \n    {\n        std::cout \u003c\u003c \"I can only be called on non-const, non-volatile instances.\" \u003c\u003c std::endl;\n    }\n};\n\nvoid i_change_no_state(const ConstCorrect\u0026 cc) \n{\n    std::cout \u003c\u003c \"I can take either a const or a non-const ConstCorrect.\" \u003c\u003c std::endl;\n    cc.good_func(); // Good.  Can be called from const or non-const instance.\n    cc.bad_func();  // Error.  Can only be called from non-const instance.\n}\n\nvoid const_incorrect_func(ConstCorrect\u0026 cc) \n{\n    cc.good_func(); // Good.  Can be called from const or non-const instance.\n    cc.bad_func();  // Good.  Can only be called from non-const instance.\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522035645,
        "id": "994cdbe2-41bd-41a7-baf7-3a10d4a21ffc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522035645,
        "parent_id": "bd91c6ed-8790-485c-93fa-de1e3dfda245",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A common usage of this is declaring accessors as "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", and mutators as non-"
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A common usage of this is declaring accessors as "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": ", and mutators as non-"
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522035645,
        "id": "72b81bad-9b7b-4533-a453-85860bb01007",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522035645,
        "parent_id": "bd91c6ed-8790-485c-93fa-de1e3dfda245",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522035647,
        "id": "2b446a99-ed49-489f-8c33-52a1d1eaae90",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522035647,
        "parent_id": "bd91c6ed-8790-485c-93fa-de1e3dfda245",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "No class members can be modified within a "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " member function. If there is some member that you really need to modify, such as locking a "
            ],
            [
              "std::mutex",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", you can declare it as "
            ],
            [
              "mutable",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%2B%2B/2705/mutable-keyword#t=201608042103196324218"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "No class members can be modified within a "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": " member function. If there is some member that you really need to modify, such as locking a "
          },
          {
            "Text": "std::mutex",
            "AttrFlags": 2
          },
          {
            "Text": ", you can declare it as "
          },
          {
            "Text": "mutable",
            "AttrFlags": 2,
            "Link": "http://stackoverflow.com/documentation/c%2B%2B/2705/mutable-keyword#t=201608042103196324218"
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522035647,
        "id": "e0233428-6276-4b2f-9f9d-7caf2d1cdc5c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522035647,
        "parent_id": "bd91c6ed-8790-485c-93fa-de1e3dfda245",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class Integer\n{\n    public:\n        Integer(int i_): i{i_}{}\n\n        int get() const\n        {\n            std::lock_guard\u003cstd::mutex\u003e lock{mut};\n            return i;\n        }\n\n        void set(int i_)\n        {\n            std::lock_guard\u003cstd::mutex\u003e lock{mut};\n            i = i_;\n        }\n\n    protected:\n        int i;\n        mutable std::mutex mut;\n};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class Integer\n{\n    public:\n        Integer(int i_): i{i_}{}\n\n        int get() const\n        {\n            std::lock_guard\u003cstd::mutex\u003e lock{mut};\n            return i;\n        }\n\n        void set(int i_)\n        {\n            std::lock_guard\u003cstd::mutex\u003e lock{mut};\n            i = i_;\n        }\n\n    protected:\n        int i;\n        mutable std::mutex mut;\n};",
        "code_language": "Plain Text"
      }
    ],
    "title": "Member Function cv-qualifier Overloading",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}