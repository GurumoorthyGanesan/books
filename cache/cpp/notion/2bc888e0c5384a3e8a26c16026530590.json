{
  "ID": "2bc888e0-c538-4a3e-8a26-c16026530590",
  "Root": {
    "alive": true,
    "content": [
      "f03fde8c-c533-4c68-b240-5374a4c639c3",
      "b54dafbf-aae1-453c-94d4-af0b1fcb0798",
      "d32a51ea-7b47-44c9-9716-b218a341e50e",
      "1c185d20-8a91-47e5-8323-6b6a97bc7f22",
      "073be94f-4afc-47f2-a28b-9dee1d888d4d",
      "334774cf-13f4-4724-848b-8a2578127305",
      "2cbc257e-3c7b-4f62-80eb-1ad618c7a44e",
      "0e3cf93f-c5bb-4415-b8a2-c8f24420dd6b",
      "707a2d07-cb96-49b6-9c71-738f55762316",
      "c6f82eac-5862-4307-ad97-363363660f91"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522026615,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "2bc888e0-c538-4a3e-8a26-c16026530590",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550656020000,
    "parent_id": "402ef4da-a4e3-4503-ab08-9a4aa56821b5",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Sharing with temporary ownership std weak ptr"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522026613,
        "id": "f03fde8c-c533-4c68-b240-5374a4c639c3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522026613,
        "parent_id": "2bc888e0-c538-4a3e-8a26-c16026530590",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Instances of "
            ],
            [
              "std::weak_ptr",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://en.cppreference.com/w/cpp/memory/weak_ptr"
                ]
              ]
            ],
            [
              " can point to objects owned by instances of "
            ],
            [
              "std::shared_ptr",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://en.cppreference.com/w/cpp/memory/shared_ptr"
                ]
              ]
            ],
            [
              " while only becoming temporary owners themselves. This means that weak pointers do not alter the object’s reference count and therefore do not prevent an object’s deletion if all of the object’s shared pointers are reassigned or destroyed."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Instances of "
          },
          {
            "Text": "std::weak_ptr",
            "AttrFlags": 2,
            "Link": "http://en.cppreference.com/w/cpp/memory/weak_ptr"
          },
          {
            "Text": " can point to objects owned by instances of "
          },
          {
            "Text": "std::shared_ptr",
            "AttrFlags": 2,
            "Link": "http://en.cppreference.com/w/cpp/memory/shared_ptr"
          },
          {
            "Text": " while only becoming temporary owners themselves. This means that weak pointers do not alter the object’s reference count and therefore do not prevent an object’s deletion if all of the object’s shared pointers are reassigned or destroyed."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522026613,
        "id": "b54dafbf-aae1-453c-94d4-af0b1fcb0798",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522026613,
        "parent_id": "2bc888e0-c538-4a3e-8a26-c16026530590",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522026613,
        "id": "d32a51ea-7b47-44c9-9716-b218a341e50e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522026613,
        "parent_id": "2bc888e0-c538-4a3e-8a26-c16026530590",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In the following example instances of "
            ],
            [
              "std::weak_ptr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " are used so that the destruction of a tree object is not inhibited:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In the following example instances of "
          },
          {
            "Text": "std::weak_ptr",
            "AttrFlags": 2
          },
          {
            "Text": " are used so that the destruction of a tree object is not inhibited:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522026613,
        "id": "1c185d20-8a91-47e5-8323-6b6a97bc7f22",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522026613,
        "parent_id": "2bc888e0-c538-4a3e-8a26-c16026530590",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cmemory\u003e\n#include \u003cvector\u003e\n\nstruct TreeNode {\n    std::weak_ptr\u003cTreeNode\u003e parent;\n    std::vector\u003c std::shared_ptr\u003cTreeNode\u003e \u003e children;\n};\n\nint main() {\n    // Create a TreeNode to serve as the root/parent.\n    std::shared_ptr\u003cTreeNode\u003e root(new TreeNode);\n\n    // Give the parent 100 child nodes.\n    for (size_t i = 0; i \u003c 100; ++i) {\n        std::shared_ptr\u003cTreeNode\u003e child(new TreeNode);\n        root-\u003echildren.push_back(child);\n        child-\u003eparent = root;\n    }\n\n    // Reset the root shared pointer, destroying the root object, and\n    // subsequently its child nodes.\n    root.reset();\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cmemory\u003e\n#include \u003cvector\u003e\n\nstruct TreeNode {\n    std::weak_ptr\u003cTreeNode\u003e parent;\n    std::vector\u003c std::shared_ptr\u003cTreeNode\u003e \u003e children;\n};\n\nint main() {\n    // Create a TreeNode to serve as the root/parent.\n    std::shared_ptr\u003cTreeNode\u003e root(new TreeNode);\n\n    // Give the parent 100 child nodes.\n    for (size_t i = 0; i \u003c 100; ++i) {\n        std::shared_ptr\u003cTreeNode\u003e child(new TreeNode);\n        root-\u003echildren.push_back(child);\n        child-\u003eparent = root;\n    }\n\n    // Reset the root shared pointer, destroying the root object, and\n    // subsequently its child nodes.\n    root.reset();\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522026614,
        "id": "073be94f-4afc-47f2-a28b-9dee1d888d4d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522026614,
        "parent_id": "2bc888e0-c538-4a3e-8a26-c16026530590",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As child nodes are added to the root node’s children, their "
            ],
            [
              "std::weak_ptr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " member "
            ],
            [
              "parent",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is set to the root node. The member "
            ],
            [
              "parent",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is declared as a weak pointer as opposed to a shared pointer such that the root node’s reference count is not incremented. When the root node is reset at the end of "
            ],
            [
              "main()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", the root is destroyed. Since the only remaining "
            ],
            [
              "std::shared_ptr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " references to the child nodes were contained in the root’s collection "
            ],
            [
              "children",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", all child nodes are subsequently destroyed as well."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "As child nodes are added to the root node’s children, their "
          },
          {
            "Text": "std::weak_ptr",
            "AttrFlags": 2
          },
          {
            "Text": " member "
          },
          {
            "Text": "parent",
            "AttrFlags": 2
          },
          {
            "Text": " is set to the root node. The member "
          },
          {
            "Text": "parent",
            "AttrFlags": 2
          },
          {
            "Text": " is declared as a weak pointer as opposed to a shared pointer such that the root node’s reference count is not incremented. When the root node is reset at the end of "
          },
          {
            "Text": "main()",
            "AttrFlags": 2
          },
          {
            "Text": ", the root is destroyed. Since the only remaining "
          },
          {
            "Text": "std::shared_ptr",
            "AttrFlags": 2
          },
          {
            "Text": " references to the child nodes were contained in the root’s collection "
          },
          {
            "Text": "children",
            "AttrFlags": 2
          },
          {
            "Text": ", all child nodes are subsequently destroyed as well."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522026615,
        "id": "334774cf-13f4-4724-848b-8a2578127305",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522026615,
        "parent_id": "2bc888e0-c538-4a3e-8a26-c16026530590",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Due to control block implementation details, shared_ptr allocated memory may not be released until "
            ],
            [
              "shared_ptr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " reference counter and "
            ],
            [
              "weak_ptr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " reference counter both reach zero."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Due to control block implementation details, shared_ptr allocated memory may not be released until "
          },
          {
            "Text": "shared_ptr",
            "AttrFlags": 2
          },
          {
            "Text": " reference counter and "
          },
          {
            "Text": "weak_ptr",
            "AttrFlags": 2
          },
          {
            "Text": " reference counter both reach zero."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522026615,
        "id": "2cbc257e-3c7b-4f62-80eb-1ad618c7a44e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522026615,
        "parent_id": "2bc888e0-c538-4a3e-8a26-c16026530590",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cmemory\u003e\nint main()\n{\n    {\n         std::weak_ptr\u003cint\u003e wk;\n         {\n             // std::make_shared is optimized by allocating only once \n             // while std::shared_ptr\u003cint\u003e(new int(42)) allocates twice.\n             // Drawback of std::make_shared is that control block is tied to our integer\n             std::shared_ptr\u003cint\u003e sh = std::make_shared\u003cint\u003e(42);\n             wk = sh;\n             // sh memory should be released at this point...\n         }\n         // ... but wk is still alive and needs access to control block\n     }\n     // now memory is released (sh and wk)\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cmemory\u003e\nint main()\n{\n    {\n         std::weak_ptr\u003cint\u003e wk;\n         {\n             // std::make_shared is optimized by allocating only once \n             // while std::shared_ptr\u003cint\u003e(new int(42)) allocates twice.\n             // Drawback of std::make_shared is that control block is tied to our integer\n             std::shared_ptr\u003cint\u003e sh = std::make_shared\u003cint\u003e(42);\n             wk = sh;\n             // sh memory should be released at this point...\n         }\n         // ... but wk is still alive and needs access to control block\n     }\n     // now memory is released (sh and wk)\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522026615,
        "id": "0e3cf93f-c5bb-4415-b8a2-c8f24420dd6b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522026615,
        "parent_id": "2bc888e0-c538-4a3e-8a26-c16026530590",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522026615,
        "id": "707a2d07-cb96-49b6-9c71-738f55762316",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522026615,
        "parent_id": "2bc888e0-c538-4a3e-8a26-c16026530590",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Since "
            ],
            [
              "std::weak_ptr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " does not keep its referenced object alive, direct data access through a "
            ],
            [
              "std::weak_ptr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is not possible. Instead it provides a "
            ],
            [
              "lock()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " member function that attempts to retrieve a "
            ],
            [
              "std::shared_ptr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to the referenced object:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Since "
          },
          {
            "Text": "std::weak_ptr",
            "AttrFlags": 2
          },
          {
            "Text": " does not keep its referenced object alive, direct data access through a "
          },
          {
            "Text": "std::weak_ptr",
            "AttrFlags": 2
          },
          {
            "Text": " is not possible. Instead it provides a "
          },
          {
            "Text": "lock()",
            "AttrFlags": 2
          },
          {
            "Text": " member function that attempts to retrieve a "
          },
          {
            "Text": "std::shared_ptr",
            "AttrFlags": 2
          },
          {
            "Text": " to the referenced object:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522026615,
        "id": "c6f82eac-5862-4307-ad97-363363660f91",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522026615,
        "parent_id": "2bc888e0-c538-4a3e-8a26-c16026530590",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003ccassert\u003e\n#include \u003cmemory\u003e\nint main()\n{\n    {\n         std::weak_ptr\u003cint\u003e wk;\n         std::shared_ptr\u003cint\u003e sp;\n         {\n             std::shared_ptr\u003cint\u003e sh = std::make_shared\u003cint\u003e(42);\n             wk = sh;\n             // calling lock will create a shared_ptr to the object referenced by wk\n             sp = wk.lock();\n             // sh will be destroyed after this point, but sp is still alive\n         }\n         // sp still keeps the data alive.\n         // At this point we could even call lock() again \n         // to retrieve another shared_ptr to the same data from wk\n         assert(*sp == 42);\n         assert(!wk.expired());\n         // resetting sp will delete the data,\n         // as it is currently the last shared_ptr with ownership\n         sp.reset();\n         // attempting to lock wk now will return an empty shared_ptr,\n         // as the data has already been deleted\n         sp = wk.lock();\n         assert(!sp);\n         assert(wk.expired());\n     }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003ccassert\u003e\n#include \u003cmemory\u003e\nint main()\n{\n    {\n         std::weak_ptr\u003cint\u003e wk;\n         std::shared_ptr\u003cint\u003e sp;\n         {\n             std::shared_ptr\u003cint\u003e sh = std::make_shared\u003cint\u003e(42);\n             wk = sh;\n             // calling lock will create a shared_ptr to the object referenced by wk\n             sp = wk.lock();\n             // sh will be destroyed after this point, but sp is still alive\n         }\n         // sp still keeps the data alive.\n         // At this point we could even call lock() again \n         // to retrieve another shared_ptr to the same data from wk\n         assert(*sp == 42);\n         assert(!wk.expired());\n         // resetting sp will delete the data,\n         // as it is currently the last shared_ptr with ownership\n         sp.reset();\n         // attempting to lock wk now will return an empty shared_ptr,\n         // as the data has already been deleted\n         sp = wk.lock();\n         assert(!sp);\n         assert(wk.expired());\n     }\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "Sharing with temporary ownership std weak ptr",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}