{
  "ID": "0f9f293d-517f-446d-84e8-e6fdb7003f9c",
  "Root": {
    "alive": true,
    "content": [
      "d09e9b07-6200-4f48-8666-783606527780",
      "b9be1908-67f7-4687-9be2-043388a694d5",
      "6ce01d52-3119-4f3c-b73a-ae9b80dc37ca",
      "9260cf38-4d35-4726-9f90-36fba11a0d8e",
      "740a9bf7-3a20-425b-bf6d-6e05dead12a9",
      "f06d7e83-6b3b-4c42-90e7-f305894c4034",
      "3f2c47ff-41ae-4f5c-b28b-ba02de43ba46",
      "9afdf058-34c2-4a70-bdb7-a7fb862e8a1a",
      "038ad71a-9d88-4dc5-b3f3-e1478a27155e",
      "69c03245-7c93-46a4-a63e-a09450561905"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550525162488,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "0f9f293d-517f-446d-84e8-e6fdb7003f9c",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551689011316,
    "parent_id": "6dc44543-880c-4829-bd86-818b80f5aac6",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Arithmetic types"
        ]
      ]
    },
    "type": "page",
    "version": 4,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525162485,
        "id": "d09e9b07-6200-4f48-8666-783606527780",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525162485,
        "parent_id": "0f9f293d-517f-446d-84e8-e6fdb7003f9c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Narrow character types"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Narrow character types"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525162486,
        "id": "b9be1908-67f7-4687-9be2-043388a694d5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525162486,
        "parent_id": "0f9f293d-517f-446d-84e8-e6fdb7003f9c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "unsigned char",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " type uses all bits to represent a binary number. Therefore, for example, if "
            ],
            [
              "unsigned char",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is 8 bits long, then the 256 possible bit patterns of a "
            ],
            [
              "char",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " object represent the 256 different values {0, 1, …, 255}. The number 42 is guaranteed to be represented by the bit pattern "
            ],
            [
              "00101010",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "unsigned char",
            "AttrFlags": 2
          },
          {
            "Text": " type uses all bits to represent a binary number. Therefore, for example, if "
          },
          {
            "Text": "unsigned char",
            "AttrFlags": 2
          },
          {
            "Text": " is 8 bits long, then the 256 possible bit patterns of a "
          },
          {
            "Text": "char",
            "AttrFlags": 2
          },
          {
            "Text": " object represent the 256 different values {0, 1, …, 255}. The number 42 is guaranteed to be represented by the bit pattern "
          },
          {
            "Text": "00101010",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525162486,
        "id": "6ce01d52-3119-4f3c-b73a-ae9b80dc37ca",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525162486,
        "parent_id": "0f9f293d-517f-446d-84e8-e6fdb7003f9c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "signed char",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " type has no padding bits, "
            ],
            [
              "i.e.,",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " if "
            ],
            [
              "signed char",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is 8 bits long, then it has 8 bits of capacity to represent a number."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "signed char",
            "AttrFlags": 2
          },
          {
            "Text": " type has no padding bits, "
          },
          {
            "Text": "i.e.,",
            "AttrFlags": 4
          },
          {
            "Text": " if "
          },
          {
            "Text": "signed char",
            "AttrFlags": 2
          },
          {
            "Text": " is 8 bits long, then it has 8 bits of capacity to represent a number."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525162486,
        "id": "9260cf38-4d35-4726-9f90-36fba11a0d8e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525162486,
        "parent_id": "0f9f293d-517f-446d-84e8-e6fdb7003f9c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note that these guarantees do not apply to types other than narrow character types."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note that these guarantees do not apply to types other than narrow character types."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525162486,
        "id": "740a9bf7-3a20-425b-bf6d-6e05dead12a9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525162486,
        "parent_id": "0f9f293d-517f-446d-84e8-e6fdb7003f9c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Integer types"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Integer types"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525162486,
        "id": "f06d7e83-6b3b-4c42-90e7-f305894c4034",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525162486,
        "parent_id": "0f9f293d-517f-446d-84e8-e6fdb7003f9c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The unsigned integer types use a pure binary system, but may contain padding bits. For example, it is possible (though unlikely) for "
            ],
            [
              "unsigned int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to be 64 bits long but only be capable of storing integers between 0 and 232 - 1, inclusive. The other 32 bits would be padding bits, which should not be written to directly."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The unsigned integer types use a pure binary system, but may contain padding bits. For example, it is possible (though unlikely) for "
          },
          {
            "Text": "unsigned int",
            "AttrFlags": 2
          },
          {
            "Text": " to be 64 bits long but only be capable of storing integers between 0 and 232 - 1, inclusive. The other 32 bits would be padding bits, which should not be written to directly."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525162487,
        "id": "3f2c47ff-41ae-4f5c-b28b-ba02de43ba46",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525162487,
        "parent_id": "0f9f293d-517f-446d-84e8-e6fdb7003f9c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The signed integer types use a binary system with a sign bit and possibly padding bits. Values that belong to the common range of a signed integer type and the corresponding unsigned integer type have the same representation. For example, if the bit pattern "
            ],
            [
              "0001010010101011",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " of an "
            ],
            [
              "unsigned short",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " object represents the value "
            ],
            [
              "5291",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", then it also represents the value "
            ],
            [
              "5291",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " when interpreted as a "
            ],
            [
              "short",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " object."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The signed integer types use a binary system with a sign bit and possibly padding bits. Values that belong to the common range of a signed integer type and the corresponding unsigned integer type have the same representation. For example, if the bit pattern "
          },
          {
            "Text": "0001010010101011",
            "AttrFlags": 2
          },
          {
            "Text": " of an "
          },
          {
            "Text": "unsigned short",
            "AttrFlags": 2
          },
          {
            "Text": " object represents the value "
          },
          {
            "Text": "5291",
            "AttrFlags": 2
          },
          {
            "Text": ", then it also represents the value "
          },
          {
            "Text": "5291",
            "AttrFlags": 2
          },
          {
            "Text": " when interpreted as a "
          },
          {
            "Text": "short",
            "AttrFlags": 2
          },
          {
            "Text": " object."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525162487,
        "id": "9afdf058-34c2-4a70-bdb7-a7fb862e8a1a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525162487,
        "parent_id": "0f9f293d-517f-446d-84e8-e6fdb7003f9c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It is implementation-defined whether a two’s complement, one’s complement, or sign-magnitude representation is used, since all three systems satisfy the requirement in the previous paragraph."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It is implementation-defined whether a two’s complement, one’s complement, or sign-magnitude representation is used, since all three systems satisfy the requirement in the previous paragraph."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525162487,
        "id": "038ad71a-9d88-4dc5-b3f3-e1478a27155e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525162487,
        "parent_id": "0f9f293d-517f-446d-84e8-e6fdb7003f9c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Floating point types"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Floating point types"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525162487,
        "id": "69c03245-7c93-46a4-a63e-a09450561905",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525162487,
        "parent_id": "0f9f293d-517f-446d-84e8-e6fdb7003f9c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The value representation of floating point types is implementation-defined. Most commonly, the "
            ],
            [
              "float",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "double",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " types conform to IEEE 754 and are 32 and 64 bits long (so, for example, "
            ],
            [
              "float",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " would have 23 bits of precision which would follow 8 exponent bits and 1 sign bit). However, the standard does not guarantee anything. Floating point types often have “trap representations”, which cause errors when they are used in calculations."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The value representation of floating point types is implementation-defined. Most commonly, the "
          },
          {
            "Text": "float",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "double",
            "AttrFlags": 2
          },
          {
            "Text": " types conform to IEEE 754 and are 32 and 64 bits long (so, for example, "
          },
          {
            "Text": "float",
            "AttrFlags": 2
          },
          {
            "Text": " would have 23 bits of precision which would follow 8 exponent bits and 1 sign bit). However, the standard does not guarantee anything. Floating point types often have “trap representations”, which cause errors when they are used in calculations."
          }
        ]
      }
    ],
    "title": "Arithmetic types",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}