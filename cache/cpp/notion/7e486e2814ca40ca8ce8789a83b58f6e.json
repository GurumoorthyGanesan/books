{
  "ID": "7e486e28-14ca-40ca-8ce8-789a83b58f6e",
  "Root": {
    "alive": true,
    "content": [
      "1381f3ab-78ed-4ca4-960e-f05fbce288ab",
      "f1b96c26-e5bb-4b94-acf5-0f68b27be75a",
      "c7771ff3-11e2-4463-a722-d3d24319186a",
      "8b58b72c-b450-4423-b18e-df89a72fba26"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522312915,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "7e486e28-14ca-40ca-8ce8-789a83b58f6e",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550655060000,
    "parent_id": "0b17f7b9-11d1-4229-931e-966fb51d1ba9",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "trailing decltype in function templates"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522312910,
        "id": "1381f3ab-78ed-4ca4-960e-f05fbce288ab",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522312910,
        "parent_id": "7e486e28-14ca-40ca-8ce8-789a83b58f6e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "One of constraining function is to use trailing "
            ],
            [
              "decltype",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to specify the return type:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "One of constraining function is to use trailing "
          },
          {
            "Text": "decltype",
            "AttrFlags": 2
          },
          {
            "Text": " to specify the return type:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522312913,
        "id": "f1b96c26-e5bb-4b94-acf5-0f68b27be75a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522312913,
        "parent_id": "7e486e28-14ca-40ca-8ce8-789a83b58f6e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "namespace details {\n   using std::to_string;\n\n   // this one is constrained on being able to call to_string(T)\n   template \u003cclass T\u003e\n   auto convert_to_string(T const\u0026 val, int )\n       -\u003e decltype(to_string(val))\n   {\n       return to_string(val);\n   }\n\n   // this one is unconstrained, but less preferred due to the ellipsis argument\n   template \u003cclass T\u003e\n   std::string convert_to_string(T const\u0026 val, ... )\n   {\n       std::ostringstream oss;\n       oss \u003c\u003c val;\n       return oss.str();\n   }\n}\n\ntemplate \u003cclass T\u003e\nstd::string convert_to_string(T const\u0026 val)\n{\n    return details::convert_to_string(val, 0);\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "namespace details {\n   using std::to_string;\n\n   // this one is constrained on being able to call to_string(T)\n   template \u003cclass T\u003e\n   auto convert_to_string(T const\u0026 val, int )\n       -\u003e decltype(to_string(val))\n   {\n       return to_string(val);\n   }\n\n   // this one is unconstrained, but less preferred due to the ellipsis argument\n   template \u003cclass T\u003e\n   std::string convert_to_string(T const\u0026 val, ... )\n   {\n       std::ostringstream oss;\n       oss \u003c\u003c val;\n       return oss.str();\n   }\n}\n\ntemplate \u003cclass T\u003e\nstd::string convert_to_string(T const\u0026 val)\n{\n    return details::convert_to_string(val, 0);\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522312914,
        "id": "c7771ff3-11e2-4463-a722-d3d24319186a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522312914,
        "parent_id": "7e486e28-14ca-40ca-8ce8-789a83b58f6e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If I call "
            ],
            [
              "convert_to_string()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " with an argument with which I can invoke "
            ],
            [
              "to_string()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", then I have two viable functions for "
            ],
            [
              "details::convert_to_string()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". The first is preferred since the conversion from "
            ],
            [
              "0",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is a better implicit conversion sequence than the conversion from "
            ],
            [
              "0",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to "
            ],
            [
              "...",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If I call "
          },
          {
            "Text": "convert_to_string()",
            "AttrFlags": 2
          },
          {
            "Text": " with an argument with which I can invoke "
          },
          {
            "Text": "to_string()",
            "AttrFlags": 2
          },
          {
            "Text": ", then I have two viable functions for "
          },
          {
            "Text": "details::convert_to_string()",
            "AttrFlags": 2
          },
          {
            "Text": ". The first is preferred since the conversion from "
          },
          {
            "Text": "0",
            "AttrFlags": 2
          },
          {
            "Text": " to "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": " is a better implicit conversion sequence than the conversion from "
          },
          {
            "Text": "0",
            "AttrFlags": 2
          },
          {
            "Text": " to "
          },
          {
            "Text": "...",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522312915,
        "id": "8b58b72c-b450-4423-b18e-df89a72fba26",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522312915,
        "parent_id": "7e486e28-14ca-40ca-8ce8-789a83b58f6e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If I call "
            ],
            [
              "convert_to_string()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " with an argument from which I cannot invoke "
            ],
            [
              "to_string()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", then the first function template instantiation leads to substitution failure (there is no "
            ],
            [
              "decltype(to_string(val))",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "). As a result, that candidate is removed from the overload set. The second function template is unconstrained, so it is selected and we instead go through "
            ],
            [
              "operator\u003c\u003c(std::ostream\u0026, T)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". If that one is undefined, then we have a hard compile error with a template stack on the line "
            ],
            [
              "oss \u003c\u003c val",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If I call "
          },
          {
            "Text": "convert_to_string()",
            "AttrFlags": 2
          },
          {
            "Text": " with an argument from which I cannot invoke "
          },
          {
            "Text": "to_string()",
            "AttrFlags": 2
          },
          {
            "Text": ", then the first function template instantiation leads to substitution failure (there is no "
          },
          {
            "Text": "decltype(to_string(val))",
            "AttrFlags": 2
          },
          {
            "Text": "). As a result, that candidate is removed from the overload set. The second function template is unconstrained, so it is selected and we instead go through "
          },
          {
            "Text": "operator\u003c\u003c(std::ostream\u0026, T)",
            "AttrFlags": 2
          },
          {
            "Text": ". If that one is undefined, then we have a hard compile error with a template stack on the line "
          },
          {
            "Text": "oss \u003c\u003c val",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      }
    ],
    "title": "trailing decltype in function templates",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}