{
  "ID": "32a3d772-d3d2-444c-807e-c089c85fe9b3",
  "Root": {
    "alive": true,
    "content": [
      "35094dbe-cdec-4077-90e3-2263ffd350df",
      "465406d6-7df1-4238-9ef7-f57de94f8608",
      "3206f056-b9bb-4317-aff4-4fbf0d7fec87",
      "84a369af-180e-4494-af78-64b5c65a7173",
      "3f7c72a1-a398-4772-821e-b65c4c905b06",
      "ffe02ab4-fef4-4942-a5f6-dd0e802f6cc1",
      "d124b0bd-6c6e-4f51-a91d-9bd28e9b6669"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522340571,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "32a3d772-d3d2-444c-807e-c089c85fe9b3",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550709660000,
    "parent_id": "5a1044bb-eec6-47e0-932c-1a000fc67e20",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Nested exception"
        ]
      ]
    },
    "type": "page",
    "version": 7,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522340567,
        "id": "35094dbe-cdec-4077-90e3-2263ffd350df",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522340567,
        "parent_id": "32a3d772-d3d2-444c-807e-c089c85fe9b3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "During exception handling there is a common use case when you catch a generic exception from a low-level function (such as a filesystem error or data transfer error) and throw a more specific high-level exception which indicates that some high-level operation could not be performed (such as being unable to publish a photo on Web). This allows exception handling to react to specific problems with high level operations and also allows, having only error an message, the programmer to find a place in the application where an exception occurred. Downside of this solution is that exception callstack is truncated and original exception is lost. This forces developers to manually include text of original exception into a newly created one."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "During exception handling there is a common use case when you catch a generic exception from a low-level function (such as a filesystem error or data transfer error) and throw a more specific high-level exception which indicates that some high-level operation could not be performed (such as being unable to publish a photo on Web). This allows exception handling to react to specific problems with high level operations and also allows, having only error an message, the programmer to find a place in the application where an exception occurred. Downside of this solution is that exception callstack is truncated and original exception is lost. This forces developers to manually include text of original exception into a newly created one."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522340570,
        "id": "465406d6-7df1-4238-9ef7-f57de94f8608",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522340570,
        "parent_id": "32a3d772-d3d2-444c-807e-c089c85fe9b3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Nested exceptions aim to solve the problem by attaching low-level exception, which describes the cause, to a high level exception, which describes what it means in this particular case."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Nested exceptions aim to solve the problem by attaching low-level exception, which describes the cause, to a high level exception, which describes what it means in this particular case."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522340570,
        "id": "3206f056-b9bb-4317-aff4-4fbf0d7fec87",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522340570,
        "parent_id": "32a3d772-d3d2-444c-807e-c089c85fe9b3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "std::nested_exception",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " allows to nest exceptions thanks to "
            ],
            [
              "std::throw_with_nested",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "std::nested_exception",
            "AttrFlags": 2
          },
          {
            "Text": " allows to nest exceptions thanks to "
          },
          {
            "Text": "std::throw_with_nested",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522340571,
        "id": "84a369af-180e-4494-af78-64b5c65a7173",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522340571,
        "parent_id": "32a3d772-d3d2-444c-807e-c089c85fe9b3",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cstdexcept\u003e\n#include \u003cexception\u003e\n#include \u003cstring\u003e\n#include \u003cfstream\u003e\n#include \u003ciostream\u003e\n\nstruct MyException\n{\n    MyException(const std::string\u0026 message) : message(message) {}\n    std::string message;\n};\n\nvoid print_current_exception(int level)\n{\n    try {\n        throw;\n    } catch (const std::exception\u0026 e) {\n        std::cerr \u003c\u003c std::string(level, ' ') \u003c\u003c \"exception: \" \u003c\u003c e.what() \u003c\u003c '\\n';\n    } catch (const MyException\u0026 e) {\n        std::cerr \u003c\u003c std::string(level, ' ') \u003c\u003c \"MyException: \" \u003c\u003c e.message \u003c\u003c '\\n';\n    } catch (...) {\n        std::cerr \u003c\u003c \"Unkown exception\\n\";\n    }\n}\n\nvoid print_current_exception_with_nested(int level =  0)\n{\n    try {\n        throw;\n    } catch (...) {\n        print_current_exception(level);\n    }    \n    try {\n        throw;\n    } catch (const std::nested_exception\u0026 nested) {\n        try {\n            nested.rethrow_nested();\n        } catch (...) {\n            print_current_exception_with_nested(level + 1); // recursion\n        }\n    } catch (...) {\n        //Empty // End recursion\n    }\n}\n\n// sample function that catches an exception and wraps it in a nested exception\nvoid open_file(const std::string\u0026 s)\n{\n    try {\n        std::ifstream file(s);\n        file.exceptions(std::ios_base::failbit);\n    } catch(...) {\n        std::throw_with_nested(MyException{\"Couldn't open \" + s});\n    }\n}\n \n// sample function that catches an exception and wraps it in a nested exception\nvoid run()\n{\n    try {\n        open_file(\"nonexistent.file\");\n    } catch(...) {\n        std::throw_with_nested( std::runtime_error(\"run() failed\") );\n    }\n}\n \n// runs the sample function above and prints the caught exception\nint main()\n{\n    try {\n        run();\n    } catch(...) {\n        print_current_exception_with_nested();\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cstdexcept\u003e\n#include \u003cexception\u003e\n#include \u003cstring\u003e\n#include \u003cfstream\u003e\n#include \u003ciostream\u003e\n\nstruct MyException\n{\n    MyException(const std::string\u0026 message) : message(message) {}\n    std::string message;\n};\n\nvoid print_current_exception(int level)\n{\n    try {\n        throw;\n    } catch (const std::exception\u0026 e) {\n        std::cerr \u003c\u003c std::string(level, ' ') \u003c\u003c \"exception: \" \u003c\u003c e.what() \u003c\u003c '\\n';\n    } catch (const MyException\u0026 e) {\n        std::cerr \u003c\u003c std::string(level, ' ') \u003c\u003c \"MyException: \" \u003c\u003c e.message \u003c\u003c '\\n';\n    } catch (...) {\n        std::cerr \u003c\u003c \"Unkown exception\\n\";\n    }\n}\n\nvoid print_current_exception_with_nested(int level =  0)\n{\n    try {\n        throw;\n    } catch (...) {\n        print_current_exception(level);\n    }    \n    try {\n        throw;\n    } catch (const std::nested_exception\u0026 nested) {\n        try {\n            nested.rethrow_nested();\n        } catch (...) {\n            print_current_exception_with_nested(level + 1); // recursion\n        }\n    } catch (...) {\n        //Empty // End recursion\n    }\n}\n\n// sample function that catches an exception and wraps it in a nested exception\nvoid open_file(const std::string\u0026 s)\n{\n    try {\n        std::ifstream file(s);\n        file.exceptions(std::ios_base::failbit);\n    } catch(...) {\n        std::throw_with_nested(MyException{\"Couldn't open \" + s});\n    }\n}\n \n// sample function that catches an exception and wraps it in a nested exception\nvoid run()\n{\n    try {\n        open_file(\"nonexistent.file\");\n    } catch(...) {\n        std::throw_with_nested( std::runtime_error(\"run() failed\") );\n    }\n}\n \n// runs the sample function above and prints the caught exception\nint main()\n{\n    try {\n        run();\n    } catch(...) {\n        print_current_exception_with_nested();\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522340571,
        "id": "3f7c72a1-a398-4772-821e-b65c4c905b06",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522340571,
        "parent_id": "32a3d772-d3d2-444c-807e-c089c85fe9b3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Possible output:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Possible output:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522340571,
        "id": "ffe02ab4-fef4-4942-a5f6-dd0e802f6cc1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522340571,
        "parent_id": "32a3d772-d3d2-444c-807e-c089c85fe9b3",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "exception: run() failed\n MyException: Couldn't open nonexistent.file\n  exception: basic_ios::clear"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "exception: run() failed\n MyException: Couldn't open nonexistent.file\n  exception: basic_ios::clear",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522340571,
        "id": "d124b0bd-6c6e-4f51-a91d-9bd28e9b6669",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522340571,
        "parent_id": "32a3d772-d3d2-444c-807e-c089c85fe9b3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If you work only with exceptions inherited from "
            ],
            [
              "std::exception",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", code can even be simplified."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If you work only with exceptions inherited from "
          },
          {
            "Text": "std::exception",
            "AttrFlags": 2
          },
          {
            "Text": ", code can even be simplified."
          }
        ]
      }
    ],
    "title": "Nested exception",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}