{
  "ID": "b9ecd94b-ef96-4b16-a13b-5e86e0c1e0b6",
  "Root": {
    "alive": true,
    "content": [
      "b6dea78b-af45-407d-8117-a1f10da02563",
      "47da96cd-6b5a-4083-abec-95685a746d7a",
      "e0a44d81-94ef-48c3-9c69-7bb298664058",
      "4dfc2c49-861a-4e00-b170-feda425736eb",
      "43a01a8b-8c14-4abf-ad81-12d845d048c6",
      "6420d1dc-30c1-4751-bd49-f2785c19ca85",
      "e3964e9b-9ab0-4fee-8414-751f68c6708c",
      "ec4bb8d0-2dbb-46c2-b01b-5849dcf2714a",
      "3b6974b9-8361-4ebe-aaaf-a01de4921c97",
      "31507efb-3599-41d1-926b-d6fcb12eb348",
      "c44eced5-cebc-4b53-9ae8-a3e2930fdae1",
      "741e6efc-c96d-4fbb-8455-03bf71c0aa52",
      "1b2b7675-8955-4b60-86bb-48db5c9d5b54",
      "35d58087-317e-405c-93f1-dd76d59a525d",
      "a119cf79-cc23-4f07-8ac1-edbec6354d85",
      "39f3ce36-9577-4cf7-900c-d06eba9aa1df"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550523943658,
    "id": "b9ecd94b-ef96-4b16-a13b-5e86e0c1e0b6",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551688369615,
    "parent_id": "2f06e164-6745-4c46-9402-92f51f9f9266",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Virtual Member Functions"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523943639,
        "id": "b6dea78b-af45-407d-8117-a1f10da02563",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523943639,
        "parent_id": "b9ecd94b-ef96-4b16-a13b-5e86e0c1e0b6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Member functions can also be declared ",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%2B%2B/1752/virtual-member-functions"
                ]
              ]
            ],
            [
              "virtual",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%2B%2B/1752/virtual-member-functions"
                ]
              ]
            ],
            [
              ".",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%2B%2B/1752/virtual-member-functions"
                ]
              ]
            ],
            [
              " In this case, if called on a pointer or reference to an instance, they will not be accessed directly; rather, they will look up the function in the virtual function table (a list of pointers-to-member-functions for virtual functions, more commonly known as the "
            ],
            [
              "vtable",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "vftable",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "), and use that to call the version appropriate for the instance’s dynamic (actual) type. If the function is called directly, from a variable of a class, no lookup is performed."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Member functions can also be declared ",
            "Link": "http://stackoverflow.com/documentation/c%2B%2B/1752/virtual-member-functions"
          },
          {
            "Text": "virtual",
            "AttrFlags": 2,
            "Link": "http://stackoverflow.com/documentation/c%2B%2B/1752/virtual-member-functions"
          },
          {
            "Text": ".",
            "Link": "http://stackoverflow.com/documentation/c%2B%2B/1752/virtual-member-functions"
          },
          {
            "Text": " In this case, if called on a pointer or reference to an instance, they will not be accessed directly; rather, they will look up the function in the virtual function table (a list of pointers-to-member-functions for virtual functions, more commonly known as the "
          },
          {
            "Text": "vtable",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "vftable",
            "AttrFlags": 2
          },
          {
            "Text": "), and use that to call the version appropriate for the instance’s dynamic (actual) type. If the function is called directly, from a variable of a class, no lookup is performed."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523943640,
        "id": "47da96cd-6b5a-4083-abec-95685a746d7a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523943640,
        "parent_id": "b9ecd94b-ef96-4b16-a13b-5e86e0c1e0b6",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "struct Base {\n    virtual void func() { std::cout \u003c\u003c \"In Base.\" \u003c\u003c std::endl; }\n};\n\nstruct Derived : Base {\n    void func() override { std::cout \u003c\u003c \"In Derived.\" \u003c\u003c std::endl; }\n};\n\nvoid slicer(Base x) { x.func(); }\n\n// ...\n\nBase b;\nDerived d;\n\nBase *pb = \u0026b, *pd = \u0026d; // Pointers.\nBase \u0026rb = b, \u0026rd = d;   // References.\n\nb.func();   // Output:  In Base.\nd.func();   // Output:  In Derived.\n\npb-\u003efunc(); // Output:  In Base.\npd-\u003efunc(); // Output:  In Derived.\n\nrb.func();  // Output:  In Base.\nrd.func();  // Output:  In Derived.\n\nslicer(b);  // Output:  In Base.\nslicer(d);  // Output:  In Base."
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "struct Base {\n    virtual void func() { std::cout \u003c\u003c \"In Base.\" \u003c\u003c std::endl; }\n};\n\nstruct Derived : Base {\n    void func() override { std::cout \u003c\u003c \"In Derived.\" \u003c\u003c std::endl; }\n};\n\nvoid slicer(Base x) { x.func(); }\n\n// ...\n\nBase b;\nDerived d;\n\nBase *pb = \u0026b, *pd = \u0026d; // Pointers.\nBase \u0026rb = b, \u0026rd = d;   // References.\n\nb.func();   // Output:  In Base.\nd.func();   // Output:  In Derived.\n\npb-\u003efunc(); // Output:  In Base.\npd-\u003efunc(); // Output:  In Derived.\n\nrb.func();  // Output:  In Base.\nrd.func();  // Output:  In Derived.\n\nslicer(b);  // Output:  In Base.\nslicer(d);  // Output:  In Base.",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523943642,
        "id": "e0a44d81-94ef-48c3-9c69-7bb298664058",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523943642,
        "parent_id": "b9ecd94b-ef96-4b16-a13b-5e86e0c1e0b6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note that while "
            ],
            [
              "pd",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is "
            ],
            [
              "Base*",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", and "
            ],
            [
              "rd",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is a "
            ],
            [
              "Base\u0026",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", calling "
            ],
            [
              "func()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " on either of the two calls "
            ],
            [
              "Derived::func()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " instead of "
            ],
            [
              "Base::func()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "; this is because the "
            ],
            [
              "vtable",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " for "
            ],
            [
              "Derived",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " updates the "
            ],
            [
              "Base::func()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " entry to instead point to "
            ],
            [
              "Derived::func()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Conversely, note how passing an instance to "
            ],
            [
              "slicer()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " always results in "
            ],
            [
              "Base::func()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " being called, even when the passed instance is a "
            ],
            [
              "Derived",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "; this is because of something known as "
            ],
            [
              "data slicing",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ", where passing a "
            ],
            [
              "Derived",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " instance into a "
            ],
            [
              "Base",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " parameter by value renders the portion of the "
            ],
            [
              "Derived",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " instance that isn’t a "
            ],
            [
              "Base",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " instance inaccessible."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note that while "
          },
          {
            "Text": "pd",
            "AttrFlags": 2
          },
          {
            "Text": " is "
          },
          {
            "Text": "Base*",
            "AttrFlags": 2
          },
          {
            "Text": ", and "
          },
          {
            "Text": "rd",
            "AttrFlags": 2
          },
          {
            "Text": " is a "
          },
          {
            "Text": "Base\u0026",
            "AttrFlags": 2
          },
          {
            "Text": ", calling "
          },
          {
            "Text": "func()",
            "AttrFlags": 2
          },
          {
            "Text": " on either of the two calls "
          },
          {
            "Text": "Derived::func()",
            "AttrFlags": 2
          },
          {
            "Text": " instead of "
          },
          {
            "Text": "Base::func()",
            "AttrFlags": 2
          },
          {
            "Text": "; this is because the "
          },
          {
            "Text": "vtable",
            "AttrFlags": 2
          },
          {
            "Text": " for "
          },
          {
            "Text": "Derived",
            "AttrFlags": 2
          },
          {
            "Text": " updates the "
          },
          {
            "Text": "Base::func()",
            "AttrFlags": 2
          },
          {
            "Text": " entry to instead point to "
          },
          {
            "Text": "Derived::func()",
            "AttrFlags": 2
          },
          {
            "Text": ". Conversely, note how passing an instance to "
          },
          {
            "Text": "slicer()",
            "AttrFlags": 2
          },
          {
            "Text": " always results in "
          },
          {
            "Text": "Base::func()",
            "AttrFlags": 2
          },
          {
            "Text": " being called, even when the passed instance is a "
          },
          {
            "Text": "Derived",
            "AttrFlags": 2
          },
          {
            "Text": "; this is because of something known as "
          },
          {
            "Text": "data slicing",
            "AttrFlags": 4
          },
          {
            "Text": ", where passing a "
          },
          {
            "Text": "Derived",
            "AttrFlags": 2
          },
          {
            "Text": " instance into a "
          },
          {
            "Text": "Base",
            "AttrFlags": 2
          },
          {
            "Text": " parameter by value renders the portion of the "
          },
          {
            "Text": "Derived",
            "AttrFlags": 2
          },
          {
            "Text": " instance that isn’t a "
          },
          {
            "Text": "Base",
            "AttrFlags": 2
          },
          {
            "Text": " instance inaccessible."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523943642,
        "id": "4dfc2c49-861a-4e00-b170-feda425736eb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523943642,
        "parent_id": "b9ecd94b-ef96-4b16-a13b-5e86e0c1e0b6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When a member function is defined as virtual, all derived class member functions with the same signature override it, regardless of whether the overriding function is specified as "
            ],
            [
              "virtual",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or not. This can make derived classes harder for programmers to parse, however, as there’s no indication as to which function(s) is/are "
            ],
            [
              "virtual",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When a member function is defined as virtual, all derived class member functions with the same signature override it, regardless of whether the overriding function is specified as "
          },
          {
            "Text": "virtual",
            "AttrFlags": 2
          },
          {
            "Text": " or not. This can make derived classes harder for programmers to parse, however, as there’s no indication as to which function(s) is/are "
          },
          {
            "Text": "virtual",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523943642,
        "id": "43a01a8b-8c14-4abf-ad81-12d845d048c6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523943642,
        "parent_id": "b9ecd94b-ef96-4b16-a13b-5e86e0c1e0b6",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "struct B {\n    virtual void f() {}\n};\n\nstruct D : B {\n    void f() {} // Implicitly virtual, overrides B::f.\n                //  You'd have to check B to know that, though.\n};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "struct B {\n    virtual void f() {}\n};\n\nstruct D : B {\n    void f() {} // Implicitly virtual, overrides B::f.\n                //  You'd have to check B to know that, though.\n};",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523943643,
        "id": "6420d1dc-30c1-4751-bd49-f2785c19ca85",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523943643,
        "parent_id": "b9ecd94b-ef96-4b16-a13b-5e86e0c1e0b6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note, however, that a derived function only overrides a base function if their signatures match; even if a derived function is explicitly declared "
            ],
            [
              "virtual",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", it will instead create a new virtual function if the signatures are mismatched."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note, however, that a derived function only overrides a base function if their signatures match; even if a derived function is explicitly declared "
          },
          {
            "Text": "virtual",
            "AttrFlags": 2
          },
          {
            "Text": ", it will instead create a new virtual function if the signatures are mismatched."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523943643,
        "id": "e3964e9b-9ab0-4fee-8414-751f68c6708c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523943643,
        "parent_id": "b9ecd94b-ef96-4b16-a13b-5e86e0c1e0b6",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "struct BadB {\n    virtual void f() {}\n};\n\nstruct BadD : BadB {\n    virtual void f(int i) {} // Does NOT override BadB::f.\n};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "struct BadB {\n    virtual void f() {}\n};\n\nstruct BadD : BadB {\n    virtual void f(int i) {} // Does NOT override BadB::f.\n};",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523943644,
        "id": "ec4bb8d0-2dbb-46c2-b01b-5849dcf2714a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523943644,
        "parent_id": "b9ecd94b-ef96-4b16-a13b-5e86e0c1e0b6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As of C++11, intent to override can be made explicit with the context-sensitive keyword "
            ],
            [
              "override",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". This tells the compiler that the programmer expects it to override a base class function, which causes the compiler to omit an error if it "
            ],
            [
              "doesn’t",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " override anything."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "As of C++11, intent to override can be made explicit with the context-sensitive keyword "
          },
          {
            "Text": "override",
            "AttrFlags": 2
          },
          {
            "Text": ". This tells the compiler that the programmer expects it to override a base class function, which causes the compiler to omit an error if it "
          },
          {
            "Text": "doesn’t",
            "AttrFlags": 4
          },
          {
            "Text": " override anything."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523943644,
        "id": "3b6974b9-8361-4ebe-aaaf-a01de4921c97",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523943644,
        "parent_id": "b9ecd94b-ef96-4b16-a13b-5e86e0c1e0b6",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "struct CPP11B {\n    virtual void f() {}\n};\n\nstruct CPP11D : CPP11B {\n    void f() override {}\n    void f(int i) override {} // Error: Doesn't actually override anything.\n};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "struct CPP11B {\n    virtual void f() {}\n};\n\nstruct CPP11D : CPP11B {\n    void f() override {}\n    void f(int i) override {} // Error: Doesn't actually override anything.\n};",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523943644,
        "id": "31507efb-3599-41d1-926b-d6fcb12eb348",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523943644,
        "parent_id": "b9ecd94b-ef96-4b16-a13b-5e86e0c1e0b6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This also has the benefit of telling programmers that the function is both virtual, and also declared in at least one base class, which can make complex classes easier to parse."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This also has the benefit of telling programmers that the function is both virtual, and also declared in at least one base class, which can make complex classes easier to parse."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523943644,
        "id": "c44eced5-cebc-4b53-9ae8-a3e2930fdae1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523943644,
        "parent_id": "b9ecd94b-ef96-4b16-a13b-5e86e0c1e0b6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When a function is declared "
            ],
            [
              "virtual",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", and defined outside the class definition, the "
            ],
            [
              "virtual",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " specifier must be included in the function declaration, and not repeated in the definition."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When a function is declared "
          },
          {
            "Text": "virtual",
            "AttrFlags": 2
          },
          {
            "Text": ", and defined outside the class definition, the "
          },
          {
            "Text": "virtual",
            "AttrFlags": 2
          },
          {
            "Text": " specifier must be included in the function declaration, and not repeated in the definition."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523943655,
        "id": "741e6efc-c96d-4fbb-8455-03bf71c0aa52",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523943655,
        "parent_id": "b9ecd94b-ef96-4b16-a13b-5e86e0c1e0b6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This also holds true for "
            ],
            [
              "override",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This also holds true for "
          },
          {
            "Text": "override",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523943655,
        "id": "1b2b7675-8955-4b60-86bb-48db5c9d5b54",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523943655,
        "parent_id": "b9ecd94b-ef96-4b16-a13b-5e86e0c1e0b6",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "struct VB {\n    virtual void f(); // \"virtual\" goes here.\n    void g();\n};\n/* virtual */ void VB::f() {} // Not here.\nvirtual void VB::g() {} // Error."
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "struct VB {\n    virtual void f(); // \"virtual\" goes here.\n    void g();\n};\n/* virtual */ void VB::f() {} // Not here.\nvirtual void VB::g() {} // Error.",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523943657,
        "id": "35d58087-317e-405c-93f1-dd76d59a525d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523943657,
        "parent_id": "b9ecd94b-ef96-4b16-a13b-5e86e0c1e0b6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If a base class overloads a "
            ],
            [
              "virtual",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " function, only overloads that are explicitly specified as "
            ],
            [
              "virtual",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will be virtual."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If a base class overloads a "
          },
          {
            "Text": "virtual",
            "AttrFlags": 2
          },
          {
            "Text": " function, only overloads that are explicitly specified as "
          },
          {
            "Text": "virtual",
            "AttrFlags": 2
          },
          {
            "Text": " will be virtual."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523943657,
        "id": "a119cf79-cc23-4f07-8ac1-edbec6354d85",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523943657,
        "parent_id": "b9ecd94b-ef96-4b16-a13b-5e86e0c1e0b6",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "struct BOverload {\n    virtual void func() {}\n    void func(int) {}\n};\n\nstruct DOverload : BOverload {\n    void func() override {}\n    void func(int) {}\n};\n\n// ...\n\nBOverload* bo = new DOverload;\nbo-\u003efunc(); // Calls DOverload::func().\nbo-\u003efunc(1); // Calls BOverload::func(int)."
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "struct BOverload {\n    virtual void func() {}\n    void func(int) {}\n};\n\nstruct DOverload : BOverload {\n    void func() override {}\n    void func(int) {}\n};\n\n// ...\n\nBOverload* bo = new DOverload;\nbo-\u003efunc(); // Calls DOverload::func().\nbo-\u003efunc(1); // Calls BOverload::func(int).",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523943658,
        "id": "39f3ce36-9577-4cf7-900c-d06eba9aa1df",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523943658,
        "parent_id": "b9ecd94b-ef96-4b16-a13b-5e86e0c1e0b6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For more information, see "
            ],
            [
              "the relevant topic",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%2B%2B/1752/virtual-member-functions"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For more information, see "
          },
          {
            "Text": "the relevant topic",
            "Link": "http://stackoverflow.com/documentation/c%2B%2B/1752/virtual-member-functions"
          },
          {
            "Text": "."
          }
        ]
      }
    ],
    "title": "Virtual Member Functions"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}