{
  "ID": "b56d9028-0258-4d63-904b-eb839fc200fe",
  "Root": {
    "alive": true,
    "content": [
      "03a60da4-accd-418b-86d7-db02f2a17918",
      "69a43dd5-b50a-4674-8e5e-7c7eff95d342",
      "e191efe4-9dca-4740-b3a0-f2822666fee6",
      "fdeb4f75-d454-4506-95e5-9fbe87c3922c",
      "faf60778-8c6b-4474-89a3-4e6afcefed46",
      "45e0ca0a-b3c7-4b9c-bd22-ca1ecc6b8736"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550523092801,
    "id": "b56d9028-0258-4d63-904b-eb839fc200fe",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550523092801,
    "parent_id": "10c1e1fe-bf0e-4f71-b1f2-173539570a03",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "030 Base to derived conversion"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523092800,
        "id": "03a60da4-accd-418b-86d7-db02f2a17918",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523092800,
        "parent_id": "b56d9028-0258-4d63-904b-eb839fc200fe",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A pointer to base class can be converted to a pointer to derived class using "
            ],
            [
              "static_cast",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". "
            ],
            [
              "static_cast",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " does not do any run-time checking and can lead to undefined behaviour when the pointer does not actually point to the desired type."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A pointer to base class can be converted to a pointer to derived class using "
          },
          {
            "Text": "static_cast",
            "AttrFlags": 2
          },
          {
            "Text": ". "
          },
          {
            "Text": "static_cast",
            "AttrFlags": 2
          },
          {
            "Text": " does not do any run-time checking and can lead to undefined behaviour when the pointer does not actually point to the desired type."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523092800,
        "id": "69a43dd5-b50a-4674-8e5e-7c7eff95d342",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523092800,
        "parent_id": "b56d9028-0258-4d63-904b-eb839fc200fe",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "struct Base {};\nstruct Derived : Base {};\nDerived d;\nBase* p1 = \u0026d;\nDerived* p2 = p1;                        // error; cast required\nDerived* p3 = static_cast\u003cDerived*\u003e(p1); // OK; p2 now points to Derived object\nBase b;\nBase* p4 = \u0026b;\nDerived* p5 = static_cast\u003cDerived*\u003e(p4); // undefined behaviour since p4 does not\n                                         // point to a Derived object"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "struct Base {};\nstruct Derived : Base {};\nDerived d;\nBase* p1 = \u0026d;\nDerived* p2 = p1;                        // error; cast required\nDerived* p3 = static_cast\u003cDerived*\u003e(p1); // OK; p2 now points to Derived object\nBase b;\nBase* p4 = \u0026b;\nDerived* p5 = static_cast\u003cDerived*\u003e(p4); // undefined behaviour since p4 does not\n                                         // point to a Derived object",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523092800,
        "id": "e191efe4-9dca-4740-b3a0-f2822666fee6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523092800,
        "parent_id": "b56d9028-0258-4d63-904b-eb839fc200fe",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Likewise, a reference to base class can be converted to a reference to derived class using "
            ],
            [
              "static_cast",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Likewise, a reference to base class can be converted to a reference to derived class using "
          },
          {
            "Text": "static_cast",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523092800,
        "id": "fdeb4f75-d454-4506-95e5-9fbe87c3922c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523092800,
        "parent_id": "b56d9028-0258-4d63-904b-eb839fc200fe",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "struct Base {};\nstruct Derived : Base {};\nDerived d;\nBase\u0026 r1 = d;\nDerived\u0026 r2 = r1;                        // error; cast required\nDerived\u0026 r3 = static_cast\u003cDerived\u0026\u003e(r1); // OK; r3 now refers to Derived object"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "struct Base {};\nstruct Derived : Base {};\nDerived d;\nBase\u0026 r1 = d;\nDerived\u0026 r2 = r1;                        // error; cast required\nDerived\u0026 r3 = static_cast\u003cDerived\u0026\u003e(r1); // OK; r3 now refers to Derived object",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523092801,
        "id": "faf60778-8c6b-4474-89a3-4e6afcefed46",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523092801,
        "parent_id": "b56d9028-0258-4d63-904b-eb839fc200fe",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If the source type is polymorphic, "
            ],
            [
              "dynamic_cast",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can be used to perform a base to derived conversion. It performs a run-time check and failure is recoverable instead of producing undefined behaviour. In the pointer case, a null pointer is returned upon failure. In the reference case, an exception is thrown upon failure of type "
            ],
            [
              "std::bad_cast",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (or a class derived from "
            ],
            [
              "std::bad_cast",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ")."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If the source type is polymorphic, "
          },
          {
            "Text": "dynamic_cast",
            "AttrFlags": 2
          },
          {
            "Text": " can be used to perform a base to derived conversion. It performs a run-time check and failure is recoverable instead of producing undefined behaviour. In the pointer case, a null pointer is returned upon failure. In the reference case, an exception is thrown upon failure of type "
          },
          {
            "Text": "std::bad_cast",
            "AttrFlags": 2
          },
          {
            "Text": " (or a class derived from "
          },
          {
            "Text": "std::bad_cast",
            "AttrFlags": 2
          },
          {
            "Text": ")."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523092801,
        "id": "45e0ca0a-b3c7-4b9c-bd22-ca1ecc6b8736",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523092801,
        "parent_id": "b56d9028-0258-4d63-904b-eb839fc200fe",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "struct Base { virtual ~Base(); }; // Base is polymorphic\nstruct Derived : Base {};\nBase* b1 = new Derived;\nDerived* d1 = dynamic_cast\u003cDerived*\u003e(b1); // OK; d1 points to Derived object\nBase* b2 = new Base;\nDerived* d2 = dynamic_cast\u003cDerived*\u003e(b2); // d2 is a null pointer"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "struct Base { virtual ~Base(); }; // Base is polymorphic\nstruct Derived : Base {};\nBase* b1 = new Derived;\nDerived* d1 = dynamic_cast\u003cDerived*\u003e(b1); // OK; d1 points to Derived object\nBase* b2 = new Base;\nDerived* d2 = dynamic_cast\u003cDerived*\u003e(b2); // d2 is a null pointer",
        "code_language": "Plain Text"
      }
    ],
    "title": "030 Base to derived conversion"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}