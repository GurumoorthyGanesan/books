{
  "ID": "7883f339-5d68-4b69-85e7-83efee1bad33",
  "Root": {
    "alive": true,
    "content": [
      "d45b2d1e-0147-4bb1-8d04-ec72c2451c1d",
      "4440143f-f7a7-4a8e-b1c7-48a2f511b444",
      "cae35f7f-be06-42dd-8953-477281b09be1"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550523879680,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "7883f339-5d68-4b69-85e7-83efee1bad33",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550799120000,
    "parent_id": "193b149e-733b-4344-8898-29dc4a2ef0b0",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "throw"
        ]
      ]
    },
    "type": "page",
    "version": 16,
    "content_resolved": [
      {
        "alive": true,
        "content": [
          "868c2efd-0877-46f2-bb99-edff4fbea609"
        ],
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523879678,
        "id": "d45b2d1e-0147-4bb1-8d04-ec72c2451c1d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550799120000,
        "parent_id": "7883f339-5d68-4b69-85e7-83efee1bad33",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When "
            ],
            [
              "throw",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " occurs in an expression with an operand, its effect is to throw an "
            ],
            [
              "exception",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%2B%2B/1354/exceptions"
                ]
              ]
            ],
            [
              ", which is a copy of the operand."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 3,
        "content_resolved": [
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1550523879678,
            "id": "868c2efd-0877-46f2-bb99-edff4fbea609",
            "ignore_block_count": true,
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1550799120000,
            "parent_id": "d45b2d1e-0147-4bb1-8d04-ec72c2451c1d",
            "parent_table": "block",
            "properties": {
              "language": [
                [
                  "C++"
                ]
              ],
              "title": [
                [
                  "void print_asterisks(int count) {\n    if (count \u003c 0) {\n        throw std::invalid_argument(\"count cannot be negative!\");\n    }\n    while (count--) { putchar('*'); }\n}"
                ]
              ]
            },
            "type": "code",
            "version": 5,
            "code": "void print_asterisks(int count) {\n    if (count \u003c 0) {\n        throw std::invalid_argument(\"count cannot be negative!\");\n    }\n    while (count--) { putchar('*'); }\n}",
            "code_language": "C++"
          }
        ],
        "inline_content": [
          {
            "Text": "When "
          },
          {
            "Text": "throw",
            "AttrFlags": 2
          },
          {
            "Text": " occurs in an expression with an operand, its effect is to throw an "
          },
          {
            "Text": "exception",
            "Link": "http://stackoverflow.com/documentation/c%2B%2B/1354/exceptions"
          },
          {
            "Text": ", which is a copy of the operand."
          }
        ]
      },
      {
        "alive": true,
        "content": [
          "53de5747-406e-49eb-b729-a07bcba1e2e9",
          "ad45e7f8-f72b-4db3-8e41-5410f0404991"
        ],
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523879679,
        "id": "4440143f-f7a7-4a8e-b1c7-48a2f511b444",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550799120000,
        "parent_id": "7883f339-5d68-4b69-85e7-83efee1bad33",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When "
            ],
            [
              "throw",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " occurs in an expression without an operand, its effect is to "
            ],
            [
              "rethrow the current exception",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%2B%2B/1354/exceptions/5574/rethrow-propagate-exception"
                ]
              ]
            ],
            [
              ". If there is no current exception, "
            ],
            [
              "std::terminate",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is called."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 6,
        "content_resolved": [
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1550523879680,
            "id": "53de5747-406e-49eb-b729-a07bcba1e2e9",
            "ignore_block_count": true,
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1550799120000,
            "parent_id": "4440143f-f7a7-4a8e-b1c7-48a2f511b444",
            "parent_table": "block",
            "properties": {
              "language": [
                [
                  "C++"
                ]
              ],
              "title": [
                [
                  "try {\n    // something risky\n} catch (const std::bad_alloc\u0026) {\n    std::cerr \u003c\u003c \"out of memory\" \u003c\u003c std::endl;\n} catch (...) {\n    std::cerr \u003c\u003c \"unexpected exception\" \u003c\u003c std::endl;\n    // hope the caller knows how to handle this exception\n    throw;\n}"
                ]
              ]
            },
            "type": "code",
            "version": 6,
            "code": "try {\n    // something risky\n} catch (const std::bad_alloc\u0026) {\n    std::cerr \u003c\u003c \"out of memory\" \u003c\u003c std::endl;\n} catch (...) {\n    std::cerr \u003c\u003c \"unexpected exception\" \u003c\u003c std::endl;\n    // hope the caller knows how to handle this exception\n    throw;\n}",
            "code_language": "C++"
          },
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1550799120000,
            "id": "ad45e7f8-f72b-4db3-8e41-5410f0404991",
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1550799120000,
            "parent_id": "4440143f-f7a7-4a8e-b1c7-48a2f511b444",
            "parent_table": "block",
            "type": "text",
            "version": 3
          }
        ],
        "inline_content": [
          {
            "Text": "When "
          },
          {
            "Text": "throw",
            "AttrFlags": 2
          },
          {
            "Text": " occurs in an expression without an operand, its effect is to "
          },
          {
            "Text": "rethrow the current exception",
            "Link": "http://stackoverflow.com/documentation/c%2B%2B/1354/exceptions/5574/rethrow-propagate-exception"
          },
          {
            "Text": ". If there is no current exception, "
          },
          {
            "Text": "std::terminate",
            "AttrFlags": 2
          },
          {
            "Text": " is called."
          }
        ]
      },
      {
        "alive": true,
        "content": [
          "4c3841f8-a32f-4bd1-baa6-f1751e743134",
          "c8c4095d-d9d0-4f0d-87d0-ccdbc051abe0",
          "58708d08-568b-478c-85b9-4a791f9acd2b",
          "f0239209-f424-4266-a4a7-ff730bc64624"
        ],
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523879680,
        "id": "cae35f7f-be06-42dd-8953-477281b09be1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550799120000,
        "parent_id": "7883f339-5d68-4b69-85e7-83efee1bad33",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When "
            ],
            [
              "throw",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " occurs in a function declarator, it introduces a dynamic exception specification, which lists the types of exceptions that the function is allowed to propagate."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 6,
        "content_resolved": [
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1550523879680,
            "id": "4c3841f8-a32f-4bd1-baa6-f1751e743134",
            "ignore_block_count": true,
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1550799120000,
            "parent_id": "cae35f7f-be06-42dd-8953-477281b09be1",
            "parent_table": "block",
            "properties": {
              "language": [
                [
                  "C++"
                ]
              ],
              "title": [
                [
                  "// this function might propagate a std::runtime_error,\n// but not, say, a std::logic_error\nvoid risky() throw(std::runtime_error);\n// this function can't propagate any exceptions\nvoid safe() throw();"
                ]
              ]
            },
            "type": "code",
            "version": 5,
            "code": "// this function might propagate a std::runtime_error,\n// but not, say, a std::logic_error\nvoid risky() throw(std::runtime_error);\n// this function can't propagate any exceptions\nvoid safe() throw();",
            "code_language": "C++"
          },
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1550523879680,
            "id": "c8c4095d-d9d0-4f0d-87d0-ccdbc051abe0",
            "ignore_block_count": true,
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1550799120000,
            "parent_id": "cae35f7f-be06-42dd-8953-477281b09be1",
            "parent_table": "block",
            "properties": {
              "title": [
                [
                  "Dynamic exception specifications are deprecated as of C++11."
                ]
              ]
            },
            "type": "text",
            "version": 4,
            "inline_content": [
              {
                "Text": "Dynamic exception specifications are deprecated as of C++11."
              }
            ]
          },
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1550523879680,
            "id": "58708d08-568b-478c-85b9-4a791f9acd2b",
            "ignore_block_count": true,
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1550799120000,
            "parent_id": "cae35f7f-be06-42dd-8953-477281b09be1",
            "parent_table": "block",
            "properties": {
              "title": [
                [
                  "Note that the first two uses of "
                ],
                [
                  "throw",
                  [
                    [
                      "c"
                    ]
                  ]
                ],
                [
                  " listed above constitute expressions rather than statements. (The type of a throw expression is "
                ],
                [
                  "void",
                  [
                    [
                      "c"
                    ]
                  ]
                ],
                [
                  ".) This makes it possible to nest them within expressions, like so:"
                ]
              ]
            },
            "type": "text",
            "version": 4,
            "inline_content": [
              {
                "Text": "Note that the first two uses of "
              },
              {
                "Text": "throw",
                "AttrFlags": 2
              },
              {
                "Text": " listed above constitute expressions rather than statements. (The type of a throw expression is "
              },
              {
                "Text": "void",
                "AttrFlags": 2
              },
              {
                "Text": ".) This makes it possible to nest them within expressions, like so:"
              }
            ]
          },
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1550523879680,
            "id": "f0239209-f424-4266-a4a7-ff730bc64624",
            "ignore_block_count": true,
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1550799120000,
            "parent_id": "cae35f7f-be06-42dd-8953-477281b09be1",
            "parent_table": "block",
            "properties": {
              "language": [
                [
                  "C++"
                ]
              ],
              "title": [
                [
                  "unsigned int predecessor(unsigned int x) {\n    return (x \u003e 0) ? (x - 1) : (throw std::invalid_argument(\"0 has no predecessor\"));\n}"
                ]
              ]
            },
            "type": "code",
            "version": 5,
            "code": "unsigned int predecessor(unsigned int x) {\n    return (x \u003e 0) ? (x - 1) : (throw std::invalid_argument(\"0 has no predecessor\"));\n}",
            "code_language": "C++"
          }
        ],
        "inline_content": [
          {
            "Text": "When "
          },
          {
            "Text": "throw",
            "AttrFlags": 2
          },
          {
            "Text": " occurs in a function declarator, it introduces a dynamic exception specification, which lists the types of exceptions that the function is allowed to propagate."
          }
        ]
      }
    ],
    "title": "throw",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}