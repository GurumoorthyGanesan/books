{
  "ID": "02769b06-fb95-4a50-a6e3-79a802753ee5",
  "Root": {
    "alive": true,
    "content": [
      "69573c75-3034-4dd5-bd52-c42ea60c4514",
      "8ce083d3-f40b-4105-93a4-4422253add17",
      "21453e28-5fe2-4a62-b2c4-344a012e7f99",
      "68f4b3de-db80-4796-a70b-e3d645a157e5",
      "e8b0fea5-e027-4eea-a66e-c73d5836b970",
      "f98b67d9-82e1-4737-b79d-9a8d809a3e98",
      "7ce3654a-56b2-4643-a6ef-b4af465247ef"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550523950253,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "02769b06-fb95-4a50-a6e3-79a802753ee5",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551688401034,
    "parent_id": "b2086806-a259-48af-adcb-172245e66aa0",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Recursion with memoization"
        ]
      ]
    },
    "type": "page",
    "version": 4,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523950250,
        "id": "69573c75-3034-4dd5-bd52-c42ea60c4514",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523950250,
        "parent_id": "02769b06-fb95-4a50-a6e3-79a802753ee5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Recursive functions can get quite expensive. If they are pure functions (functions that always return the same value when called with the same arguments, and that neither depend on nor modify external state), they can be made considerably faster at the expense of memory by storing the values already calculated."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Recursive functions can get quite expensive. If they are pure functions (functions that always return the same value when called with the same arguments, and that neither depend on nor modify external state), they can be made considerably faster at the expense of memory by storing the values already calculated."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523950252,
        "id": "8ce083d3-f40b-4105-93a4-4422253add17",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523950252,
        "parent_id": "02769b06-fb95-4a50-a6e3-79a802753ee5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The following is an implementation of the Fibonacci sequence with memoization:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The following is an implementation of the Fibonacci sequence with memoization:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523950252,
        "id": "21453e28-5fe2-4a62-b2c4-344a012e7f99",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523950252,
        "parent_id": "02769b06-fb95-4a50-a6e3-79a802753ee5",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cmap\u003e\n\nint fibonacci(int n)\n{\n  static std::map\u003cint, int\u003e values;\n  if (n==0 || n==1)\n    return n;\n  std::map\u003cint,int\u003e::iterator iter = values.find(n);\n  if (iter == values.end())\n  {\n    return values[n] = fibonacci(n-1) + fibonacci(n-2);\n  }\n  else\n  {\n    return iter-\u003esecond;\n  }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cmap\u003e\n\nint fibonacci(int n)\n{\n  static std::map\u003cint, int\u003e values;\n  if (n==0 || n==1)\n    return n;\n  std::map\u003cint,int\u003e::iterator iter = values.find(n);\n  if (iter == values.end())\n  {\n    return values[n] = fibonacci(n-1) + fibonacci(n-2);\n  }\n  else\n  {\n    return iter-\u003esecond;\n  }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523950253,
        "id": "68f4b3de-db80-4796-a70b-e3d645a157e5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523950253,
        "parent_id": "02769b06-fb95-4a50-a6e3-79a802753ee5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note that despite using the simple recursion formula, on first call this function is "
            ],
            [
              "O",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              "("
            ],
            [
              "n",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              "). On subsequent calls with the same value, it is of course "
            ],
            [
              "O",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              "(1)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note that despite using the simple recursion formula, on first call this function is "
          },
          {
            "Text": "O",
            "AttrFlags": 4
          },
          {
            "Text": "("
          },
          {
            "Text": "n",
            "AttrFlags": 4
          },
          {
            "Text": "). On subsequent calls with the same value, it is of course "
          },
          {
            "Text": "O",
            "AttrFlags": 4
          },
          {
            "Text": "(1)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523950253,
        "id": "e8b0fea5-e027-4eea-a66e-c73d5836b970",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523950253,
        "parent_id": "02769b06-fb95-4a50-a6e3-79a802753ee5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note however that this implementation is not reentrant. Also, it doesn’t allow to get rid of stored values. An alternative implementation would be to allow the map to be passed as additional argument:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note however that this implementation is not reentrant. Also, it doesn’t allow to get rid of stored values. An alternative implementation would be to allow the map to be passed as additional argument:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523950253,
        "id": "f98b67d9-82e1-4737-b79d-9a8d809a3e98",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523950253,
        "parent_id": "02769b06-fb95-4a50-a6e3-79a802753ee5",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cmap\u003e\n\nint fibonacci(int n, std::map\u003cint, int\u003e values)\n{\n  if (n==0 || n==1)\n    return n;\n  std::map\u003cint,int\u003e::iterator iter = values.find(n);\n  if (iter == values.end())\n  {\n    return values[n] = fibonacci(n-1) + fibonacci(n-2);\n  }\n  else\n  {\n    return iter-\u003esecond;\n  }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cmap\u003e\n\nint fibonacci(int n, std::map\u003cint, int\u003e values)\n{\n  if (n==0 || n==1)\n    return n;\n  std::map\u003cint,int\u003e::iterator iter = values.find(n);\n  if (iter == values.end())\n  {\n    return values[n] = fibonacci(n-1) + fibonacci(n-2);\n  }\n  else\n  {\n    return iter-\u003esecond;\n  }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523950253,
        "id": "7ce3654a-56b2-4643-a6ef-b4af465247ef",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523950253,
        "parent_id": "02769b06-fb95-4a50-a6e3-79a802753ee5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For this version, the caller is required to maintain the map with the stored values. This has the advantage that the function is now reentrant, and that the caller can remove values that are no longer needed, saving memory. It has the disadvantage that it breaks encapsulation; the caller can change the output by populating the map with incorrect values."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For this version, the caller is required to maintain the map with the stored values. This has the advantage that the function is now reentrant, and that the caller can remove values that are no longer needed, saving memory. It has the disadvantage that it breaks encapsulation; the caller can change the output by populating the map with incorrect values."
          }
        ]
      }
    ],
    "title": "Recursion with memoization",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}