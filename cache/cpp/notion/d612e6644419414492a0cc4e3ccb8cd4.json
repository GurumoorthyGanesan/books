{
  "ID": "d612e664-4419-4144-92a0-cc4e3ccb8cd4",
  "Root": {
    "alive": true,
    "content": [
      "e6ba741a-be11-4b50-89af-d7178e037bd9",
      "d9353355-fc19-4c26-8fa3-957f559b3963",
      "5611fe54-7205-41fe-bb41-db8b634e60dc",
      "9920cd04-725d-47de-ad2b-55616b54d912",
      "8048737c-a477-4e57-999f-ead90d75fb3f",
      "91cd7497-f287-46c3-8df6-2e77f6743b26",
      "9ecaa6ca-a92b-4b77-8fed-343fcfd9a394",
      "fa9e88f4-2920-4a79-a121-f3549c345aac",
      "bef31ec6-a0bf-4226-8318-228b856dd366",
      "3c1bb589-0eef-4eb4-a72f-69d065a6dbdf",
      "b9419edf-3929-4533-9263-747b6d66e43f",
      "f573469f-d89b-4e31-a735-88a409d25569",
      "a92659fd-551a-4c2e-8e77-954db8b3e014",
      "6174855f-1fa0-43d7-8fa2-0a409a408f7a",
      "927cfedf-ec33-4746-b92d-3c1bb1153871",
      "9ab8862d-2569-4744-b2d4-e0f9970c3be2",
      "4e6f42a5-5bc2-4fdd-821e-ea05c8d5263e"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550521976526,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "d612e664-4419-4144-92a0-cc4e3ccb8cd4",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550656500000,
    "parent_id": "26e69b2d-1c6d-47ea-af87-47fa9cfbdf56",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Using std::tuple"
        ]
      ]
    },
    "type": "page",
    "version": 11,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521976519,
        "id": "e6ba741a-be11-4b50-89af-d7178e037bd9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521976519,
        "parent_id": "d612e664-4419-4144-92a0-cc4e3ccb8cd4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The type "
            ],
            [
              "std::tuple",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://en.cppreference.com/w/cpp/utility/tuple"
                ]
              ]
            ],
            [
              " can bundle any number of values, potentially including values of different types, into a single return object:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The type "
          },
          {
            "Text": "std::tuple",
            "AttrFlags": 2,
            "Link": "http://en.cppreference.com/w/cpp/utility/tuple"
          },
          {
            "Text": " can bundle any number of values, potentially including values of different types, into a single return object:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521976521,
        "id": "d9353355-fc19-4c26-8fa3-957f559b3963",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521976521,
        "parent_id": "d612e664-4419-4144-92a0-cc4e3ccb8cd4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "std::tuple\u003cint, int, int, int\u003e foo(int a, int b) { // or auto (C++14)\n   return std::make_tuple(a + b, a - b, a * b, a / b);\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "std::tuple\u003cint, int, int, int\u003e foo(int a, int b) { // or auto (C++14)\n   return std::make_tuple(a + b, a - b, a * b, a / b);\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521976521,
        "id": "5611fe54-7205-41fe-bb41-db8b634e60dc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521976521,
        "parent_id": "d612e664-4419-4144-92a0-cc4e3ccb8cd4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In C++17, a braced initializer list can be used:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In C++17, a braced initializer list can be used:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521976521,
        "id": "9920cd04-725d-47de-ad2b-55616b54d912",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521976521,
        "parent_id": "d612e664-4419-4144-92a0-cc4e3ccb8cd4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "std::tuple\u003cint, int, int, int\u003e foo(int a, int b)    {\n    return {a + b, a - b, a * b, a / b};\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "std::tuple\u003cint, int, int, int\u003e foo(int a, int b)    {\n    return {a + b, a - b, a * b, a / b};\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521976522,
        "id": "8048737c-a477-4e57-999f-ead90d75fb3f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521976522,
        "parent_id": "d612e664-4419-4144-92a0-cc4e3ccb8cd4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Retrieving values from the returned "
            ],
            [
              "tuple",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can be cumbersome, requiring the use of the "
            ],
            [
              "std::get",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://en.cppreference.com/w/cpp/utility/tuple/get"
                ]
              ]
            ],
            [
              " template function:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Retrieving values from the returned "
          },
          {
            "Text": "tuple",
            "AttrFlags": 2
          },
          {
            "Text": " can be cumbersome, requiring the use of the "
          },
          {
            "Text": "std::get",
            "AttrFlags": 2,
            "Link": "http://en.cppreference.com/w/cpp/utility/tuple/get"
          },
          {
            "Text": " template function:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521976522,
        "id": "91cd7497-f287-46c3-8df6-2e77f6743b26",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521976522,
        "parent_id": "d612e664-4419-4144-92a0-cc4e3ccb8cd4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "auto mrvs = foo(5, 12);\nauto add = std::get\u003c0\u003e(mrvs);\nauto sub = std::get\u003c1\u003e(mrvs);\nauto mul = std::get\u003c2\u003e(mrvs);\nauto div = std::get\u003c3\u003e(mrvs);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "auto mrvs = foo(5, 12);\nauto add = std::get\u003c0\u003e(mrvs);\nauto sub = std::get\u003c1\u003e(mrvs);\nauto mul = std::get\u003c2\u003e(mrvs);\nauto div = std::get\u003c3\u003e(mrvs);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521976522,
        "id": "9ecaa6ca-a92b-4b77-8fed-343fcfd9a394",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521976522,
        "parent_id": "d612e664-4419-4144-92a0-cc4e3ccb8cd4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If the types can be declared before the function returns, then "
            ],
            [
              "std::tie",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://en.cppreference.com/w/cpp/utility/tuple/tie"
                ]
              ]
            ],
            [
              " can be employed to unpack a "
            ],
            [
              "tuple",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " into existing variables:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If the types can be declared before the function returns, then "
          },
          {
            "Text": "std::tie",
            "AttrFlags": 2,
            "Link": "http://en.cppreference.com/w/cpp/utility/tuple/tie"
          },
          {
            "Text": " can be employed to unpack a "
          },
          {
            "Text": "tuple",
            "AttrFlags": 2
          },
          {
            "Text": " into existing variables:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521976523,
        "id": "fa9e88f4-2920-4a79-a121-f3549c345aac",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521976523,
        "parent_id": "d612e664-4419-4144-92a0-cc4e3ccb8cd4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int add, sub, mul, div;\nstd::tie(add, sub, mul, div) = foo(5, 12);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int add, sub, mul, div;\nstd::tie(add, sub, mul, div) = foo(5, 12);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521976523,
        "id": "bef31ec6-a0bf-4226-8318-228b856dd366",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521976523,
        "parent_id": "d612e664-4419-4144-92a0-cc4e3ccb8cd4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If one of the returned values is not needed, "
            ],
            [
              "std::ignore",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://en.cppreference.com/w/cpp/utility/tuple/ignore"
                ]
              ]
            ],
            [
              " can be used:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If one of the returned values is not needed, "
          },
          {
            "Text": "std::ignore",
            "AttrFlags": 2,
            "Link": "http://en.cppreference.com/w/cpp/utility/tuple/ignore"
          },
          {
            "Text": " can be used:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521976523,
        "id": "3c1bb589-0eef-4eb4-a72f-69d065a6dbdf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521976523,
        "parent_id": "d612e664-4419-4144-92a0-cc4e3ccb8cd4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "std::tie(add, sub, std::ignore, div) = foo(5, 12);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "std::tie(add, sub, std::ignore, div) = foo(5, 12);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521976524,
        "id": "b9419edf-3929-4533-9263-747b6d66e43f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521976524,
        "parent_id": "d612e664-4419-4144-92a0-cc4e3ccb8cd4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Structured bindings",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%2B%2B/487/functions-with-multiple-return-values/3384/structured-bindings#t=201607230711000500592"
                ]
              ]
            ],
            [
              " can be used to avoid "
            ],
            [
              "std::tie",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Structured bindings",
            "Link": "http://stackoverflow.com/documentation/c%2B%2B/487/functions-with-multiple-return-values/3384/structured-bindings#t=201607230711000500592"
          },
          {
            "Text": " can be used to avoid "
          },
          {
            "Text": "std::tie",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521976524,
        "id": "f573469f-d89b-4e31-a735-88a409d25569",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521976524,
        "parent_id": "d612e664-4419-4144-92a0-cc4e3ccb8cd4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "auto [add, sub, mul, div] = foo(5,12);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "auto [add, sub, mul, div] = foo(5,12);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521976525,
        "id": "a92659fd-551a-4c2e-8e77-954db8b3e014",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521976525,
        "parent_id": "d612e664-4419-4144-92a0-cc4e3ccb8cd4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If you want to return a tuple of lvalue references instead of a tuple of values, use "
            ],
            [
              "std::tie",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in place of "
            ],
            [
              "std::make_tuple",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://en.cppreference.com/w/cpp/utility/tuple/make_tuple"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If you want to return a tuple of lvalue references instead of a tuple of values, use "
          },
          {
            "Text": "std::tie",
            "AttrFlags": 2
          },
          {
            "Text": " in place of "
          },
          {
            "Text": "std::make_tuple",
            "AttrFlags": 2,
            "Link": "http://en.cppreference.com/w/cpp/utility/tuple/make_tuple"
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521976525,
        "id": "6174855f-1fa0-43d7-8fa2-0a409a408f7a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521976525,
        "parent_id": "d612e664-4419-4144-92a0-cc4e3ccb8cd4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "std::tuple\u003cint\u0026, int\u0026\u003e minmax( int\u0026 a, int\u0026 b ) {\n  if (b\u003ca)\n    return std::tie(b,a);\n  else\n    return std::tie(a,b);\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "std::tuple\u003cint\u0026, int\u0026\u003e minmax( int\u0026 a, int\u0026 b ) {\n  if (b\u003ca)\n    return std::tie(b,a);\n  else\n    return std::tie(a,b);\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521976525,
        "id": "927cfedf-ec33-4746-b92d-3c1bb1153871",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521976525,
        "parent_id": "d612e664-4419-4144-92a0-cc4e3ccb8cd4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "which permits"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "which permits"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521976525,
        "id": "9ab8862d-2569-4744-b2d4-e0f9970c3be2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521976525,
        "parent_id": "d612e664-4419-4144-92a0-cc4e3ccb8cd4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "void increase_least(int\u0026 a, int\u0026 b) {\n  std::get\u003c0\u003e(minmax(a,b))++;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "void increase_least(int\u0026 a, int\u0026 b) {\n  std::get\u003c0\u003e(minmax(a,b))++;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521976526,
        "id": "4e6f42a5-5bc2-4fdd-821e-ea05c8d5263e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521976526,
        "parent_id": "d612e664-4419-4144-92a0-cc4e3ccb8cd4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In some rare cases you’ll use "
            ],
            [
              "std::forward_as_tuple",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://en.cppreference.com/w/cpp/utility/tuple/forward_as_tuple"
                ]
              ]
            ],
            [
              " instead of "
            ],
            [
              "std::tie",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "; be careful if you do so, as temporaries may not last long enough to be consumed."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In some rare cases you’ll use "
          },
          {
            "Text": "std::forward_as_tuple",
            "AttrFlags": 2,
            "Link": "http://en.cppreference.com/w/cpp/utility/tuple/forward_as_tuple"
          },
          {
            "Text": " instead of "
          },
          {
            "Text": "std::tie",
            "AttrFlags": 2
          },
          {
            "Text": "; be careful if you do so, as temporaries may not last long enough to be consumed."
          }
        ]
      }
    ],
    "title": "Using std::tuple",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}