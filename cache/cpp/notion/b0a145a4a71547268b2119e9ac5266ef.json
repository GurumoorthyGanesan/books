{
  "ID": "b0a145a4-a715-4726-8b21-19e9ac5266ef",
  "Root": {
    "alive": true,
    "content": [
      "152e168f-5d56-48b7-a697-d3e0a97392ea",
      "7b0fae1f-18c4-4e24-80c7-dd029ffb6281",
      "8f1e9580-a4bd-42a3-a87a-3cb876ee31aa",
      "603ed1c3-9b14-4535-927b-ab9499389c6e",
      "8f740cfb-10bc-437c-8b56-0dbb4451158a",
      "acc553de-7023-4c14-a047-ba6b110943c2",
      "72426aef-f44c-4a3a-81f4-4fb4941cd3b4",
      "30adf70b-f96e-468f-a98c-0bbb096c6b85",
      "de2a7ec0-60d6-43d4-b5d0-02427e38b55b"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550521960502,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "b0a145a4-a715-4726-8b21-19e9ac5266ef",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550656860000,
    "parent_id": "94bfa868-4e02-4b90-841b-817c34132524",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Declaring non-type template arguments with auto"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521960501,
        "id": "152e168f-5d56-48b7-a697-d3e0a97392ea",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521960501,
        "parent_id": "b0a145a4-a715-4726-8b21-19e9ac5266ef",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Prior to C++17, when writing a template non-type parameter, you had to specify its type first. So a common pattern became writing something like:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Prior to C++17, when writing a template non-type parameter, you had to specify its type first. So a common pattern became writing something like:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521960501,
        "id": "7b0fae1f-18c4-4e24-80c7-dd029ffb6281",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521960501,
        "parent_id": "b0a145a4-a715-4726-8b21-19e9ac5266ef",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "template \u003cclass T, T N\u003e\nstruct integral_constant {\n    using type = T;\n    static constexpr T value = N;\n};\n\nusing five = integral_constant\u003cint, 5\u003e;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "template \u003cclass T, T N\u003e\nstruct integral_constant {\n    using type = T;\n    static constexpr T value = N;\n};\n\nusing five = integral_constant\u003cint, 5\u003e;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521960501,
        "id": "8f1e9580-a4bd-42a3-a87a-3cb876ee31aa",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521960501,
        "parent_id": "b0a145a4-a715-4726-8b21-19e9ac5266ef",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "But for complicated expressions, using something like this involves having to write "
            ],
            [
              "decltype(expr), expr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " when instantiating templates. The solution is to simplify this idiom and simply allow "
            ],
            [
              "auto",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "But for complicated expressions, using something like this involves having to write "
          },
          {
            "Text": "decltype(expr), expr",
            "AttrFlags": 2
          },
          {
            "Text": " when instantiating templates. The solution is to simplify this idiom and simply allow "
          },
          {
            "Text": "auto",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521960502,
        "id": "603ed1c3-9b14-4535-927b-ab9499389c6e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521960502,
        "parent_id": "b0a145a4-a715-4726-8b21-19e9ac5266ef",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "template \u003cauto N\u003e\nstruct integral_constant {\n    using type = decltype(N); \n    static constexpr type value = N;\n};\n\nusing five = integral_constant\u003c5\u003e;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "template \u003cauto N\u003e\nstruct integral_constant {\n    using type = decltype(N); \n    static constexpr type value = N;\n};\n\nusing five = integral_constant\u003c5\u003e;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521960502,
        "id": "8f740cfb-10bc-437c-8b56-0dbb4451158a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521960502,
        "parent_id": "b0a145a4-a715-4726-8b21-19e9ac5266ef",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Empty custom deleter for unique_ptr"
            ]
          ]
        },
        "type": "sub_sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Empty custom deleter for unique_ptr"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521960502,
        "id": "acc553de-7023-4c14-a047-ba6b110943c2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521960502,
        "parent_id": "b0a145a4-a715-4726-8b21-19e9ac5266ef",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A nice motivating example can come from trying to combine the empty base optimization with a custom deleter for "
            ],
            [
              "unique_ptr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Different C API deleters have different return types, but we don’t care - we just want something to work for any function:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A nice motivating example can come from trying to combine the empty base optimization with a custom deleter for "
          },
          {
            "Text": "unique_ptr",
            "AttrFlags": 2
          },
          {
            "Text": ". Different C API deleters have different return types, but we don’t care - we just want something to work for any function:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521960502,
        "id": "72426aef-f44c-4a3a-81f4-4fb4941cd3b4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521960502,
        "parent_id": "b0a145a4-a715-4726-8b21-19e9ac5266ef",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "template \u003cauto DeleteFn\u003e\nstruct FunctionDeleter {\n    template \u003cclass T\u003e\n    void operator()(T* ptr) const {\n        DeleteFn(ptr);\n    }\n};\n\ntemplate \u003cT, auto DeleteFn\u003e\nusing unique_ptr_deleter = std::unique_ptr\u003cT, FunctionDeleter\u003cDeleteFn\u003e\u003e;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "template \u003cauto DeleteFn\u003e\nstruct FunctionDeleter {\n    template \u003cclass T\u003e\n    void operator()(T* ptr) const {\n        DeleteFn(ptr);\n    }\n};\n\ntemplate \u003cT, auto DeleteFn\u003e\nusing unique_ptr_deleter = std::unique_ptr\u003cT, FunctionDeleter\u003cDeleteFn\u003e\u003e;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521960502,
        "id": "30adf70b-f96e-468f-a98c-0bbb096c6b85",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521960502,
        "parent_id": "b0a145a4-a715-4726-8b21-19e9ac5266ef",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "And now you can simply use any function pointer that can take an argument of type "
            ],
            [
              "T",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " as a template non-type parameter, regardless of return type, and get a no-size overhead "
            ],
            [
              "unique_ptr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " out of it:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "And now you can simply use any function pointer that can take an argument of type "
          },
          {
            "Text": "T",
            "AttrFlags": 2
          },
          {
            "Text": " as a template non-type parameter, regardless of return type, and get a no-size overhead "
          },
          {
            "Text": "unique_ptr",
            "AttrFlags": 2
          },
          {
            "Text": " out of it:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521960502,
        "id": "de2a7ec0-60d6-43d4-b5d0-02427e38b55b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521960502,
        "parent_id": "b0a145a4-a715-4726-8b21-19e9ac5266ef",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "unique_ptr_deleter\u003cstd::FILE, std::fclose\u003e p;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "unique_ptr_deleter\u003cstd::FILE, std::fclose\u003e p;",
        "code_language": "Plain Text"
      }
    ],
    "title": "Declaring non-type template arguments with auto",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}