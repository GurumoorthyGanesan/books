{
  "ID": "53e2f9d5-4de6-4a4e-b8a3-80a0f31fca3d",
  "Root": {
    "alive": true,
    "content": [
      "ac577a57-80e2-45e6-b04f-8172819a4f96",
      "5098cf1c-a568-49ff-8afe-553be418738a",
      "4684b3f4-fd63-43b0-894c-4b62da740ef3",
      "479dad19-af5b-4fdd-9b18-3ff62a393443",
      "31eea393-270b-4517-a66d-aaf4c66c1aac",
      "dce8f535-57e8-45b0-a74b-ae3d43a06067",
      "b2693371-e715-4b12-adee-56e2612011ad"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550525126621,
    "id": "53e2f9d5-4de6-4a4e-b8a3-80a0f31fca3d",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550525126621,
    "parent_id": "3e515719-4b1e-4dc7-9955-45485e25e7d3",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "020 Making a C library header compatible with C "
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525126617,
        "id": "ac577a57-80e2-45e6-b04f-8172819a4f96",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525126617,
        "parent_id": "53e2f9d5-4de6-4a4e-b8a3-80a0f31fca3d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A C library header can usually be included into a C++ program, since most declarations are valid in both C and C++. For example, consider the following "
            ],
            [
              "foo.h",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A C library header can usually be included into a C++ program, since most declarations are valid in both C and C++. For example, consider the following "
          },
          {
            "Text": "foo.h",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525126619,
        "id": "5098cf1c-a568-49ff-8afe-553be418738a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525126619,
        "parent_id": "53e2f9d5-4de6-4a4e-b8a3-80a0f31fca3d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "typedef struct Foo {\n    int bar;\n} Foo;\nFoo make_foo(int);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "typedef struct Foo {\n    int bar;\n} Foo;\nFoo make_foo(int);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525126620,
        "id": "4684b3f4-fd63-43b0-894c-4b62da740ef3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525126620,
        "parent_id": "53e2f9d5-4de6-4a4e-b8a3-80a0f31fca3d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The definition of "
            ],
            [
              "make_foo",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is separately compiled and distributed with the header in object form."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The definition of "
          },
          {
            "Text": "make_foo",
            "AttrFlags": 2
          },
          {
            "Text": " is separately compiled and distributed with the header in object form."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525126620,
        "id": "479dad19-af5b-4fdd-9b18-3ff62a393443",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525126620,
        "parent_id": "53e2f9d5-4de6-4a4e-b8a3-80a0f31fca3d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A C++ program can "
            ],
            [
              "#include \u003cfoo.h\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", but the compiler will not know that the "
            ],
            [
              "make_foo",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " function is defined as a C symbol, and will probably try to look for it with a mangled name, and fail to locate it. Even if it can find the definition of "
            ],
            [
              "make_foo",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in the library, not all platforms use the same calling conventions for C and C++, and the C++ compiler will use the C++ calling convention when calling "
            ],
            [
              "make_foo",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", which is likely to cause a segmentation fault if "
            ],
            [
              "make_foo",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is expecting to be called with the C calling convention."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A C++ program can "
          },
          {
            "Text": "#include \u003cfoo.h\u003e",
            "AttrFlags": 2
          },
          {
            "Text": ", but the compiler will not know that the "
          },
          {
            "Text": "make_foo",
            "AttrFlags": 2
          },
          {
            "Text": " function is defined as a C symbol, and will probably try to look for it with a mangled name, and fail to locate it. Even if it can find the definition of "
          },
          {
            "Text": "make_foo",
            "AttrFlags": 2
          },
          {
            "Text": " in the library, not all platforms use the same calling conventions for C and C++, and the C++ compiler will use the C++ calling convention when calling "
          },
          {
            "Text": "make_foo",
            "AttrFlags": 2
          },
          {
            "Text": ", which is likely to cause a segmentation fault if "
          },
          {
            "Text": "make_foo",
            "AttrFlags": 2
          },
          {
            "Text": " is expecting to be called with the C calling convention."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525126620,
        "id": "31eea393-270b-4517-a66d-aaf4c66c1aac",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525126620,
        "parent_id": "53e2f9d5-4de6-4a4e-b8a3-80a0f31fca3d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The way to remedy this problem is to wrap almost all the declarations in the header in an "
            ],
            [
              "extern \"C\"",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " block."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The way to remedy this problem is to wrap almost all the declarations in the header in an "
          },
          {
            "Text": "extern \"C\"",
            "AttrFlags": 2
          },
          {
            "Text": " block."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525126621,
        "id": "dce8f535-57e8-45b0-a74b-ae3d43a06067",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525126621,
        "parent_id": "53e2f9d5-4de6-4a4e-b8a3-80a0f31fca3d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#ifdef __cplusplus\nextern \"C\" {\n#endif\n\ntypedef struct Foo {\n    int bar;\n} Foo;\nFoo make_foo(int);\n\n#ifdef __cplusplus\n}  /* end of \"extern C\" block */\n#endif"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#ifdef __cplusplus\nextern \"C\" {\n#endif\n\ntypedef struct Foo {\n    int bar;\n} Foo;\nFoo make_foo(int);\n\n#ifdef __cplusplus\n}  /* end of \"extern C\" block */\n#endif",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525126621,
        "id": "b2693371-e715-4b12-adee-56e2612011ad",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525126621,
        "parent_id": "53e2f9d5-4de6-4a4e-b8a3-80a0f31fca3d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Now when "
            ],
            [
              "foo.h",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is included from a C program, it will just appear as ordinary declarations, but when "
            ],
            [
              "foo.h",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is included from a C++ program, "
            ],
            [
              "make_foo",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will be inside an "
            ],
            [
              "extern \"C\"",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " block and the compiler will know to look for an unmangled name and use the C calling convention."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Now when "
          },
          {
            "Text": "foo.h",
            "AttrFlags": 2
          },
          {
            "Text": " is included from a C program, it will just appear as ordinary declarations, but when "
          },
          {
            "Text": "foo.h",
            "AttrFlags": 2
          },
          {
            "Text": " is included from a C++ program, "
          },
          {
            "Text": "make_foo",
            "AttrFlags": 2
          },
          {
            "Text": " will be inside an "
          },
          {
            "Text": "extern \"C\"",
            "AttrFlags": 2
          },
          {
            "Text": " block and the compiler will know to look for an unmangled name and use the C calling convention."
          }
        ]
      }
    ],
    "title": "020 Making a C library header compatible with C "
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}