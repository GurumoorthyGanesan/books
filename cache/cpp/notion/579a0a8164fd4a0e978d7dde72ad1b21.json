{
  "ID": "579a0a81-64fd-4a0e-978d-7dde72ad1b21",
  "Root": {
    "alive": true,
    "content": [
      "ae91a81a-ce32-4245-b11b-21402f374585",
      "b7656aa0-9798-4bb8-b52b-c9ac78a6d7c3",
      "41f42e03-214b-4e8f-af47-5a3d2810d440",
      "c995cede-70b7-4cb3-9ff4-4333b6320614",
      "92a47df9-527a-42a4-a1dc-eb1bc92f1693",
      "efd117f1-0a4d-4e23-b097-150acf31b2d7",
      "79d8bca2-a31b-4e0e-b3c1-d2f4ac1faf84",
      "51a38226-10a6-417c-8e59-c92c94a3283f"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550523837680,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "579a0a81-64fd-4a0e-978d-7dde72ad1b21",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550815620000,
    "parent_id": "193b149e-733b-4344-8898-29dc4a2ef0b0",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Class types"
        ]
      ]
    },
    "type": "page",
    "version": 17,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523837667,
        "id": "ae91a81a-ce32-4245-b11b-21402f374585",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523837667,
        "parent_id": "579a0a81-64fd-4a0e-978d-7dde72ad1b21",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "By “class”, we mean a type that was defined using the "
            ],
            [
              "class",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "struct",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " keyword (but not "
            ],
            [
              "enum struct",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "enum class",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ")."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "By “class”, we mean a type that was defined using the "
          },
          {
            "Text": "class",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "struct",
            "AttrFlags": 2
          },
          {
            "Text": " keyword (but not "
          },
          {
            "Text": "enum struct",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "enum class",
            "AttrFlags": 2
          },
          {
            "Text": ")."
          }
        ]
      },
      {
        "alive": true,
        "content": [
          "c30141a3-092e-4118-ae66-84e6189d938a"
        ],
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523837673,
        "id": "b7656aa0-9798-4bb8-b52b-c9ac78a6d7c3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550797980000,
        "parent_id": "579a0a81-64fd-4a0e-978d-7dde72ad1b21",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Even an empty class still occupies at least one byte of storage; it will therefore consist purely of padding. This ensures that if "
            ],
            [
              "p",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " points to an object of an empty class, then "
            ],
            [
              "p + 1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is a distinct address and points to a distinct object. However, it is possible for an empty class to have a size of 0 when used as a base class. See "
            ],
            [
              "empty base optimisation",
              [
                [
                  "a",
                  "http://en.cppreference.com/w/cpp/language/ebo"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 3,
        "content_resolved": [
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1550523837673,
            "id": "c30141a3-092e-4118-ae66-84e6189d938a",
            "ignore_block_count": true,
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1550797980000,
            "parent_id": "b7656aa0-9798-4bb8-b52b-c9ac78a6d7c3",
            "parent_table": "block",
            "properties": {
              "language": [
                [
                  "C++"
                ]
              ],
              "title": [
                [
                  "class Empty_1 {};                               // sizeof(Empty_1)       == 1\nclass Empty_2 {};                               // sizeof(Empty_2)       == 1\nclass Derived : Empty_1 {};                     // sizeof(Derived)       == 1\nclass DoubleDerived : Empty_1, Empty_2 {};      // sizeof(DoubleDerived) == 1\nclass Holder { Empty_1 e; };                    // sizeof(Holder)        == 1\nclass DoubleHolder { Empty_1 e1; Empty_2 e2; }; // sizeof(DoubleHolder)  == 2\nclass DerivedHolder : Empty_1 { Empty_1 e; };   // sizeof(DerivedHolder) == 2"
                ]
              ]
            },
            "type": "code",
            "version": 5,
            "code": "class Empty_1 {};                               // sizeof(Empty_1)       == 1\nclass Empty_2 {};                               // sizeof(Empty_2)       == 1\nclass Derived : Empty_1 {};                     // sizeof(Derived)       == 1\nclass DoubleDerived : Empty_1, Empty_2 {};      // sizeof(DoubleDerived) == 1\nclass Holder { Empty_1 e; };                    // sizeof(Holder)        == 1\nclass DoubleHolder { Empty_1 e1; Empty_2 e2; }; // sizeof(DoubleHolder)  == 2\nclass DerivedHolder : Empty_1 { Empty_1 e; };   // sizeof(DerivedHolder) == 2",
            "code_language": "C++"
          }
        ],
        "inline_content": [
          {
            "Text": "Even an empty class still occupies at least one byte of storage; it will therefore consist purely of padding. This ensures that if "
          },
          {
            "Text": "p",
            "AttrFlags": 2
          },
          {
            "Text": " points to an object of an empty class, then "
          },
          {
            "Text": "p + 1",
            "AttrFlags": 2
          },
          {
            "Text": " is a distinct address and points to a distinct object. However, it is possible for an empty class to have a size of 0 when used as a base class. See "
          },
          {
            "Text": "empty base optimisation",
            "Link": "http://en.cppreference.com/w/cpp/language/ebo"
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "content": [
          "23768cc5-389a-4cd7-8379-3a3f2303d072",
          "667dc499-dda6-4918-944d-3de3f3f0748d"
        ],
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523837674,
        "id": "41f42e03-214b-4e8f-af47-5a3d2810d440",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550797980000,
        "parent_id": "579a0a81-64fd-4a0e-978d-7dde72ad1b21",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The object representation of a class type contains the object representations of the base class and non-static member types. Therefore, for example, in the following class:"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 4,
        "content_resolved": [
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1550523837674,
            "id": "23768cc5-389a-4cd7-8379-3a3f2303d072",
            "ignore_block_count": true,
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1550815620000,
            "parent_id": "41f42e03-214b-4e8f-af47-5a3d2810d440",
            "parent_table": "block",
            "properties": {
              "language": [
                [
                  "C++"
                ]
              ],
              "title": [
                [
                  "struct S {\n    int x;\n    char* y;\n};"
                ]
              ]
            },
            "type": "code",
            "version": 5,
            "code": "struct S {\n    int x;\n    char* y;\n};",
            "code_language": "C++"
          },
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1550523837674,
            "id": "667dc499-dda6-4918-944d-3de3f3f0748d",
            "ignore_block_count": true,
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1550797980000,
            "parent_id": "41f42e03-214b-4e8f-af47-5a3d2810d440",
            "parent_table": "block",
            "properties": {
              "title": [
                [
                  "there is a consecutive sequence of "
                ],
                [
                  "sizeof(int)",
                  [
                    [
                      "c"
                    ]
                  ]
                ],
                [
                  " bytes within an "
                ],
                [
                  "S",
                  [
                    [
                      "c"
                    ]
                  ]
                ],
                [
                  " object, called a "
                ],
                [
                  "subobject,",
                  [
                    [
                      "i"
                    ]
                  ]
                ],
                [
                  " that contain the value of "
                ],
                [
                  "x",
                  [
                    [
                      "c"
                    ]
                  ]
                ],
                [
                  ", and another subobject with "
                ],
                [
                  "sizeof(char*)",
                  [
                    [
                      "c"
                    ]
                  ]
                ],
                [
                  " bytes that contains the value of "
                ],
                [
                  "y",
                  [
                    [
                      "c"
                    ]
                  ]
                ],
                [
                  ". The two cannot be interleaved."
                ]
              ]
            },
            "type": "text",
            "version": 4,
            "inline_content": [
              {
                "Text": "there is a consecutive sequence of "
              },
              {
                "Text": "sizeof(int)",
                "AttrFlags": 2
              },
              {
                "Text": " bytes within an "
              },
              {
                "Text": "S",
                "AttrFlags": 2
              },
              {
                "Text": " object, called a "
              },
              {
                "Text": "subobject,",
                "AttrFlags": 4
              },
              {
                "Text": " that contain the value of "
              },
              {
                "Text": "x",
                "AttrFlags": 2
              },
              {
                "Text": ", and another subobject with "
              },
              {
                "Text": "sizeof(char*)",
                "AttrFlags": 2
              },
              {
                "Text": " bytes that contains the value of "
              },
              {
                "Text": "y",
                "AttrFlags": 2
              },
              {
                "Text": ". The two cannot be interleaved."
              }
            ]
          }
        ],
        "inline_content": [
          {
            "Text": "The object representation of a class type contains the object representations of the base class and non-static member types. Therefore, for example, in the following class:"
          }
        ]
      },
      {
        "alive": true,
        "content": [
          "d940801f-ba96-428a-a33f-71b88bab0f35"
        ],
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523837676,
        "id": "c995cede-70b7-4cb3-9ff4-4333b6320614",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550797980000,
        "parent_id": "579a0a81-64fd-4a0e-978d-7dde72ad1b21",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If a class type has members and/or base classes with types "
            ],
            [
              "t1, t2,...tN",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", the size must be at least "
            ],
            [
              "sizeof(t1) + sizeof(t2) + ... + sizeof(tN)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " given the preceding points. However, depending on the "
            ],
            [
              "alignment",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%2B%2B/9249/alignment"
                ]
              ]
            ],
            [
              " requirements of the members and base classes, the compiler may be forced to insert padding between subobjects, or at the beginning or end of the complete object."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 3,
        "content_resolved": [
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1550523837676,
            "id": "d940801f-ba96-428a-a33f-71b88bab0f35",
            "ignore_block_count": true,
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1550797980000,
            "parent_id": "c995cede-70b7-4cb3-9ff4-4333b6320614",
            "parent_table": "block",
            "properties": {
              "language": [
                [
                  "C++"
                ]
              ],
              "title": [
                [
                  "struct AnInt      { int i; };\n  // sizeof(AnInt)        == sizeof(int)\n  // Assuming a typical 32- or 64-bit system, sizeof(AnInt)        == 4 (4).\nstruct TwoInts    { int i, j; };\n  // sizeof(TwoInts)      \u003e= 2 * sizeof(int)\n  // Assuming a typical 32- or 64-bit system, sizeof(TwoInts)      == 8 (4 + 4).\nstruct IntAndChar { int i; char c; };\n  // sizeof(IntAndChar)   \u003e= sizeof(int) + sizeof(char)\n  // Assuming a typical 32- or 64-bit system, sizeof(IntAndChar)   == 8 (4 + 1 + padding).\nstruct AnIntDerived : AnInt { long long l; };\n  // sizeof(AnIntDerived) \u003e= sizeof(AnInt) + sizeof(long long)\n  // Assuming a typical 32- or 64-bit system, sizeof(AnIntDerived) == 16 (4 + padding + 8)."
                ]
              ]
            },
            "type": "code",
            "version": 5,
            "code": "struct AnInt      { int i; };\n  // sizeof(AnInt)        == sizeof(int)\n  // Assuming a typical 32- or 64-bit system, sizeof(AnInt)        == 4 (4).\nstruct TwoInts    { int i, j; };\n  // sizeof(TwoInts)      \u003e= 2 * sizeof(int)\n  // Assuming a typical 32- or 64-bit system, sizeof(TwoInts)      == 8 (4 + 4).\nstruct IntAndChar { int i; char c; };\n  // sizeof(IntAndChar)   \u003e= sizeof(int) + sizeof(char)\n  // Assuming a typical 32- or 64-bit system, sizeof(IntAndChar)   == 8 (4 + 1 + padding).\nstruct AnIntDerived : AnInt { long long l; };\n  // sizeof(AnIntDerived) \u003e= sizeof(AnInt) + sizeof(long long)\n  // Assuming a typical 32- or 64-bit system, sizeof(AnIntDerived) == 16 (4 + padding + 8).",
            "code_language": "C++"
          }
        ],
        "inline_content": [
          {
            "Text": "If a class type has members and/or base classes with types "
          },
          {
            "Text": "t1, t2,...tN",
            "AttrFlags": 2
          },
          {
            "Text": ", the size must be at least "
          },
          {
            "Text": "sizeof(t1) + sizeof(t2) + ... + sizeof(tN)",
            "AttrFlags": 2
          },
          {
            "Text": " given the preceding points. However, depending on the "
          },
          {
            "Text": "alignment",
            "Link": "http://stackoverflow.com/documentation/c%2B%2B/9249/alignment"
          },
          {
            "Text": " requirements of the members and base classes, the compiler may be forced to insert padding between subobjects, or at the beginning or end of the complete object."
          }
        ]
      },
      {
        "alive": true,
        "content": [
          "8445d7d0-06da-4b4d-881f-3a78f694ae4a",
          "bf7f7c3a-ea4d-4724-8dd5-339de16b8868"
        ],
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523837678,
        "id": "92a47df9-527a-42a4-a1dc-eb1bc92f1693",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550797980000,
        "parent_id": "579a0a81-64fd-4a0e-978d-7dde72ad1b21",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If padding is inserted in an object due to alignment requirements, the size will be greater than the sum of the sizes of the members and base classes. With "
            ],
            [
              "n",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "-byte alignment, size will typically be the smallest multiple of "
            ],
            [
              "n",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " which is larger than the size of all members \u0026 base classes. Each member "
            ],
            [
              "memN",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will typically be placed at an address which is a multiple of "
            ],
            [
              "alignof(memN)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", and "
            ],
            [
              "n",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will typically be the largest "
            ],
            [
              "alignof",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " out of all members’ "
            ],
            [
              "alignof",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "s. Due to this, if a member with a smaller "
            ],
            [
              "alignof",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is followed by a member with a larger "
            ],
            [
              "alignof",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", there is a possibility that the latter member will not be aligned properly if placed immediately after the former. In this case, padding (also known as an "
            ],
            [
              "alignment member",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " ) will be placed between the two members, such that the latter member can have its desired alignment. Conversely, if a member with a larger "
            ],
            [
              "alignof",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is followed by a member with a smaller "
            ],
            [
              "alignof",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", no padding will usually be necessary. This process is also known as “packing”."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 4,
        "content_resolved": [
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1550523837678,
            "id": "8445d7d0-06da-4b4d-881f-3a78f694ae4a",
            "ignore_block_count": true,
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1550797980000,
            "parent_id": "92a47df9-527a-42a4-a1dc-eb1bc92f1693",
            "parent_table": "block",
            "properties": {
              "title": [
                [
                  "Due to classes typically sharing the "
                ],
                [
                  "alignof",
                  [
                    [
                      "c"
                    ]
                  ]
                ],
                [
                  " of their member with the largest "
                ],
                [
                  "alignof",
                  [
                    [
                      "c"
                    ]
                  ]
                ],
                [
                  ", classes will typically be aligned to the "
                ],
                [
                  "alignof",
                  [
                    [
                      "c"
                    ]
                  ]
                ],
                [
                  " of the largest built-in type they directly or indirectly contain."
                ]
              ]
            },
            "type": "text",
            "version": 4,
            "inline_content": [
              {
                "Text": "Due to classes typically sharing the "
              },
              {
                "Text": "alignof",
                "AttrFlags": 2
              },
              {
                "Text": " of their member with the largest "
              },
              {
                "Text": "alignof",
                "AttrFlags": 2
              },
              {
                "Text": ", classes will typically be aligned to the "
              },
              {
                "Text": "alignof",
                "AttrFlags": 2
              },
              {
                "Text": " of the largest built-in type they directly or indirectly contain."
              }
            ]
          },
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1550523837678,
            "id": "bf7f7c3a-ea4d-4724-8dd5-339de16b8868",
            "ignore_block_count": true,
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1550797980000,
            "parent_id": "92a47df9-527a-42a4-a1dc-eb1bc92f1693",
            "parent_table": "block",
            "properties": {
              "language": [
                [
                  "C++"
                ]
              ],
              "title": [
                [
                  "// Assume sizeof(short) == 2, sizeof(int) == 4, and sizeof(long long) == 8.\n// Assume 4-byte alignment is specified to the compiler.\nstruct Char { char c; };\n  // sizeof(Char)                == 1 (sizeof(char))\nstruct Int  { int i; };\n  // sizeof(Int)                 == 4 (sizeof(int))\nstruct CharInt { char c; int i; };\n  // sizeof(CharInt)             == 8 (1 (char) + 3 (padding) + 4 (int))\nstruct ShortIntCharInt { short s; int i; char c; int j; };\n  // sizeof(ShortIntCharInt)     == 16 (2 (short) + 2 (padding) + 4 (int) + 1 (char) +\n  //                                    3 (padding) + 4 (int))\nstruct ShortIntCharCharInt { short s; int i; char c; char d; int j; };\n  // sizeof(ShortIntCharCharInt) == 16 (2 (short) + 2 (padding) + 4 (int) + 1 (char) +\n  //                                    1 (char) + 2 (padding) + 4 (int))\nstruct ShortCharShortInt { short s; char c; short t; int i; };\n  // sizeof(ShortCharShortInt)   == 12 (2 (short) + 1 (char) + 1 (padding) + 2 (short) +\n  //                                    2 (padding) + 4 (int))\nstruct IntLLInt { int i; long long l; int j; };\n  // sizeof(IntLLInt)            == 16 (4 (int) + 8 (long long) + 4 (int))\n  // If packing isn't explicitly specified, most compilers will pack this as\n  //   8-byte alignment, such that:\n  // sizeof(IntLLInt)            == 24 (4 (int) + 4 (padding) + 8 (long long) +\n  //                                    4 (int) + 4 (padding))\n\n// Assume sizeof(bool) == 1, sizeof(ShortIntCharInt) == 16, and sizeof(IntLLInt) == 24.\n// Assume default alignment: alignof(ShortIntCharInt) == 4, alignof(IntLLInt) == 8.\nstruct ShortChar3ArrShortInt {\n    short s;\n    char c3[3];\n    short t;\n    int i;\n};\n  // ShortChar3ArrShortInt has 4-byte alignment: alignof(int) \u003e= alignof(char) \u0026\u0026\n  //                                             alignof(int) \u003e= alignof(short)\n  // sizeof(ShortChar3ArrShortInt) == 12 (2 (short) + 3 (char[3]) + 1 (padding) +\n  //                                      2 (short) + 4 (int))\n  // Note that t is placed at alignment of 2, not 4.  alignof(short) == 2.\n\nstruct Large_1 {\n    ShortIntCharInt sici;\n    bool b;\n    ShortIntCharInt tjdj;\n};\n  // Large_1 has 4-byte alignment.\n    // alignof(ShortIntCharInt) == alignof(int) == 4\n    // alignof(b) == 1\n    // Therefore, alignof(Large_1) == 4.\n  // sizeof(Large_1) == 36 (16 (ShortIntCharInt) + 1 (bool) + 3 (padding) +\n  //                        16 (ShortIntCharInt))\nstruct Large_2 {\n    IntLLInt illi;\n    float f;\n    IntLLInt jmmj;\n};\n  // Large_2 has 8-byte alignment.\n    // alignof(IntLLInt) == alignof(long long) == 8\n    // alignof(float) == 4\n    // Therefore, alignof(Large_2) == 8.\n  // sizeof(Large_2) == 56 (24 (IntLLInt) + 4 (float) + 4 (padding) + 24 (IntLLInt))"
                ]
              ]
            },
            "type": "code",
            "version": 5,
            "code": "// Assume sizeof(short) == 2, sizeof(int) == 4, and sizeof(long long) == 8.\n// Assume 4-byte alignment is specified to the compiler.\nstruct Char { char c; };\n  // sizeof(Char)                == 1 (sizeof(char))\nstruct Int  { int i; };\n  // sizeof(Int)                 == 4 (sizeof(int))\nstruct CharInt { char c; int i; };\n  // sizeof(CharInt)             == 8 (1 (char) + 3 (padding) + 4 (int))\nstruct ShortIntCharInt { short s; int i; char c; int j; };\n  // sizeof(ShortIntCharInt)     == 16 (2 (short) + 2 (padding) + 4 (int) + 1 (char) +\n  //                                    3 (padding) + 4 (int))\nstruct ShortIntCharCharInt { short s; int i; char c; char d; int j; };\n  // sizeof(ShortIntCharCharInt) == 16 (2 (short) + 2 (padding) + 4 (int) + 1 (char) +\n  //                                    1 (char) + 2 (padding) + 4 (int))\nstruct ShortCharShortInt { short s; char c; short t; int i; };\n  // sizeof(ShortCharShortInt)   == 12 (2 (short) + 1 (char) + 1 (padding) + 2 (short) +\n  //                                    2 (padding) + 4 (int))\nstruct IntLLInt { int i; long long l; int j; };\n  // sizeof(IntLLInt)            == 16 (4 (int) + 8 (long long) + 4 (int))\n  // If packing isn't explicitly specified, most compilers will pack this as\n  //   8-byte alignment, such that:\n  // sizeof(IntLLInt)            == 24 (4 (int) + 4 (padding) + 8 (long long) +\n  //                                    4 (int) + 4 (padding))\n\n// Assume sizeof(bool) == 1, sizeof(ShortIntCharInt) == 16, and sizeof(IntLLInt) == 24.\n// Assume default alignment: alignof(ShortIntCharInt) == 4, alignof(IntLLInt) == 8.\nstruct ShortChar3ArrShortInt {\n    short s;\n    char c3[3];\n    short t;\n    int i;\n};\n  // ShortChar3ArrShortInt has 4-byte alignment: alignof(int) \u003e= alignof(char) \u0026\u0026\n  //                                             alignof(int) \u003e= alignof(short)\n  // sizeof(ShortChar3ArrShortInt) == 12 (2 (short) + 3 (char[3]) + 1 (padding) +\n  //                                      2 (short) + 4 (int))\n  // Note that t is placed at alignment of 2, not 4.  alignof(short) == 2.\n\nstruct Large_1 {\n    ShortIntCharInt sici;\n    bool b;\n    ShortIntCharInt tjdj;\n};\n  // Large_1 has 4-byte alignment.\n    // alignof(ShortIntCharInt) == alignof(int) == 4\n    // alignof(b) == 1\n    // Therefore, alignof(Large_1) == 4.\n  // sizeof(Large_1) == 36 (16 (ShortIntCharInt) + 1 (bool) + 3 (padding) +\n  //                        16 (ShortIntCharInt))\nstruct Large_2 {\n    IntLLInt illi;\n    float f;\n    IntLLInt jmmj;\n};\n  // Large_2 has 8-byte alignment.\n    // alignof(IntLLInt) == alignof(long long) == 8\n    // alignof(float) == 4\n    // Therefore, alignof(Large_2) == 8.\n  // sizeof(Large_2) == 56 (24 (IntLLInt) + 4 (float) + 4 (padding) + 24 (IntLLInt))",
            "code_language": "C++"
          }
        ],
        "inline_content": [
          {
            "Text": "If padding is inserted in an object due to alignment requirements, the size will be greater than the sum of the sizes of the members and base classes. With "
          },
          {
            "Text": "n",
            "AttrFlags": 2
          },
          {
            "Text": "-byte alignment, size will typically be the smallest multiple of "
          },
          {
            "Text": "n",
            "AttrFlags": 2
          },
          {
            "Text": " which is larger than the size of all members \u0026 base classes. Each member "
          },
          {
            "Text": "memN",
            "AttrFlags": 2
          },
          {
            "Text": " will typically be placed at an address which is a multiple of "
          },
          {
            "Text": "alignof(memN)",
            "AttrFlags": 2
          },
          {
            "Text": ", and "
          },
          {
            "Text": "n",
            "AttrFlags": 2
          },
          {
            "Text": " will typically be the largest "
          },
          {
            "Text": "alignof",
            "AttrFlags": 2
          },
          {
            "Text": " out of all members’ "
          },
          {
            "Text": "alignof",
            "AttrFlags": 2
          },
          {
            "Text": "s. Due to this, if a member with a smaller "
          },
          {
            "Text": "alignof",
            "AttrFlags": 2
          },
          {
            "Text": " is followed by a member with a larger "
          },
          {
            "Text": "alignof",
            "AttrFlags": 2
          },
          {
            "Text": ", there is a possibility that the latter member will not be aligned properly if placed immediately after the former. In this case, padding (also known as an "
          },
          {
            "Text": "alignment member",
            "AttrFlags": 4
          },
          {
            "Text": " ) will be placed between the two members, such that the latter member can have its desired alignment. Conversely, if a member with a larger "
          },
          {
            "Text": "alignof",
            "AttrFlags": 2
          },
          {
            "Text": " is followed by a member with a smaller "
          },
          {
            "Text": "alignof",
            "AttrFlags": 2
          },
          {
            "Text": ", no padding will usually be necessary. This process is also known as “packing”."
          }
        ]
      },
      {
        "alive": true,
        "content": [
          "9808ae3d-7ac2-4f03-a16e-69d29c0ee02e"
        ],
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523837679,
        "id": "efd117f1-0a4d-4e23-b097-150acf31b2d7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550797980000,
        "parent_id": "579a0a81-64fd-4a0e-978d-7dde72ad1b21",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If strict alignment is forced with "
            ],
            [
              "alignas",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", padding will be used to force the type to meet the specified alignment, even when it would otherwise be smaller. For example, with the definition below, "
            ],
            [
              "Chars\u003c5\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will have three (or possibly more) padding bytes inserted at the end so that its total size is 8. It is not possible for a class with an alignment of 4 to have a size of 5 because it would be impossible to make an array of that class, so the size must be “rounded up” to a multiple of 4 by inserting padding bytes."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 3,
        "content_resolved": [
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1550523837679,
            "id": "9808ae3d-7ac2-4f03-a16e-69d29c0ee02e",
            "ignore_block_count": true,
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1550798040000,
            "parent_id": "efd117f1-0a4d-4e23-b097-150acf31b2d7",
            "parent_table": "block",
            "properties": {
              "language": [
                [
                  "C++"
                ]
              ],
              "title": [
                [
                  "// This type shall always be aligned to a multiple of 4.  Padding shall be inserted as\n// needed.\n// Chars\u003c1\u003e..Chars\u003c4\u003e are 4 bytes, Chars\u003c5\u003e..Chars\u003c8\u003e are 8 bytes, etc.\ntemplate\u003csize_t SZ\u003e\nstruct alignas(4) Chars { char arr[SZ]; };\n\nstatic_assert(sizeof(Chars\u003c1\u003e) == sizeof(Chars\u003c4\u003e), \"Alignment is strict.\\n\");"
                ]
              ]
            },
            "type": "code",
            "version": 6,
            "code": "// This type shall always be aligned to a multiple of 4.  Padding shall be inserted as\n// needed.\n// Chars\u003c1\u003e..Chars\u003c4\u003e are 4 bytes, Chars\u003c5\u003e..Chars\u003c8\u003e are 8 bytes, etc.\ntemplate\u003csize_t SZ\u003e\nstruct alignas(4) Chars { char arr[SZ]; };\n\nstatic_assert(sizeof(Chars\u003c1\u003e) == sizeof(Chars\u003c4\u003e), \"Alignment is strict.\\n\");",
            "code_language": "C++"
          }
        ],
        "inline_content": [
          {
            "Text": "If strict alignment is forced with "
          },
          {
            "Text": "alignas",
            "AttrFlags": 2
          },
          {
            "Text": ", padding will be used to force the type to meet the specified alignment, even when it would otherwise be smaller. For example, with the definition below, "
          },
          {
            "Text": "Chars\u003c5\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " will have three (or possibly more) padding bytes inserted at the end so that its total size is 8. It is not possible for a class with an alignment of 4 to have a size of 5 because it would be impossible to make an array of that class, so the size must be “rounded up” to a multiple of 4 by inserting padding bytes."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523837680,
        "id": "79d8bca2-a31b-4e0e-b3c1-d2f4ac1faf84",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523837680,
        "parent_id": "579a0a81-64fd-4a0e-978d-7dde72ad1b21",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If two non-static members of a class have the same "
            ],
            [
              "access specifier",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%2B%2B/508/classes-structures/1668/access-specifiers"
                ]
              ]
            ],
            [
              ", then the one that comes later in declaration order is guaranteed to come later in the object representation. But if two non-static members have different access specifiers, their relative order within the object is unspecified."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "If two non-static members of a class have the same "
          },
          {
            "Text": "access specifier",
            "Link": "http://stackoverflow.com/documentation/c%2B%2B/508/classes-structures/1668/access-specifiers"
          },
          {
            "Text": ", then the one that comes later in declaration order is guaranteed to come later in the object representation. But if two non-static members have different access specifiers, their relative order within the object is unspecified."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523837680,
        "id": "51a38226-10a6-417c-8e59-c92c94a3283f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523837680,
        "parent_id": "579a0a81-64fd-4a0e-978d-7dde72ad1b21",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It is unspecified what order the base class subobjects appear in within an object, whether they occur consecutively, and whether they appear before, after, or between member subobjects."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "It is unspecified what order the base class subobjects appear in within an object, whether they occur consecutively, and whether they appear before, after, or between member subobjects."
          }
        ]
      }
    ],
    "title": "Class types",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}