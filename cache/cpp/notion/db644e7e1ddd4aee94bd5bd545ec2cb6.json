{
  "ID": "db644e7e-1ddd-4aee-94bd-5bd545ec2cb6",
  "Root": {
    "alive": true,
    "content": [
      "4eeb62b7-8c8e-4d30-8003-36ff60b43d77",
      "56eead27-9291-4e45-b182-9bc89220fbaa",
      "2a2409fc-010c-4dd0-9330-a4c46d7eea28",
      "ae67c7d1-fa08-47da-9ac3-b03930a34d61",
      "f170d358-1f68-4a2a-a626-9a33b1e4c64a",
      "15036d30-61c7-40bd-ba59-afc87f0d2f41",
      "8540d0e4-cc11-44e1-bad9-af25a6723341",
      "913578cb-6814-47c7-a898-6825ddebc1ed"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550523033126,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "db644e7e-1ddd-4aee-94bd-5bd545ec2cb6",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551687118202,
    "parent_id": "89d591b2-5143-487b-8a09-144b6b266e4c",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Basic Enumeration Declaration"
        ]
      ]
    },
    "type": "page",
    "version": 4,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523033122,
        "id": "4eeb62b7-8c8e-4d30-8003-36ff60b43d77",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523033122,
        "parent_id": "db644e7e-1ddd-4aee-94bd-5bd545ec2cb6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Standard enumerations allow users to declare a useful name for a set of integers. The names are collectively referred to as enumerators. An enumeration and its associated enumerators are defined as follows:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Standard enumerations allow users to declare a useful name for a set of integers. The names are collectively referred to as enumerators. An enumeration and its associated enumerators are defined as follows:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523033125,
        "id": "56eead27-9291-4e45-b182-9bc89220fbaa",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523033125,
        "parent_id": "db644e7e-1ddd-4aee-94bd-5bd545ec2cb6",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "enum myEnum\n{\n    enumName1,\n    enumName2,\n};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "enum myEnum\n{\n    enumName1,\n    enumName2,\n};",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523033125,
        "id": "2a2409fc-010c-4dd0-9330-a4c46d7eea28",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523033125,
        "parent_id": "db644e7e-1ddd-4aee-94bd-5bd545ec2cb6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "An enumeration is a "
            ],
            [
              "type",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ", one which is distinct from all other types. In this case, the name of this type is "
            ],
            [
              "myEnum",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Objects of this type are expected to assume the value of an enumerator within the enumeration."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "An enumeration is a "
          },
          {
            "Text": "type",
            "AttrFlags": 4
          },
          {
            "Text": ", one which is distinct from all other types. In this case, the name of this type is "
          },
          {
            "Text": "myEnum",
            "AttrFlags": 2
          },
          {
            "Text": ". Objects of this type are expected to assume the value of an enumerator within the enumeration."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523033126,
        "id": "ae67c7d1-fa08-47da-9ac3-b03930a34d61",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523033126,
        "parent_id": "db644e7e-1ddd-4aee-94bd-5bd545ec2cb6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The enumerators declared within the enumeration are constant values of the type of the enumeration. Though the enumerators are declared within the type, the scope operator "
            ],
            [
              "::",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is not needed to access the name. So the name of the first enumerator is "
            ],
            [
              "enumName1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The enumerators declared within the enumeration are constant values of the type of the enumeration. Though the enumerators are declared within the type, the scope operator "
          },
          {
            "Text": "::",
            "AttrFlags": 2
          },
          {
            "Text": " is not needed to access the name. So the name of the first enumerator is "
          },
          {
            "Text": "enumName1",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523033126,
        "id": "f170d358-1f68-4a2a-a626-9a33b1e4c64a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523033126,
        "parent_id": "db644e7e-1ddd-4aee-94bd-5bd545ec2cb6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The scope operator can be optionally used to access an enumerator within an enumeration. So "
            ],
            [
              "enumName1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can also be spelled "
            ],
            [
              "myEnum::enumName1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The scope operator can be optionally used to access an enumerator within an enumeration. So "
          },
          {
            "Text": "enumName1",
            "AttrFlags": 2
          },
          {
            "Text": " can also be spelled "
          },
          {
            "Text": "myEnum::enumName1",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523033126,
        "id": "15036d30-61c7-40bd-ba59-afc87f0d2f41",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523033126,
        "parent_id": "db644e7e-1ddd-4aee-94bd-5bd545ec2cb6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Enumerators are assigned integer values starting from 0 and increasing by 1 for each enumerator in an enumeration. So in the above case, "
            ],
            [
              "enumName1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " has the value 0, while "
            ],
            [
              "enumName2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " has the value 1."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Enumerators are assigned integer values starting from 0 and increasing by 1 for each enumerator in an enumeration. So in the above case, "
          },
          {
            "Text": "enumName1",
            "AttrFlags": 2
          },
          {
            "Text": " has the value 0, while "
          },
          {
            "Text": "enumName2",
            "AttrFlags": 2
          },
          {
            "Text": " has the value 1."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523033126,
        "id": "8540d0e4-cc11-44e1-bad9-af25a6723341",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523033126,
        "parent_id": "db644e7e-1ddd-4aee-94bd-5bd545ec2cb6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Enumerators can also be assigned a specific value by the user; this value must be an integral constant expression. Enumerators who’s values are not explicitly provided will have their value set to the value of the previous enumerator + 1."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Enumerators can also be assigned a specific value by the user; this value must be an integral constant expression. Enumerators who’s values are not explicitly provided will have their value set to the value of the previous enumerator + 1."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523033126,
        "id": "913578cb-6814-47c7-a898-6825ddebc1ed",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523033126,
        "parent_id": "db644e7e-1ddd-4aee-94bd-5bd545ec2cb6",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "enum myEnum\n{\n    enumName1 = 1, // value will be 1\n    enumName2 = 2, // value will be 2\n    enumName3,     // value will be 3, previous value + 1\n    enumName4 = 7, // value will be 7\n    enumName5,     // value will be 8\n    enumName6 = 5, // value will be 5, legal to go backwards\n    enumName7 = 3, // value will be 3, legal to reuse numbers\n    enumName8 = enumName4 + 2, // value will be 9, legal to take prior enums and adjust them\n};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "enum myEnum\n{\n    enumName1 = 1, // value will be 1\n    enumName2 = 2, // value will be 2\n    enumName3,     // value will be 3, previous value + 1\n    enumName4 = 7, // value will be 7\n    enumName5,     // value will be 8\n    enumName6 = 5, // value will be 5, legal to go backwards\n    enumName7 = 3, // value will be 3, legal to reuse numbers\n    enumName8 = enumName4 + 2, // value will be 9, legal to take prior enums and adjust them\n};",
        "code_language": "Plain Text"
      }
    ],
    "title": "Basic Enumeration Declaration",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}