{
  "ID": "e4fbd89a-0a62-4644-9c10-adf28d219766",
  "Root": {
    "alive": true,
    "content": [
      "daceee18-2d50-48d3-b19d-41b9b17f19a0",
      "2662db5e-d0a8-4493-b0f8-70ed8a088def",
      "124dcc03-2f4b-42b0-b8a9-3e75fc8ebbe0",
      "253e5afb-3160-446f-a21b-d36950c6b312",
      "8b73426b-5c00-4f39-bfdc-269e9ccbc65a",
      "1f1072b0-6999-4b23-a0cf-76b2c41faac0",
      "2c8a8696-3e7a-429d-a866-3987d37846e2",
      "e1bd24d2-8f0c-4d2f-9eab-6395c02636be",
      "a1c9e0a9-be01-4f47-93b6-dfd3045b4aa2",
      "f8a2de4c-78a2-4f95-9db6-94e1e34359e3",
      "530f6e98-1773-482e-a15d-6c9641f4ebdc",
      "ac436d9c-a091-4b5e-80a9-7e66b233bebd"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550523502292,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "e4fbd89a-0a62-4644-9c10-adf28d219766",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551687697016,
    "parent_id": "f6be37ea-b1ea-4d12-902e-1e55a74f3c28",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Optimizing by executing less code"
        ]
      ]
    },
    "type": "page",
    "version": 4,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523502288,
        "id": "daceee18-2d50-48d3-b19d-41b9b17f19a0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523502288,
        "parent_id": "e4fbd89a-0a62-4644-9c10-adf28d219766",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The most straightforward approach to optimizing is by executing less code. This approach usually gives a fixed speed-up without changing the time complexity of the code."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The most straightforward approach to optimizing is by executing less code. This approach usually gives a fixed speed-up without changing the time complexity of the code."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523502290,
        "id": "2662db5e-d0a8-4493-b0f8-70ed8a088def",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523502290,
        "parent_id": "e4fbd89a-0a62-4644-9c10-adf28d219766",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Even though this approach gives you a clear speedup, this will only give noticable improvements when the code is called a lot."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Even though this approach gives you a clear speedup, this will only give noticable improvements when the code is called a lot."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523502291,
        "id": "124dcc03-2f4b-42b0-b8a9-3e75fc8ebbe0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523502291,
        "parent_id": "e4fbd89a-0a62-4644-9c10-adf28d219766",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Removing useless code"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Removing useless code"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523502291,
        "id": "253e5afb-3160-446f-a21b-d36950c6b312",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523502291,
        "parent_id": "e4fbd89a-0a62-4644-9c10-adf28d219766",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "void func(const A *a); // Some random function\n\n// useless memory allocation + deallocation for the instance\nauto a1 = std::make_unique\u003cA\u003e();\nfunc(a1.get()); \n\n// making use of a stack object prevents \nauto a2 = A{};\nfunc(\u0026a2);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "void func(const A *a); // Some random function\n\n// useless memory allocation + deallocation for the instance\nauto a1 = std::make_unique\u003cA\u003e();\nfunc(a1.get()); \n\n// making use of a stack object prevents \nauto a2 = A{};\nfunc(\u0026a2);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523502291,
        "id": "8b73426b-5c00-4f39-bfdc-269e9ccbc65a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523502291,
        "parent_id": "e4fbd89a-0a62-4644-9c10-adf28d219766",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "From C++14, compilers are allowed to optimize this code to remove the allocation and matching deallocation."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "From C++14, compilers are allowed to optimize this code to remove the allocation and matching deallocation."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523502291,
        "id": "1f1072b0-6999-4b23-a0cf-76b2c41faac0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523502291,
        "parent_id": "e4fbd89a-0a62-4644-9c10-adf28d219766",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Doing code only once"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Doing code only once"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523502291,
        "id": "2c8a8696-3e7a-429d-a866-3987d37846e2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523502291,
        "parent_id": "e4fbd89a-0a62-4644-9c10-adf28d219766",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "std::map\u003cstd::string, std::unique_ptr\u003cA\u003e\u003e lookup;\n// Slow insertion/lookup\n// Within this function, we will traverse twice through the map lookup an element\n// and even a thirth time when it wasn't in\nconst A *lazyLookupSlow(const std::string \u0026key) {\n    if (lookup.find(key) != lookup.cend())\n        lookup.emplace_back(key, std::make_unique\u003cA\u003e());\n    return lookup[key].get();\n}\n\n// Within this function, we will have the same noticeable effect as the slow variant while going at double speed as we only traverse once through the code\nconst A *lazyLookupSlow(const std::string \u0026key) {\n    auto \u0026value = lookup[key];\n    if (!value)\n        value = std::make_unique\u003cA\u003e();\n    return value.get();\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "std::map\u003cstd::string, std::unique_ptr\u003cA\u003e\u003e lookup;\n// Slow insertion/lookup\n// Within this function, we will traverse twice through the map lookup an element\n// and even a thirth time when it wasn't in\nconst A *lazyLookupSlow(const std::string \u0026key) {\n    if (lookup.find(key) != lookup.cend())\n        lookup.emplace_back(key, std::make_unique\u003cA\u003e());\n    return lookup[key].get();\n}\n\n// Within this function, we will have the same noticeable effect as the slow variant while going at double speed as we only traverse once through the code\nconst A *lazyLookupSlow(const std::string \u0026key) {\n    auto \u0026value = lookup[key];\n    if (!value)\n        value = std::make_unique\u003cA\u003e();\n    return value.get();\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523502291,
        "id": "e1bd24d2-8f0c-4d2f-9eab-6395c02636be",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523502291,
        "parent_id": "e4fbd89a-0a62-4644-9c10-adf28d219766",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A similar approach to this optimization can be used to implement a stable version of "
            ],
            [
              "unique",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A similar approach to this optimization can be used to implement a stable version of "
          },
          {
            "Text": "unique",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523502291,
        "id": "a1c9e0a9-be01-4f47-93b6-dfd3045b4aa2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523502291,
        "parent_id": "e4fbd89a-0a62-4644-9c10-adf28d219766",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "std::vector\u003cstd::string\u003e stableUnique(const std::vector\u003cstd::string\u003e \u0026v) {\n    std::vector\u003cstd::string\u003e result;\n    std::set\u003cstd::string\u003e checkUnique;\n    for (const auto \u0026s : v) {\n        // As insert returns if the insertion was successful, we can deduce if the element was already in or not\n        // This prevents an insertion, which will traverse through the map for every unique element\n        // As a result we can almost gain 50% if v would not contain any duplicates\n        if (checkUnique.insert(s).second)\n            result.push_back(s);\n    }\n    return result;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "std::vector\u003cstd::string\u003e stableUnique(const std::vector\u003cstd::string\u003e \u0026v) {\n    std::vector\u003cstd::string\u003e result;\n    std::set\u003cstd::string\u003e checkUnique;\n    for (const auto \u0026s : v) {\n        // As insert returns if the insertion was successful, we can deduce if the element was already in or not\n        // This prevents an insertion, which will traverse through the map for every unique element\n        // As a result we can almost gain 50% if v would not contain any duplicates\n        if (checkUnique.insert(s).second)\n            result.push_back(s);\n    }\n    return result;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523502292,
        "id": "f8a2de4c-78a2-4f95-9db6-94e1e34359e3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523502292,
        "parent_id": "e4fbd89a-0a62-4644-9c10-adf28d219766",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Preventing useless reallocating and copying/moving"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Preventing useless reallocating and copying/moving"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523502292,
        "id": "530f6e98-1773-482e-a15d-6c9641f4ebdc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523502292,
        "parent_id": "e4fbd89a-0a62-4644-9c10-adf28d219766",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In the previous example, we already prevented lookups in the std::set, however the "
            ],
            [
              "std::vector",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " still contains a growing algorithm, in which it will have to realloc its storage. This can be prevented by first reserving for the right size."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In the previous example, we already prevented lookups in the std::set, however the "
          },
          {
            "Text": "std::vector",
            "AttrFlags": 2
          },
          {
            "Text": " still contains a growing algorithm, in which it will have to realloc its storage. This can be prevented by first reserving for the right size."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523502292,
        "id": "ac436d9c-a091-4b5e-80a9-7e66b233bebd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523502292,
        "parent_id": "e4fbd89a-0a62-4644-9c10-adf28d219766",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "std::vector\u003cstd::string\u003e stableUnique(const std::vector\u003cstd::string\u003e \u0026v) {\n    std::vector\u003cstd::string\u003e result;\n    // By reserving 'result', we can ensure that no copying or moving will be done in the vector\n    // as it will have capacity for the maximum number of elements we will be inserting\n    // If we make the assumption that no allocation occurs for size zero\n    // and allocating a large block of memory takes the same time as a small block of memory\n    // this will never slow down the program\n    // Side note: Compilers can even predict this and remove the checks the growing from the generated code\n    result.reserve(v.size());\n    std::set\u003cstd::string\u003e checkUnique;\n    for (const auto \u0026s : v) {\n        // See example above\n        if (checkUnique.insert(s).second)\n            result.push_back(s);\n    }\n    return result;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "std::vector\u003cstd::string\u003e stableUnique(const std::vector\u003cstd::string\u003e \u0026v) {\n    std::vector\u003cstd::string\u003e result;\n    // By reserving 'result', we can ensure that no copying or moving will be done in the vector\n    // as it will have capacity for the maximum number of elements we will be inserting\n    // If we make the assumption that no allocation occurs for size zero\n    // and allocating a large block of memory takes the same time as a small block of memory\n    // this will never slow down the program\n    // Side note: Compilers can even predict this and remove the checks the growing from the generated code\n    result.reserve(v.size());\n    std::set\u003cstd::string\u003e checkUnique;\n    for (const auto \u0026s : v) {\n        // See example above\n        if (checkUnique.insert(s).second)\n            result.push_back(s);\n    }\n    return result;\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "Optimizing by executing less code",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}