{
  "ID": "70d41fdf-2355-4ce1-ad84-fd27d02a8866",
  "Root": {
    "alive": true,
    "content": [
      "c092ec58-2403-4a68-b8fa-fb37ab0da83e",
      "bc29e6db-81e5-4ea2-b8b1-e45a11476e1d",
      "623d1b50-8059-4a30-9ccb-c981c14f97da",
      "2992d23f-e89d-4a38-9d9c-5819f682152b",
      "5abc1adf-0373-4515-aa7f-b84db390464c",
      "0d580f31-3567-4cb2-a11d-af09ba56e1f5",
      "919980d3-edcb-417d-8623-ae7884a1db10",
      "d1bdab1a-d15c-471a-ae34-26ebc30f4ecc",
      "64127e65-3030-4336-9aae-db83787b2ae2",
      "0baddb4c-d0d7-4f70-92d6-18711c475a6a",
      "c45774c5-232e-40ec-abe6-e451f8b12b5d",
      "3589955c-17d8-4cbb-a768-54ac751d65b5",
      "7a5ced00-2be3-4ded-bf97-a0701b4dc0ce",
      "eb2c0f60-5c22-4862-ba78-07f2cbcb4e92",
      "41f678e3-1aa6-4fde-941e-2fff0fe8fc76",
      "dfe84bd5-9f9e-4ece-b568-ef869b72c85c",
      "9334680a-fde2-4ac8-926e-ff0db53e4350",
      "1ccc919f-9987-4e7a-9b8b-43900233e86a",
      "39c14de1-fc7a-48bb-b45f-701316284375",
      "96aabb3b-cfd2-460e-9c40-9c5c688ed8c4",
      "d53074fb-a59b-4115-a102-a3f88bfc542d",
      "40e86342-876c-43c2-bcee-38aa6bc48327",
      "057d080e-0300-4f63-b6a4-04c23c44cd78",
      "513d8639-a306-441c-9e13-432eb37f30c2",
      "a13a9fa0-870e-429c-bb04-ebc3eb534284",
      "d00ae472-e0ee-4589-a170-11b6f17266f6",
      "b8990d1f-7f9c-4c0f-8c94-334035f28cd0",
      "a0ec3de1-ae0b-44ad-bd20-d97fdd34c52c",
      "8cc7ed55-ba8c-48a2-9353-d4820abb110e",
      "d22c65cd-aa36-442a-94ed-e55155830237",
      "24f1f66e-163a-476e-b45b-b3fa9825192a",
      "2d040691-dfec-476c-b532-2185e454119c"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522026600,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "70d41fdf-2355-4ce1-ad84-fd27d02a8866",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550801700000,
    "parent_id": "40e8450d-4736-4ad0-be7d-a2d9307ddf4f",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Static class members"
        ]
      ]
    },
    "type": "page",
    "version": 16,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522026595,
        "id": "c092ec58-2403-4a68-b8fa-fb37ab0da83e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522026595,
        "parent_id": "70d41fdf-2355-4ce1-ad84-fd27d02a8866",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A class is also allowed to have "
            ],
            [
              "static",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " members, which can be either variables or functions. These are considered to be in the class’ scope, but aren’t treated as normal members; they have static storage duration (they exist from the start of the program to the end), aren’t tied to a particular instance of the class, and only one copy exists for the entire class."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A class is also allowed to have "
          },
          {
            "Text": "static",
            "AttrFlags": 2
          },
          {
            "Text": " members, which can be either variables or functions. These are considered to be in the class’ scope, but aren’t treated as normal members; they have static storage duration (they exist from the start of the program to the end), aren’t tied to a particular instance of the class, and only one copy exists for the entire class."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522026595,
        "id": "bc29e6db-81e5-4ea2-b8b1-e45a11476e1d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550801640000,
        "parent_id": "70d41fdf-2355-4ce1-ad84-fd27d02a8866",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "class Example {\n    static int num_instances;      // Static data member (static member variable).\n    int i;                         // Non-static member variable.\n\n  public:\n    static std::string static_str; // Static data member (static member variable).\n    static int static_func();      // Static member function.\n\n    // Non-static member functions can modify static member variables.\n    Example() { ++num_instances; }\n    void set_str(const std::string\u0026 str);\n};\n\nint         Example::num_instances;\nstd::string Example::static_str = \"Hello.\";\n\n// ...\n\nExample one, two, three;\n// Each Example has its own \"i\", such that:\n//  (\u0026one.i != \u0026two.i)\n//  (\u0026one.i != \u0026three.i)\n//  (\u0026two.i != \u0026three.i).\n// All three Examples share \"num_instances\", such that:\n//  (\u0026one.num_instances == \u0026two.num_instances)\n//  (\u0026one.num_instances == \u0026three.num_instances)\n//  (\u0026two.num_instances == \u0026three.num_instances)"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "class Example {\n    static int num_instances;      // Static data member (static member variable).\n    int i;                         // Non-static member variable.\n\n  public:\n    static std::string static_str; // Static data member (static member variable).\n    static int static_func();      // Static member function.\n\n    // Non-static member functions can modify static member variables.\n    Example() { ++num_instances; }\n    void set_str(const std::string\u0026 str);\n};\n\nint         Example::num_instances;\nstd::string Example::static_str = \"Hello.\";\n\n// ...\n\nExample one, two, three;\n// Each Example has its own \"i\", such that:\n//  (\u0026one.i != \u0026two.i)\n//  (\u0026one.i != \u0026three.i)\n//  (\u0026two.i != \u0026three.i).\n// All three Examples share \"num_instances\", such that:\n//  (\u0026one.num_instances == \u0026two.num_instances)\n//  (\u0026one.num_instances == \u0026three.num_instances)\n//  (\u0026two.num_instances == \u0026three.num_instances)",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522026596,
        "id": "623d1b50-8059-4a30-9ccb-c981c14f97da",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522026596,
        "parent_id": "70d41fdf-2355-4ce1-ad84-fd27d02a8866",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Static member variables are not considered to be defined inside the class, only declared, and thus have their definition outside the class definition; the programmer is allowed, but not required, to initialise static variables in their definition. When defining the member variables, the keyword "
            ],
            [
              "static",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is omitted."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Static member variables are not considered to be defined inside the class, only declared, and thus have their definition outside the class definition; the programmer is allowed, but not required, to initialise static variables in their definition. When defining the member variables, the keyword "
          },
          {
            "Text": "static",
            "AttrFlags": 2
          },
          {
            "Text": " is omitted."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522026596,
        "id": "2992d23f-e89d-4a38-9d9c-5819f682152b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550801640000,
        "parent_id": "70d41fdf-2355-4ce1-ad84-fd27d02a8866",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "class Example {\n    static int num_instances;               // Declaration.\n\n  public:\n    static std::string static_str;          // Declaration.\n\n    // ...\n};\n\nint         Example::num_instances;         // Definition.  Zero-initialised.\nstd::string Example::static_str = \"Hello.\"; // Definition."
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "class Example {\n    static int num_instances;               // Declaration.\n\n  public:\n    static std::string static_str;          // Declaration.\n\n    // ...\n};\n\nint         Example::num_instances;         // Definition.  Zero-initialised.\nstd::string Example::static_str = \"Hello.\"; // Definition.",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522026596,
        "id": "5abc1adf-0373-4515-aa7f-b84db390464c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522026596,
        "parent_id": "70d41fdf-2355-4ce1-ad84-fd27d02a8866",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Due to this, static variables can be incomplete types (apart from "
            ],
            [
              "void",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "), as long as they’re later defined as a complete type."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Due to this, static variables can be incomplete types (apart from "
          },
          {
            "Text": "void",
            "AttrFlags": 2
          },
          {
            "Text": "), as long as they’re later defined as a complete type."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522026596,
        "id": "0d580f31-3567-4cb2-a11d-af09ba56e1f5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550801640000,
        "parent_id": "70d41fdf-2355-4ce1-ad84-fd27d02a8866",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "struct ForwardDeclared;\n\nclass ExIncomplete {\n    static ForwardDeclared fd;\n    static ExIncomplete    i_contain_myself;\n    static int             an_array[];\n};\n\nstruct ForwardDeclared {};\n\nForwardDeclared ExIncomplete::fd;\nExIncomplete    ExIncomplete::i_contain_myself;\nint             ExIncomplete::an_array[5];"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "struct ForwardDeclared;\n\nclass ExIncomplete {\n    static ForwardDeclared fd;\n    static ExIncomplete    i_contain_myself;\n    static int             an_array[];\n};\n\nstruct ForwardDeclared {};\n\nForwardDeclared ExIncomplete::fd;\nExIncomplete    ExIncomplete::i_contain_myself;\nint             ExIncomplete::an_array[5];",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522026596,
        "id": "919980d3-edcb-417d-8623-ae7884a1db10",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522026596,
        "parent_id": "70d41fdf-2355-4ce1-ad84-fd27d02a8866",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Static member functions can be defined inside or outside the class definition, as with normal member functions. As with static member variables, the keyword "
            ],
            [
              "static",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is omitted when defining static member functions outside the class definition."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Static member functions can be defined inside or outside the class definition, as with normal member functions. As with static member variables, the keyword "
          },
          {
            "Text": "static",
            "AttrFlags": 2
          },
          {
            "Text": " is omitted when defining static member functions outside the class definition."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522026596,
        "id": "d1bdab1a-d15c-471a-ae34-26ebc30f4ecc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550801640000,
        "parent_id": "70d41fdf-2355-4ce1-ad84-fd27d02a8866",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "// For Example above, either...\nclass Example {\n    // ...\n\n  public:\n    static int static_func() { return num_instances; }\n\n    // ...\n\n    void set_str(const std::string\u0026 str) { static_str = str; }\n};\n\n// Or...\n\nclass Example { /* ... */ };\n\nint  Example::static_func() { return num_instances; }\nvoid Example::set_str(const std::string\u0026 str) { static_str = str; }"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "// For Example above, either...\nclass Example {\n    // ...\n\n  public:\n    static int static_func() { return num_instances; }\n\n    // ...\n\n    void set_str(const std::string\u0026 str) { static_str = str; }\n};\n\n// Or...\n\nclass Example { /* ... */ };\n\nint  Example::static_func() { return num_instances; }\nvoid Example::set_str(const std::string\u0026 str) { static_str = str; }",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522026597,
        "id": "64127e65-3030-4336-9aae-db83787b2ae2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522026597,
        "parent_id": "70d41fdf-2355-4ce1-ad84-fd27d02a8866",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If a static member variable is declared "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " but not "
            ],
            [
              "volatile",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", and is of an integral or enumeration type, it can be initialised at declaration, inside the class definition."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If a static member variable is declared "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": " but not "
          },
          {
            "Text": "volatile",
            "AttrFlags": 2
          },
          {
            "Text": ", and is of an integral or enumeration type, it can be initialised at declaration, inside the class definition."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522026597,
        "id": "0baddb4c-d0d7-4f70-92d6-18711c475a6a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550801640000,
        "parent_id": "70d41fdf-2355-4ce1-ad84-fd27d02a8866",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "enum E { VAL = 5 };\n\nstruct ExConst {\n    const static int ci = 5;              // Good.\n    static const E ce = VAL;              // Good.\n    const static double cd = 5;           // Error.\n    static const volatile int cvi = 5;    // Error.\n\n    const static double good_cd;\n    static const volatile int good_cvi;\n};\n\nconst double ExConst::good_cd = 5;        // Good.\nconst volatile int ExConst::good_cvi = 5; // Good."
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "enum E { VAL = 5 };\n\nstruct ExConst {\n    const static int ci = 5;              // Good.\n    static const E ce = VAL;              // Good.\n    const static double cd = 5;           // Error.\n    static const volatile int cvi = 5;    // Error.\n\n    const static double good_cd;\n    static const volatile int good_cvi;\n};\n\nconst double ExConst::good_cd = 5;        // Good.\nconst volatile int ExConst::good_cvi = 5; // Good.",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522026597,
        "id": "c45774c5-232e-40ec-abe6-e451f8b12b5d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522026597,
        "parent_id": "70d41fdf-2355-4ce1-ad84-fd27d02a8866",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As of C++11, static member variables of "
            ],
            [
              "LiteralType",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " types (types that can be constructed at compile time, according to "
            ],
            [
              "constexpr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " rules) can also be declared as "
            ],
            [
              "constexpr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "; if so, they must be initialised within the class definition."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "As of C++11, static member variables of "
          },
          {
            "Text": "LiteralType",
            "AttrFlags": 2
          },
          {
            "Text": " types (types that can be constructed at compile time, according to "
          },
          {
            "Text": "constexpr",
            "AttrFlags": 2
          },
          {
            "Text": " rules) can also be declared as "
          },
          {
            "Text": "constexpr",
            "AttrFlags": 2
          },
          {
            "Text": "; if so, they must be initialised within the class definition."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522026597,
        "id": "3589955c-17d8-4cbb-a768-54ac751d65b5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550801700000,
        "parent_id": "70d41fdf-2355-4ce1-ad84-fd27d02a8866",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "struct ExConstexpr {\n    constexpr static int ci = 5;                      // Good.\n    static constexpr double cd = 5;                   // Good.\n    constexpr static int carr[] = { 1, 1, 2 };        // Good.\n    static constexpr ConstexprConstructibleClass c{}; // Good.\n    constexpr static int bad_ci;                      // Error.\n};\n\nconstexpr int ExConstexpr::bad_ci = 5;                // Still an error."
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "struct ExConstexpr {\n    constexpr static int ci = 5;                      // Good.\n    static constexpr double cd = 5;                   // Good.\n    constexpr static int carr[] = { 1, 1, 2 };        // Good.\n    static constexpr ConstexprConstructibleClass c{}; // Good.\n    constexpr static int bad_ci;                      // Error.\n};\n\nconstexpr int ExConstexpr::bad_ci = 5;                // Still an error.",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522026597,
        "id": "7a5ced00-2be3-4ded-bf97-a0701b4dc0ce",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522026597,
        "parent_id": "70d41fdf-2355-4ce1-ad84-fd27d02a8866",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If a "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "constexpr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " static member variable is "
            ],
            [
              "odr-used",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " (informally, if it has its address taken or is assigned to a reference), then it must still have a separate definition, outside the class definition. This definition is not allowed to contain an initialiser."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If a "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "constexpr",
            "AttrFlags": 2
          },
          {
            "Text": " static member variable is "
          },
          {
            "Text": "odr-used",
            "AttrFlags": 4
          },
          {
            "Text": " (informally, if it has its address taken or is assigned to a reference), then it must still have a separate definition, outside the class definition. This definition is not allowed to contain an initialiser."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522026597,
        "id": "eb2c0f60-5c22-4862-ba78-07f2cbcb4e92",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550801700000,
        "parent_id": "70d41fdf-2355-4ce1-ad84-fd27d02a8866",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "struct ExODR {\n    static const int odr_used = 5;\n};\n\n// const int ExODR::odr_used;\n\nconst int* odr_user = \u0026 ExODR::odr_used; // Error; uncomment above line to resolve."
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "struct ExODR {\n    static const int odr_used = 5;\n};\n\n// const int ExODR::odr_used;\n\nconst int* odr_user = \u0026 ExODR::odr_used; // Error; uncomment above line to resolve.",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522026597,
        "id": "41f678e3-1aa6-4fde-941e-2fff0fe8fc76",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522026597,
        "parent_id": "70d41fdf-2355-4ce1-ad84-fd27d02a8866",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As static members aren’t tied to a given instance, they can be accessed using the scope operator, "
            ],
            [
              "::",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "As static members aren’t tied to a given instance, they can be accessed using the scope operator, "
          },
          {
            "Text": "::",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522026598,
        "id": "dfe84bd5-9f9e-4ece-b568-ef869b72c85c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550801700000,
        "parent_id": "70d41fdf-2355-4ce1-ad84-fd27d02a8866",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "std::string str = Example::static_str;"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "std::string str = Example::static_str;",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522026598,
        "id": "9334680a-fde2-4ac8-926e-ff0db53e4350",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522026598,
        "parent_id": "70d41fdf-2355-4ce1-ad84-fd27d02a8866",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "They can also be accessed as if they were normal, non-static members. This is of historical significance, but is used less commonly than the scope operator to prevent confusion over whether a member is static or non-static."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "They can also be accessed as if they were normal, non-static members. This is of historical significance, but is used less commonly than the scope operator to prevent confusion over whether a member is static or non-static."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522026598,
        "id": "1ccc919f-9987-4e7a-9b8b-43900233e86a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550801700000,
        "parent_id": "70d41fdf-2355-4ce1-ad84-fd27d02a8866",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "Example ex;\nstd::string rts = ex.static_str;"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "Example ex;\nstd::string rts = ex.static_str;",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522026598,
        "id": "39c14de1-fc7a-48bb-b45f-701316284375",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522026598,
        "parent_id": "70d41fdf-2355-4ce1-ad84-fd27d02a8866",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Class members are able to access static members without qualifying their scope, as with non-static class members."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Class members are able to access static members without qualifying their scope, as with non-static class members."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522026598,
        "id": "96aabb3b-cfd2-460e-9c40-9c5c688ed8c4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550801700000,
        "parent_id": "70d41fdf-2355-4ce1-ad84-fd27d02a8866",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "class ExTwo {\n    static int num_instances;\n    int my_num;\n\n  public:\n    ExTwo() : my_num(num_instances++) {}\n\n    static int get_total_instances() { return num_instances; }\n    int get_instance_number() const { return my_num; }\n};\n\nint ExTwo::num_instances;"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "class ExTwo {\n    static int num_instances;\n    int my_num;\n\n  public:\n    ExTwo() : my_num(num_instances++) {}\n\n    static int get_total_instances() { return num_instances; }\n    int get_instance_number() const { return my_num; }\n};\n\nint ExTwo::num_instances;",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522026598,
        "id": "d53074fb-a59b-4115-a102-a3f88bfc542d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522026598,
        "parent_id": "70d41fdf-2355-4ce1-ad84-fd27d02a8866",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "They cannot be "
            ],
            [
              "mutable",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", nor would they need to be; as they aren’t tied to any given instance, whether an instance is or isn’t const doesn’t affect static members."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "They cannot be "
          },
          {
            "Text": "mutable",
            "AttrFlags": 2
          },
          {
            "Text": ", nor would they need to be; as they aren’t tied to any given instance, whether an instance is or isn’t const doesn’t affect static members."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522026598,
        "id": "40e86342-876c-43c2-bcee-38aa6bc48327",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550801700000,
        "parent_id": "70d41fdf-2355-4ce1-ad84-fd27d02a8866",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "struct ExDontNeedMutable {\n    int immuta;\n    mutable int muta;\n\n    static int i;\n\n    ExDontNeedMutable() : immuta(-5), muta(-5) {}\n};\nint ExDontNeedMutable::i;\n\n// ...\n\nconst ExDontNeedMutable dnm;\ndnm.immuta = 5; // Error: Can't modify read-only object.\ndnm.muta = 5;   // Good.  Mutable fields of const objects can be written.\ndnm.i = 5;      // Good.  Static members can be written regardless of an instance's const-ness."
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "struct ExDontNeedMutable {\n    int immuta;\n    mutable int muta;\n\n    static int i;\n\n    ExDontNeedMutable() : immuta(-5), muta(-5) {}\n};\nint ExDontNeedMutable::i;\n\n// ...\n\nconst ExDontNeedMutable dnm;\ndnm.immuta = 5; // Error: Can't modify read-only object.\ndnm.muta = 5;   // Good.  Mutable fields of const objects can be written.\ndnm.i = 5;      // Good.  Static members can be written regardless of an instance's const-ness.",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522026598,
        "id": "057d080e-0300-4f63-b6a4-04c23c44cd78",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522026598,
        "parent_id": "70d41fdf-2355-4ce1-ad84-fd27d02a8866",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Static members respect access modifiers, just like non-static members."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Static members respect access modifiers, just like non-static members."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522026599,
        "id": "513d8639-a306-441c-9e13-432eb37f30c2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550801700000,
        "parent_id": "70d41fdf-2355-4ce1-ad84-fd27d02a8866",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "class ExAccess {\n    static int prv_int;\n\n  protected:\n    static int pro_int;\n\n  public:\n    static int pub_int;\n};\n\nint ExAccess::prv_int;\nint ExAccess::pro_int;\nint ExAccess::pub_int;\n\n// ...\n\nint x1 = ExAccess::prv_int; // Error: int ExAccess::prv_int is private.\nint x2 = ExAccess::pro_int; // Error: int ExAccess::pro_int is protected.\nint x3 = ExAccess::pub_int; // Good."
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "class ExAccess {\n    static int prv_int;\n\n  protected:\n    static int pro_int;\n\n  public:\n    static int pub_int;\n};\n\nint ExAccess::prv_int;\nint ExAccess::pro_int;\nint ExAccess::pub_int;\n\n// ...\n\nint x1 = ExAccess::prv_int; // Error: int ExAccess::prv_int is private.\nint x2 = ExAccess::pro_int; // Error: int ExAccess::pro_int is protected.\nint x3 = ExAccess::pub_int; // Good.",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522026599,
        "id": "a13a9fa0-870e-429c-bb04-ebc3eb534284",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522026599,
        "parent_id": "70d41fdf-2355-4ce1-ad84-fd27d02a8866",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As they aren’t tied to a given instance, static member functions have no "
            ],
            [
              "this",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " pointer; due to this, they can’t access non-static member variables unless passed an instance."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "As they aren’t tied to a given instance, static member functions have no "
          },
          {
            "Text": "this",
            "AttrFlags": 2
          },
          {
            "Text": " pointer; due to this, they can’t access non-static member variables unless passed an instance."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522026599,
        "id": "d00ae472-e0ee-4589-a170-11b6f17266f6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550801700000,
        "parent_id": "70d41fdf-2355-4ce1-ad84-fd27d02a8866",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "class ExInstanceRequired {\n    int i;\n\n  public:\n    ExInstanceRequired() : i(0) {}\n\n    static void bad_mutate() { ++i *= 5; }                         // Error.\n    static void good_mutate(ExInstanceRequired\u0026 e) { ++e.i *= 5; } // Good.\n};"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "class ExInstanceRequired {\n    int i;\n\n  public:\n    ExInstanceRequired() : i(0) {}\n\n    static void bad_mutate() { ++i *= 5; }                         // Error.\n    static void good_mutate(ExInstanceRequired\u0026 e) { ++e.i *= 5; } // Good.\n};",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522026599,
        "id": "b8990d1f-7f9c-4c0f-8c94-334035f28cd0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522026599,
        "parent_id": "70d41fdf-2355-4ce1-ad84-fd27d02a8866",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Due to not having a "
            ],
            [
              "this",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " pointer, their addresses can’t be stored in pointers-to-member-functions, and are instead stored in normal pointers-to-functions."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Due to not having a "
          },
          {
            "Text": "this",
            "AttrFlags": 2
          },
          {
            "Text": " pointer, their addresses can’t be stored in pointers-to-member-functions, and are instead stored in normal pointers-to-functions."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522026599,
        "id": "a0ec3de1-ae0b-44ad-bd20-d97fdd34c52c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550801700000,
        "parent_id": "70d41fdf-2355-4ce1-ad84-fd27d02a8866",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "struct ExPointer {\n           void nsfunc() {}\n    static void  sfunc() {}\n};\n\ntypedef void (ExPointer::* mem_f_ptr)();\ntypedef void (*f_ptr)();\n\nmem_f_ptr p_sf = \u0026ExPointer::sfunc; // Error.\n    f_ptr p_sf = \u0026ExPointer::sfunc; // Good."
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "struct ExPointer {\n           void nsfunc() {}\n    static void  sfunc() {}\n};\n\ntypedef void (ExPointer::* mem_f_ptr)();\ntypedef void (*f_ptr)();\n\nmem_f_ptr p_sf = \u0026ExPointer::sfunc; // Error.\n    f_ptr p_sf = \u0026ExPointer::sfunc; // Good.",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522026599,
        "id": "8cc7ed55-ba8c-48a2-9353-d4820abb110e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522026599,
        "parent_id": "70d41fdf-2355-4ce1-ad84-fd27d02a8866",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Due to not having a "
            ],
            [
              "this",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " pointer, they also cannot be "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "volatile",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", nor can they have ref-qualifiers. They also cannot be virtual."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Due to not having a "
          },
          {
            "Text": "this",
            "AttrFlags": 2
          },
          {
            "Text": " pointer, they also cannot be "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "volatile",
            "AttrFlags": 2
          },
          {
            "Text": ", nor can they have ref-qualifiers. They also cannot be virtual."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522026600,
        "id": "d22c65cd-aa36-442a-94ed-e55155830237",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550801700000,
        "parent_id": "70d41fdf-2355-4ce1-ad84-fd27d02a8866",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "struct ExCVQualifiersAndVirtual {\n    static void   func()                {} // Good.\n    static void  cfunc() const          {} // Error.\n    static void  vfunc() volatile       {} // Error.\n    static void cvfunc() const volatile {} // Error.\n    static void  rfunc() \u0026              {} // Error.\n    static void rvfunc() \u0026\u0026             {} // Error.\n\n    virtual static void vsfunc()        {} // Error.\n    static virtual void svfunc()        {} // Error.\n};"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "struct ExCVQualifiersAndVirtual {\n    static void   func()                {} // Good.\n    static void  cfunc() const          {} // Error.\n    static void  vfunc() volatile       {} // Error.\n    static void cvfunc() const volatile {} // Error.\n    static void  rfunc() \u0026              {} // Error.\n    static void rvfunc() \u0026\u0026             {} // Error.\n\n    virtual static void vsfunc()        {} // Error.\n    static virtual void svfunc()        {} // Error.\n};",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522026600,
        "id": "24f1f66e-163a-476e-b45b-b3fa9825192a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522026600,
        "parent_id": "70d41fdf-2355-4ce1-ad84-fd27d02a8866",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As they aren’t tied to a given instance, static member variables are effectively treated as special global variables; they’re created when the program starts, and destroyed when it exits, regardless of whether any instances of the class actually exist. Only a single copy of each static member variable exists (unless the variable is declared "
            ],
            [
              "thread_local",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (C++11 or later), in which case there’s one copy per thread)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "As they aren’t tied to a given instance, static member variables are effectively treated as special global variables; they’re created when the program starts, and destroyed when it exits, regardless of whether any instances of the class actually exist. Only a single copy of each static member variable exists (unless the variable is declared "
          },
          {
            "Text": "thread_local",
            "AttrFlags": 2
          },
          {
            "Text": " (C++11 or later), in which case there’s one copy per thread)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522026600,
        "id": "2d040691-dfec-476c-b532-2185e454119c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522026600,
        "parent_id": "70d41fdf-2355-4ce1-ad84-fd27d02a8866",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Static member variables have the same linkage as the class, whether the class has external or internal linkage. Local classes and unnamed classes aren’t allowed to have static members."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Static member variables have the same linkage as the class, whether the class has external or internal linkage. Local classes and unnamed classes aren’t allowed to have static members."
          }
        ]
      }
    ],
    "title": "Static class members",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}