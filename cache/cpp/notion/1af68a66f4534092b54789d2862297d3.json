{
  "ID": "1af68a66-f453-4092-b547-89d2862297d3",
  "Root": {
    "alive": true,
    "content": [
      "2cbc63c8-43e8-4849-a972-eb369281dd41",
      "f43e7a60-d097-44a7-ba48-e4c2b59d283e",
      "3ee12722-3dff-484f-9f30-20f82b173d9c",
      "e6f7d78c-7b91-4d5d-9c2f-c80fcfc174db",
      "d24a03dd-cc98-4f5c-bec0-cdc1e544332f",
      "819998b6-6e0a-4991-8fbb-79c049f6d8af",
      "990eeb9f-1641-45d4-a368-031f4560020f",
      "7cddaa40-8bbd-4c5b-b02e-c631eda23058",
      "bf873e3b-b7d8-4cc2-9f33-d2d6bcc106fd",
      "4a148135-32f8-4f8b-9edb-21a167486974"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522666591,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "1af68a66-f453-4092-b547-89d2862297d3",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550710560000,
    "parent_id": "5fbdea23-a3bd-48e3-9bb9-c7ca69fd9aa2",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "0Overloading on Forwarding Reference"
        ]
      ]
    },
    "type": "page",
    "version": 7,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522666587,
        "id": "2cbc63c8-43e8-4849-a972-eb369281dd41",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522666587,
        "parent_id": "1af68a66-f453-4092-b547-89d2862297d3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You must be very careful when providing a forwarding reference overload as it may match too well:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You must be very careful when providing a forwarding reference overload as it may match too well:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522666589,
        "id": "f43e7a60-d097-44a7-ba48-e4c2b59d283e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522666589,
        "parent_id": "1af68a66-f453-4092-b547-89d2862297d3",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "struct A {\n    A() = default;           // #1\n    A(A const\u0026 ) = default;  // #2\n\n    template \u003cclass T\u003e\n    A(T\u0026\u0026 );                 // #3\n};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "struct A {\n    A() = default;           // #1\n    A(A const\u0026 ) = default;  // #2\n\n    template \u003cclass T\u003e\n    A(T\u0026\u0026 );                 // #3\n};",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522666589,
        "id": "3ee12722-3dff-484f-9f30-20f82b173d9c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522666589,
        "parent_id": "1af68a66-f453-4092-b547-89d2862297d3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The intent here was that "
            ],
            [
              "A",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is copyable, and that we have this other constructor that might initialize some other member. However:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The intent here was that "
          },
          {
            "Text": "A",
            "AttrFlags": 2
          },
          {
            "Text": " is copyable, and that we have this other constructor that might initialize some other member. However:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522666590,
        "id": "e6f7d78c-7b91-4d5d-9c2f-c80fcfc174db",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522666590,
        "parent_id": "1af68a66-f453-4092-b547-89d2862297d3",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "A a;     // calls #1\nA b(a);  // calls #3!"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "A a;     // calls #1\nA b(a);  // calls #3!",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522666590,
        "id": "d24a03dd-cc98-4f5c-bec0-cdc1e544332f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522666590,
        "parent_id": "1af68a66-f453-4092-b547-89d2862297d3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "There are two viable matches for the construction call:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "There are two viable matches for the construction call:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522666590,
        "id": "819998b6-6e0a-4991-8fbb-79c049f6d8af",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522666590,
        "parent_id": "1af68a66-f453-4092-b547-89d2862297d3",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "A(A const\u0026 ); // #2\nA(A\u0026 );       // #3, with T = A\u0026"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "A(A const\u0026 ); // #2\nA(A\u0026 );       // #3, with T = A\u0026",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522666590,
        "id": "990eeb9f-1641-45d4-a368-031f4560020f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522666590,
        "parent_id": "1af68a66-f453-4092-b547-89d2862297d3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Both are Exact Matches, but "
            ],
            [
              "#3",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " takes a reference to a less "
            ],
            [
              "cv",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              "-qualified object than "
            ],
            [
              "#2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " does, so it has the better standard conversion sequence and is the best viable function."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Both are Exact Matches, but "
          },
          {
            "Text": "#3",
            "AttrFlags": 2
          },
          {
            "Text": " takes a reference to a less "
          },
          {
            "Text": "cv",
            "AttrFlags": 4
          },
          {
            "Text": "-qualified object than "
          },
          {
            "Text": "#2",
            "AttrFlags": 2
          },
          {
            "Text": " does, so it has the better standard conversion sequence and is the best viable function."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522666590,
        "id": "7cddaa40-8bbd-4c5b-b02e-c631eda23058",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522666590,
        "parent_id": "1af68a66-f453-4092-b547-89d2862297d3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The solution here is to always constrain these constructors (e.g. using SFINAE):"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The solution here is to always constrain these constructors (e.g. using SFINAE):"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522666590,
        "id": "bf873e3b-b7d8-4cc2-9f33-d2d6bcc106fd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522666590,
        "parent_id": "1af68a66-f453-4092-b547-89d2862297d3",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "template \u003cclass T,\n    class = std::enable_if_t\u003c!std::is_convertible\u003cstd::decay_t\u003cT\u003e*, A*\u003e::value\u003e\n    \u003e\nA(T\u0026\u0026 );"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "template \u003cclass T,\n    class = std::enable_if_t\u003c!std::is_convertible\u003cstd::decay_t\u003cT\u003e*, A*\u003e::value\u003e\n    \u003e\nA(T\u0026\u0026 );",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522666590,
        "id": "4a148135-32f8-4f8b-9edb-21a167486974",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522666590,
        "parent_id": "1af68a66-f453-4092-b547-89d2862297d3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The type trait here is to exclude any "
            ],
            [
              "A",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or class publicly and unambiguously derived from "
            ],
            [
              "A",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " from consideration, which would make this constructor ill-formed in the example described earlier (and hence removed from the overload set). As a result, the copy constructor is invoked - which is what we wanted."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The type trait here is to exclude any "
          },
          {
            "Text": "A",
            "AttrFlags": 2
          },
          {
            "Text": " or class publicly and unambiguously derived from "
          },
          {
            "Text": "A",
            "AttrFlags": 2
          },
          {
            "Text": " from consideration, which would make this constructor ill-formed in the example described earlier (and hence removed from the overload set). As a result, the copy constructor is invoked - which is what we wanted."
          }
        ]
      }
    ],
    "title": "0Overloading on Forwarding Reference",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}