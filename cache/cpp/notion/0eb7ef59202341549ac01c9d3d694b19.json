{
  "ID": "0eb7ef59-2023-4154-9ac0-1c9d3d694b19",
  "Root": {
    "alive": true,
    "content": [
      "017c5e86-64fa-461a-b713-4fd5e901dc74",
      "924fc820-9788-4136-8e49-592f06f024cc",
      "5e0bb6c2-1e2b-4ff2-9e79-7e74abe9625b",
      "414b9e4a-eac0-4901-8f86-02efa22a51ee",
      "8b9d5d9f-5f3e-4d23-983a-a295c3a94f9f",
      "8f9c25ae-1b48-4748-a997-92c64a6804e2",
      "834f089f-1b08-4f9b-b289-e7f2b8331f62",
      "ffc26804-b2b9-44e4-8f59-4c1ad9b985fd",
      "21854977-8b83-4c98-8a3b-43eaacc8ee28"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522638482,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "0eb7ef59-2023-4154-9ac0-1c9d3d694b19",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550710080000,
    "parent_id": "d0bc06f8-edea-49a0-bdbb-c1bef0d073bd",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Pure virtual functions"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522638479,
        "id": "017c5e86-64fa-461a-b713-4fd5e901dc74",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522638479,
        "parent_id": "0eb7ef59-2023-4154-9ac0-1c9d3d694b19",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We can also specify that a "
            ],
            [
              "virtual",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " function is "
            ],
            [
              "pure virtual",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " (abstract), by appending "
            ],
            [
              "= 0",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to the declaration. Classes with one or more pure virtual functions are considered to be abstract, and cannot be instantiated; only derived classes which define, or inherit definitions for, all pure virtual functions can be instantiated."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "We can also specify that a "
          },
          {
            "Text": "virtual",
            "AttrFlags": 2
          },
          {
            "Text": " function is "
          },
          {
            "Text": "pure virtual",
            "AttrFlags": 4
          },
          {
            "Text": " (abstract), by appending "
          },
          {
            "Text": "= 0",
            "AttrFlags": 2
          },
          {
            "Text": " to the declaration. Classes with one or more pure virtual functions are considered to be abstract, and cannot be instantiated; only derived classes which define, or inherit definitions for, all pure virtual functions can be instantiated."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522638480,
        "id": "924fc820-9788-4136-8e49-592f06f024cc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522638480,
        "parent_id": "0eb7ef59-2023-4154-9ac0-1c9d3d694b19",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "struct Abstract {\n    virtual void f() = 0;\n};\n\nstruct Concrete {\n    void f() override {}\n};\n\nAbstract a; // Error.\nConcrete c; // Good."
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "struct Abstract {\n    virtual void f() = 0;\n};\n\nstruct Concrete {\n    void f() override {}\n};\n\nAbstract a; // Error.\nConcrete c; // Good.",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522638480,
        "id": "5e0bb6c2-1e2b-4ff2-9e79-7e74abe9625b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522638480,
        "parent_id": "0eb7ef59-2023-4154-9ac0-1c9d3d694b19",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Even if a function is specified as pure virtual, it can be given a default implementation. Despite this, the function will still be considered abstract, and derived classes will have to define it before they can be instantiated. In this case, the derived class’ version of the function is even allowed to call the base class’ version."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Even if a function is specified as pure virtual, it can be given a default implementation. Despite this, the function will still be considered abstract, and derived classes will have to define it before they can be instantiated. In this case, the derived class’ version of the function is even allowed to call the base class’ version."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522638480,
        "id": "414b9e4a-eac0-4901-8f86-02efa22a51ee",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522638480,
        "parent_id": "0eb7ef59-2023-4154-9ac0-1c9d3d694b19",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "struct DefaultAbstract {\n    virtual void f() = 0;\n};\nvoid DefaultAbstract::f() {}\n\nstruct WhyWouldWeDoThis : DefaultAbstract {\n    void f() override { DefaultAbstract::f(); }\n};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "struct DefaultAbstract {\n    virtual void f() = 0;\n};\nvoid DefaultAbstract::f() {}\n\nstruct WhyWouldWeDoThis : DefaultAbstract {\n    void f() override { DefaultAbstract::f(); }\n};",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522638480,
        "id": "8b9d5d9f-5f3e-4d23-983a-a295c3a94f9f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522638480,
        "parent_id": "0eb7ef59-2023-4154-9ac0-1c9d3d694b19",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "There are a couple of reasons why we might want to do this:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "There are a couple of reasons why we might want to do this:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522638482,
        "id": "8f9c25ae-1b48-4748-a997-92c64a6804e2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522638482,
        "parent_id": "0eb7ef59-2023-4154-9ac0-1c9d3d694b19",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If we want to create a class that can’t itself be instantiated, but doesn’t prevent its derived classes from being instantiated, we can declare the destructor as pure virtual. Being the destructor, it must be defined anyways, if we want to be able to deallocate the instance. And "
            ],
            [
              "as the destructor is most likely already virtual to prevent memory leaks during polymorphic use",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%2B%2B/1717/polymorphism/20178/polymorphism-destructors"
                ]
              ]
            ],
            [
              ", we won’t incur an unnecessary performance hit from declaring another function "
            ],
            [
              "virtual",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". This can be useful when making interfaces."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "If we want to create a class that can’t itself be instantiated, but doesn’t prevent its derived classes from being instantiated, we can declare the destructor as pure virtual. Being the destructor, it must be defined anyways, if we want to be able to deallocate the instance. And "
          },
          {
            "Text": "as the destructor is most likely already virtual to prevent memory leaks during polymorphic use",
            "Link": "http://stackoverflow.com/documentation/c%2B%2B/1717/polymorphism/20178/polymorphism-destructors"
          },
          {
            "Text": ", we won’t incur an unnecessary performance hit from declaring another function "
          },
          {
            "Text": "virtual",
            "AttrFlags": 2
          },
          {
            "Text": ". This can be useful when making interfaces."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522638482,
        "id": "834f089f-1b08-4f9b-b289-e7f2b8331f62",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522638482,
        "parent_id": "0eb7ef59-2023-4154-9ac0-1c9d3d694b19",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "struct Interface {\n    virtual ~Interface() = 0;\n};\nInterface::~Interface() = default;\n\nstruct Implementation : Interface {};\n// ~Implementation() is automatically defined by the compiler if not explicitly\n//  specified, meeting the \"must be defined before instantiation\" requirement."
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "struct Interface {\n    virtual ~Interface() = 0;\n};\nInterface::~Interface() = default;\n\nstruct Implementation : Interface {};\n// ~Implementation() is automatically defined by the compiler if not explicitly\n//  specified, meeting the \"must be defined before instantiation\" requirement.",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522638482,
        "id": "ffc26804-b2b9-44e4-8f59-4c1ad9b985fd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522638482,
        "parent_id": "0eb7ef59-2023-4154-9ac0-1c9d3d694b19",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If most or all implementations of the pure virtual function will contain duplicate code, that code can instead be moved to the base class version, making the code easier to maintain."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "If most or all implementations of the pure virtual function will contain duplicate code, that code can instead be moved to the base class version, making the code easier to maintain."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522638482,
        "id": "21854977-8b83-4c98-8a3b-43eaacc8ee28",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522638482,
        "parent_id": "0eb7ef59-2023-4154-9ac0-1c9d3d694b19",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class SharedBase {\n    State my_state;\n    std::unique_ptr\u003cHelper\u003e my_helper;\n    // ...\n\n  public:\n    virtual void config(const Context\u0026 cont) = 0;\n    // ...\n};\n/* virtual */ void SharedBase::config(const Context\u0026 cont) {\n    my_helper = new Helper(my_state, cont.relevant_field);\n    do_this();\n    and_that();\n}\n\nclass OneImplementation : public SharedBase {\n    int i;\n    // ...\n\n  public:\n    void config(const Context\u0026 cont) override;\n    // ...\n};\nvoid OneImplementation::config(const Context\u0026 cont) /* override */ {\n    my_state = { cont.some_field, cont.another_field, i };\n    SharedBase::config(cont);\n    my_unique_setup();\n};\n\n// And so on, for other classes derived from SharedBase."
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class SharedBase {\n    State my_state;\n    std::unique_ptr\u003cHelper\u003e my_helper;\n    // ...\n\n  public:\n    virtual void config(const Context\u0026 cont) = 0;\n    // ...\n};\n/* virtual */ void SharedBase::config(const Context\u0026 cont) {\n    my_helper = new Helper(my_state, cont.relevant_field);\n    do_this();\n    and_that();\n}\n\nclass OneImplementation : public SharedBase {\n    int i;\n    // ...\n\n  public:\n    void config(const Context\u0026 cont) override;\n    // ...\n};\nvoid OneImplementation::config(const Context\u0026 cont) /* override */ {\n    my_state = { cont.some_field, cont.another_field, i };\n    SharedBase::config(cont);\n    my_unique_setup();\n};\n\n// And so on, for other classes derived from SharedBase.",
        "code_language": "Plain Text"
      }
    ],
    "title": "Pure virtual functions",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}