{
  "ID": "8c0ca94d-9518-4b0b-b204-772600e60eeb",
  "Root": {
    "alive": true,
    "content": [
      "fcbdc6d0-bcbd-4716-b3a3-39e54d7e4543",
      "78d5945b-6e9a-4961-bab6-8d2b94dcd2ae",
      "91489d84-23f4-4fa5-8894-7fb7e9db873d",
      "75228dd4-fe59-4f44-996d-dfa28de74db9",
      "ac5c9923-8d23-4571-a0ba-7e8b9dbcc661",
      "8ca1ceb5-e0a4-4128-ac89-fd209d18e704",
      "bb446e1b-97a7-44c7-bf2c-5c40bc637e88",
      "f24ae7ec-308d-4565-8f34-dba7e804cfcb",
      "454d9e23-c1e5-4fba-89a7-558b5b7ca2e4",
      "d3320c2a-2d85-488c-b0f8-91081e084ba5"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522757855,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "8c0ca94d-9518-4b0b-b204-772600e60eeb",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552296300000,
    "parent_id": "c48a63c8-822c-4a23-a960-60de4face6ae",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "\u003c\u003c - left shift"
        ]
      ]
    },
    "type": "page",
    "version": 18,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522757850,
        "id": "fcbdc6d0-bcbd-4716-b3a3-39e54d7e4543",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552296240000,
        "parent_id": "8c0ca94d-9518-4b0b-b204-772600e60eeb",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "// :glot\n#include \u003ciostream\u003e\n\nint main(int argc, char **argv) {\n    int a = 1;      // 0001b\n    int b = a \u003c\u003c 1; // 0010b\n    \n    std::cout \u003c\u003c \"a = \" \u003c\u003c a \u003c\u003c \", b = \" \u003c\u003c b \u003c\u003c std::endl;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 17,
        "code": "// :glot\n#include \u003ciostream\u003e\n\nint main(int argc, char **argv) {\n    int a = 1;      // 0001b\n    int b = a \u003c\u003c 1; // 0010b\n    \n    std::cout \u003c\u003c \"a = \" \u003c\u003c a \u003c\u003c \", b = \" \u003c\u003c b \u003c\u003c std::endl;\n}",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522757854,
        "id": "78d5945b-6e9a-4961-bab6-8d2b94dcd2ae",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550736600000,
        "parent_id": "8c0ca94d-9518-4b0b-b204-772600e60eeb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Why",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 3,
        "inline_content": [
          {
            "Text": "Why",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522757854,
        "id": "91489d84-23f4-4fa5-8894-7fb7e9db873d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522757854,
        "parent_id": "8c0ca94d-9518-4b0b-b204-772600e60eeb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The left bit wise shift will shift the bits of the left hand value ("
            ],
            [
              "a",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") the number specified on the right ("
            ],
            [
              "1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "), essentially padding the least significant bits with 0’s, so shifting the value of "
            ],
            [
              "5",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (binary "
            ],
            [
              "0000 0101",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") to the left 4 times (e.g. "
            ],
            [
              "5 \u003c\u003c 4",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") will yield the value of "
            ],
            [
              "80",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (binary "
            ],
            [
              "0101 0000",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "). You might note that shifting a value to the left 1 time is also the same as multiplying the value by 2, example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The left bit wise shift will shift the bits of the left hand value ("
          },
          {
            "Text": "a",
            "AttrFlags": 2
          },
          {
            "Text": ") the number specified on the right ("
          },
          {
            "Text": "1",
            "AttrFlags": 2
          },
          {
            "Text": "), essentially padding the least significant bits with 0’s, so shifting the value of "
          },
          {
            "Text": "5",
            "AttrFlags": 2
          },
          {
            "Text": " (binary "
          },
          {
            "Text": "0000 0101",
            "AttrFlags": 2
          },
          {
            "Text": ") to the left 4 times (e.g. "
          },
          {
            "Text": "5 \u003c\u003c 4",
            "AttrFlags": 2
          },
          {
            "Text": ") will yield the value of "
          },
          {
            "Text": "80",
            "AttrFlags": 2
          },
          {
            "Text": " (binary "
          },
          {
            "Text": "0101 0000",
            "AttrFlags": 2
          },
          {
            "Text": "). You might note that shifting a value to the left 1 time is also the same as multiplying the value by 2, example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522757854,
        "id": "75228dd4-fe59-4f44-996d-dfa28de74db9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550736600000,
        "parent_id": "8c0ca94d-9518-4b0b-b204-772600e60eeb",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "int a = 7;\nwhile (a \u003c 200) {\n    std::cout \u003c\u003c \"a = \" \u003c\u003c a \u003c\u003c std::endl;\n    a \u003c\u003c= 1;\n}\n\na = 7;\nwhile (a \u003c 200) {\n    std::cout \u003c\u003c \"a = \" \u003c\u003c a \u003c\u003c std::endl;\n    a *= 2;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "int a = 7;\nwhile (a \u003c 200) {\n    std::cout \u003c\u003c \"a = \" \u003c\u003c a \u003c\u003c std::endl;\n    a \u003c\u003c= 1;\n}\n\na = 7;\nwhile (a \u003c 200) {\n    std::cout \u003c\u003c \"a = \" \u003c\u003c a \u003c\u003c std::endl;\n    a *= 2;\n}",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522757854,
        "id": "ac5c9923-8d23-4571-a0ba-7e8b9dbcc661",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522757854,
        "parent_id": "8c0ca94d-9518-4b0b-b204-772600e60eeb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "But it should be noted that the left shift operation will shift all bits to the left, including the sign bit, example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "But it should be noted that the left shift operation will shift all bits to the left, including the sign bit, example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522757854,
        "id": "8ca1ceb5-e0a4-4128-ac89-fd209d18e704",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552296240000,
        "parent_id": "8c0ca94d-9518-4b0b-b204-772600e60eeb",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "// :glot\n#include \u003ciostream\u003e\n\nint main(int argc, char **argv) {\n    int a = 2147483647; // 0111 1111 1111 1111 1111 1111 1111 1111\n    int b = a \u003c\u003c 1;     // 1111 1111 1111 1111 1111 1111 1111 1110\n    \n    std::cout \u003c\u003c \"a = \" \u003c\u003c a \u003c\u003c \", b = \" \u003c\u003c b \u003c\u003c std::endl;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 16,
        "code": "// :glot\n#include \u003ciostream\u003e\n\nint main(int argc, char **argv) {\n    int a = 2147483647; // 0111 1111 1111 1111 1111 1111 1111 1111\n    int b = a \u003c\u003c 1;     // 1111 1111 1111 1111 1111 1111 1111 1110\n    \n    std::cout \u003c\u003c \"a = \" \u003c\u003c a \u003c\u003c \", b = \" \u003c\u003c b \u003c\u003c std::endl;\n}",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522757855,
        "id": "bb446e1b-97a7-44c7-bf2c-5c40bc637e88",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522757855,
        "parent_id": "8c0ca94d-9518-4b0b-b204-772600e60eeb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "While some compilers will yield results that seem expected, it should be noted that if you left shift a signed number so that the sign bit is affected, the result is undefined. It is also undefined if the number of bits you wish to shift by is a negative number or is larger than the number of bits the type on the left can hold, example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "While some compilers will yield results that seem expected, it should be noted that if you left shift a signed number so that the sign bit is affected, the result is undefined. It is also undefined if the number of bits you wish to shift by is a negative number or is larger than the number of bits the type on the left can hold, example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522757855,
        "id": "f24ae7ec-308d-4565-8f34-dba7e804cfcb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550736600000,
        "parent_id": "8c0ca94d-9518-4b0b-b204-772600e60eeb",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "int a = 1;\nint b = a \u003c\u003c -1;  // undefined behavior\nchar c = a \u003c\u003c 20; // undefined behavior"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "int a = 1;\nint b = a \u003c\u003c -1;  // undefined behavior\nchar c = a \u003c\u003c 20; // undefined behavior",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522757855,
        "id": "454d9e23-c1e5-4fba-89a7-558b5b7ca2e4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522757855,
        "parent_id": "8c0ca94d-9518-4b0b-b204-772600e60eeb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The bit wise left shift does not change the value of the original values unless specifically assigned to using the bit wise assignment compound operator "
            ],
            [
              "\u003c\u003c=",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The bit wise left shift does not change the value of the original values unless specifically assigned to using the bit wise assignment compound operator "
          },
          {
            "Text": "\u003c\u003c=",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522757855,
        "id": "d3320c2a-2d85-488c-b0f8-91081e084ba5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552296300000,
        "parent_id": "8c0ca94d-9518-4b0b-b204-772600e60eeb",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "// :glot\n#include \u003ciostream\u003e\n\nint main(int argc, char **argv) {\n    int a = 5;  // 0101b\n    a \u003c\u003c= 1;    // a = a \u003c\u003c 1;\n\n    std::cout \u003c\u003c \"a = \" \u003c\u003c a \u003c\u003c std::endl;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 15,
        "code": "// :glot\n#include \u003ciostream\u003e\n\nint main(int argc, char **argv) {\n    int a = 5;  // 0101b\n    a \u003c\u003c= 1;    // a = a \u003c\u003c 1;\n\n    std::cout \u003c\u003c \"a = \" \u003c\u003c a \u003c\u003c std::endl;\n}",
        "code_language": "C++"
      }
    ],
    "title": "\u003c\u003c - left shift",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}