{
  "ID": "40c6809d-ad63-4990-9bc6-b7560fc73349",
  "Root": {
    "alive": true,
    "content": [
      "ca90c86a-689c-427c-8685-49c4cc739e1f",
      "087224fc-47e0-4cc8-b05a-120db472fccd",
      "b657b175-e819-4e0c-a21e-7551df305726",
      "47e7d7df-2ee8-463f-b74c-52c448bc43fd",
      "faea4230-fc80-4a5d-b032-b475e954b396",
      "d6e4ea6b-fd35-47e4-88ce-2c97a7868de6",
      "35f085ea-770d-474e-baaf-3dd9e5500305",
      "99daa76f-335f-4df0-a569-4ea494247b55",
      "dad05916-6bd4-4236-8f3c-84c350e31df2",
      "7e5a8b7a-a4e8-487b-ab80-0d86541c93bb"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522655523,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "40c6809d-ad63-4990-9bc6-b7560fc73349",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550799780000,
    "parent_id": "43b2d3b6-c6aa-4441-b665-3932542c711c",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Deep copying and move support"
        ]
      ]
    },
    "type": "page",
    "version": 10,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522655521,
        "id": "ca90c86a-689c-427c-8685-49c4cc739e1f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522655521,
        "parent_id": "40c6809d-ad63-4990-9bc6-b7560fc73349",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If a type wishes to have value semantics, and it needs to store objects that are dynamically allocated, then on copy operations, the type will need to allocate new copies of those objects. It must also do this for copy assignment."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If a type wishes to have value semantics, and it needs to store objects that are dynamically allocated, then on copy operations, the type will need to allocate new copies of those objects. It must also do this for copy assignment."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522655522,
        "id": "087224fc-47e0-4cc8-b05a-120db472fccd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522655522,
        "parent_id": "40c6809d-ad63-4990-9bc6-b7560fc73349",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This kind of copying is called a “deep copy”. It effectively takes what would have otherwise been reference semantics and turns it into value semantics:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This kind of copying is called a “deep copy”. It effectively takes what would have otherwise been reference semantics and turns it into value semantics:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522655522,
        "id": "b657b175-e819-4e0c-a21e-7551df305726",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550799780000,
        "parent_id": "40c6809d-ad63-4990-9bc6-b7560fc73349",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "struct Inner {int i;};\n\nconst int NUM_INNER = 5;\nclass Value\n{\nprivate:\n  Inner *array_; //Normally has reference semantics.\n\npublic:\n  Value() : array_(new Inner[NUM_INNER]){}\n\n  ~Value() {delete[] array_;}\n\n  Value(const Value \u0026val) : array_(new Inner[NUM_INNER])\n  {\n    for(int i = 0; i \u003c NUM_INNER; ++i)\n      array_[i] = val.array_[i];\n  }\n\n  Value \u0026operator=(const Value \u0026val)\n  {\n    for(int i = 0; i \u003c NUM_INNER; ++i)\n      array_[i] = val.array_[i];\n    return *this;\n  }\n};"
            ]
          ]
        },
        "type": "code",
        "version": 4,
        "code": "struct Inner {int i;};\n\nconst int NUM_INNER = 5;\nclass Value\n{\nprivate:\n  Inner *array_; //Normally has reference semantics.\n\npublic:\n  Value() : array_(new Inner[NUM_INNER]){}\n\n  ~Value() {delete[] array_;}\n\n  Value(const Value \u0026val) : array_(new Inner[NUM_INNER])\n  {\n    for(int i = 0; i \u003c NUM_INNER; ++i)\n      array_[i] = val.array_[i];\n  }\n\n  Value \u0026operator=(const Value \u0026val)\n  {\n    for(int i = 0; i \u003c NUM_INNER; ++i)\n      array_[i] = val.array_[i];\n    return *this;\n  }\n};",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522655522,
        "id": "47e7d7df-2ee8-463f-b74c-52c448bc43fd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522655522,
        "parent_id": "40c6809d-ad63-4990-9bc6-b7560fc73349",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Move semantics allow a type like "
            ],
            [
              "Value",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to avoid truly copying its referenced data. If the user uses the value in a way that provokes a move, the “copied” from object can be left empty of the data it referenced:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Move semantics allow a type like "
          },
          {
            "Text": "Value",
            "AttrFlags": 2
          },
          {
            "Text": " to avoid truly copying its referenced data. If the user uses the value in a way that provokes a move, the “copied” from object can be left empty of the data it referenced:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522655522,
        "id": "faea4230-fc80-4a5d-b032-b475e954b396",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550799780000,
        "parent_id": "40c6809d-ad63-4990-9bc6-b7560fc73349",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "struct Inner {int i;};\n\nconstexpr auto NUM_INNER = 5;\nclass Value\n{\nprivate:\n  Inner *array_; //Normally has reference semantics.\n\npublic:\n  Value() : array_(new Inner[NUM_INNER]){}\n\n  //OK to delete even if nullptr\n  ~Value() {delete[] array_;}\n\n  Value(const Value \u0026val) : array_(new Inner[NUM_INNER])\n  {\n    for(int i = 0; i \u003c NUM_INNER; ++i)\n      array_[i] = val.array_[i];\n  }\n\n  Value \u0026operator=(const Value \u0026val)\n  {\n    for(int i = 0; i \u003c NUM_INNER; ++i)\n      array_[i] = val.array_[i];\n    return *this;\n  }\n\n  //Movement means no memory allocation.\n  //Cannot throw exceptions.\n  Value(Value \u0026\u0026val) noexcept : array_(val.array_)\n  {\n    //We've stolen the old value.\n    val.array_ = nullptr;\n  }\n\n  //Cannot throw exceptions.\n  Value \u0026operator=(Value \u0026\u0026val) noexcept\n  {\n    //Clever trick. Since `val` is going to be destroyed soon anyway,\n    //we swap his data with ours. His destructor will destroy our data.\n    std::swap(array_, val.array_);\n  }\n};"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "struct Inner {int i;};\n\nconstexpr auto NUM_INNER = 5;\nclass Value\n{\nprivate:\n  Inner *array_; //Normally has reference semantics.\n\npublic:\n  Value() : array_(new Inner[NUM_INNER]){}\n\n  //OK to delete even if nullptr\n  ~Value() {delete[] array_;}\n\n  Value(const Value \u0026val) : array_(new Inner[NUM_INNER])\n  {\n    for(int i = 0; i \u003c NUM_INNER; ++i)\n      array_[i] = val.array_[i];\n  }\n\n  Value \u0026operator=(const Value \u0026val)\n  {\n    for(int i = 0; i \u003c NUM_INNER; ++i)\n      array_[i] = val.array_[i];\n    return *this;\n  }\n\n  //Movement means no memory allocation.\n  //Cannot throw exceptions.\n  Value(Value \u0026\u0026val) noexcept : array_(val.array_)\n  {\n    //We've stolen the old value.\n    val.array_ = nullptr;\n  }\n\n  //Cannot throw exceptions.\n  Value \u0026operator=(Value \u0026\u0026val) noexcept\n  {\n    //Clever trick. Since `val` is going to be destroyed soon anyway,\n    //we swap his data with ours. His destructor will destroy our data.\n    std::swap(array_, val.array_);\n  }\n};",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522655522,
        "id": "d6e4ea6b-fd35-47e4-88ce-2c97a7868de6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522655522,
        "parent_id": "40c6809d-ad63-4990-9bc6-b7560fc73349",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Indeed, we can even make such a type non-copyable, if we want to forbid deep copies while still allowing the object to be moved around."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Indeed, we can even make such a type non-copyable, if we want to forbid deep copies while still allowing the object to be moved around."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522655522,
        "id": "35f085ea-770d-474e-baaf-3dd9e5500305",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550799780000,
        "parent_id": "40c6809d-ad63-4990-9bc6-b7560fc73349",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "struct Inner {int i;};\n\nconstexpr auto NUM_INNER = 5;\nclass Value\n{\nprivate:\n  Inner *array_; //Normally has reference semantics.\n\npublic:\n  Value() : array_(new Inner[NUM_INNER]){}\n\n  //OK to delete even if nullptr\n  ~Value() {delete[] array_;}\n\n  Value(const Value \u0026val) = delete;\n  Value \u0026operator=(const Value \u0026val) = delete;\n\n  //Movement means no memory allocation.\n  //Cannot throw exceptions.\n  Value(Value \u0026\u0026val) noexcept : array_(val.array_)\n  {\n    //We've stolen the old value.\n    val.array_ = nullptr;\n  }\n\n  //Cannot throw exceptions.\n  Value \u0026operator=(Value \u0026\u0026val) noexcept\n  {\n    //Clever trick. Since `val` is going to be destroyed soon anyway,\n    //we swap his data with ours. His destructor will destroy our data.\n    std::swap(array_, val.array_);\n  }\n};"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "struct Inner {int i;};\n\nconstexpr auto NUM_INNER = 5;\nclass Value\n{\nprivate:\n  Inner *array_; //Normally has reference semantics.\n\npublic:\n  Value() : array_(new Inner[NUM_INNER]){}\n\n  //OK to delete even if nullptr\n  ~Value() {delete[] array_;}\n\n  Value(const Value \u0026val) = delete;\n  Value \u0026operator=(const Value \u0026val) = delete;\n\n  //Movement means no memory allocation.\n  //Cannot throw exceptions.\n  Value(Value \u0026\u0026val) noexcept : array_(val.array_)\n  {\n    //We've stolen the old value.\n    val.array_ = nullptr;\n  }\n\n  //Cannot throw exceptions.\n  Value \u0026operator=(Value \u0026\u0026val) noexcept\n  {\n    //Clever trick. Since `val` is going to be destroyed soon anyway,\n    //we swap his data with ours. His destructor will destroy our data.\n    std::swap(array_, val.array_);\n  }\n};",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522655523,
        "id": "99daa76f-335f-4df0-a569-4ea494247b55",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522655523,
        "parent_id": "40c6809d-ad63-4990-9bc6-b7560fc73349",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We can even apply the Rule of Zero, through the use of "
            ],
            [
              "unique_ptr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "We can even apply the Rule of Zero, through the use of "
          },
          {
            "Text": "unique_ptr",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522655523,
        "id": "dad05916-6bd4-4236-8f3c-84c350e31df2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550799780000,
        "parent_id": "40c6809d-ad63-4990-9bc6-b7560fc73349",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "struct Inner {int i;};\n\nconstexpr auto NUM_INNER = 5;\nclass Value\n{\nprivate:\n  unique_ptr\u003cInner []\u003earray_; //Move-only type.\n\npublic:\n  Value() : array_(new Inner[NUM_INNER]){}\n\n  //No need to explicitly delete. Or even declare.\n  ~Value() = default; {delete[] array_;}\n\n  //No need to explicitly delete. Or even declare.\n  Value(const Value \u0026val) = default;\n  Value \u0026operator=(const Value \u0026val) = default;\n\n  //Will perform an element-wise move.\n  Value(Value \u0026\u0026val) noexcept = default;\n\n  //Will perform an element-wise move.\n  Value \u0026operator=(Value \u0026\u0026val) noexcept = default;\n};"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "struct Inner {int i;};\n\nconstexpr auto NUM_INNER = 5;\nclass Value\n{\nprivate:\n  unique_ptr\u003cInner []\u003earray_; //Move-only type.\n\npublic:\n  Value() : array_(new Inner[NUM_INNER]){}\n\n  //No need to explicitly delete. Or even declare.\n  ~Value() = default; {delete[] array_;}\n\n  //No need to explicitly delete. Or even declare.\n  Value(const Value \u0026val) = default;\n  Value \u0026operator=(const Value \u0026val) = default;\n\n  //Will perform an element-wise move.\n  Value(Value \u0026\u0026val) noexcept = default;\n\n  //Will perform an element-wise move.\n  Value \u0026operator=(Value \u0026\u0026val) noexcept = default;\n};",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550799780000,
        "id": "7e5a8b7a-a4e8-487b-ab80-0d86541c93bb",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550799780000,
        "parent_id": "40c6809d-ad63-4990-9bc6-b7560fc73349",
        "parent_table": "block",
        "type": "text",
        "version": 3
      }
    ],
    "title": "Deep copying and move support",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}