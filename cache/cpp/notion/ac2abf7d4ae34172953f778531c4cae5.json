{
  "ID": "ac2abf7d-4ae3-4172-953f-778531c4cae5",
  "Root": {
    "alive": true,
    "content": [
      "cfd47df0-82d8-40f9-ab2a-d78c91c51b9b",
      "dcfcc95a-aef3-499a-8c9e-3866114a3449",
      "30208819-c444-484b-ad95-c71e5dbd481a",
      "26d41aee-848a-4472-a68b-8f215de541e0",
      "b5b3993f-55c9-46aa-9c6a-4e655db19fdb",
      "95df1db1-580a-44ee-ab1d-5c942362857d",
      "e65f066f-fc6d-47f7-9b63-b83492dae3a3",
      "38f218e6-4a57-4dff-bcb5-7f01959c1ec6",
      "ebbdca17-b21d-4edc-9cc3-0165a21a6a2c",
      "98c27145-2d32-4fd4-9554-ee4ddfb3f00b"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522274516,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "ac2abf7d-4ae3-4172-953f-778531c4cae5",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550655420000,
    "parent_id": "50a27510-120b-4da0-9ecb-cf15396a0108",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Creating std map with user-defined types as key"
        ]
      ]
    },
    "type": "page",
    "version": 10,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522274511,
        "id": "cfd47df0-82d8-40f9-ab2a-d78c91c51b9b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522274511,
        "parent_id": "ac2abf7d-4ae3-4172-953f-778531c4cae5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In order to be able to use a class as the key in a map, all that is required of the key is that it be "
            ],
            [
              "copiable",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "assignable",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". The ordering within the map is defined by the third argument to the template (and the argument to the constructor, if used). This "
            ],
            [
              "defaults",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " to "
            ],
            [
              "std::less\u003cKeyType\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", which defaults to the "
            ],
            [
              "\\\u003c",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " operator, but there’s no requirement to use the defaults. Just write a comparison operator (preferably as a functional object):"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In order to be able to use a class as the key in a map, all that is required of the key is that it be "
          },
          {
            "Text": "copiable",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "assignable",
            "AttrFlags": 2
          },
          {
            "Text": ". The ordering within the map is defined by the third argument to the template (and the argument to the constructor, if used). This "
          },
          {
            "Text": "defaults",
            "AttrFlags": 4
          },
          {
            "Text": " to "
          },
          {
            "Text": "std::less\u003cKeyType\u003e",
            "AttrFlags": 2
          },
          {
            "Text": ", which defaults to the "
          },
          {
            "Text": "\\\u003c",
            "AttrFlags": 2
          },
          {
            "Text": " operator, but there’s no requirement to use the defaults. Just write a comparison operator (preferably as a functional object):"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522274513,
        "id": "dcfcc95a-aef3-499a-8c9e-3866114a3449",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522274513,
        "parent_id": "ac2abf7d-4ae3-4172-953f-778531c4cae5",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "struct CmpMyType\n{\n    bool operator()( MyType const\u0026 lhs, MyType const\u0026 rhs ) const\n    {\n        //  ...\n    }\n};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "struct CmpMyType\n{\n    bool operator()( MyType const\u0026 lhs, MyType const\u0026 rhs ) const\n    {\n        //  ...\n    }\n};",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522274515,
        "id": "30208819-c444-484b-ad95-c71e5dbd481a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522274515,
        "parent_id": "ac2abf7d-4ae3-4172-953f-778531c4cae5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In C++, the “compare” predicate must be a "
            ],
            [
              "strict weak ordering",
              [
                [
                  "a",
                  "http://www.sgi.com/tech/stl/StrictWeakOrdering.html"
                ]
              ]
            ],
            [
              ". In particular, "
            ],
            [
              "compare(X,X)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " must return "
            ],
            [
              "false",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " for any "
            ],
            [
              "X",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". i.e. if "
            ],
            [
              "CmpMyType()(a, b)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " returns true, then "
            ],
            [
              "CmpMyType()(b, a)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " must return false, and if both return false, the elements are considered equal (members of the same equivalence class)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In C++, the “compare” predicate must be a "
          },
          {
            "Text": "strict weak ordering",
            "Link": "http://www.sgi.com/tech/stl/StrictWeakOrdering.html"
          },
          {
            "Text": ". In particular, "
          },
          {
            "Text": "compare(X,X)",
            "AttrFlags": 2
          },
          {
            "Text": " must return "
          },
          {
            "Text": "false",
            "AttrFlags": 2
          },
          {
            "Text": " for any "
          },
          {
            "Text": "X",
            "AttrFlags": 2
          },
          {
            "Text": ". i.e. if "
          },
          {
            "Text": "CmpMyType()(a, b)",
            "AttrFlags": 2
          },
          {
            "Text": " returns true, then "
          },
          {
            "Text": "CmpMyType()(b, a)",
            "AttrFlags": 2
          },
          {
            "Text": " must return false, and if both return false, the elements are considered equal (members of the same equivalence class)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522274515,
        "id": "26d41aee-848a-4472-a68b-8f215de541e0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522274515,
        "parent_id": "ac2abf7d-4ae3-4172-953f-778531c4cae5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Strict Weak Ordering"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Strict Weak Ordering"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522274515,
        "id": "b5b3993f-55c9-46aa-9c6a-4e655db19fdb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522274515,
        "parent_id": "ac2abf7d-4ae3-4172-953f-778531c4cae5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This is a mathematical term to define a relationship between two objects."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This is a mathematical term to define a relationship between two objects."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522274515,
        "id": "95df1db1-580a-44ee-ab1d-5c942362857d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522274515,
        "parent_id": "ac2abf7d-4ae3-4172-953f-778531c4cae5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Its definition is:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Its definition is:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522274516,
        "id": "e65f066f-fc6d-47f7-9b63-b83492dae3a3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522274516,
        "parent_id": "ac2abf7d-4ae3-4172-953f-778531c4cae5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Two objects x and y are equivalent if both f(x, y) and f(y, x) are false. Note that an object is always (by the irreflexivity invariant) equivalent to itself."
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "Two objects x and y are equivalent if both f(x, y) and f(y, x) are false. Note that an object is always (by the irreflexivity invariant) equivalent to itself."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522274516,
        "id": "38f218e6-4a57-4dff-bcb5-7f01959c1ec6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522274516,
        "parent_id": "ac2abf7d-4ae3-4172-953f-778531c4cae5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In terms of C++ this means if you have two objects of a given type, you should return the following values when compared with the operator \u003c."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In terms of C++ this means if you have two objects of a given type, you should return the following values when compared with the operator \u003c."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522274516,
        "id": "ebbdca17-b21d-4edc-9cc3-0165a21a6a2c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522274516,
        "parent_id": "ac2abf7d-4ae3-4172-953f-778531c4cae5",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "X    a;\nX    b;\n\nCondition:                  Test:     Result\na is equivalent to b:       a \u003c b     false\na is equivalent to b        b \u003c a     false\n\na is less than b            a \u003c b     true\na is less than b            b \u003c a     false\n\nb is less than a            a \u003c b     false\nb is less than a            b \u003c a     true"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "X    a;\nX    b;\n\nCondition:                  Test:     Result\na is equivalent to b:       a \u003c b     false\na is equivalent to b        b \u003c a     false\n\na is less than b            a \u003c b     true\na is less than b            b \u003c a     false\n\nb is less than a            a \u003c b     false\nb is less than a            b \u003c a     true",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522274516,
        "id": "98c27145-2d32-4fd4-9554-ee4ddfb3f00b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522274516,
        "parent_id": "ac2abf7d-4ae3-4172-953f-778531c4cae5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "How you define equivalent/less is totally dependent on the type of your object."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "How you define equivalent/less is totally dependent on the type of your object."
          }
        ]
      }
    ],
    "title": "Creating std map with user-defined types as key",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}