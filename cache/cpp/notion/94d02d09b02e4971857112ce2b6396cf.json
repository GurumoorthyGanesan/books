{
  "ID": "94d02d09-b02e-4971-8571-12ce2b6396cf",
  "Root": {
    "alive": true,
    "content": [
      "9c83746b-df75-44ae-8ffd-b11f0827e8cc",
      "8dbd1e4d-0284-4624-84fa-49e097268ab6",
      "22451ff3-e4e3-45f8-be4d-6d8f70e8f11e",
      "b3115749-108e-44a5-bb5b-77101d90e973",
      "c91dd5df-929d-47b6-8028-5b6ec6da62cf",
      "9a6a54ae-56ce-40cf-b8dd-8fafb7823df1",
      "74f3ccd0-de75-469e-8f52-c62699f117f1",
      "8b7e656e-3e0c-4f95-b1e1-fa9662386cc3"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550523869750,
    "id": "94d02d09-b02e-4971-8571-12ce2b6396cf",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550523869750,
    "parent_id": "193b149e-733b-4344-8898-29dc4a2ef0b0",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "330 noexcept"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523869748,
        "id": "9c83746b-df75-44ae-8ffd-b11f0827e8cc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523869748,
        "parent_id": "94d02d09-b02e-4971-8571-12ce2b6396cf",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A unary operator that determines whether the evaluation of its operand can propagate an exception. Note that the bodies of called functions are not examined, so "
            ],
            [
              "noexcept",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can yield false negatives. The operand is not evaluated."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "A unary operator that determines whether the evaluation of its operand can propagate an exception. Note that the bodies of called functions are not examined, so "
          },
          {
            "Text": "noexcept",
            "AttrFlags": 2
          },
          {
            "Text": " can yield false negatives. The operand is not evaluated."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523869748,
        "id": "8dbd1e4d-0284-4624-84fa-49e097268ab6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523869748,
        "parent_id": "94d02d09-b02e-4971-8571-12ce2b6396cf",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003ciostream\u003e\n#include \u003cstdexcept\u003e\nvoid foo() { throw std::runtime_error(\"oops\"); }\nvoid bar() {}\nstruct S {};\nint main() {\n    std::cout \u003c\u003c noexcept(foo()) \u003c\u003c '\\n'; // prints 0\n    std::cout \u003c\u003c noexcept(bar()) \u003c\u003c '\\n'; // prints 0\n    std::cout \u003c\u003c noexcept(1 + 1) \u003c\u003c '\\n'; // prints 1\n    std::cout \u003c\u003c noexcept(S()) \u003c\u003c '\\n';   // prints 1\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003ciostream\u003e\n#include \u003cstdexcept\u003e\nvoid foo() { throw std::runtime_error(\"oops\"); }\nvoid bar() {}\nstruct S {};\nint main() {\n    std::cout \u003c\u003c noexcept(foo()) \u003c\u003c '\\n'; // prints 0\n    std::cout \u003c\u003c noexcept(bar()) \u003c\u003c '\\n'; // prints 0\n    std::cout \u003c\u003c noexcept(1 + 1) \u003c\u003c '\\n'; // prints 1\n    std::cout \u003c\u003c noexcept(S()) \u003c\u003c '\\n';   // prints 1\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523869749,
        "id": "22451ff3-e4e3-45f8-be4d-6d8f70e8f11e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523869749,
        "parent_id": "94d02d09-b02e-4971-8571-12ce2b6396cf",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In this example, even though "
            ],
            [
              "bar()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can never throw an exception, "
            ],
            [
              "noexcept(bar())",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is still false because the fact that "
            ],
            [
              "bar()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " cannot propagate an exception has not been explicitly specified."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In this example, even though "
          },
          {
            "Text": "bar()",
            "AttrFlags": 2
          },
          {
            "Text": " can never throw an exception, "
          },
          {
            "Text": "noexcept(bar())",
            "AttrFlags": 2
          },
          {
            "Text": " is still false because the fact that "
          },
          {
            "Text": "bar()",
            "AttrFlags": 2
          },
          {
            "Text": " cannot propagate an exception has not been explicitly specified."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523869749,
        "id": "b3115749-108e-44a5-bb5b-77101d90e973",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523869749,
        "parent_id": "94d02d09-b02e-4971-8571-12ce2b6396cf",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When declaring a function, specifies whether or not the function can propagate an exception. Alone, it declares that the function cannot propagate an exception. With a parenthesized argument, it declares that the function can or cannot propagate an exception depending on the truth value of the argument."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "When declaring a function, specifies whether or not the function can propagate an exception. Alone, it declares that the function cannot propagate an exception. With a parenthesized argument, it declares that the function can or cannot propagate an exception depending on the truth value of the argument."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523869749,
        "id": "c91dd5df-929d-47b6-8028-5b6ec6da62cf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523869749,
        "parent_id": "94d02d09-b02e-4971-8571-12ce2b6396cf",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "void f1() { throw std::runtime_error(\"oops\"); }\nvoid f2() noexcept(false) { throw std::runtime_error(\"oops\"); }\nvoid f3() {}\nvoid f4() noexcept {}\nvoid f5() noexcept(true) {}\nvoid f6() noexcept {\n    try {\n        f1();\n    } catch (const std::runtime_error\u0026) {}\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "void f1() { throw std::runtime_error(\"oops\"); }\nvoid f2() noexcept(false) { throw std::runtime_error(\"oops\"); }\nvoid f3() {}\nvoid f4() noexcept {}\nvoid f5() noexcept(true) {}\nvoid f6() noexcept {\n    try {\n        f1();\n    } catch (const std::runtime_error\u0026) {}\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523869750,
        "id": "9a6a54ae-56ce-40cf-b8dd-8fafb7823df1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523869750,
        "parent_id": "94d02d09-b02e-4971-8571-12ce2b6396cf",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In this example, we have declared that "
            ],
            [
              "f4",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "f5",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", and "
            ],
            [
              "f6",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " cannot propagate exceptions. (Although an exception can be thrown during execution of "
            ],
            [
              "f6",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", it is caught and not allowed to propagate out of the function.) We have declared that "
            ],
            [
              "f2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " may propagate an exception. When the "
            ],
            [
              "noexcept",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " specifier is omitted, it is equivalent to "
            ],
            [
              "noexcept(false)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", so we have implicitly declared that "
            ],
            [
              "f1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "f3",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " may propagate exceptions, even though exceptions cannot actually be thrown during the execution of "
            ],
            [
              "f3",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In this example, we have declared that "
          },
          {
            "Text": "f4",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "f5",
            "AttrFlags": 2
          },
          {
            "Text": ", and "
          },
          {
            "Text": "f6",
            "AttrFlags": 2
          },
          {
            "Text": " cannot propagate exceptions. (Although an exception can be thrown during execution of "
          },
          {
            "Text": "f6",
            "AttrFlags": 2
          },
          {
            "Text": ", it is caught and not allowed to propagate out of the function.) We have declared that "
          },
          {
            "Text": "f2",
            "AttrFlags": 2
          },
          {
            "Text": " may propagate an exception. When the "
          },
          {
            "Text": "noexcept",
            "AttrFlags": 2
          },
          {
            "Text": " specifier is omitted, it is equivalent to "
          },
          {
            "Text": "noexcept(false)",
            "AttrFlags": 2
          },
          {
            "Text": ", so we have implicitly declared that "
          },
          {
            "Text": "f1",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "f3",
            "AttrFlags": 2
          },
          {
            "Text": " may propagate exceptions, even though exceptions cannot actually be thrown during the execution of "
          },
          {
            "Text": "f3",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523869750,
        "id": "74f3ccd0-de75-469e-8f52-c62699f117f1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523869750,
        "parent_id": "94d02d09-b02e-4971-8571-12ce2b6396cf",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Whether or not a function is "
            ],
            [
              "noexcept",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is part of the function’s type: that is, in the example above, "
            ],
            [
              "f1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "f2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", and "
            ],
            [
              "f3",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " have different types from "
            ],
            [
              "f4",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "f5",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", and "
            ],
            [
              "f6",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Therefore, "
            ],
            [
              "noexcept",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is also significant in function pointers, template arguments, and so on."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Whether or not a function is "
          },
          {
            "Text": "noexcept",
            "AttrFlags": 2
          },
          {
            "Text": " is part of the function’s type: that is, in the example above, "
          },
          {
            "Text": "f1",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "f2",
            "AttrFlags": 2
          },
          {
            "Text": ", and "
          },
          {
            "Text": "f3",
            "AttrFlags": 2
          },
          {
            "Text": " have different types from "
          },
          {
            "Text": "f4",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "f5",
            "AttrFlags": 2
          },
          {
            "Text": ", and "
          },
          {
            "Text": "f6",
            "AttrFlags": 2
          },
          {
            "Text": ". Therefore, "
          },
          {
            "Text": "noexcept",
            "AttrFlags": 2
          },
          {
            "Text": " is also significant in function pointers, template arguments, and so on."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523869750,
        "id": "8b7e656e-3e0c-4f95-b1e1-fa9662386cc3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523869750,
        "parent_id": "94d02d09-b02e-4971-8571-12ce2b6396cf",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "void g1() {}\nvoid g2() noexcept {}\nvoid (*p1)() noexcept = \u0026g1; // ill-formed, since g1 is not noexcept\nvoid (*p2)() noexcept = \u0026g2; // ok; types match\nvoid (*p3)() = \u0026g1;          // ok; types match\nvoid (*p4)() = \u0026g2;          // ok; implicit conversion"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "void g1() {}\nvoid g2() noexcept {}\nvoid (*p1)() noexcept = \u0026g1; // ill-formed, since g1 is not noexcept\nvoid (*p2)() noexcept = \u0026g2; // ok; types match\nvoid (*p3)() = \u0026g1;          // ok; types match\nvoid (*p4)() = \u0026g2;          // ok; implicit conversion",
        "code_language": "Plain Text"
      }
    ],
    "title": "330 noexcept"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}