{
  "ID": "ea4c768f-8ffd-48a6-bc20-bd19b214545c",
  "Root": {
    "alive": true,
    "content": [
      "e769a054-6d4c-4026-9272-90e435f5ff7a",
      "46390f60-0ed7-40ef-bbfa-5a9d0e41ce01",
      "023aeaa9-8127-42b4-a658-f06e7c7d1a3c",
      "330cf40e-8473-4aa4-af1f-a6c7beead160",
      "e7ec459f-fb0e-4ade-8eb5-bbcfbb3bcade",
      "250efb5d-ff47-45c5-8b85-7837d0a9015e",
      "53b584eb-2b57-4819-99ad-5956e6edc213",
      "0c732770-a2fb-40c1-a69e-d830ebe13765",
      "dea896a8-1dcd-4807-b3d4-29ebee0e0eaa",
      "1df72f1a-3f82-4fd1-bd45-76da4784458d",
      "a3ae4f6e-5973-4af6-b04a-efa3c4969694",
      "120e0141-9127-4a6d-9a3c-3471ecad41b1",
      "5d4a967d-1c35-489b-ba96-54ce0593a7c5",
      "32c11efb-7350-4774-bcda-1ed0f535dedf",
      "9f03a74d-0ebc-43e9-bb84-c61808419e4f",
      "588880ec-73b3-4aa4-bcc4-48ab0d81ba5f",
      "b7a3678c-4f88-4677-9a42-2bb087b28330",
      "600ed60c-9c3e-4e32-95be-f4e9333894d0",
      "ec3a08fe-c8e5-4a74-a641-1ff197939125",
      "6fd1b77c-0527-44b4-b968-be31fb4e352d",
      "d6be5e0b-35b3-4c89-bac6-c5335d2c50c8",
      "1f109b50-06dc-439b-a4fe-4719249666aa"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522940000,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "ea4c768f-8ffd-48a6-bc20-bd19b214545c",
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550737380000,
    "parent_id": "ad527dc6-d4a7-420b-9234-94d0b9bfb560",
    "parent_table": "block",
    "permissions": [
      {
        "role": "editor",
        "type": "user_permission",
        "user_id": "bb760e2d-d679-4b64-b2a9-03005b21870a"
      }
    ],
    "properties": {
      "title": [
        [
          "Bit fields"
        ]
      ]
    },
    "type": "page",
    "version": 57,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522982271,
        "id": "e769a054-6d4c-4026-9272-90e435f5ff7a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550737260000,
        "parent_id": "ea4c768f-8ffd-48a6-bc20-bd19b214545c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Bit fields tightly pack C and C++ structures to reduce size. This appears painless: specify the number of bits for members, and compiler does the work of co-mingling bits. The restriction is inability to take the address of a bit field member, since it is stored co-mingled. "
            ],
            [
              "sizeof()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is also disallowed."
            ]
          ]
        },
        "type": "text",
        "version": 3,
        "inline_content": [
          {
            "Text": "Bit fields tightly pack C and C++ structures to reduce size. This appears painless: specify the number of bits for members, and compiler does the work of co-mingling bits. The restriction is inability to take the address of a bit field member, since it is stored co-mingled. "
          },
          {
            "Text": "sizeof()",
            "AttrFlags": 2
          },
          {
            "Text": " is also disallowed."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522982271,
        "id": "46390f60-0ed7-40ef-bbfa-5a9d0e41ce01",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550737320000,
        "parent_id": "ea4c768f-8ffd-48a6-bc20-bd19b214545c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The cost of bit fields is slower access, as memory must be retrieved and bitwise operations applied to extract or modify member values. These operations also add to executable size."
            ]
          ]
        },
        "type": "text",
        "version": 5,
        "inline_content": [
          {
            "Text": "The cost of bit fields is slower access, as memory must be retrieved and bitwise operations applied to extract or modify member values. These operations also add to executable size."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522982271,
        "id": "023aeaa9-8127-42b4-a658-f06e7c7d1a3c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550737260000,
        "parent_id": "ea4c768f-8ffd-48a6-bc20-bd19b214545c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "How expensive are the bitwise operations? Suppose a simple non-bit field structure:"
            ]
          ]
        },
        "type": "text",
        "version": 3,
        "inline_content": [
          {
            "Text": "How expensive are the bitwise operations? Suppose a simple non-bit field structure:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522982271,
        "id": "330cf40e-8473-4aa4-af1f-a6c7beead160",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550737320000,
        "parent_id": "ea4c768f-8ffd-48a6-bc20-bd19b214545c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "struct foo {\n    unsigned x;\n    unsigned y;\n}\nstatic struct foo my_var;"
            ]
          ]
        },
        "type": "code",
        "version": 5,
        "code": "struct foo {\n    unsigned x;\n    unsigned y;\n}\nstatic struct foo my_var;",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522982271,
        "id": "e7ec459f-fb0e-4ade-8eb5-bbcfbb3bcade",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550737260000,
        "parent_id": "ea4c768f-8ffd-48a6-bc20-bd19b214545c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In some later code:"
            ]
          ]
        },
        "type": "text",
        "version": 3,
        "inline_content": [
          {
            "Text": "In some later code:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522982271,
        "id": "250efb5d-ff47-45c5-8b85-7837d0a9015e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550737320000,
        "parent_id": "ea4c768f-8ffd-48a6-bc20-bd19b214545c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "my_var.y = 5;"
            ]
          ]
        },
        "type": "code",
        "version": 5,
        "code": "my_var.y = 5;",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522982272,
        "id": "53b584eb-2b57-4819-99ad-5956e6edc213",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550737260000,
        "parent_id": "ea4c768f-8ffd-48a6-bc20-bd19b214545c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If "
            ],
            [
              "sizeof (unsigned) == 4",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", then x is stored at the start of the structure, and y is stored 4 bytes in. Assembly code generated may resemble:"
            ]
          ]
        },
        "type": "text",
        "version": 3,
        "inline_content": [
          {
            "Text": "If "
          },
          {
            "Text": "sizeof (unsigned) == 4",
            "AttrFlags": 2
          },
          {
            "Text": ", then x is stored at the start of the structure, and y is stored 4 bytes in. Assembly code generated may resemble:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522982272,
        "id": "0c732770-a2fb-40c1-a69e-d830ebe13765",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550737320000,
        "parent_id": "ea4c768f-8ffd-48a6-bc20-bd19b214545c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "loada register1,#myvar     ; get the address of the structure\nstorei register1[4],#0x05  ; put the value '5' at offset 4, e.g., set y=5"
            ]
          ]
        },
        "type": "code",
        "version": 5,
        "code": "loada register1,#myvar     ; get the address of the structure\nstorei register1[4],#0x05  ; put the value '5' at offset 4, e.g., set y=5",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522982272,
        "id": "dea896a8-1dcd-4807-b3d4-29ebee0e0eaa",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550737260000,
        "parent_id": "ea4c768f-8ffd-48a6-bc20-bd19b214545c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This is straightforward because x is not co-mingled with y. But imagine redefining the structure with bit fields:"
            ]
          ]
        },
        "type": "text",
        "version": 3,
        "inline_content": [
          {
            "Text": "This is straightforward because x is not co-mingled with y. But imagine redefining the structure with bit fields:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522982272,
        "id": "1df72f1a-3f82-4fd1-bd45-76da4784458d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550737320000,
        "parent_id": "ea4c768f-8ffd-48a6-bc20-bd19b214545c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "struct foo {\n    unsigned x : 4; /* Range 0-0x0f, or 0 through 15 */\n    unsigned y : 4;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 5,
        "code": "struct foo {\n    unsigned x : 4; /* Range 0-0x0f, or 0 through 15 */\n    unsigned y : 4;\n}",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522982272,
        "id": "a3ae4f6e-5973-4af6-b04a-efa3c4969694",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550737260000,
        "parent_id": "ea4c768f-8ffd-48a6-bc20-bd19b214545c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Both "
            ],
            [
              "x",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "y",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will be allocated 4 bits, sharing a single byte. The structure thus takes up 1 byte, instead of 8. Consider the assembly to set "
            ],
            [
              "y",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " now, assuming it ends up in the upper nibble:"
            ]
          ]
        },
        "type": "text",
        "version": 3,
        "inline_content": [
          {
            "Text": "Both "
          },
          {
            "Text": "x",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "y",
            "AttrFlags": 2
          },
          {
            "Text": " will be allocated 4 bits, sharing a single byte. The structure thus takes up 1 byte, instead of 8. Consider the assembly to set "
          },
          {
            "Text": "y",
            "AttrFlags": 2
          },
          {
            "Text": " now, assuming it ends up in the upper nibble:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522982272,
        "id": "120e0141-9127-4a6d-9a3c-3471ecad41b1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550737320000,
        "parent_id": "ea4c768f-8ffd-48a6-bc20-bd19b214545c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "loada  register1,#myvar        ; get the address of the structure\nloadb  register2,register1[0]  ; get the byte from memory\nandb   register2,#0x0f         ; zero out y in the byte, leaving x alone\norb    register2,#0x50         ; put the 5 into the 'y' portion of the byte\nstb    register1[0],register2  ; put the modified byte back into memory"
            ]
          ]
        },
        "type": "code",
        "version": 5,
        "code": "loada  register1,#myvar        ; get the address of the structure\nloadb  register2,register1[0]  ; get the byte from memory\nandb   register2,#0x0f         ; zero out y in the byte, leaving x alone\norb    register2,#0x50         ; put the 5 into the 'y' portion of the byte\nstb    register1[0],register2  ; put the modified byte back into memory",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522982272,
        "id": "5d4a967d-1c35-489b-ba96-54ce0593a7c5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550737260000,
        "parent_id": "ea4c768f-8ffd-48a6-bc20-bd19b214545c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This may be a good trade-off if we have thousands or millions of these structures, and it helps keeps memory in cache or prevents swapping—or could bloat the executable to worsen these problems and slow processing. As with all things, use good judgement."
            ]
          ]
        },
        "type": "text",
        "version": 3,
        "inline_content": [
          {
            "Text": "This may be a good trade-off if we have thousands or millions of these structures, and it helps keeps memory in cache or prevents swapping—or could bloat the executable to worsen these problems and slow processing. As with all things, use good judgement."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522982273,
        "id": "32c11efb-7350-4774-bcda-1ed0f535dedf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550737260000,
        "parent_id": "ea4c768f-8ffd-48a6-bc20-bd19b214545c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Device driver use:",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " Avoid bit fields as a clever implementation strategy for device drivers. Bit field storage layouts are not necessarily consistent between compilers, making such implementations non-portable. The read-modify-write to set values may not do what devices expect, causing unexpected behaviors."
            ]
          ]
        },
        "type": "text",
        "version": 3,
        "inline_content": [
          {
            "Text": "Device driver use:",
            "AttrFlags": 4
          },
          {
            "Text": " Avoid bit fields as a clever implementation strategy for device drivers. Bit field storage layouts are not necessarily consistent between compilers, making such implementations non-portable. The read-modify-write to set values may not do what devices expect, causing unexpected behaviors."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522983023,
        "id": "9f03a74d-0ebc-43e9-bb84-c61808419e4f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550737320000,
        "parent_id": "ea4c768f-8ffd-48a6-bc20-bd19b214545c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Declaration and Usage"
            ]
          ]
        },
        "type": "header",
        "version": 15,
        "inline_content": [
          {
            "Text": "Declaration and Usage"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522983019,
        "id": "588880ec-73b3-4aa4-bcc4-48ab0d81ba5f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550737320000,
        "parent_id": "ea4c768f-8ffd-48a6-bc20-bd19b214545c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "struct FileAttributes\n{\n    unsigned int ReadOnly: 1;    \n    unsigned int Hidden: 1;\n};"
            ]
          ]
        },
        "type": "code",
        "version": 5,
        "code": "struct FileAttributes\n{\n    unsigned int ReadOnly: 1;    \n    unsigned int Hidden: 1;\n};",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522983022,
        "id": "b7a3678c-4f88-4677-9a42-2bb087b28330",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550737320000,
        "parent_id": "ea4c768f-8ffd-48a6-bc20-bd19b214545c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Here, each of these two fields will occupy 1 bit in memory. It is specified by "
            ],
            [
              ": 1",
              [
                [
                  "b"
                ],
                [
                  "c"
                ]
              ]
            ],
            [
              " expression after the variable names. Base type of bit field could be any integral type (8-bit int to 64-bit int). Using "
            ],
            [
              "unsigned",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " type is recommended, otherwise surprises may come."
            ]
          ]
        },
        "type": "text",
        "version": 4,
        "inline_content": [
          {
            "Text": "Here, each of these two fields will occupy 1 bit in memory. It is specified by "
          },
          {
            "Text": ": 1",
            "AttrFlags": 3
          },
          {
            "Text": " expression after the variable names. Base type of bit field could be any integral type (8-bit int to 64-bit int). Using "
          },
          {
            "Text": "unsigned",
            "AttrFlags": 2
          },
          {
            "Text": " type is recommended, otherwise surprises may come."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522983022,
        "id": "600ed60c-9c3e-4e32-95be-f4e9333894d0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550737320000,
        "parent_id": "ea4c768f-8ffd-48a6-bc20-bd19b214545c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If more bits are required, replace “1” with number of bits required. For example:"
            ]
          ]
        },
        "type": "text",
        "version": 4,
        "inline_content": [
          {
            "Text": "If more bits are required, replace “1” with number of bits required. For example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522983022,
        "id": "ec3a08fe-c8e5-4a74-a641-1ff197939125",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550737320000,
        "parent_id": "ea4c768f-8ffd-48a6-bc20-bd19b214545c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "struct Date\n{\n    unsigned int Year : 13; // 2^13 = 8192, enough for \"year\" representation for long time\n    unsigned int Month: 4;  // 2^4 = 16, enough to represent 1-12 month values.\n    unsigned int Day:   5;  // 32\n};"
            ]
          ]
        },
        "type": "code",
        "version": 5,
        "code": "struct Date\n{\n    unsigned int Year : 13; // 2^13 = 8192, enough for \"year\" representation for long time\n    unsigned int Month: 4;  // 2^4 = 16, enough to represent 1-12 month values.\n    unsigned int Day:   5;  // 32\n};",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522983022,
        "id": "6fd1b77c-0527-44b4-b968-be31fb4e352d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550737320000,
        "parent_id": "ea4c768f-8ffd-48a6-bc20-bd19b214545c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The whole structure is using just 22 bits, and with normal compiler settings, "
            ],
            [
              "sizeof",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " this structure would be 4 bytes."
            ]
          ]
        },
        "type": "text",
        "version": 4,
        "inline_content": [
          {
            "Text": "The whole structure is using just 22 bits, and with normal compiler settings, "
          },
          {
            "Text": "sizeof",
            "AttrFlags": 2
          },
          {
            "Text": " this structure would be 4 bytes."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522983022,
        "id": "d6be5e0b-35b3-4c89-bac6-c5335d2c50c8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550737320000,
        "parent_id": "ea4c768f-8ffd-48a6-bc20-bd19b214545c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Usage is pretty simple. Just declare the variable, and use it like ordinary structure."
            ]
          ]
        },
        "type": "text",
        "version": 4,
        "inline_content": [
          {
            "Text": "Usage is pretty simple. Just declare the variable, and use it like ordinary structure."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522983022,
        "id": "1f109b50-06dc-439b-a4fe-4719249666aa",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550737320000,
        "parent_id": "ea4c768f-8ffd-48a6-bc20-bd19b214545c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "Date d;\n\nd.Year = 2016;\nd.Month = 7;\nd.Day =  22;\n\nstd::cout \u003c\u003c \"Year:\" \u003c\u003c d.Year \u003c\u003c std::endl \u003c\u003c\n        \"Month:\" \u003c\u003c d.Month \u003c\u003c std::endl \u003c\u003c\n        \"Day:\" \u003c\u003c d.Day \u003c\u003c std::endl;"
            ]
          ]
        },
        "type": "code",
        "version": 5,
        "code": "Date d;\n\nd.Year = 2016;\nd.Month = 7;\nd.Day =  22;\n\nstd::cout \u003c\u003c \"Year:\" \u003c\u003c d.Year \u003c\u003c std::endl \u003c\u003c\n        \"Month:\" \u003c\u003c d.Month \u003c\u003c std::endl \u003c\u003c\n        \"Day:\" \u003c\u003c d.Day \u003c\u003c std::endl;",
        "code_language": "C++"
      }
    ],
    "title": "Bit fields",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}