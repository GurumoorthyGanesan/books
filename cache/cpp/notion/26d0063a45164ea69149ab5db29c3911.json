{
  "ID": "26d0063a-4516-4ea6-9149-ab5db29c3911",
  "Root": {
    "alive": true,
    "content": [
      "26d56742-06c2-445a-bfd4-86bed0d2740f",
      "ee761f9e-ab87-4223-a29b-733bb08c2934",
      "4782ba64-1739-4d27-9802-0f7972ab9c4c",
      "ae5c2ee9-364d-41f4-81b9-bc4da699bd0d",
      "f8861bab-d78f-4bfe-8452-15468cf0365a",
      "be7d5f6a-3e95-4f3f-b7f6-d43466d12ae3",
      "b743e690-a8c9-483d-ac21-8861af1d8fa4",
      "61868a59-3061-4bad-8bde-c102a714b8ba",
      "c0b254d7-04c7-47cd-aa07-1925df18a201",
      "d3d2e279-d459-4720-a9f7-9c769135432a",
      "5a693cf0-0478-4eda-a9c1-b6107ee05660"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550521990630,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "26d0063a-4516-4ea6-9149-ab5db29c3911",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552304520000,
    "parent_id": "b886ff5d-614b-4aa9-9e99-851b7998439b",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Conversion to std::wstring"
        ]
      ]
    },
    "type": "page",
    "version": 14,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521990625,
        "id": "26d56742-06c2-445a-bfd4-86bed0d2740f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521990625,
        "parent_id": "26d0063a-4516-4ea6-9149-ab5db29c3911",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In C++, sequences of characters are represented by specializing the "
            ],
            [
              "std::basic_string",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " class with a native character type. The two major collections defined by the standard library are "
            ],
            [
              "std::string",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "std::wstring",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In C++, sequences of characters are represented by specializing the "
          },
          {
            "Text": "std::basic_string",
            "AttrFlags": 2
          },
          {
            "Text": " class with a native character type. The two major collections defined by the standard library are "
          },
          {
            "Text": "std::string",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "std::wstring",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521990628,
        "id": "ee761f9e-ab87-4223-a29b-733bb08c2934",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521990628,
        "parent_id": "26d0063a-4516-4ea6-9149-ab5db29c3911",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "std::string",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is built with elements of type "
            ],
            [
              "char",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "std::string",
            "AttrFlags": 2
          },
          {
            "Text": " is built with elements of type "
          },
          {
            "Text": "char",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521990629,
        "id": "4782ba64-1739-4d27-9802-0f7972ab9c4c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521990629,
        "parent_id": "26d0063a-4516-4ea6-9149-ab5db29c3911",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "std::wstring",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is built with elements of type "
            ],
            [
              "wchar_t",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "std::wstring",
            "AttrFlags": 2
          },
          {
            "Text": " is built with elements of type "
          },
          {
            "Text": "wchar_t",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521990629,
        "id": "ae5c2ee9-364d-41f4-81b9-bc4da699bd0d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521990629,
        "parent_id": "26d0063a-4516-4ea6-9149-ab5db29c3911",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To convert between the two types, use "
            ],
            [
              "wstring_convert",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To convert between the two types, use "
          },
          {
            "Text": "wstring_convert",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521990629,
        "id": "f8861bab-d78f-4bfe-8452-15468cf0365a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552304460000,
        "parent_id": "26d0063a-4516-4ea6-9149-ab5db29c3911",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "#include \u003cstring\u003e\n#include \u003ccodecvt\u003e\n#include \u003clocale\u003e\n\nstd::string input_str = \"this is a -string-, which is a sequence based on the -char- type.\";\nstd::wstring input_wstr = L\"this is a -wide- string, which is based on the -wchar_t- type.\";\n\n// conversion\nstd::wstring str_turned_to_wstr = std::wstring_convert\u003cstd::codecvt_utf8\u003cwchar_t\u003e\u003e().from_bytes(input_str);\n\nstd::string wstr_turned_to_str = std::wstring_convert\u003cstd::codecvt_utf8\u003cwchar_t\u003e\u003e().to_bytes(input_wstr);"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "#include \u003cstring\u003e\n#include \u003ccodecvt\u003e\n#include \u003clocale\u003e\n\nstd::string input_str = \"this is a -string-, which is a sequence based on the -char- type.\";\nstd::wstring input_wstr = L\"this is a -wide- string, which is based on the -wchar_t- type.\";\n\n// conversion\nstd::wstring str_turned_to_wstr = std::wstring_convert\u003cstd::codecvt_utf8\u003cwchar_t\u003e\u003e().from_bytes(input_str);\n\nstd::string wstr_turned_to_str = std::wstring_convert\u003cstd::codecvt_utf8\u003cwchar_t\u003e\u003e().to_bytes(input_wstr);",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521990629,
        "id": "be7d5f6a-3e95-4f3f-b7f6-d43466d12ae3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521990629,
        "parent_id": "26d0063a-4516-4ea6-9149-ab5db29c3911",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In order to improve usability and/or readability, you can define functions to perform the conversion:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In order to improve usability and/or readability, you can define functions to perform the conversion:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521990629,
        "id": "b743e690-a8c9-483d-ac21-8861af1d8fa4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552304520000,
        "parent_id": "26d0063a-4516-4ea6-9149-ab5db29c3911",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "#include \u003cstring\u003e\n#include \u003ccodecvt\u003e\n#include \u003clocale\u003e\n\nusing convert_t = std::codecvt_utf8\u003cwchar_t\u003e;\nstd::wstring_convert\u003cconvert_t, wchar_t\u003e strconverter;\n\nstd::string to_string(std::wstring wstr)\n{\n    return strconverter.to_bytes(wstr);\n}\n\nstd::wstring to_wstring(std::string str)\n{\n    return strconverter.from_bytes(str);\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "#include \u003cstring\u003e\n#include \u003ccodecvt\u003e\n#include \u003clocale\u003e\n\nusing convert_t = std::codecvt_utf8\u003cwchar_t\u003e;\nstd::wstring_convert\u003cconvert_t, wchar_t\u003e strconverter;\n\nstd::string to_string(std::wstring wstr)\n{\n    return strconverter.to_bytes(wstr);\n}\n\nstd::wstring to_wstring(std::string str)\n{\n    return strconverter.from_bytes(str);\n}",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521990629,
        "id": "61868a59-3061-4bad-8bde-c102a714b8ba",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521990629,
        "parent_id": "26d0063a-4516-4ea6-9149-ab5db29c3911",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Sample usage:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Sample usage:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521990629,
        "id": "c0b254d7-04c7-47cd-aa07-1925df18a201",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552304520000,
        "parent_id": "26d0063a-4516-4ea6-9149-ab5db29c3911",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "std::wstring a_wide_string = to_wstring(\"Hello World!\");"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "std::wstring a_wide_string = to_wstring(\"Hello World!\");",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521990630,
        "id": "d3d2e279-d459-4720-a9f7-9c769135432a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521990630,
        "parent_id": "26d0063a-4516-4ea6-9149-ab5db29c3911",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "That’s certainly more readable than "
            ],
            [
              "std::wstring_convert\u003cstd::codecvt_utf8\u003cwchar_t\u003e\u003e().from_bytes(\"Hello World!\")",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "That’s certainly more readable than "
          },
          {
            "Text": "std::wstring_convert\u003cstd::codecvt_utf8\u003cwchar_t\u003e\u003e().from_bytes(\"Hello World!\")",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521990630,
        "id": "5a693cf0-0478-4eda-a9c1-b6107ee05660",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521990630,
        "parent_id": "26d0063a-4516-4ea6-9149-ab5db29c3911",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Please note that "
            ],
            [
              "char",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "wchar_t",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " do not imply encoding, and gives no indication of size in bytes. For instance, "
            ],
            [
              "wchar_t",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is commonly implemented as a 2-bytes data type and typically contains UTF-16 encoded data under Windows (or UCS-2 in versions prior to Windows 2000) and as a 4-bytes data type encoded using UTF-32 under Linux. This is in contrast with the newer types "
            ],
            [
              "char16_t",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "char32_t",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", which were introduced in C++11 and are guaranteed to be large enough to hold any UTF16 or UTF32 “character” (or more precisely, "
            ],
            [
              "code point",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ") respectively."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Please note that "
          },
          {
            "Text": "char",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "wchar_t",
            "AttrFlags": 2
          },
          {
            "Text": " do not imply encoding, and gives no indication of size in bytes. For instance, "
          },
          {
            "Text": "wchar_t",
            "AttrFlags": 2
          },
          {
            "Text": " is commonly implemented as a 2-bytes data type and typically contains UTF-16 encoded data under Windows (or UCS-2 in versions prior to Windows 2000) and as a 4-bytes data type encoded using UTF-32 under Linux. This is in contrast with the newer types "
          },
          {
            "Text": "char16_t",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "char32_t",
            "AttrFlags": 2
          },
          {
            "Text": ", which were introduced in C++11 and are guaranteed to be large enough to hold any UTF16 or UTF32 “character” (or more precisely, "
          },
          {
            "Text": "code point",
            "AttrFlags": 4
          },
          {
            "Text": ") respectively."
          }
        ]
      }
    ],
    "title": "Conversion to std::wstring",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}