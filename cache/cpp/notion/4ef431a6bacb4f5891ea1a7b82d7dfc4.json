{
  "ID": "4ef431a6-bacb-4f58-91ea-1a7b82d7dfc4",
  "Root": {
    "alive": true,
    "content": [
      "d397405c-953c-4485-b8af-be925151d20b",
      "86a5cb2e-9ad3-4f9f-927f-e97c50052240",
      "31ba5dff-8cea-43d4-99d0-c05882bb863a",
      "9526d380-434c-4986-9708-f2256cb0105c",
      "2bcd1607-56c5-412d-9497-d56256716130",
      "f398ee62-0e33-4b1a-a18b-2042b68ef177",
      "0ba691ee-95c8-447b-9971-a242cbddf25d",
      "062335ec-f5f7-4acb-8274-a13953eb12b4",
      "a267fa42-0e21-4805-b778-87ce259162d5",
      "ee6f0e70-179f-4ea6-88b3-0751b33c81f4",
      "3d66763b-1b5e-4c5c-b60c-db8de6a9a7c3",
      "ae64c210-7fb3-4192-8952-5432be5a461c"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522022512,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "4ef431a6-bacb-4f58-91ea-1a7b82d7dfc4",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550656140000,
    "parent_id": "40e8450d-4736-4ad0-be7d-a2d9307ddf4f",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Accessing class members"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522022506,
        "id": "d397405c-953c-4485-b8af-be925151d20b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522022506,
        "parent_id": "4ef431a6-bacb-4f58-91ea-1a7b82d7dfc4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To access member variables and member functions of an object of a class, the "
            ],
            [
              ".",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " operator is used:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To access member variables and member functions of an object of a class, the "
          },
          {
            "Text": ".",
            "AttrFlags": 2
          },
          {
            "Text": " operator is used:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522022509,
        "id": "86a5cb2e-9ad3-4f9f-927f-e97c50052240",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522022509,
        "parent_id": "4ef431a6-bacb-4f58-91ea-1a7b82d7dfc4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "struct SomeStruct {\n  int a;\n  int b;\n  void foo() {}\n};\n\nSomeStruct var;\n// Accessing member variable a in var.\nstd::cout \u003c\u003c var.a \u003c\u003c std::endl;\n// Assigning member variable b in var.\nvar.b = 1;\n// Calling a member function.\nvar.foo();"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "struct SomeStruct {\n  int a;\n  int b;\n  void foo() {}\n};\n\nSomeStruct var;\n// Accessing member variable a in var.\nstd::cout \u003c\u003c var.a \u003c\u003c std::endl;\n// Assigning member variable b in var.\nvar.b = 1;\n// Calling a member function.\nvar.foo();",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522022509,
        "id": "31ba5dff-8cea-43d4-99d0-c05882bb863a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522022509,
        "parent_id": "4ef431a6-bacb-4f58-91ea-1a7b82d7dfc4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When accessing the members of a class via a pointer, the "
            ],
            [
              "-\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " operator is commonly used. Alternatively, the instance can be dereferenced and the "
            ],
            [
              ".",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " operator used, although this is less common:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When accessing the members of a class via a pointer, the "
          },
          {
            "Text": "-\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " operator is commonly used. Alternatively, the instance can be dereferenced and the "
          },
          {
            "Text": ".",
            "AttrFlags": 2
          },
          {
            "Text": " operator used, although this is less common:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522022509,
        "id": "9526d380-434c-4986-9708-f2256cb0105c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522022509,
        "parent_id": "4ef431a6-bacb-4f58-91ea-1a7b82d7dfc4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "struct SomeStruct {\n  int a;\n  int b;\n  void foo() {}\n};\n\nSomeStruct var;\nSomeStruct *p = \u0026var;\n// Accessing member variable a in var via pointer.\nstd::cout \u003c\u003c p-\u003ea \u003c\u003c std::endl;\nstd::cout \u003c\u003c (*p).a \u003c\u003c std::endl;\n// Assigning member variable b in var via pointer.\np-\u003eb = 1;\n(*p).b = 1;\n// Calling a member function via a pointer.\np-\u003efoo();\n(*p).foo();"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "struct SomeStruct {\n  int a;\n  int b;\n  void foo() {}\n};\n\nSomeStruct var;\nSomeStruct *p = \u0026var;\n// Accessing member variable a in var via pointer.\nstd::cout \u003c\u003c p-\u003ea \u003c\u003c std::endl;\nstd::cout \u003c\u003c (*p).a \u003c\u003c std::endl;\n// Assigning member variable b in var via pointer.\np-\u003eb = 1;\n(*p).b = 1;\n// Calling a member function via a pointer.\np-\u003efoo();\n(*p).foo();",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522022510,
        "id": "2bcd1607-56c5-412d-9497-d56256716130",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522022510,
        "parent_id": "4ef431a6-bacb-4f58-91ea-1a7b82d7dfc4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When accessing static class members, the "
            ],
            [
              "::",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " operator is used, but on the name of the class instead of an instance of it. Alternatively, the static member can be accessed from an instance or a pointer to an instance using the "
            ],
            [
              ".",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "-\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " operator, respectively, with the same syntax as accessing non-static members."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When accessing static class members, the "
          },
          {
            "Text": "::",
            "AttrFlags": 2
          },
          {
            "Text": " operator is used, but on the name of the class instead of an instance of it. Alternatively, the static member can be accessed from an instance or a pointer to an instance using the "
          },
          {
            "Text": ".",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "-\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " operator, respectively, with the same syntax as accessing non-static members."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522022510,
        "id": "f398ee62-0e33-4b1a-a18b-2042b68ef177",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522022510,
        "parent_id": "4ef431a6-bacb-4f58-91ea-1a7b82d7dfc4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "struct SomeStruct {\n  int a;\n  int b;\n  void foo() {}\n\n  static int c;\n  static void bar() {}\n};\nint SomeStruct::c;\n\nSomeStruct var;\nSomeStruct* p = \u0026var;\n// Assigning static member variable c in struct SomeStruct.\nSomeStruct::c = 5;\n// Accessing static member variable c in struct SomeStruct, through var and p.\nvar.a = var.c;\nvar.b = p-\u003ec;\n// Calling a static member function.\nSomeStruct::bar();\nvar.bar();\np-\u003ebar();"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "struct SomeStruct {\n  int a;\n  int b;\n  void foo() {}\n\n  static int c;\n  static void bar() {}\n};\nint SomeStruct::c;\n\nSomeStruct var;\nSomeStruct* p = \u0026var;\n// Assigning static member variable c in struct SomeStruct.\nSomeStruct::c = 5;\n// Accessing static member variable c in struct SomeStruct, through var and p.\nvar.a = var.c;\nvar.b = p-\u003ec;\n// Calling a static member function.\nSomeStruct::bar();\nvar.bar();\np-\u003ebar();",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522022510,
        "id": "0ba691ee-95c8-447b-9971-a242cbddf25d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522022510,
        "parent_id": "4ef431a6-bacb-4f58-91ea-1a7b82d7dfc4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Background"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Background"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522022510,
        "id": "062335ec-f5f7-4acb-8274-a13953eb12b4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522022510,
        "parent_id": "4ef431a6-bacb-4f58-91ea-1a7b82d7dfc4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "-\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " operator is needed because the member access operator "
            ],
            [
              ".",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " has precedence over the dereferencing operator "
            ],
            [
              "\\*",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "-\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " operator is needed because the member access operator "
          },
          {
            "Text": ".",
            "AttrFlags": 2
          },
          {
            "Text": " has precedence over the dereferencing operator "
          },
          {
            "Text": "\\*",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522022511,
        "id": "a267fa42-0e21-4805-b778-87ce259162d5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522022511,
        "parent_id": "4ef431a6-bacb-4f58-91ea-1a7b82d7dfc4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "One would expect that "
            ],
            [
              "*p.a",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " would dereference "
            ],
            [
              "p",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (resulting in a reference to the object "
            ],
            [
              "p",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is pointing to) and then accessing its member "
            ],
            [
              "a",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". But in fact, it tries to access the member "
            ],
            [
              "a",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " of "
            ],
            [
              "p",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and then dereference it. I.e. "
            ],
            [
              "*p.a",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is equivalent to "
            ],
            [
              "*(p.a)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". In the example above, this would result in a compiler error because of two facts: First, "
            ],
            [
              "p",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is a pointer and does not have a member "
            ],
            [
              "a",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Second, "
            ],
            [
              "a",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is an integer and, thus, can’t be dereferenced."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "One would expect that "
          },
          {
            "Text": "*p.a",
            "AttrFlags": 2
          },
          {
            "Text": " would dereference "
          },
          {
            "Text": "p",
            "AttrFlags": 2
          },
          {
            "Text": " (resulting in a reference to the object "
          },
          {
            "Text": "p",
            "AttrFlags": 2
          },
          {
            "Text": " is pointing to) and then accessing its member "
          },
          {
            "Text": "a",
            "AttrFlags": 2
          },
          {
            "Text": ". But in fact, it tries to access the member "
          },
          {
            "Text": "a",
            "AttrFlags": 2
          },
          {
            "Text": " of "
          },
          {
            "Text": "p",
            "AttrFlags": 2
          },
          {
            "Text": " and then dereference it. I.e. "
          },
          {
            "Text": "*p.a",
            "AttrFlags": 2
          },
          {
            "Text": " is equivalent to "
          },
          {
            "Text": "*(p.a)",
            "AttrFlags": 2
          },
          {
            "Text": ". In the example above, this would result in a compiler error because of two facts: First, "
          },
          {
            "Text": "p",
            "AttrFlags": 2
          },
          {
            "Text": " is a pointer and does not have a member "
          },
          {
            "Text": "a",
            "AttrFlags": 2
          },
          {
            "Text": ". Second, "
          },
          {
            "Text": "a",
            "AttrFlags": 2
          },
          {
            "Text": " is an integer and, thus, can’t be dereferenced."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522022511,
        "id": "ee6f0e70-179f-4ea6-88b3-0751b33c81f4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522022511,
        "parent_id": "4ef431a6-bacb-4f58-91ea-1a7b82d7dfc4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The uncommonly used solution to this problem would be to explicitly control the precedence: "
            ],
            [
              "(*p).a",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The uncommonly used solution to this problem would be to explicitly control the precedence: "
          },
          {
            "Text": "(*p).a",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522022511,
        "id": "3d66763b-1b5e-4c5c-b60c-db8de6a9a7c3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522022511,
        "parent_id": "4ef431a6-bacb-4f58-91ea-1a7b82d7dfc4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Instead, the "
            ],
            [
              "-\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " operator is almost always used. It is a short-hand for first dereferencing the pointer and then accessing it. I.e. "
            ],
            [
              "(*p).a",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is exactly the same as "
            ],
            [
              "p-\u003ea",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Instead, the "
          },
          {
            "Text": "-\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " operator is almost always used. It is a short-hand for first dereferencing the pointer and then accessing it. I.e. "
          },
          {
            "Text": "(*p).a",
            "AttrFlags": 2
          },
          {
            "Text": " is exactly the same as "
          },
          {
            "Text": "p-\u003ea",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522022512,
        "id": "ae64c210-7fb3-4192-8952-5432be5a461c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522022512,
        "parent_id": "4ef431a6-bacb-4f58-91ea-1a7b82d7dfc4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "::",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " operator is the scope operator, used in the same manner as accessing a member of a namespace. This is because a static class member is considered to be in that class’ scope, but isn’t considered a member of instances of that class. The use of normal "
            ],
            [
              ".",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "-\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is also allowed for static members, despite them not being instance members, for historical reasons; this is of use for writing generic code in templates, as the caller doesn’t need to be concerned with whether a given member function is static or non-static."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "::",
            "AttrFlags": 2
          },
          {
            "Text": " operator is the scope operator, used in the same manner as accessing a member of a namespace. This is because a static class member is considered to be in that class’ scope, but isn’t considered a member of instances of that class. The use of normal "
          },
          {
            "Text": ".",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "-\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " is also allowed for static members, despite them not being instance members, for historical reasons; this is of use for writing generic code in templates, as the caller doesn’t need to be concerned with whether a given member function is static or non-static."
          }
        ]
      }
    ],
    "title": "Accessing class members",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}