{
  "ID": "2bfa5296-7cc8-4bb8-8de2-b3d258650f01",
  "Root": {
    "alive": true,
    "content": [
      "d20e87bf-1346-4862-a024-6b4761c914d7",
      "a47536ee-0d6a-4fe3-aba5-3852a5e5005c",
      "96500828-a246-4cf3-a4ee-de38f11dd720",
      "e243c617-fdf3-42a5-8ba5-f01209e9f6b1",
      "d1b03d54-1080-4f23-a440-bcf3f00c4e33",
      "9c2cf8e9-be42-4cba-91b9-fca0dadf356e",
      "750dea60-d4b7-4c87-a0e4-ee49083ecca5",
      "e12135c9-c3c8-4481-9a07-fc72ea073348",
      "adfea935-de48-4057-85c7-00d9f758f76e",
      "fd0f0f32-77e0-4dd2-a10f-dd05a7096f5d"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522670489,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "2bfa5296-7cc8-4bb8-8de2-b3d258650f01",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550710500000,
    "parent_id": "5fbdea23-a3bd-48e3-9bb9-c7ca69fd9aa2",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Overloading within a class hierarchy"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522670487,
        "id": "d20e87bf-1346-4862-a024-6b4761c914d7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522670487,
        "parent_id": "2bfa5296-7cc8-4bb8-8de2-b3d258650f01",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The following examples will use this class hierarchy:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The following examples will use this class hierarchy:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522670488,
        "id": "a47536ee-0d6a-4fe3-aba5-3852a5e5005c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522670488,
        "parent_id": "2bfa5296-7cc8-4bb8-8de2-b3d258650f01",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "struct A { int m; };\nstruct B : A {};\nstruct C : B {};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "struct A { int m; };\nstruct B : A {};\nstruct C : B {};",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522670488,
        "id": "96500828-a246-4cf3-a4ee-de38f11dd720",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522670488,
        "parent_id": "2bfa5296-7cc8-4bb8-8de2-b3d258650f01",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The conversion from derived class type to base class type is preferred to user-defined conversions. This applies when passing by value or by reference, as well as when converting pointer-to-derived to pointer-to-base."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The conversion from derived class type to base class type is preferred to user-defined conversions. This applies when passing by value or by reference, as well as when converting pointer-to-derived to pointer-to-base."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522670488,
        "id": "e243c617-fdf3-42a5-8ba5-f01209e9f6b1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522670488,
        "parent_id": "2bfa5296-7cc8-4bb8-8de2-b3d258650f01",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "struct Unrelated {\n    Unrelated(B b);\n};\nvoid f(A a);\nvoid f(Unrelated u);\nB b;\nf(b); // calls f(A)"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "struct Unrelated {\n    Unrelated(B b);\n};\nvoid f(A a);\nvoid f(Unrelated u);\nB b;\nf(b); // calls f(A)",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522670488,
        "id": "d1b03d54-1080-4f23-a440-bcf3f00c4e33",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522670488,
        "parent_id": "2bfa5296-7cc8-4bb8-8de2-b3d258650f01",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A pointer conversion from derived class to base class is also better than conversion to "
            ],
            [
              "void*",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A pointer conversion from derived class to base class is also better than conversion to "
          },
          {
            "Text": "void*",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522670488,
        "id": "9c2cf8e9-be42-4cba-91b9-fca0dadf356e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522670488,
        "parent_id": "2bfa5296-7cc8-4bb8-8de2-b3d258650f01",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "void f(A* p);\nvoid f(void* p);\nB b;\nf(\u0026b); // calls f(A*)"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "void f(A* p);\nvoid f(void* p);\nB b;\nf(\u0026b); // calls f(A*)",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522670488,
        "id": "750dea60-d4b7-4c87-a0e4-ee49083ecca5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522670488,
        "parent_id": "2bfa5296-7cc8-4bb8-8de2-b3d258650f01",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If there are multiple overloads within the same chain of inheritance, the most derived base class overload is preferred. This is based on a similar principle as virtual dispatch: the “most specialized” implementation is chosen. However, overload resolution always occurs at compile time and will never implicitly down-cast."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If there are multiple overloads within the same chain of inheritance, the most derived base class overload is preferred. This is based on a similar principle as virtual dispatch: the “most specialized” implementation is chosen. However, overload resolution always occurs at compile time and will never implicitly down-cast."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522670488,
        "id": "e12135c9-c3c8-4481-9a07-fc72ea073348",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522670488,
        "parent_id": "2bfa5296-7cc8-4bb8-8de2-b3d258650f01",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "void f(const A\u0026 a);\nvoid f(const B\u0026 b);\nC c;\nf(c); // calls f(const B\u0026)\nB b;\nA\u0026 r = b;\nf(r); // calls f(const A\u0026); the f(const B\u0026) overload is not viable"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "void f(const A\u0026 a);\nvoid f(const B\u0026 b);\nC c;\nf(c); // calls f(const B\u0026)\nB b;\nA\u0026 r = b;\nf(r); // calls f(const A\u0026); the f(const B\u0026) overload is not viable",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522670489,
        "id": "adfea935-de48-4057-85c7-00d9f758f76e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522670489,
        "parent_id": "2bfa5296-7cc8-4bb8-8de2-b3d258650f01",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For pointers to members, which are contravariant with respect to the class, a similar rule applies in the opposite direction: the least derived derived class is preferred."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For pointers to members, which are contravariant with respect to the class, a similar rule applies in the opposite direction: the least derived derived class is preferred."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522670489,
        "id": "fd0f0f32-77e0-4dd2-a10f-dd05a7096f5d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522670489,
        "parent_id": "2bfa5296-7cc8-4bb8-8de2-b3d258650f01",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "void f(int B::*p);\nvoid f(int C::*p);\nint A::*p = \u0026A::m;\nf(p); // calls f(int B::*)"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "void f(int B::*p);\nvoid f(int C::*p);\nint A::*p = \u0026A::m;\nf(p); // calls f(int B::*)",
        "code_language": "Plain Text"
      }
    ],
    "title": "Overloading within a class hierarchy",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}