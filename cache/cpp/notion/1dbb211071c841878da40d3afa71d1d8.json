{
  "ID": "1dbb2110-71c8-4187-8da4-0d3afa71d1d8",
  "Root": {
    "alive": true,
    "content": [
      "ec3609fe-a74a-469f-8b3f-1431c472c7f8",
      "c73b880f-8f7d-4219-b270-e5a0d870ed7e",
      "113ee2d1-caf3-4d31-a269-f305db56fef5",
      "eb9abb5c-6d85-41eb-b3d7-abff120b8e45",
      "9be4f7f4-9d9a-425f-bb36-36a67f42eb51",
      "0839bac5-ce7b-4a4d-b74c-d282130a0f77",
      "70d9e8c6-9f96-46ed-bd9a-65dd660aa10a",
      "0c46ab9b-6f5d-42d8-85ea-e5ccff809122"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522326692,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "1dbb2110-71c8-4187-8da4-0d3afa71d1d8",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550709600000,
    "parent_id": "96325b08-db02-4f4f-a7a3-7510a746dbe2",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "FinallyScopeExit"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522326687,
        "id": "ec3609fe-a74a-469f-8b3f-1431c472c7f8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522326687,
        "parent_id": "1dbb2110-71c8-4187-8da4-0d3afa71d1d8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For cases when we don’t want to write special classes to handle some resource, we may write a generic class:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For cases when we don’t want to write special classes to handle some resource, we may write a generic class:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522326690,
        "id": "c73b880f-8f7d-4219-b270-e5a0d870ed7e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522326690,
        "parent_id": "1dbb2110-71c8-4187-8da4-0d3afa71d1d8",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "template\u003ctypename Function\u003e\nclass Finally final\n{\npublic:\n    explicit Finally(Function f) : f(std::move(f)) {}\n    ~Finally() { f(); } // (1) See below\n\n    Finally(const Finally\u0026) = delete;\n    Finally(Finally\u0026\u0026) = default;\n    Finally\u0026 operator =(const Finally\u0026) = delete;\n    Finally\u0026 operator =(Finally\u0026\u0026) = delete;\nprivate:\n    Function f;\n};\n// Execute the function f when the returned object goes out of scope.\ntemplate\u003ctypename Function\u003e\nauto onExit(Function \u0026\u0026f) { return Finally\u003cstd::decay_t\u003cFunction\u003e\u003e{std::forward\u003cFunction\u003e(f)}; }"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "template\u003ctypename Function\u003e\nclass Finally final\n{\npublic:\n    explicit Finally(Function f) : f(std::move(f)) {}\n    ~Finally() { f(); } // (1) See below\n\n    Finally(const Finally\u0026) = delete;\n    Finally(Finally\u0026\u0026) = default;\n    Finally\u0026 operator =(const Finally\u0026) = delete;\n    Finally\u0026 operator =(Finally\u0026\u0026) = delete;\nprivate:\n    Function f;\n};\n// Execute the function f when the returned object goes out of scope.\ntemplate\u003ctypename Function\u003e\nauto onExit(Function \u0026\u0026f) { return Finally\u003cstd::decay_t\u003cFunction\u003e\u003e{std::forward\u003cFunction\u003e(f)}; }",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522326690,
        "id": "113ee2d1-caf3-4d31-a269-f305db56fef5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522326690,
        "parent_id": "1dbb2110-71c8-4187-8da4-0d3afa71d1d8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "And its example usage"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "And its example usage"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522326690,
        "id": "eb9abb5c-6d85-41eb-b3d7-abff120b8e45",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522326690,
        "parent_id": "1dbb2110-71c8-4187-8da4-0d3afa71d1d8",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "void foo(std::vector\u003cint\u003e\u0026 v, int i)\n{\n    // ...\n\n    v[i] += 42;\n    auto autoRollBackChange = onExit([\u0026](){ v[i] -= 42; });\n\n    // ... code as recursive call `foo(v, i + 1)`\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "void foo(std::vector\u003cint\u003e\u0026 v, int i)\n{\n    // ...\n\n    v[i] += 42;\n    auto autoRollBackChange = onExit([\u0026](){ v[i] -= 42; });\n\n    // ... code as recursive call `foo(v, i + 1)`\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522326690,
        "id": "9be4f7f4-9d9a-425f-bb36-36a67f42eb51",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522326690,
        "parent_id": "1dbb2110-71c8-4187-8da4-0d3afa71d1d8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note (1): Some discussion about destructor definition has to be considered to handle exception:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note (1): Some discussion about destructor definition has to be considered to handle exception:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522326691,
        "id": "0839bac5-ce7b-4a4d-b74c-d282130a0f77",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522326691,
        "parent_id": "1dbb2110-71c8-4187-8da4-0d3afa71d1d8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "~Finally() noexcept { f(); }",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ": "
            ],
            [
              "std::terminate",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is called in case of exception"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "~Finally() noexcept { f(); }",
            "AttrFlags": 2
          },
          {
            "Text": ": "
          },
          {
            "Text": "std::terminate",
            "AttrFlags": 2
          },
          {
            "Text": " is called in case of exception"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522326691,
        "id": "70d9e8c6-9f96-46ed-bd9a-65dd660aa10a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522326691,
        "parent_id": "1dbb2110-71c8-4187-8da4-0d3afa71d1d8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "~Finally() noexcept(noexcept(f())) { f(); }",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ": terminate() is called only in case of exception during stack unwinding."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "~Finally() noexcept(noexcept(f())) { f(); }",
            "AttrFlags": 2
          },
          {
            "Text": ": terminate() is called only in case of exception during stack unwinding."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522326692,
        "id": "0c46ab9b-6f5d-42d8-85ea-e5ccff809122",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522326692,
        "parent_id": "1dbb2110-71c8-4187-8da4-0d3afa71d1d8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "~Finally() noexcept { try { f(); } catch (...) { /* ignore exception (might log it) */} }",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " No "
            ],
            [
              "std::terminate",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " called, but we cannot handle error (even for non stack unwinding)."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "~Finally() noexcept { try { f(); } catch (...) { /* ignore exception (might log it) */} }",
            "AttrFlags": 2
          },
          {
            "Text": " No "
          },
          {
            "Text": "std::terminate",
            "AttrFlags": 2
          },
          {
            "Text": " called, but we cannot handle error (even for non stack unwinding)."
          }
        ]
      }
    ],
    "title": "FinallyScopeExit",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}