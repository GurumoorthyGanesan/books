{
  "ID": "6d8527cf-60ae-4abb-a94e-6d982e4e525c",
  "Root": {
    "alive": true,
    "content": [
      "6f74f65a-590f-4e40-ba46-116d3c4c36d7",
      "18a5c718-b434-4e20-a514-71aaad92626d",
      "56b8b196-8c9c-4c9a-b1a5-2a1e1bd12add",
      "b7611d23-cb27-4249-98e5-6bf798296cf8",
      "6eb73076-9483-4384-845e-308de4b7bf17",
      "ce6d43c6-60a6-4f92-b430-72d1c61eccc2"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522043787,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "6d8527cf-60ae-4abb-a94e-6d982e4e525c",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550655780000,
    "parent_id": "8655f492-9c51-4f68-ad52-8b6c1e02a277",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "std::vector"
        ]
      ]
    },
    "type": "page",
    "version": 11,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522043782,
        "id": "6f74f65a-590f-4e40-ba46-116d3c4c36d7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522043782,
        "parent_id": "6d8527cf-60ae-4abb-a94e-6d982e4e525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Introduction"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Introduction"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522043785,
        "id": "18a5c718-b434-4e20-a514-71aaad92626d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522043785,
        "parent_id": "6d8527cf-60ae-4abb-a94e-6d982e4e525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A vector is a dynamic array with automatically handled storage. The elements in a vector can be accessed just as efficiently as those in an array with the advantage being that vectors can dynamically change in size."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A vector is a dynamic array with automatically handled storage. The elements in a vector can be accessed just as efficiently as those in an array with the advantage being that vectors can dynamically change in size."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522043785,
        "id": "56b8b196-8c9c-4c9a-b1a5-2a1e1bd12add",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522043785,
        "parent_id": "6d8527cf-60ae-4abb-a94e-6d982e4e525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In terms of storage the vector data is (usually) placed in dynamically allocated memory thus requiring some minor overhead; conversely "
            ],
            [
              "C-arrays",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "std::array",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " use automatic storage relative to the declared location and thus do not have any overhead."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In terms of storage the vector data is (usually) placed in dynamically allocated memory thus requiring some minor overhead; conversely "
          },
          {
            "Text": "C-arrays",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "std::array",
            "AttrFlags": 2
          },
          {
            "Text": " use automatic storage relative to the declared location and thus do not have any overhead."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522043786,
        "id": "b7611d23-cb27-4249-98e5-6bf798296cf8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522043786,
        "parent_id": "6d8527cf-60ae-4abb-a94e-6d982e4e525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Remarks"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Remarks"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522043786,
        "id": "6eb73076-9483-4384-845e-308de4b7bf17",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522043786,
        "parent_id": "6d8527cf-60ae-4abb-a94e-6d982e4e525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Use of an "
            ],
            [
              "std::vector",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " requires the inclusion of the "
            ],
            [
              "\u003cvector\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " header using "
            ],
            [
              "#include \u003cvector\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Use of an "
          },
          {
            "Text": "std::vector",
            "AttrFlags": 2
          },
          {
            "Text": " requires the inclusion of the "
          },
          {
            "Text": "\u003cvector\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " header using "
          },
          {
            "Text": "#include \u003cvector\u003e",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522043787,
        "id": "ce6d43c6-60a6-4f92-b430-72d1c61eccc2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522043787,
        "parent_id": "6d8527cf-60ae-4abb-a94e-6d982e4e525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Elements in a "
            ],
            [
              "std::vector",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " are stored contiguously on the free store. It should be noted that when vectors are nested as in "
            ],
            [
              "std::vector\u003cstd::vector\u003cint\u003e \u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", the elements of each vector are contiguous, but each vector allocates its own underlying buffer on the free store."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Elements in a "
          },
          {
            "Text": "std::vector",
            "AttrFlags": 2
          },
          {
            "Text": " are stored contiguously on the free store. It should be noted that when vectors are nested as in "
          },
          {
            "Text": "std::vector\u003cstd::vector\u003cint\u003e \u003e",
            "AttrFlags": 2
          },
          {
            "Text": ", the elements of each vector are contiguous, but each vector allocates its own underlying buffer on the free store."
          }
        ]
      }
    ],
    "title": "std::vector",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}