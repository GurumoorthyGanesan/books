{
  "ID": "1332d5b7-2d2f-4bf9-b3b7-cc8660037999",
  "Root": {
    "alive": true,
    "content": [
      "698e25db-91c0-49f2-a028-af2b714d490b",
      "80107897-eb98-4b42-9256-22d5f8dec832",
      "5ecc0764-21f3-4326-8b1e-ae60118f2cb6"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550524313636,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "1332d5b7-2d2f-4bf9-b3b7-cc8660037999",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550800080000,
    "parent_id": "e197edf1-7913-4c71-bf9f-78feec182413",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Copy constructor"
        ]
      ]
    },
    "type": "page",
    "version": 10,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524313632,
        "id": "698e25db-91c0-49f2-a028-af2b714d490b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524313632,
        "parent_id": "1332d5b7-2d2f-4bf9-b3b7-cc8660037999",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Copy constructor on the other hand , is the complete opposite of the Assignment Constructor. This time, it is used to initialize an already nonexistent(or non-previously initialized) object. This means it copies all the data from the object you are assigning it to , without actually initializing the object that is being copied onto. Now Let’s take a look at the same code as before but modify the assignment constructor to be a copy constructor :"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Copy constructor on the other hand , is the complete opposite of the Assignment Constructor. This time, it is used to initialize an already nonexistent(or non-previously initialized) object. This means it copies all the data from the object you are assigning it to , without actually initializing the object that is being copied onto. Now Let’s take a look at the same code as before but modify the assignment constructor to be a copy constructor :"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524313635,
        "id": "80107897-eb98-4b42-9256-22d5f8dec832",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550800080000,
        "parent_id": "1332d5b7-2d2f-4bf9-b3b7-cc8660037999",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "// Copy Constructor\n#include \u003ciostream\u003e\n#include \u003cstring\u003e\n\nusing std::cout;\nusing std::endl;\n\nclass Foo\n{\n  public:\n    Foo(int data)\n    {\n        this-\u003edata = data;    \n    }\n    ~Foo(){};\n    Foo(const Foo\u0026 rhs)\n    {\n            data = rhs.data; \n    }\n\n    int data;\n};\n\nint main()\n{\n   Foo foo(2); //Foo(int data) called\n   Foo foo2 = foo; // Copy Constructor called\n   cout \u003c\u003c foo2.data \u003c\u003c endl;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "// Copy Constructor\n#include \u003ciostream\u003e\n#include \u003cstring\u003e\n\nusing std::cout;\nusing std::endl;\n\nclass Foo\n{\n  public:\n    Foo(int data)\n    {\n        this-\u003edata = data;    \n    }\n    ~Foo(){};\n    Foo(const Foo\u0026 rhs)\n    {\n            data = rhs.data; \n    }\n\n    int data;\n};\n\nint main()\n{\n   Foo foo(2); //Foo(int data) called\n   Foo foo2 = foo; // Copy Constructor called\n   cout \u003c\u003c foo2.data \u003c\u003c endl;\n}",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524313635,
        "id": "5ecc0764-21f3-4326-8b1e-ae60118f2cb6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524313635,
        "parent_id": "1332d5b7-2d2f-4bf9-b3b7-cc8660037999",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You can see here "
            ],
            [
              "Foo foo2 = foo;",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in the main function I immediately assign the object before actually initializing it, which as said before means it’s a copy constructor. And notice that I didn’t need to pass the parameter int for the "
            ],
            [
              "foo2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " object since I automatically pulled the previous data from the object foo. Here is an example output : http://cpp.sh/5iu7"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You can see here "
          },
          {
            "Text": "Foo foo2 = foo;",
            "AttrFlags": 2
          },
          {
            "Text": " in the main function I immediately assign the object before actually initializing it, which as said before means it’s a copy constructor. And notice that I didn’t need to pass the parameter int for the "
          },
          {
            "Text": "foo2",
            "AttrFlags": 2
          },
          {
            "Text": " object since I automatically pulled the previous data from the object foo. Here is an example output : http://cpp.sh/5iu7"
          }
        ]
      }
    ],
    "title": "Copy constructor",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}