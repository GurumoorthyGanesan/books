{
  "ID": "98e9c06f-de8c-40a2-b8fc-b1a440076fa9",
  "Root": {
    "alive": true,
    "content": [
      "133ce91c-a7e0-4e92-90e4-1e4037b4cd01",
      "0a8a1700-0ddf-495f-b313-c9219a22fce8",
      "72706562-e01e-4805-a363-78a423e9c00c",
      "53bd4274-509a-4ace-b4ea-61aedc08cb6a",
      "c5bccb42-fccf-464c-a844-86bf4757d7cf",
      "06988d29-a9f0-4a69-a18f-8bc6d5328776",
      "b4164b19-42e2-4376-a518-58403549be61",
      "4f7a9fd4-5d3f-4b35-8055-825abb94588a",
      "b642fcea-7fab-4013-a7c3-857526a9c323",
      "79b45918-2d9c-4633-b219-5bbed0688598",
      "7e4fb1e2-854d-469a-a10d-ec40e7838364",
      "b8fcfb29-0d0c-4eca-b895-800618e4934b",
      "76f69d2e-548b-47c3-99a7-d94fa056f535",
      "a7facb7b-8875-47f0-8fed-38ac1f777fb2",
      "38127e67-a9fc-4663-8d27-101babf51540",
      "122a403d-c68a-42b4-a334-5f16b6df1c02",
      "4157cfdb-32d2-4134-8ac3-7ade0e0c1b81",
      "0640118a-335d-4b12-add7-881469dedbbb",
      "358d6d44-88d7-4784-a079-48b42ede0daa",
      "c212756e-4316-4894-8c86-c6783097b745",
      "7329c92f-aab9-44c0-87b8-96140604caf1",
      "7bfd3d77-f22c-422a-8e31-0d244ddc19dc",
      "3ec8c135-05cb-4825-8d3c-86be60726fa6",
      "dfa45b57-6d8f-4b94-b73b-47b8d0d70cda",
      "16b4d6a8-4c96-4086-8a7e-f01c41172678",
      "aa200998-9cd3-4363-b836-7b0b7220dee7",
      "09b2e5da-40e1-40a9-9c12-fc7ae73399e6",
      "700230ac-2205-4059-a7fa-653145273fb3",
      "0667e03d-129e-43d2-867e-718b4d1df8cf",
      "7262e145-229b-49c0-bc64-1579849d2e26"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522025622,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "98e9c06f-de8c-40a2-b8fc-b1a440076fa9",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550800980000,
    "parent_id": "402ef4da-a4e3-4503-ab08-9a4aa56821b5",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Sharing ownership std::shared_ptr"
        ]
      ]
    },
    "type": "page",
    "version": 19,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522025614,
        "id": "133ce91c-a7e0-4e92-90e4-1e4037b4cd01",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522025614,
        "parent_id": "98e9c06f-de8c-40a2-b8fc-b1a440076fa9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The class template "
            ],
            [
              "std::shared_ptr",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://en.cppreference.com/w/cpp/memory/shared_ptr"
                ]
              ]
            ],
            [
              " defines a shared pointer that is able to share ownership of an object with other shared pointers. This contrasts to "
            ],
            [
              "std::unique_ptr",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://en.cppreference.com/w/cpp/memory/unique_ptr"
                ]
              ]
            ],
            [
              " which represents exclusive ownership."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The class template "
          },
          {
            "Text": "std::shared_ptr",
            "AttrFlags": 2,
            "Link": "http://en.cppreference.com/w/cpp/memory/shared_ptr"
          },
          {
            "Text": " defines a shared pointer that is able to share ownership of an object with other shared pointers. This contrasts to "
          },
          {
            "Text": "std::unique_ptr",
            "AttrFlags": 2,
            "Link": "http://en.cppreference.com/w/cpp/memory/unique_ptr"
          },
          {
            "Text": " which represents exclusive ownership."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522025615,
        "id": "0a8a1700-0ddf-495f-b313-c9219a22fce8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522025615,
        "parent_id": "98e9c06f-de8c-40a2-b8fc-b1a440076fa9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The sharing behavior is implemented through a technique known as reference counting, where the number of shared pointers that point to the object is stored alongside it. When this count reaches zero, either through the destruction or reassignment of the last "
            ],
            [
              "std::shared_ptr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " instance, the object is automatically destroyed."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The sharing behavior is implemented through a technique known as reference counting, where the number of shared pointers that point to the object is stored alongside it. When this count reaches zero, either through the destruction or reassignment of the last "
          },
          {
            "Text": "std::shared_ptr",
            "AttrFlags": 2
          },
          {
            "Text": " instance, the object is automatically destroyed."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522025615,
        "id": "72706562-e01e-4805-a363-78a423e9c00c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550800920000,
        "parent_id": "98e9c06f-de8c-40a2-b8fc-b1a440076fa9",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "// Creation: 'firstShared' is a shared pointer for a new instance of 'Foo' \nstd::shared_ptr\u003cFoo\u003e firstShared = std::make_shared\u003cFoo\u003e(/*args*/);",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "code",
        "version": 7,
        "code": "// Creation: 'firstShared' is a shared pointer for a new instance of 'Foo' \nstd::shared_ptr\u003cFoo\u003e firstShared = std::make_shared\u003cFoo\u003e(/*args*/);",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522025616,
        "id": "53bd4274-509a-4ace-b4ea-61aedc08cb6a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522025616,
        "parent_id": "98e9c06f-de8c-40a2-b8fc-b1a440076fa9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To create multiple smart pointers that share the same object, we need to create another "
            ],
            [
              "shared_ptr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " that aliases the first shared pointer. Here are 2 ways of doing it:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To create multiple smart pointers that share the same object, we need to create another "
          },
          {
            "Text": "shared_ptr",
            "AttrFlags": 2
          },
          {
            "Text": " that aliases the first shared pointer. Here are 2 ways of doing it:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522025616,
        "id": "c5bccb42-fccf-464c-a844-86bf4757d7cf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550800920000,
        "parent_id": "98e9c06f-de8c-40a2-b8fc-b1a440076fa9",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "std::shared_ptr\u003cFoo\u003e secondShared(firstShared);  // 1st way: Copy constructing\nstd::shared_ptr\u003cFoo\u003e secondShared;\nsecondShared = firstShared;                      // 2nd way: Assigning"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "std::shared_ptr\u003cFoo\u003e secondShared(firstShared);  // 1st way: Copy constructing\nstd::shared_ptr\u003cFoo\u003e secondShared;\nsecondShared = firstShared;                      // 2nd way: Assigning",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522025616,
        "id": "06988d29-a9f0-4a69-a18f-8bc6d5328776",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522025616,
        "parent_id": "98e9c06f-de8c-40a2-b8fc-b1a440076fa9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Either of the above ways makes "
            ],
            [
              "secondShared",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " a shared pointer that shares ownership of our instance of "
            ],
            [
              "Foo",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " with "
            ],
            [
              "firstShared",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Either of the above ways makes "
          },
          {
            "Text": "secondShared",
            "AttrFlags": 2
          },
          {
            "Text": " a shared pointer that shares ownership of our instance of "
          },
          {
            "Text": "Foo",
            "AttrFlags": 2
          },
          {
            "Text": " with "
          },
          {
            "Text": "firstShared",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522025616,
        "id": "b4164b19-42e2-4376-a518-58403549be61",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522025616,
        "parent_id": "98e9c06f-de8c-40a2-b8fc-b1a440076fa9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The smart pointer works just like a raw pointer. This means, you can use "
            ],
            [
              "\\*",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to dereference them. The regular "
            ],
            [
              "-\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " operator works as well:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The smart pointer works just like a raw pointer. This means, you can use "
          },
          {
            "Text": "\\*",
            "AttrFlags": 2
          },
          {
            "Text": " to dereference them. The regular "
          },
          {
            "Text": "-\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " operator works as well:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522025616,
        "id": "4f7a9fd4-5d3f-4b35-8055-825abb94588a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550800920000,
        "parent_id": "98e9c06f-de8c-40a2-b8fc-b1a440076fa9",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "secondShared-\u003etest(); // Calls Foo::test()"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "secondShared-\u003etest(); // Calls Foo::test()",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522025617,
        "id": "b642fcea-7fab-4013-a7c3-857526a9c323",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522025617,
        "parent_id": "98e9c06f-de8c-40a2-b8fc-b1a440076fa9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Finally, when the last aliased "
            ],
            [
              "shared_ptr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " goes out of scope, the destructor of our "
            ],
            [
              "Foo",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " instance is called."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Finally, when the last aliased "
          },
          {
            "Text": "shared_ptr",
            "AttrFlags": 2
          },
          {
            "Text": " goes out of scope, the destructor of our "
          },
          {
            "Text": "Foo",
            "AttrFlags": 2
          },
          {
            "Text": " instance is called."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522025617,
        "id": "79b45918-2d9c-4633-b219-5bbed0688598",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522025617,
        "parent_id": "98e9c06f-de8c-40a2-b8fc-b1a440076fa9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Warning:",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " Constructing a "
            ],
            [
              "shared_ptr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " might throw a "
            ],
            [
              "bad_alloc",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " exception when extra data for shared ownership semantics needs to be allocated. If the constructor is passed a regular pointer it assumes to own the object pointed to and calls the deleter if an exception is thrown. This means "
            ],
            [
              "shared_ptr\u003cT\u003e(new T(args))",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will not leak a "
            ],
            [
              "T",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " object if allocation of "
            ],
            [
              "shared_ptr\u003cT\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " fails. However, it is advisable to use "
            ],
            [
              "make_shared\u003cT\u003e(args)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "allocate_shared\u003cT\u003e(alloc, args)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", which enable the implementation to optimize the memory allocation."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Warning:",
            "AttrFlags": 1
          },
          {
            "Text": " Constructing a "
          },
          {
            "Text": "shared_ptr",
            "AttrFlags": 2
          },
          {
            "Text": " might throw a "
          },
          {
            "Text": "bad_alloc",
            "AttrFlags": 2
          },
          {
            "Text": " exception when extra data for shared ownership semantics needs to be allocated. If the constructor is passed a regular pointer it assumes to own the object pointed to and calls the deleter if an exception is thrown. This means "
          },
          {
            "Text": "shared_ptr\u003cT\u003e(new T(args))",
            "AttrFlags": 2
          },
          {
            "Text": " will not leak a "
          },
          {
            "Text": "T",
            "AttrFlags": 2
          },
          {
            "Text": " object if allocation of "
          },
          {
            "Text": "shared_ptr\u003cT\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " fails. However, it is advisable to use "
          },
          {
            "Text": "make_shared\u003cT\u003e(args)",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "allocate_shared\u003cT\u003e(alloc, args)",
            "AttrFlags": 2
          },
          {
            "Text": ", which enable the implementation to optimize the memory allocation."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522025617,
        "id": "7e4fb1e2-854d-469a-a10d-ec40e7838364",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522025617,
        "parent_id": "98e9c06f-de8c-40a2-b8fc-b1a440076fa9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Allocating Arrays([]) using shared_ptr",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Allocating Arrays([]) using shared_ptr",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522025618,
        "id": "b8fcfb29-0d0c-4eca-b895-800618e4934b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522025618,
        "parent_id": "98e9c06f-de8c-40a2-b8fc-b1a440076fa9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Unfortunately, there is no direct way to allocate Arrays using "
            ],
            [
              "make_shared\u003c\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Unfortunately, there is no direct way to allocate Arrays using "
          },
          {
            "Text": "make_shared\u003c\u003e",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522025618,
        "id": "76f69d2e-548b-47c3-99a7-d94fa056f535",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522025618,
        "parent_id": "98e9c06f-de8c-40a2-b8fc-b1a440076fa9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It is possible to create arrays for "
            ],
            [
              "shared_ptr\u003c\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " using "
            ],
            [
              "new",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "std::default_delete",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It is possible to create arrays for "
          },
          {
            "Text": "shared_ptr\u003c\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " using "
          },
          {
            "Text": "new",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "std::default_delete",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522025618,
        "id": "a7facb7b-8875-47f0-8fed-38ac1f777fb2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522025618,
        "parent_id": "98e9c06f-de8c-40a2-b8fc-b1a440076fa9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For example, to allocate an array of 10 integers, we can write the code as"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For example, to allocate an array of 10 integers, we can write the code as"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522025618,
        "id": "38127e67-a9fc-4663-8d27-101babf51540",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550800980000,
        "parent_id": "98e9c06f-de8c-40a2-b8fc-b1a440076fa9",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "shared_ptr\u003cint\u003e sh(new int[10], std::default_delete\u003cint[]\u003e());"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "shared_ptr\u003cint\u003e sh(new int[10], std::default_delete\u003cint[]\u003e());",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522025618,
        "id": "122a403d-c68a-42b4-a334-5f16b6df1c02",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522025618,
        "parent_id": "98e9c06f-de8c-40a2-b8fc-b1a440076fa9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Specifying "
            ],
            [
              "std::default_delete",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is mandatory here to make sure that the allocated memory is correctly cleaned up using "
            ],
            [
              "delete[]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Specifying "
          },
          {
            "Text": "std::default_delete",
            "AttrFlags": 2
          },
          {
            "Text": " is mandatory here to make sure that the allocated memory is correctly cleaned up using "
          },
          {
            "Text": "delete[]",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522025618,
        "id": "4157cfdb-32d2-4134-8ac3-7ade0e0c1b81",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522025618,
        "parent_id": "98e9c06f-de8c-40a2-b8fc-b1a440076fa9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If we know the size at compile time, we can do it this way:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If we know the size at compile time, we can do it this way:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522025619,
        "id": "0640118a-335d-4b12-add7-881469dedbbb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550800980000,
        "parent_id": "98e9c06f-de8c-40a2-b8fc-b1a440076fa9",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "template\u003cclass Arr\u003e\nstruct shared_array_maker {};\ntemplate\u003cclass T, std::size_t N\u003e\nstruct shared_array_maker\u003cT[N]\u003e {\n  std::shared_ptr\u003cT\u003e operator()const{\n    auto r = std::make_shared\u003cstd::array\u003cT,N\u003e\u003e();\n    if (!r) return {};\n    return {r.data(), r};\n  }\n};\ntemplate\u003cclass Arr\u003e\nauto make_shared_array()\n-\u003e decltype( shared_array_maker\u003cArr\u003e{}() )\n{ return shared_array_maker\u003cArr\u003e{}(); }"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "template\u003cclass Arr\u003e\nstruct shared_array_maker {};\ntemplate\u003cclass T, std::size_t N\u003e\nstruct shared_array_maker\u003cT[N]\u003e {\n  std::shared_ptr\u003cT\u003e operator()const{\n    auto r = std::make_shared\u003cstd::array\u003cT,N\u003e\u003e();\n    if (!r) return {};\n    return {r.data(), r};\n  }\n};\ntemplate\u003cclass Arr\u003e\nauto make_shared_array()\n-\u003e decltype( shared_array_maker\u003cArr\u003e{}() )\n{ return shared_array_maker\u003cArr\u003e{}(); }",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522025619,
        "id": "358d6d44-88d7-4784-a079-48b42ede0daa",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522025619,
        "parent_id": "98e9c06f-de8c-40a2-b8fc-b1a440076fa9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "then "
            ],
            [
              "make_shared_array\u003cint[10]\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " returns a "
            ],
            [
              "shared_ptr\u003cint\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " pointing to 10 ints all default constructed."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "then "
          },
          {
            "Text": "make_shared_array\u003cint[10]\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " returns a "
          },
          {
            "Text": "shared_ptr\u003cint\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " pointing to 10 ints all default constructed."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522025619,
        "id": "c212756e-4316-4894-8c86-c6783097b745",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522025619,
        "parent_id": "98e9c06f-de8c-40a2-b8fc-b1a440076fa9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "With C++17, "
            ],
            [
              "shared_ptr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "gained special support",
              [
                [
                  "a",
                  "http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0414r2.html"
                ]
              ]
            ],
            [
              " for array types. It is no longer necessary to specify the array-deleter explicitly, and the shared pointer can be dereferenced using the "
            ],
            [
              "[]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " array index operator:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "With C++17, "
          },
          {
            "Text": "shared_ptr",
            "AttrFlags": 2
          },
          {
            "Text": " "
          },
          {
            "Text": "gained special support",
            "Link": "http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0414r2.html"
          },
          {
            "Text": " for array types. It is no longer necessary to specify the array-deleter explicitly, and the shared pointer can be dereferenced using the "
          },
          {
            "Text": "[]",
            "AttrFlags": 2
          },
          {
            "Text": " array index operator:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522025620,
        "id": "7329c92f-aab9-44c0-87b8-96140604caf1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550800980000,
        "parent_id": "98e9c06f-de8c-40a2-b8fc-b1a440076fa9",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "std::shared_ptr\u003cint[]\u003e sh(new int[10]);\nsh[0] = 42;"
            ]
          ]
        },
        "type": "code",
        "version": 4,
        "code": "std::shared_ptr\u003cint[]\u003e sh(new int[10]);\nsh[0] = 42;",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522025620,
        "id": "7bfd3d77-f22c-422a-8e31-0d244ddc19dc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522025620,
        "parent_id": "98e9c06f-de8c-40a2-b8fc-b1a440076fa9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Shared pointers can point to a sub-object of the object it owns:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Shared pointers can point to a sub-object of the object it owns:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522025620,
        "id": "3ec8c135-05cb-4825-8d3c-86be60726fa6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550800980000,
        "parent_id": "98e9c06f-de8c-40a2-b8fc-b1a440076fa9",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "struct Foo { int x; };\nstd::shared_ptr\u003cFoo\u003e p1 = std::make_shared\u003cFoo\u003e();\nstd::shared_ptr\u003cint\u003e p2(p1, \u0026p1-\u003ex);"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "struct Foo { int x; };\nstd::shared_ptr\u003cFoo\u003e p1 = std::make_shared\u003cFoo\u003e();\nstd::shared_ptr\u003cint\u003e p2(p1, \u0026p1-\u003ex);",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522025620,
        "id": "dfa45b57-6d8f-4b94-b73b-47b8d0d70cda",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522025620,
        "parent_id": "98e9c06f-de8c-40a2-b8fc-b1a440076fa9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Both "
            ],
            [
              "p2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "p1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " own the object of type "
            ],
            [
              "Foo",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", but "
            ],
            [
              "p2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " points to its "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " member "
            ],
            [
              "x",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". This means that if "
            ],
            [
              "p1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " goes out of scope or is reassigned, the underlying "
            ],
            [
              "Foo",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " object will still be alive, ensuring that "
            ],
            [
              "p2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " does not dangle."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Both "
          },
          {
            "Text": "p2",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "p1",
            "AttrFlags": 2
          },
          {
            "Text": " own the object of type "
          },
          {
            "Text": "Foo",
            "AttrFlags": 2
          },
          {
            "Text": ", but "
          },
          {
            "Text": "p2",
            "AttrFlags": 2
          },
          {
            "Text": " points to its "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": " member "
          },
          {
            "Text": "x",
            "AttrFlags": 2
          },
          {
            "Text": ". This means that if "
          },
          {
            "Text": "p1",
            "AttrFlags": 2
          },
          {
            "Text": " goes out of scope or is reassigned, the underlying "
          },
          {
            "Text": "Foo",
            "AttrFlags": 2
          },
          {
            "Text": " object will still be alive, ensuring that "
          },
          {
            "Text": "p2",
            "AttrFlags": 2
          },
          {
            "Text": " does not dangle."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550800980000,
        "id": "16b4d6a8-4c96-4086-8a7e-f01c41172678",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550800980000,
        "parent_id": "98e9c06f-de8c-40a2-b8fc-b1a440076fa9",
        "parent_table": "block",
        "type": "text",
        "version": 4
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522025621,
        "id": "aa200998-9cd3-4363-b836-7b0b7220dee7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522025621,
        "parent_id": "98e9c06f-de8c-40a2-b8fc-b1a440076fa9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Important:",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " A "
            ],
            [
              "shared_ptr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " only knows about itself and all other "
            ],
            [
              "shared_ptr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " that were created with the alias constructor. It does not know about any other pointers, including all other "
            ],
            [
              "shared_ptr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "s created with a reference to the same "
            ],
            [
              "Foo",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " instance:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Important:",
            "AttrFlags": 1
          },
          {
            "Text": " A "
          },
          {
            "Text": "shared_ptr",
            "AttrFlags": 2
          },
          {
            "Text": " only knows about itself and all other "
          },
          {
            "Text": "shared_ptr",
            "AttrFlags": 2
          },
          {
            "Text": " that were created with the alias constructor. It does not know about any other pointers, including all other "
          },
          {
            "Text": "shared_ptr",
            "AttrFlags": 2
          },
          {
            "Text": "s created with a reference to the same "
          },
          {
            "Text": "Foo",
            "AttrFlags": 2
          },
          {
            "Text": " instance:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522025621,
        "id": "09b2e5da-40e1-40a9-9c12-fc7ae73399e6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550800980000,
        "parent_id": "98e9c06f-de8c-40a2-b8fc-b1a440076fa9",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "Foo *foo = new Foo;\nstd::shared_ptr\u003cFoo\u003e shared1(foo);\nstd::shared_ptr\u003cFoo\u003e shared2(foo); // don't do this\n\nshared1.reset(); // this will delete foo, since shared1\n                 // was the only shared_ptr that owned it\n\nshared2-\u003etest(); // UNDEFINED BEHAVIOR: shared2's foo has been\n                 // deleted already!!"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "Foo *foo = new Foo;\nstd::shared_ptr\u003cFoo\u003e shared1(foo);\nstd::shared_ptr\u003cFoo\u003e shared2(foo); // don't do this\n\nshared1.reset(); // this will delete foo, since shared1\n                 // was the only shared_ptr that owned it\n\nshared2-\u003etest(); // UNDEFINED BEHAVIOR: shared2's foo has been\n                 // deleted already!!",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522025621,
        "id": "700230ac-2205-4059-a7fa-653145273fb3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522025621,
        "parent_id": "98e9c06f-de8c-40a2-b8fc-b1a440076fa9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Ownership Transfer of shared_ptr",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Ownership Transfer of shared_ptr",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522025621,
        "id": "0667e03d-129e-43d2-867e-718b4d1df8cf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522025621,
        "parent_id": "98e9c06f-de8c-40a2-b8fc-b1a440076fa9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "By default, "
            ],
            [
              "shared_ptr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " increments the reference count and doesn’t transfer the ownership. However, it can be made to transfer the ownership using "
            ],
            [
              "std::move",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "By default, "
          },
          {
            "Text": "shared_ptr",
            "AttrFlags": 2
          },
          {
            "Text": " increments the reference count and doesn’t transfer the ownership. However, it can be made to transfer the ownership using "
          },
          {
            "Text": "std::move",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522025621,
        "id": "7262e145-229b-49c0-bc64-1579849d2e26",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550800980000,
        "parent_id": "98e9c06f-de8c-40a2-b8fc-b1a440076fa9",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "shared_ptr\u003cint\u003e up = make_shared\u003cint\u003e();\n// Transferring the ownership\nshared_ptr\u003cint\u003e up2 = move(up);\n// At this point, the reference count of up = 0 and the\n// ownership of the pointer is solely with up2 with reference count = 1"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "shared_ptr\u003cint\u003e up = make_shared\u003cint\u003e();\n// Transferring the ownership\nshared_ptr\u003cint\u003e up2 = move(up);\n// At this point, the reference count of up = 0 and the\n// ownership of the pointer is solely with up2 with reference count = 1",
        "code_language": "C++"
      }
    ],
    "title": "Sharing ownership std::shared_ptr",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}