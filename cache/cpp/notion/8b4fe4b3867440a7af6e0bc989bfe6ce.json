{
  "ID": "8b4fe4b3-8674-40a7-af6e-0bc989bfe6ce",
  "Root": {
    "alive": true,
    "content": [
      "ec847551-5651-4acf-8555-4bfadf76e590",
      "68c42e24-35f1-4ad1-8ca5-217913273a5a",
      "0b7984b3-32e8-4900-aa59-c60e2c98af03",
      "ae1b92b0-f5f8-47df-a01e-e437f409f2fa",
      "f6f4ebf4-14eb-4f1e-86b3-98305a8a5d05",
      "1de82092-c2e3-474b-b224-2503717f9c99",
      "2b4de7fb-0f97-4a39-b880-e2261b0ba240",
      "5b6c76e6-4df7-4525-a645-c2abd6d10dc4",
      "a41318a5-4703-4bb6-9520-055ecf7a4601",
      "10428517-ed97-4302-8dde-714fe3d0166d",
      "419882a4-24fc-4f67-afd9-68d52bc16395",
      "c3ea3b01-90f8-443f-ac21-237fb4a111d3",
      "853ebe76-9451-4558-86a2-a52aa733d132",
      "90af3a95-743c-458f-b6e5-40a2baf59128",
      "06c61d7a-a8bc-4ba8-80cd-f7ca89bfe774",
      "6ab5b164-8b56-475f-b952-a0f439c6c356",
      "6c2eceb4-290b-425d-8418-32f66b644d3f",
      "3876c65e-22f7-4462-aae9-24a6ef1f3f22",
      "677a0969-7ac5-454f-862d-35c305ac3b3e",
      "b7f2952b-6858-431d-a6f3-be85ed933a54",
      "a17b0127-80c7-4fd8-938d-b5d34a0bb410",
      "686bc8a3-fee4-45b0-8cb0-043554120a88",
      "deb6367d-dbf1-4860-be95-e9afd7e16625",
      "1607cf1e-5fd1-4f11-bc64-7085218a5ee8",
      "296ec595-552d-4600-b88a-aedc49322e52"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522021552,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "8b4fe4b3-8674-40a7-af6e-0bc989bfe6ce",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550656140000,
    "parent_id": "40e8450d-4736-4ad0-be7d-a2d9307ddf4f",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Member Types and Aliases"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522021539,
        "id": "ec847551-5651-4acf-8555-4bfadf76e590",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522021539,
        "parent_id": "8b4fe4b3-8674-40a7-af6e-0bc989bfe6ce",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A "
            ],
            [
              "class",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "struct",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can also define member type aliases, which are type aliases contained within, and treated as members of, the class itself."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A "
          },
          {
            "Text": "class",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "struct",
            "AttrFlags": 2
          },
          {
            "Text": " can also define member type aliases, which are type aliases contained within, and treated as members of, the class itself."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522021542,
        "id": "68c42e24-35f1-4ad1-8ca5-217913273a5a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522021542,
        "parent_id": "8b4fe4b3-8674-40a7-af6e-0bc989bfe6ce",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "struct IHaveATypedef {\n    typedef int MyTypedef;\n};\n\nstruct IHaveATemplateTypedef {\n    template\u003ctypename T\u003e\n    using MyTemplateTypedef = std::vector\u003cT\u003e;\n};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "struct IHaveATypedef {\n    typedef int MyTypedef;\n};\n\nstruct IHaveATemplateTypedef {\n    template\u003ctypename T\u003e\n    using MyTemplateTypedef = std::vector\u003cT\u003e;\n};",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522021542,
        "id": "0b7984b3-32e8-4900-aa59-c60e2c98af03",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522021542,
        "parent_id": "8b4fe4b3-8674-40a7-af6e-0bc989bfe6ce",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Like static members, these typedefs are accessed using the scope operator, "
            ],
            [
              "::",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Like static members, these typedefs are accessed using the scope operator, "
          },
          {
            "Text": "::",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522021542,
        "id": "ae1b92b0-f5f8-47df-a01e-e437f409f2fa",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522021542,
        "parent_id": "8b4fe4b3-8674-40a7-af6e-0bc989bfe6ce",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "IHaveATypedef::MyTypedef i = 5; // i is an int.\n\nIHaveATemplateTypedef::MyTemplateTypedef\u003cint\u003e v; // v is a std::vector\u003cint\u003e."
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "IHaveATypedef::MyTypedef i = 5; // i is an int.\n\nIHaveATemplateTypedef::MyTemplateTypedef\u003cint\u003e v; // v is a std::vector\u003cint\u003e.",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522021542,
        "id": "f6f4ebf4-14eb-4f1e-86b3-98305a8a5d05",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522021542,
        "parent_id": "8b4fe4b3-8674-40a7-af6e-0bc989bfe6ce",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As with normal type aliases, each member type alias is allowed to refer to any type defined or aliased before, but not after, its definition. Likewise, a typedef outside the class definition can refer to any accessible typedefs within the class definition, provided it comes after the class definition."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "As with normal type aliases, each member type alias is allowed to refer to any type defined or aliased before, but not after, its definition. Likewise, a typedef outside the class definition can refer to any accessible typedefs within the class definition, provided it comes after the class definition."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522021542,
        "id": "1de82092-c2e3-474b-b224-2503717f9c99",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522021542,
        "parent_id": "8b4fe4b3-8674-40a7-af6e-0bc989bfe6ce",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "template\u003ctypename T\u003e\nstruct Helper {\n    T get() const { return static_cast\u003cT\u003e(42); }\n};\n\nstruct IHaveTypedefs {\n//    typedef MyTypedef NonLinearTypedef; // Error if uncommented.\n    typedef int MyTypedef;\n    typedef Helper\u003cMyTypedef\u003e MyTypedefHelper;\n};\n\nIHaveTypedefs::MyTypedef        i; // x_i is an int.\nIHaveTypedefs::MyTypedefHelper hi; // x_hi is a Helper\u003cint\u003e.\n\ntypedef IHaveTypedefs::MyTypedef TypedefBeFree;\nTypedefBeFree ii;                  // ii is an int."
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "template\u003ctypename T\u003e\nstruct Helper {\n    T get() const { return static_cast\u003cT\u003e(42); }\n};\n\nstruct IHaveTypedefs {\n//    typedef MyTypedef NonLinearTypedef; // Error if uncommented.\n    typedef int MyTypedef;\n    typedef Helper\u003cMyTypedef\u003e MyTypedefHelper;\n};\n\nIHaveTypedefs::MyTypedef        i; // x_i is an int.\nIHaveTypedefs::MyTypedefHelper hi; // x_hi is a Helper\u003cint\u003e.\n\ntypedef IHaveTypedefs::MyTypedef TypedefBeFree;\nTypedefBeFree ii;                  // ii is an int.",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522021543,
        "id": "2b4de7fb-0f97-4a39-b880-e2261b0ba240",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522021543,
        "parent_id": "8b4fe4b3-8674-40a7-af6e-0bc989bfe6ce",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Member type aliases can be declared with any access level, and will respect the appropriate access modifier."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Member type aliases can be declared with any access level, and will respect the appropriate access modifier."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522021543,
        "id": "5b6c76e6-4df7-4525-a645-c2abd6d10dc4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522021543,
        "parent_id": "8b4fe4b3-8674-40a7-af6e-0bc989bfe6ce",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class TypedefAccessLevels {\n    typedef int PrvInt;\n\n  protected:\n    typedef int ProInt;\n\n  public:\n    typedef int PubInt;\n};\n\nTypedefAccessLevels::PrvInt prv_i; // Error: TypedefAccessLevels::PrvInt is private.\nTypedefAccessLevels::ProInt pro_i; // Error: TypedefAccessLevels::ProInt is protected.\nTypedefAccessLevels::PubInt pub_i; // Good.\n\nclass Derived : public TypedefAccessLevels {\n    PrvInt prv_i; // Error: TypedefAccessLevels::PrvInt is private.\n    ProInt pro_i; // Good.\n    PubInt pub_i; // Good.\n};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class TypedefAccessLevels {\n    typedef int PrvInt;\n\n  protected:\n    typedef int ProInt;\n\n  public:\n    typedef int PubInt;\n};\n\nTypedefAccessLevels::PrvInt prv_i; // Error: TypedefAccessLevels::PrvInt is private.\nTypedefAccessLevels::ProInt pro_i; // Error: TypedefAccessLevels::ProInt is protected.\nTypedefAccessLevels::PubInt pub_i; // Good.\n\nclass Derived : public TypedefAccessLevels {\n    PrvInt prv_i; // Error: TypedefAccessLevels::PrvInt is private.\n    ProInt pro_i; // Good.\n    PubInt pub_i; // Good.\n};",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522021543,
        "id": "a41318a5-4703-4bb6-9520-055ecf7a4601",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522021543,
        "parent_id": "8b4fe4b3-8674-40a7-af6e-0bc989bfe6ce",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522021543,
        "id": "10428517-ed97-4302-8dde-714fe3d0166d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522021543,
        "parent_id": "8b4fe4b3-8674-40a7-af6e-0bc989bfe6ce",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This can be used to provide a level of abstraction, allowing a class’ designer to change its internal workings without breaking code that relies on it."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This can be used to provide a level of abstraction, allowing a class’ designer to change its internal workings without breaking code that relies on it."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522021543,
        "id": "419882a4-24fc-4f67-afd9-68d52bc16395",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522021543,
        "parent_id": "8b4fe4b3-8674-40a7-af6e-0bc989bfe6ce",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class Something {\n    friend class SomeComplexType;\n\n    short s;\n    // ...\n\n  public:\n    typedef SomeComplexType MyHelper;\n\n    MyHelper get_helper() const { return MyHelper(8, s, 19.5, \"shoe\", false); }\n\n    // ...\n};\n\n// ...\n\nSomething s;\nSomething::MyHelper hlp = s.get_helper();"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class Something {\n    friend class SomeComplexType;\n\n    short s;\n    // ...\n\n  public:\n    typedef SomeComplexType MyHelper;\n\n    MyHelper get_helper() const { return MyHelper(8, s, 19.5, \"shoe\", false); }\n\n    // ...\n};\n\n// ...\n\nSomething s;\nSomething::MyHelper hlp = s.get_helper();",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522021543,
        "id": "c3ea3b01-90f8-443f-ac21-237fb4a111d3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522021543,
        "parent_id": "8b4fe4b3-8674-40a7-af6e-0bc989bfe6ce",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In this situation, if the helper class is changed from "
            ],
            [
              "SomeComplexType",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to some other type, only the "
            ],
            [
              "typedef",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and the "
            ],
            [
              "friend",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " declaration would need to be modified; as long as the helper class provides the same functionality, any code that uses it as "
            ],
            [
              "Something::MyHelper",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " instead of specifying it by name will usually still work without any modifications. In this manner, we minimise the amount of code that needs to be modified when the underlying implementation is changed, such that the type name only needs to be changed in one location."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In this situation, if the helper class is changed from "
          },
          {
            "Text": "SomeComplexType",
            "AttrFlags": 2
          },
          {
            "Text": " to some other type, only the "
          },
          {
            "Text": "typedef",
            "AttrFlags": 2
          },
          {
            "Text": " and the "
          },
          {
            "Text": "friend",
            "AttrFlags": 2
          },
          {
            "Text": " declaration would need to be modified; as long as the helper class provides the same functionality, any code that uses it as "
          },
          {
            "Text": "Something::MyHelper",
            "AttrFlags": 2
          },
          {
            "Text": " instead of specifying it by name will usually still work without any modifications. In this manner, we minimise the amount of code that needs to be modified when the underlying implementation is changed, such that the type name only needs to be changed in one location."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522021550,
        "id": "853ebe76-9451-4558-86a2-a52aa733d132",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522021550,
        "parent_id": "8b4fe4b3-8674-40a7-af6e-0bc989bfe6ce",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This can also be combined with "
            ],
            [
              "decltype",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", if one so desires."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This can also be combined with "
          },
          {
            "Text": "decltype",
            "AttrFlags": 2
          },
          {
            "Text": ", if one so desires."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522021550,
        "id": "90af3a95-743c-458f-b6e5-40a2baf59128",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522021550,
        "parent_id": "8b4fe4b3-8674-40a7-af6e-0bc989bfe6ce",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class SomethingElse {\n    AnotherComplexType\u003cbool, int, SomeThirdClass\u003e helper;\n\n  public:\n    typedef decltype(helper) MyHelper;\n\n  private:\n    InternalVariable\u003cMyHelper\u003e ivh;\n\n    // ...\n\n  public:\n    MyHelper\u0026 get_helper() const { return helper; }\n\n    // ...\n};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class SomethingElse {\n    AnotherComplexType\u003cbool, int, SomeThirdClass\u003e helper;\n\n  public:\n    typedef decltype(helper) MyHelper;\n\n  private:\n    InternalVariable\u003cMyHelper\u003e ivh;\n\n    // ...\n\n  public:\n    MyHelper\u0026 get_helper() const { return helper; }\n\n    // ...\n};",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522021550,
        "id": "06c61d7a-a8bc-4ba8-80cd-f7ca89bfe774",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522021550,
        "parent_id": "8b4fe4b3-8674-40a7-af6e-0bc989bfe6ce",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In this situation, changing the implementation of "
            ],
            [
              "SomethingElse::helper",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will automatically change the typedef for us, due to "
            ],
            [
              "decltype",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". This minimises the number of modifications necessary when we want to change "
            ],
            [
              "helper",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", which minimises the risk of human error."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In this situation, changing the implementation of "
          },
          {
            "Text": "SomethingElse::helper",
            "AttrFlags": 2
          },
          {
            "Text": " will automatically change the typedef for us, due to "
          },
          {
            "Text": "decltype",
            "AttrFlags": 2
          },
          {
            "Text": ". This minimises the number of modifications necessary when we want to change "
          },
          {
            "Text": "helper",
            "AttrFlags": 2
          },
          {
            "Text": ", which minimises the risk of human error."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522021551,
        "id": "6ab5b164-8b56-475f-b952-a0f439c6c356",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522021551,
        "parent_id": "8b4fe4b3-8674-40a7-af6e-0bc989bfe6ce",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As with everything, however, this can be taken too far. If the typename is only used once or twice internally and zero times externally, for example, there’s no need to provide an alias for it. If it’s used hundreds or thousands of times throughout a project, or if it has a long enough name, then it can be useful to provide it as a typedef instead of always using it in absolute terms. One must balance forwards compatibility and convenience with the amount of unnecessary noise created."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "As with everything, however, this can be taken too far. If the typename is only used once or twice internally and zero times externally, for example, there’s no need to provide an alias for it. If it’s used hundreds or thousands of times throughout a project, or if it has a long enough name, then it can be useful to provide it as a typedef instead of always using it in absolute terms. One must balance forwards compatibility and convenience with the amount of unnecessary noise created."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522021551,
        "id": "6c2eceb4-290b-425d-8418-32f66b644d3f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522021551,
        "parent_id": "8b4fe4b3-8674-40a7-af6e-0bc989bfe6ce",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522021551,
        "id": "3876c65e-22f7-4462-aae9-24a6ef1f3f22",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522021551,
        "parent_id": "8b4fe4b3-8674-40a7-af6e-0bc989bfe6ce",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This can also be used with template classes, to provide access to the template parameters from outside the class."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This can also be used with template classes, to provide access to the template parameters from outside the class."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522021551,
        "id": "677a0969-7ac5-454f-862d-35c305ac3b3e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522021551,
        "parent_id": "8b4fe4b3-8674-40a7-af6e-0bc989bfe6ce",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "template\u003ctypename T\u003e\nclass SomeClass {\n    // ...\n\n  public:\n    typedef T MyParam;\n    MyParam getParam() { return static_cast\u003cT\u003e(42); }\n};\n\ntemplate\u003ctypename T\u003e\ntypename T::MyParam some_func(T\u0026 t) {\n    return t.getParam();\n}\n\nSomeClass\u003cint\u003e si;\nint i = some_func(si);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "template\u003ctypename T\u003e\nclass SomeClass {\n    // ...\n\n  public:\n    typedef T MyParam;\n    MyParam getParam() { return static_cast\u003cT\u003e(42); }\n};\n\ntemplate\u003ctypename T\u003e\ntypename T::MyParam some_func(T\u0026 t) {\n    return t.getParam();\n}\n\nSomeClass\u003cint\u003e si;\nint i = some_func(si);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522021551,
        "id": "b7f2952b-6858-431d-a6f3-be85ed933a54",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522021551,
        "parent_id": "8b4fe4b3-8674-40a7-af6e-0bc989bfe6ce",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This is commonly used with containers, which will usually provide their element type, and other helper types, as member type aliases. Most of the containers in the C++ standard library, for example, provide the following 12 helper types, along with any other special types they might need."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This is commonly used with containers, which will usually provide their element type, and other helper types, as member type aliases. Most of the containers in the C++ standard library, for example, provide the following 12 helper types, along with any other special types they might need."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522021551,
        "id": "a17b0127-80c7-4fd8-938d-b5d34a0bb410",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522021551,
        "parent_id": "8b4fe4b3-8674-40a7-af6e-0bc989bfe6ce",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "template\u003ctypename T\u003e\nclass SomeContainer {\n    // ...\n\n  public:\n    // Let's provide the same helper types as most standard containers.\n    typedef T                                     value_type;\n    typedef std::allocator\u003cvalue_type\u003e            allocator_type;\n    typedef value_type\u0026                           reference;\n    typedef const value_type\u0026                     const_reference;\n    typedef value_type*                           pointer;\n    typedef const value_type*                     const_pointer;\n    typedef MyIterator\u003cvalue_type\u003e                iterator;\n    typedef MyConstIterator\u003cvalue_type\u003e           const_iterator;\n    typedef std::reverse_iterator\u003citerator\u003e       reverse_iterator;\n    typedef std::reverse_iterator\u003cconst_iterator\u003e const_reverse_iterator;\n    typedef size_t                                size_type;\n    typedef ptrdiff_t                             difference_type;\n};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "template\u003ctypename T\u003e\nclass SomeContainer {\n    // ...\n\n  public:\n    // Let's provide the same helper types as most standard containers.\n    typedef T                                     value_type;\n    typedef std::allocator\u003cvalue_type\u003e            allocator_type;\n    typedef value_type\u0026                           reference;\n    typedef const value_type\u0026                     const_reference;\n    typedef value_type*                           pointer;\n    typedef const value_type*                     const_pointer;\n    typedef MyIterator\u003cvalue_type\u003e                iterator;\n    typedef MyConstIterator\u003cvalue_type\u003e           const_iterator;\n    typedef std::reverse_iterator\u003citerator\u003e       reverse_iterator;\n    typedef std::reverse_iterator\u003cconst_iterator\u003e const_reverse_iterator;\n    typedef size_t                                size_type;\n    typedef ptrdiff_t                             difference_type;\n};",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522021551,
        "id": "686bc8a3-fee4-45b0-8cb0-043554120a88",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522021551,
        "parent_id": "8b4fe4b3-8674-40a7-af6e-0bc989bfe6ce",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Prior to C++11, it was also commonly used to provide a “template "
            ],
            [
              "typedef",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "” of sorts, as the feature wasn’t yet available; these have become a bit less common with the introduction of alias templates, but are still useful in some situations (and are combined with alias templates in other situations, which can be very useful for obtaining individual components of a complex type such as a function pointer). They commonly use the name "
            ],
            [
              "type",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " for their type alias."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Prior to C++11, it was also commonly used to provide a “template "
          },
          {
            "Text": "typedef",
            "AttrFlags": 2
          },
          {
            "Text": "” of sorts, as the feature wasn’t yet available; these have become a bit less common with the introduction of alias templates, but are still useful in some situations (and are combined with alias templates in other situations, which can be very useful for obtaining individual components of a complex type such as a function pointer). They commonly use the name "
          },
          {
            "Text": "type",
            "AttrFlags": 2
          },
          {
            "Text": " for their type alias."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522021551,
        "id": "deb6367d-dbf1-4860-be95-e9afd7e16625",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522021551,
        "parent_id": "8b4fe4b3-8674-40a7-af6e-0bc989bfe6ce",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "template\u003ctypename T\u003e\nstruct TemplateTypedef {\n    typedef T type;\n}\n\nTemplateTypedef\u003cint\u003e::type i; // i is an int."
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "template\u003ctypename T\u003e\nstruct TemplateTypedef {\n    typedef T type;\n}\n\nTemplateTypedef\u003cint\u003e::type i; // i is an int.",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522021551,
        "id": "1607cf1e-5fd1-4f11-bc64-7085218a5ee8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522021551,
        "parent_id": "8b4fe4b3-8674-40a7-af6e-0bc989bfe6ce",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This was often used with types with multiple template parameters, to provide an alias that defines one or more of the parameters."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This was often used with types with multiple template parameters, to provide an alias that defines one or more of the parameters."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522021551,
        "id": "296ec595-552d-4600-b88a-aedc49322e52",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522021551,
        "parent_id": "8b4fe4b3-8674-40a7-af6e-0bc989bfe6ce",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "template\u003ctypename T, size_t SZ, size_t D\u003e\nclass Array { /* ... */ };\n\ntemplate\u003ctypename T, size_t SZ\u003e\nstruct OneDArray {\n    typedef Array\u003cT, SZ, 1\u003e type;\n};\n\ntemplate\u003ctypename T, size_t SZ\u003e\nstruct TwoDArray {\n    typedef Array\u003cT, SZ, 2\u003e type;\n};\n\ntemplate\u003ctypename T\u003e\nstruct MonoDisplayLine {\n    typedef Array\u003cT, 80, 1\u003e type;\n};\n\nOneDArray\u003cint, 3\u003e::type     arr1i; // arr1i is an Array\u003cint, 3, 1\u003e.\nTwoDArray\u003cshort, 5\u003e::type   arr2s; // arr2s is an Array\u003cshort, 5, 2\u003e.\nMonoDisplayLine\u003cchar\u003e::type arr3c; // arr3c is an Array\u003cchar, 80, 1\u003e."
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "template\u003ctypename T, size_t SZ, size_t D\u003e\nclass Array { /* ... */ };\n\ntemplate\u003ctypename T, size_t SZ\u003e\nstruct OneDArray {\n    typedef Array\u003cT, SZ, 1\u003e type;\n};\n\ntemplate\u003ctypename T, size_t SZ\u003e\nstruct TwoDArray {\n    typedef Array\u003cT, SZ, 2\u003e type;\n};\n\ntemplate\u003ctypename T\u003e\nstruct MonoDisplayLine {\n    typedef Array\u003cT, 80, 1\u003e type;\n};\n\nOneDArray\u003cint, 3\u003e::type     arr1i; // arr1i is an Array\u003cint, 3, 1\u003e.\nTwoDArray\u003cshort, 5\u003e::type   arr2s; // arr2s is an Array\u003cshort, 5, 2\u003e.\nMonoDisplayLine\u003cchar\u003e::type arr3c; // arr3c is an Array\u003cchar, 80, 1\u003e.",
        "code_language": "Plain Text"
      }
    ],
    "title": "Member Types and Aliases",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}