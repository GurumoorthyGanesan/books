{
  "ID": "0e4b34ce-e8c4-40a5-92d2-1e81d1b53478",
  "Root": {
    "alive": true,
    "content": [
      "78d7f4ab-535a-4066-880a-aaf158578f06",
      "65285a85-910f-48df-b454-ccf944f19ce4",
      "82484099-ebdd-4cb6-8370-b732b3e8348e",
      "9aba3d56-85cb-4163-8ff8-7a69e0a56b1b",
      "8e7d4c2f-98a2-45fa-afc1-50461a2ac512",
      "3dc20ed3-48bc-4564-bbf4-364ae5ac4a86",
      "8366458a-21d8-4df3-b2cc-ee2bc0c19a80",
      "a359e693-bf6a-4748-87fc-9e1632eb428b",
      "623517ee-1811-466f-9fb3-92897c9d2647",
      "e8d64f4c-b8e5-441e-8c25-cac370c618f7",
      "83475aff-3de7-4e12-8e5a-5a49a56eaf15",
      "53db4493-1fdf-4996-81d6-ff99da339453",
      "af64dea5-fa12-4bcc-910b-19767b45b177",
      "f40d4c9e-5bbd-4f12-8992-4568e8161202",
      "a10640ad-b49e-497e-8c96-c406a057154c",
      "fd48a946-93aa-438f-bcec-e9284d16699a",
      "295217df-5a03-4a10-b50d-e710f8a71630",
      "36a5d8a6-21c5-4111-b941-aadf48bcd784",
      "3a0e4364-b450-43b4-ab09-be4aed8f727e",
      "56880293-0e39-479c-98d0-b95139404174",
      "c47ae422-66aa-410d-9a29-3cb5eb14de2b",
      "85e2f70c-405a-4301-89bb-4906fdd2ed85",
      "52d30962-25ed-4683-a658-de760d54666c",
      "a582227b-7932-4483-96e9-714207d1ec8d",
      "be39ec00-083a-4f8b-82ea-106996c76762"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550524377103,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "0e4b34ce-e8c4-40a5-92d2-1e81d1b53478",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550780520000,
    "parent_id": "2457e2b5-2a2a-4489-9eac-adb5cebfd9b8",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Printing collections with iostream"
        ]
      ]
    },
    "type": "page",
    "version": 9,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524377096,
        "id": "78d7f4ab-535a-4066-880a-aaf158578f06",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524377096,
        "parent_id": "0e4b34ce-e8c4-40a5-92d2-1e81d1b53478",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Basic printing"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Basic printing"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524377099,
        "id": "65285a85-910f-48df-b454-ccf944f19ce4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524377099,
        "parent_id": "0e4b34ce-e8c4-40a5-92d2-1e81d1b53478",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "std::ostream_iterator",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " allows to print contents of an STL container to any output stream without explicit loops. The second argument of "
            ],
            [
              "std::ostream_iterator",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " constructor sets the delimiter. For example, the following code:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "std::ostream_iterator",
            "AttrFlags": 2
          },
          {
            "Text": " allows to print contents of an STL container to any output stream without explicit loops. The second argument of "
          },
          {
            "Text": "std::ostream_iterator",
            "AttrFlags": 2
          },
          {
            "Text": " constructor sets the delimiter. For example, the following code:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524377099,
        "id": "82484099-ebdd-4cb6-8370-b732b3e8348e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550780460000,
        "parent_id": "0e4b34ce-e8c4-40a5-92d2-1e81d1b53478",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "std::vector\u003cint\u003e v = {1,2,3,4};\nstd::copy(v.begin(), v.end(), std::ostream_iterator\u003cint\u003e(std::cout, \" ! \"));"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "std::vector\u003cint\u003e v = {1,2,3,4};\nstd::copy(v.begin(), v.end(), std::ostream_iterator\u003cint\u003e(std::cout, \" ! \"));",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524377100,
        "id": "9aba3d56-85cb-4163-8ff8-7a69e0a56b1b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524377100,
        "parent_id": "0e4b34ce-e8c4-40a5-92d2-1e81d1b53478",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "will print"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "will print"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524377100,
        "id": "8e7d4c2f-98a2-45fa-afc1-50461a2ac512",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524377100,
        "parent_id": "0e4b34ce-e8c4-40a5-92d2-1e81d1b53478",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "1 ! 2 ! 3 ! 4 !"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "1 ! 2 ! 3 ! 4 !",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524377100,
        "id": "3dc20ed3-48bc-4564-bbf4-364ae5ac4a86",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524377100,
        "parent_id": "0e4b34ce-e8c4-40a5-92d2-1e81d1b53478",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Implicit type cast"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Implicit type cast"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524377100,
        "id": "8366458a-21d8-4df3-b2cc-ee2bc0c19a80",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524377100,
        "parent_id": "0e4b34ce-e8c4-40a5-92d2-1e81d1b53478",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "std::ostream_iterator",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " allows to cast container’s content type implicitly. For example, let’s tune "
            ],
            [
              "std::cout",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to print floating-point values with 3 digits after decimal point:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "std::ostream_iterator",
            "AttrFlags": 2
          },
          {
            "Text": " allows to cast container’s content type implicitly. For example, let’s tune "
          },
          {
            "Text": "std::cout",
            "AttrFlags": 2
          },
          {
            "Text": " to print floating-point values with 3 digits after decimal point:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524377100,
        "id": "a359e693-bf6a-4748-87fc-9e1632eb428b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550780460000,
        "parent_id": "0e4b34ce-e8c4-40a5-92d2-1e81d1b53478",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "std::cout \u003c\u003c std::setprecision(3);\nstd::fixed(std::cout);"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "std::cout \u003c\u003c std::setprecision(3);\nstd::fixed(std::cout);",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524377101,
        "id": "623517ee-1811-466f-9fb3-92897c9d2647",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524377101,
        "parent_id": "0e4b34ce-e8c4-40a5-92d2-1e81d1b53478",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "and instantiate "
            ],
            [
              "std::ostream_iterator",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " with "
            ],
            [
              "float",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", while the contained values remain "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "and instantiate "
          },
          {
            "Text": "std::ostream_iterator",
            "AttrFlags": 2
          },
          {
            "Text": " with "
          },
          {
            "Text": "float",
            "AttrFlags": 2
          },
          {
            "Text": ", while the contained values remain "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524377101,
        "id": "e8d64f4c-b8e5-441e-8c25-cac370c618f7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550780460000,
        "parent_id": "0e4b34ce-e8c4-40a5-92d2-1e81d1b53478",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "std::vector\u003cint\u003e v = {1,2,3,4};\nstd::copy(v.begin(), v.end(), std::ostream_iterator\u003cfloat\u003e(std::cout, \" ! \"));"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "std::vector\u003cint\u003e v = {1,2,3,4};\nstd::copy(v.begin(), v.end(), std::ostream_iterator\u003cfloat\u003e(std::cout, \" ! \"));",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524377101,
        "id": "83475aff-3de7-4e12-8e5a-5a49a56eaf15",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524377101,
        "parent_id": "0e4b34ce-e8c4-40a5-92d2-1e81d1b53478",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "so the code above yields"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "so the code above yields"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524377101,
        "id": "53db4493-1fdf-4996-81d6-ff99da339453",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524377101,
        "parent_id": "0e4b34ce-e8c4-40a5-92d2-1e81d1b53478",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "1.000 ! 2.000 ! 3.000 ! 4.000 !"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "1.000 ! 2.000 ! 3.000 ! 4.000 !",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524377101,
        "id": "af64dea5-fa12-4bcc-910b-19767b45b177",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524377101,
        "parent_id": "0e4b34ce-e8c4-40a5-92d2-1e81d1b53478",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "despite "
            ],
            [
              "std::vector",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " holds "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "s."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "despite "
          },
          {
            "Text": "std::vector",
            "AttrFlags": 2
          },
          {
            "Text": " holds "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": "s."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524377101,
        "id": "f40d4c9e-5bbd-4f12-8992-4568e8161202",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524377101,
        "parent_id": "0e4b34ce-e8c4-40a5-92d2-1e81d1b53478",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Generation and transformation"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Generation and transformation"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524377101,
        "id": "a10640ad-b49e-497e-8c96-c406a057154c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524377101,
        "parent_id": "0e4b34ce-e8c4-40a5-92d2-1e81d1b53478",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "std::generate",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "std::generate_n",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "std::transform",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " functions provide a very powerful tool for on-the-fly data manipulation. For example, having a vector:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "std::generate",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "std::generate_n",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "std::transform",
            "AttrFlags": 2
          },
          {
            "Text": " functions provide a very powerful tool for on-the-fly data manipulation. For example, having a vector:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524377102,
        "id": "fd48a946-93aa-438f-bcec-e9284d16699a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550780460000,
        "parent_id": "0e4b34ce-e8c4-40a5-92d2-1e81d1b53478",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "std::vector\u003cint\u003e v = {1,2,3,4,8,16};"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "std::vector\u003cint\u003e v = {1,2,3,4,8,16};",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524377102,
        "id": "295217df-5a03-4a10-b50d-e710f8a71630",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524377102,
        "parent_id": "0e4b34ce-e8c4-40a5-92d2-1e81d1b53478",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "we can easily print boolean value of “x is even” statement for each element:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "we can easily print boolean value of “x is even” statement for each element:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524377102,
        "id": "36a5d8a6-21c5-4111-b941-aadf48bcd784",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550780460000,
        "parent_id": "0e4b34ce-e8c4-40a5-92d2-1e81d1b53478",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "std::boolalpha(std::cout); // print booleans alphabetically\nstd::transform(v.begin(), v.end(), std::ostream_iterator\u003cbool\u003e(std::cout, \" \"),\n[](int val) {\n    return (val % 2) == 0;\n});"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "std::boolalpha(std::cout); // print booleans alphabetically\nstd::transform(v.begin(), v.end(), std::ostream_iterator\u003cbool\u003e(std::cout, \" \"),\n[](int val) {\n    return (val % 2) == 0;\n});",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524377102,
        "id": "3a0e4364-b450-43b4-ab09-be4aed8f727e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524377102,
        "parent_id": "0e4b34ce-e8c4-40a5-92d2-1e81d1b53478",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "or print the squared element:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "or print the squared element:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524377102,
        "id": "56880293-0e39-479c-98d0-b95139404174",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550780460000,
        "parent_id": "0e4b34ce-e8c4-40a5-92d2-1e81d1b53478",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "std::transform(v.begin(), v.end(), std::ostream_iterator\u003cint\u003e(std::cout, \" \"),\n[](int val) {\n    return val * val;\n});"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "std::transform(v.begin(), v.end(), std::ostream_iterator\u003cint\u003e(std::cout, \" \"),\n[](int val) {\n    return val * val;\n});",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524377102,
        "id": "c47ae422-66aa-410d-9a29-3cb5eb14de2b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524377102,
        "parent_id": "0e4b34ce-e8c4-40a5-92d2-1e81d1b53478",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Printing N space-delimited random numbers:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Printing N space-delimited random numbers:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524377102,
        "id": "85e2f70c-405a-4301-89bb-4906fdd2ed85",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550780460000,
        "parent_id": "0e4b34ce-e8c4-40a5-92d2-1e81d1b53478",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "const int N = 10;\nstd::generate_n(std::ostream_iterator\u003cint\u003e(std::cout, \" \"), N, std::rand);"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "const int N = 10;\nstd::generate_n(std::ostream_iterator\u003cint\u003e(std::cout, \" \"), N, std::rand);",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524377102,
        "id": "52d30962-25ed-4683-a658-de760d54666c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524377102,
        "parent_id": "0e4b34ce-e8c4-40a5-92d2-1e81d1b53478",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Arrays"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Arrays"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524377102,
        "id": "a582227b-7932-4483-96e9-714207d1ec8d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524377102,
        "parent_id": "0e4b34ce-e8c4-40a5-92d2-1e81d1b53478",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As in the section about reading text files, almost all these considerations may be applied to native arrays. For example, let’s print squared values from a native array:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "As in the section about reading text files, almost all these considerations may be applied to native arrays. For example, let’s print squared values from a native array:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524377103,
        "id": "be39ec00-083a-4f8b-82ea-106996c76762",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550780460000,
        "parent_id": "0e4b34ce-e8c4-40a5-92d2-1e81d1b53478",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "int v[] = {1,2,3,4,8,16};\nstd::transform(v, std::end(v), std::ostream_iterator\u003cint\u003e(std::cout, \" \"),\n[](int val) {\n    return val * val;\n});"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "int v[] = {1,2,3,4,8,16};\nstd::transform(v, std::end(v), std::ostream_iterator\u003cint\u003e(std::cout, \" \"),\n[](int val) {\n    return val * val;\n});",
        "code_language": "C++"
      }
    ],
    "title": "Printing collections with iostream",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}