{
  "ID": "ae4e1a35-b731-4d81-a1c3-2dbe834ae36f",
  "Root": {
    "alive": true,
    "content": [
      "5cd33eea-dda4-4211-91da-ca3940c42627",
      "d8531e1d-5ffc-4a78-8b23-a5eba54731d8",
      "ae1b2056-3336-4c9e-bd99-8732243fdc3a",
      "c43bdc58-ced8-47b2-a014-34a78e2c5f1a",
      "f6c7e28c-18a6-41eb-bf07-6df39e85e335",
      "89bd14e1-26ee-493f-81a1-967191bd2842",
      "e1502a12-329b-4720-9be5-88927f30244a"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550523070426,
    "id": "ae4e1a35-b731-4d81-a1c3-2dbe834ae36f",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550523070426,
    "parent_id": "3724ad56-a879-48bf-847e-5adcfcb60c18",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "030 Dynamically sized raw array"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523070415,
        "id": "5cd33eea-dda4-4211-91da-ca3940c42627",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523070415,
        "parent_id": "ae4e1a35-b731-4d81-a1c3-2dbe834ae36f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// Example of raw dynamic size array. It's generally better to use std::vector.\n#include \u003calgorithm\u003e            // std::sort\n#include \u003ciostream\u003e\nusing namespace std;\n\nauto int_from( istream\u0026 in ) -\u003e int { int x; in \u003e\u003e x; return x; }\n\nauto main()\n    -\u003e int\n{\n    cout \u003c\u003c \"Sorting n integers provided by you.\\n\";\n    cout \u003c\u003c \"n? \";\n    int const   n   = int_from( cin );\n    int*        a   = new int[n];       // ← Allocation of array of n items.\n    \n    for( int i = 1; i \u003c= n; ++i )\n    {\n        cout \u003c\u003c \"The #\" \u003c\u003c i \u003c\u003c \" number, please: \";\n        a[i-1] = int_from( cin );\n    }\n\n    sort( a, a + n );\n    for( int i = 0; i \u003c n; ++i ) { cout \u003c\u003c a[i] \u003c\u003c ' '; }\n    cout \u003c\u003c '\\n';\n    \n    delete[] a;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// Example of raw dynamic size array. It's generally better to use std::vector.\n#include \u003calgorithm\u003e            // std::sort\n#include \u003ciostream\u003e\nusing namespace std;\n\nauto int_from( istream\u0026 in ) -\u003e int { int x; in \u003e\u003e x; return x; }\n\nauto main()\n    -\u003e int\n{\n    cout \u003c\u003c \"Sorting n integers provided by you.\\n\";\n    cout \u003c\u003c \"n? \";\n    int const   n   = int_from( cin );\n    int*        a   = new int[n];       // ← Allocation of array of n items.\n    \n    for( int i = 1; i \u003c= n; ++i )\n    {\n        cout \u003c\u003c \"The #\" \u003c\u003c i \u003c\u003c \" number, please: \";\n        a[i-1] = int_from( cin );\n    }\n\n    sort( a, a + n );\n    for( int i = 0; i \u003c n; ++i ) { cout \u003c\u003c a[i] \u003c\u003c ' '; }\n    cout \u003c\u003c '\\n';\n    \n    delete[] a;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523070418,
        "id": "d8531e1d-5ffc-4a78-8b23-a5eba54731d8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523070418,
        "parent_id": "ae4e1a35-b731-4d81-a1c3-2dbe834ae36f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A program that declares an array "
            ],
            [
              "T a[n];",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " where "
            ],
            [
              "n",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is determined a run-time, can compile with certain compilers that support C99 "
            ],
            [
              "variadic length arrays",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " (VLAs) as a language extension. But VLAs are not supported by standard C++. This example shows how to manually allocate a dynamic size array via a "
            ],
            [
              "new[]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "-expression,"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A program that declares an array "
          },
          {
            "Text": "T a[n];",
            "AttrFlags": 2
          },
          {
            "Text": " where "
          },
          {
            "Text": "n",
            "AttrFlags": 2
          },
          {
            "Text": " is determined a run-time, can compile with certain compilers that support C99 "
          },
          {
            "Text": "variadic length arrays",
            "AttrFlags": 4
          },
          {
            "Text": " (VLAs) as a language extension. But VLAs are not supported by standard C++. This example shows how to manually allocate a dynamic size array via a "
          },
          {
            "Text": "new[]",
            "AttrFlags": 2
          },
          {
            "Text": "-expression,"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523070418,
        "id": "ae1b2056-3336-4c9e-bd99-8732243fdc3a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523070418,
        "parent_id": "ae4e1a35-b731-4d81-a1c3-2dbe834ae36f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int*        a   = new int[n];       // ← Allocation of array of n items."
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int*        a   = new int[n];       // ← Allocation of array of n items.",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523070425,
        "id": "c43bdc58-ced8-47b2-a014-34a78e2c5f1a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523070425,
        "parent_id": "ae4e1a35-b731-4d81-a1c3-2dbe834ae36f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "… then use it, and finally deallocate it via a "
            ],
            [
              "delete[]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "-expression:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "… then use it, and finally deallocate it via a "
          },
          {
            "Text": "delete[]",
            "AttrFlags": 2
          },
          {
            "Text": "-expression:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523070425,
        "id": "f6c7e28c-18a6-41eb-bf07-6df39e85e335",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523070425,
        "parent_id": "ae4e1a35-b731-4d81-a1c3-2dbe834ae36f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "delete[] a;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "delete[] a;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523070425,
        "id": "89bd14e1-26ee-493f-81a1-967191bd2842",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523070425,
        "parent_id": "ae4e1a35-b731-4d81-a1c3-2dbe834ae36f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The array allocated here has indeterminate values, but it can be zero-initialized by just adding an empty parenthesis "
            ],
            [
              "()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", like this: "
            ],
            [
              "new int[n]()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". More generally, for arbitrary item type, this performs a "
            ],
            [
              "value-initialization",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The array allocated here has indeterminate values, but it can be zero-initialized by just adding an empty parenthesis "
          },
          {
            "Text": "()",
            "AttrFlags": 2
          },
          {
            "Text": ", like this: "
          },
          {
            "Text": "new int[n]()",
            "AttrFlags": 2
          },
          {
            "Text": ". More generally, for arbitrary item type, this performs a "
          },
          {
            "Text": "value-initialization",
            "AttrFlags": 4
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523070426,
        "id": "e1502a12-329b-4720-9be5-88927f30244a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523070426,
        "parent_id": "ae4e1a35-b731-4d81-a1c3-2dbe834ae36f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As part of a function down in a call hierarchy this code would not be exception safe, since an exception before the "
            ],
            [
              "delete[]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " expression (and after the "
            ],
            [
              "new[]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") would cause a memory leak. One way to address that issue is to automate the cleanup via e.g. a "
            ],
            [
              "std::unique_ptr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " smart pointer. But a generally better way to address it is to just use a "
            ],
            [
              "std::vector",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ": that’s what "
            ],
            [
              "std::vector",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is there for."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "As part of a function down in a call hierarchy this code would not be exception safe, since an exception before the "
          },
          {
            "Text": "delete[]",
            "AttrFlags": 2
          },
          {
            "Text": " expression (and after the "
          },
          {
            "Text": "new[]",
            "AttrFlags": 2
          },
          {
            "Text": ") would cause a memory leak. One way to address that issue is to automate the cleanup via e.g. a "
          },
          {
            "Text": "std::unique_ptr",
            "AttrFlags": 2
          },
          {
            "Text": " smart pointer. But a generally better way to address it is to just use a "
          },
          {
            "Text": "std::vector",
            "AttrFlags": 2
          },
          {
            "Text": ": that’s what "
          },
          {
            "Text": "std::vector",
            "AttrFlags": 2
          },
          {
            "Text": " is there for."
          }
        ]
      }
    ],
    "title": "030 Dynamically sized raw array"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}