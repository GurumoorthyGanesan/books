{
  "ID": "b5c7486b-fc10-428a-a72e-f834b5ecb340",
  "Root": {
    "alive": true,
    "content": [
      "5ce737c2-d471-475c-b8a9-dba5f694bfae",
      "9b88740f-bdff-4885-8a55-c084701bcbc5",
      "2da7cf04-d141-4392-b84d-d6c4cbe92fcb",
      "98842173-8438-4403-a6e1-d8647e46c836",
      "e2896fa0-0052-4247-8d34-76a8c2f03900",
      "cd5485f2-00e2-4905-8b86-5f7c4e34d526"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550525512669,
    "id": "b5c7486b-fc10-428a-a72e-f834b5ecb340",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550525512669,
    "parent_id": "83d53c9b-bf14-42a2-8fb8-238a2fcb905a",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "010 Calculating power in Olog n"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525512666,
        "id": "5ce737c2-d471-475c-b8a9-dba5f694bfae",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525512666,
        "parent_id": "b5c7486b-fc10-428a-a72e-f834b5ecb340",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This example shows an efficient way of calculating power using template metaprogramming."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This example shows an efficient way of calculating power using template metaprogramming."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525512668,
        "id": "9b88740f-bdff-4885-8a55-c084701bcbc5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525512668,
        "parent_id": "b5c7486b-fc10-428a-a72e-f834b5ecb340",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "template \u003cint base, unsigned int exponent\u003e\nstruct power\n{\n    static const int halfvalue = power\u003cbase, exponent / 2\u003e::value;\n    static const int value = halfvalue * halfvalue * power\u003cbase, exponent % 2\u003e::value;\n};\n\ntemplate \u003cint base\u003e\nstruct power\u003cbase, 0\u003e\n{\n   static const int value = 1;\n   static_assert(base != 0, \"power\u003c0, 0\u003e is not allowed\");\n};\n\n\ntemplate \u003cint base\u003e\nstruct power\u003cbase, 1\u003e\n{\n    static const int value = base;\n};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "template \u003cint base, unsigned int exponent\u003e\nstruct power\n{\n    static const int halfvalue = power\u003cbase, exponent / 2\u003e::value;\n    static const int value = halfvalue * halfvalue * power\u003cbase, exponent % 2\u003e::value;\n};\n\ntemplate \u003cint base\u003e\nstruct power\u003cbase, 0\u003e\n{\n   static const int value = 1;\n   static_assert(base != 0, \"power\u003c0, 0\u003e is not allowed\");\n};\n\n\ntemplate \u003cint base\u003e\nstruct power\u003cbase, 1\u003e\n{\n    static const int value = base;\n};",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525512669,
        "id": "2da7cf04-d141-4392-b84d-d6c4cbe92fcb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525512669,
        "parent_id": "b5c7486b-fc10-428a-a72e-f834b5ecb340",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Example Usage:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Example Usage:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525512669,
        "id": "98842173-8438-4403-a6e1-d8647e46c836",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525512669,
        "parent_id": "b5c7486b-fc10-428a-a72e-f834b5ecb340",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "std::cout \u003c\u003c power\u003c2, 9\u003e::value;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "std::cout \u003c\u003c power\u003c2, 9\u003e::value;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525512669,
        "id": "e2896fa0-0052-4247-8d34-76a8c2f03900",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525512669,
        "parent_id": "b5c7486b-fc10-428a-a72e-f834b5ecb340",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This one also handles negative exponents:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This one also handles negative exponents:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525512669,
        "id": "cd5485f2-00e2-4905-8b86-5f7c4e34d526",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525512669,
        "parent_id": "b5c7486b-fc10-428a-a72e-f834b5ecb340",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "template \u003cint base, int exponent\u003e\nstruct powerDouble\n{\n    static const int exponentAbs = exponent \u003c 0 ? (-exponent) : exponent;\n    static const int halfvalue = powerDouble\u003cbase, exponentAbs / 2\u003e::intermediateValue;\n    static const int intermediateValue = halfvalue * halfvalue * powerDouble\u003cbase, exponentAbs % 2\u003e::intermediateValue;\n\n    constexpr static double value = exponent \u003c 0 ? (1.0 / intermediateValue) : intermediateValue;\n\n};\n\ntemplate \u003cint base\u003e\nstruct powerDouble\u003cbase, 0\u003e\n{    \n    static const int intermediateValue = 1;\n    constexpr static double value = 1;\n    static_assert(base != 0, \"powerDouble\u003c0, 0\u003e is not allowed\");\n};\n\n\ntemplate \u003cint base\u003e\nstruct powerDouble\u003cbase, 1\u003e\n{\n    static const int intermediateValue = base;\n    constexpr static double value = base;\n};\n\n\nint main()\n{\n    std::cout \u003c\u003c powerDouble\u003c2,-3\u003e::value;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "template \u003cint base, int exponent\u003e\nstruct powerDouble\n{\n    static const int exponentAbs = exponent \u003c 0 ? (-exponent) : exponent;\n    static const int halfvalue = powerDouble\u003cbase, exponentAbs / 2\u003e::intermediateValue;\n    static const int intermediateValue = halfvalue * halfvalue * powerDouble\u003cbase, exponentAbs % 2\u003e::intermediateValue;\n\n    constexpr static double value = exponent \u003c 0 ? (1.0 / intermediateValue) : intermediateValue;\n\n};\n\ntemplate \u003cint base\u003e\nstruct powerDouble\u003cbase, 0\u003e\n{    \n    static const int intermediateValue = 1;\n    constexpr static double value = 1;\n    static_assert(base != 0, \"powerDouble\u003c0, 0\u003e is not allowed\");\n};\n\n\ntemplate \u003cint base\u003e\nstruct powerDouble\u003cbase, 1\u003e\n{\n    static const int intermediateValue = base;\n    constexpr static double value = base;\n};\n\n\nint main()\n{\n    std::cout \u003c\u003c powerDouble\u003c2,-3\u003e::value;\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "010 Calculating power in Olog n"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}