{
  "ID": "f64d5973-fc6f-46cf-97da-23010fecf04e",
  "Root": {
    "alive": true,
    "content": [
      "131249d6-03cd-4409-bebc-c2c50a1d2c66",
      "aaa6e107-9562-4872-8ccb-cd1b47c5823e",
      "1e342b27-3630-4d8a-a522-31b450d79185",
      "559a9738-3938-43c0-9bb0-5be74a8e0963",
      "ab80bea2-2ec5-424e-b0ad-fb74e503979a",
      "87ebffcc-0da7-4c91-a865-8334418c7707",
      "85c13c6b-1abe-4ff8-a429-86477439b9ee",
      "719afa6b-72b2-460b-a405-f214fce10103",
      "699d127b-11ec-4a8d-9586-23258dbd0596"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550521957459,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "f64d5973-fc6f-46cf-97da-23010fecf04e",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550656680000,
    "parent_id": "cbd900b3-1684-4f0d-977a-5a5b2a20aff3",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Iterating over a parameter pack"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521957445,
        "id": "131249d6-03cd-4409-bebc-c2c50a1d2c66",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521957445,
        "parent_id": "f64d5973-fc6f-46cf-97da-23010fecf04e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Often, we need to perform an operation over every element in a variadic template parameter pack. There are many ways to do this, and the solutions get easier to read and write with C++17. Suppose we simply want to print every element in a pack. The simplest solution is to recurse:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Often, we need to perform an operation over every element in a variadic template parameter pack. There are many ways to do this, and the solutions get easier to read and write with C++17. Suppose we simply want to print every element in a pack. The simplest solution is to recurse:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521957446,
        "id": "aaa6e107-9562-4872-8ccb-cd1b47c5823e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521957446,
        "parent_id": "f64d5973-fc6f-46cf-97da-23010fecf04e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "void print_all(std::ostream\u0026 os) {\n    // base case\n}\n\ntemplate \u003cclass T, class... Ts\u003e\nvoid print_all(std::ostream\u0026 os, T const\u0026 first, Ts const\u0026... rest) {\n    os \u003c\u003c first;\n    \n    print_all(os, rest...);\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "void print_all(std::ostream\u0026 os) {\n    // base case\n}\n\ntemplate \u003cclass T, class... Ts\u003e\nvoid print_all(std::ostream\u0026 os, T const\u0026 first, Ts const\u0026... rest) {\n    os \u003c\u003c first;\n    \n    print_all(os, rest...);\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521957446,
        "id": "1e342b27-3630-4d8a-a522-31b450d79185",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521957446,
        "parent_id": "f64d5973-fc6f-46cf-97da-23010fecf04e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We could instead use the expander trick, to perform all the streaming in a single function. This has the advantage of not needing a second overload, but has the disadvantage of less than stellar readability:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "We could instead use the expander trick, to perform all the streaming in a single function. This has the advantage of not needing a second overload, but has the disadvantage of less than stellar readability:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521957446,
        "id": "559a9738-3938-43c0-9bb0-5be74a8e0963",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521957446,
        "parent_id": "f64d5973-fc6f-46cf-97da-23010fecf04e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "template \u003cclass... Ts\u003e\nvoid print_all(std::ostream\u0026 os, Ts const\u0026... args) {\n    using expander = int[];\n    (void)expander{0,\n        (void(os \u003c\u003c args), 0)...\n    };\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "template \u003cclass... Ts\u003e\nvoid print_all(std::ostream\u0026 os, Ts const\u0026... args) {\n    using expander = int[];\n    (void)expander{0,\n        (void(os \u003c\u003c args), 0)...\n    };\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521957447,
        "id": "ab80bea2-2ec5-424e-b0ad-fb74e503979a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521957447,
        "parent_id": "f64d5973-fc6f-46cf-97da-23010fecf04e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For an explanation of how this works, see "
            ],
            [
              "T.C’s excellent answer",
              [
                [
                  "a",
                  "http://stackoverflow.com/a/25683817/2069064"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For an explanation of how this works, see "
          },
          {
            "Text": "T.C’s excellent answer",
            "Link": "http://stackoverflow.com/a/25683817/2069064"
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521957458,
        "id": "87ebffcc-0da7-4c91-a865-8334418c7707",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521957458,
        "parent_id": "f64d5973-fc6f-46cf-97da-23010fecf04e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "With C++17, we get two powerful new tools in our arsenal for solving this problem. The first is a fold-expression:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "With C++17, we get two powerful new tools in our arsenal for solving this problem. The first is a fold-expression:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521957459,
        "id": "85c13c6b-1abe-4ff8-a429-86477439b9ee",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521957459,
        "parent_id": "f64d5973-fc6f-46cf-97da-23010fecf04e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "template \u003cclass... Ts\u003e\nvoid print_all(std::ostream\u0026 os, Ts const\u0026... args) {\n    ((os \u003c\u003c args), ...);\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "template \u003cclass... Ts\u003e\nvoid print_all(std::ostream\u0026 os, Ts const\u0026... args) {\n    ((os \u003c\u003c args), ...);\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521957459,
        "id": "719afa6b-72b2-460b-a405-f214fce10103",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521957459,
        "parent_id": "f64d5973-fc6f-46cf-97da-23010fecf04e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "And the second is "
            ],
            [
              "if constexpr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", which allows us to write our original recursive solution in a single function:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "And the second is "
          },
          {
            "Text": "if constexpr",
            "AttrFlags": 2
          },
          {
            "Text": ", which allows us to write our original recursive solution in a single function:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521957459,
        "id": "699d127b-11ec-4a8d-9586-23258dbd0596",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521957459,
        "parent_id": "f64d5973-fc6f-46cf-97da-23010fecf04e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "template \u003cclass T, class... Ts\u003e\nvoid print_all(std::ostream\u0026 os, T const\u0026 first, Ts const\u0026... rest) {\n    os \u003c\u003c first;\n\n    if constexpr (sizeof...(rest) \u003e 0) {        \n        // this line will only be instantiated if there are further\n        // arguments. if rest... is empty, there will be no call to\n        // print_all(os). \n        print_all(os, rest...);\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "template \u003cclass T, class... Ts\u003e\nvoid print_all(std::ostream\u0026 os, T const\u0026 first, Ts const\u0026... rest) {\n    os \u003c\u003c first;\n\n    if constexpr (sizeof...(rest) \u003e 0) {        \n        // this line will only be instantiated if there are further\n        // arguments. if rest... is empty, there will be no call to\n        // print_all(os). \n        print_all(os, rest...);\n    }\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "Iterating over a parameter pack",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}