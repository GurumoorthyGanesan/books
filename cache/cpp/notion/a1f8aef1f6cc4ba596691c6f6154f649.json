{
  "ID": "a1f8aef1-f6cc-4ba5-9669-1c6f6154f649",
  "Root": {
    "alive": true,
    "content": [
      "d96be82d-2d2d-46f1-afab-bede9ca3e7a0",
      "81d275d4-3b8a-46c6-b654-9c994fd1c3df",
      "b26fe260-2321-4532-875b-e3f9668764ee",
      "30f7fd2b-0132-46aa-a648-8e642caf5eb3"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550523501097,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "a1f8aef1-f6cc-4ba5-9669-1c6f6154f649",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551687693004,
    "parent_id": "f6be37ea-b1ea-4d12-902e-1e55a74f3c28",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Empty Base Class Optimization"
        ]
      ]
    },
    "type": "page",
    "version": 4,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523501093,
        "id": "d96be82d-2d2d-46f1-afab-bede9ca3e7a0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523501093,
        "parent_id": "a1f8aef1-f6cc-4ba5-9669-1c6f6154f649",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "An object cannot occupy less than 1 byte, as then the members of an array of this type would have the same address. Thus "
            ],
            [
              "sizeof(T)\u003e=1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " always holds. It's also true that a derived class cannot be smaller than "
            ],
            [
              "any of",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " its base classes. However, when the base class is empty, its size is not necessarily added to the derived class:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "An object cannot occupy less than 1 byte, as then the members of an array of this type would have the same address. Thus "
          },
          {
            "Text": "sizeof(T)\u003e=1",
            "AttrFlags": 2
          },
          {
            "Text": " always holds. It's also true that a derived class cannot be smaller than "
          },
          {
            "Text": "any of",
            "AttrFlags": 4
          },
          {
            "Text": " its base classes. However, when the base class is empty, its size is not necessarily added to the derived class:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523501096,
        "id": "81d275d4-3b8a-46c6-b654-9c994fd1c3df",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523501096,
        "parent_id": "a1f8aef1-f6cc-4ba5-9669-1c6f6154f649",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class Base {};\n\nclass Derived : public Base\n{\npublic:\n    int i;\n};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class Base {};\n\nclass Derived : public Base\n{\npublic:\n    int i;\n};",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523501096,
        "id": "b26fe260-2321-4532-875b-e3f9668764ee",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523501096,
        "parent_id": "a1f8aef1-f6cc-4ba5-9669-1c6f6154f649",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In this case, it's not required to allocate a byte for "
            ],
            [
              "Base",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " within "
            ],
            [
              "Derived",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to have a distinct address per type per object. If empty base class optimization is performed (and no padding is required), then "
            ],
            [
              "sizeof(Derived) == sizeof(int)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", that is, no additional allocation is done for the empty base. This is possible with multiple base classes as well (in C++, multiple bases cannot have the same type, so no issues arise from that)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In this case, it's not required to allocate a byte for "
          },
          {
            "Text": "Base",
            "AttrFlags": 2
          },
          {
            "Text": " within "
          },
          {
            "Text": "Derived",
            "AttrFlags": 2
          },
          {
            "Text": " to have a distinct address per type per object. If empty base class optimization is performed (and no padding is required), then "
          },
          {
            "Text": "sizeof(Derived) == sizeof(int)",
            "AttrFlags": 2
          },
          {
            "Text": ", that is, no additional allocation is done for the empty base. This is possible with multiple base classes as well (in C++, multiple bases cannot have the same type, so no issues arise from that)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523501096,
        "id": "30f7fd2b-0132-46aa-a648-8e642caf5eb3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523501096,
        "parent_id": "a1f8aef1-f6cc-4ba5-9669-1c6f6154f649",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note that this can only be performed if the first member of "
            ],
            [
              "Derived",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " differs in type from any of the base classes. This includes any direct or indirect common bases. If it's the same type as one of the bases (or there's a common base), at least allocating a single byte is required to ensure that no two distinct objects of the same type have the same address."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note that this can only be performed if the first member of "
          },
          {
            "Text": "Derived",
            "AttrFlags": 2
          },
          {
            "Text": " differs in type from any of the base classes. This includes any direct or indirect common bases. If it's the same type as one of the bases (or there's a common base), at least allocating a single byte is required to ensure that no two distinct objects of the same type have the same address."
          }
        ]
      }
    ],
    "title": "Empty Base Class Optimization",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}