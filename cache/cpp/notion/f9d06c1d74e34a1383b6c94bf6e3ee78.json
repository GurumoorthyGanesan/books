{
  "ID": "f9d06c1d-74e3-4a13-83b6-c94bf6e3ee78",
  "Root": {
    "alive": true,
    "content": [
      "4b62ce7e-e847-416d-99b4-100578296f0f",
      "56dc7990-cc91-480f-9a23-947aa0bb1d6d",
      "2dbf6934-b33e-4357-ada5-24a6cb9b52b8",
      "fea5cb60-29e1-4692-8d1c-a5feeacb2cf7",
      "7e678577-705c-43cd-9986-853e09d8b82f",
      "1368b3b8-cb1e-44bd-901e-85c737729c6d",
      "957c6164-429c-4f14-9447-4ef1cbbdc3bf",
      "36869fe6-5f46-4a7e-a187-6f7cfbcd0349",
      "82e57af0-72c2-4c64-ad00-76e10d78a287",
      "d317a79e-2bb2-4b29-8248-e29886241fd3"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522706501,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "f9d06c1d-74e3-4a13-83b6-c94bf6e3ee78",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550710860000,
    "parent_id": "263edcef-95ee-480a-8c67-1e74662a250a",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "std::function overhead"
        ]
      ]
    },
    "type": "page",
    "version": 19,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522706496,
        "id": "4b62ce7e-e847-416d-99b4-100578296f0f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522706496,
        "parent_id": "f9d06c1d-74e3-4a13-83b6-c94bf6e3ee78",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "std::function",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can cause significant overhead. Because "
            ],
            [
              "std::function",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " has [value semantics][1], it must copy or move the given callable into itself. But since it can take callables of an arbitrary type, it will frequently have to allocate memory dynamically to do this."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "std::function",
            "AttrFlags": 2
          },
          {
            "Text": " can cause significant overhead. Because "
          },
          {
            "Text": "std::function",
            "AttrFlags": 2
          },
          {
            "Text": " has [value semantics][1], it must copy or move the given callable into itself. But since it can take callables of an arbitrary type, it will frequently have to allocate memory dynamically to do this."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522706498,
        "id": "56dc7990-cc91-480f-9a23-947aa0bb1d6d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522706498,
        "parent_id": "f9d06c1d-74e3-4a13-83b6-c94bf6e3ee78",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Some "
            ],
            [
              "function",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " implementations have so-called “small object optimization”, where small types (like function pointers, member pointers, or functors with very little state) will be stored directly in the "
            ],
            [
              "function",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " object. But even this only works if the type is "
            ],
            [
              "noexcept",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " move constructible. Furthermore, the C++ standard does not require that all implementations provide one."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Some "
          },
          {
            "Text": "function",
            "AttrFlags": 2
          },
          {
            "Text": " implementations have so-called “small object optimization”, where small types (like function pointers, member pointers, or functors with very little state) will be stored directly in the "
          },
          {
            "Text": "function",
            "AttrFlags": 2
          },
          {
            "Text": " object. But even this only works if the type is "
          },
          {
            "Text": "noexcept",
            "AttrFlags": 2
          },
          {
            "Text": " move constructible. Furthermore, the C++ standard does not require that all implementations provide one."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522706499,
        "id": "2dbf6934-b33e-4357-ada5-24a6cb9b52b8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522706499,
        "parent_id": "f9d06c1d-74e3-4a13-83b6-c94bf6e3ee78",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Consider the following:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Consider the following:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522706499,
        "id": "fea5cb60-29e1-4692-8d1c-a5feeacb2cf7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550710860000,
        "parent_id": "f9d06c1d-74e3-4a13-83b6-c94bf6e3ee78",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "//Header file\nusing MyPredicate = std::function\u003cbool(const MyValue \u0026, const MyValue \u0026)\u003e;\n\nvoid SortMyContainer(MyContainer \u0026C, const MyPredicate \u0026pred);\n\n//Source file\nvoid SortMyContainer(MyContainer \u0026C, const MyPredicate \u0026pred)\n{\n    std::sort(C.begin(), C.end(), pred);\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "//Header file\nusing MyPredicate = std::function\u003cbool(const MyValue \u0026, const MyValue \u0026)\u003e;\n\nvoid SortMyContainer(MyContainer \u0026C, const MyPredicate \u0026pred);\n\n//Source file\nvoid SortMyContainer(MyContainer \u0026C, const MyPredicate \u0026pred)\n{\n    std::sort(C.begin(), C.end(), pred);\n}",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522706499,
        "id": "7e678577-705c-43cd-9986-853e09d8b82f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522706499,
        "parent_id": "f9d06c1d-74e3-4a13-83b6-c94bf6e3ee78",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A template parameter would be the preferred solution for "
            ],
            [
              "SortMyContainer",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", but let us assume that this is not possible or desirable for whatever reason. "
            ],
            [
              "SortMyContainer",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " does not need to store "
            ],
            [
              "pred",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " beyond its own call. And yet, "
            ],
            [
              "pred",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " may well allocate memory if the functor given to it is of some non-trivial size."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A template parameter would be the preferred solution for "
          },
          {
            "Text": "SortMyContainer",
            "AttrFlags": 2
          },
          {
            "Text": ", but let us assume that this is not possible or desirable for whatever reason. "
          },
          {
            "Text": "SortMyContainer",
            "AttrFlags": 2
          },
          {
            "Text": " does not need to store "
          },
          {
            "Text": "pred",
            "AttrFlags": 2
          },
          {
            "Text": " beyond its own call. And yet, "
          },
          {
            "Text": "pred",
            "AttrFlags": 2
          },
          {
            "Text": " may well allocate memory if the functor given to it is of some non-trivial size."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522706500,
        "id": "1368b3b8-cb1e-44bd-901e-85c737729c6d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522706500,
        "parent_id": "f9d06c1d-74e3-4a13-83b6-c94bf6e3ee78",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "function",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " allocates memory because it needs something to copy/move into; "
            ],
            [
              "function",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " takes ownership of the callable it is given. But "
            ],
            [
              "SortMyContainer",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " does not need to "
            ],
            [
              "own",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " the callable; it’s just referencing it. So using "
            ],
            [
              "function",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " here is overkill; it may be efficient, but it may not."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "function",
            "AttrFlags": 2
          },
          {
            "Text": " allocates memory because it needs something to copy/move into; "
          },
          {
            "Text": "function",
            "AttrFlags": 2
          },
          {
            "Text": " takes ownership of the callable it is given. But "
          },
          {
            "Text": "SortMyContainer",
            "AttrFlags": 2
          },
          {
            "Text": " does not need to "
          },
          {
            "Text": "own",
            "AttrFlags": 4
          },
          {
            "Text": " the callable; it’s just referencing it. So using "
          },
          {
            "Text": "function",
            "AttrFlags": 2
          },
          {
            "Text": " here is overkill; it may be efficient, but it may not."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522706500,
        "id": "957c6164-429c-4f14-9447-4ef1cbbdc3bf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522706500,
        "parent_id": "f9d06c1d-74e3-4a13-83b6-c94bf6e3ee78",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "There is no standard library function type that merely references a callable. So an alternate solution will have to be found, or you can choose to live with the overhead."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "There is no standard library function type that merely references a callable. So an alternate solution will have to be found, or you can choose to live with the overhead."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522706500,
        "id": "36869fe6-5f46-4a7e-a187-6f7cfbcd0349",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522706500,
        "parent_id": "f9d06c1d-74e3-4a13-83b6-c94bf6e3ee78",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Also, "
            ],
            [
              "function",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " has no effective means to control where the memory allocations for the object come from. Yes, it has constructors that take an "
            ],
            [
              "allocator",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", but [many implementations do not implement them correctly… or even "
            ],
            [
              "at all",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              "][2]."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Also, "
          },
          {
            "Text": "function",
            "AttrFlags": 2
          },
          {
            "Text": " has no effective means to control where the memory allocations for the object come from. Yes, it has constructors that take an "
          },
          {
            "Text": "allocator",
            "AttrFlags": 2
          },
          {
            "Text": ", but [many implementations do not implement them correctly… or even "
          },
          {
            "Text": "at all",
            "AttrFlags": 4
          },
          {
            "Text": "][2]."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522706500,
        "id": "82e57af0-72c2-4c64-ad00-76e10d78a287",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522706500,
        "parent_id": "f9d06c1d-74e3-4a13-83b6-c94bf6e3ee78",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "function",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " constructors that take an "
            ],
            [
              "allocator",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " no longer are part of the type. Therefore, there is no way to manage the allocation."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "function",
            "AttrFlags": 2
          },
          {
            "Text": " constructors that take an "
          },
          {
            "Text": "allocator",
            "AttrFlags": 2
          },
          {
            "Text": " no longer are part of the type. Therefore, there is no way to manage the allocation."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522706501,
        "id": "d317a79e-2bb2-4b29-8248-e29886241fd3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522706501,
        "parent_id": "f9d06c1d-74e3-4a13-83b6-c94bf6e3ee78",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Calling a "
            ],
            [
              "function",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is also slower than calling the contents directly. Since any "
            ],
            [
              "function",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " instance could hold any callable, the call through a "
            ],
            [
              "function",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " must be indirect. The overhead of calling "
            ],
            [
              "function",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is on the order of a virtual function call."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Calling a "
          },
          {
            "Text": "function",
            "AttrFlags": 2
          },
          {
            "Text": " is also slower than calling the contents directly. Since any "
          },
          {
            "Text": "function",
            "AttrFlags": 2
          },
          {
            "Text": " instance could hold any callable, the call through a "
          },
          {
            "Text": "function",
            "AttrFlags": 2
          },
          {
            "Text": " must be indirect. The overhead of calling "
          },
          {
            "Text": "function",
            "AttrFlags": 2
          },
          {
            "Text": " is on the order of a virtual function call."
          }
        ]
      }
    ],
    "title": "std::function overhead",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}