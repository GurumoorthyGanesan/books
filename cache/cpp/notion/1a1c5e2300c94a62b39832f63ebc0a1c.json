{
  "ID": "1a1c5e23-00c9-4a62-b398-32f63ebc0a1c",
  "Root": {
    "alive": true,
    "content": [
      "0c147843-c03f-43c7-bf51-c6cd61b2535b",
      "2ac650ae-d5e2-4342-9158-2c151a45e650",
      "549d1aa5-730e-4782-9842-9d92c5e52e8c"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550523443618,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "1a1c5e23-00c9-4a62-b398-32f63ebc0a1c",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550736060000,
    "parent_id": "9582f39a-18d4-4387-a429-d2d9d9c1c0a3",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Unary Operators"
        ]
      ]
    },
    "type": "page",
    "version": 11,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523443615,
        "id": "0c147843-c03f-43c7-bf51-c6cd61b2535b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523443615,
        "parent_id": "1a1c5e23-00c9-4a62-b398-32f63ebc0a1c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Unary operators act on the object upon which they are called and have high precedence. (See Remarks)"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Unary operators act on the object upon which they are called and have high precedence. (See Remarks)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523443618,
        "id": "2ac650ae-d5e2-4342-9158-2c151a45e650",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523443618,
        "parent_id": "1a1c5e23-00c9-4a62-b398-32f63ebc0a1c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When used postfix, the action occurs only after the entire operation is evaluated, leading to some interesting arithmetics:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When used postfix, the action occurs only after the entire operation is evaluated, leading to some interesting arithmetics:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523443618,
        "id": "549d1aa5-730e-4782-9842-9d92c5e52e8c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550736060000,
        "parent_id": "1a1c5e23-00c9-4a62-b398-32f63ebc0a1c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "int a = 1;\n++a;            // result: 2\na--;            // result: 1\nint minusa=-a;  // result: -1\n\nbool b = true;\n!b; // result: true\n\na=4;\nint c = a++/2;      // equal to: (a==4) 4 / 2   result: 2 ('a' incremented postfix)\ncout \u003c\u003c a \u003c\u003c endl;  // prints 5!\nint d = ++a/2;      // equal to: (a+1) == 6 / 2 result: 3\n\nint arr[4] =  {1,2,3,4};\n\nint *ptr1 = \u0026arr[0];    // points to arr[0] which is 1\nint *ptr2 = ptr1++;     // ptr2 points to arr[0] which is still 1; ptr1 incremented\nstd::cout \u003c\u003c *ptr1++ \u003c\u003c std::endl;  // prints  2\n\nint e = arr[0]++;       // receives the value of arr[0] before it is incremented\nstd::cout \u003c\u003c e \u003c\u003c std::endl;      // prints 1\nstd::cout \u003c\u003c *ptr2 \u003c\u003c std::endl;  // prints arr[0] which is now 2"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "int a = 1;\n++a;            // result: 2\na--;            // result: 1\nint minusa=-a;  // result: -1\n\nbool b = true;\n!b; // result: true\n\na=4;\nint c = a++/2;      // equal to: (a==4) 4 / 2   result: 2 ('a' incremented postfix)\ncout \u003c\u003c a \u003c\u003c endl;  // prints 5!\nint d = ++a/2;      // equal to: (a+1) == 6 / 2 result: 3\n\nint arr[4] =  {1,2,3,4};\n\nint *ptr1 = \u0026arr[0];    // points to arr[0] which is 1\nint *ptr2 = ptr1++;     // ptr2 points to arr[0] which is still 1; ptr1 incremented\nstd::cout \u003c\u003c *ptr1++ \u003c\u003c std::endl;  // prints  2\n\nint e = arr[0]++;       // receives the value of arr[0] before it is incremented\nstd::cout \u003c\u003c e \u003c\u003c std::endl;      // prints 1\nstd::cout \u003c\u003c *ptr2 \u003c\u003c std::endl;  // prints arr[0] which is now 2",
        "code_language": "C++"
      }
    ],
    "title": "Unary Operators",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}