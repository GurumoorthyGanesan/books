{
  "ID": "317f96c5-1a28-4c9a-b5e0-bf64625f5d70",
  "Root": {
    "alive": true,
    "content": [
      "5ec01aee-6263-42c3-8317-45917d752926",
      "d2aced3f-d18b-4647-b678-c6d5fca8a2c4",
      "7e837654-18ac-41c8-b699-f89f87d97679",
      "3a43cb59-33d1-497f-a108-ba5fda13854a",
      "a647ac24-bd89-4580-ac92-2f90d0e611d4",
      "2d66d675-ee8f-4ea7-910f-363ab1fb0a25",
      "e4b00d04-8a34-4fa2-9336-2ffba1584588",
      "d77665c4-47ee-43bd-90de-d1b3f0e69c0f",
      "6a80944c-1e33-46cb-ba35-0fa534456cd9",
      "ff92ca2c-1671-45de-b575-82d3d236f4c9",
      "0b766a2e-30f3-4d9f-83ec-6bdecc33a832",
      "9e3a19d4-30c4-4594-ad73-b851f0947f9c",
      "916e08f2-e0fa-4ecd-b311-8e5095596bce",
      "9412be94-226e-4e93-804e-c3f2e8129be6",
      "927986d9-a122-4629-95b0-64172ac5d2d4",
      "b686a442-7762-481c-acf4-419605acb69d",
      "7ce5313c-2965-4d06-8f91-8fb395a14200",
      "e3af2fec-975c-4b1d-9473-9ae1f06c139b",
      "d06a3f17-1c0c-441d-a01a-f2f6c770d8ad",
      "07f84304-2836-4fd4-983f-cd317df7fc45"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550521956461,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "317f96c5-1a28-4c9a-b5e0-bf64625f5d70",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550796540000,
    "parent_id": "cbd900b3-1684-4f0d-977a-5a5b2a20aff3",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Calculating Factorials"
        ]
      ]
    },
    "type": "page",
    "version": 10,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521956456,
        "id": "5ec01aee-6263-42c3-8317-45917d752926",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521956456,
        "parent_id": "317f96c5-1a28-4c9a-b5e0-bf64625f5d70",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Factorials can be computed at compile-time using template metaprogramming techniques."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Factorials can be computed at compile-time using template metaprogramming techniques."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521956456,
        "id": "d2aced3f-d18b-4647-b678-c6d5fca8a2c4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550796480000,
        "parent_id": "317f96c5-1a28-4c9a-b5e0-bf64625f5d70",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "#include \u003ciostream\u003e\n\ntemplate\u003cunsigned int n\u003e\nstruct factorial\n{\n    enum\n    {\n        value = n * factorial\u003cn - 1\u003e::value\n    };\n};\n\ntemplate\u003c\u003e\nstruct factorial\u003c0\u003e\n{\n    enum { value = 1 };\n};\n\nint main()\n{\n    std::cout \u003c\u003c factorial\u003c7\u003e::value \u003c\u003c std::endl;    // prints \"5040\"\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "#include \u003ciostream\u003e\n\ntemplate\u003cunsigned int n\u003e\nstruct factorial\n{\n    enum\n    {\n        value = n * factorial\u003cn - 1\u003e::value\n    };\n};\n\ntemplate\u003c\u003e\nstruct factorial\u003c0\u003e\n{\n    enum { value = 1 };\n};\n\nint main()\n{\n    std::cout \u003c\u003c factorial\u003c7\u003e::value \u003c\u003c std::endl;    // prints \"5040\"\n}",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521956457,
        "id": "7e837654-18ac-41c8-b699-f89f87d97679",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521956457,
        "parent_id": "317f96c5-1a28-4c9a-b5e0-bf64625f5d70",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "factorial",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is a struct, but in template metaprogramming it is treated as a template metafunction. By convention, template metafunctions are evaluated by checking a particular member, either "
            ],
            [
              "::type",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " for metafunctions that result in types, or "
            ],
            [
              "::value",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " for metafunctions that generate values."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "factorial",
            "AttrFlags": 2
          },
          {
            "Text": " is a struct, but in template metaprogramming it is treated as a template metafunction. By convention, template metafunctions are evaluated by checking a particular member, either "
          },
          {
            "Text": "::type",
            "AttrFlags": 2
          },
          {
            "Text": " for metafunctions that result in types, or "
          },
          {
            "Text": "::value",
            "AttrFlags": 2
          },
          {
            "Text": " for metafunctions that generate values."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521956457,
        "id": "3a43cb59-33d1-497f-a108-ba5fda13854a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521956457,
        "parent_id": "317f96c5-1a28-4c9a-b5e0-bf64625f5d70",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In the above code, we evaluate the "
            ],
            [
              "factorial",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " metafunction by instantiating the template with the parameters we want to pass, and using "
            ],
            [
              "::value",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to get the result of the evaluation."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In the above code, we evaluate the "
          },
          {
            "Text": "factorial",
            "AttrFlags": 2
          },
          {
            "Text": " metafunction by instantiating the template with the parameters we want to pass, and using "
          },
          {
            "Text": "::value",
            "AttrFlags": 2
          },
          {
            "Text": " to get the result of the evaluation."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521956459,
        "id": "a647ac24-bd89-4580-ac92-2f90d0e611d4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550796540000,
        "parent_id": "317f96c5-1a28-4c9a-b5e0-bf64625f5d70",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The metafunction itself relies on recursively instantiating the same metafunction with smaller values. The "
            ],
            [
              "factorial\u003c0\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " specialization represents the terminating condition. Template metaprogramming has most of the restrictions of a functional programming language, so recursion is the primary “looping” construct."
            ]
          ]
        },
        "type": "text",
        "version": 4,
        "inline_content": [
          {
            "Text": "The metafunction itself relies on recursively instantiating the same metafunction with smaller values. The "
          },
          {
            "Text": "factorial\u003c0\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " specialization represents the terminating condition. Template metaprogramming has most of the restrictions of a functional programming language, so recursion is the primary “looping” construct."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521956459,
        "id": "2d66d675-ee8f-4ea7-910f-363ab1fb0a25",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521956459,
        "parent_id": "317f96c5-1a28-4c9a-b5e0-bf64625f5d70",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Since template metafunctions execute at compile time, their results can be used in contexts that require compile-time values. For example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Since template metafunctions execute at compile time, their results can be used in contexts that require compile-time values. For example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521956459,
        "id": "e4b00d04-8a34-4fa2-9336-2ffba1584588",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550796480000,
        "parent_id": "317f96c5-1a28-4c9a-b5e0-bf64625f5d70",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "int my_array[factorial\u003c5\u003e::value];"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "int my_array[factorial\u003c5\u003e::value];",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521956459,
        "id": "d77665c4-47ee-43bd-90de-d1b3f0e69c0f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521956459,
        "parent_id": "317f96c5-1a28-4c9a-b5e0-bf64625f5d70",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Automatic arrays must have a compile-time defined size. And the result of a metafunction is a compile-time constant, so it can be used here."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Automatic arrays must have a compile-time defined size. And the result of a metafunction is a compile-time constant, so it can be used here."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521956460,
        "id": "6a80944c-1e33-46cb-ba35-0fa534456cd9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521956460,
        "parent_id": "317f96c5-1a28-4c9a-b5e0-bf64625f5d70",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Limitation",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ": Most of the compilers won’t allow recursion depth beyond a limit. For example, "
            ],
            [
              "g++",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " compiler by default limits recursion depeth to 256 levels. In case of "
            ],
            [
              "g++",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", programmer can set recursion depth using "
            ],
            [
              "-ftemplate-depth-X",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " option."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Limitation",
            "AttrFlags": 1
          },
          {
            "Text": ": Most of the compilers won’t allow recursion depth beyond a limit. For example, "
          },
          {
            "Text": "g++",
            "AttrFlags": 2
          },
          {
            "Text": " compiler by default limits recursion depeth to 256 levels. In case of "
          },
          {
            "Text": "g++",
            "AttrFlags": 2
          },
          {
            "Text": ", programmer can set recursion depth using "
          },
          {
            "Text": "-ftemplate-depth-X",
            "AttrFlags": 2
          },
          {
            "Text": " option."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521956460,
        "id": "ff92ca2c-1671-45de-b575-82d3d236f4c9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521956460,
        "parent_id": "317f96c5-1a28-4c9a-b5e0-bf64625f5d70",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Since C++11, the "
            ],
            [
              "std::integral_constant",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " template can be used for this kind of template computation:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Since C++11, the "
          },
          {
            "Text": "std::integral_constant",
            "AttrFlags": 2
          },
          {
            "Text": " template can be used for this kind of template computation:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521956460,
        "id": "0b766a2e-30f3-4d9f-83ec-6bdecc33a832",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550796540000,
        "parent_id": "317f96c5-1a28-4c9a-b5e0-bf64625f5d70",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "#include \u003ciostream\u003e\n#include \u003ctype_traits\u003e\n\ntemplate\u003clong long n\u003e\nstruct factorial :\n  std::integral_constant\u003clong long, n * factorial\u003cn - 1\u003e::value\u003e {};\n\ntemplate\u003c\u003e\nstruct factorial\u003c0\u003e :\n  std::integral_constant\u003clong long, 1\u003e {};\n\nint main()\n{\n    std::cout \u003c\u003c factorial\u003c7\u003e::value \u003c\u003c std::endl;    // prints \"5040\"\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "#include \u003ciostream\u003e\n#include \u003ctype_traits\u003e\n\ntemplate\u003clong long n\u003e\nstruct factorial :\n  std::integral_constant\u003clong long, n * factorial\u003cn - 1\u003e::value\u003e {};\n\ntemplate\u003c\u003e\nstruct factorial\u003c0\u003e :\n  std::integral_constant\u003clong long, 1\u003e {};\n\nint main()\n{\n    std::cout \u003c\u003c factorial\u003c7\u003e::value \u003c\u003c std::endl;    // prints \"5040\"\n}",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521956460,
        "id": "9e3a19d4-30c4-4594-ad73-b851f0947f9c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521956460,
        "parent_id": "317f96c5-1a28-4c9a-b5e0-bf64625f5d70",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Additionally, "
            ],
            [
              "constexpr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " functions become a cleaner alternative."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Additionally, "
          },
          {
            "Text": "constexpr",
            "AttrFlags": 2
          },
          {
            "Text": " functions become a cleaner alternative."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521956460,
        "id": "916e08f2-e0fa-4ecd-b311-8e5095596bce",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550796540000,
        "parent_id": "317f96c5-1a28-4c9a-b5e0-bf64625f5d70",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "#include \u003ciostream\u003e\n\nconstexpr long long factorial(long long n)\n{\n  return (n == 0) ? 1 : n * factorial(n - 1);\n}\n\nint main()\n{\n  char test[factorial(3)];\n  std::cout \u003c\u003c factorial(7) \u003c\u003c '\\n';\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "#include \u003ciostream\u003e\n\nconstexpr long long factorial(long long n)\n{\n  return (n == 0) ? 1 : n * factorial(n - 1);\n}\n\nint main()\n{\n  char test[factorial(3)];\n  std::cout \u003c\u003c factorial(7) \u003c\u003c '\\n';\n}",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521956460,
        "id": "9412be94-226e-4e93-804e-c3f2e8129be6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521956460,
        "parent_id": "317f96c5-1a28-4c9a-b5e0-bf64625f5d70",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The body of "
            ],
            [
              "factorial()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is written as a single statement because in C++11 "
            ],
            [
              "constexpr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " functions can only use a quite limited subset of the language."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The body of "
          },
          {
            "Text": "factorial()",
            "AttrFlags": 2
          },
          {
            "Text": " is written as a single statement because in C++11 "
          },
          {
            "Text": "constexpr",
            "AttrFlags": 2
          },
          {
            "Text": " functions can only use a quite limited subset of the language."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521956461,
        "id": "927986d9-a122-4629-95b0-64172ac5d2d4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521956461,
        "parent_id": "317f96c5-1a28-4c9a-b5e0-bf64625f5d70",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Since C++14, many restrictions for "
            ],
            [
              "constexpr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " functions have been dropped and they can now be written much more conveniently:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Since C++14, many restrictions for "
          },
          {
            "Text": "constexpr",
            "AttrFlags": 2
          },
          {
            "Text": " functions have been dropped and they can now be written much more conveniently:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521956461,
        "id": "b686a442-7762-481c-acf4-419605acb69d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550796540000,
        "parent_id": "317f96c5-1a28-4c9a-b5e0-bf64625f5d70",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "constexpr long long factorial(long long n)\n{\n  if (n == 0)\n    return 1;\n  else\n    return n * factorial(n - 1);\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "constexpr long long factorial(long long n)\n{\n  if (n == 0)\n    return 1;\n  else\n    return n * factorial(n - 1);\n}",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521956461,
        "id": "7ce5313c-2965-4d06-8f91-8fb395a14200",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521956461,
        "parent_id": "317f96c5-1a28-4c9a-b5e0-bf64625f5d70",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Or even:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Or even:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521956461,
        "id": "e3af2fec-975c-4b1d-9473-9ae1f06c139b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550796540000,
        "parent_id": "317f96c5-1a28-4c9a-b5e0-bf64625f5d70",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "constexpr long long factorial(int n)\n{\n  long long result = 1;\n  for (int i = 1; i \u003c= n; ++i) {\n    result *= i;\n  }\n  return result;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "constexpr long long factorial(int n)\n{\n  long long result = 1;\n  for (int i = 1; i \u003c= n; ++i) {\n    result *= i;\n  }\n  return result;\n}",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521956461,
        "id": "d06a3f17-1c0c-441d-a01a-f2f6c770d8ad",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550796540000,
        "parent_id": "317f96c5-1a28-4c9a-b5e0-bf64625f5d70",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Since C++17 one can use fold expression to calculate factorial:"
            ]
          ]
        },
        "type": "text",
        "version": 4,
        "inline_content": [
          {
            "Text": "Since C++17 one can use fold expression to calculate factorial:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521956461,
        "id": "07f84304-2836-4fd4-983f-cd317df7fc45",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550796540000,
        "parent_id": "317f96c5-1a28-4c9a-b5e0-bf64625f5d70",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "#include \u003ciostream\u003e\n#include \u003cutility\u003e\n\ntemplate \u003cclass T, T N, class I = std::make_integer_sequence\u003cT, N\u003e\u003e\nstruct factorial;\n\ntemplate \u003cclass T, T N, T... Is\u003e\nstruct factorial\u003cT,N,std::index_sequence\u003cT, Is...\u003e\u003e {\n   static constexpr T value = (static_cast\u003cT\u003e(1) * ... * (Is + 1));\n};\n\nint main() {\n   std::cout \u003c\u003c factorial\u003cint, 5\u003e::value \u003c\u003c std::endl;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "#include \u003ciostream\u003e\n#include \u003cutility\u003e\n\ntemplate \u003cclass T, T N, class I = std::make_integer_sequence\u003cT, N\u003e\u003e\nstruct factorial;\n\ntemplate \u003cclass T, T N, T... Is\u003e\nstruct factorial\u003cT,N,std::index_sequence\u003cT, Is...\u003e\u003e {\n   static constexpr T value = (static_cast\u003cT\u003e(1) * ... * (Is + 1));\n};\n\nint main() {\n   std::cout \u003c\u003c factorial\u003cint, 5\u003e::value \u003c\u003c std::endl;\n}",
        "code_language": "C++"
      }
    ],
    "title": "Calculating Factorials",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}