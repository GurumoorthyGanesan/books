{
  "ID": "308f2f96-b432-45b5-b0e0-7a6204c58d11",
  "Root": {
    "alive": true,
    "content": [
      "d4cfc415-51ee-4157-bd81-734219ca370d",
      "9b98df58-86d0-4ef9-8010-93edd6109c35"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522678496,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "308f2f96-b432-45b5-b0e0-7a6204c58d11",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550710560000,
    "parent_id": "44b9891c-fe65-4aa6-8ac6-b623709b7c02",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "060Using move semantics on containers"
        ]
      ]
    },
    "type": "page",
    "version": 5,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522678495,
        "id": "d4cfc415-51ee-4157-bd81-734219ca370d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522678495,
        "parent_id": "308f2f96-b432-45b5-b0e0-7a6204c58d11",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You can move a container instead of copying it:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You can move a container instead of copying it:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522678495,
        "id": "9b98df58-86d0-4ef9-8010-93edd6109c35",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550710560000,
        "parent_id": "308f2f96-b432-45b5-b0e0-7a6204c58d11",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "void print(const std::vector\u003cint\u003e\u0026 vec) {\n    for (auto\u0026\u0026 val : vec) {\n        std::cout \u003c\u003c val \u003c\u003c \", \";\n    }\n    std::cout \u003c\u003c std::endl;\n}\n\nint main() {\n    // initialize vec1 with 1, 2, 3, 4 and vec2 as an empty vector\n    std::vector\u003cint\u003e vec1{1, 2, 3, 4};\n    std::vector\u003cint\u003e vec2;\n\n    // The following line will print 1, 2, 3, 4\n    print(vec1);\n\n    // The following line will print a new line\n    print(vec2);\n\n    // The vector vec2 is assigned with move assingment.\n    // This will \"steal\" the value of vec1 without copying it.\n    vec2 = std::move(vec1);\n\n    // Here the vec1 object is in an indeterminate state, but still valid.\n    // The object vec1 is not destroyed,\n    // but there's is no guarantees about what it contains.\n\n    // The following line will print 1, 2, 3, 4\n    print(vec2);\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "void print(const std::vector\u003cint\u003e\u0026 vec) {\n    for (auto\u0026\u0026 val : vec) {\n        std::cout \u003c\u003c val \u003c\u003c \", \";\n    }\n    std::cout \u003c\u003c std::endl;\n}\n\nint main() {\n    // initialize vec1 with 1, 2, 3, 4 and vec2 as an empty vector\n    std::vector\u003cint\u003e vec1{1, 2, 3, 4};\n    std::vector\u003cint\u003e vec2;\n\n    // The following line will print 1, 2, 3, 4\n    print(vec1);\n\n    // The following line will print a new line\n    print(vec2);\n\n    // The vector vec2 is assigned with move assingment.\n    // This will \"steal\" the value of vec1 without copying it.\n    vec2 = std::move(vec1);\n\n    // Here the vec1 object is in an indeterminate state, but still valid.\n    // The object vec1 is not destroyed,\n    // but there's is no guarantees about what it contains.\n\n    // The following line will print 1, 2, 3, 4\n    print(vec2);\n}",
        "code_language": "C++"
      }
    ],
    "title": "060Using move semantics on containers",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}