{
  "ID": "99bed065-9918-4c51-a1eb-841ae4c5127d",
  "Root": {
    "alive": true,
    "content": [
      "a980e778-9112-4144-bd91-eacd46de0067",
      "7fb24c67-619f-4e21-99d1-8811c9e334f3",
      "c2b64b27-df03-49a9-9dbd-03aa521028d7",
      "4b9f46e8-72ab-488f-8ee4-ec5783d50eb6",
      "13c1155b-4750-4262-bc5c-181da1895bb0",
      "c70ea06b-7c77-4d81-a531-23d3bb6bb482",
      "14ad949d-65c7-408e-8a64-101bb176b3ce",
      "537d0e4a-ab7c-4de0-ac4c-59a6197d26ad",
      "13b822cc-94b2-417c-bbcd-527a26180c72",
      "5c1fabd1-fa19-4ee9-8d72-ad8aad928a51",
      "2df1501a-6e59-4d1b-b647-1bf0ec541b8c",
      "218bdc9f-e3e3-4b8a-af79-b1af97536ffd",
      "198169ab-6252-4356-8a4a-f1abee8c2da5",
      "8fe81d93-c5a1-4559-a67a-60aa97c98ad9",
      "13ca8e93-7b0b-44a5-838a-64fa707985c7",
      "070305f4-6d3b-4aff-8493-ffe9ef8f5fb6",
      "3dec860b-8c6c-41a5-bc55-b704287f4fa3",
      "c2ba7695-ca95-4e2d-ac6e-564037f8f67d",
      "c5124b47-94bc-4644-b5eb-fce90b477a29",
      "3c23977a-62e8-493a-90ab-fd5558e2c20b",
      "2e8afb5d-6551-445d-8402-9e6402301c78",
      "e9ca10dc-c305-4c1e-b561-17fcc07a8149",
      "e92414a6-f0af-4a89-aa86-42dc875f5e40",
      "183399ca-803f-482a-9263-5ecc6898a6a0",
      "78a63228-59df-403d-970b-a9d7d7c99d13",
      "af2206e6-8a87-40fb-a04a-096fce47f93d",
      "b6a9d783-db07-4d10-8092-2911aca01bee",
      "d0f59ba6-cf6a-44a2-a4a2-408973d25da9"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522024590,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "99bed065-9918-4c51-a1eb-841ae4c5127d",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550800920000,
    "parent_id": "402ef4da-a4e3-4503-ab08-9a4aa56821b5",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Unique ownership (std::unique_ptr)"
        ]
      ]
    },
    "type": "page",
    "version": 26,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522024586,
        "id": "a980e778-9112-4144-bd91-eacd46de0067",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550800860000,
        "parent_id": "99bed065-9918-4c51-a1eb-841ae4c5127d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A "
            ],
            [
              "std::unique_ptr",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://en.cppreference.com/w/cpp/memory/unique_ptr"
                ]
              ]
            ],
            [
              " is a class template that manages the lifetime of a dynamically stored object. Unlike for "
            ],
            [
              "std::shared_ptr",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://en.cppreference.com/w/cpp/memory/shared_ptr"
                ]
              ]
            ],
            [
              ", the dynamic object is owned by only "
            ],
            [
              "one instance",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " of a "
            ],
            [
              "std::unique_ptr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " at any time,"
            ]
          ]
        },
        "type": "text",
        "version": 3,
        "inline_content": [
          {
            "Text": "A "
          },
          {
            "Text": "std::unique_ptr",
            "AttrFlags": 2,
            "Link": "http://en.cppreference.com/w/cpp/memory/unique_ptr"
          },
          {
            "Text": " is a class template that manages the lifetime of a dynamically stored object. Unlike for "
          },
          {
            "Text": "std::shared_ptr",
            "AttrFlags": 2,
            "Link": "http://en.cppreference.com/w/cpp/memory/shared_ptr"
          },
          {
            "Text": ", the dynamic object is owned by only "
          },
          {
            "Text": "one instance",
            "AttrFlags": 4
          },
          {
            "Text": " of a "
          },
          {
            "Text": "std::unique_ptr",
            "AttrFlags": 2
          },
          {
            "Text": " at any time,"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522024586,
        "id": "7fb24c67-619f-4e21-99d1-8811c9e334f3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550800860000,
        "parent_id": "99bed065-9918-4c51-a1eb-841ae4c5127d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "// Creates a dynamic int with value of 20 owned by a unique pointer \nstd::unique_ptr\u003cint\u003e ptr = std::make_unique\u003cint\u003e(20);",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "code",
        "version": 7,
        "code": "// Creates a dynamic int with value of 20 owned by a unique pointer \nstd::unique_ptr\u003cint\u003e ptr = std::make_unique\u003cint\u003e(20);",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522024586,
        "id": "c2b64b27-df03-49a9-9dbd-03aa521028d7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522024586,
        "parent_id": "99bed065-9918-4c51-a1eb-841ae4c5127d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "(Note: "
            ],
            [
              "std::unique_ptr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is available since C++11 and "
            ],
            [
              "std::make_unique",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " since C++14.)"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "(Note: "
          },
          {
            "Text": "std::unique_ptr",
            "AttrFlags": 2
          },
          {
            "Text": " is available since C++11 and "
          },
          {
            "Text": "std::make_unique",
            "AttrFlags": 2
          },
          {
            "Text": " since C++14.)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522024586,
        "id": "4b9f46e8-72ab-488f-8ee4-ec5783d50eb6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522024586,
        "parent_id": "99bed065-9918-4c51-a1eb-841ae4c5127d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Only the variable "
            ],
            [
              "ptr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " holds a pointer to a dynamically allocated "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". When a unique pointer that owns an object goes out of scope, the owned object is deleted, i.e. its destructor is called if the object is of class type, and the memory for that object is released."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Only the variable "
          },
          {
            "Text": "ptr",
            "AttrFlags": 2
          },
          {
            "Text": " holds a pointer to a dynamically allocated "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": ". When a unique pointer that owns an object goes out of scope, the owned object is deleted, i.e. its destructor is called if the object is of class type, and the memory for that object is released."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522024587,
        "id": "13c1155b-4750-4262-bc5c-181da1895bb0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522024587,
        "parent_id": "99bed065-9918-4c51-a1eb-841ae4c5127d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To use "
            ],
            [
              "std::unique_ptr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "std::make_unique",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " with array-types, use their array specializations:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To use "
          },
          {
            "Text": "std::unique_ptr",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "std::make_unique",
            "AttrFlags": 2
          },
          {
            "Text": " with array-types, use their array specializations:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522024587,
        "id": "c70ea06b-7c77-4d81-a531-23d3bb6bb482",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550800800000,
        "parent_id": "99bed065-9918-4c51-a1eb-841ae4c5127d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "// Creates a unique_ptr to an int with value 59\nstd::unique_ptr\u003cint\u003e ptr = std::make_unique\u003cint\u003e(59);\n\n// Creates a unique_ptr to an array of 15 ints\nstd::unique_ptr\u003cint[]\u003e ptr = std::make_unique\u003cint[]\u003e(15);"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "// Creates a unique_ptr to an int with value 59\nstd::unique_ptr\u003cint\u003e ptr = std::make_unique\u003cint\u003e(59);\n\n// Creates a unique_ptr to an array of 15 ints\nstd::unique_ptr\u003cint[]\u003e ptr = std::make_unique\u003cint[]\u003e(15);",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522024587,
        "id": "14ad949d-65c7-408e-8a64-101bb176b3ce",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522024587,
        "parent_id": "99bed065-9918-4c51-a1eb-841ae4c5127d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You can access the "
            ],
            [
              "std::unique_ptr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " just like a raw pointer, because it overloads those operators."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You can access the "
          },
          {
            "Text": "std::unique_ptr",
            "AttrFlags": 2
          },
          {
            "Text": " just like a raw pointer, because it overloads those operators."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550800800000,
        "id": "537d0e4a-ab7c-4de0-ac4c-59a6197d26ad",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550800800000,
        "parent_id": "99bed065-9918-4c51-a1eb-841ae4c5127d",
        "parent_table": "block",
        "type": "text",
        "version": 4
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522024587,
        "id": "13b822cc-94b2-417c-bbcd-527a26180c72",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522024587,
        "parent_id": "99bed065-9918-4c51-a1eb-841ae4c5127d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You can transfer ownership of the contents of a smart pointer to another pointer by using "
            ],
            [
              "std::move",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", which will cause the original smart pointer to point to "
            ],
            [
              "nullptr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You can transfer ownership of the contents of a smart pointer to another pointer by using "
          },
          {
            "Text": "std::move",
            "AttrFlags": 2
          },
          {
            "Text": ", which will cause the original smart pointer to point to "
          },
          {
            "Text": "nullptr",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522024587,
        "id": "5c1fabd1-fa19-4ee9-8d72-ad8aad928a51",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550800860000,
        "parent_id": "99bed065-9918-4c51-a1eb-841ae4c5127d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "// 1. std::unique_ptr\nstd::unique_ptr\u003cint\u003e ptr = std::make_unique\u003cint\u003e();\n\n// Change value to 1\n*ptr = 1;\n\n// 2. std::unique_ptr (by moving 'ptr' to 'ptr2', 'ptr' doesn't own the object anymore)\nstd::unique_ptr\u003cint\u003e ptr2 = std::move(ptr);\n\nint a = *ptr2; // 'a' is 1\nint b = *ptr;  // undefined behavior! 'ptr' is 'nullptr'\n               // (because of the move command above)"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "// 1. std::unique_ptr\nstd::unique_ptr\u003cint\u003e ptr = std::make_unique\u003cint\u003e();\n\n// Change value to 1\n*ptr = 1;\n\n// 2. std::unique_ptr (by moving 'ptr' to 'ptr2', 'ptr' doesn't own the object anymore)\nstd::unique_ptr\u003cint\u003e ptr2 = std::move(ptr);\n\nint a = *ptr2; // 'a' is 1\nint b = *ptr;  // undefined behavior! 'ptr' is 'nullptr'\n               // (because of the move command above)",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550800860000,
        "id": "2df1501a-6e59-4d1b-b647-1bf0ec541b8c",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550800860000,
        "parent_id": "99bed065-9918-4c51-a1eb-841ae4c5127d",
        "parent_table": "block",
        "type": "text",
        "version": 6
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522024588,
        "id": "218bdc9f-e3e3-4b8a-af79-b1af97536ffd",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550800860000,
        "parent_id": "99bed065-9918-4c51-a1eb-841ae4c5127d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Passing "
            ],
            [
              "unique_ptr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to functions as parameter:"
            ]
          ]
        },
        "type": "text",
        "version": 2,
        "inline_content": [
          {
            "Text": "Passing "
          },
          {
            "Text": "unique_ptr",
            "AttrFlags": 2
          },
          {
            "Text": " to functions as parameter:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522024588,
        "id": "198169ab-6252-4356-8a4a-f1abee8c2da5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550800920000,
        "parent_id": "99bed065-9918-4c51-a1eb-841ae4c5127d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "void foo(std::unique_ptr\u003cint\u003e ptr)\n{\n    // Your code goes here\n}\n\nstd::unique_ptr\u003cint\u003e ptr = std::make_unique\u003cint\u003e(59);\nfoo(std::move(ptr))"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "void foo(std::unique_ptr\u003cint\u003e ptr)\n{\n    // Your code goes here\n}\n\nstd::unique_ptr\u003cint\u003e ptr = std::make_unique\u003cint\u003e(59);\nfoo(std::move(ptr))",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550800921315,
        "id": "8fe81d93-c5a1-4559-a67a-60aa97c98ad9",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550800920000,
        "parent_id": "99bed065-9918-4c51-a1eb-841ae4c5127d",
        "parent_table": "block",
        "type": "text",
        "version": 3
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522024588,
        "id": "13ca8e93-7b0b-44a5-838a-64fa707985c7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522024588,
        "parent_id": "99bed065-9918-4c51-a1eb-841ae4c5127d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Returning "
            ],
            [
              "unique_ptr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " from functions. This is the preferred C++11 way of writing factory functions, as it clearly conveys the ownership semantics of the return: the caller owns the resulting "
            ],
            [
              "unique_ptr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and is responsible for it."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Returning "
          },
          {
            "Text": "unique_ptr",
            "AttrFlags": 2
          },
          {
            "Text": " from functions. This is the preferred C++11 way of writing factory functions, as it clearly conveys the ownership semantics of the return: the caller owns the resulting "
          },
          {
            "Text": "unique_ptr",
            "AttrFlags": 2
          },
          {
            "Text": " and is responsible for it."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522024588,
        "id": "070305f4-6d3b-4aff-8493-ffe9ef8f5fb6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550800920000,
        "parent_id": "99bed065-9918-4c51-a1eb-841ae4c5127d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "std::unique_ptr\u003cint\u003e foo()\n{\n    std::unique_ptr\u003cint\u003e ptr = std::make_unique\u003cint\u003e(59);\n    return ptr;\n}\n\nstd::unique_ptr\u003cint\u003e ptr = foo();"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "std::unique_ptr\u003cint\u003e foo()\n{\n    std::unique_ptr\u003cint\u003e ptr = std::make_unique\u003cint\u003e(59);\n    return ptr;\n}\n\nstd::unique_ptr\u003cint\u003e ptr = foo();",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522024588,
        "id": "3dec860b-8c6c-41a5-bc55-b704287f4fa3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522024588,
        "parent_id": "99bed065-9918-4c51-a1eb-841ae4c5127d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Compare this to:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Compare this to:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522024588,
        "id": "c2ba7695-ca95-4e2d-ac6e-564037f8f67d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550800920000,
        "parent_id": "99bed065-9918-4c51-a1eb-841ae4c5127d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "int* foo_cpp03();\n\nint* p = foo_cpp03(); // do I own p? do I have to delete it at some point?\n                      // it's not readily apparent what the answer is."
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "int* foo_cpp03();\n\nint* p = foo_cpp03(); // do I own p? do I have to delete it at some point?\n                      // it's not readily apparent what the answer is.",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522024588,
        "id": "c5124b47-94bc-4644-b5eb-fce90b477a29",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522024588,
        "parent_id": "99bed065-9918-4c51-a1eb-841ae4c5127d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The class template "
            ],
            [
              "make_unique",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is provided since C++14. It’s easy to add it manually to C++11 code:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The class template "
          },
          {
            "Text": "make_unique",
            "AttrFlags": 2
          },
          {
            "Text": " is provided since C++14. It’s easy to add it manually to C++11 code:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522024589,
        "id": "3c23977a-62e8-493a-90ab-fd5558e2c20b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550800920000,
        "parent_id": "99bed065-9918-4c51-a1eb-841ae4c5127d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "template\u003ctypename T, typename... Args\u003e\ntypename std::enable_if\u003c!std::is_array\u003cT\u003e::value, std::unique_ptr\u003cT\u003e\u003e::type\nmake_unique(Args\u0026\u0026... args)\n{ return std::unique_ptr\u003cT\u003e(new T(std::forward\u003cArgs\u003e(args)...)); }\n\n// Use make_unique for arrays\ntemplate\u003ctypename T\u003e\ntypename std::enable_if\u003cstd::is_array\u003cT\u003e::value, std::unique_ptr\u003cT\u003e\u003e::type\nmake_unique(size_t n)\n{ return std::unique_ptr\u003cT\u003e(new typename std::remove_extent\u003cT\u003e::type[n]()); }"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "template\u003ctypename T, typename... Args\u003e\ntypename std::enable_if\u003c!std::is_array\u003cT\u003e::value, std::unique_ptr\u003cT\u003e\u003e::type\nmake_unique(Args\u0026\u0026... args)\n{ return std::unique_ptr\u003cT\u003e(new T(std::forward\u003cArgs\u003e(args)...)); }\n\n// Use make_unique for arrays\ntemplate\u003ctypename T\u003e\ntypename std::enable_if\u003cstd::is_array\u003cT\u003e::value, std::unique_ptr\u003cT\u003e\u003e::type\nmake_unique(size_t n)\n{ return std::unique_ptr\u003cT\u003e(new typename std::remove_extent\u003cT\u003e::type[n]()); }",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522024589,
        "id": "2e8afb5d-6551-445d-8402-9e6402301c78",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522024589,
        "parent_id": "99bed065-9918-4c51-a1eb-841ae4c5127d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Unlike the "
            ],
            [
              "dumb",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " smart pointer ("
            ],
            [
              "std::auto_ptr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "), "
            ],
            [
              "unique_ptr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can also be instantiated with vector allocation ("
            ],
            [
              "not",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "std::vector",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "). Earlier examples were for "
            ],
            [
              "scalar",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " allocations. For example to have a dynamically allocated integer array for 10 elements, you would specify "
            ],
            [
              "int[]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " as the template type (and not just "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "):"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Unlike the "
          },
          {
            "Text": "dumb",
            "AttrFlags": 4
          },
          {
            "Text": " smart pointer ("
          },
          {
            "Text": "std::auto_ptr",
            "AttrFlags": 2
          },
          {
            "Text": "), "
          },
          {
            "Text": "unique_ptr",
            "AttrFlags": 2
          },
          {
            "Text": " can also be instantiated with vector allocation ("
          },
          {
            "Text": "not",
            "AttrFlags": 4
          },
          {
            "Text": " "
          },
          {
            "Text": "std::vector",
            "AttrFlags": 2
          },
          {
            "Text": "). Earlier examples were for "
          },
          {
            "Text": "scalar",
            "AttrFlags": 4
          },
          {
            "Text": " allocations. For example to have a dynamically allocated integer array for 10 elements, you would specify "
          },
          {
            "Text": "int[]",
            "AttrFlags": 2
          },
          {
            "Text": " as the template type (and not just "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": "):"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522024589,
        "id": "e9ca10dc-c305-4c1e-b561-17fcc07a8149",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550800920000,
        "parent_id": "99bed065-9918-4c51-a1eb-841ae4c5127d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "std::unique_ptr\u003cint[]\u003e arr_ptr = std::make_unique\u003cint[]\u003e(10);"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "std::unique_ptr\u003cint[]\u003e arr_ptr = std::make_unique\u003cint[]\u003e(10);",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522024589,
        "id": "e92414a6-f0af-4a89-aa86-42dc875f5e40",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522024589,
        "parent_id": "99bed065-9918-4c51-a1eb-841ae4c5127d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Which can be simplified with:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Which can be simplified with:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522024589,
        "id": "183399ca-803f-482a-9263-5ecc6898a6a0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550800920000,
        "parent_id": "99bed065-9918-4c51-a1eb-841ae4c5127d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "auto arr_ptr = std::make_unique\u003cint[]\u003e(10);"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "auto arr_ptr = std::make_unique\u003cint[]\u003e(10);",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522024590,
        "id": "78a63228-59df-403d-970b-a9d7d7c99d13",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522024590,
        "parent_id": "99bed065-9918-4c51-a1eb-841ae4c5127d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Now, you use "
            ],
            [
              "arr_ptr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " as if it is an array:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Now, you use "
          },
          {
            "Text": "arr_ptr",
            "AttrFlags": 2
          },
          {
            "Text": " as if it is an array:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522024590,
        "id": "af2206e6-8a87-40fb-a04a-096fce47f93d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550800920000,
        "parent_id": "99bed065-9918-4c51-a1eb-841ae4c5127d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "arr_ptr[2] =  10; // Modify third element"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "arr_ptr[2] =  10; // Modify third element",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522024590,
        "id": "b6a9d783-db07-4d10-8092-2911aca01bee",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522024590,
        "parent_id": "99bed065-9918-4c51-a1eb-841ae4c5127d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You need not to worry about de-allocation. This template specialized version calls constructors and destructors appropriately. Using vectored version of "
            ],
            [
              "unique_ptr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or a "
            ],
            [
              "vector",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " itself - is a personal choice."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You need not to worry about de-allocation. This template specialized version calls constructors and destructors appropriately. Using vectored version of "
          },
          {
            "Text": "unique_ptr",
            "AttrFlags": 2
          },
          {
            "Text": " or a "
          },
          {
            "Text": "vector",
            "AttrFlags": 2
          },
          {
            "Text": " itself - is a personal choice."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522024590,
        "id": "d0f59ba6-cf6a-44a2-a4a2-408973d25da9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522024590,
        "parent_id": "99bed065-9918-4c51-a1eb-841ae4c5127d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In versions prior to C++11, "
            ],
            [
              "std::auto_ptr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " was available. Unlike "
            ],
            [
              "unique_ptr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " it is allowed to copy "
            ],
            [
              "auto_ptr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "s, upon which the source "
            ],
            [
              "ptr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will lose the ownership of the contained pointer and the target receives it."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In versions prior to C++11, "
          },
          {
            "Text": "std::auto_ptr",
            "AttrFlags": 2
          },
          {
            "Text": " was available. Unlike "
          },
          {
            "Text": "unique_ptr",
            "AttrFlags": 2
          },
          {
            "Text": " it is allowed to copy "
          },
          {
            "Text": "auto_ptr",
            "AttrFlags": 2
          },
          {
            "Text": "s, upon which the source "
          },
          {
            "Text": "ptr",
            "AttrFlags": 2
          },
          {
            "Text": " will lose the ownership of the contained pointer and the target receives it."
          }
        ]
      }
    ],
    "title": "Unique ownership (std::unique_ptr)",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}