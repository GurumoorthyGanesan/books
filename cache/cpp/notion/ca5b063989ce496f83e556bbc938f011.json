{
  "ID": "ca5b0639-89ce-496f-83e5-56bbc938f011",
  "Root": {
    "alive": true,
    "content": [
      "fe4e5356-e53d-48e2-a6bc-4af5ae6ce15d",
      "b6db87c3-e03b-4bd5-bfef-ea719b02622c",
      "f5d307fa-6c28-4af5-956d-049ebca1056f",
      "8d4197f1-7871-4e52-824f-6551ca40cb6b",
      "f871fb15-ad19-42c6-a213-51ebdc4a600c"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522284826,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "ca5b0639-89ce-496f-83e5-56bbc938f011",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550655300000,
    "parent_id": "f1b860db-be5a-41ed-a67b-b7b0181ec59f",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Using Condition Variables"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522284823,
        "id": "fe4e5356-e53d-48e2-a6bc-4af5ae6ce15d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522284823,
        "parent_id": "ca5b0639-89ce-496f-83e5-56bbc938f011",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A condition variable is a primitive used in conjunction with a mutex to orchestrate communication between threads. While it is neither the exclusive or most efficient way to accomplish this, it can be among the simplest to those familiar with the pattern."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A condition variable is a primitive used in conjunction with a mutex to orchestrate communication between threads. While it is neither the exclusive or most efficient way to accomplish this, it can be among the simplest to those familiar with the pattern."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522284825,
        "id": "b6db87c3-e03b-4bd5-bfef-ea719b02622c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522284825,
        "parent_id": "ca5b0639-89ce-496f-83e5-56bbc938f011",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "One waits on a "
            ],
            [
              "std::condition_variable",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " with a "
            ],
            [
              "std::unique_lock\u003cstd::mutex\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". This allows the code to safely examine shared state before deciding whether or not to proceed with acquisition."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "One waits on a "
          },
          {
            "Text": "std::condition_variable",
            "AttrFlags": 2
          },
          {
            "Text": " with a "
          },
          {
            "Text": "std::unique_lock\u003cstd::mutex\u003e",
            "AttrFlags": 2
          },
          {
            "Text": ". This allows the code to safely examine shared state before deciding whether or not to proceed with acquisition."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522284826,
        "id": "f5d307fa-6c28-4af5-956d-049ebca1056f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522284826,
        "parent_id": "ca5b0639-89ce-496f-83e5-56bbc938f011",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Below is a producer-consumer sketch that uses "
            ],
            [
              "std::thread",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "std::condition_variable",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "std::mutex",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", and a few others to make things interesting."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Below is a producer-consumer sketch that uses "
          },
          {
            "Text": "std::thread",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "std::condition_variable",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "std::mutex",
            "AttrFlags": 2
          },
          {
            "Text": ", and a few others to make things interesting."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522284826,
        "id": "8d4197f1-7871-4e52-824f-6551ca40cb6b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522284826,
        "parent_id": "ca5b0639-89ce-496f-83e5-56bbc938f011",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003ccondition_variable\u003e\n#include \u003ccstddef\u003e\n#include \u003ciostream\u003e\n#include \u003cmutex\u003e\n#include \u003cqueue\u003e\n#include \u003crandom\u003e\n#include \u003cthread\u003e\n\n\nint main()\n{\n    std::condition_variable cond;\n    std::mutex mtx;\n    std::queue\u003cint\u003e intq;\n    bool stopped = false;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003ccondition_variable\u003e\n#include \u003ccstddef\u003e\n#include \u003ciostream\u003e\n#include \u003cmutex\u003e\n#include \u003cqueue\u003e\n#include \u003crandom\u003e\n#include \u003cthread\u003e\n\n\nint main()\n{\n    std::condition_variable cond;\n    std::mutex mtx;\n    std::queue\u003cint\u003e intq;\n    bool stopped = false;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522284826,
        "id": "f871fb15-ad19-42c6-a213-51ebdc4a600c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522284826,
        "parent_id": "ca5b0639-89ce-496f-83e5-56bbc938f011",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "std::thread producer{[\u0026]()\n{\n    // Prepare a random number generator.\n    // Our producer will simply push random numbers to intq.\n    //\n    std::default_random_engine gen{};\n    std::uniform_int_distribution\u003cint\u003e dist{};\n\n    std::size_t count = 4006;    \n    while(count--)\n    {    \n        // Always lock before changing\n        // state guarded by a mutex and\n        // condition_variable (a.k.a. \"condvar\").\n        std::lock_guard\u003cstd::mutex\u003e L{mtx};\n\n        // Push a random int into the queue\n        intq.push(dist(gen));\n\n        // Tell the consumer it has an int\n        cond.notify_one();\n    }\n\n    // All done.\n    // Acquire the lock, set the stopped flag,\n    // then inform the consumer.\n    std::lock_guard\u003cstd::mutex\u003e L{mtx};\n\n    std::cout \u003c\u003c \"Producer is done!\" \u003c\u003c std::endl;\n\n    stopped = true;\n    cond.notify_one();\n}};\n\nstd::thread consumer{[\u0026]()\n{\n    do{\n        std::unique_lock\u003cstd::mutex\u003e L{mtx};\n        cond.wait(L,[\u0026]()\n        {\n            // Acquire the lock only if\n            // we've stopped or the queue\n            // isn't empty\n            return stopped || ! intq.empty();\n        });\n\n        // We own the mutex here; pop the queue\n        // until it empties out.\n\n        while( ! intq.empty())\n        {\n            const auto val = intq.front();\n            intq.pop();\n\n            std::cout \u003c\u003c \"Consumer popped: \" \u003c\u003c val \u003c\u003c std::endl;\n        }\n\n        if(stopped){\n            // producer has signaled a stop\n            std::cout \u003c\u003c \"Consumer is done!\" \u003c\u003c std::endl;\n            break;\n        }\n\n    }while(true);\n}};\n\nconsumer.join();\nproducer.join();\n\nstd::cout \u003c\u003c \"Example Completed!\" \u003c\u003c std::endl;\n\nreturn 0;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "std::thread producer{[\u0026]()\n{\n    // Prepare a random number generator.\n    // Our producer will simply push random numbers to intq.\n    //\n    std::default_random_engine gen{};\n    std::uniform_int_distribution\u003cint\u003e dist{};\n\n    std::size_t count = 4006;    \n    while(count--)\n    {    \n        // Always lock before changing\n        // state guarded by a mutex and\n        // condition_variable (a.k.a. \"condvar\").\n        std::lock_guard\u003cstd::mutex\u003e L{mtx};\n\n        // Push a random int into the queue\n        intq.push(dist(gen));\n\n        // Tell the consumer it has an int\n        cond.notify_one();\n    }\n\n    // All done.\n    // Acquire the lock, set the stopped flag,\n    // then inform the consumer.\n    std::lock_guard\u003cstd::mutex\u003e L{mtx};\n\n    std::cout \u003c\u003c \"Producer is done!\" \u003c\u003c std::endl;\n\n    stopped = true;\n    cond.notify_one();\n}};\n\nstd::thread consumer{[\u0026]()\n{\n    do{\n        std::unique_lock\u003cstd::mutex\u003e L{mtx};\n        cond.wait(L,[\u0026]()\n        {\n            // Acquire the lock only if\n            // we've stopped or the queue\n            // isn't empty\n            return stopped || ! intq.empty();\n        });\n\n        // We own the mutex here; pop the queue\n        // until it empties out.\n\n        while( ! intq.empty())\n        {\n            const auto val = intq.front();\n            intq.pop();\n\n            std::cout \u003c\u003c \"Consumer popped: \" \u003c\u003c val \u003c\u003c std::endl;\n        }\n\n        if(stopped){\n            // producer has signaled a stop\n            std::cout \u003c\u003c \"Consumer is done!\" \u003c\u003c std::endl;\n            break;\n        }\n\n    }while(true);\n}};\n\nconsumer.join();\nproducer.join();\n\nstd::cout \u003c\u003c \"Example Completed!\" \u003c\u003c std::endl;\n\nreturn 0;\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "Using Condition Variables",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}