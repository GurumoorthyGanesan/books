{
  "ID": "8ba36288-cdd1-460b-8345-d5bcc4cdabfd",
  "Root": {
    "alive": true,
    "content": [
      "86626a46-eb02-4acd-b1c7-9f09a869496d",
      "aaac8157-9004-49a6-a8d9-61214a532e6e",
      "8e5551c8-b0aa-4ea9-a028-40a292a6df2c",
      "734a5287-7e37-4e2e-bb4d-6fdbf8b430b4",
      "aee96cbf-6863-413b-b7b4-867fe3230f94",
      "13929ba6-2f86-4b46-98d4-92213bd03c31",
      "b9a8028f-2cfc-4362-bf1c-dae4f1854f16",
      "e2579c34-1c21-48e2-9d68-b6c8dfe5115d",
      "d05c5ca2-dbde-4933-8c9f-1c0290faf4be",
      "7422ceee-2152-4cd3-a885-10afe8a898f6",
      "e091843a-33a0-4b00-aa4e-cede2b3a058a",
      "a85bd540-4d5f-4985-94a7-0c6ad73e4d66",
      "e8cc05ef-1472-4efc-9f65-30502d64bcfc",
      "2aa4bdce-0b82-4c42-8a0d-6961b1292c23",
      "902221cf-5e79-4a61-aec9-01ae744d85d7",
      "d7d9c448-d2a2-471d-b3f0-e0b629ac69c3",
      "c96271af-d34a-44c7-97f4-d8f072304695"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550523889680,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "8ba36288-cdd1-460b-8345-d5bcc4cdabfd",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552345200000,
    "parent_id": "5644241e-ceec-479a-8322-e9c1780f1515",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Create pseudo-method pointers"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523889674,
        "id": "86626a46-eb02-4acd-b1c7-9f09a869496d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523889674,
        "parent_id": "8ba36288-cdd1-460b-8345-d5bcc4cdabfd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This is an advanced example."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This is an advanced example."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523889677,
        "id": "aaac8157-9004-49a6-a8d9-61214a532e6e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523889677,
        "parent_id": "8ba36288-cdd1-460b-8345-d5bcc4cdabfd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You can use variant for light weight type erasure."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You can use variant for light weight type erasure."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523889677,
        "id": "8e5551c8-b0aa-4ea9-a028-40a292a6df2c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552345200000,
        "parent_id": "8ba36288-cdd1-460b-8345-d5bcc4cdabfd",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "template\u003cclass F\u003e\nstruct pseudo_method {\n  F f;\n  // enable C++17 class type deduction:\n  pseudo_method( F\u0026\u0026 fin ):f(std::move(fin)) {}\n\n  // Koenig lookup operator-\u003e*, as this is a pseudo-method it is appropriate:\n  template\u003cclass Variant\u003e // maybe add SFINAE test that LHS is actually a variant.\n  friend decltype(auto) operator-\u003e*( Variant\u0026\u0026 var, pseudo_method const\u0026 method ) {\n    // var-\u003e*method returns a lambda that perfect forwards a function call,\n    // behaving like a method pointer basically:\n    return [\u0026](auto\u0026\u0026...args)-\u003edecltype(auto) {\n      // use visit to get the type of the variant:\n      return std::visit(\n        [\u0026](auto\u0026\u0026 self)-\u003edecltype(auto) {\n          // decltype(x)(x) is perfect forwarding in a lambda:\n          return method.f( decltype(self)(self), decltype(args)(args)... );\n        },\n        std::forward\u003cVar\u003e(var)\n      );\n    };\n  }\n};"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "template\u003cclass F\u003e\nstruct pseudo_method {\n  F f;\n  // enable C++17 class type deduction:\n  pseudo_method( F\u0026\u0026 fin ):f(std::move(fin)) {}\n\n  // Koenig lookup operator-\u003e*, as this is a pseudo-method it is appropriate:\n  template\u003cclass Variant\u003e // maybe add SFINAE test that LHS is actually a variant.\n  friend decltype(auto) operator-\u003e*( Variant\u0026\u0026 var, pseudo_method const\u0026 method ) {\n    // var-\u003e*method returns a lambda that perfect forwards a function call,\n    // behaving like a method pointer basically:\n    return [\u0026](auto\u0026\u0026...args)-\u003edecltype(auto) {\n      // use visit to get the type of the variant:\n      return std::visit(\n        [\u0026](auto\u0026\u0026 self)-\u003edecltype(auto) {\n          // decltype(x)(x) is perfect forwarding in a lambda:\n          return method.f( decltype(self)(self), decltype(args)(args)... );\n        },\n        std::forward\u003cVar\u003e(var)\n      );\n    };\n  }\n};",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523889677,
        "id": "734a5287-7e37-4e2e-bb4d-6fdbf8b430b4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523889677,
        "parent_id": "8ba36288-cdd1-460b-8345-d5bcc4cdabfd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "this creates a type that overloads "
            ],
            [
              "operator-\u003e*",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " with a "
            ],
            [
              "Variant",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " on the left hand side."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "this creates a type that overloads "
          },
          {
            "Text": "operator-\u003e*",
            "AttrFlags": 2
          },
          {
            "Text": " with a "
          },
          {
            "Text": "Variant",
            "AttrFlags": 2
          },
          {
            "Text": " on the left hand side."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523889677,
        "id": "aee96cbf-6863-413b-b7b4-867fe3230f94",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552345200000,
        "parent_id": "8ba36288-cdd1-460b-8345-d5bcc4cdabfd",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "// C++17 class type deduction to find template argument of `print` here.\n// a pseudo-method lambda should take `self` as its first argument, then\n// the rest of the arguments afterwards, and invoke the action:\npseudo_method print = [](auto\u0026\u0026 self, auto\u0026\u0026...args)-\u003edecltype(auto) {\n  return decltype(self)(self).print( decltype(args)(args)... );\n};"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "// C++17 class type deduction to find template argument of `print` here.\n// a pseudo-method lambda should take `self` as its first argument, then\n// the rest of the arguments afterwards, and invoke the action:\npseudo_method print = [](auto\u0026\u0026 self, auto\u0026\u0026...args)-\u003edecltype(auto) {\n  return decltype(self)(self).print( decltype(args)(args)... );\n};",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523889677,
        "id": "13929ba6-2f86-4b46-98d4-92213bd03c31",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523889677,
        "parent_id": "8ba36288-cdd1-460b-8345-d5bcc4cdabfd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Now if we have 2 types each with a "
            ],
            [
              "print",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Now if we have 2 types each with a "
          },
          {
            "Text": "print",
            "AttrFlags": 2
          },
          {
            "Text": " method:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523889677,
        "id": "b9a8028f-2cfc-4362-bf1c-dae4f1854f16",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552345200000,
        "parent_id": "8ba36288-cdd1-460b-8345-d5bcc4cdabfd",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "struct A {\n  void print( std::ostream\u0026 os ) const {\n    os \u003c\u003c \"A\";\n  }\n};\nstruct B {\n  void print( std::ostream\u0026 os ) const {\n    os \u003c\u003c \"B\";\n  }\n};"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "struct A {\n  void print( std::ostream\u0026 os ) const {\n    os \u003c\u003c \"A\";\n  }\n};\nstruct B {\n  void print( std::ostream\u0026 os ) const {\n    os \u003c\u003c \"B\";\n  }\n};",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523889677,
        "id": "e2579c34-1c21-48e2-9d68-b6c8dfe5115d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523889677,
        "parent_id": "8ba36288-cdd1-460b-8345-d5bcc4cdabfd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "note that they are unrelated types. We can:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "note that they are unrelated types. We can:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523889678,
        "id": "d05c5ca2-dbde-4933-8c9f-1c0290faf4be",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552345200000,
        "parent_id": "8ba36288-cdd1-460b-8345-d5bcc4cdabfd",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "std::variant\u003cA,B\u003e var = A{};\n\n(var-\u003e*print)(std::cout);"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "std::variant\u003cA,B\u003e var = A{};\n\n(var-\u003e*print)(std::cout);",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523889678,
        "id": "7422ceee-2152-4cd3-a885-10afe8a898f6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523889678,
        "parent_id": "8ba36288-cdd1-460b-8345-d5bcc4cdabfd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "and it will dispatch the call directly to "
            ],
            [
              "A::print(std::cout)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " for us. If we instead initialized the "
            ],
            [
              "var",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " with "
            ],
            [
              "B{}",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", it would dispatch to "
            ],
            [
              "B::print(std::cout)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "and it will dispatch the call directly to "
          },
          {
            "Text": "A::print(std::cout)",
            "AttrFlags": 2
          },
          {
            "Text": " for us. If we instead initialized the "
          },
          {
            "Text": "var",
            "AttrFlags": 2
          },
          {
            "Text": " with "
          },
          {
            "Text": "B{}",
            "AttrFlags": 2
          },
          {
            "Text": ", it would dispatch to "
          },
          {
            "Text": "B::print(std::cout)",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523889678,
        "id": "e091843a-33a0-4b00-aa4e-cede2b3a058a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523889678,
        "parent_id": "8ba36288-cdd1-460b-8345-d5bcc4cdabfd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If we created a new type C:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If we created a new type C:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523889678,
        "id": "a85bd540-4d5f-4985-94a7-0c6ad73e4d66",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552345200000,
        "parent_id": "8ba36288-cdd1-460b-8345-d5bcc4cdabfd",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "struct C {};"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "struct C {};",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523889678,
        "id": "e8cc05ef-1472-4efc-9f65-30502d64bcfc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523889678,
        "parent_id": "8ba36288-cdd1-460b-8345-d5bcc4cdabfd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "then:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "then:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523889678,
        "id": "2aa4bdce-0b82-4c42-8a0d-6961b1292c23",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552345200000,
        "parent_id": "8ba36288-cdd1-460b-8345-d5bcc4cdabfd",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "std::variant\u003cA,B,C\u003e var = A{};\n(var-\u003e*print)(std::cout);"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "std::variant\u003cA,B,C\u003e var = A{};\n(var-\u003e*print)(std::cout);",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523889678,
        "id": "902221cf-5e79-4a61-aec9-01ae744d85d7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523889678,
        "parent_id": "8ba36288-cdd1-460b-8345-d5bcc4cdabfd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "will fail to compile, because there is no "
            ],
            [
              "C.print(std::cout)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "will fail to compile, because there is no "
          },
          {
            "Text": "C.print(std::cout)",
            "AttrFlags": 2
          },
          {
            "Text": " method."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523889679,
        "id": "d7d9c448-d2a2-471d-b3f0-e0b629ac69c3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523889679,
        "parent_id": "8ba36288-cdd1-460b-8345-d5bcc4cdabfd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Extending the above would permit free function "
            ],
            [
              "print",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "s to be detected and used, possibly with use of "
            ],
            [
              "if constexpr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " within the "
            ],
            [
              "print",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " pseudo-method."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Extending the above would permit free function "
          },
          {
            "Text": "print",
            "AttrFlags": 2
          },
          {
            "Text": "s to be detected and used, possibly with use of "
          },
          {
            "Text": "if constexpr",
            "AttrFlags": 2
          },
          {
            "Text": " within the "
          },
          {
            "Text": "print",
            "AttrFlags": 2
          },
          {
            "Text": " pseudo-method."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523889680,
        "id": "c96271af-d34a-44c7-97f4-d8f072304695",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523889680,
        "parent_id": "8ba36288-cdd1-460b-8345-d5bcc4cdabfd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "live example",
              [
                [
                  "a",
                  "http://coliru.stacked-crooked.com/a/57f29d8406ad7b51"
                ]
              ]
            ],
            [
              " currently using "
            ],
            [
              "boost::variant",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in place of "
            ],
            [
              "std::variant",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "live example",
            "Link": "http://coliru.stacked-crooked.com/a/57f29d8406ad7b51"
          },
          {
            "Text": " currently using "
          },
          {
            "Text": "boost::variant",
            "AttrFlags": 2
          },
          {
            "Text": " in place of "
          },
          {
            "Text": "std::variant",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      }
    ],
    "title": "Create pseudo-method pointers",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}