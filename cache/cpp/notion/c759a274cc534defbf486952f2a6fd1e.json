{
  "ID": "c759a274-cc53-4def-bf48-6952f2a6fd1e",
  "Root": {
    "alive": true,
    "content": [
      "50aef78a-4dd1-41a9-b979-4a62eb37400e",
      "8c73689c-35c1-48b1-81e3-8b9fc6565c8d",
      "8d1c8fad-b8ae-4889-81e8-212f6df668ad",
      "d361f1ea-e1f2-48e5-90e4-56d61f6df028",
      "a4f466c5-65fc-425b-b491-d01fb98cf1ec",
      "ab53652b-b384-40d0-acde-0c5b12246a57",
      "14c42bad-93a9-40ca-aa4b-cefa77eb88c8",
      "f4778173-8c43-4b0f-8379-b8a7fbbcb96d",
      "6a55a4b1-1c3d-422b-bb97-2fd3afbe3b58",
      "c13d433e-92a8-41c8-bc29-d882622ecf73",
      "f7dd2fad-f5be-4734-8362-188aab64f6e1",
      "bc897a30-8de2-46d6-a61f-b68675898490"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522020478,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "c759a274-cc53-4def-bf48-6952f2a6fd1e",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550656080000,
    "parent_id": "40e8450d-4736-4ad0-be7d-a2d9307ddf4f",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Virtual Inheritance"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522020473,
        "id": "50aef78a-4dd1-41a9-b979-4a62eb37400e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522020473,
        "parent_id": "c759a274-cc53-4def-bf48-6952f2a6fd1e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When using inheritance, you can specify the "
            ],
            [
              "virtual",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " keyword:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When using inheritance, you can specify the "
          },
          {
            "Text": "virtual",
            "AttrFlags": 2
          },
          {
            "Text": " keyword:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522020473,
        "id": "8c73689c-35c1-48b1-81e3-8b9fc6565c8d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522020473,
        "parent_id": "c759a274-cc53-4def-bf48-6952f2a6fd1e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "struct A{};\nstruct B: public virtual A{};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "struct A{};\nstruct B: public virtual A{};",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522020473,
        "id": "8d1c8fad-b8ae-4889-81e8-212f6df668ad",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522020473,
        "parent_id": "c759a274-cc53-4def-bf48-6952f2a6fd1e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When class "
            ],
            [
              "B",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " has virtual base "
            ],
            [
              "A",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " it means that "
            ],
            [
              "A",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "will reside in most derived class",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " of inheritance tree, and thus that most derived class is also responsible for initializing that virtual base:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When class "
          },
          {
            "Text": "B",
            "AttrFlags": 2
          },
          {
            "Text": " has virtual base "
          },
          {
            "Text": "A",
            "AttrFlags": 2
          },
          {
            "Text": " it means that "
          },
          {
            "Text": "A",
            "AttrFlags": 2
          },
          {
            "Text": " "
          },
          {
            "Text": "will reside in most derived class",
            "AttrFlags": 1
          },
          {
            "Text": " of inheritance tree, and thus that most derived class is also responsible for initializing that virtual base:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522020474,
        "id": "d361f1ea-e1f2-48e5-90e4-56d61f6df028",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522020474,
        "parent_id": "c759a274-cc53-4def-bf48-6952f2a6fd1e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "struct A\n{\n    int member;\n    A(int param)\n    {\n        member = param;\n    }\n};\n\nstruct B: virtual A\n{\n    B(): A(5){}\n};\n\nstruct C: B\n{\n    C(): /*A(88)*/ {}\n};\n\nvoid f()\n{\n    C object; //error since C is not initializing it's indirect virtual base `A`\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "struct A\n{\n    int member;\n    A(int param)\n    {\n        member = param;\n    }\n};\n\nstruct B: virtual A\n{\n    B(): A(5){}\n};\n\nstruct C: B\n{\n    C(): /*A(88)*/ {}\n};\n\nvoid f()\n{\n    C object; //error since C is not initializing it's indirect virtual base `A`\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522020474,
        "id": "a4f466c5-65fc-425b-b491-d01fb98cf1ec",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522020474,
        "parent_id": "c759a274-cc53-4def-bf48-6952f2a6fd1e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If we un-comment "
            ],
            [
              "/*A(88)*/",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " we won’t get any error since "
            ],
            [
              "C",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is now initializing it’s indirect virtual base "
            ],
            [
              "A",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If we un-comment "
          },
          {
            "Text": "/*A(88)*/",
            "AttrFlags": 2
          },
          {
            "Text": " we won’t get any error since "
          },
          {
            "Text": "C",
            "AttrFlags": 2
          },
          {
            "Text": " is now initializing it’s indirect virtual base "
          },
          {
            "Text": "A",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522020474,
        "id": "ab53652b-b384-40d0-acde-0c5b12246a57",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522020474,
        "parent_id": "c759a274-cc53-4def-bf48-6952f2a6fd1e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Also note that when we’re creating variable "
            ],
            [
              "object",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", most derived class is "
            ],
            [
              "C",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", so "
            ],
            [
              "C",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is responsible for creating(calling constructor of) "
            ],
            [
              "A",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and thus value of "
            ],
            [
              "A::member",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is "
            ],
            [
              "88",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", not "
            ],
            [
              "5",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (as it would be if we were creating object of type "
            ],
            [
              "B",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ")."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Also note that when we’re creating variable "
          },
          {
            "Text": "object",
            "AttrFlags": 2
          },
          {
            "Text": ", most derived class is "
          },
          {
            "Text": "C",
            "AttrFlags": 2
          },
          {
            "Text": ", so "
          },
          {
            "Text": "C",
            "AttrFlags": 2
          },
          {
            "Text": " is responsible for creating(calling constructor of) "
          },
          {
            "Text": "A",
            "AttrFlags": 2
          },
          {
            "Text": " and thus value of "
          },
          {
            "Text": "A::member",
            "AttrFlags": 2
          },
          {
            "Text": " is "
          },
          {
            "Text": "88",
            "AttrFlags": 2
          },
          {
            "Text": ", not "
          },
          {
            "Text": "5",
            "AttrFlags": 2
          },
          {
            "Text": " (as it would be if we were creating object of type "
          },
          {
            "Text": "B",
            "AttrFlags": 2
          },
          {
            "Text": ")."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522020476,
        "id": "14c42bad-93a9-40ca-aa4b-cefa77eb88c8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522020476,
        "parent_id": "c759a274-cc53-4def-bf48-6952f2a6fd1e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It is useful when solving the "
            ],
            [
              "diamond problem",
              [
                [
                  "a",
                  "https://en.wikipedia.org/wiki/Multiple_inheritance#The_diamond_problem"
                ]
              ]
            ],
            [
              ".:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It is useful when solving the "
          },
          {
            "Text": "diamond problem",
            "Link": "https://en.wikipedia.org/wiki/Multiple_inheritance#The_diamond_problem"
          },
          {
            "Text": ".:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522020476,
        "id": "f4778173-8c43-4b0f-8379-b8a7fbbcb96d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522020476,
        "parent_id": "c759a274-cc53-4def-bf48-6952f2a6fd1e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "A                                        A   A\n/ \\                                       |   |\nB   C                                      B   C\n\\ /                                        \\ /\nD                                          D\nvirtual inheritance                   normal inheritance"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "A                                        A   A\n/ \\                                       |   |\nB   C                                      B   C\n\\ /                                        \\ /\nD                                          D\nvirtual inheritance                   normal inheritance",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522020477,
        "id": "6a55a4b1-1c3d-422b-bb97-2fd3afbe3b58",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522020477,
        "parent_id": "c759a274-cc53-4def-bf48-6952f2a6fd1e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "B",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "C",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " both inherit from "
            ],
            [
              "A",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", and "
            ],
            [
              "D",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " inherits from "
            ],
            [
              "B",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "C",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", so there are 2 instances of "
            ],
            [
              "A",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in "
            ],
            [
              "D",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "! This results in ambiguity when you’re accessing member of "
            ],
            [
              "A",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " through "
            ],
            [
              "D",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", as the compiler has no way of knowing from which class do you want to access that member (the one which "
            ],
            [
              "B",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " inherits, or the one that is inherited by"
            ],
            [
              "C",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "?)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "B",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "C",
            "AttrFlags": 2
          },
          {
            "Text": " both inherit from "
          },
          {
            "Text": "A",
            "AttrFlags": 2
          },
          {
            "Text": ", and "
          },
          {
            "Text": "D",
            "AttrFlags": 2
          },
          {
            "Text": " inherits from "
          },
          {
            "Text": "B",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "C",
            "AttrFlags": 2
          },
          {
            "Text": ", so there are 2 instances of "
          },
          {
            "Text": "A",
            "AttrFlags": 2
          },
          {
            "Text": " in "
          },
          {
            "Text": "D",
            "AttrFlags": 2
          },
          {
            "Text": "! This results in ambiguity when you’re accessing member of "
          },
          {
            "Text": "A",
            "AttrFlags": 2
          },
          {
            "Text": " through "
          },
          {
            "Text": "D",
            "AttrFlags": 2
          },
          {
            "Text": ", as the compiler has no way of knowing from which class do you want to access that member (the one which "
          },
          {
            "Text": "B",
            "AttrFlags": 2
          },
          {
            "Text": " inherits, or the one that is inherited by"
          },
          {
            "Text": "C",
            "AttrFlags": 2
          },
          {
            "Text": "?)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522020477,
        "id": "c13d433e-92a8-41c8-bc29-d882622ecf73",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522020477,
        "parent_id": "c759a274-cc53-4def-bf48-6952f2a6fd1e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Virtual inheritance solves this problem: Since virtual base resides only in most derived object, there will be only one instance of "
            ],
            [
              "A",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in "
            ],
            [
              "D",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Virtual inheritance solves this problem: Since virtual base resides only in most derived object, there will be only one instance of "
          },
          {
            "Text": "A",
            "AttrFlags": 2
          },
          {
            "Text": " in "
          },
          {
            "Text": "D",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522020477,
        "id": "f7dd2fad-f5be-4734-8362-188aab64f6e1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522020477,
        "parent_id": "c759a274-cc53-4def-bf48-6952f2a6fd1e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "struct A\n{\n    void foo() {}\n};\n\nstruct B : public /*virtual*/ A {};\nstruct C : public /*virtual*/ A {};\n\nstruct D : public B, public C\n{\n    void bar()\n    {\n        foo(); //Error, which foo? B::foo() or C::foo()? - Ambiguous\n    }\n};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "struct A\n{\n    void foo() {}\n};\n\nstruct B : public /*virtual*/ A {};\nstruct C : public /*virtual*/ A {};\n\nstruct D : public B, public C\n{\n    void bar()\n    {\n        foo(); //Error, which foo? B::foo() or C::foo()? - Ambiguous\n    }\n};",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522020478,
        "id": "bc897a30-8de2-46d6-a61f-b68675898490",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522020478,
        "parent_id": "c759a274-cc53-4def-bf48-6952f2a6fd1e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Removing the comments resolves the ambiguity."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Removing the comments resolves the ambiguity."
          }
        ]
      }
    ],
    "title": "Virtual Inheritance",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}