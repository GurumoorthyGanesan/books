{
  "ID": "bcab0025-325d-4d0d-a8b2-1018adc89cd4",
  "Root": {
    "alive": true,
    "content": [
      "e1d030ec-d1fe-4883-b50d-8692e933d717",
      "facea50e-1c91-4293-a161-d8482897e53f",
      "b66bbb05-d683-4a91-931e-97ea8d6c74a6",
      "f8c1aaa8-f2c9-4f01-ae31-f6fce1cb1206",
      "00f48f90-906f-4ab0-99f5-cf37c287d4a3",
      "2eab8f3d-6e40-414b-9685-a6ae5d2755d9",
      "3f506eae-774b-46ab-9ef4-6887d0dff037",
      "a27aef3a-0544-4bac-bfc0-2282ce8d41e6",
      "33fa5f01-65bd-40fb-91dc-6c801b1e1a01",
      "c5d75da8-d0db-43c4-96d4-8e8a6d1fb6d6",
      "b7f3821a-3592-4a5c-a407-d1517db6c0e2",
      "43cc56b0-7bc0-4893-89b5-e0508e12abe2",
      "c4fc6c6e-c954-4a5b-8633-53e8bba7d498",
      "d6ac6c5f-fb3b-4299-8a83-06e0ed32681a",
      "00a221b8-7164-433c-b392-852d71fcca75",
      "7e711efd-c8f3-4d89-9a23-943d0ef998f4",
      "cfdce71a-4997-4fa8-88c1-18fe9daef293",
      "de6c9284-aa5b-4d3f-8642-e10bd71a6213",
      "40ca51c3-68b6-4cf5-9e1a-51fe4c01339c",
      "6f29de5c-59d2-4900-9386-3882f77f6d65",
      "107ceee2-3eeb-4692-bc4e-dec1a155669f",
      "6739cf84-0a0f-4d1b-ab5b-d0bce9058735",
      "1d39be08-9252-4237-bd37-7ceafb37777f",
      "0978c579-dd7a-4368-9203-07fdef0ad75d",
      "1bc9791a-32a1-4253-a969-327ed1b06e06",
      "ab9e48a8-4f50-453f-b9ae-b039e4df85e2",
      "b59ac039-7a16-499e-9e08-678282aa67e1",
      "030511c7-0fe2-4531-9dd5-23d055c83824",
      "be35747e-de70-41f7-b6ca-797765d4d8d3"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522044556,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "bcab0025-325d-4d0d-a8b2-1018adc89cd4",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552343580000,
    "parent_id": "8655f492-9c51-4f68-ad52-8b6c1e02a277",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Accessing Elements"
        ]
      ]
    },
    "type": "page",
    "version": 14,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522044543,
        "id": "e1d030ec-d1fe-4883-b50d-8692e933d717",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522044543,
        "parent_id": "bcab0025-325d-4d0d-a8b2-1018adc89cd4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "There are two primary ways of accessing elements in a "
            ],
            [
              "std::vector",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://en.cppreference.com/w/cpp/container/vector"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "There are two primary ways of accessing elements in a "
          },
          {
            "Text": "std::vector",
            "AttrFlags": 2,
            "Link": "http://en.cppreference.com/w/cpp/container/vector"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522044545,
        "id": "facea50e-1c91-4293-a161-d8482897e53f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522044545,
        "parent_id": "bcab0025-325d-4d0d-a8b2-1018adc89cd4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "index-based access"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "index-based access"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522044546,
        "id": "b66bbb05-d683-4a91-931e-97ea8d6c74a6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552343520000,
        "parent_id": "bcab0025-325d-4d0d-a8b2-1018adc89cd4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "iterators",
              [
                [
                  "a",
                  "https://www.notion.so/kjkpublic/Iterators-ee86edbe8dd9497aa24cfa516272404e"
                ]
              ]
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 6,
        "inline_content": [
          {
            "Text": "iterators",
            "Link": "https://www.notion.so/kjkpublic/Iterators-ee86edbe8dd9497aa24cfa516272404e"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522044546,
        "id": "f8c1aaa8-f2c9-4f01-ae31-f6fce1cb1206",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522044546,
        "parent_id": "bcab0025-325d-4d0d-a8b2-1018adc89cd4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Index-based access:"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Index-based access:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522044547,
        "id": "00f48f90-906f-4ab0-99f5-cf37c287d4a3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522044547,
        "parent_id": "bcab0025-325d-4d0d-a8b2-1018adc89cd4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This can be done either with the subscript operator "
            ],
            [
              "[]",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://en.cppreference.com/w/cpp/container/vector/operator_at"
                ]
              ]
            ],
            [
              ", or the member function "
            ],
            [
              "at()",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://en.cppreference.com/w/cpp/container/vector/at"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This can be done either with the subscript operator "
          },
          {
            "Text": "[]",
            "AttrFlags": 2,
            "Link": "http://en.cppreference.com/w/cpp/container/vector/operator_at"
          },
          {
            "Text": ", or the member function "
          },
          {
            "Text": "at()",
            "AttrFlags": 2,
            "Link": "http://en.cppreference.com/w/cpp/container/vector/at"
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522044547,
        "id": "2eab8f3d-6e40-414b-9685-a6ae5d2755d9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522044547,
        "parent_id": "bcab0025-325d-4d0d-a8b2-1018adc89cd4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Both return a reference to the element at the respective position in the "
            ],
            [
              "std::vector",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (unless it’s a "
            ],
            [
              "vector\u003cbool\u003e",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%2B%2B/511/stdvector/2561/vectorbool-the-exception-to-many-many-rules#t=20160725190704070024"
                ]
              ]
            ],
            [
              "), so that it can be read as well as modified (if the vector is not "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ")."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Both return a reference to the element at the respective position in the "
          },
          {
            "Text": "std::vector",
            "AttrFlags": 2
          },
          {
            "Text": " (unless it’s a "
          },
          {
            "Text": "vector\u003cbool\u003e",
            "AttrFlags": 2,
            "Link": "http://stackoverflow.com/documentation/c%2B%2B/511/stdvector/2561/vectorbool-the-exception-to-many-many-rules#t=20160725190704070024"
          },
          {
            "Text": "), so that it can be read as well as modified (if the vector is not "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": ")."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522044549,
        "id": "3f506eae-774b-46ab-9ef4-6887d0dff037",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522044549,
        "parent_id": "bcab0025-325d-4d0d-a8b2-1018adc89cd4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "[]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "at()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " differ in that "
            ],
            [
              "[]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is not guaranteed to perform any bounds checking, while "
            ],
            [
              "at()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " does. Accessing elements where "
            ],
            [
              "index \u003c 0",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "index \u003e= size",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is "
            ],
            [
              "undefined behavior",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%2B%2B/1812/undefined-behavior#t=201607221823520289181"
                ]
              ]
            ],
            [
              " for "
            ],
            [
              "[]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", while "
            ],
            [
              "at()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " throws a "
            ],
            [
              "std::out_of_range",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://en.cppreference.com/w/cpp/error/out_of_range"
                ]
              ]
            ],
            [
              " exception."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "[]",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "at()",
            "AttrFlags": 2
          },
          {
            "Text": " differ in that "
          },
          {
            "Text": "[]",
            "AttrFlags": 2
          },
          {
            "Text": " is not guaranteed to perform any bounds checking, while "
          },
          {
            "Text": "at()",
            "AttrFlags": 2
          },
          {
            "Text": " does. Accessing elements where "
          },
          {
            "Text": "index \u003c 0",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "index \u003e= size",
            "AttrFlags": 2
          },
          {
            "Text": " is "
          },
          {
            "Text": "undefined behavior",
            "Link": "http://stackoverflow.com/documentation/c%2B%2B/1812/undefined-behavior#t=201607221823520289181"
          },
          {
            "Text": " for "
          },
          {
            "Text": "[]",
            "AttrFlags": 2
          },
          {
            "Text": ", while "
          },
          {
            "Text": "at()",
            "AttrFlags": 2
          },
          {
            "Text": " throws a "
          },
          {
            "Text": "std::out_of_range",
            "AttrFlags": 2,
            "Link": "http://en.cppreference.com/w/cpp/error/out_of_range"
          },
          {
            "Text": " exception."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522044549,
        "id": "a27aef3a-0544-4bac-bfc0-2282ce8d41e6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522044549,
        "parent_id": "bcab0025-325d-4d0d-a8b2-1018adc89cd4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note:",
              [
                [
                  "b"
                ],
                [
                  "i"
                ]
              ]
            ],
            [
              " The examples below use C++11-style initialization for clarity, but the operators can be used with all versions (unless marked C++11)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note:",
            "AttrFlags": 5
          },
          {
            "Text": " The examples below use C++11-style initialization for clarity, but the operators can be used with all versions (unless marked C++11)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522044549,
        "id": "33fa5f01-65bd-40fb-91dc-6c801b1e1a01",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552343520000,
        "parent_id": "bcab0025-325d-4d0d-a8b2-1018adc89cd4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "std::vector\u003cint\u003e v{ 1, 2, 3 };\n\n// using []\nint a = v[1];    // a is 2\nv[1] = 4;        // v now contains { 1, 4, 3 }\n\n// using at()\nint b = v.at(2); // b is 3\nv.at(2) = 5;     // v now contains { 1, 4, 5 }\nint c = v.at(3); // throws std::out_of_range exception"
            ]
          ]
        },
        "type": "code",
        "version": 6,
        "code": "std::vector\u003cint\u003e v{ 1, 2, 3 };\n\n// using []\nint a = v[1];    // a is 2\nv[1] = 4;        // v now contains { 1, 4, 3 }\n\n// using at()\nint b = v.at(2); // b is 3\nv.at(2) = 5;     // v now contains { 1, 4, 5 }\nint c = v.at(3); // throws std::out_of_range exception",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522044550,
        "id": "c5d75da8-d0db-43c4-96d4-8e8a6d1fb6d6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522044550,
        "parent_id": "bcab0025-325d-4d0d-a8b2-1018adc89cd4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Because the "
            ],
            [
              "at()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method performs bounds checking and can throw exceptions, it is slower than "
            ],
            [
              "[]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". This makes "
            ],
            [
              "[]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " preferred code where the semantics of the operation guarantee that the index is in bounds. In any case, accesses to elements of vectors are done in constant time. That means accessing to the first element of the vector has the same cost (in time) of accessing the second element, the third element and so on."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Because the "
          },
          {
            "Text": "at()",
            "AttrFlags": 2
          },
          {
            "Text": " method performs bounds checking and can throw exceptions, it is slower than "
          },
          {
            "Text": "[]",
            "AttrFlags": 2
          },
          {
            "Text": ". This makes "
          },
          {
            "Text": "[]",
            "AttrFlags": 2
          },
          {
            "Text": " preferred code where the semantics of the operation guarantee that the index is in bounds. In any case, accesses to elements of vectors are done in constant time. That means accessing to the first element of the vector has the same cost (in time) of accessing the second element, the third element and so on."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522044550,
        "id": "b7f3821a-3592-4a5c-a407-d1517db6c0e2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522044550,
        "parent_id": "bcab0025-325d-4d0d-a8b2-1018adc89cd4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For example, consider this loop"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For example, consider this loop"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522044550,
        "id": "43cc56b0-7bc0-4893-89b5-e0508e12abe2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552343580000,
        "parent_id": "bcab0025-325d-4d0d-a8b2-1018adc89cd4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "for (std::size_t i = 0; i \u003c v.size(); ++i) {\n    v[i] = 1;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "for (std::size_t i = 0; i \u003c v.size(); ++i) {\n    v[i] = 1;\n}",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522044551,
        "id": "c4fc6c6e-c954-4a5b-8633-53e8bba7d498",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522044551,
        "parent_id": "bcab0025-325d-4d0d-a8b2-1018adc89cd4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Here we know that the index variable "
            ],
            [
              "i",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is always in bounds, so it would be a waste of CPU cycles to check that "
            ],
            [
              "i",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is in bounds for every call to "
            ],
            [
              "operator[]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Here we know that the index variable "
          },
          {
            "Text": "i",
            "AttrFlags": 2
          },
          {
            "Text": " is always in bounds, so it would be a waste of CPU cycles to check that "
          },
          {
            "Text": "i",
            "AttrFlags": 2
          },
          {
            "Text": " is in bounds for every call to "
          },
          {
            "Text": "operator[]",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522044551,
        "id": "d6ac6c5f-fb3b-4299-8a83-06e0ed32681a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522044551,
        "parent_id": "bcab0025-325d-4d0d-a8b2-1018adc89cd4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "front()",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://en.cppreference.com/w/cpp/container/vector/front"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "back()",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://en.cppreference.com/w/cpp/container/vector/back"
                ]
              ]
            ],
            [
              " member functions allow easy reference access to the first and last element of the vector, respectively. These positions are frequently used, and the special accessors can be more readable than their alternatives using "
            ],
            [
              "[]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "front()",
            "AttrFlags": 2,
            "Link": "http://en.cppreference.com/w/cpp/container/vector/front"
          },
          {
            "Text": " and "
          },
          {
            "Text": "back()",
            "AttrFlags": 2,
            "Link": "http://en.cppreference.com/w/cpp/container/vector/back"
          },
          {
            "Text": " member functions allow easy reference access to the first and last element of the vector, respectively. These positions are frequently used, and the special accessors can be more readable than their alternatives using "
          },
          {
            "Text": "[]",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522044552,
        "id": "00a221b8-7164-433c-b392-852d71fcca75",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552343580000,
        "parent_id": "bcab0025-325d-4d0d-a8b2-1018adc89cd4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "std::vector\u003cint\u003e v{ 4, 5, 6 }; // In pre-C++11 this is more verbose\n\nint a = v.front();   // a is 4, v.front() is equivalent to v[0]\nv.front() = 3;       // v now contains {3, 5, 6}\nint b = v.back();    // b is 6, v.back() is equivalent to v[v.size() - 1]\nv.back() = 7;        // v now contains {3, 5, 7}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "std::vector\u003cint\u003e v{ 4, 5, 6 }; // In pre-C++11 this is more verbose\n\nint a = v.front();   // a is 4, v.front() is equivalent to v[0]\nv.front() = 3;       // v now contains {3, 5, 6}\nint b = v.back();    // b is 6, v.back() is equivalent to v[v.size() - 1]\nv.back() = 7;        // v now contains {3, 5, 7}",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522044553,
        "id": "7e711efd-c8f3-4d89-9a23-943d0ef998f4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522044553,
        "parent_id": "bcab0025-325d-4d0d-a8b2-1018adc89cd4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note",
              [
                [
                  "b"
                ],
                [
                  "i"
                ]
              ]
            ],
            [
              ": It is "
            ],
            [
              "undefined behavior",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%2B%2B/1812/undefined-behavior#t=201608052302241671564"
                ]
              ]
            ],
            [
              " to invoke "
            ],
            [
              "front()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "back()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " on an empty vector. You need to check that the container is not empty using the "
            ],
            [
              "empty()",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://en.cppreference.com/w/cpp/container/vector/empty"
                ]
              ]
            ],
            [
              " member function (which checks if the container is empty) before calling "
            ],
            [
              "front()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "back()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". A simple example of the use of ‘empty()’ to test for an empty vector follows:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note",
            "AttrFlags": 5
          },
          {
            "Text": ": It is "
          },
          {
            "Text": "undefined behavior",
            "Link": "http://stackoverflow.com/documentation/c%2B%2B/1812/undefined-behavior#t=201608052302241671564"
          },
          {
            "Text": " to invoke "
          },
          {
            "Text": "front()",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "back()",
            "AttrFlags": 2
          },
          {
            "Text": " on an empty vector. You need to check that the container is not empty using the "
          },
          {
            "Text": "empty()",
            "AttrFlags": 2,
            "Link": "http://en.cppreference.com/w/cpp/container/vector/empty"
          },
          {
            "Text": " member function (which checks if the container is empty) before calling "
          },
          {
            "Text": "front()",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "back()",
            "AttrFlags": 2
          },
          {
            "Text": ". A simple example of the use of ‘empty()’ to test for an empty vector follows:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522044553,
        "id": "cfdce71a-4997-4fa8-88c1-18fe9daef293",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552343580000,
        "parent_id": "bcab0025-325d-4d0d-a8b2-1018adc89cd4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "int main ()\n{\n  std::vector\u003cint\u003e v;\n  int sum (0);\n\n  for (int i=1;i\u003c=10;i++) v.push_back(i);//create and initialize the vector\n\n  while (!v.empty())//loop through until the vector tests to be empty\n  {\n     sum += v.back();//keep a running total\n     v.pop_back();//pop out the element which removes it from the vector\n  }\n\n  std::cout \u003c\u003c \"total: \" \u003c\u003c sum \u003c\u003c '\\n';//output the total to the user\n\n  return 0;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "int main ()\n{\n  std::vector\u003cint\u003e v;\n  int sum (0);\n\n  for (int i=1;i\u003c=10;i++) v.push_back(i);//create and initialize the vector\n\n  while (!v.empty())//loop through until the vector tests to be empty\n  {\n     sum += v.back();//keep a running total\n     v.pop_back();//pop out the element which removes it from the vector\n  }\n\n  std::cout \u003c\u003c \"total: \" \u003c\u003c sum \u003c\u003c '\\n';//output the total to the user\n\n  return 0;\n}",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522044553,
        "id": "de6c9284-aa5b-4d3f-8642-e10bd71a6213",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522044553,
        "parent_id": "bcab0025-325d-4d0d-a8b2-1018adc89cd4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The example above creates a vector with a sequence of numbers from 1 to 10. Then it pops the elements of the vector out until the vector is empty (using ‘empty()’) to prevent undefined behavior. Then the sum of the numbers in the vector is calculated and displayed to the user."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The example above creates a vector with a sequence of numbers from 1 to 10. Then it pops the elements of the vector out until the vector is empty (using ‘empty()’) to prevent undefined behavior. Then the sum of the numbers in the vector is calculated and displayed to the user."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522044553,
        "id": "40ca51c3-68b6-4cf5-9e1a-51fe4c01339c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522044553,
        "parent_id": "bcab0025-325d-4d0d-a8b2-1018adc89cd4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "data()",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://en.cppreference.com/w/cpp/container/vector/data"
                ]
              ]
            ],
            [
              " method returns a pointer to the raw memory used by the "
            ],
            [
              "std::vector",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to internally store its elements. This is most often used when passing the vector data to legacy code that expects a C-style array."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "data()",
            "AttrFlags": 2,
            "Link": "http://en.cppreference.com/w/cpp/container/vector/data"
          },
          {
            "Text": " method returns a pointer to the raw memory used by the "
          },
          {
            "Text": "std::vector",
            "AttrFlags": 2
          },
          {
            "Text": " to internally store its elements. This is most often used when passing the vector data to legacy code that expects a C-style array."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522044553,
        "id": "6f29de5c-59d2-4900-9386-3882f77f6d65",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552343580000,
        "parent_id": "bcab0025-325d-4d0d-a8b2-1018adc89cd4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "std::vector\u003cint\u003e v{ 1, 2, 3, 4 }; // v contains {1, 2, 3, 4}\nint* p = v.data(); // p points to 1\n*p = 4;            // v now contains {4, 2, 3, 4}\n++p;               // p points to 2\n*p = 3;            // v now contains {4, 3, 3, 4}\np[1] = 2;          // v now contains {4, 3, 2, 4}\n*(p + 2) = 1;      // v now contains {4, 3, 2, 1}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "std::vector\u003cint\u003e v{ 1, 2, 3, 4 }; // v contains {1, 2, 3, 4}\nint* p = v.data(); // p points to 1\n*p = 4;            // v now contains {4, 2, 3, 4}\n++p;               // p points to 2\n*p = 3;            // v now contains {4, 3, 3, 4}\np[1] = 2;          // v now contains {4, 3, 2, 4}\n*(p + 2) = 1;      // v now contains {4, 3, 2, 1}",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522044554,
        "id": "107ceee2-3eeb-4692-bc4e-dec1a155669f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522044554,
        "parent_id": "bcab0025-325d-4d0d-a8b2-1018adc89cd4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Before C++11, the "
            ],
            [
              "data()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method can be simulated by calling "
            ],
            [
              "front()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and taking the address of the returned value:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Before C++11, the "
          },
          {
            "Text": "data()",
            "AttrFlags": 2
          },
          {
            "Text": " method can be simulated by calling "
          },
          {
            "Text": "front()",
            "AttrFlags": 2
          },
          {
            "Text": " and taking the address of the returned value:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522044554,
        "id": "6739cf84-0a0f-4d1b-ab5b-d0bce9058735",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552343580000,
        "parent_id": "bcab0025-325d-4d0d-a8b2-1018adc89cd4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "std::vector\u003cint\u003e v(4);\nint* ptr = \u0026(v.front()); // or \u0026v[0]"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "std::vector\u003cint\u003e v(4);\nint* ptr = \u0026(v.front()); // or \u0026v[0]",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522044554,
        "id": "1d39be08-9252-4237-bd37-7ceafb37777f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522044554,
        "parent_id": "bcab0025-325d-4d0d-a8b2-1018adc89cd4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This works because vectors are always guaranteed to store their elements in contiguous memory locations, assuming the contents of the vector doesn’t override unary "
            ],
            [
              "operator\u0026",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". If it does, you’ll have to re-implement "
            ],
            [
              "std::addressof",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://en.cppreference.com/w/cpp/memory/addressof"
                ]
              ]
            ],
            [
              " in pre-C++11. It also assumes that the vector isn’t empty."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This works because vectors are always guaranteed to store their elements in contiguous memory locations, assuming the contents of the vector doesn’t override unary "
          },
          {
            "Text": "operator\u0026",
            "AttrFlags": 2
          },
          {
            "Text": ". If it does, you’ll have to re-implement "
          },
          {
            "Text": "std::addressof",
            "AttrFlags": 2,
            "Link": "http://en.cppreference.com/w/cpp/memory/addressof"
          },
          {
            "Text": " in pre-C++11. It also assumes that the vector isn’t empty."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522044554,
        "id": "0978c579-dd7a-4368-9203-07fdef0ad75d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522044554,
        "parent_id": "bcab0025-325d-4d0d-a8b2-1018adc89cd4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Iterators:"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Iterators:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522044555,
        "id": "1bc9791a-32a1-4253-a969-327ed1b06e06",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522044555,
        "parent_id": "bcab0025-325d-4d0d-a8b2-1018adc89cd4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Iterators are explained in more detail in the example “Iterating over "
            ],
            [
              "std::vector",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "” and the article "
            ],
            [
              "Iterators",
              [
                [
                  "a",
                  "https://stackoverflow.com/documentation/c%2B%2B/473/iterators/1709/overview#t=20160613174720948501"
                ]
              ]
            ],
            [
              ". In short, they act similarly to pointers to the elements of the vector:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Iterators are explained in more detail in the example “Iterating over "
          },
          {
            "Text": "std::vector",
            "AttrFlags": 2
          },
          {
            "Text": "” and the article "
          },
          {
            "Text": "Iterators",
            "Link": "https://stackoverflow.com/documentation/c%2B%2B/473/iterators/1709/overview#t=20160613174720948501"
          },
          {
            "Text": ". In short, they act similarly to pointers to the elements of the vector:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522044555,
        "id": "ab9e48a8-4f50-453f-b9ae-b039e4df85e2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552343580000,
        "parent_id": "bcab0025-325d-4d0d-a8b2-1018adc89cd4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "std::vector\u003cint\u003e v{ 4, 5, 6 };\n\nauto it = v.begin();\nint i = *it;        // i is 4\n++it; \ni = *it;            // i is 5\n*it = 6;            // v contains { 4, 6, 6 }\nauto e = v.end();   // e points to the element after the end of v. It can be \n                    // used to check whether an iterator reached the end of the vector:\n++it; \nit == v.end();      // false, it points to the element at position 2 (with value 6)\n++it;\nit == v.end();      // true"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "std::vector\u003cint\u003e v{ 4, 5, 6 };\n\nauto it = v.begin();\nint i = *it;        // i is 4\n++it; \ni = *it;            // i is 5\n*it = 6;            // v contains { 4, 6, 6 }\nauto e = v.end();   // e points to the element after the end of v. It can be \n                    // used to check whether an iterator reached the end of the vector:\n++it; \nit == v.end();      // false, it points to the element at position 2 (with value 6)\n++it;\nit == v.end();      // true",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522044555,
        "id": "b59ac039-7a16-499e-9e08-678282aa67e1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522044555,
        "parent_id": "bcab0025-325d-4d0d-a8b2-1018adc89cd4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It is consistent with the standard that a "
            ],
            [
              "std::vector\u003cT\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "’s iterators actually "
            ],
            [
              "be",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "T*",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "s, but most standard libraries do not do this. Not doing this both improves error messages, catches non-portable code, and can be used to instrument the iterators with debugging checks in non-release builds. Then, in release builds, the class wrapping around the underlying pointer is optimized away."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It is consistent with the standard that a "
          },
          {
            "Text": "std::vector\u003cT\u003e",
            "AttrFlags": 2
          },
          {
            "Text": "’s iterators actually "
          },
          {
            "Text": "be",
            "AttrFlags": 4
          },
          {
            "Text": " "
          },
          {
            "Text": "T*",
            "AttrFlags": 2
          },
          {
            "Text": "s, but most standard libraries do not do this. Not doing this both improves error messages, catches non-portable code, and can be used to instrument the iterators with debugging checks in non-release builds. Then, in release builds, the class wrapping around the underlying pointer is optimized away."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522044556,
        "id": "030511c7-0fe2-4531-9dd5-23d055c83824",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522044556,
        "parent_id": "bcab0025-325d-4d0d-a8b2-1018adc89cd4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You can persist a reference or a pointer to an element of a vector for indirect access. These references or pointers to elements in the "
            ],
            [
              "vector",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " remain stable and access remains defined unless you add/remove elements at or before the element in the "
            ],
            [
              "vector",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", or you cause the "
            ],
            [
              "vector",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " capacity to change. This is the same as the rule for invalidating iterators."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You can persist a reference or a pointer to an element of a vector for indirect access. These references or pointers to elements in the "
          },
          {
            "Text": "vector",
            "AttrFlags": 2
          },
          {
            "Text": " remain stable and access remains defined unless you add/remove elements at or before the element in the "
          },
          {
            "Text": "vector",
            "AttrFlags": 2
          },
          {
            "Text": ", or you cause the "
          },
          {
            "Text": "vector",
            "AttrFlags": 2
          },
          {
            "Text": " capacity to change. This is the same as the rule for invalidating iterators."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522044556,
        "id": "be35747e-de70-41f7-b6ca-797765d4d8d3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552343580000,
        "parent_id": "bcab0025-325d-4d0d-a8b2-1018adc89cd4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "std::vector\u003cint\u003e v{ 1, 2, 3 };\nint* p = v.data() + 1;     // p points to 2\nv.insert(v.begin(), 0);    // p is now invalid, accessing *p is a undefined behavior.\np = v.data() + 1;          // p points to 1\nv.reserve(10);             // p is now invalid, accessing *p is a undefined behavior.\np = v.data() + 1;          // p points to 1\nv.erase(v.begin());        // p is now invalid, accessing *p is a undefined behavior."
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "std::vector\u003cint\u003e v{ 1, 2, 3 };\nint* p = v.data() + 1;     // p points to 2\nv.insert(v.begin(), 0);    // p is now invalid, accessing *p is a undefined behavior.\np = v.data() + 1;          // p points to 1\nv.reserve(10);             // p is now invalid, accessing *p is a undefined behavior.\np = v.data() + 1;          // p points to 1\nv.erase(v.begin());        // p is now invalid, accessing *p is a undefined behavior.",
        "code_language": "C++"
      }
    ],
    "title": "Accessing Elements",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}