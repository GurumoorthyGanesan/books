{
  "ID": "c8d066d6-649c-48f7-9066-75086423fccf",
  "Root": {
    "alive": true,
    "content": [
      "a99be1a8-2e64-4afd-81fe-b8e1901f7a56",
      "0a05ce9e-7442-4481-a48c-a82470ad2578",
      "85b134d0-9530-46e8-8691-73f785cb21ca",
      "bac32db1-e460-4426-b126-61b474cd069b",
      "cca000d7-26b5-4f6d-984c-44716067fff9",
      "3f7151dc-3947-438c-981f-f2392dcbdbe7",
      "86054308-92a4-4065-944e-920c53e399c9",
      "705697c6-a4dc-46ca-b0ad-43c838aeaaa3",
      "9aefdebd-37c8-4eeb-9b1a-4572f3488ac7",
      "6c31f8af-a2dc-41da-aff0-6f3045da6822",
      "a35d9e82-23d6-4e2c-9ef0-099a25c30658",
      "3ae7bae1-f6ad-49cc-98c4-0c392fb3f8ee",
      "051ffe17-9e23-4e36-8227-a4520e49bbd1",
      "6524467e-4ac0-4e9e-964e-06216e8f41b3",
      "31a86f9c-3bf4-49eb-9fc4-c41c2ef60cf3",
      "12acb756-4de3-48d1-a06e-feb4b9f47fdc"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550525496617,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "c8d066d6-649c-48f7-9066-75086423fccf",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550781480000,
    "parent_id": "ecf8cc46-eac4-4c36-a422-ed2cca054451",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Output stream manipulators"
        ]
      ]
    },
    "type": "page",
    "version": 17,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525496611,
        "id": "a99be1a8-2e64-4afd-81fe-b8e1901f7a56",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525496611,
        "parent_id": "c8d066d6-649c-48f7-9066-75086423fccf",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "std::ends",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://en.cppreference.com/w/cpp/io/manip/ends"
                ]
              ]
            ],
            [
              " - inserts a null character "
            ],
            [
              "'\\0'",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to output stream. More formally this manipulator’s declaration looks like"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "std::ends",
            "AttrFlags": 2,
            "Link": "http://en.cppreference.com/w/cpp/io/manip/ends"
          },
          {
            "Text": " - inserts a null character "
          },
          {
            "Text": "'\\0'",
            "AttrFlags": 2
          },
          {
            "Text": " to output stream. More formally this manipulator’s declaration looks like"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525496611,
        "id": "0a05ce9e-7442-4481-a48c-a82470ad2578",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550781360000,
        "parent_id": "c8d066d6-649c-48f7-9066-75086423fccf",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "template \u003cclass charT, class traits\u003e\nstd::basic_ostream\u003ccharT, traits\u003e\u0026 ends(std::basic_ostream\u003ccharT, traits\u003e\u0026 os);"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "template \u003cclass charT, class traits\u003e\nstd::basic_ostream\u003ccharT, traits\u003e\u0026 ends(std::basic_ostream\u003ccharT, traits\u003e\u0026 os);",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525496611,
        "id": "85b134d0-9530-46e8-8691-73f785cb21ca",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525496611,
        "parent_id": "c8d066d6-649c-48f7-9066-75086423fccf",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "and this manipulator places character by calling "
            ],
            [
              "os.put(charT())",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " when used in an expression"
            ],
            [
              "os \u003c\u003c std::ends;",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "and this manipulator places character by calling "
          },
          {
            "Text": "os.put(charT())",
            "AttrFlags": 2
          },
          {
            "Text": " when used in an expression"
          },
          {
            "Text": "os \u003c\u003c std::ends;",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550781480000,
        "id": "bac32db1-e460-4426-b126-61b474cd069b",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550781480000,
        "parent_id": "c8d066d6-649c-48f7-9066-75086423fccf",
        "parent_table": "block",
        "type": "text",
        "version": 3
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525496612,
        "id": "cca000d7-26b5-4f6d-984c-44716067fff9",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550781480000,
        "parent_id": "c8d066d6-649c-48f7-9066-75086423fccf",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "std::endl",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://en.cppreference.com/w/cpp/io/manip/endl"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "std::flush",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://en.cppreference.com/w/cpp/io/manip/flush"
                ]
              ]
            ],
            [
              " both flush output stream "
            ],
            [
              "out",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " by calling "
            ],
            [
              "out.flush()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". It causes immediately producing output. But "
            ],
            [
              "std::endl",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " inserts end of line "
            ],
            [
              "'\\n'",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " symbol before flushing."
            ]
          ]
        },
        "type": "text",
        "version": 3,
        "inline_content": [
          {
            "Text": "std::endl",
            "AttrFlags": 2,
            "Link": "http://en.cppreference.com/w/cpp/io/manip/endl"
          },
          {
            "Text": " and "
          },
          {
            "Text": "std::flush",
            "AttrFlags": 2,
            "Link": "http://en.cppreference.com/w/cpp/io/manip/flush"
          },
          {
            "Text": " both flush output stream "
          },
          {
            "Text": "out",
            "AttrFlags": 2
          },
          {
            "Text": " by calling "
          },
          {
            "Text": "out.flush()",
            "AttrFlags": 2
          },
          {
            "Text": ". It causes immediately producing output. But "
          },
          {
            "Text": "std::endl",
            "AttrFlags": 2
          },
          {
            "Text": " inserts end of line "
          },
          {
            "Text": "'\\n'",
            "AttrFlags": 2
          },
          {
            "Text": " symbol before flushing."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525496612,
        "id": "3f7151dc-3947-438c-981f-f2392dcbdbe7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550781360000,
        "parent_id": "c8d066d6-649c-48f7-9066-75086423fccf",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "std::cout \u003c\u003c \"First line.\" \u003c\u003c std::endl \u003c\u003c \"Second line. \" \u003c\u003c std::flush\n          \u003c\u003c \"Still second line.\";\n// Output: First line.\n// Second line. Still second line."
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "std::cout \u003c\u003c \"First line.\" \u003c\u003c std::endl \u003c\u003c \"Second line. \" \u003c\u003c std::flush\n          \u003c\u003c \"Still second line.\";\n// Output: First line.\n// Second line. Still second line.",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550781420000,
        "id": "86054308-92a4-4065-944e-920c53e399c9",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550781420000,
        "parent_id": "c8d066d6-649c-48f7-9066-75086423fccf",
        "parent_table": "block",
        "type": "text",
        "version": 3
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525496613,
        "id": "705697c6-a4dc-46ca-b0ad-43c838aeaaa3",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550781420000,
        "parent_id": "c8d066d6-649c-48f7-9066-75086423fccf",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "std::setfill(c)",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://en.cppreference.com/w/cpp/io/manip/setfill"
                ]
              ]
            ],
            [
              " - changes the fill character to "
            ],
            [
              "c",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Often used with "
            ],
            [
              "std::setw",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 3,
        "inline_content": [
          {
            "Text": "std::setfill(c)",
            "AttrFlags": 2,
            "Link": "http://en.cppreference.com/w/cpp/io/manip/setfill"
          },
          {
            "Text": " - changes the fill character to "
          },
          {
            "Text": "c",
            "AttrFlags": 2
          },
          {
            "Text": ". Often used with "
          },
          {
            "Text": "std::setw",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525496613,
        "id": "9aefdebd-37c8-4eeb-9b1a-4572f3488ac7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550781420000,
        "parent_id": "c8d066d6-649c-48f7-9066-75086423fccf",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "std::cout \u003c\u003c \"\\nDefault fill: \" \u003c\u003c std::setw(10) \u003c\u003c 79 \u003c\u003c '\\n'\n          \u003c\u003c \"setfill('#'): \" \u003c\u003c std::setfill('#')\n          \u003c\u003c std::setw(10) \u003c\u003c 42 \u003c\u003c '\\n';\n// Output:\n// Default fill:         79\n// setfill('#'): ########79"
            ]
          ]
        },
        "type": "code",
        "version": 6,
        "code": "std::cout \u003c\u003c \"\\nDefault fill: \" \u003c\u003c std::setw(10) \u003c\u003c 79 \u003c\u003c '\\n'\n          \u003c\u003c \"setfill('#'): \" \u003c\u003c std::setfill('#')\n          \u003c\u003c std::setw(10) \u003c\u003c 42 \u003c\u003c '\\n';\n// Output:\n// Default fill:         79\n// setfill('#'): ########79",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550781420000,
        "id": "6c31f8af-a2dc-41da-aff0-6f3045da6822",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550781420000,
        "parent_id": "c8d066d6-649c-48f7-9066-75086423fccf",
        "parent_table": "block",
        "type": "text",
        "version": 3
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525496615,
        "id": "a35d9e82-23d6-4e2c-9ef0-099a25c30658",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550781420000,
        "parent_id": "c8d066d6-649c-48f7-9066-75086423fccf",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "std::put_money(mon[, intl])",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://en.cppreference.com/w/cpp/io/manip/put_money"
                ]
              ]
            ],
            [
              " [C++11]. In an expression "
            ],
            [
              "out \u003c\u003c std::put_money(mon, intl)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", converts the monetary value "
            ],
            [
              "mon",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (of "
            ],
            [
              "long double",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "std::basic_string",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " type) to its character representation as specified by the "
            ],
            [
              "std::money_put",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://en.cppreference.com/w/cpp/locale/money_put"
                ]
              ]
            ],
            [
              " facet of the locale currently imbued in "
            ],
            [
              "out",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Use international currency strings if "
            ],
            [
              "intl",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is "
            ],
            [
              "true",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", use currency symbols otherwise."
            ]
          ]
        },
        "type": "text",
        "version": 3,
        "inline_content": [
          {
            "Text": "std::put_money(mon[, intl])",
            "AttrFlags": 2,
            "Link": "http://en.cppreference.com/w/cpp/io/manip/put_money"
          },
          {
            "Text": " [C++11]. In an expression "
          },
          {
            "Text": "out \u003c\u003c std::put_money(mon, intl)",
            "AttrFlags": 2
          },
          {
            "Text": ", converts the monetary value "
          },
          {
            "Text": "mon",
            "AttrFlags": 2
          },
          {
            "Text": " (of "
          },
          {
            "Text": "long double",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "std::basic_string",
            "AttrFlags": 2
          },
          {
            "Text": " type) to its character representation as specified by the "
          },
          {
            "Text": "std::money_put",
            "AttrFlags": 2,
            "Link": "http://en.cppreference.com/w/cpp/locale/money_put"
          },
          {
            "Text": " facet of the locale currently imbued in "
          },
          {
            "Text": "out",
            "AttrFlags": 2
          },
          {
            "Text": ". Use international currency strings if "
          },
          {
            "Text": "intl",
            "AttrFlags": 2
          },
          {
            "Text": " is "
          },
          {
            "Text": "true",
            "AttrFlags": 2
          },
          {
            "Text": ", use currency symbols otherwise."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525496615,
        "id": "3ae7bae1-f6ad-49cc-98c4-0c392fb3f8ee",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550781420000,
        "parent_id": "c8d066d6-649c-48f7-9066-75086423fccf",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "long double money = 123.45;\n// or std::string money = \"123.45\";\n \nstd::cout.imbue(std::locale(\"en_US.utf8\"));\nstd::cout \u003c\u003c std::showbase \u003c\u003c \"en_US: \" \u003c\u003c std::put_money(money)\n          \u003c\u003c \" or \" \u003c\u003c std::put_money(money, true) \u003c\u003c '\\n';\n// Output: en_US: $1.23 or USD  1.23\n \nstd::cout.imbue(std::locale(\"ru_RU.utf8\"));\nstd::cout \u003c\u003c \"ru_RU: \" \u003c\u003c std::put_money(money)\n          \u003c\u003c \" or \" \u003c\u003c std::put_money(money, true) \u003c\u003c '\\n';\n// Output: ru_RU: 1.23 руб or 1.23 RUB \n \nstd::cout.imbue(std::locale(\"ja_JP.utf8\"));\nstd::cout \u003c\u003c \"ja_JP: \" \u003c\u003c std::put_money(money)\n          \u003c\u003c \" or \" \u003c\u003c std::put_money(money, true) \u003c\u003c '\\n';\n// Output: ja_JP: ￥123 or JPY  123"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "long double money = 123.45;\n// or std::string money = \"123.45\";\n \nstd::cout.imbue(std::locale(\"en_US.utf8\"));\nstd::cout \u003c\u003c std::showbase \u003c\u003c \"en_US: \" \u003c\u003c std::put_money(money)\n          \u003c\u003c \" or \" \u003c\u003c std::put_money(money, true) \u003c\u003c '\\n';\n// Output: en_US: $1.23 or USD  1.23\n \nstd::cout.imbue(std::locale(\"ru_RU.utf8\"));\nstd::cout \u003c\u003c \"ru_RU: \" \u003c\u003c std::put_money(money)\n          \u003c\u003c \" or \" \u003c\u003c std::put_money(money, true) \u003c\u003c '\\n';\n// Output: ru_RU: 1.23 руб or 1.23 RUB \n \nstd::cout.imbue(std::locale(\"ja_JP.utf8\"));\nstd::cout \u003c\u003c \"ja_JP: \" \u003c\u003c std::put_money(money)\n          \u003c\u003c \" or \" \u003c\u003c std::put_money(money, true) \u003c\u003c '\\n';\n// Output: ja_JP: ￥123 or JPY  123",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550781420000,
        "id": "051ffe17-9e23-4e36-8227-a4520e49bbd1",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550781420000,
        "parent_id": "c8d066d6-649c-48f7-9066-75086423fccf",
        "parent_table": "block",
        "type": "text",
        "version": 3
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525496616,
        "id": "6524467e-4ac0-4e9e-964e-06216e8f41b3",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550781420000,
        "parent_id": "c8d066d6-649c-48f7-9066-75086423fccf",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "std::put_time(tmb, fmt)",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://en.cppreference.com/w/cpp/io/manip/put_time"
                ]
              ]
            ],
            [
              " [C++11] - formats and outputs a date/time value to "
            ],
            [
              "std::tm",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " according to the specified format "
            ],
            [
              "fmt",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 3,
        "inline_content": [
          {
            "Text": "std::put_time(tmb, fmt)",
            "AttrFlags": 2,
            "Link": "http://en.cppreference.com/w/cpp/io/manip/put_time"
          },
          {
            "Text": " [C++11] - formats and outputs a date/time value to "
          },
          {
            "Text": "std::tm",
            "AttrFlags": 2
          },
          {
            "Text": " according to the specified format "
          },
          {
            "Text": "fmt",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525496616,
        "id": "31a86f9c-3bf4-49eb-9fc4-c41c2ef60cf3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525496616,
        "parent_id": "c8d066d6-649c-48f7-9066-75086423fccf",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "tmb",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " - pointer to the calendar time structure "
            ],
            [
              "const std::tm*",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " as obtained from "
            ],
            [
              "localtime()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "gmtime()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". "
            ],
            [
              "fmt",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " - pointer to a null-terminated string "
            ],
            [
              "const CharT*",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " specifying the format of conversion."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "tmb",
            "AttrFlags": 2
          },
          {
            "Text": " - pointer to the calendar time structure "
          },
          {
            "Text": "const std::tm*",
            "AttrFlags": 2
          },
          {
            "Text": " as obtained from "
          },
          {
            "Text": "localtime()",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "gmtime()",
            "AttrFlags": 2
          },
          {
            "Text": ". "
          },
          {
            "Text": "fmt",
            "AttrFlags": 2
          },
          {
            "Text": " - pointer to a null-terminated string "
          },
          {
            "Text": "const CharT*",
            "AttrFlags": 2
          },
          {
            "Text": " specifying the format of conversion."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525496616,
        "id": "12acb756-4de3-48d1-a06e-feb4b9f47fdc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550781420000,
        "parent_id": "c8d066d6-649c-48f7-9066-75086423fccf",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "#include \u003cctime\u003e\n...\n\nstd::time_t t = std::time(nullptr);\nstd::tm tm = *std::localtime(\u0026t);\n\nstd::cout.imbue(std::locale(\"ru_RU.utf8\"));\nstd::cout \u003c\u003c \"\\nru_RU: \" \u003c\u003c std::put_time(\u0026tm, \"%c %Z\") \u003c\u003c '\\n';\n// Possible output:\n// ru_RU: Вт 04 июл 2017 15:08:35 UTC"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "#include \u003cctime\u003e\n...\n\nstd::time_t t = std::time(nullptr);\nstd::tm tm = *std::localtime(\u0026t);\n\nstd::cout.imbue(std::locale(\"ru_RU.utf8\"));\nstd::cout \u003c\u003c \"\\nru_RU: \" \u003c\u003c std::put_time(\u0026tm, \"%c %Z\") \u003c\u003c '\\n';\n// Possible output:\n// ru_RU: Вт 04 июл 2017 15:08:35 UTC",
        "code_language": "C++"
      }
    ],
    "title": "Output stream manipulators",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}