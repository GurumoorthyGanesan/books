{
  "ID": "8f0b3b16-edd5-4f9f-b658-bb0d1b560414",
  "Root": {
    "alive": true,
    "content": [
      "94993f86-8557-4e5f-8d2f-c20060626c19",
      "37ed2b44-7023-49a5-8b52-3c056ad26c1e",
      "7344c3ce-f19e-47f0-ab08-8fc05471357d",
      "23b5020d-1609-475b-9fbf-e51034773286",
      "c620c95d-d1a2-4904-a3fa-6c3b9ad60f7f"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550525408691,
    "id": "8f0b3b16-edd5-4f9f-b658-bb0d1b560414",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550525408691,
    "parent_id": "b1cbbef7-66d3-49c3-aaff-f598af5cdf47",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "060 std future and std async"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525408687,
        "id": "94993f86-8557-4e5f-8d2f-c20060626c19",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525408687,
        "parent_id": "8f0b3b16-edd5-4f9f-b658-bb0d1b560414",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In the following naive parallel merge sort example, "
            ],
            [
              "std::async",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is used to launch multiple parallel merge_sort tasks. "
            ],
            [
              "std::future",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is used to wait for the results and synchronize them:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In the following naive parallel merge sort example, "
          },
          {
            "Text": "std::async",
            "AttrFlags": 2
          },
          {
            "Text": " is used to launch multiple parallel merge_sort tasks. "
          },
          {
            "Text": "std::future",
            "AttrFlags": 2
          },
          {
            "Text": " is used to wait for the results and synchronize them:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525408690,
        "id": "37ed2b44-7023-49a5-8b52-3c056ad26c1e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525408690,
        "parent_id": "8f0b3b16-edd5-4f9f-b658-bb0d1b560414",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003ciostream\u003e\nusing namespace std;\n\n\nvoid merge(int low,int mid,int high, vector\u003cint\u003e\u0026num)\n{\n    vector\u003cint\u003e copy(num.size());\n    int h,i,j,k;\n    h=low;\n    i=low;\n    j=mid+1;\n    \n    while((h\u003c=mid)\u0026\u0026(j\u003c=high))\n    {\n        if(num[h]\u003c=num[j])\n        {\n            copy[i]=num[h];\n            h++;\n        }\n        else\n        {\n            copy[i]=num[j];\n            j++;\n        }\n        i++;\n    }\n    if(h\u003emid)\n    {\n        for(k=j;k\u003c=high;k++)\n        {\n            copy[i]=num[k];\n            i++;\n        }\n    }\n    else\n    {\n        for(k=h;k\u003c=mid;k++)\n        {\n            copy[i]=num[k];\n            i++;\n        }\n    }\n    for(k=low;k\u003c=high;k++)\n        swap(num[k],copy[k]);\n}\n\n\nvoid merge_sort(int low,int high,vector\u003cint\u003e\u0026 num)\n{\n    int mid;\n    if(low\u003chigh)\n    {\n        mid = low + (high-low)/2;\n        auto future1    =  std::async(std::launch::deferred,[\u0026]()\n                                      {\n                                        merge_sort(low,mid,num);\n                                      });\n        auto future2    =  std::async(std::launch::deferred, [\u0026]()\n                                       {\n                                          merge_sort(mid+1,high,num) ;\n                                       });\n        \n        future1.get();\n        future2.get();\n        merge(low,mid,high,num);\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003ciostream\u003e\nusing namespace std;\n\n\nvoid merge(int low,int mid,int high, vector\u003cint\u003e\u0026num)\n{\n    vector\u003cint\u003e copy(num.size());\n    int h,i,j,k;\n    h=low;\n    i=low;\n    j=mid+1;\n    \n    while((h\u003c=mid)\u0026\u0026(j\u003c=high))\n    {\n        if(num[h]\u003c=num[j])\n        {\n            copy[i]=num[h];\n            h++;\n        }\n        else\n        {\n            copy[i]=num[j];\n            j++;\n        }\n        i++;\n    }\n    if(h\u003emid)\n    {\n        for(k=j;k\u003c=high;k++)\n        {\n            copy[i]=num[k];\n            i++;\n        }\n    }\n    else\n    {\n        for(k=h;k\u003c=mid;k++)\n        {\n            copy[i]=num[k];\n            i++;\n        }\n    }\n    for(k=low;k\u003c=high;k++)\n        swap(num[k],copy[k]);\n}\n\n\nvoid merge_sort(int low,int high,vector\u003cint\u003e\u0026 num)\n{\n    int mid;\n    if(low\u003chigh)\n    {\n        mid = low + (high-low)/2;\n        auto future1    =  std::async(std::launch::deferred,[\u0026]()\n                                      {\n                                        merge_sort(low,mid,num);\n                                      });\n        auto future2    =  std::async(std::launch::deferred, [\u0026]()\n                                       {\n                                          merge_sort(mid+1,high,num) ;\n                                       });\n        \n        future1.get();\n        future2.get();\n        merge(low,mid,high,num);\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525408690,
        "id": "7344c3ce-f19e-47f0-ab08-8fc05471357d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525408690,
        "parent_id": "8f0b3b16-edd5-4f9f-b658-bb0d1b560414",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note: In the example "
            ],
            [
              "std::async",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is launched with policy "
            ],
            [
              "std::launch_deferred",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". This is to avoid a new thread being created in every call. In the case of our example, the calls to "
            ],
            [
              "std::async",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " are made out of order, the they synchronize at the calls for "
            ],
            [
              "std::future::get()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note: In the example "
          },
          {
            "Text": "std::async",
            "AttrFlags": 2
          },
          {
            "Text": " is launched with policy "
          },
          {
            "Text": "std::launch_deferred",
            "AttrFlags": 2
          },
          {
            "Text": ". This is to avoid a new thread being created in every call. In the case of our example, the calls to "
          },
          {
            "Text": "std::async",
            "AttrFlags": 2
          },
          {
            "Text": " are made out of order, the they synchronize at the calls for "
          },
          {
            "Text": "std::future::get()",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525408691,
        "id": "23b5020d-1609-475b-9fbf-e51034773286",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525408691,
        "parent_id": "8f0b3b16-edd5-4f9f-b658-bb0d1b560414",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "std::launch_async",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " forces a new thread to be created in every call."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "std::launch_async",
            "AttrFlags": 2
          },
          {
            "Text": " forces a new thread to be created in every call."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525408691,
        "id": "c620c95d-d1a2-4904-a3fa-6c3b9ad60f7f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525408691,
        "parent_id": "8f0b3b16-edd5-4f9f-b658-bb0d1b560414",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The default policy is "
            ],
            [
              "std::launch::deferred| std::launch::async",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", meaning the implementation determines the policy for creating new threads."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The default policy is "
          },
          {
            "Text": "std::launch::deferred| std::launch::async",
            "AttrFlags": 2
          },
          {
            "Text": ", meaning the implementation determines the policy for creating new threads."
          }
        ]
      }
    ],
    "title": "060 std future and std async"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}