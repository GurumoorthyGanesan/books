{
  "ID": "50d516b3-4166-47b1-8743-760e1a9ecb72",
  "Root": {
    "alive": true,
    "content": [
      "8d938436-4ef9-42c9-b004-ea6c39da7622",
      "e3496d10-06a1-49ff-8d04-58b555f09af4",
      "5fd65608-8ba9-498a-aaf7-88283681976a"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550524688686,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "50d516b3-4166-47b1-8743-760e1a9ecb72",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550797800000,
    "parent_id": "7b3003e0-5331-46e9-a216-03a87845d9e4",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "volatile"
        ]
      ]
    },
    "type": "page",
    "version": 12,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524688684,
        "id": "8d938436-4ef9-42c9-b004-ea6c39da7622",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524688684,
        "parent_id": "50d516b3-4166-47b1-8743-760e1a9ecb72",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A type qualifier; when applied to a type, produces the volatile-qualified version of the type. Volatile qualification plays the same role as "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " qualification in the type system, but "
            ],
            [
              "volatile",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " does not prevent objects from being modified; instead, it forces the compiler to treat all accesses to such objects as side effects."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A type qualifier; when applied to a type, produces the volatile-qualified version of the type. Volatile qualification plays the same role as "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": " qualification in the type system, but "
          },
          {
            "Text": "volatile",
            "AttrFlags": 2
          },
          {
            "Text": " does not prevent objects from being modified; instead, it forces the compiler to treat all accesses to such objects as side effects."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524688686,
        "id": "e3496d10-06a1-49ff-8d04-58b555f09af4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524688686,
        "parent_id": "50d516b3-4166-47b1-8743-760e1a9ecb72",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In the example below, if "
            ],
            [
              "memory_mapped_port",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " were not volatile, the compiler could optimize the function so that it performs only the final write, which would be incorrect if "
            ],
            [
              "sizeof(int)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is greater than 1. The "
            ],
            [
              "volatile",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " qualification forces it to treat all "
            ],
            [
              "sizeof(int)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " writes as different side effects and hence perform all of them (in order)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In the example below, if "
          },
          {
            "Text": "memory_mapped_port",
            "AttrFlags": 2
          },
          {
            "Text": " were not volatile, the compiler could optimize the function so that it performs only the final write, which would be incorrect if "
          },
          {
            "Text": "sizeof(int)",
            "AttrFlags": 2
          },
          {
            "Text": " is greater than 1. The "
          },
          {
            "Text": "volatile",
            "AttrFlags": 2
          },
          {
            "Text": " qualification forces it to treat all "
          },
          {
            "Text": "sizeof(int)",
            "AttrFlags": 2
          },
          {
            "Text": " writes as different side effects and hence perform all of them (in order)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524688686,
        "id": "5fd65608-8ba9-498a-aaf7-88283681976a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550797740000,
        "parent_id": "50d516b3-4166-47b1-8743-760e1a9ecb72",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "extern volatile char memory_mapped_port;\nvoid write_to_device(int x) {\n    const char* p = reinterpret_cast\u003cconst char*\u003e(\u0026x);\n    for (int i = 0; i \u003c sizeof(int); i++) {\n        memory_mapped_port = p[i];\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "extern volatile char memory_mapped_port;\nvoid write_to_device(int x) {\n    const char* p = reinterpret_cast\u003cconst char*\u003e(\u0026x);\n    for (int i = 0; i \u003c sizeof(int); i++) {\n        memory_mapped_port = p[i];\n    }\n}",
        "code_language": "C++"
      }
    ],
    "title": "volatile",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}