{
  "ID": "8a191d75-dee0-4318-91dc-5202a0e2ae08",
  "Root": {
    "alive": true,
    "content": [
      "2146fe98-2644-4cfe-8f90-54dc9e130279",
      "318010cf-4e95-4c3e-ab12-a7b6f50c04ed",
      "cab9fb45-a858-4f5d-bc7d-2f4238fd0700",
      "3588b717-9e2c-4010-a2b5-9cd55f24d3f9",
      "96461714-f2f8-4a1e-aa28-598986058f56",
      "159cd382-8dfb-4108-8c03-f0638d603d12"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522708436,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "8a191d75-dee0-4318-91dc-5202a0e2ae08",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550710740000,
    "parent_id": "263edcef-95ee-480a-8c67-1e74662a250a",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Storing function arguments in std::tuple"
        ]
      ]
    },
    "type": "page",
    "version": 11,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522708433,
        "id": "2146fe98-2644-4cfe-8f90-54dc9e130279",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522708433,
        "parent_id": "8a191d75-dee0-4318-91dc-5202a0e2ae08",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Some programs need so store arguments for future calling of some function."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Some programs need so store arguments for future calling of some function."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522708435,
        "id": "318010cf-4e95-4c3e-ab12-a7b6f50c04ed",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522708435,
        "parent_id": "8a191d75-dee0-4318-91dc-5202a0e2ae08",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This example shows how to call any function with arguments stored in std::tuple"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This example shows how to call any function with arguments stored in std::tuple"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522708435,
        "id": "cab9fb45-a858-4f5d-bc7d-2f4238fd0700",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550710740000,
        "parent_id": "8a191d75-dee0-4318-91dc-5202a0e2ae08",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "#include \u003ciostream\u003e\n#include \u003cfunctional\u003e\n#include \u003ctuple\u003e\n#include \u003ciostream\u003e\n\n// simple function to be called\ndouble foo_fn(int x, float y, double z)\n{\n   double res =  x + y + z;\n   std::cout \u003c\u003c \"foo_fn called. x = \" \u003c\u003c x \u003c\u003c \" y = \" \u003c\u003c y \u003c\u003c \" z = \" \u003c\u003c z\n             \u003c\u003c \" res=\" \u003c\u003c res;\n   return res;\n}\n\n// helpers for tuple unrolling\ntemplate\u003cint ...\u003e struct seq {};\ntemplate\u003cint N, int ...S\u003e struct gens : gens\u003cN-1, N-1, S...\u003e {};\ntemplate\u003cint ...S\u003e struct gens\u003c0, S...\u003e{ typedef seq\u003cS...\u003e type; };\n\n// invocation helper \ntemplate\u003ctypename FN, typename P, int ...S\u003e\ndouble call_fn_internal(const FN\u0026 fn, const P\u0026 params, const seq\u003cS...\u003e)\n{\n   return fn(std::get\u003cS\u003e(params) ...);\n}\n// call function with arguments stored in std::tuple\ntemplate\u003ctypename Ret, typename ...Args\u003e\nRet call_fn(const std::function\u003cRet(Args...)\u003e\u0026 fn, \n            const std::tuple\u003cArgs...\u003e\u0026 params)\n{\n    return call_fn_internal(fn, params, typename gens\u003csizeof...(Args)\u003e::type());\n}\n\n\nint main(void)\n{\n  // arguments\n  std::tuple\u003cint, float, double\u003e t = std::make_tuple(1, 5, 10);\n  // function to call\n  std::function\u003cdouble(int, float, double)\u003e fn = foo_fn;\n  \n  // invoke a function with stored arguments\n  call_fn(fn, t);\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "#include \u003ciostream\u003e\n#include \u003cfunctional\u003e\n#include \u003ctuple\u003e\n#include \u003ciostream\u003e\n\n// simple function to be called\ndouble foo_fn(int x, float y, double z)\n{\n   double res =  x + y + z;\n   std::cout \u003c\u003c \"foo_fn called. x = \" \u003c\u003c x \u003c\u003c \" y = \" \u003c\u003c y \u003c\u003c \" z = \" \u003c\u003c z\n             \u003c\u003c \" res=\" \u003c\u003c res;\n   return res;\n}\n\n// helpers for tuple unrolling\ntemplate\u003cint ...\u003e struct seq {};\ntemplate\u003cint N, int ...S\u003e struct gens : gens\u003cN-1, N-1, S...\u003e {};\ntemplate\u003cint ...S\u003e struct gens\u003c0, S...\u003e{ typedef seq\u003cS...\u003e type; };\n\n// invocation helper \ntemplate\u003ctypename FN, typename P, int ...S\u003e\ndouble call_fn_internal(const FN\u0026 fn, const P\u0026 params, const seq\u003cS...\u003e)\n{\n   return fn(std::get\u003cS\u003e(params) ...);\n}\n// call function with arguments stored in std::tuple\ntemplate\u003ctypename Ret, typename ...Args\u003e\nRet call_fn(const std::function\u003cRet(Args...)\u003e\u0026 fn, \n            const std::tuple\u003cArgs...\u003e\u0026 params)\n{\n    return call_fn_internal(fn, params, typename gens\u003csizeof...(Args)\u003e::type());\n}\n\n\nint main(void)\n{\n  // arguments\n  std::tuple\u003cint, float, double\u003e t = std::make_tuple(1, 5, 10);\n  // function to call\n  std::function\u003cdouble(int, float, double)\u003e fn = foo_fn;\n  \n  // invoke a function with stored arguments\n  call_fn(fn, t);\n}",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522708436,
        "id": "3588b717-9e2c-4010-a2b5-9cd55f24d3f9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522708436,
        "parent_id": "8a191d75-dee0-4318-91dc-5202a0e2ae08",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Live",
              [
                [
                  "b"
                ],
                [
                  "a",
                  "http://ideone.com/FZKALn"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Live",
            "AttrFlags": 1,
            "Link": "http://ideone.com/FZKALn"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522708436,
        "id": "96461714-f2f8-4a1e-aa28-598986058f56",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522708436,
        "parent_id": "8a191d75-dee0-4318-91dc-5202a0e2ae08",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Output:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Output:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522708436,
        "id": "159cd382-8dfb-4108-8c03-f0638d603d12",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522708436,
        "parent_id": "8a191d75-dee0-4318-91dc-5202a0e2ae08",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "foo_fn called. x = 1 y = 5 z = 10 res=16"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "foo_fn called. x = 1 y = 5 z = 10 res=16",
        "code_language": "Plain Text"
      }
    ],
    "title": "Storing function arguments in std::tuple",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}