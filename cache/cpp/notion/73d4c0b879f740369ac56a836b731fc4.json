{
  "ID": "73d4c0b8-79f7-4036-9ac5-6a836b731fc4",
  "Root": {
    "alive": true,
    "content": [
      "6ca33a17-5de8-48d1-b000-1020af37fcce",
      "61965121-9838-46a2-b073-90c8cadb20e2",
      "37da44ad-6701-4830-abf2-95c6e7c89e15",
      "98e9eaaf-ce47-417b-90a1-531cba9eea27",
      "822c0db2-00d9-4f87-a870-cba553cb2de3",
      "cacfeec5-dbf7-42d8-8418-fda8571bddfd",
      "9ead256e-799f-4fef-abc9-6f920bf89a4f",
      "fca4db93-4495-49a9-b5df-6dd2ce162fda",
      "21bda71e-d0c0-4767-a084-b396e5cbc475",
      "8236a013-d64d-4dba-b003-d7c2a54178ff",
      "3e0ade98-e4d2-42a1-a541-18090a34e809",
      "94b0e26e-7a25-48e1-94b6-ed68a930240d",
      "6efbaa4b-42c7-4cc0-ae34-d518fd6c0593",
      "3ba716d0-11da-44ae-99bb-9ddcea7823ce",
      "7ae3e8d6-af07-4b8f-b97a-18d30126ce5c",
      "2cc7d00b-ece7-41df-9d16-3fedcc92e52d",
      "cb749415-4b04-40ca-b9f4-a1098e8c5dfd",
      "de386d58-5447-4464-bc92-02504211f987",
      "1a5e9fe5-fce1-4ac2-ad96-a7e78f2cfaa8",
      "a9da884b-a82c-4122-8483-f7f55b7cffff",
      "9ea16d25-54fa-441d-83b4-c820417472b6",
      "70c64068-a40b-43be-ad4c-255ca22476ff"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550525089125,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "73d4c0b8-79f7-4036-9ac5-6a836b731fc4",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551688830248,
    "parent_id": "0789dc55-0210-4292-957d-ed83df8e73af",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Changing the default sort of a set"
        ]
      ]
    },
    "type": "page",
    "version": 4,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525089114,
        "id": "6ca33a17-5de8-48d1-b000-1020af37fcce",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525089114,
        "parent_id": "73d4c0b8-79f7-4036-9ac5-6a836b731fc4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "set",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "multiset",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " have default compare methods, but in some cases you may need to overload them."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "set",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "multiset",
            "AttrFlags": 2
          },
          {
            "Text": " have default compare methods, but in some cases you may need to overload them."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525089118,
        "id": "61965121-9838-46a2-b073-90c8cadb20e2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525089118,
        "parent_id": "73d4c0b8-79f7-4036-9ac5-6a836b731fc4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Let’s imagine we are storing string values in a set, but we know those strings contain only numeric values. By default the sort will be a lexicographical string comparison, so the order won’t match the numerical sort. If you want to apply a sort equivalent to what you would have with "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " values, you need a functor to overload the compare method:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Let’s imagine we are storing string values in a set, but we know those strings contain only numeric values. By default the sort will be a lexicographical string comparison, so the order won’t match the numerical sort. If you want to apply a sort equivalent to what you would have with "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": " values, you need a functor to overload the compare method:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525089118,
        "id": "37da44ad-6701-4830-abf2-95c6e7c89e15",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525089118,
        "parent_id": "73d4c0b8-79f7-4036-9ac5-6a836b731fc4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003ciostream\u003e\n#include \u003cset\u003e\n#include \u003cstdlib.h\u003e \n\nstruct custom_compare final\n{\n    bool operator() (const std::string\u0026 left, const std::string\u0026 right) const\n    {\n        int nLeft = atoi(left.c_str());\n        int nRight = atoi(right.c_str());\n        return nLeft \u003c nRight;\n    }\n};\n\nint main ()\n{\n    std::set\u003cstd::string\u003e sut({\"1\", \"2\", \"5\", \"23\", \"6\", \"290\"});\n  \n    std::cout \u003c\u003c \"### Default sort on std::set\u003cstd::string\u003e :\" \u003c\u003c std::endl;\n    for (auto \u0026\u0026data: sut)\n        std::cout \u003c\u003c data \u003c\u003c std::endl;\n  \n    std::set\u003cstd::string, custom_compare\u003e sut_custom({\"1\", \"2\", \"5\", \"23\", \"6\", \"290\"},\n                                                     custom_compare{}); //\u003c Compare object optional as its default constructible.\n  \n    std::cout \u003c\u003c std::endl \u003c\u003c \"### Custom sort on set :\" \u003c\u003c std::endl;\n    for (auto \u0026\u0026data : sut_custom)\n        std::cout \u003c\u003c data \u003c\u003c std::endl;\n  \n    auto compare_via_lambda = [](auto \u0026\u0026lhs, auto \u0026\u0026rhs){ return lhs \u003e rhs; };\n    using set_via_lambda = std::set\u003cstd::string, decltype(compare_via_lambda)\u003e;\n    set_via_lambda sut_reverse_via_lambda({\"1\", \"2\", \"5\", \"23\", \"6\", \"290\"},\n                                          compare_via_lambda);\n  \n    std::cout \u003c\u003c std::endl \u003c\u003c \"### Lambda sort on set :\" \u003c\u003c std::endl;\n    for (auto \u0026\u0026data : sut_reverse_via_lambda)\n        std::cout \u003c\u003c data \u003c\u003c std::endl;\n\n    return 0;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003ciostream\u003e\n#include \u003cset\u003e\n#include \u003cstdlib.h\u003e \n\nstruct custom_compare final\n{\n    bool operator() (const std::string\u0026 left, const std::string\u0026 right) const\n    {\n        int nLeft = atoi(left.c_str());\n        int nRight = atoi(right.c_str());\n        return nLeft \u003c nRight;\n    }\n};\n\nint main ()\n{\n    std::set\u003cstd::string\u003e sut({\"1\", \"2\", \"5\", \"23\", \"6\", \"290\"});\n  \n    std::cout \u003c\u003c \"### Default sort on std::set\u003cstd::string\u003e :\" \u003c\u003c std::endl;\n    for (auto \u0026\u0026data: sut)\n        std::cout \u003c\u003c data \u003c\u003c std::endl;\n  \n    std::set\u003cstd::string, custom_compare\u003e sut_custom({\"1\", \"2\", \"5\", \"23\", \"6\", \"290\"},\n                                                     custom_compare{}); //\u003c Compare object optional as its default constructible.\n  \n    std::cout \u003c\u003c std::endl \u003c\u003c \"### Custom sort on set :\" \u003c\u003c std::endl;\n    for (auto \u0026\u0026data : sut_custom)\n        std::cout \u003c\u003c data \u003c\u003c std::endl;\n  \n    auto compare_via_lambda = [](auto \u0026\u0026lhs, auto \u0026\u0026rhs){ return lhs \u003e rhs; };\n    using set_via_lambda = std::set\u003cstd::string, decltype(compare_via_lambda)\u003e;\n    set_via_lambda sut_reverse_via_lambda({\"1\", \"2\", \"5\", \"23\", \"6\", \"290\"},\n                                          compare_via_lambda);\n  \n    std::cout \u003c\u003c std::endl \u003c\u003c \"### Lambda sort on set :\" \u003c\u003c std::endl;\n    for (auto \u0026\u0026data : sut_reverse_via_lambda)\n        std::cout \u003c\u003c data \u003c\u003c std::endl;\n\n    return 0;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525089118,
        "id": "98e9eaaf-ce47-417b-90a1-531cba9eea27",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525089118,
        "parent_id": "73d4c0b8-79f7-4036-9ac5-6a836b731fc4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Output will be:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Output will be:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525089119,
        "id": "822c0db2-00d9-4f87-a870-cba553cb2de3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525089119,
        "parent_id": "73d4c0b8-79f7-4036-9ac5-6a836b731fc4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "### Default sort on std::set\u003cstd::string\u003e :\n1\n2\n23\n290\n5\n6\n### Custom sort on set :\n1\n2\n5\n6\n23\n290  \n\n### Lambda sort on set :\n6\n5\n290\n23\n2\n1"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "### Default sort on std::set\u003cstd::string\u003e :\n1\n2\n23\n290\n5\n6\n### Custom sort on set :\n1\n2\n5\n6\n23\n290  \n\n### Lambda sort on set :\n6\n5\n290\n23\n2\n1",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525089119,
        "id": "cacfeec5-dbf7-42d8-8418-fda8571bddfd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525089119,
        "parent_id": "73d4c0b8-79f7-4036-9ac5-6a836b731fc4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In the example above, one can find 3 different ways of adding compare operations to the "
            ],
            [
              "std::set",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", each of them is useful in its own context."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In the example above, one can find 3 different ways of adding compare operations to the "
          },
          {
            "Text": "std::set",
            "AttrFlags": 2
          },
          {
            "Text": ", each of them is useful in its own context."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525089119,
        "id": "9ead256e-799f-4fef-abc9-6f920bf89a4f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525089119,
        "parent_id": "73d4c0b8-79f7-4036-9ac5-6a836b731fc4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Default sort"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Default sort"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525089119,
        "id": "fca4db93-4495-49a9-b5df-6dd2ce162fda",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525089119,
        "parent_id": "73d4c0b8-79f7-4036-9ac5-6a836b731fc4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This will use the compare operator of the key (first template argument). Often, the key will already provide a good default for the "
            ],
            [
              "std::less\u003cT\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " function. Unless this function is specialized, it uses the "
            ],
            [
              "operator\u003c",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " of the object. This is especially useful when other code also tries to use some ordering, as this allows consistency over the whole code base."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This will use the compare operator of the key (first template argument). Often, the key will already provide a good default for the "
          },
          {
            "Text": "std::less\u003cT\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " function. Unless this function is specialized, it uses the "
          },
          {
            "Text": "operator\u003c",
            "AttrFlags": 2
          },
          {
            "Text": " of the object. This is especially useful when other code also tries to use some ordering, as this allows consistency over the whole code base."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525089119,
        "id": "21bda71e-d0c0-4767-a084-b396e5cbc475",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525089119,
        "parent_id": "73d4c0b8-79f7-4036-9ac5-6a836b731fc4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Writing the code this way, will reduce the effort to update your code when the key changes is API, like: a class containing 2 members which changes to a class containing 3 members. By updating the "
            ],
            [
              "operator\u003c",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in the class, all occurrences will get updated."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Writing the code this way, will reduce the effort to update your code when the key changes is API, like: a class containing 2 members which changes to a class containing 3 members. By updating the "
          },
          {
            "Text": "operator\u003c",
            "AttrFlags": 2
          },
          {
            "Text": " in the class, all occurrences will get updated."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525089119,
        "id": "8236a013-d64d-4dba-b003-d7c2a54178ff",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525089120,
        "parent_id": "73d4c0b8-79f7-4036-9ac5-6a836b731fc4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As you might expect, using the default sort is a reasonable default."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "As you might expect, using the default sort is a reasonable default."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525089120,
        "id": "3e0ade98-e4d2-42a1-a541-18090a34e809",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525089120,
        "parent_id": "73d4c0b8-79f7-4036-9ac5-6a836b731fc4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Custom sort"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Custom sort"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525089120,
        "id": "94b0e26e-7a25-48e1-94b6-ed68a930240d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525089120,
        "parent_id": "73d4c0b8-79f7-4036-9ac5-6a836b731fc4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Adding a custom sort via an object with a compare operator is often used when the default comparison doesn’t comply. In the example above this is because the strings are referring to integers. In other cases, it’s often used when you want to compare (smart) pointers based upon the object they refer to or because you need different constraints for comparing (example: comparing "
            ],
            [
              "std::pair",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " by the value of "
            ],
            [
              "first",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ")."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Adding a custom sort via an object with a compare operator is often used when the default comparison doesn’t comply. In the example above this is because the strings are referring to integers. In other cases, it’s often used when you want to compare (smart) pointers based upon the object they refer to or because you need different constraints for comparing (example: comparing "
          },
          {
            "Text": "std::pair",
            "AttrFlags": 2
          },
          {
            "Text": " by the value of "
          },
          {
            "Text": "first",
            "AttrFlags": 2
          },
          {
            "Text": ")."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525089120,
        "id": "6efbaa4b-42c7-4cc0-ae34-d518fd6c0593",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525089120,
        "parent_id": "73d4c0b8-79f7-4036-9ac5-6a836b731fc4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When creating a compare operator, this should be a stable sorting. If the result of the compare operator changes after insert, you will have undefined behavior. As a good practice, your compare operator should only use the constant data (const members, const functions …)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When creating a compare operator, this should be a stable sorting. If the result of the compare operator changes after insert, you will have undefined behavior. As a good practice, your compare operator should only use the constant data (const members, const functions …)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525089120,
        "id": "3ba716d0-11da-44ae-99bb-9ddcea7823ce",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525089120,
        "parent_id": "73d4c0b8-79f7-4036-9ac5-6a836b731fc4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As in the example above, you will often encounter classes without members as compare operators. This results in default constructors and copy constructors. The default constructor allows you to omit the instance at construction time and the copy constructor is required as the set takes a copy of the compare operator."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "As in the example above, you will often encounter classes without members as compare operators. This results in default constructors and copy constructors. The default constructor allows you to omit the instance at construction time and the copy constructor is required as the set takes a copy of the compare operator."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525089120,
        "id": "7ae3e8d6-af07-4b8f-b97a-18d30126ce5c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525089120,
        "parent_id": "73d4c0b8-79f7-4036-9ac5-6a836b731fc4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Lambda sort"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Lambda sort"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525089122,
        "id": "2cc7d00b-ece7-41df-9d16-3fedcc92e52d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525089122,
        "parent_id": "73d4c0b8-79f7-4036-9ac5-6a836b731fc4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Lambdas",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%2B%2B/572/lambdas"
                ]
              ]
            ],
            [
              " are a shorter way to write function objects. This allows writing the compare operator on less lines, making the overall code more readable."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Lambdas",
            "Link": "http://stackoverflow.com/documentation/c%2B%2B/572/lambdas"
          },
          {
            "Text": " are a shorter way to write function objects. This allows writing the compare operator on less lines, making the overall code more readable."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525089122,
        "id": "cb749415-4b04-40ca-b9f4-a1098e8c5dfd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525089122,
        "parent_id": "73d4c0b8-79f7-4036-9ac5-6a836b731fc4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The disadvantage of the use of lambdas is that each lambda gets a specific type at compile time, so "
            ],
            [
              "decltype(lambda)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will be different for each compilation of the same compilation unit (cpp file) as over multiple compilation units (when included via header file). For this reason, its recommended to use function objects as compare operator when used within header files."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The disadvantage of the use of lambdas is that each lambda gets a specific type at compile time, so "
          },
          {
            "Text": "decltype(lambda)",
            "AttrFlags": 2
          },
          {
            "Text": " will be different for each compilation of the same compilation unit (cpp file) as over multiple compilation units (when included via header file). For this reason, its recommended to use function objects as compare operator when used within header files."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525089123,
        "id": "de386d58-5447-4464-bc92-02504211f987",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525089123,
        "parent_id": "73d4c0b8-79f7-4036-9ac5-6a836b731fc4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This construction is often encountered when a "
            ],
            [
              "std::set",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is used within the local scope of a function instead, while the function object is preferred when used as function arguments or class members."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This construction is often encountered when a "
          },
          {
            "Text": "std::set",
            "AttrFlags": 2
          },
          {
            "Text": " is used within the local scope of a function instead, while the function object is preferred when used as function arguments or class members."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525089123,
        "id": "1a5e9fe5-fce1-4ac2-ad96-a7e78f2cfaa8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525089123,
        "parent_id": "73d4c0b8-79f7-4036-9ac5-6a836b731fc4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Other sort options"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Other sort options"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525089123,
        "id": "a9da884b-a82c-4122-8483-f7f55b7cffff",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525089123,
        "parent_id": "73d4c0b8-79f7-4036-9ac5-6a836b731fc4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As the compare operator of "
            ],
            [
              "std::set",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is a template argument, all "
            ],
            [
              "callable objects",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%2B%2B/6073/callable-objects"
                ]
              ]
            ],
            [
              " can be used as compare operator and the examples above are only specific cases. The only restrictions these callable objects have are:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "As the compare operator of "
          },
          {
            "Text": "std::set",
            "AttrFlags": 2
          },
          {
            "Text": " is a template argument, all "
          },
          {
            "Text": "callable objects",
            "Link": "http://stackoverflow.com/documentation/c%2B%2B/6073/callable-objects"
          },
          {
            "Text": " can be used as compare operator and the examples above are only specific cases. The only restrictions these callable objects have are:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525089124,
        "id": "9ea16d25-54fa-441d-83b4-c820417472b6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525089124,
        "parent_id": "73d4c0b8-79f7-4036-9ac5-6a836b731fc4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "They must be copy constructable"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "They must be copy constructable"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525089125,
        "id": "70c64068-a40b-43be-ad4c-255ca22476ff",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525089125,
        "parent_id": "73d4c0b8-79f7-4036-9ac5-6a836b731fc4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "They must be callable with 2 arguments of the type of the key. (implicit conversions are allowed, though not recommended as it can hurt performance)"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "They must be callable with 2 arguments of the type of the key. (implicit conversions are allowed, though not recommended as it can hurt performance)"
          }
        ]
      }
    ],
    "title": "Changing the default sort of a set",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}