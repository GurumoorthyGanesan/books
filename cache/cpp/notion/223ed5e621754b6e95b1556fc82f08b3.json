{
  "ID": "223ed5e6-2175-4b6e-95b1-556fc82f08b3",
  "Root": {
    "alive": true,
    "content": [
      "5ae75f73-9aa5-4b43-97c0-4a4064f63297",
      "e7600ed8-b778-4bd0-949b-00b155dc9ec1",
      "fbe4883a-5363-49bb-bf6b-b4fed53e9a7a",
      "c5b72c68-0b5d-4eb6-ab1b-fa46f9ee64c7",
      "ad6fbb89-86f1-46bf-9b13-b8d1f2bfaece",
      "32f7dbfb-97c7-4651-891c-53ffbab23fce",
      "52aa5478-5e50-4fc1-bdfd-9d3bb6c712bd",
      "6cb8d223-6e2f-4ea4-b758-e7ea02eb2b81",
      "f5045bab-df5a-4b31-8c46-42b233554d3f"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522654598,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "223ed5e6-2175-4b6e-95b1-556fc82f08b3",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550799780000,
    "parent_id": "43b2d3b6-c6aa-4441-b665-3932542c711c",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Definitions"
        ]
      ]
    },
    "type": "page",
    "version": 10,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522654596,
        "id": "5ae75f73-9aa5-4b43-97c0-4a4064f63297",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522654596,
        "parent_id": "223ed5e6-2175-4b6e-95b1-556fc82f08b3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A type has value semantics if the object’s observable state is functionally distinct from all other objects of that type. This means that if you copy an object, you have a new object, and modifications of the new object will not be in any way visible from the old object."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A type has value semantics if the object’s observable state is functionally distinct from all other objects of that type. This means that if you copy an object, you have a new object, and modifications of the new object will not be in any way visible from the old object."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522654597,
        "id": "e7600ed8-b778-4bd0-949b-00b155dc9ec1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522654597,
        "parent_id": "223ed5e6-2175-4b6e-95b1-556fc82f08b3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Most basic C++ types have value semantics:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Most basic C++ types have value semantics:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522654597,
        "id": "fbe4883a-5363-49bb-bf6b-b4fed53e9a7a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550799720000,
        "parent_id": "223ed5e6-2175-4b6e-95b1-556fc82f08b3",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "int i = 5;\nint j = i; //Copied\nj += 20;\nstd::cout \u003c\u003c i; //Prints 5; i is unaffected by changes to j."
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "int i = 5;\nint j = i; //Copied\nj += 20;\nstd::cout \u003c\u003c i; //Prints 5; i is unaffected by changes to j.",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522654597,
        "id": "c5b72c68-0b5d-4eb6-ab1b-fa46f9ee64c7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522654597,
        "parent_id": "223ed5e6-2175-4b6e-95b1-556fc82f08b3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Most standard-library defined types have value semantics too:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Most standard-library defined types have value semantics too:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522654597,
        "id": "ad6fbb89-86f1-46bf-9b13-b8d1f2bfaece",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550799780000,
        "parent_id": "223ed5e6-2175-4b6e-95b1-556fc82f08b3",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "std::vector\u003cint\u003e v1(5, 12); //array of 5 values, 12 in each.\nstd::vector\u003cint\u003e v2 = v1; //Copies the vector.\nv2[3] = 6; v2[4] = 9;\nstd::cout \u003c\u003c v1[3] \u003c\u003c \" \" \u003c\u003c v1[4]; //Writes \"12 12\", since v1 is unchanged."
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "std::vector\u003cint\u003e v1(5, 12); //array of 5 values, 12 in each.\nstd::vector\u003cint\u003e v2 = v1; //Copies the vector.\nv2[3] = 6; v2[4] = 9;\nstd::cout \u003c\u003c v1[3] \u003c\u003c \" \" \u003c\u003c v1[4]; //Writes \"12 12\", since v1 is unchanged.",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522654597,
        "id": "32f7dbfb-97c7-4651-891c-53ffbab23fce",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522654597,
        "parent_id": "223ed5e6-2175-4b6e-95b1-556fc82f08b3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A type is said to have reference semantics if an instance of that type can share its observable state with another object (external to it), such that manipulating one object will cause the state to change within another object."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A type is said to have reference semantics if an instance of that type can share its observable state with another object (external to it), such that manipulating one object will cause the state to change within another object."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522654597,
        "id": "52aa5478-5e50-4fc1-bdfd-9d3bb6c712bd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522654597,
        "parent_id": "223ed5e6-2175-4b6e-95b1-556fc82f08b3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "C++ pointers have value semantics with regard to which object they point to, but they have reference semantics with regard to the "
            ],
            [
              "state",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " of the object they point to:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "C++ pointers have value semantics with regard to which object they point to, but they have reference semantics with regard to the "
          },
          {
            "Text": "state",
            "AttrFlags": 4
          },
          {
            "Text": " of the object they point to:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522654597,
        "id": "6cb8d223-6e2f-4ea4-b758-e7ea02eb2b81",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550799780000,
        "parent_id": "223ed5e6-2175-4b6e-95b1-556fc82f08b3",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "int *pi = new int(4);\nint *pi2 = pi;\npi = new int(16);\nassert(pi2 != pi); //Will always pass.\n\nint *pj = pi;\n*pj += 5;\nstd::cout \u003c\u003c *pi; //Writes 9, since `pi` and `pj` reference the same object."
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "int *pi = new int(4);\nint *pi2 = pi;\npi = new int(16);\nassert(pi2 != pi); //Will always pass.\n\nint *pj = pi;\n*pj += 5;\nstd::cout \u003c\u003c *pi; //Writes 9, since `pi` and `pj` reference the same object.",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522654598,
        "id": "f5045bab-df5a-4b31-8c46-42b233554d3f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522654598,
        "parent_id": "223ed5e6-2175-4b6e-95b1-556fc82f08b3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "C++ references have reference semantics as well."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "C++ references have reference semantics as well."
          }
        ]
      }
    ],
    "title": "Definitions",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}