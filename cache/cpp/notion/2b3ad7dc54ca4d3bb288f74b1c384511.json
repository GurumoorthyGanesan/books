{
  "ID": "2b3ad7dc-54ca-4d3b-b288-f74b1c384511",
  "Root": {
    "alive": true,
    "content": [
      "d33d590e-65bb-4439-a31e-5527406650e0",
      "dbee160a-59ee-445f-9123-fc4bfefd3907",
      "bb8d78a3-c308-4c49-b0ee-2eae979a87b3",
      "7df975ee-89fe-4432-83d4-ef20b297fc28",
      "61c489e2-187c-4065-86cb-9bac4852980b",
      "6c8b7b5a-8184-41f9-be04-a91fb0b16f9f",
      "24274eba-bcee-403e-86dc-533f8678fc27",
      "7fe6b696-924a-4b53-9bff-d0f15a4ac01b",
      "27596fd5-5cb9-46e1-b372-df8b786bcbb0",
      "56eb85b6-06d0-4340-90de-40c67288e802",
      "1f2ec272-9935-4b49-ab1d-b3ea9c22e048",
      "4df84edf-0237-42d1-ba5d-06c60f12fb51",
      "69b0f21c-1338-4660-8f24-c4eb191da65f",
      "bc3e4017-4109-49d0-ae8e-b91e114ecd86",
      "b8255b58-2c94-460c-b72f-2ba9754ab5ae",
      "426a8365-4ed4-4f3c-9d7e-0d4a431df0cd",
      "68ace7ef-e92c-4fd4-b73c-336061edd0ff",
      "8984831b-bdae-41e0-bb2b-92044f7cda03",
      "a30ac972-fc95-4a78-afd2-e9bc3535a80f",
      "0487f83b-9fcb-4be4-8c4a-5d56625af109",
      "4be9a5ed-1311-4e25-b0e8-41ee28fa68c0",
      "b75eb9b9-7ecf-4c78-8707-a98821ab67da",
      "2dfcf090-15c1-431d-aba9-24a5a714fdec",
      "bad543b2-e0c2-4466-b088-9390ac44b839",
      "f030e8bc-764f-4d6a-951d-b7776fc40f10",
      "78d9ad6d-3c12-4da6-b507-38aa6393a27a",
      "7292eda6-84eb-446d-95c5-2425c3c1b23f",
      "e0ab1205-afea-4ef5-8b3e-e26152bf331a",
      "7d0c2aa3-d9e3-4ff3-b50c-caed43258b91",
      "527dde7d-8d8a-48e1-92b3-1c6b110ec79d",
      "462ae97a-d66f-498e-9816-95ccffb05fbd",
      "31a465e0-c81a-43db-8117-200f6729eb04",
      "313d1d7b-4279-4891-8b62-2c87e928c8d8",
      "dd6420c5-4d72-40bc-8c35-7000ff928a49",
      "4f8c8374-d157-42b8-8b79-c26cc64da9fb",
      "499bf4e0-c2ce-47bd-ac5b-033c644832bf",
      "d3d3e2c8-dbfd-4ee2-a07a-8e1b496da893",
      "618816b6-8db6-45c2-94eb-d4dc82962f78",
      "684639f0-9a32-4e1f-a843-288ec517f962"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522064708,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "2b3ad7dc-54ca-4d3b-b288-f74b1c384511",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550655600000,
    "parent_id": "71517390-0244-456d-87c4-82c582ca8abf",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "What is a lambda expression"
        ]
      ]
    },
    "type": "page",
    "version": 10,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522064701,
        "id": "d33d590e-65bb-4439-a31e-5527406650e0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522064701,
        "parent_id": "2b3ad7dc-54ca-4d3b-b288-f74b1c384511",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A "
            ],
            [
              "lambda expression",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " provides a concise way to create simple function objects. A lambda expression is a prvalue whose result object is called "
            ],
            [
              "closure object",
              [
                [
                  "a",
                  "https://en.wikipedia.org/wiki/Closure_(computer_programming)"
                ]
              ]
            ],
            [
              ", which behaves like a function object."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A "
          },
          {
            "Text": "lambda expression",
            "AttrFlags": 1
          },
          {
            "Text": " provides a concise way to create simple function objects. A lambda expression is a prvalue whose result object is called "
          },
          {
            "Text": "closure object",
            "Link": "https://en.wikipedia.org/wiki/Closure_(computer_programming)"
          },
          {
            "Text": ", which behaves like a function object."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522064702,
        "id": "dbee160a-59ee-445f-9123-fc4bfefd3907",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522064702,
        "parent_id": "2b3ad7dc-54ca-4d3b-b288-f74b1c384511",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The name ‘lambda expression’ originates from "
            ],
            [
              "lambda calculus",
              [
                [
                  "a",
                  "https://en.wikipedia.org/wiki/Lambda_calculus"
                ]
              ]
            ],
            [
              ", which is a mathematical formalism invented in the 1930s by Alonzo Church to investigate questions about logic and computability. Lambda calculus formed the basis of "
            ],
            [
              "LISP",
              [
                [
                  "a",
                  "https://en.wikipedia.org/wiki/Lisp_(programming_language)"
                ]
              ]
            ],
            [
              ", a functional programming language. Compared to lambda calculus and LISP, C++ lambda expressions share the properties of being unnamed, and to capture variables from the surrounding context, but they lack the ability to operate on and return functions."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The name ‘lambda expression’ originates from "
          },
          {
            "Text": "lambda calculus",
            "Link": "https://en.wikipedia.org/wiki/Lambda_calculus"
          },
          {
            "Text": ", which is a mathematical formalism invented in the 1930s by Alonzo Church to investigate questions about logic and computability. Lambda calculus formed the basis of "
          },
          {
            "Text": "LISP",
            "Link": "https://en.wikipedia.org/wiki/Lisp_(programming_language)"
          },
          {
            "Text": ", a functional programming language. Compared to lambda calculus and LISP, C++ lambda expressions share the properties of being unnamed, and to capture variables from the surrounding context, but they lack the ability to operate on and return functions."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522064702,
        "id": "bb8d78a3-c308-4c49-b0ee-2eae979a87b3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522064702,
        "parent_id": "2b3ad7dc-54ca-4d3b-b288-f74b1c384511",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A lambda expression is often used as an argument to functions that take a callable object. That can be simpler than creating a named function, which would be only used when passed as the argument. In such cases, lambda expressions are generally preferred because they allow defining the function objects inline."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A lambda expression is often used as an argument to functions that take a callable object. That can be simpler than creating a named function, which would be only used when passed as the argument. In such cases, lambda expressions are generally preferred because they allow defining the function objects inline."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522064702,
        "id": "7df975ee-89fe-4432-83d4-ef20b297fc28",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522064702,
        "parent_id": "2b3ad7dc-54ca-4d3b-b288-f74b1c384511",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A lambda consists typically of three parts: a capture list "
            ],
            [
              "[]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", an optional parameter list "
            ],
            [
              "()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and a body "
            ],
            [
              "{}",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", all of which can be empty:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A lambda consists typically of three parts: a capture list "
          },
          {
            "Text": "[]",
            "AttrFlags": 2
          },
          {
            "Text": ", an optional parameter list "
          },
          {
            "Text": "()",
            "AttrFlags": 2
          },
          {
            "Text": " and a body "
          },
          {
            "Text": "{}",
            "AttrFlags": 2
          },
          {
            "Text": ", all of which can be empty:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522064703,
        "id": "61c489e2-187c-4065-86cb-9bac4852980b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522064703,
        "parent_id": "2b3ad7dc-54ca-4d3b-b288-f74b1c384511",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "[](){}                // An empty lambda, which does and returns nothing"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "[](){}                // An empty lambda, which does and returns nothing",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522064703,
        "id": "6c8b7b5a-8184-41f9-be04-a91fb0b16f9f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522064703,
        "parent_id": "2b3ad7dc-54ca-4d3b-b288-f74b1c384511",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Capture list",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Capture list",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522064704,
        "id": "24274eba-bcee-403e-86dc-533f8678fc27",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522064704,
        "parent_id": "2b3ad7dc-54ca-4d3b-b288-f74b1c384511",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "[]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is the "
            ],
            [
              "capture list",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". By default, variables of the enclosing scope cannot be accessed by a lambda. "
            ],
            [
              "Capturing",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " a variable makes it accessible inside the lambda, either "
            ],
            [
              "as a copy",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%2B%2B/572/lambdas/1856/capture-by-value#t=201607271323349545754"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "as a reference",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%2B%2B/572/lambdas/1951/capture-by-reference#t=201607271323349545754"
                ]
              ]
            ],
            [
              ". Captured variables become a part of the lambda; in contrast to function arguments, they do not have to be passed when calling the lambda."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "[]",
            "AttrFlags": 2
          },
          {
            "Text": " is the "
          },
          {
            "Text": "capture list",
            "AttrFlags": 1
          },
          {
            "Text": ". By default, variables of the enclosing scope cannot be accessed by a lambda. "
          },
          {
            "Text": "Capturing",
            "AttrFlags": 4
          },
          {
            "Text": " a variable makes it accessible inside the lambda, either "
          },
          {
            "Text": "as a copy",
            "Link": "http://stackoverflow.com/documentation/c%2B%2B/572/lambdas/1856/capture-by-value#t=201607271323349545754"
          },
          {
            "Text": " or "
          },
          {
            "Text": "as a reference",
            "Link": "http://stackoverflow.com/documentation/c%2B%2B/572/lambdas/1951/capture-by-reference#t=201607271323349545754"
          },
          {
            "Text": ". Captured variables become a part of the lambda; in contrast to function arguments, they do not have to be passed when calling the lambda."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522064704,
        "id": "7fe6b696-924a-4b53-9bff-d0f15a4ac01b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522064704,
        "parent_id": "2b3ad7dc-54ca-4d3b-b288-f74b1c384511",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int a = 0;                       // Define an integer variable\nauto f = []()   { return a*9; }; // Error: 'a' cannot be accessed\nauto f = [a]()  { return a*9; }; // OK, 'a' is \"captured\" by value\nauto f = [\u0026a]() { return a++; }; // OK, 'a' is \"captured\" by reference\n                                 //      Note: It is the responsibility of the programmer\n                                 //      to ensure that a is not destroyed before the\n                                 //      lambda is called.\nauto b = f();                    // Call the lambda function. a is taken from the capture list and not passed here."
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int a = 0;                       // Define an integer variable\nauto f = []()   { return a*9; }; // Error: 'a' cannot be accessed\nauto f = [a]()  { return a*9; }; // OK, 'a' is \"captured\" by value\nauto f = [\u0026a]() { return a++; }; // OK, 'a' is \"captured\" by reference\n                                 //      Note: It is the responsibility of the programmer\n                                 //      to ensure that a is not destroyed before the\n                                 //      lambda is called.\nauto b = f();                    // Call the lambda function. a is taken from the capture list and not passed here.",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522064704,
        "id": "27596fd5-5cb9-46e1-b372-df8b786bcbb0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522064704,
        "parent_id": "2b3ad7dc-54ca-4d3b-b288-f74b1c384511",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Parameter list",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Parameter list",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522064704,
        "id": "56eb85b6-06d0-4340-90de-40c67288e802",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522064704,
        "parent_id": "2b3ad7dc-54ca-4d3b-b288-f74b1c384511",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is the "
            ],
            [
              "parameter list",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", which is almost the same as in regular functions. If the lambda takes no arguments, these parentheses can be omitted (except if you need to declare the lambda "
            ],
            [
              "mutable",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "). These two lambdas are equivalent:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "()",
            "AttrFlags": 2
          },
          {
            "Text": " is the "
          },
          {
            "Text": "parameter list",
            "AttrFlags": 1
          },
          {
            "Text": ", which is almost the same as in regular functions. If the lambda takes no arguments, these parentheses can be omitted (except if you need to declare the lambda "
          },
          {
            "Text": "mutable",
            "AttrFlags": 2
          },
          {
            "Text": "). These two lambdas are equivalent:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522064704,
        "id": "1f2ec272-9935-4b49-ab1d-b3ea9c22e048",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522064704,
        "parent_id": "2b3ad7dc-54ca-4d3b-b288-f74b1c384511",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "auto call_foo  = [x](){ x.foo(); };\nauto call_foo2 = [x]{ x.foo(); };"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "auto call_foo  = [x](){ x.foo(); };\nauto call_foo2 = [x]{ x.foo(); };",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522064705,
        "id": "4df84edf-0237-42d1-ba5d-06c60f12fb51",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522064705,
        "parent_id": "2b3ad7dc-54ca-4d3b-b288-f74b1c384511",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The parameter list can use the placeholder type "
            ],
            [
              "auto",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " instead of actual types. By doing so, this argument behaves like a template parameter of a function template. Following lambdas are equivalent when you want to sort a vector in generic code:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The parameter list can use the placeholder type "
          },
          {
            "Text": "auto",
            "AttrFlags": 2
          },
          {
            "Text": " instead of actual types. By doing so, this argument behaves like a template parameter of a function template. Following lambdas are equivalent when you want to sort a vector in generic code:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522064705,
        "id": "69b0f21c-1338-4660-8f24-c4eb191da65f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522064705,
        "parent_id": "2b3ad7dc-54ca-4d3b-b288-f74b1c384511",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "auto sort_cpp11 = [](std::vector\u003cT\u003e::const_reference lhs, std::vector\u003cT\u003e::const_reference rhs) { return lhs \u003c rhs; }; \nauto sort_cpp14 = [](const auto \u0026lhs, const auto \u0026rhs) { return lhs \u003c rhs; };"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "auto sort_cpp11 = [](std::vector\u003cT\u003e::const_reference lhs, std::vector\u003cT\u003e::const_reference rhs) { return lhs \u003c rhs; }; \nauto sort_cpp14 = [](const auto \u0026lhs, const auto \u0026rhs) { return lhs \u003c rhs; };",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522064705,
        "id": "bc3e4017-4109-49d0-ae8e-b91e114ecd86",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522064705,
        "parent_id": "2b3ad7dc-54ca-4d3b-b288-f74b1c384511",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Function body",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Function body",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522064705,
        "id": "b8255b58-2c94-460c-b72f-2ba9754ab5ae",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522064705,
        "parent_id": "2b3ad7dc-54ca-4d3b-b288-f74b1c384511",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "{}",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is the "
            ],
            [
              "body",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", which is the same as in regular functions."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "{}",
            "AttrFlags": 2
          },
          {
            "Text": " is the "
          },
          {
            "Text": "body",
            "AttrFlags": 1
          },
          {
            "Text": ", which is the same as in regular functions."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522064705,
        "id": "426a8365-4ed4-4f3c-9d7e-0d4a431df0cd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522064705,
        "parent_id": "2b3ad7dc-54ca-4d3b-b288-f74b1c384511",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522064705,
        "id": "68ace7ef-e92c-4fd4-b73c-336061edd0ff",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522064705,
        "parent_id": "2b3ad7dc-54ca-4d3b-b288-f74b1c384511",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Calling a lambda",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Calling a lambda",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522064706,
        "id": "8984831b-bdae-41e0-bb2b-92044f7cda03",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522064706,
        "parent_id": "2b3ad7dc-54ca-4d3b-b288-f74b1c384511",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A lambda expression’s result object is a "
            ],
            [
              "closure",
              [
                [
                  "a",
                  "https://en.wikipedia.org/wiki/Closure_(computer_programming)"
                ]
              ]
            ],
            [
              ", which can be called using the "
            ],
            [
              "operator()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (as with other function objects):"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A lambda expression’s result object is a "
          },
          {
            "Text": "closure",
            "Link": "https://en.wikipedia.org/wiki/Closure_(computer_programming)"
          },
          {
            "Text": ", which can be called using the "
          },
          {
            "Text": "operator()",
            "AttrFlags": 2
          },
          {
            "Text": " (as with other function objects):"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522064706,
        "id": "a30ac972-fc95-4a78-afd2-e9bc3535a80f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522064706,
        "parent_id": "2b3ad7dc-54ca-4d3b-b288-f74b1c384511",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int multiplier = 5;\nauto timesFive = [multiplier](int a) { return a * multiplier; }; \nstd::out \u003c\u003c timesFive(2); // Prints 10\n\nmultiplier = 15;\nstd::out \u003c\u003c timesFive(2); // Still prints 2*5 == 10"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int multiplier = 5;\nauto timesFive = [multiplier](int a) { return a * multiplier; }; \nstd::out \u003c\u003c timesFive(2); // Prints 10\n\nmultiplier = 15;\nstd::out \u003c\u003c timesFive(2); // Still prints 2*5 == 10",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522064706,
        "id": "0487f83b-9fcb-4be4-8c4a-5d56625af109",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522064706,
        "parent_id": "2b3ad7dc-54ca-4d3b-b288-f74b1c384511",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522064706,
        "id": "4be9a5ed-1311-4e25-b0e8-41ee28fa68c0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522064706,
        "parent_id": "2b3ad7dc-54ca-4d3b-b288-f74b1c384511",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Return Type",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Return Type",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522064706,
        "id": "b75eb9b9-7ecf-4c78-8707-a98821ab67da",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522064706,
        "parent_id": "2b3ad7dc-54ca-4d3b-b288-f74b1c384511",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "By default, the return type of a lambda expression is deduced."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "By default, the return type of a lambda expression is deduced."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522064706,
        "id": "2dfcf090-15c1-431d-aba9-24a5a714fdec",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522064706,
        "parent_id": "2b3ad7dc-54ca-4d3b-b288-f74b1c384511",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "[](){ return true; };"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "[](){ return true; };",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522064706,
        "id": "bad543b2-e0c2-4466-b088-9390ac44b839",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522064706,
        "parent_id": "2b3ad7dc-54ca-4d3b-b288-f74b1c384511",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In this case the return type is "
            ],
            [
              "bool",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In this case the return type is "
          },
          {
            "Text": "bool",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522064706,
        "id": "f030e8bc-764f-4d6a-951d-b7776fc40f10",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522064706,
        "parent_id": "2b3ad7dc-54ca-4d3b-b288-f74b1c384511",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You can also manually specify the return type using the following syntax:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You can also manually specify the return type using the following syntax:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522064706,
        "id": "78d9ad6d-3c12-4da6-b507-38aa6393a27a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522064706,
        "parent_id": "2b3ad7dc-54ca-4d3b-b288-f74b1c384511",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "[]() -\u003e bool { return true; };"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "[]() -\u003e bool { return true; };",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522064707,
        "id": "7292eda6-84eb-446d-95c5-2425c3c1b23f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522064707,
        "parent_id": "2b3ad7dc-54ca-4d3b-b288-f74b1c384511",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Mutable Lambda",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Mutable Lambda",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522064707,
        "id": "e0ab1205-afea-4ef5-8b3e-e26152bf331a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522064707,
        "parent_id": "2b3ad7dc-54ca-4d3b-b288-f74b1c384511",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Objects captured by value in the lambda are by default immutable. This is because the "
            ],
            [
              "operator()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " of the generated closure object is "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " by default."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Objects captured by value in the lambda are by default immutable. This is because the "
          },
          {
            "Text": "operator()",
            "AttrFlags": 2
          },
          {
            "Text": " of the generated closure object is "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": " by default."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522064707,
        "id": "7d0c2aa3-d9e3-4ff3-b50c-caed43258b91",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522064707,
        "parent_id": "2b3ad7dc-54ca-4d3b-b288-f74b1c384511",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "auto func = [c = 0](){++c; std::cout \u003c\u003c c;};  // fails to compile because ++c\n                                              // tries to mutate the state of\n                                              // the lambda."
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "auto func = [c = 0](){++c; std::cout \u003c\u003c c;};  // fails to compile because ++c\n                                              // tries to mutate the state of\n                                              // the lambda.",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522064707,
        "id": "527dde7d-8d8a-48e1-92b3-1c6b110ec79d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522064707,
        "parent_id": "2b3ad7dc-54ca-4d3b-b288-f74b1c384511",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Modifying can be allowed by using the keyword "
            ],
            [
              "mutable",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", which make the closer object’s "
            ],
            [
              "operator()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " non-"
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Modifying can be allowed by using the keyword "
          },
          {
            "Text": "mutable",
            "AttrFlags": 2
          },
          {
            "Text": ", which make the closer object’s "
          },
          {
            "Text": "operator()",
            "AttrFlags": 2
          },
          {
            "Text": " non-"
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522064707,
        "id": "462ae97a-d66f-498e-9816-95ccffb05fbd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522064707,
        "parent_id": "2b3ad7dc-54ca-4d3b-b288-f74b1c384511",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "auto func = [c = 0]() mutable {++c; std::cout \u003c\u003c c;};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "auto func = [c = 0]() mutable {++c; std::cout \u003c\u003c c;};",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522064707,
        "id": "31a465e0-c81a-43db-8117-200f6729eb04",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522064707,
        "parent_id": "2b3ad7dc-54ca-4d3b-b288-f74b1c384511",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If used together with the return type, "
            ],
            [
              "mutable",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " comes before it."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If used together with the return type, "
          },
          {
            "Text": "mutable",
            "AttrFlags": 2
          },
          {
            "Text": " comes before it."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522064707,
        "id": "313d1d7b-4279-4891-8b62-2c87e928c8d8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522064707,
        "parent_id": "2b3ad7dc-54ca-4d3b-b288-f74b1c384511",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "auto func = [c = 0]() mutable -\u003e int {++c; std::cout \u003c\u003c c; return c;};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "auto func = [c = 0]() mutable -\u003e int {++c; std::cout \u003c\u003c c; return c;};",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522064707,
        "id": "dd6420c5-4d72-40bc-8c35-7000ff928a49",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522064707,
        "parent_id": "2b3ad7dc-54ca-4d3b-b288-f74b1c384511",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522064708,
        "id": "4f8c8374-d157-42b8-8b79-c26cc64da9fb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522064708,
        "parent_id": "2b3ad7dc-54ca-4d3b-b288-f74b1c384511",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "An example to illustrate the usefulness of lambdas",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "An example to illustrate the usefulness of lambdas",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522064708,
        "id": "499bf4e0-c2ce-47bd-ac5b-033c644832bf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522064708,
        "parent_id": "2b3ad7dc-54ca-4d3b-b288-f74b1c384511",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Before C++11:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Before C++11:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522064708,
        "id": "d3d3e2c8-dbfd-4ee2-a07a-8e1b496da893",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522064708,
        "parent_id": "2b3ad7dc-54ca-4d3b-b288-f74b1c384511",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// Generic functor used for comparison\nstruct islessthan\n{\n    islessthan(int threshold) : _threshold(threshold) {}\n\n    bool operator()(int value) const\n    {\n        return value \u003c _threshold;\n    }\nprivate:\n    int _threshold;\n};\n\n// Declare a vector\nconst int arr[] = { 1, 2, 3, 4, 5 };\nstd::vector\u003cint\u003e vec(arr, arr+5);\n\n// Find a number that's less than a given input (assume this would have been function input)\nint threshold = 10;\nstd::vector\u003cint\u003e::iterator it = std::find_if(vec.begin(), vec.end(), islessthan(threshold));"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// Generic functor used for comparison\nstruct islessthan\n{\n    islessthan(int threshold) : _threshold(threshold) {}\n\n    bool operator()(int value) const\n    {\n        return value \u003c _threshold;\n    }\nprivate:\n    int _threshold;\n};\n\n// Declare a vector\nconst int arr[] = { 1, 2, 3, 4, 5 };\nstd::vector\u003cint\u003e vec(arr, arr+5);\n\n// Find a number that's less than a given input (assume this would have been function input)\nint threshold = 10;\nstd::vector\u003cint\u003e::iterator it = std::find_if(vec.begin(), vec.end(), islessthan(threshold));",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522064708,
        "id": "618816b6-8db6-45c2-94eb-d4dc82962f78",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522064708,
        "parent_id": "2b3ad7dc-54ca-4d3b-b288-f74b1c384511",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Since C++11:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Since C++11:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522064708,
        "id": "684639f0-9a32-4e1f-a843-288ec517f962",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522064708,
        "parent_id": "2b3ad7dc-54ca-4d3b-b288-f74b1c384511",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// Declare a vector\nstd::vector\u003cint\u003e vec{ 1, 2, 3, 4, 5 };\n\n// Find a number that's less than a given input (assume this would have been function input)\nint threshold = 10;\nauto it = std::find_if(vec.begin(), vec.end(), [threshold](int value) { return value \u003c threshold; });"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// Declare a vector\nstd::vector\u003cint\u003e vec{ 1, 2, 3, 4, 5 };\n\n// Find a number that's less than a given input (assume this would have been function input)\nint threshold = 10;\nauto it = std::find_if(vec.begin(), vec.end(), [threshold](int value) { return value \u003c threshold; });",
        "code_language": "Plain Text"
      }
    ],
    "title": "What is a lambda expression",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}