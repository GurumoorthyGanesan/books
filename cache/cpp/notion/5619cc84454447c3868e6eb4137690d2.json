{
  "ID": "5619cc84-4544-47c3-868e-6eb4137690d2",
  "Root": {
    "alive": true,
    "content": [
      "096cb3b8-f876-44af-86bc-9033d7603661",
      "94418903-80bf-44ce-a07d-1d4d962afae1",
      "c0c1ddc1-5d02-496b-8659-8be1f51d6de8",
      "98f6278b-bbdb-46a2-88cd-2ab8280ead23",
      "f22ea21c-af46-4c34-9c78-5bb18f5663f6",
      "18900215-e85f-4143-9a48-cd29b6e6c5a0",
      "c430a370-1bd4-4ab9-a9c0-e5b36fd9af88",
      "f4e1c9e3-8a86-488f-8e1b-bb25fbcd1d0d",
      "e3185f32-8393-46ba-a432-768f0ac266d9",
      "5e68beaa-d95e-48b4-97dd-29ae4bc0bf18",
      "6934b47a-bfff-4fe3-ac05-52cd463cc757"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550523385776,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "5619cc84-4544-47c3-868e-6eb4137690d2",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551687365830,
    "parent_id": "106e396c-5cd1-4e4b-a70c-30ba85edca56",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "std count if"
        ]
      ]
    },
    "type": "page",
    "version": 4,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523385772,
        "id": "096cb3b8-f876-44af-86bc-9033d7603661",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523385772,
        "parent_id": "5619cc84-4544-47c3-868e-6eb4137690d2",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "template \u003cclass InputIterator, class UnaryPredicate\u003e\ntypename iterator_traits\u003cInputIterator\u003e::difference_type\ncount_if (InputIterator first, InputIterator last, UnaryPredicate red);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "template \u003cclass InputIterator, class UnaryPredicate\u003e\ntypename iterator_traits\u003cInputIterator\u003e::difference_type\ncount_if (InputIterator first, InputIterator last, UnaryPredicate red);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523385774,
        "id": "94418903-80bf-44ce-a07d-1d4d962afae1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523385774,
        "parent_id": "5619cc84-4544-47c3-868e-6eb4137690d2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Effects",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Effects",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523385775,
        "id": "c0c1ddc1-5d02-496b-8659-8be1f51d6de8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523385775,
        "parent_id": "5619cc84-4544-47c3-868e-6eb4137690d2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Counts the number of elements in a range for which a specified predicate function is true"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Counts the number of elements in a range for which a specified predicate function is true"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523385775,
        "id": "98f6278b-bbdb-46a2-88cd-2ab8280ead23",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523385775,
        "parent_id": "5619cc84-4544-47c3-868e-6eb4137690d2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Parameters",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Parameters",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523385775,
        "id": "f22ea21c-af46-4c34-9c78-5bb18f5663f6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523385775,
        "parent_id": "5619cc84-4544-47c3-868e-6eb4137690d2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "first",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " =\u003e iterator pointing to the beginning of the range "
            ],
            [
              "last",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " =\u003e iterator pointing to the end of the range "
            ],
            [
              "red",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " =\u003e predicate function(returns true or false)"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "first",
            "AttrFlags": 2
          },
          {
            "Text": " =\u003e iterator pointing to the beginning of the range "
          },
          {
            "Text": "last",
            "AttrFlags": 2
          },
          {
            "Text": " =\u003e iterator pointing to the end of the range "
          },
          {
            "Text": "red",
            "AttrFlags": 2
          },
          {
            "Text": " =\u003e predicate function(returns true or false)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523385775,
        "id": "18900215-e85f-4143-9a48-cd29b6e6c5a0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523385775,
        "parent_id": "5619cc84-4544-47c3-868e-6eb4137690d2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Return",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Return",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523385775,
        "id": "c430a370-1bd4-4ab9-a9c0-e5b36fd9af88",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523385775,
        "parent_id": "5619cc84-4544-47c3-868e-6eb4137690d2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The number of elements within the specified range for which the predicate function returned true."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The number of elements within the specified range for which the predicate function returned true."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523385775,
        "id": "f4e1c9e3-8a86-488f-8e1b-bb25fbcd1d0d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523385775,
        "parent_id": "5619cc84-4544-47c3-868e-6eb4137690d2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Example",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Example",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523385776,
        "id": "e3185f32-8393-46ba-a432-768f0ac266d9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523385776,
        "parent_id": "5619cc84-4544-47c3-868e-6eb4137690d2",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003ciostream\u003e\n#include \u003cvector\u003e\n#include \u003calgorithm\u003e\n\nusing namespace std;\n\n/*\n    Define a few functions to use as predicates\n*/\n\n//return true if number is odd\nbool isOdd(int i){\n  return i%2 == 1;\n}\n\n//functor that returns true if number is greater than the value of the constructor parameter provided\nclass Greater {\n  int _than;\npublic:\n  Greater(int th): _than(th){}\n  bool operator()(int i){\n    return i \u003e _than;\n  }\n};\n\nint main(int argc, const char * argv[]) {\n  \n  //create a vector\n  vector\u003cint\u003e myvec = {1,5,8,0,7,6,4,5,2,1,5,0,6,9,7};\n\n  //using a lambda function to count even numbers\n  size_t evenCount = count_if(myvec.begin(), myvec.end(), [](int i){return i % 2 == 0;}); // \u003e= C++11\n  \n  //using function pointer to count odd number in the first half of the vector\n  size_t oddCount = count_if(myvec.begin(), myvec.end()- myvec.size()/2, isOdd);\n  \n  //using a functor to count numbers greater than 5\n  size_t greaterCount = count_if(myvec.begin(), myvec.end(), Greater(5));\n\n  cout \u003c\u003c \"vector size: \" \u003c\u003c myvec.size() \u003c\u003c endl;\n  cout \u003c\u003c \"even numbers: \" \u003c\u003c evenCount \u003c\u003c \" found\" \u003c\u003c endl;\n  cout \u003c\u003c \"odd numbers: \" \u003c\u003c oddCount \u003c\u003c \" found\" \u003c\u003c endl;\n  cout \u003c\u003c \"numbers \u003e 5: \" \u003c\u003c greaterCount \u003c\u003c \" found\"\u003c\u003c endl;\n  \n  return 0;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003ciostream\u003e\n#include \u003cvector\u003e\n#include \u003calgorithm\u003e\n\nusing namespace std;\n\n/*\n    Define a few functions to use as predicates\n*/\n\n//return true if number is odd\nbool isOdd(int i){\n  return i%2 == 1;\n}\n\n//functor that returns true if number is greater than the value of the constructor parameter provided\nclass Greater {\n  int _than;\npublic:\n  Greater(int th): _than(th){}\n  bool operator()(int i){\n    return i \u003e _than;\n  }\n};\n\nint main(int argc, const char * argv[]) {\n  \n  //create a vector\n  vector\u003cint\u003e myvec = {1,5,8,0,7,6,4,5,2,1,5,0,6,9,7};\n\n  //using a lambda function to count even numbers\n  size_t evenCount = count_if(myvec.begin(), myvec.end(), [](int i){return i % 2 == 0;}); // \u003e= C++11\n  \n  //using function pointer to count odd number in the first half of the vector\n  size_t oddCount = count_if(myvec.begin(), myvec.end()- myvec.size()/2, isOdd);\n  \n  //using a functor to count numbers greater than 5\n  size_t greaterCount = count_if(myvec.begin(), myvec.end(), Greater(5));\n\n  cout \u003c\u003c \"vector size: \" \u003c\u003c myvec.size() \u003c\u003c endl;\n  cout \u003c\u003c \"even numbers: \" \u003c\u003c evenCount \u003c\u003c \" found\" \u003c\u003c endl;\n  cout \u003c\u003c \"odd numbers: \" \u003c\u003c oddCount \u003c\u003c \" found\" \u003c\u003c endl;\n  cout \u003c\u003c \"numbers \u003e 5: \" \u003c\u003c greaterCount \u003c\u003c \" found\"\u003c\u003c endl;\n  \n  return 0;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523385776,
        "id": "5e68beaa-d95e-48b4-97dd-29ae4bc0bf18",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523385776,
        "parent_id": "5619cc84-4544-47c3-868e-6eb4137690d2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Output",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Output",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523385776,
        "id": "6934b47a-bfff-4fe3-ac05-52cd463cc757",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523385776,
        "parent_id": "5619cc84-4544-47c3-868e-6eb4137690d2",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "vector size: 15\neven numbers: 7 found\nodd numbers: 4 found\nnumbers \u003e 5: 6 found"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "vector size: 15\neven numbers: 7 found\nodd numbers: 4 found\nnumbers \u003e 5: 6 found",
        "code_language": "Plain Text"
      }
    ],
    "title": "std count if",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}