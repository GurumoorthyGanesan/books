{
  "ID": "023bd1b4-77fe-4275-9082-ac164ca4eb35",
  "Root": {
    "alive": true,
    "content": [
      "417716a8-f474-492e-836a-b6e3a543a49f",
      "78bcd38e-0a5f-4b42-b534-a455a37ffaf2",
      "e7f4c58f-3ac0-4e30-9421-55c05f05342c",
      "0f189434-0062-44c9-bca9-337e2d36a070",
      "62243b97-0745-4cdd-be69-6eaee3c0c0a7",
      "601228ff-5ff3-4d4a-9cc4-81e879b7fe08",
      "f73c3a94-f008-4da5-97ef-23b10a0ace67",
      "9d1bde8f-70a4-4d35-9b1c-3b6a8f99eab9",
      "07a04733-f564-4a5a-91d3-098b8fcc1a28",
      "148a34c1-5f1e-458e-a1d2-575a2140a043",
      "05f47ad4-38d8-4ba2-a6dd-1f879a68b635"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522070471,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "023bd1b4-77fe-4275-9082-ac164ca4eb35",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550655600000,
    "parent_id": "71517390-0244-456d-87c4-82c582ca8abf",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Class lambdas and capture of this"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522070466,
        "id": "417716a8-f474-492e-836a-b6e3a543a49f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522070466,
        "parent_id": "023bd1b4-77fe-4275-9082-ac164ca4eb35",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A lambda expression evaluated in a class’ member function is implicitly a friend of that class:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A lambda expression evaluated in a class’ member function is implicitly a friend of that class:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522070468,
        "id": "78bcd38e-0a5f-4b42-b534-a455a37ffaf2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522070468,
        "parent_id": "023bd1b4-77fe-4275-9082-ac164ca4eb35",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class Foo\n{\nprivate:\n    int i;\n    \npublic:\n    Foo(int val) : i(val) {}\n    \n    // definition of a member function\n    void Test()\n    {\n        auto lamb = [](Foo \u0026foo, int val)\n        {\n            // modification of a private member variable\n            foo.i = val;\n        };\n        \n        // lamb is allowed to access a private member, because it is a friend of Foo\n        lamb(*this, 30);\n    }\n};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class Foo\n{\nprivate:\n    int i;\n    \npublic:\n    Foo(int val) : i(val) {}\n    \n    // definition of a member function\n    void Test()\n    {\n        auto lamb = [](Foo \u0026foo, int val)\n        {\n            // modification of a private member variable\n            foo.i = val;\n        };\n        \n        // lamb is allowed to access a private member, because it is a friend of Foo\n        lamb(*this, 30);\n    }\n};",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522070469,
        "id": "e7f4c58f-3ac0-4e30-9421-55c05f05342c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522070469,
        "parent_id": "023bd1b4-77fe-4275-9082-ac164ca4eb35",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Such a lambda is not only a friend of that class, it has the same access as the class it is declared within has."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Such a lambda is not only a friend of that class, it has the same access as the class it is declared within has."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522070469,
        "id": "0f189434-0062-44c9-bca9-337e2d36a070",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522070469,
        "parent_id": "023bd1b4-77fe-4275-9082-ac164ca4eb35",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Lambdas can capture the "
            ],
            [
              "this",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " pointer which represents the object instance the outer function was called on. This is done by adding "
            ],
            [
              "this",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to the capture list:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Lambdas can capture the "
          },
          {
            "Text": "this",
            "AttrFlags": 2
          },
          {
            "Text": " pointer which represents the object instance the outer function was called on. This is done by adding "
          },
          {
            "Text": "this",
            "AttrFlags": 2
          },
          {
            "Text": " to the capture list:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522070469,
        "id": "62243b97-0745-4cdd-be69-6eaee3c0c0a7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522070469,
        "parent_id": "023bd1b4-77fe-4275-9082-ac164ca4eb35",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class Foo\n{\nprivate:\n    int i;\n    \npublic:\n    Foo(int val) : i(val) {}\n    \n    void Test()\n    {\n        // capture the this pointer by value\n        auto lamb = [this](int val)\n        {\n            i = val;\n        };\n        \n        lamb(30);\n    }\n};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class Foo\n{\nprivate:\n    int i;\n    \npublic:\n    Foo(int val) : i(val) {}\n    \n    void Test()\n    {\n        // capture the this pointer by value\n        auto lamb = [this](int val)\n        {\n            i = val;\n        };\n        \n        lamb(30);\n    }\n};",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522070469,
        "id": "601228ff-5ff3-4d4a-9cc4-81e879b7fe08",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522070469,
        "parent_id": "023bd1b4-77fe-4275-9082-ac164ca4eb35",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When "
            ],
            [
              "this",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is captured, the lambda can use member names of its containing class as though it were in its containing class. So an implicit "
            ],
            [
              "this-\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is applied to such members."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When "
          },
          {
            "Text": "this",
            "AttrFlags": 2
          },
          {
            "Text": " is captured, the lambda can use member names of its containing class as though it were in its containing class. So an implicit "
          },
          {
            "Text": "this-\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " is applied to such members."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522070469,
        "id": "f73c3a94-f008-4da5-97ef-23b10a0ace67",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522070469,
        "parent_id": "023bd1b4-77fe-4275-9082-ac164ca4eb35",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Be aware that "
            ],
            [
              "this",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is captured by value, but not the value of the type. It is captured by the value of "
            ],
            [
              "this",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", which is a "
            ],
            [
              "pointer",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ". As such, the lambda does not "
            ],
            [
              "own",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "this",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". If the lambda out lives the lifetime of the object that created it, the lambda can become invalid."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Be aware that "
          },
          {
            "Text": "this",
            "AttrFlags": 2
          },
          {
            "Text": " is captured by value, but not the value of the type. It is captured by the value of "
          },
          {
            "Text": "this",
            "AttrFlags": 2
          },
          {
            "Text": ", which is a "
          },
          {
            "Text": "pointer",
            "AttrFlags": 4
          },
          {
            "Text": ". As such, the lambda does not "
          },
          {
            "Text": "own",
            "AttrFlags": 4
          },
          {
            "Text": " "
          },
          {
            "Text": "this",
            "AttrFlags": 2
          },
          {
            "Text": ". If the lambda out lives the lifetime of the object that created it, the lambda can become invalid."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522070470,
        "id": "9d1bde8f-70a4-4d35-9b1c-3b6a8f99eab9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522070470,
        "parent_id": "023bd1b4-77fe-4275-9082-ac164ca4eb35",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This also means that the lambda can modify "
            ],
            [
              "this",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " without being declared "
            ],
            [
              "mutable",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". It is the pointer which is "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", not the object being pointed to. That is, unless the outer member function was itself a "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " function."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This also means that the lambda can modify "
          },
          {
            "Text": "this",
            "AttrFlags": 2
          },
          {
            "Text": " without being declared "
          },
          {
            "Text": "mutable",
            "AttrFlags": 2
          },
          {
            "Text": ". It is the pointer which is "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": ", not the object being pointed to. That is, unless the outer member function was itself a "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": " function."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522070470,
        "id": "07a04733-f564-4a5a-91d3-098b8fcc1a28",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522070470,
        "parent_id": "023bd1b4-77fe-4275-9082-ac164ca4eb35",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Also, be aware that the default capture clauses, both "
            ],
            [
              "[=]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "[\u0026]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", will "
            ],
            [
              "also",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " capture "
            ],
            [
              "this",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " implicitly. And they both capture it by the value of the pointer. Indeed, it is an error to specify "
            ],
            [
              "this",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in the capture list when a default is given."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Also, be aware that the default capture clauses, both "
          },
          {
            "Text": "[=]",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "[\u0026]",
            "AttrFlags": 2
          },
          {
            "Text": ", will "
          },
          {
            "Text": "also",
            "AttrFlags": 4
          },
          {
            "Text": " capture "
          },
          {
            "Text": "this",
            "AttrFlags": 2
          },
          {
            "Text": " implicitly. And they both capture it by the value of the pointer. Indeed, it is an error to specify "
          },
          {
            "Text": "this",
            "AttrFlags": 2
          },
          {
            "Text": " in the capture list when a default is given."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522070470,
        "id": "148a34c1-5f1e-458e-a1d2-575a2140a043",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522070470,
        "parent_id": "023bd1b4-77fe-4275-9082-ac164ca4eb35",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Lambdas can capture a copy of the "
            ],
            [
              "this",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " object, created at the time the lambda is created. This is done by adding "
            ],
            [
              "*this",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to the capture list:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Lambdas can capture a copy of the "
          },
          {
            "Text": "this",
            "AttrFlags": 2
          },
          {
            "Text": " object, created at the time the lambda is created. This is done by adding "
          },
          {
            "Text": "*this",
            "AttrFlags": 2
          },
          {
            "Text": " to the capture list:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522070471,
        "id": "05f47ad4-38d8-4ba2-a6dd-1f879a68b635",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522070471,
        "parent_id": "023bd1b4-77fe-4275-9082-ac164ca4eb35",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class Foo\n{\nprivate:\n    int i;\n    \npublic:\n    Foo(int val) : i(val) {}\n    \n    void Test()\n    {\n        // capture a copy of the object given by the this pointer\n        auto lamb = [*this](int val) mutable\n        {\n            i = val;\n        };\n        \n        lamb(30); // does not change this-\u003ei\n    }\n};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class Foo\n{\nprivate:\n    int i;\n    \npublic:\n    Foo(int val) : i(val) {}\n    \n    void Test()\n    {\n        // capture a copy of the object given by the this pointer\n        auto lamb = [*this](int val) mutable\n        {\n            i = val;\n        };\n        \n        lamb(30); // does not change this-\u003ei\n    }\n};",
        "code_language": "Plain Text"
      }
    ],
    "title": "Class lambdas and capture of this",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}