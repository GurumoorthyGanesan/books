{
  "ID": "8865d409-6b5b-4876-a0c0-6a442d1de015",
  "Root": {
    "alive": true,
    "content": [
      "e1760b04-b461-4ac7-b4ad-b41d27a518e3",
      "5d68da0d-bb66-45a3-a291-844cbd6e0f84",
      "f722fe6e-e384-4cfd-9dbf-208dc0b32e98",
      "eb3bd2bc-6129-4d0f-a79f-798a02273132",
      "78bb37ef-f69c-4701-bf72-1b7da071291e",
      "096fc5d7-5c32-409b-a8dd-6b373a603097",
      "8e9e07d8-ac11-44e9-a59e-051f0c7b3fbf",
      "fd3b8f36-8d5a-425b-bd29-ad4503564c6f"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550521977439,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "8865d409-6b5b-4876-a0c0-6a442d1de015",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550656560000,
    "parent_id": "26e69b2d-1c6d-47ea-af87-47fa9cfbdf56",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Structured Bindings"
        ]
      ]
    },
    "type": "page",
    "version": 9,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521977438,
        "id": "e1760b04-b461-4ac7-b4ad-b41d27a518e3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521977438,
        "parent_id": "8865d409-6b5b-4876-a0c0-6a442d1de015",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "C++17 introduces structured bindings, which makes it even easier to deal with multiple return types, as you do not need to rely upon "
            ],
            [
              "std::tie()",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://en.cppreference.com/w/cpp/utility/tuple/tie"
                ]
              ]
            ],
            [
              " or do any manual tuple unpacking:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "C++17 introduces structured bindings, which makes it even easier to deal with multiple return types, as you do not need to rely upon "
          },
          {
            "Text": "std::tie()",
            "AttrFlags": 2,
            "Link": "http://en.cppreference.com/w/cpp/utility/tuple/tie"
          },
          {
            "Text": " or do any manual tuple unpacking:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521977438,
        "id": "5d68da0d-bb66-45a3-a291-844cbd6e0f84",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521977438,
        "parent_id": "8865d409-6b5b-4876-a0c0-6a442d1de015",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "std::map\u003cstd::string, int\u003e m;\n\n// insert an element into the map and check if insertion succeeded\nauto [iterator, success] = m.insert({\"Hello\", 42});\n\nif (success) {\n    // your code goes here\n}\n\n// iterate over all elements without having to use the cryptic 'first' and 'second' names\nfor (auto const\u0026 [key, value] : m) {\n    std::cout \u003c\u003c \"The value for \" \u003c\u003c key \u003c\u003c \" is \" \u003c\u003c value \u003c\u003c '\\n';\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "std::map\u003cstd::string, int\u003e m;\n\n// insert an element into the map and check if insertion succeeded\nauto [iterator, success] = m.insert({\"Hello\", 42});\n\nif (success) {\n    // your code goes here\n}\n\n// iterate over all elements without having to use the cryptic 'first' and 'second' names\nfor (auto const\u0026 [key, value] : m) {\n    std::cout \u003c\u003c \"The value for \" \u003c\u003c key \u003c\u003c \" is \" \u003c\u003c value \u003c\u003c '\\n';\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521977439,
        "id": "f722fe6e-e384-4cfd-9dbf-208dc0b32e98",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521977439,
        "parent_id": "8865d409-6b5b-4876-a0c0-6a442d1de015",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Structured bindings can be used by default with "
            ],
            [
              "std::pair",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "std::tuple",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", and any type whose non-static data members are all either public direct members or members of an unambiguous base class:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Structured bindings can be used by default with "
          },
          {
            "Text": "std::pair",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "std::tuple",
            "AttrFlags": 2
          },
          {
            "Text": ", and any type whose non-static data members are all either public direct members or members of an unambiguous base class:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521977439,
        "id": "eb3bd2bc-6129-4d0f-a79f-798a02273132",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521977439,
        "parent_id": "8865d409-6b5b-4876-a0c0-6a442d1de015",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "struct A { int x; };\nstruct B : A { int y; };\nB foo();\n\n// with structured bindings\nconst auto [x, y] = foo();\n\n// equivalent code without structured bindings\nconst auto result = foo();\nauto\u0026 x = result.x;\nauto\u0026 y = result.y;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "struct A { int x; };\nstruct B : A { int y; };\nB foo();\n\n// with structured bindings\nconst auto [x, y] = foo();\n\n// equivalent code without structured bindings\nconst auto result = foo();\nauto\u0026 x = result.x;\nauto\u0026 y = result.y;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521977439,
        "id": "78bb37ef-f69c-4701-bf72-1b7da071291e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521977439,
        "parent_id": "8865d409-6b5b-4876-a0c0-6a442d1de015",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If you make your type “tuple-like” it will also automatically work with your type. A tuple-like is a type with appropriate "
            ],
            [
              "tuple_size",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "tuple_element",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "get",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " written:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If you make your type “tuple-like” it will also automatically work with your type. A tuple-like is a type with appropriate "
          },
          {
            "Text": "tuple_size",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "tuple_element",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "get",
            "AttrFlags": 2
          },
          {
            "Text": " written:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521977439,
        "id": "096fc5d7-5c32-409b-a8dd-6b373a603097",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521977439,
        "parent_id": "8865d409-6b5b-4876-a0c0-6a442d1de015",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "namespace my_ns {\n    struct my_type {\n        int x;\n        double d;\n        std::string s;\n    };\n    struct my_type_view {\n        my_type* ptr;\n    };\n}\n\nnamespace std {\n    template\u003c\u003e\n    struct tuple_size\u003cmy_ns::my_type_view\u003e : std::integral_constant\u003cstd::size_t, 3\u003e\n    {};\n\n    template\u003c\u003e struct tuple_element\u003cmy_ns::my_type_view, 0\u003e{ using type = int; };\n    template\u003c\u003e struct tuple_element\u003cmy_ns::my_type_view, 1\u003e{ using type = double; };\n    template\u003c\u003e struct tuple_element\u003cmy_ns::my_type_view, 2\u003e{ using type = std::string; };\n}\n\nnamespace my_ns {\n    template\u003cstd::size_t I\u003e\n    decltype(auto) get(my_type_view const\u0026 v) {\n        if constexpr (I == 0)\n            return v.ptr-\u003ex;\n        else if constexpr (I == 1)\n            return v.ptr-\u003ed;\n        else if constexpr (I == 2)\n            return v.ptr-\u003es;\n        static_assert(I \u003c 3, \"Only 3 elements\");\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "namespace my_ns {\n    struct my_type {\n        int x;\n        double d;\n        std::string s;\n    };\n    struct my_type_view {\n        my_type* ptr;\n    };\n}\n\nnamespace std {\n    template\u003c\u003e\n    struct tuple_size\u003cmy_ns::my_type_view\u003e : std::integral_constant\u003cstd::size_t, 3\u003e\n    {};\n\n    template\u003c\u003e struct tuple_element\u003cmy_ns::my_type_view, 0\u003e{ using type = int; };\n    template\u003c\u003e struct tuple_element\u003cmy_ns::my_type_view, 1\u003e{ using type = double; };\n    template\u003c\u003e struct tuple_element\u003cmy_ns::my_type_view, 2\u003e{ using type = std::string; };\n}\n\nnamespace my_ns {\n    template\u003cstd::size_t I\u003e\n    decltype(auto) get(my_type_view const\u0026 v) {\n        if constexpr (I == 0)\n            return v.ptr-\u003ex;\n        else if constexpr (I == 1)\n            return v.ptr-\u003ed;\n        else if constexpr (I == 2)\n            return v.ptr-\u003es;\n        static_assert(I \u003c 3, \"Only 3 elements\");\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521977439,
        "id": "8e9e07d8-ac11-44e9-a59e-051f0c7b3fbf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521977439,
        "parent_id": "8865d409-6b5b-4876-a0c0-6a442d1de015",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "now this works:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "now this works:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521977439,
        "id": "fd3b8f36-8d5a-425b-bd29-ad4503564c6f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521977439,
        "parent_id": "8865d409-6b5b-4876-a0c0-6a442d1de015",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "my_ns::my_type t{1, 3.14, \"hello world\"};\n\nmy_ns::my_type_view foo() {\n    return {\u0026t};\n}\n\nint main() {\n    auto[x, d, s] = foo();\n    std::cout \u003c\u003c x \u003c\u003c ',' \u003c\u003c d \u003c\u003c ',' \u003c\u003c s \u003c\u003c '\\n';\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "my_ns::my_type t{1, 3.14, \"hello world\"};\n\nmy_ns::my_type_view foo() {\n    return {\u0026t};\n}\n\nint main() {\n    auto[x, d, s] = foo();\n    std::cout \u003c\u003c x \u003c\u003c ',' \u003c\u003c d \u003c\u003c ',' \u003c\u003c s \u003c\u003c '\\n';\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "Structured Bindings",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}