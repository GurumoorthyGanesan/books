{
  "ID": "26da7d82-9ade-499e-8479-a5f81eca6fb4",
  "Root": {
    "alive": true,
    "content": [
      "47b84e0a-8431-4b8a-8873-b2744311b818",
      "6459694e-f245-414e-a7fe-1c67663f177b",
      "e46eecf4-f844-4099-81a2-a1d2dc6d20f2",
      "33b35415-3939-4989-a82e-e6c4045fba23",
      "5632595d-2195-4cd5-80c6-6571a4b4204a",
      "8f4ee1eb-8e64-43ba-887e-9be67d562c7f",
      "3d789edf-2ea1-4b36-bd46-c158f67e8f3b",
      "46f6c5d9-f5bf-4a9b-b6f4-5c18f08e44dd",
      "62b639aa-e184-45e2-a108-70d6be533f7d",
      "81822a5f-9b44-427f-88e8-b712b4e69c65",
      "1e521125-3296-4486-a504-1d1bc3bea9bf",
      "b48c2cb1-a0c2-409b-95b9-3f02d46833ee",
      "d6e19c1d-b1f2-4607-9402-0cc8ba28deff",
      "da4e3948-7857-46b3-93df-33c71b5465b9",
      "25954aab-1e44-41d0-b54d-36423413c776"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550521963613,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "26da7d82-9ade-499e-8479-a5f81eca6fb4",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550796780000,
    "parent_id": "cbd900b3-1684-4f0d-977a-5a5b2a20aff3",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Manual distinction of types when given any type T"
        ]
      ]
    },
    "type": "page",
    "version": 14,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521963607,
        "id": "47b84e0a-8431-4b8a-8873-b2744311b818",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550796780000,
        "parent_id": "26da7d82-9ade-499e-8479-a5f81eca6fb4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When implementing "
            ],
            [
              "SFINAE",
              [
                [
                  "a",
                  "https://www.notion.so/kjkpublic/SFINAE-0b17f7b911d14229931e966fb51d1ba9"
                ]
              ]
            ],
            [
              " using "
            ],
            [
              "std::enable_if",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%2B%2B/1169/sfinae-substitution-failure-is-not-an-error/3777/enable-if"
                ]
              ]
            ],
            [
              ", it is often useful to have access to helper templates that determines if a given type "
            ],
            [
              "T",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " matches a set of criteria."
            ]
          ]
        },
        "type": "text",
        "version": 4,
        "inline_content": [
          {
            "Text": "When implementing "
          },
          {
            "Text": "SFINAE",
            "Link": "https://www.notion.so/kjkpublic/SFINAE-0b17f7b911d14229931e966fb51d1ba9"
          },
          {
            "Text": " using "
          },
          {
            "Text": "std::enable_if",
            "AttrFlags": 2,
            "Link": "http://stackoverflow.com/documentation/c%2B%2B/1169/sfinae-substitution-failure-is-not-an-error/3777/enable-if"
          },
          {
            "Text": ", it is often useful to have access to helper templates that determines if a given type "
          },
          {
            "Text": "T",
            "AttrFlags": 2
          },
          {
            "Text": " matches a set of criteria."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521963608,
        "id": "6459694e-f245-414e-a7fe-1c67663f177b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521963608,
        "parent_id": "26da7d82-9ade-499e-8479-a5f81eca6fb4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To help us with that, the standard already provides two types analog to "
            ],
            [
              "true",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "false",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " which are "
            ],
            [
              "std::true_type",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "std::false_type",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To help us with that, the standard already provides two types analog to "
          },
          {
            "Text": "true",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "false",
            "AttrFlags": 2
          },
          {
            "Text": " which are "
          },
          {
            "Text": "std::true_type",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "std::false_type",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521963608,
        "id": "e46eecf4-f844-4099-81a2-a1d2dc6d20f2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521963608,
        "parent_id": "26da7d82-9ade-499e-8479-a5f81eca6fb4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The following example show how to detect if a type "
            ],
            [
              "T",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is a pointer or not, the "
            ],
            [
              "is_pointer",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " template mimic the behavior of the standard "
            ],
            [
              "std::is_pointer",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " helper:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The following example show how to detect if a type "
          },
          {
            "Text": "T",
            "AttrFlags": 2
          },
          {
            "Text": " is a pointer or not, the "
          },
          {
            "Text": "is_pointer",
            "AttrFlags": 2
          },
          {
            "Text": " template mimic the behavior of the standard "
          },
          {
            "Text": "std::is_pointer",
            "AttrFlags": 2
          },
          {
            "Text": " helper:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521963609,
        "id": "33b35415-3939-4989-a82e-e6c4045fba23",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550796720000,
        "parent_id": "26da7d82-9ade-499e-8479-a5f81eca6fb4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "template \u003ctypename T\u003e\nstruct is_pointer_: std::false_type {};\n\ntemplate \u003ctypename T\u003e\nstruct is_pointer_\u003cT*\u003e: std::true_type {};\n\ntemplate \u003ctypename T\u003e\nstruct is_pointer: is_pointer_\u003ctypename std::remove_cv\u003cT\u003e::type\u003e { }"
            ]
          ]
        },
        "type": "code",
        "version": 6,
        "code": "template \u003ctypename T\u003e\nstruct is_pointer_: std::false_type {};\n\ntemplate \u003ctypename T\u003e\nstruct is_pointer_\u003cT*\u003e: std::true_type {};\n\ntemplate \u003ctypename T\u003e\nstruct is_pointer: is_pointer_\u003ctypename std::remove_cv\u003cT\u003e::type\u003e { }",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521963609,
        "id": "5632595d-2195-4cd5-80c6-6571a4b4204a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521963609,
        "parent_id": "26da7d82-9ade-499e-8479-a5f81eca6fb4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "There are three steps in the above code (sometimes you only need two):"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "There are three steps in the above code (sometimes you only need two):"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521963610,
        "id": "8f4ee1eb-8e64-43ba-887e-9be67d562c7f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521963610,
        "parent_id": "26da7d82-9ade-499e-8479-a5f81eca6fb4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The first declaration of "
            ],
            [
              "is_pointer_",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is the "
            ],
            [
              "default case",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ", and inherits from "
            ],
            [
              "std::false_type",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". The "
            ],
            [
              "default",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " case should always inherit from "
            ],
            [
              "std::false_type",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " since it is analogous to a “"
            ],
            [
              "false",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " condition”."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "The first declaration of "
          },
          {
            "Text": "is_pointer_",
            "AttrFlags": 2
          },
          {
            "Text": " is the "
          },
          {
            "Text": "default case",
            "AttrFlags": 4
          },
          {
            "Text": ", and inherits from "
          },
          {
            "Text": "std::false_type",
            "AttrFlags": 2
          },
          {
            "Text": ". The "
          },
          {
            "Text": "default",
            "AttrFlags": 4
          },
          {
            "Text": " case should always inherit from "
          },
          {
            "Text": "std::false_type",
            "AttrFlags": 2
          },
          {
            "Text": " since it is analogous to a “"
          },
          {
            "Text": "false",
            "AttrFlags": 2
          },
          {
            "Text": " condition”."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521963610,
        "id": "3d789edf-2ea1-4b36-bd46-c158f67e8f3b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521963610,
        "parent_id": "26da7d82-9ade-499e-8479-a5f81eca6fb4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The second declaration specialize the "
            ],
            [
              "is_pointer_",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " template for pointer "
            ],
            [
              "T*",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " without caring about what "
            ],
            [
              "T",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is really. This version inherits from "
            ],
            [
              "std::true_type",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "The second declaration specialize the "
          },
          {
            "Text": "is_pointer_",
            "AttrFlags": 2
          },
          {
            "Text": " template for pointer "
          },
          {
            "Text": "T*",
            "AttrFlags": 2
          },
          {
            "Text": " without caring about what "
          },
          {
            "Text": "T",
            "AttrFlags": 2
          },
          {
            "Text": " is really. This version inherits from "
          },
          {
            "Text": "std::true_type",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521963611,
        "id": "46f6c5d9-f5bf-4a9b-b6f4-5c18f08e44dd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521963611,
        "parent_id": "26da7d82-9ade-499e-8479-a5f81eca6fb4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The third declaration (the real one) simply remove any unnecessary information from "
            ],
            [
              "T",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (in this case we remove "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "volatile",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " qualifiers) and then fall backs to one of the two previous declarations."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "The third declaration (the real one) simply remove any unnecessary information from "
          },
          {
            "Text": "T",
            "AttrFlags": 2
          },
          {
            "Text": " (in this case we remove "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "volatile",
            "AttrFlags": 2
          },
          {
            "Text": " qualifiers) and then fall backs to one of the two previous declarations."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521963611,
        "id": "62b639aa-e184-45e2-a108-70d6be533f7d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521963611,
        "parent_id": "26da7d82-9ade-499e-8479-a5f81eca6fb4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Since "
            ],
            [
              "is_pointer\u003cT\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is a class, to access its value you need to either:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Since "
          },
          {
            "Text": "is_pointer\u003cT\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " is a class, to access its value you need to either:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521963612,
        "id": "81822a5f-9b44-427f-88e8-b712b4e69c65",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521963612,
        "parent_id": "26da7d82-9ade-499e-8479-a5f81eca6fb4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Use "
            ],
            [
              "::value",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", e.g. "
            ],
            [
              "is_pointer\u003cint\u003e::value",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " – "
            ],
            [
              "value",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is a static class member of type "
            ],
            [
              "bool",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " inherited from "
            ],
            [
              "std::true_type",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "std::false_type",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ";"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Use "
          },
          {
            "Text": "::value",
            "AttrFlags": 2
          },
          {
            "Text": ", e.g. "
          },
          {
            "Text": "is_pointer\u003cint\u003e::value",
            "AttrFlags": 2
          },
          {
            "Text": " – "
          },
          {
            "Text": "value",
            "AttrFlags": 2
          },
          {
            "Text": " is a static class member of type "
          },
          {
            "Text": "bool",
            "AttrFlags": 2
          },
          {
            "Text": " inherited from "
          },
          {
            "Text": "std::true_type",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "std::false_type",
            "AttrFlags": 2
          },
          {
            "Text": ";"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521963612,
        "id": "1e521125-3296-4486-a504-1d1bc3bea9bf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521963612,
        "parent_id": "26da7d82-9ade-499e-8479-a5f81eca6fb4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Construct an object of this type, e.g. "
            ],
            [
              "is_pointer\u003cint\u003e{}",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " – This works because "
            ],
            [
              "std::is_pointer",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " inherits its default constructor from "
            ],
            [
              "std::true_type",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "std::false_type",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (which have "
            ],
            [
              "constexpr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " constructors) and both "
            ],
            [
              "std::true_type",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "std::false_type",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " have "
            ],
            [
              "constexpr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " conversion operators to "
            ],
            [
              "bool",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Construct an object of this type, e.g. "
          },
          {
            "Text": "is_pointer\u003cint\u003e{}",
            "AttrFlags": 2
          },
          {
            "Text": " – This works because "
          },
          {
            "Text": "std::is_pointer",
            "AttrFlags": 2
          },
          {
            "Text": " inherits its default constructor from "
          },
          {
            "Text": "std::true_type",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "std::false_type",
            "AttrFlags": 2
          },
          {
            "Text": " (which have "
          },
          {
            "Text": "constexpr",
            "AttrFlags": 2
          },
          {
            "Text": " constructors) and both "
          },
          {
            "Text": "std::true_type",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "std::false_type",
            "AttrFlags": 2
          },
          {
            "Text": " have "
          },
          {
            "Text": "constexpr",
            "AttrFlags": 2
          },
          {
            "Text": " conversion operators to "
          },
          {
            "Text": "bool",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521963612,
        "id": "b48c2cb1-a0c2-409b-95b9-3f02d46833ee",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521963612,
        "parent_id": "26da7d82-9ade-499e-8479-a5f81eca6fb4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It is a good habit to provides “helper helper templates” that let you directly access the value:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It is a good habit to provides “helper helper templates” that let you directly access the value:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521963612,
        "id": "d6e19c1d-b1f2-4607-9402-0cc8ba28deff",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550796780000,
        "parent_id": "26da7d82-9ade-499e-8479-a5f81eca6fb4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "template \u003ctypename T\u003e\nconstexpr bool is_pointer_v = is_pointer\u003cT\u003e::value;"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "template \u003ctypename T\u003e\nconstexpr bool is_pointer_v = is_pointer\u003cT\u003e::value;",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521963613,
        "id": "da4e3948-7857-46b3-93df-33c71b5465b9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521963613,
        "parent_id": "26da7d82-9ade-499e-8479-a5f81eca6fb4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In C++17 and above, most helper templates already provide a "
            ],
            [
              "_v",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " version, e.g.:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In C++17 and above, most helper templates already provide a "
          },
          {
            "Text": "_v",
            "AttrFlags": 2
          },
          {
            "Text": " version, e.g.:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521963613,
        "id": "25954aab-1e44-41d0-b54d-36423413c776",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550796780000,
        "parent_id": "26da7d82-9ade-499e-8479-a5f81eca6fb4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "template\u003c class T \u003e constexpr bool is_pointer_v = is_pointer\u003cT\u003e::value;\ntemplate\u003c class T \u003e constexpr bool is_reference_v = is_reference\u003cT\u003e::value;"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "template\u003c class T \u003e constexpr bool is_pointer_v = is_pointer\u003cT\u003e::value;\ntemplate\u003c class T \u003e constexpr bool is_reference_v = is_reference\u003cT\u003e::value;",
        "code_language": "C++"
      }
    ],
    "title": "Manual distinction of types when given any type T",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}