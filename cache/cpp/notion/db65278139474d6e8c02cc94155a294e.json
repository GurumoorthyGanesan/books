{
  "ID": "db652781-3947-4d6e-8c02-cc94155a294e",
  "Root": {
    "alive": true,
    "content": [
      "abacbf75-24be-48cd-aff5-ab1b659f991e",
      "382b86d5-a8e2-4ecf-bd6b-902a7c4cf19f",
      "52b6f066-d443-42f9-8ead-9eeadd9e7f2a",
      "a797d04d-9b3d-443d-a7f7-97df7c863574",
      "857d456a-d1db-41ba-8473-fb3581ec995b",
      "ac10bf96-a0ac-469d-a3cd-eba5f83b74b5",
      "b271a8fa-5e87-4ce1-9be2-3634217d42ae",
      "19f3ab1e-1b2a-4d3e-8ea9-5b64ac438ced"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522655492,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "db652781-3947-4d6e-8c02-cc94155a294e",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550710260000,
    "parent_id": "6c5aa9dd-7698-4690-bd9e-644763376917",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Invalid pointer arithmetic"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522655488,
        "id": "abacbf75-24be-48cd-aff5-ab1b659f991e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522655488,
        "parent_id": "db652781-3947-4d6e-8c02-cc94155a294e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The following uses of pointer arithmetic cause undefined behavior:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The following uses of pointer arithmetic cause undefined behavior:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522655491,
        "id": "382b86d5-a8e2-4ecf-bd6b-902a7c4cf19f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522655491,
        "parent_id": "db652781-3947-4d6e-8c02-cc94155a294e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Addition or subtraction of an integer, if the result does not belong to the same array object as the pointer operand. (Here, the element one past the end is considered to still belong to the array.)"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Addition or subtraction of an integer, if the result does not belong to the same array object as the pointer operand. (Here, the element one past the end is considered to still belong to the array.)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522655491,
        "id": "52b6f066-d443-42f9-8ead-9eeadd9e7f2a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522655491,
        "parent_id": "db652781-3947-4d6e-8c02-cc94155a294e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int a[10];\nint* p1 = \u0026a[5];\nint* p2 = p1 + 4; // ok; p2 points to a[9]\nint* p3 = p1 + 5; // ok; p2 points to one past the end of a\nint* p4 = p1 + 6; // UB\nint* p5 = p1 - 5; // ok; p2 points to a[0]\nint* p6 = p1 - 6; // UB\nint* p7 = p3 - 5; // ok; p7 points to a[5]"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int a[10];\nint* p1 = \u0026a[5];\nint* p2 = p1 + 4; // ok; p2 points to a[9]\nint* p3 = p1 + 5; // ok; p2 points to one past the end of a\nint* p4 = p1 + 6; // UB\nint* p5 = p1 - 5; // ok; p2 points to a[0]\nint* p6 = p1 - 6; // UB\nint* p7 = p3 - 5; // ok; p7 points to a[5]",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522655492,
        "id": "a797d04d-9b3d-443d-a7f7-97df7c863574",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522655492,
        "parent_id": "db652781-3947-4d6e-8c02-cc94155a294e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Subtraction of two pointers if they do not both belong to the same array object. (Again, the element one past the end is considered to belong to the array.) The exception is that two null pointers may be subtracted, yielding 0."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Subtraction of two pointers if they do not both belong to the same array object. (Again, the element one past the end is considered to belong to the array.) The exception is that two null pointers may be subtracted, yielding 0."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522655492,
        "id": "857d456a-d1db-41ba-8473-fb3581ec995b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522655492,
        "parent_id": "db652781-3947-4d6e-8c02-cc94155a294e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int a[10];\nint b[10];\nint *p1 = \u0026a[8], *p2 = \u0026a[3];\nint d1 = p1 - p2; // yields 5\nint *p3 = p1 + 2; // ok; p3 points to one past the end of a\nint d2 = p3 - p2; // yields 7\nint *p4 = \u0026b[0];\nint d3 = p4 - p1; // UB"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int a[10];\nint b[10];\nint *p1 = \u0026a[8], *p2 = \u0026a[3];\nint d1 = p1 - p2; // yields 5\nint *p3 = p1 + 2; // ok; p3 points to one past the end of a\nint d2 = p3 - p2; // yields 7\nint *p4 = \u0026b[0];\nint d3 = p4 - p1; // UB",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522655492,
        "id": "ac10bf96-a0ac-469d-a3cd-eba5f83b74b5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522655492,
        "parent_id": "db652781-3947-4d6e-8c02-cc94155a294e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Subtraction of two pointers if the result overflows "
            ],
            [
              "std::ptrdiff_t",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Subtraction of two pointers if the result overflows "
          },
          {
            "Text": "std::ptrdiff_t",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522655492,
        "id": "b271a8fa-5e87-4ce1-9be2-3634217d42ae",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522655492,
        "parent_id": "db652781-3947-4d6e-8c02-cc94155a294e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Any pointer arithmetic where either operand’s pointee type does not match the dynamic type of the object pointed to (ignoring cv-qualification). According to the standard, “[in] particular, a pointer to a base class cannot be used for pointer arithmetic when the array contains objects of a derived class type.”"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Any pointer arithmetic where either operand’s pointee type does not match the dynamic type of the object pointed to (ignoring cv-qualification). According to the standard, “[in] particular, a pointer to a base class cannot be used for pointer arithmetic when the array contains objects of a derived class type.”"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522655492,
        "id": "19f3ab1e-1b2a-4d3e-8ea9-5b64ac438ced",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522655492,
        "parent_id": "db652781-3947-4d6e-8c02-cc94155a294e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "struct Base { int x; };\nstruct Derived : Base { int y; };\nDerived a[10];\nBase* p1 = \u0026a[1];           // ok\nBase* p2 = p1 + 1;          // UB; p1 points to Derived\nBase* p3 = p1 - 1;          // likewise\nBase* p4 = \u0026a[2];           // ok\nauto p5 = p4 - p1;          // UB; p4 and p1 point to Derived\nconst Derived* p6 = \u0026a[1];\nconst Derived* p7 = p6 + 1; // ok; cv-qualifiers don't matter"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "struct Base { int x; };\nstruct Derived : Base { int y; };\nDerived a[10];\nBase* p1 = \u0026a[1];           // ok\nBase* p2 = p1 + 1;          // UB; p1 points to Derived\nBase* p3 = p1 - 1;          // likewise\nBase* p4 = \u0026a[2];           // ok\nauto p5 = p4 - p1;          // UB; p4 and p1 point to Derived\nconst Derived* p6 = \u0026a[1];\nconst Derived* p7 = p6 + 1; // ok; cv-qualifiers don't matter",
        "code_language": "Plain Text"
      }
    ],
    "title": "Invalid pointer arithmetic",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}