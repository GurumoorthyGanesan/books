{
  "ID": "3778d8d1-58e9-4209-90d2-dca1003a46f2",
  "Root": {
    "alive": true,
    "content": [
      "ce361321-1787-4589-a152-4235239f5af9",
      "aeedfa51-74c2-4942-8ee8-2a018644522d",
      "74845dd2-673e-443f-8e10-d8edf865ea99",
      "91d1ae41-e3e3-4b19-a874-8a6b08d57b83",
      "47b1913b-3450-417a-8627-311ef53f598c",
      "c52d8470-30e8-40b4-8383-d68219bc452b",
      "7fc6f482-cdd3-4712-b9b8-28da632bcb3b",
      "120cab3d-c54e-4415-a38f-e89333f14721",
      "ed833d59-ee87-49b2-9b53-8bf98071f985",
      "f781a304-54f7-45d8-b43d-86d379a15ca2",
      "295abcca-b50c-4ec1-9db4-2389573103de"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550523051961,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "3778d8d1-58e9-4209-90d2-dca1003a46f2",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551687206879,
    "parent_id": "1e5df2e7-ee0b-4037-ab62-15139a784f28",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Placement new"
        ]
      ]
    },
    "type": "page",
    "version": 4,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523051959,
        "id": "ce361321-1787-4589-a152-4235239f5af9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523051959,
        "parent_id": "3778d8d1-58e9-4209-90d2-dca1003a46f2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "There are situations when we don’t want to rely upon Free Store for allocating memory and we want to use custom memory allocations using "
            ],
            [
              "new",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "There are situations when we don’t want to rely upon Free Store for allocating memory and we want to use custom memory allocations using "
          },
          {
            "Text": "new",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523051960,
        "id": "aeedfa51-74c2-4942-8ee8-2a018644522d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523051960,
        "parent_id": "3778d8d1-58e9-4209-90d2-dca1003a46f2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For these situations we can use "
            ],
            [
              "Placement New",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", where we can tell `new’ operator to allocate memory from a pre-allocated memory location"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For these situations we can use "
          },
          {
            "Text": "Placement New",
            "AttrFlags": 2
          },
          {
            "Text": ", where we can tell `new’ operator to allocate memory from a pre-allocated memory location"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523051960,
        "id": "74845dd2-673e-443f-8e10-d8edf865ea99",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523051960,
        "parent_id": "3778d8d1-58e9-4209-90d2-dca1003a46f2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For example"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For example"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523051960,
        "id": "91d1ae41-e3e3-4b19-a874-8a6b08d57b83",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523051960,
        "parent_id": "3778d8d1-58e9-4209-90d2-dca1003a46f2",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int a4byteInteger;\n\nchar *a4byteChar = new (\u0026a4byteInteger) char[4];"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int a4byteInteger;\n\nchar *a4byteChar = new (\u0026a4byteInteger) char[4];",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523051960,
        "id": "47b1913b-3450-417a-8627-311ef53f598c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523051960,
        "parent_id": "3778d8d1-58e9-4209-90d2-dca1003a46f2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In this example, the memory pointed by "
            ],
            [
              "a4byteChar",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is 4 byte allocated to ‘stack’ via integer variable "
            ],
            [
              "a4byteInteger",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In this example, the memory pointed by "
          },
          {
            "Text": "a4byteChar",
            "AttrFlags": 2
          },
          {
            "Text": " is 4 byte allocated to ‘stack’ via integer variable "
          },
          {
            "Text": "a4byteInteger",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523051960,
        "id": "c52d8470-30e8-40b4-8383-d68219bc452b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523051960,
        "parent_id": "3778d8d1-58e9-4209-90d2-dca1003a46f2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The benefit of this kind of memory allocation is the fact that programmers control the allocation. In the example above, since "
            ],
            [
              "a4byteInteger",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is allocated on stack, we don’t need to make an explicit call to ’delete a4byteChar`."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The benefit of this kind of memory allocation is the fact that programmers control the allocation. In the example above, since "
          },
          {
            "Text": "a4byteInteger",
            "AttrFlags": 2
          },
          {
            "Text": " is allocated on stack, we don’t need to make an explicit call to ’delete a4byteChar`."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523051960,
        "id": "7fc6f482-cdd3-4712-b9b8-28da632bcb3b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523051960,
        "parent_id": "3778d8d1-58e9-4209-90d2-dca1003a46f2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Same behavior can be achieved for dynamic allocated memory also. For example"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Same behavior can be achieved for dynamic allocated memory also. For example"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523051960,
        "id": "120cab3d-c54e-4415-a38f-e89333f14721",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523051960,
        "parent_id": "3778d8d1-58e9-4209-90d2-dca1003a46f2",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int *a8byteDynamicInteger = new int[2];\n\nchar *a8byteChar = new (a8byteDynamicInteger) char[8];"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int *a8byteDynamicInteger = new int[2];\n\nchar *a8byteChar = new (a8byteDynamicInteger) char[8];",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523051961,
        "id": "ed833d59-ee87-49b2-9b53-8bf98071f985",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523051961,
        "parent_id": "3778d8d1-58e9-4209-90d2-dca1003a46f2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In this case, the memory pointer by "
            ],
            [
              "a8byteChar",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will be referring to dynamic memory allocated by "
            ],
            [
              "a8byteDynamicInteger",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". In this case however, we need to explicitly call"
            ],
            [
              "delete a8byteDynamicInteger",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to release the memory"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In this case, the memory pointer by "
          },
          {
            "Text": "a8byteChar",
            "AttrFlags": 2
          },
          {
            "Text": " will be referring to dynamic memory allocated by "
          },
          {
            "Text": "a8byteDynamicInteger",
            "AttrFlags": 2
          },
          {
            "Text": ". In this case however, we need to explicitly call"
          },
          {
            "Text": "delete a8byteDynamicInteger",
            "AttrFlags": 2
          },
          {
            "Text": " to release the memory"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523051961,
        "id": "f781a304-54f7-45d8-b43d-86d379a15ca2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523051961,
        "parent_id": "3778d8d1-58e9-4209-90d2-dca1003a46f2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Another example for C++ Class"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Another example for C++ Class"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523051961,
        "id": "295abcca-b50c-4ec1-9db4-2389573103de",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523051961,
        "parent_id": "3778d8d1-58e9-4209-90d2-dca1003a46f2",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "struct ComplexType {\n    int a;\n\n    ComplexType() : a(0) {}\n    ~ComplexType() {}\n};\n\nint main() {\n    char* dynArray = new char[256];\n\n    //Calls ComplexType's constructor to initialize memory as a ComplexType\n    new((void*)dynArray) ComplexType();\n\n    //Clean up memory once we're done\n    reinterpret_cast\u003cComplexType*\u003e(dynArray)-\u003e~ComplexType();\n    delete[] dynArray;\n\n    //Stack memory can also be used with placement new\n    alignas(ComplexType) char localArray[256]; //alignas() available since C++11\n\n    new((void*)localArray) ComplexType();\n\n    //Only need to call the destructor for stack memory\n    reinterpret_cast\u003cComplexType*\u003e(localArray)-\u003e~ComplexType();\n\n    return 0;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "struct ComplexType {\n    int a;\n\n    ComplexType() : a(0) {}\n    ~ComplexType() {}\n};\n\nint main() {\n    char* dynArray = new char[256];\n\n    //Calls ComplexType's constructor to initialize memory as a ComplexType\n    new((void*)dynArray) ComplexType();\n\n    //Clean up memory once we're done\n    reinterpret_cast\u003cComplexType*\u003e(dynArray)-\u003e~ComplexType();\n    delete[] dynArray;\n\n    //Stack memory can also be used with placement new\n    alignas(ComplexType) char localArray[256]; //alignas() available since C++11\n\n    new((void*)localArray) ComplexType();\n\n    //Only need to call the destructor for stack memory\n    reinterpret_cast\u003cComplexType*\u003e(localArray)-\u003e~ComplexType();\n\n    return 0;\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "Placement new",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}