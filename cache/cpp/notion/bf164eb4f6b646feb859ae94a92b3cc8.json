{
  "ID": "bf164eb4-f6b6-46fe-b859-ae94a92b3cc8",
  "Root": {
    "alive": true,
    "content": [
      "791ba426-b529-4855-addc-ff43a5738bb1",
      "4f2977b3-69ff-4f30-8280-3c9584fca965",
      "5fd8a652-7fa8-4380-946a-ad6a77be10f5",
      "bd51532a-97cb-4e82-bcb6-45b430eb4c04",
      "156e8756-bb9a-45f3-adec-732af1f4d91a"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522013480,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "bf164eb4-f6b6-46fe-b859-ae94a92b3cc8",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550780280000,
    "parent_id": "b96c747c-3d87-49a0-b2bb-264f7c11b216",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Flushing a stream"
        ]
      ]
    },
    "type": "page",
    "version": 12,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522013476,
        "id": "791ba426-b529-4855-addc-ff43a5738bb1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522013476,
        "parent_id": "bf164eb4-f6b6-46fe-b859-ae94a92b3cc8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "File streams are buffered by default, as are many other types of streams. This means that writes to the stream may not cause the underlying file to change immediately. In oder to force all buffered writes to take place immediately, you can "
            ],
            [
              "flush",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " the stream. You can do this either directly by invoking the "
            ],
            [
              "flush()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method or through the "
            ],
            [
              "std::flush",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " stream manipulator:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "File streams are buffered by default, as are many other types of streams. This means that writes to the stream may not cause the underlying file to change immediately. In oder to force all buffered writes to take place immediately, you can "
          },
          {
            "Text": "flush",
            "AttrFlags": 4
          },
          {
            "Text": " the stream. You can do this either directly by invoking the "
          },
          {
            "Text": "flush()",
            "AttrFlags": 2
          },
          {
            "Text": " method or through the "
          },
          {
            "Text": "std::flush",
            "AttrFlags": 2
          },
          {
            "Text": " stream manipulator:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522013479,
        "id": "4f2977b3-69ff-4f30-8280-3c9584fca965",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550780280000,
        "parent_id": "bf164eb4-f6b6-46fe-b859-ae94a92b3cc8",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "std::ofstream os(\"foo.txt\");\nos \u003c\u003c \"Hello World!\" \u003c\u003c std::flush;\n\nchar data[3] = \"Foo\";\nos.write(data, 3);\nos.flush();"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "std::ofstream os(\"foo.txt\");\nos \u003c\u003c \"Hello World!\" \u003c\u003c std::flush;\n\nchar data[3] = \"Foo\";\nos.write(data, 3);\nos.flush();",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522013479,
        "id": "5fd8a652-7fa8-4380-946a-ad6a77be10f5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522013479,
        "parent_id": "bf164eb4-f6b6-46fe-b859-ae94a92b3cc8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "There is a stream manipulator "
            ],
            [
              "std::endl",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " that combines writing a newline with flushing the stream:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "There is a stream manipulator "
          },
          {
            "Text": "std::endl",
            "AttrFlags": 2
          },
          {
            "Text": " that combines writing a newline with flushing the stream:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522013480,
        "id": "bd51532a-97cb-4e82-bcb6-45b430eb4c04",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550780280000,
        "parent_id": "bf164eb4-f6b6-46fe-b859-ae94a92b3cc8",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "// Both following lines do the same thing\nos \u003c\u003c \"Hello World!\\n\" \u003c\u003c std::flush;\nos \u003c\u003c \"Hello world!\" \u003c\u003c std::endl;"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "// Both following lines do the same thing\nos \u003c\u003c \"Hello World!\\n\" \u003c\u003c std::flush;\nos \u003c\u003c \"Hello world!\" \u003c\u003c std::endl;",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522013480,
        "id": "156e8756-bb9a-45f3-adec-732af1f4d91a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522013480,
        "parent_id": "bf164eb4-f6b6-46fe-b859-ae94a92b3cc8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Buffering can improve the performance of writing to a stream. Therefore, applications that do a lot of writing should avoid flushing unnecessarily. Contrary, if I/O is done infrequently, applications should consider flushing frequently in order to avoid data getting stuck in the stream object."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Buffering can improve the performance of writing to a stream. Therefore, applications that do a lot of writing should avoid flushing unnecessarily. Contrary, if I/O is done infrequently, applications should consider flushing frequently in order to avoid data getting stuck in the stream object."
          }
        ]
      }
    ],
    "title": "Flushing a stream",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}