{
  "ID": "71081a52-4dd4-4e98-b33e-6a880e28ddde",
  "Root": {
    "alive": true,
    "content": [
      "8255e0c6-4494-42d0-8414-0874744313f1",
      "41fa84ef-a4b3-4c52-8471-f4904eec3648",
      "a590991f-566c-4485-8daf-7107e44cd679",
      "93f716d5-8d1e-4fd3-aeac-64e0cd974044"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550523503122,
    "id": "71081a52-4dd4-4e98-b33e-6a880e28ddde",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550523503122,
    "parent_id": "f6be37ea-b1ea-4d12-902e-1e55a74f3c28",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "040 Using efficient containers"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523503119,
        "id": "8255e0c6-4494-42d0-8414-0874744313f1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523503119,
        "parent_id": "71081a52-4dd4-4e98-b33e-6a880e28ddde",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Optimizing by using the right data structures at the right time can change the time-complexity of the code."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Optimizing by using the right data structures at the right time can change the time-complexity of the code."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523503122,
        "id": "41fa84ef-a4b3-4c52-8471-f4904eec3648",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523503122,
        "parent_id": "71081a52-4dd4-4e98-b33e-6a880e28ddde",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// This variant of stableUnique contains a complexity of N log(N)\n// N \u003e number of elements in v\n// log(N) \u003e insert complexity of std::set\nstd::vector\u003cstd::string\u003e stableUnique(const std::vector\u003cstd::string\u003e \u0026v) {\n    std::vector\u003cstd::string\u003e result;\n    std::set\u003cstd::string\u003e checkUnique;\n    for (const auto \u0026s : v) {\n        // See Optimizing by executing less code\n        if (checkUnique.insert(s).second)\n            result.push_back(s);\n    }\n    return result;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// This variant of stableUnique contains a complexity of N log(N)\n// N \u003e number of elements in v\n// log(N) \u003e insert complexity of std::set\nstd::vector\u003cstd::string\u003e stableUnique(const std::vector\u003cstd::string\u003e \u0026v) {\n    std::vector\u003cstd::string\u003e result;\n    std::set\u003cstd::string\u003e checkUnique;\n    for (const auto \u0026s : v) {\n        // See Optimizing by executing less code\n        if (checkUnique.insert(s).second)\n            result.push_back(s);\n    }\n    return result;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523503122,
        "id": "a590991f-566c-4485-8daf-7107e44cd679",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523503122,
        "parent_id": "71081a52-4dd4-4e98-b33e-6a880e28ddde",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "By using a container which uses a different implementation for storing its elements (hash container instead of tree), we can transform our implementation to complexity N. As a side effect, we will call the comparison operator for std::string less, as it only has to be called when the inserted string should end up in the same bucket."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "By using a container which uses a different implementation for storing its elements (hash container instead of tree), we can transform our implementation to complexity N. As a side effect, we will call the comparison operator for std::string less, as it only has to be called when the inserted string should end up in the same bucket."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523503122,
        "id": "93f716d5-8d1e-4fd3-aeac-64e0cd974044",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523503122,
        "parent_id": "71081a52-4dd4-4e98-b33e-6a880e28ddde",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// This variant of stableUnique contains a complexity of N\n// N \u003e number of elements in v\n// 1 \u003e insert complexity of std::unordered_set\nstd::vector\u003cstd::string\u003e stableUnique(const std::vector\u003cstd::string\u003e \u0026v) {\n    std::vector\u003cstd::string\u003e result;\n    std::unordered_set\u003cstd::string\u003e checkUnique;\n    for (const auto \u0026s : v) {\n        // See Optimizing by executing less code\n        if (checkUnique.insert(s).second)\n            result.push_back(s);\n    }\n    return result;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// This variant of stableUnique contains a complexity of N\n// N \u003e number of elements in v\n// 1 \u003e insert complexity of std::unordered_set\nstd::vector\u003cstd::string\u003e stableUnique(const std::vector\u003cstd::string\u003e \u0026v) {\n    std::vector\u003cstd::string\u003e result;\n    std::unordered_set\u003cstd::string\u003e checkUnique;\n    for (const auto \u0026s : v) {\n        // See Optimizing by executing less code\n        if (checkUnique.insert(s).second)\n            result.push_back(s);\n    }\n    return result;\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "040 Using efficient containers"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}