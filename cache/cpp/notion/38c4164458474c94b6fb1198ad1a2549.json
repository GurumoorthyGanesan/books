{
  "ID": "38c41644-5847-4c94-b6fb-1198ad1a2549",
  "Root": {
    "alive": true,
    "content": [
      "705c1e08-285f-41ed-9bcc-e4b315b05290",
      "26d63ba9-424d-4205-84fd-3e7e5c9836c2",
      "2ee8a011-7873-41ff-99a5-19b6cdfec650",
      "011a40a1-dd4d-4d17-ac9f-bf1dfc450c0f",
      "47af7ebd-b6a0-4a0b-a3f5-1a2aa590632c",
      "cb8f8faa-ab9c-4604-8abe-4d6b8503cd20",
      "e172741f-fbb3-4bb4-b990-bb26231cc1e2",
      "8e8caf2a-10a7-4eb7-95df-47e6b7f8820e",
      "0443e970-ecf6-4c6d-90a7-dd13003486c8",
      "0ae5164c-70a4-4cb1-9bf0-dd6b5038698c",
      "76fa38bd-0545-4120-b124-7c0756960605"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522396297,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "38c41644-5847-4c94-b6fb-1198ad1a2549",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550709960000,
    "parent_id": "e1dd94ae-aa5a-4f89-b959-f2ec61771796",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Regular expressions"
        ]
      ]
    },
    "type": "page",
    "version": 10,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522396291,
        "id": "705c1e08-285f-41ed-9bcc-e4b315b05290",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522396291,
        "parent_id": "38c41644-5847-4c94-b6fb-1198ad1a2549",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Introduction"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Introduction"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522396293,
        "id": "26d63ba9-424d-4205-84fd-3e7e5c9836c2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522396293,
        "parent_id": "38c41644-5847-4c94-b6fb-1198ad1a2549",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Regular Expressions",
              [
                [
                  "a",
                  "https://en.wikipedia.org/wiki/Regular_expression"
                ]
              ]
            ],
            [
              " (sometimes called regexs or regexps) are a textual syntax which represents the patterns which can be matched in the strings operated upon."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Regular Expressions",
            "Link": "https://en.wikipedia.org/wiki/Regular_expression"
          },
          {
            "Text": " (sometimes called regexs or regexps) are a textual syntax which represents the patterns which can be matched in the strings operated upon."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522396293,
        "id": "2ee8a011-7873-41ff-99a5-19b6cdfec650",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522396293,
        "parent_id": "38c41644-5847-4c94-b6fb-1198ad1a2549",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Regular Expressions, introduced in "
            ],
            [
              "c++11",
              [
                [
                  "a",
                  "https://stackoverflow.com/questions/tagged/c%2B%2B11"
                ]
              ]
            ],
            [
              ", may optionally support a return array of matched strings or another textual syntax defining how to replace matched patterns in strings operated upon."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Regular Expressions, introduced in "
          },
          {
            "Text": "c++11",
            "Link": "https://stackoverflow.com/questions/tagged/c%2B%2B11"
          },
          {
            "Text": ", may optionally support a return array of matched strings or another textual syntax defining how to replace matched patterns in strings operated upon."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522396293,
        "id": "011a40a1-dd4d-4d17-ac9f-bf1dfc450c0f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522396293,
        "parent_id": "38c41644-5847-4c94-b6fb-1198ad1a2549",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Syntax"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Syntax"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522396294,
        "id": "47af7ebd-b6a0-4a0b-a3f5-1a2aa590632c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522396294,
        "parent_id": "38c41644-5847-4c94-b6fb-1198ad1a2549",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "regex_match // Returns whether the entire character sequence was matched by the regex, optionally capturing into a match object"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "regex_match // Returns whether the entire character sequence was matched by the regex, optionally capturing into a match object"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522396294,
        "id": "cb8f8faa-ab9c-4604-8abe-4d6b8503cd20",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522396294,
        "parent_id": "38c41644-5847-4c94-b6fb-1198ad1a2549",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "regex_search // Returns whether a portion of the character sequence was matched by the regex, optionally capturing into a match object"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "regex_search // Returns whether a portion of the character sequence was matched by the regex, optionally capturing into a match object"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522396294,
        "id": "e172741f-fbb3-4bb4-b990-bb26231cc1e2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522396294,
        "parent_id": "38c41644-5847-4c94-b6fb-1198ad1a2549",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "regex_replace // Returns the input character sequence as modified by a regex via a replacement format string"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "regex_replace // Returns the input character sequence as modified by a regex via a replacement format string"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522396295,
        "id": "8e8caf2a-10a7-4eb7-95df-47e6b7f8820e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522396295,
        "parent_id": "38c41644-5847-4c94-b6fb-1198ad1a2549",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "regex_token_iterator // Initialized with a character sequence defined by iterators, a list of capture indexes to iterate over, and a regex. Dereferencing returns the currently indexed match of the regex. Incrementing moves to the next capture index or if currently at the last index, resets the index and hinds the next occurrence of a regex match in the character sequence"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "regex_token_iterator // Initialized with a character sequence defined by iterators, a list of capture indexes to iterate over, and a regex. Dereferencing returns the currently indexed match of the regex. Incrementing moves to the next capture index or if currently at the last index, resets the index and hinds the next occurrence of a regex match in the character sequence"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522396295,
        "id": "0443e970-ecf6-4c6d-90a7-dd13003486c8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522396295,
        "parent_id": "38c41644-5847-4c94-b6fb-1198ad1a2549",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "regex_iterator // Initialized with a character sequence defined by iterators and a regex. Dereferencing returns the portion of the character sequence the entire regex currently matches. Incrementing finds the next occurrence of a regex match in the character sequence"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "regex_iterator // Initialized with a character sequence defined by iterators and a regex. Dereferencing returns the portion of the character sequence the entire regex currently matches. Incrementing finds the next occurrence of a regex match in the character sequence"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522396295,
        "id": "0ae5164c-70a4-4cb1-9bf0-dd6b5038698c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522396295,
        "parent_id": "38c41644-5847-4c94-b6fb-1198ad1a2549",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Parameters"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Parameters"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522396296,
        "id": "76fa38bd-0545-4120-b124-7c0756960605",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522396296,
        "parent_id": "38c41644-5847-4c94-b6fb-1198ad1a2549",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "|Signature|Description| |—|—| |"
            ],
            [
              "bool regex_match(BidirectionalIterator first, BidirectionalIterator last, smatch\u0026 sm, const regex\u0026 re, regex_constraints::match_flag_type flags)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "| "
            ],
            [
              "BidirectionalIterator",
              [
                [
                  "b"
                ],
                [
                  "c"
                ]
              ]
            ],
            [
              " is any character iterator that provides increment and decrement operators "
            ],
            [
              "smatch",
              [
                [
                  "b"
                ],
                [
                  "c"
                ]
              ]
            ],
            [
              " may be "
            ],
            [
              "cmatch",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or any other other variant of "
            ],
            [
              "match_results",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " that accepts the type of "
            ],
            [
              "BidirectionalIterator",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " the "
            ],
            [
              "smatch",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " argument may be ommitted if the results of the regex are not needed "
            ],
            [
              "Returns",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " whether "
            ],
            [
              "re",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " matches the entire character sequence defined by "
            ],
            [
              "first",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "last",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "| |"
            ],
            [
              "bool regex_match(const string\u0026 str, smatch\u0026 sm, const regex re\u0026, regex_constraints::match_flag_type flags)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "| "
            ],
            [
              "string",
              [
                [
                  "b"
                ],
                [
                  "c"
                ]
              ]
            ],
            [
              " may be either a "
            ],
            [
              "const char*",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or an L-Value "
            ],
            [
              "string",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "the functions accepting an R-Value ",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              "string",
              [
                [
                  "i"
                ],
                [
                  "c"
                ]
              ]
            ],
            [
              " are explicitly deleted",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "smatch",
              [
                [
                  "b"
                ],
                [
                  "c"
                ]
              ]
            ],
            [
              " may be "
            ],
            [
              "cmatch",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or any other other variant of "
            ],
            [
              "match_results",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " that accepts the type of "
            ],
            [
              "str",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " the "
            ],
            [
              "smatch",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " argument may be ommitted if the results of the regex are not needed "
            ],
            [
              "Returns",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " whether "
            ],
            [
              "re",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " matches the entire character sequence defined by "
            ],
            [
              "str",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "|"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "|Signature|Description| |—|—| |"
          },
          {
            "Text": "bool regex_match(BidirectionalIterator first, BidirectionalIterator last, smatch\u0026 sm, const regex\u0026 re, regex_constraints::match_flag_type flags)",
            "AttrFlags": 2
          },
          {
            "Text": "| "
          },
          {
            "Text": "BidirectionalIterator",
            "AttrFlags": 3
          },
          {
            "Text": " is any character iterator that provides increment and decrement operators "
          },
          {
            "Text": "smatch",
            "AttrFlags": 3
          },
          {
            "Text": " may be "
          },
          {
            "Text": "cmatch",
            "AttrFlags": 2
          },
          {
            "Text": " or any other other variant of "
          },
          {
            "Text": "match_results",
            "AttrFlags": 2
          },
          {
            "Text": " that accepts the type of "
          },
          {
            "Text": "BidirectionalIterator",
            "AttrFlags": 2
          },
          {
            "Text": " the "
          },
          {
            "Text": "smatch",
            "AttrFlags": 2
          },
          {
            "Text": " argument may be ommitted if the results of the regex are not needed "
          },
          {
            "Text": "Returns",
            "AttrFlags": 1
          },
          {
            "Text": " whether "
          },
          {
            "Text": "re",
            "AttrFlags": 2
          },
          {
            "Text": " matches the entire character sequence defined by "
          },
          {
            "Text": "first",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "last",
            "AttrFlags": 2
          },
          {
            "Text": "| |"
          },
          {
            "Text": "bool regex_match(const string\u0026 str, smatch\u0026 sm, const regex re\u0026, regex_constraints::match_flag_type flags)",
            "AttrFlags": 2
          },
          {
            "Text": "| "
          },
          {
            "Text": "string",
            "AttrFlags": 3
          },
          {
            "Text": " may be either a "
          },
          {
            "Text": "const char*",
            "AttrFlags": 2
          },
          {
            "Text": " or an L-Value "
          },
          {
            "Text": "string",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "the functions accepting an R-Value ",
            "AttrFlags": 4
          },
          {
            "Text": "string",
            "AttrFlags": 6
          },
          {
            "Text": " are explicitly deleted",
            "AttrFlags": 4
          },
          {
            "Text": " "
          },
          {
            "Text": "smatch",
            "AttrFlags": 3
          },
          {
            "Text": " may be "
          },
          {
            "Text": "cmatch",
            "AttrFlags": 2
          },
          {
            "Text": " or any other other variant of "
          },
          {
            "Text": "match_results",
            "AttrFlags": 2
          },
          {
            "Text": " that accepts the type of "
          },
          {
            "Text": "str",
            "AttrFlags": 2
          },
          {
            "Text": " the "
          },
          {
            "Text": "smatch",
            "AttrFlags": 2
          },
          {
            "Text": " argument may be ommitted if the results of the regex are not needed "
          },
          {
            "Text": "Returns",
            "AttrFlags": 1
          },
          {
            "Text": " whether "
          },
          {
            "Text": "re",
            "AttrFlags": 2
          },
          {
            "Text": " matches the entire character sequence defined by "
          },
          {
            "Text": "str",
            "AttrFlags": 2
          },
          {
            "Text": "|"
          }
        ]
      }
    ],
    "title": "Regular expressions",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}