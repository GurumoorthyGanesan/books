{
  "ID": "abdf0801-2937-49b6-a559-4c82f80de725",
  "Root": {
    "alive": true,
    "content": [
      "3415f786-e487-4dab-98e6-89946250046e",
      "32aa880d-ea40-4368-a5d6-c7cf109b6bde"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550521984463,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "abdf0801-2937-49b6-a559-4c82f80de725",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550799420000,
    "parent_id": "26e69b2d-1c6d-47ea-af87-47fa9cfbdf56",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Using std::vector"
        ]
      ]
    },
    "type": "page",
    "version": 12,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521984462,
        "id": "3415f786-e487-4dab-98e6-89946250046e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521984462,
        "parent_id": "abdf0801-2937-49b6-a559-4c82f80de725",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A "
            ],
            [
              "std::vector",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can be useful for returning a dynamic number of variables of the same type. The following example uses "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " as data type, but a "
            ],
            [
              "std::vector",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can hold any type that is trivially copyable:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A "
          },
          {
            "Text": "std::vector",
            "AttrFlags": 2
          },
          {
            "Text": " can be useful for returning a dynamic number of variables of the same type. The following example uses "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": " as data type, but a "
          },
          {
            "Text": "std::vector",
            "AttrFlags": 2
          },
          {
            "Text": " can hold any type that is trivially copyable:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521984463,
        "id": "32aa880d-ea40-4368-a5d6-c7cf109b6bde",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550799420000,
        "parent_id": "abdf0801-2937-49b6-a559-4c82f80de725",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "#include \u003cvector\u003e\n#include \u003ciostream\u003e\n\n// the following function returns all integers between and including 'a' and 'b' in a vector\n// (the function can return up to std::vector::max_size elements with the vector, given that\n// the system's main memory can hold that many items)\nstd::vector\u003cint\u003e fillVectorFrom(int a, int b) {\n    std::vector\u003cint\u003e temp;\n    for (int i = a; i \u003c= b; i++) {\n        temp.push_back(i);\n    }\n    return temp;\n}\n\nint main() {    \n    // assigns the filled vector created inside the function to the new vector 'v'\n    std::vector\u003cint\u003e v = fillVectorFrom(1, 10);\n\n    // prints \"1 2 3 4 5 6 7 8 9 10 \"\n    for (int i = 0; i \u003c v.size(); i++) {\n        std::cout \u003c\u003c v[i] \u003c\u003c \" \";\n    }\n    std::cout \u003c\u003c std::endl;\n    return 0;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "#include \u003cvector\u003e\n#include \u003ciostream\u003e\n\n// the following function returns all integers between and including 'a' and 'b' in a vector\n// (the function can return up to std::vector::max_size elements with the vector, given that\n// the system's main memory can hold that many items)\nstd::vector\u003cint\u003e fillVectorFrom(int a, int b) {\n    std::vector\u003cint\u003e temp;\n    for (int i = a; i \u003c= b; i++) {\n        temp.push_back(i);\n    }\n    return temp;\n}\n\nint main() {    \n    // assigns the filled vector created inside the function to the new vector 'v'\n    std::vector\u003cint\u003e v = fillVectorFrom(1, 10);\n\n    // prints \"1 2 3 4 5 6 7 8 9 10 \"\n    for (int i = 0; i \u003c v.size(); i++) {\n        std::cout \u003c\u003c v[i] \u003c\u003c \" \";\n    }\n    std::cout \u003c\u003c std::endl;\n    return 0;\n}",
        "code_language": "C++"
      }
    ],
    "title": "Using std::vector",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}