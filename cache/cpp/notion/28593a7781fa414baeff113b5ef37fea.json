{
  "ID": "28593a77-81fa-414b-aeff-113b5ef37fea",
  "Root": {
    "alive": true,
    "content": [
      "3284af5f-6eaf-4a35-a3d9-b04c54f81b9d",
      "18545615-385e-4b82-8e25-020348146d11",
      "bb4e26a4-562d-422d-9885-279856092748",
      "fb0a3152-e33e-4c9a-9837-bd3750a9d537",
      "d00a6882-f6d8-43f1-aafd-34bc9b171e71",
      "07ef2b56-223e-40a8-a97f-a30e0ee30e12",
      "d7bd8a39-f47d-4db7-845f-8c7d53eedeb6",
      "52483267-c183-4656-b159-3c57eb4f3485",
      "3e115d4b-e340-4227-8c58-b093fd063262",
      "233ce095-28bc-46bd-9852-68a06e888eb6",
      "5dc5aeec-4883-450d-90b2-b1f9b8855ae8",
      "bb7774cb-0d51-4e6b-a7b3-a2459b18de16",
      "607358f6-c33a-4ccf-a3ed-3e713fac5182",
      "5b356b05-3b62-4ada-8fd0-8c5afe50af0f",
      "1c80f766-e570-488d-8110-dd7c71489b9a"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550523066626,
    "id": "28593a77-81fa-414b-aeff-113b5ef37fea",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550523066626,
    "parent_id": "99e19430-5cdd-423f-8fa9-0e2f0bf264ab",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "080 Counting bits set"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523066620,
        "id": "3284af5f-6eaf-4a35-a3d9-b04c54f81b9d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523066620,
        "parent_id": "28593a77-81fa-414b-aeff-113b5ef37fea",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The population count of a bitstring is often needed in cryptography and other applications and the problem has been widely studied."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The population count of a bitstring is often needed in cryptography and other applications and the problem has been widely studied."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523066622,
        "id": "18545615-385e-4b82-8e25-020348146d11",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523066622,
        "parent_id": "28593a77-81fa-414b-aeff-113b5ef37fea",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The naive way requires one iteration per bit:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The naive way requires one iteration per bit:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523066622,
        "id": "bb4e26a4-562d-422d-9885-279856092748",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523066622,
        "parent_id": "28593a77-81fa-414b-aeff-113b5ef37fea",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "unsigned value = 1234;\nunsigned bits = 0;  // accumulates the total number of bits set in `n`\n\nfor (bits = 0; value; value \u003e\u003e= 1)\n  bits += value \u0026 1;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "unsigned value = 1234;\nunsigned bits = 0;  // accumulates the total number of bits set in `n`\n\nfor (bits = 0; value; value \u003e\u003e= 1)\n  bits += value \u0026 1;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523066622,
        "id": "fb0a3152-e33e-4c9a-9837-bd3750a9d537",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523066622,
        "parent_id": "28593a77-81fa-414b-aeff-113b5ef37fea",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523066624,
        "id": "d00a6882-f6d8-43f1-aafd-34bc9b171e71",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523066624,
        "parent_id": "28593a77-81fa-414b-aeff-113b5ef37fea",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A nice trick (based on "
            ],
            [
              "http://stackoverflow.com/documentation/c%2b%2b/3016/bit-manipulation/17299/remove-rightmost-set-bit",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%2B%2B/3016/bit-manipulation/17299/remove-rightmost-set-bit"
                ]
              ]
            ],
            [
              " ) is:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A nice trick (based on "
          },
          {
            "Text": "http://stackoverflow.com/documentation/c%2b%2b/3016/bit-manipulation/17299/remove-rightmost-set-bit",
            "Link": "http://stackoverflow.com/documentation/c%2B%2B/3016/bit-manipulation/17299/remove-rightmost-set-bit"
          },
          {
            "Text": " ) is:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523066624,
        "id": "07ef2b56-223e-40a8-a97f-a30e0ee30e12",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523066624,
        "parent_id": "28593a77-81fa-414b-aeff-113b5ef37fea",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "unsigned bits = 0;  // accumulates the total number of bits set in `n`\n\nfor (; value; ++bits)\n  value \u0026= value - 1;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "unsigned bits = 0;  // accumulates the total number of bits set in `n`\n\nfor (; value; ++bits)\n  value \u0026= value - 1;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523066625,
        "id": "d7bd8a39-f47d-4db7-845f-8c7d53eedeb6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523066625,
        "parent_id": "28593a77-81fa-414b-aeff-113b5ef37fea",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It goes through as many iterations as there are set bits, so it’s good when "
            ],
            [
              "value",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is expected to have few nonzero bits."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It goes through as many iterations as there are set bits, so it’s good when "
          },
          {
            "Text": "value",
            "AttrFlags": 2
          },
          {
            "Text": " is expected to have few nonzero bits."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523066625,
        "id": "52483267-c183-4656-b159-3c57eb4f3485",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523066625,
        "parent_id": "28593a77-81fa-414b-aeff-113b5ef37fea",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The method was first proposed by Peter Wegner (in "
            ],
            [
              "CACM",
              [
                [
                  "a",
                  "http://cacm.acm.org/"
                ]
              ]
            ],
            [
              " 3 / 322 - 1960) and it’s well known since it appears in "
            ],
            [
              "C Programming Language",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " by Brian W. Kernighan and Dennis M. Ritchie."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The method was first proposed by Peter Wegner (in "
          },
          {
            "Text": "CACM",
            "Link": "http://cacm.acm.org/"
          },
          {
            "Text": " 3 / 322 - 1960) and it’s well known since it appears in "
          },
          {
            "Text": "C Programming Language",
            "AttrFlags": 4
          },
          {
            "Text": " by Brian W. Kernighan and Dennis M. Ritchie."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523066625,
        "id": "3e115d4b-e340-4227-8c58-b093fd063262",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523066625,
        "parent_id": "28593a77-81fa-414b-aeff-113b5ef37fea",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523066625,
        "id": "233ce095-28bc-46bd-9852-68a06e888eb6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523066625,
        "parent_id": "28593a77-81fa-414b-aeff-113b5ef37fea",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This requires 12 arithmetic operations, one of which is a multication:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This requires 12 arithmetic operations, one of which is a multication:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523066625,
        "id": "5dc5aeec-4883-450d-90b2-b1f9b8855ae8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523066625,
        "parent_id": "28593a77-81fa-414b-aeff-113b5ef37fea",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "unsigned popcount(std::uint64_t x)\n{\n  const std::uint64_t m1  = 0x5555555555555555;  // binary: 0101...\n  const std::uint64_t m2  = 0x3333333333333333;  // binary: 00110011..\n  const std::uint64_t m4  = 0x0f0f0f0f0f0f0f0f;  // binary: 0000111100001111\n\n  x -= (x \u003e\u003e 1) \u0026 m1;             // put count of each 2 bits into those 2 bits\n  x = (x \u0026 m2) + ((x \u003e\u003e 2) \u0026 m2); // put count of each 4 bits into those 4 bits \n  x = (x + (x \u003e\u003e 4)) \u0026 m4;        // put count of each 8 bits into those 8 bits \n  return (x * h01) \u003e\u003e 56;  // left 8 bits of x + (x\u003c\u003c8) + (x\u003c\u003c16) + (x\u003c\u003c24) + ... \n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "unsigned popcount(std::uint64_t x)\n{\n  const std::uint64_t m1  = 0x5555555555555555;  // binary: 0101...\n  const std::uint64_t m2  = 0x3333333333333333;  // binary: 00110011..\n  const std::uint64_t m4  = 0x0f0f0f0f0f0f0f0f;  // binary: 0000111100001111\n\n  x -= (x \u003e\u003e 1) \u0026 m1;             // put count of each 2 bits into those 2 bits\n  x = (x \u0026 m2) + ((x \u003e\u003e 2) \u0026 m2); // put count of each 4 bits into those 4 bits \n  x = (x + (x \u003e\u003e 4)) \u0026 m4;        // put count of each 8 bits into those 8 bits \n  return (x * h01) \u003e\u003e 56;  // left 8 bits of x + (x\u003c\u003c8) + (x\u003c\u003c16) + (x\u003c\u003c24) + ... \n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523066626,
        "id": "bb7774cb-0d51-4e6b-a7b3-a2459b18de16",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523066626,
        "parent_id": "28593a77-81fa-414b-aeff-113b5ef37fea",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This kind of implementation has the best worst-case behavior (see "
            ],
            [
              "Hamming weight",
              [
                [
                  "a",
                  "https://en.wikipedia.org/wiki/Hamming_weight"
                ]
              ]
            ],
            [
              " for further details)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This kind of implementation has the best worst-case behavior (see "
          },
          {
            "Text": "Hamming weight",
            "Link": "https://en.wikipedia.org/wiki/Hamming_weight"
          },
          {
            "Text": " for further details)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523066626,
        "id": "607358f6-c33a-4ccf-a3ed-3e713fac5182",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523066626,
        "parent_id": "28593a77-81fa-414b-aeff-113b5ef37fea",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523066626,
        "id": "5b356b05-3b62-4ada-8fd0-8c5afe50af0f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523066626,
        "parent_id": "28593a77-81fa-414b-aeff-113b5ef37fea",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Many CPUs have a specific instruction (like x86’s "
            ],
            [
              "popcnt",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") and the compiler could offer a specific ("
            ],
            [
              "non standard",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ") built in function. E.g. with g++ there is:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Many CPUs have a specific instruction (like x86’s "
          },
          {
            "Text": "popcnt",
            "AttrFlags": 2
          },
          {
            "Text": ") and the compiler could offer a specific ("
          },
          {
            "Text": "non standard",
            "AttrFlags": 1
          },
          {
            "Text": ") built in function. E.g. with g++ there is:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523066626,
        "id": "1c80f766-e570-488d-8110-dd7c71489b9a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523066626,
        "parent_id": "28593a77-81fa-414b-aeff-113b5ef37fea",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int __builtin_popcount (unsigned x);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int __builtin_popcount (unsigned x);",
        "code_language": "Plain Text"
      }
    ],
    "title": "080 Counting bits set"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}