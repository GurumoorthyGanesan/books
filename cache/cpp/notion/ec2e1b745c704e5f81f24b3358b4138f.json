{
  "ID": "ec2e1b74-5c70-4e5f-81f2-4b3358b4138f",
  "Root": {
    "alive": true,
    "content": [
      "71cd751c-9068-4eca-91a6-d165f87de2e3",
      "00dcf930-f038-426f-b39f-65d1711c6328",
      "83abdeba-3de8-4a04-8c70-dfa24e9b77de",
      "f69257e1-23a7-43a2-a850-abf4dd953056",
      "d4bbfea9-9349-47cb-84a7-d4b8f503ed4c",
      "d05f4a89-1b45-4506-9cb9-f0a06415dfb8",
      "fccb7cc2-2180-4d2b-bebf-0e7bd61a3466",
      "3e7b9fac-7b58-4834-a460-210ae38f53ee"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522386807,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "ec2e1b74-5c70-4e5f-81f2-4b3358b4138f",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550709900000,
    "parent_id": "899c3027-a75e-4a44-9144-10a53c6a2c11",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Sorting and sequence containers"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522386804,
        "id": "71cd751c-9068-4eca-91a6-d165f87de2e3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522386804,
        "parent_id": "ec2e1b74-5c70-4e5f-81f2-4b3358b4138f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "std::sort",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", found in the standard library header "
            ],
            [
              "algorithm",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", is a standard library algorithm for sorting a range of values, defined by a pair of iterators. "
            ],
            [
              "std::sort",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " takes as the last parameter a functor used to compare two values; this is how it determines the order. Note that "
            ],
            [
              "std::sort",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is not "
            ],
            [
              "stable",
              [
                [
                  "a",
                  "https://en.wikipedia.org/wiki/Sorting_algorithm#Stability"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "std::sort",
            "AttrFlags": 2
          },
          {
            "Text": ", found in the standard library header "
          },
          {
            "Text": "algorithm",
            "AttrFlags": 2
          },
          {
            "Text": ", is a standard library algorithm for sorting a range of values, defined by a pair of iterators. "
          },
          {
            "Text": "std::sort",
            "AttrFlags": 2
          },
          {
            "Text": " takes as the last parameter a functor used to compare two values; this is how it determines the order. Note that "
          },
          {
            "Text": "std::sort",
            "AttrFlags": 2
          },
          {
            "Text": " is not "
          },
          {
            "Text": "stable",
            "Link": "https://en.wikipedia.org/wiki/Sorting_algorithm#Stability"
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522386806,
        "id": "00dcf930-f038-426f-b39f-65d1711c6328",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522386806,
        "parent_id": "ec2e1b74-5c70-4e5f-81f2-4b3358b4138f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The comparison function "
            ],
            [
              "must",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " impose a "
            ],
            [
              "Strict, Weak Ordering",
              [
                [
                  "a",
                  "https://en.wikipedia.org/wiki/Weak_ordering#Strict_weak_orderings"
                ]
              ]
            ],
            [
              " on the elements. A simple less-than (or greater-than) comparison will suffice."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The comparison function "
          },
          {
            "Text": "must",
            "AttrFlags": 4
          },
          {
            "Text": " impose a "
          },
          {
            "Text": "Strict, Weak Ordering",
            "Link": "https://en.wikipedia.org/wiki/Weak_ordering#Strict_weak_orderings"
          },
          {
            "Text": " on the elements. A simple less-than (or greater-than) comparison will suffice."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522386806,
        "id": "83abdeba-3de8-4a04-8c70-dfa24e9b77de",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522386806,
        "parent_id": "ec2e1b74-5c70-4e5f-81f2-4b3358b4138f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A container with random-access iterators can be sorted using the "
            ],
            [
              "std::sort",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " algorithm:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A container with random-access iterators can be sorted using the "
          },
          {
            "Text": "std::sort",
            "AttrFlags": 2
          },
          {
            "Text": " algorithm:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522386806,
        "id": "f69257e1-23a7-43a2-a850-abf4dd953056",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522386806,
        "parent_id": "ec2e1b74-5c70-4e5f-81f2-4b3358b4138f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cvector\u003e\n#include \u003calgorithm\u003e\n\nstd::vector\u003cint\u003e MyVector = {3, 1, 2}\n\n//Default comparison of \u003c\nstd::sort(MyVector.begin(), MyVector.end());"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cvector\u003e\n#include \u003calgorithm\u003e\n\nstd::vector\u003cint\u003e MyVector = {3, 1, 2}\n\n//Default comparison of \u003c\nstd::sort(MyVector.begin(), MyVector.end());",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522386806,
        "id": "d4bbfea9-9349-47cb-84a7-d4b8f503ed4c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522386806,
        "parent_id": "ec2e1b74-5c70-4e5f-81f2-4b3358b4138f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "std::sort",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " requires that its iterators are random access iterators. The sequence containers "
            ],
            [
              "std::list",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "std::forward_list",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (requiring C++11) do not provide random access iterators, so they cannot be used with "
            ],
            [
              "std::sort",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". However, they do have "
            ],
            [
              "sort",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " member functions which implement a sorting algorithm that works with their own iterator types."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "std::sort",
            "AttrFlags": 2
          },
          {
            "Text": " requires that its iterators are random access iterators. The sequence containers "
          },
          {
            "Text": "std::list",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "std::forward_list",
            "AttrFlags": 2
          },
          {
            "Text": " (requiring C++11) do not provide random access iterators, so they cannot be used with "
          },
          {
            "Text": "std::sort",
            "AttrFlags": 2
          },
          {
            "Text": ". However, they do have "
          },
          {
            "Text": "sort",
            "AttrFlags": 2
          },
          {
            "Text": " member functions which implement a sorting algorithm that works with their own iterator types."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522386807,
        "id": "d05f4a89-1b45-4506-9cb9-f0a06415dfb8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522386807,
        "parent_id": "ec2e1b74-5c70-4e5f-81f2-4b3358b4138f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003clist\u003e\n#include \u003calgorithm\u003e\n\nstd::list\u003cint\u003e MyList = {3, 1, 2}\n\n//Default comparison of \u003c\n//Whole list only.\nMyList.sort();"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003clist\u003e\n#include \u003calgorithm\u003e\n\nstd::list\u003cint\u003e MyList = {3, 1, 2}\n\n//Default comparison of \u003c\n//Whole list only.\nMyList.sort();",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522386807,
        "id": "fccb7cc2-2180-4d2b-bebf-0e7bd61a3466",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522386807,
        "parent_id": "ec2e1b74-5c70-4e5f-81f2-4b3358b4138f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Their member "
            ],
            [
              "sort",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " functions always sort the entire list, so they cannot sort a sub-range of elements. However, since "
            ],
            [
              "list",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "forward_list",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " have fast splicing operations, you could extract the elements to be sorted from the list, sort them, then stuff them back where they were quite efficiently like this:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Their member "
          },
          {
            "Text": "sort",
            "AttrFlags": 2
          },
          {
            "Text": " functions always sort the entire list, so they cannot sort a sub-range of elements. However, since "
          },
          {
            "Text": "list",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "forward_list",
            "AttrFlags": 2
          },
          {
            "Text": " have fast splicing operations, you could extract the elements to be sorted from the list, sort them, then stuff them back where they were quite efficiently like this:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522386807,
        "id": "3e7b9fac-7b58-4834-a460-210ae38f53ee",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522386807,
        "parent_id": "ec2e1b74-5c70-4e5f-81f2-4b3358b4138f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "void sort_sublist(std::list\u003cint\u003e\u0026 mylist, std::list\u003cint\u003e::const_iterator start, std::list\u003cint\u003e::const_iterator end) {\n    //extract and sort half-open sub range denoted by start and end iterator \n    std::list\u003cint\u003e tmp;\n    tmp.splice(tmp.begin(), list, start, end);\n    tmp.sort();\n    //re-insert range at the point we extracted it from\n    list.splice(end, tmp);\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "void sort_sublist(std::list\u003cint\u003e\u0026 mylist, std::list\u003cint\u003e::const_iterator start, std::list\u003cint\u003e::const_iterator end) {\n    //extract and sort half-open sub range denoted by start and end iterator \n    std::list\u003cint\u003e tmp;\n    tmp.splice(tmp.begin(), list, start, end);\n    tmp.sort();\n    //re-insert range at the point we extracted it from\n    list.splice(end, tmp);\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "Sorting and sequence containers",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}