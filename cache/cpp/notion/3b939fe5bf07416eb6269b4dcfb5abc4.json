{
  "ID": "3b939fe5-bf07-416e-b626-9b4dcfb5abc4",
  "Root": {
    "alive": true,
    "content": [
      "2ad6a286-a036-45e9-bb4e-f65ef0f08de2",
      "950c7331-4362-40e0-bf0f-a814d03b761f",
      "35dc5711-e403-43ae-a2e4-911b22806164",
      "32df1682-83d8-4225-a0ec-8f8e2ffe6ccc",
      "89a4eb6d-9725-4644-95a9-0c5d66df4687",
      "7d85a44b-12aa-400d-afaa-0d04f77ba316",
      "079f7531-ac27-4449-b96c-55a998a6c772",
      "134ea277-65da-4e86-a844-6a851138107c",
      "8bd1e0a6-0605-4e6d-b9e7-e5a3059c5d4d",
      "15aff02c-001b-4418-87f6-098106f49a57",
      "d9cde7ca-d3bf-42e2-b4af-a45f5e74e691",
      "146089e2-ae38-441d-851a-5a7e8f6f25b4"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522940000,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "3b939fe5-bf07-416e-b626-9b4dcfb5abc4",
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552347420000,
    "parent_id": "ad527dc6-d4a7-420b-9234-94d0b9bfb560",
    "parent_table": "block",
    "permissions": [
      {
        "role": "editor",
        "type": "user_permission",
        "user_id": "bb760e2d-d679-4b64-b2a9-03005b21870a"
      }
    ],
    "properties": {
      "title": [
        [
          "Unions"
        ]
      ]
    },
    "type": "page",
    "version": 47,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522953033,
        "id": "2ad6a286-a036-45e9-bb4e-f65ef0f08de2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552347300000,
        "parent_id": "3b939fe5-bf07-416e-b626-9b4dcfb5abc4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Unions are very useful tools, but come with a few important caveats:"
            ]
          ]
        },
        "type": "text",
        "version": 3,
        "inline_content": [
          {
            "Text": "Unions are very useful tools, but come with a few important caveats:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522953034,
        "id": "950c7331-4362-40e0-bf0f-a814d03b761f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552347300000,
        "parent_id": "3b939fe5-bf07-416e-b626-9b4dcfb5abc4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It is undefined behavior, per the C++ standard, to access an element of a union that was not the most recently modified member. Although a lot of C++ compilers permit this access in well defined ways, these are extensions and cannot be guaranteed across compilers."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 3,
        "inline_content": [
          {
            "Text": "It is undefined behavior, per the C++ standard, to access an element of a union that was not the most recently modified member. Although a lot of C++ compilers permit this access in well defined ways, these are extensions and cannot be guaranteed across compilers."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522953034,
        "id": "35dc5711-e403-43ae-a2e4-911b22806164",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552347300000,
        "parent_id": "3b939fe5-bf07-416e-b626-9b4dcfb5abc4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A "
            ],
            [
              "std::variant",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://en.cppreference.com/w/cpp/utility/variant"
                ]
              ]
            ],
            [
              " (since C++17) is like a union, only it tells you what it currently contains (part of its visible state is the type of the value it holds at a given moment: it enforces value access happening only to that type)."
            ]
          ]
        },
        "type": "text",
        "version": 3,
        "inline_content": [
          {
            "Text": "A "
          },
          {
            "Text": "std::variant",
            "AttrFlags": 2,
            "Link": "http://en.cppreference.com/w/cpp/utility/variant"
          },
          {
            "Text": " (since C++17) is like a union, only it tells you what it currently contains (part of its visible state is the type of the value it holds at a given moment: it enforces value access happening only to that type)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522953034,
        "id": "32df1682-83d8-4225-a0ec-8f8e2ffe6ccc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552347360000,
        "parent_id": "3b939fe5-bf07-416e-b626-9b4dcfb5abc4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Implementations do not necessarily align members of different sizes to the same address."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 5,
        "inline_content": [
          {
            "Text": "Implementations do not necessarily align members of different sizes to the same address."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522955667,
        "format": {
          "page_full_width": true,
          "page_small_text": true
        },
        "id": "89a4eb6d-9725-4644-95a9-0c5d66df4687",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552347360000,
        "parent_id": "3b939fe5-bf07-416e-b626-9b4dcfb5abc4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Basic Union Features"
            ]
          ]
        },
        "type": "header",
        "version": 12,
        "inline_content": [
          {
            "Text": "Basic Union Features"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522955666,
        "id": "7d85a44b-12aa-400d-afaa-0d04f77ba316",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552347360000,
        "parent_id": "3b939fe5-bf07-416e-b626-9b4dcfb5abc4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Unions are a specialized struct within which all members occupy overlapping memory."
            ]
          ]
        },
        "type": "text",
        "version": 4,
        "inline_content": [
          {
            "Text": "Unions are a specialized struct within which all members occupy overlapping memory."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522955666,
        "id": "079f7531-ac27-4449-b96c-55a998a6c772",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552347360000,
        "parent_id": "3b939fe5-bf07-416e-b626-9b4dcfb5abc4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "union U {\n    int a;\n    short b;\n    float c;\n};\nU u;\n\n//Address of a and b will be equal\n(void*)\u0026u.a == (void*)\u0026u.b;\n(void*)\u0026u.a == (void*)\u0026u.c;\n\n//Assigning to any union member changes the shared memory of all members\nu.c = 4.f;\nu.a = 5;\nu.c != 4.f;"
            ]
          ]
        },
        "type": "code",
        "version": 5,
        "code": "union U {\n    int a;\n    short b;\n    float c;\n};\nU u;\n\n//Address of a and b will be equal\n(void*)\u0026u.a == (void*)\u0026u.b;\n(void*)\u0026u.a == (void*)\u0026u.c;\n\n//Assigning to any union member changes the shared memory of all members\nu.c = 4.f;\nu.a = 5;\nu.c != 4.f;",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522956746,
        "format": {
          "page_full_width": true,
          "page_small_text": true
        },
        "id": "134ea277-65da-4e86-a844-6a851138107c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552347360000,
        "parent_id": "3b939fe5-bf07-416e-b626-9b4dcfb5abc4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Typical Use"
            ]
          ]
        },
        "type": "header",
        "version": 12,
        "inline_content": [
          {
            "Text": "Typical Use"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522956744,
        "id": "8bd1e0a6-0605-4e6d-b9e7-e5a3059c5d4d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552347360000,
        "parent_id": "3b939fe5-bf07-416e-b626-9b4dcfb5abc4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Unions are useful for minimizing memory usage for exclusive data, such as when implementing mixed data types."
            ]
          ]
        },
        "type": "text",
        "version": 4,
        "inline_content": [
          {
            "Text": "Unions are useful for minimizing memory usage for exclusive data, such as when implementing mixed data types."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522956746,
        "id": "15aff02c-001b-4418-87f6-098106f49a57",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552347360000,
        "parent_id": "3b939fe5-bf07-416e-b626-9b4dcfb5abc4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "struct AnyType {\n    enum {\n        IS_INT,\n        IS_FLOAT\n    } type;\n    \n    union Data {\n        int as_int;\n        float as_float;\n    } value;\n\n    AnyType(int i) : type(IS_INT) { value.as_int = i; }\n    AnyType(float f) : type(IS_FLOAT) { value.as_float = f; }\n\n    int get_int() const {\n        if(type == IS_INT)\n            return value.as_int;\n        else\n            return (int)value.as_float;\n    }\n    \n    float get_float() const {\n        if(type == IS_FLOAT)\n            return value.as_float;\n        else\n            return (float)value.as_int;\n    }\n};"
            ]
          ]
        },
        "type": "code",
        "version": 5,
        "code": "struct AnyType {\n    enum {\n        IS_INT,\n        IS_FLOAT\n    } type;\n    \n    union Data {\n        int as_int;\n        float as_float;\n    } value;\n\n    AnyType(int i) : type(IS_INT) { value.as_int = i; }\n    AnyType(float f) : type(IS_FLOAT) { value.as_float = f; }\n\n    int get_int() const {\n        if(type == IS_INT)\n            return value.as_int;\n        else\n            return (int)value.as_float;\n    }\n    \n    float get_float() const {\n        if(type == IS_FLOAT)\n            return value.as_float;\n        else\n            return (float)value.as_int;\n    }\n};",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522954556,
        "format": {
          "page_full_width": true,
          "page_small_text": true
        },
        "id": "d9cde7ca-d3bf-42e2-b4af-a45f5e74e691",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552347360000,
        "parent_id": "3b939fe5-bf07-416e-b626-9b4dcfb5abc4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Undefined Behavior"
            ]
          ]
        },
        "type": "header",
        "version": 14,
        "inline_content": [
          {
            "Text": "Undefined Behavior"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522954553,
        "id": "146089e2-ae38-441d-851a-5a7e8f6f25b4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552347360000,
        "parent_id": "3b939fe5-bf07-416e-b626-9b4dcfb5abc4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "union U {\n    int a;\n    short b;\n    float c;\n};\nU u;\n\nu.a = 10;\nif (u.b == 10) {\n   // this is undefined behavior since 'a' was the last member to be\n   // written to. A lot of compilers will allow this and might issue a\n   // warning, but the result will be \"as expected\"; this is a compiler\n   // extension and cannot be guaranteed across compilers (i.e. this is\n   // not compliant/portable code).\n}"
            ]
          ]
        },
        "type": "code",
        "version": 5,
        "code": "union U {\n    int a;\n    short b;\n    float c;\n};\nU u;\n\nu.a = 10;\nif (u.b == 10) {\n   // this is undefined behavior since 'a' was the last member to be\n   // written to. A lot of compilers will allow this and might issue a\n   // warning, but the result will be \"as expected\"; this is a compiler\n   // extension and cannot be guaranteed across compilers (i.e. this is\n   // not compliant/portable code).\n}",
        "code_language": "C++"
      }
    ],
    "title": "Unions",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}