{
  "ID": "23781700-b7a6-4a57-9086-561628a81240",
  "Root": {
    "alive": true,
    "content": [
      "c3b7ccc8-4772-4e63-8771-c33868b78c60",
      "aaba944f-496e-4fbd-8dc0-abba46ce1557",
      "fb1ed544-6e24-4acb-815e-a9c7d320e263",
      "5276bc72-1d6e-4cec-87f7-8e375a3546c6"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550524341607,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "23781700-b7a6-4a57-9086-561628a81240",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551688539181,
    "parent_id": "1e648ce1-cc7e-4997-bf6e-9a33d2ac504d",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "The Basics"
        ]
      ]
    },
    "type": "page",
    "version": 4,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524341601,
        "id": "c3b7ccc8-4772-4e63-8771-c33868b78c60",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524341601,
        "parent_id": "23781700-b7a6-4a57-9086-561628a81240",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "const",
              [
                [
                  "i"
                ],
                [
                  "c"
                ]
              ]
            ],
            [
              " correctness",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " is the practice of designing code so that only code that "
            ],
            [
              "needs",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " to modify an instance is "
            ],
            [
              "able",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " to modify an instance (i.e. has write access), and conversely, that any code that doesn’t need to modify an instance is unable to do so (i.e. only has read access). This prevents the instance from being modified unintentionally, making code less errorprone, and documents whether the code is intended to change the instance’s state or not. It also allows instances to be treated as "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " whenever they don’t need to be modified, or defined as "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " if they don’t need to be changed after initialisation, without losing any functionality."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "const",
            "AttrFlags": 6
          },
          {
            "Text": " correctness",
            "AttrFlags": 4
          },
          {
            "Text": " is the practice of designing code so that only code that "
          },
          {
            "Text": "needs",
            "AttrFlags": 4
          },
          {
            "Text": " to modify an instance is "
          },
          {
            "Text": "able",
            "AttrFlags": 4
          },
          {
            "Text": " to modify an instance (i.e. has write access), and conversely, that any code that doesn’t need to modify an instance is unable to do so (i.e. only has read access). This prevents the instance from being modified unintentionally, making code less errorprone, and documents whether the code is intended to change the instance’s state or not. It also allows instances to be treated as "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": " whenever they don’t need to be modified, or defined as "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": " if they don’t need to be changed after initialisation, without losing any functionality."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524341606,
        "id": "aaba944f-496e-4fbd-8dc0-abba46ce1557",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524341606,
        "parent_id": "23781700-b7a6-4a57-9086-561628a81240",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This is done by giving member functions "
            ],
            [
              "const",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%2B%2B/7146/the-this-pointer/24492/this-pointer-cv-qualifiers#t=201610191445574282562"
                ]
              ]
            ],
            [
              " CV-qualifiers",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%2B%2B/7146/the-this-pointer/24492/this-pointer-cv-qualifiers#t=201610191445574282562"
                ]
              ]
            ],
            [
              ", and by making pointer/reference parameters "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", except in the case that they need write access."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This is done by giving member functions "
          },
          {
            "Text": "const",
            "AttrFlags": 2,
            "Link": "http://stackoverflow.com/documentation/c%2B%2B/7146/the-this-pointer/24492/this-pointer-cv-qualifiers#t=201610191445574282562"
          },
          {
            "Text": " CV-qualifiers",
            "Link": "http://stackoverflow.com/documentation/c%2B%2B/7146/the-this-pointer/24492/this-pointer-cv-qualifiers#t=201610191445574282562"
          },
          {
            "Text": ", and by making pointer/reference parameters "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": ", except in the case that they need write access."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524341606,
        "id": "fb1ed544-6e24-4acb-815e-a9c7d320e263",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524341606,
        "parent_id": "23781700-b7a6-4a57-9086-561628a81240",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class ConstCorrectClass {\n    int x;\n\n  public:\n    int getX() const { return x; } // Function is const: Doesn't modify instance.\n    void setX(int i) { x = i; }    // Not const: Modifies instance.\n};\n\n// Parameter is const: Doesn't modify parameter.\nint const_correct_reader(const ConstCorrectClass\u0026 c) {\n    return c.getX();\n}\n\n// Parameter isn't const: Modifies parameter.\nvoid const_correct_writer(ConstCorrectClass\u0026 c) {\n    c.setX(42);\n}\n\nconst ConstCorrectClass invariant; // Instance is const: Can't be modified.\nConstCorrectClass         variant; // Instance isn't const: Can be modified.\n\n// ...\n\nconst_correct_reader(invariant); // Good.   Calling non-modifying function on const instance.\nconst_correct_reader(variant);   // Good.   Calling non-modifying function on modifiable instance.\n\nconst_correct_writer(variant);   // Good.   Calling modifying function on modifiable instance.\nconst_correct_writer(invariant); // Error.  Calling modifying function on const instance."
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class ConstCorrectClass {\n    int x;\n\n  public:\n    int getX() const { return x; } // Function is const: Doesn't modify instance.\n    void setX(int i) { x = i; }    // Not const: Modifies instance.\n};\n\n// Parameter is const: Doesn't modify parameter.\nint const_correct_reader(const ConstCorrectClass\u0026 c) {\n    return c.getX();\n}\n\n// Parameter isn't const: Modifies parameter.\nvoid const_correct_writer(ConstCorrectClass\u0026 c) {\n    c.setX(42);\n}\n\nconst ConstCorrectClass invariant; // Instance is const: Can't be modified.\nConstCorrectClass         variant; // Instance isn't const: Can be modified.\n\n// ...\n\nconst_correct_reader(invariant); // Good.   Calling non-modifying function on const instance.\nconst_correct_reader(variant);   // Good.   Calling non-modifying function on modifiable instance.\n\nconst_correct_writer(variant);   // Good.   Calling modifying function on modifiable instance.\nconst_correct_writer(invariant); // Error.  Calling modifying function on const instance.",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524341606,
        "id": "5276bc72-1d6e-4cec-87f7-8e375a3546c6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524341606,
        "parent_id": "23781700-b7a6-4a57-9086-561628a81240",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Due to the nature of const correctness, this starts with the class’ member functions, and works its way outwards; if you try to call a non-"
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " member function from a "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " instance, or from a non-"
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " instance being treated as "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", the compiler will give you an error about it losing cv-qualifiers."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Due to the nature of const correctness, this starts with the class’ member functions, and works its way outwards; if you try to call a non-"
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": " member function from a "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": " instance, or from a non-"
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": " instance being treated as "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": ", the compiler will give you an error about it losing cv-qualifiers."
          }
        ]
      }
    ],
    "title": "The Basics",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}