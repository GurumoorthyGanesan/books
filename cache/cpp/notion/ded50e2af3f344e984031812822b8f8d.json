{
  "ID": "ded50e2a-f3f3-44e9-8403-1812822b8f8d",
  "Root": {
    "alive": true,
    "content": [
      "a6412960-a4b2-4e74-a3e7-cb7d784677c9",
      "a28c9ef7-3a3b-4b51-96fd-2c60c7220dc9",
      "182b3414-79e8-4553-bad6-e6dce695c73b",
      "38fcf6af-eaf0-4ec9-9751-d04990766444"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522059882,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "ded50e2a-f3f3-44e9-8403-1812822b8f8d",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550655900000,
    "parent_id": "8655f492-9c51-4f68-ad52-8b6c1e02a277",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Functions Returning Large Vectors"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522059882,
        "id": "a6412960-a4b2-4e74-a3e7-cb7d784677c9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522059882,
        "parent_id": "ded50e2a-f3f3-44e9-8403-1812822b8f8d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In C++11, compilers are required to implicitly move from a local variable that is being returned. Moreover, most compilers can perform "
            ],
            [
              "copy elision",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%2B%2B/2489/copy-elision"
                ]
              ]
            ],
            [
              " in many cases and elide the move altogether. As a result of this, returning large objects that can be moved cheaply no longer requires special handling:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In C++11, compilers are required to implicitly move from a local variable that is being returned. Moreover, most compilers can perform "
          },
          {
            "Text": "copy elision",
            "Link": "http://stackoverflow.com/documentation/c%2B%2B/2489/copy-elision"
          },
          {
            "Text": " in many cases and elide the move altogether. As a result of this, returning large objects that can be moved cheaply no longer requires special handling:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522059882,
        "id": "a28c9ef7-3a3b-4b51-96fd-2c60c7220dc9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522059882,
        "parent_id": "ded50e2a-f3f3-44e9-8403-1812822b8f8d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cvector\u003e\n#include \u003ciostream\u003e\n\n// If the compiler is unable to perform named return value optimization (NRVO)\n// and elide the move altogether, it is required to move from v into the return value.\nstd::vector\u003cint\u003e fillVector(int a, int b) {\n    std::vector\u003cint\u003e v;\n    v.reserve(b-a+1);\n    for (int i = a; i \u003c= b; i++) {\n        v.push_back(i);\n    }\n    return v; // implicit move\n}\n\nint main() { // declare and fill vector\n    std::vector\u003cint\u003e vec = fillVector(1, 10);\n\n    // print vector\n    for (auto value : vec)\n        std::cout \u003c\u003c value \u003c\u003c \" \"; // this will print \"1 2 3 4 5 6 7 8 9 10 \"\n\n    std::cout \u003c\u003c std::endl;\n\n    return 0;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cvector\u003e\n#include \u003ciostream\u003e\n\n// If the compiler is unable to perform named return value optimization (NRVO)\n// and elide the move altogether, it is required to move from v into the return value.\nstd::vector\u003cint\u003e fillVector(int a, int b) {\n    std::vector\u003cint\u003e v;\n    v.reserve(b-a+1);\n    for (int i = a; i \u003c= b; i++) {\n        v.push_back(i);\n    }\n    return v; // implicit move\n}\n\nint main() { // declare and fill vector\n    std::vector\u003cint\u003e vec = fillVector(1, 10);\n\n    // print vector\n    for (auto value : vec)\n        std::cout \u003c\u003c value \u003c\u003c \" \"; // this will print \"1 2 3 4 5 6 7 8 9 10 \"\n\n    std::cout \u003c\u003c std::endl;\n\n    return 0;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522059882,
        "id": "182b3414-79e8-4553-bad6-e6dce695c73b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522059882,
        "parent_id": "ded50e2a-f3f3-44e9-8403-1812822b8f8d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Before C++11, copy elision was already allowed and implemented by most compilers. However, due to the absence of move semantics, in legacy code or code that has to be compiled with older compiler versions which don’t implement this optimization, you can find vectors being passed as output arguments to prevent the unneeded copy:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Before C++11, copy elision was already allowed and implemented by most compilers. However, due to the absence of move semantics, in legacy code or code that has to be compiled with older compiler versions which don’t implement this optimization, you can find vectors being passed as output arguments to prevent the unneeded copy:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522059882,
        "id": "38fcf6af-eaf0-4ec9-9751-d04990766444",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522059882,
        "parent_id": "ded50e2a-f3f3-44e9-8403-1812822b8f8d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cvector\u003e\n#include \u003ciostream\u003e\n\n// passing a std::vector by reference\nvoid fillVectorFrom_By_Ref(int a, int b, std::vector\u003cint\u003e \u0026v) {\n    assert(v.empty());\n    v.reserve(b-a+1);\n    for (int i = a; i \u003c= b; i++) {\n        v.push_back(i);\n    }\n}\n\nint main() {// declare vector\n    std::vector\u003cint\u003e vec;\n    \n    // fill vector\n    fillVectorFrom_By_Ref(1, 10, vec);\n    // print vector\n    for (std::vector\u003cint\u003e::const_iterator it = vec.begin(); it != vec.end(); ++it)\n        std::cout \u003c\u003c *it \u003c\u003c \" \"; // this will print \"1 2 3 4 5 6 7 8 9 10 \"\n    std::cout \u003c\u003c std::endl;\n    return 0;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cvector\u003e\n#include \u003ciostream\u003e\n\n// passing a std::vector by reference\nvoid fillVectorFrom_By_Ref(int a, int b, std::vector\u003cint\u003e \u0026v) {\n    assert(v.empty());\n    v.reserve(b-a+1);\n    for (int i = a; i \u003c= b; i++) {\n        v.push_back(i);\n    }\n}\n\nint main() {// declare vector\n    std::vector\u003cint\u003e vec;\n    \n    // fill vector\n    fillVectorFrom_By_Ref(1, 10, vec);\n    // print vector\n    for (std::vector\u003cint\u003e::const_iterator it = vec.begin(); it != vec.end(); ++it)\n        std::cout \u003c\u003c *it \u003c\u003c \" \"; // this will print \"1 2 3 4 5 6 7 8 9 10 \"\n    std::cout \u003c\u003c std::endl;\n    return 0;\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "Functions Returning Large Vectors",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}