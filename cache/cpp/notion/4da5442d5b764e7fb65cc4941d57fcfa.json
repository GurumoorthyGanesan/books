{
  "ID": "4da5442d-5b76-4e7f-b65c-c4941d57fcfa",
  "Root": {
    "alive": true,
    "content": [
      "c22bd71f-6d51-489c-98ab-5c14c7be38a8",
      "e8c3339a-33f9-4cd2-b8b1-dd6038db8159",
      "2766805a-5040-4142-a9e0-7b77624e197b",
      "c4d0227c-8be1-49fc-a586-4e53cea6dccf"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522746546,
    "id": "4da5442d-5b76-4e7f-b65c-c4941d57fcfa",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550522746546,
    "parent_id": "a29d7b5a-3989-43f1-8efa-86ef82101f43",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "030 Parameter elision"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522746545,
        "id": "c22bd71f-6d51-489c-98ab-5c14c7be38a8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522746545,
        "parent_id": "4da5442d-5b76-4e7f-b65c-c4941d57fcfa",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When you pass an argument to a function, and the argument is a "
            ],
            [
              "prvalue expression",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%2B%2B/763/value-categories/2603/prvalue#t=201607301618015777687"
                ]
              ]
            ],
            [
              " of the function’s parameter type, and this type is not a reference, then the prvalue’s construction can be elided."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When you pass an argument to a function, and the argument is a "
          },
          {
            "Text": "prvalue expression",
            "Link": "http://stackoverflow.com/documentation/c%2B%2B/763/value-categories/2603/prvalue#t=201607301618015777687"
          },
          {
            "Text": " of the function’s parameter type, and this type is not a reference, then the prvalue’s construction can be elided."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522746545,
        "id": "e8c3339a-33f9-4cd2-b8b1-dd6038db8159",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522746545,
        "parent_id": "4da5442d-5b76-4e7f-b65c-c4941d57fcfa",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "void func(std::string str) { ... }\n\nfunc(std::string(\"foo\"));"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "void func(std::string str) { ... }\n\nfunc(std::string(\"foo\"));",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522746546,
        "id": "2766805a-5040-4142-a9e0-7b77624e197b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522746546,
        "parent_id": "4da5442d-5b76-4e7f-b65c-c4941d57fcfa",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This says to create a temporary "
            ],
            [
              "string",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", then move it into the function parameter "
            ],
            [
              "str",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Copy elision permits this expression to directly create the object in "
            ],
            [
              "str",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", rather than using a temporary+move."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This says to create a temporary "
          },
          {
            "Text": "string",
            "AttrFlags": 2
          },
          {
            "Text": ", then move it into the function parameter "
          },
          {
            "Text": "str",
            "AttrFlags": 2
          },
          {
            "Text": ". Copy elision permits this expression to directly create the object in "
          },
          {
            "Text": "str",
            "AttrFlags": 2
          },
          {
            "Text": ", rather than using a temporary+move."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522746546,
        "id": "c4d0227c-8be1-49fc-a586-4e53cea6dccf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522746546,
        "parent_id": "4da5442d-5b76-4e7f-b65c-c4941d57fcfa",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This is a useful optimization for cases where a constructor is declared "
            ],
            [
              "explicit",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". For example, we could have written the above as "
            ],
            [
              "func(\"foo\")",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", but only because "
            ],
            [
              "string",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " has an implicit constructor that converts from a "
            ],
            [
              "const char*",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to a "
            ],
            [
              "string",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". If that constructor was "
            ],
            [
              "explicit",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", we would be forced to use a temporary to call the "
            ],
            [
              "explicit",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " constructor. Copy elision saves us from having to do a needless copy/move."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This is a useful optimization for cases where a constructor is declared "
          },
          {
            "Text": "explicit",
            "AttrFlags": 2
          },
          {
            "Text": ". For example, we could have written the above as "
          },
          {
            "Text": "func(\"foo\")",
            "AttrFlags": 2
          },
          {
            "Text": ", but only because "
          },
          {
            "Text": "string",
            "AttrFlags": 2
          },
          {
            "Text": " has an implicit constructor that converts from a "
          },
          {
            "Text": "const char*",
            "AttrFlags": 2
          },
          {
            "Text": " to a "
          },
          {
            "Text": "string",
            "AttrFlags": 2
          },
          {
            "Text": ". If that constructor was "
          },
          {
            "Text": "explicit",
            "AttrFlags": 2
          },
          {
            "Text": ", we would be forced to use a temporary to call the "
          },
          {
            "Text": "explicit",
            "AttrFlags": 2
          },
          {
            "Text": " constructor. Copy elision saves us from having to do a needless copy/move."
          }
        ]
      }
    ],
    "title": "030 Parameter elision"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}