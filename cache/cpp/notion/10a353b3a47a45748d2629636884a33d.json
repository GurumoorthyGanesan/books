{
  "ID": "10a353b3-a47a-4574-8d26-29636884a33d",
  "Root": {
    "alive": true,
    "content": [
      "37775e78-a8ca-4191-9d30-94fb1374c64f",
      "1319e0df-f582-47a3-a40e-05ba879904bb",
      "0455890c-9384-4a1e-b147-0d2619bbaab9",
      "74d21076-bab8-4b02-b877-7dc4f7b30739"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522707445,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "10a353b3-a47a-4574-8d26-29636884a33d",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550710860000,
    "parent_id": "263edcef-95ee-480a-8c67-1e74662a250a",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Binding std::function to a different callable types"
        ]
      ]
    },
    "type": "page",
    "version": 13,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522707442,
        "id": "37775e78-a8ca-4191-9d30-94fb1374c64f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550710860000,
        "parent_id": "10a353b3-a47a-4574-8d26-29636884a33d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "/*\n * This example show some ways of using std::function to call\n *  a) C-like function\n *  b) class-member function\n *  c) operator()\n *  d) lambda function\n *\n * Function call can be made:\n *  a) with right arguments\n *  b) argumens with different order, types and count\n */\n#include \u003ciostream\u003e\n#include \u003cfunctional\u003e\n#include \u003ciostream\u003e\n#include \u003cvector\u003e\n\nusing std::cout;\nusing std::endl;\nusing namespace std::placeholders;\n\n\n\n// simple function to be called\ndouble foo_fn(int x, float y, double z)\n{\n  double res = x + y + z;\n  std::cout \u003c\u003c \"foo_fn called with arguments: \" \n            \u003c\u003c x \u003c\u003c \", \" \u003c\u003c y \u003c\u003c \", \" \u003c\u003c z \n            \u003c\u003c \" result is : \" \u003c\u003c res \n            \u003c\u003c std::endl;\n  return res;\n}\n\n// structure with member function to call\nstruct foo_struct\n{\n    // member function to call\n    double foo_fn(int x, float y, double z)\n    {\n        double res = x + y + z;\n        std::cout \u003c\u003c \"foo_struct::foo_fn called with arguments: \" \n                \u003c\u003c x \u003c\u003c \", \" \u003c\u003c y \u003c\u003c \", \" \u003c\u003c z \n                \u003c\u003c \" result is : \" \u003c\u003c res \n                \u003c\u003c std::endl;\n        return res;\n    }\n    // this member function has different signature - but it can be used too\n    // please not that argument order is changed too\n    double foo_fn_4(int x, double z, float y, long xx)\n    {\n        double res = x + y + z + xx;\n        std::cout \u003c\u003c \"foo_struct::foo_fn_4 called with arguments: \" \n                \u003c\u003c x \u003c\u003c \", \" \u003c\u003c z \u003c\u003c \", \" \u003c\u003c y \u003c\u003c \", \" \u003c\u003c xx\n                \u003c\u003c \" result is : \" \u003c\u003c res \n                \u003c\u003c std::endl;\n        return res;\n    }\n    // overloaded operator() makes whole object to be callable\n    double operator()(int x, float y, double z)\n    {\n        double res = x + y + z;\n        std::cout \u003c\u003c \"foo_struct::operator() called with arguments: \" \n                \u003c\u003c x \u003c\u003c \", \" \u003c\u003c y \u003c\u003c \", \" \u003c\u003c z \n                \u003c\u003c \" result is : \" \u003c\u003c res \n                \u003c\u003c std::endl;\n        return res;\n    }\n};\n\n\nint main(void)\n{\n  // typedefs\n  using function_type = std::function\u003cdouble(int, float, double)\u003e;\n\n  // foo_struct instance\n  foo_struct fs;\n  \n  // here we will store all binded functions \n  std::vector\u003cfunction_type\u003e bindings;\n\n  // var #1 - you can use simple function\n  function_type var1 = foo_fn;\n  bindings.push_back(var1);\n  \n  // var #2 - you can use member function \n  function_type var2 = std::bind(\u0026foo_struct::foo_fn, fs, _1, _2, _3);\n  bindings.push_back(var2);\n  \n  // var #3 - you can use member function with different signature\n  // foo_fn_4 has different count of arguments and types\n  function_type var3 = std::bind(\u0026foo_struct::foo_fn_4, fs, _1, _3, _2, 0l);\n  bindings.push_back(var3);\n\n  // var #4 - you can use object with overloaded operator() \n  function_type var4 = fs;\n  bindings.push_back(var4);\n\n  // var #5 - you can use lambda function\n  function_type var5 = [](int x, float y, double z)\n    {\n        double res = x + y + z;\n        std::cout \u003c\u003c \"lambda  called with arguments: \" \n                \u003c\u003c x \u003c\u003c \", \" \u003c\u003c y \u003c\u003c \", \" \u003c\u003c z \n                \u003c\u003c \" result is : \" \u003c\u003c res \n                \u003c\u003c std::endl;\n        return res;\n    };\n  bindings.push_back(var5);\n    \n  std::cout \u003c\u003c \"Test stored functions with arguments: x = 1, y = 2, z = 3\" \n            \u003c\u003c std::endl;\n  \n  for (auto f : bindings)\n      f(1, 2, 3);\n      \n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "/*\n * This example show some ways of using std::function to call\n *  a) C-like function\n *  b) class-member function\n *  c) operator()\n *  d) lambda function\n *\n * Function call can be made:\n *  a) with right arguments\n *  b) argumens with different order, types and count\n */\n#include \u003ciostream\u003e\n#include \u003cfunctional\u003e\n#include \u003ciostream\u003e\n#include \u003cvector\u003e\n\nusing std::cout;\nusing std::endl;\nusing namespace std::placeholders;\n\n\n\n// simple function to be called\ndouble foo_fn(int x, float y, double z)\n{\n  double res = x + y + z;\n  std::cout \u003c\u003c \"foo_fn called with arguments: \" \n            \u003c\u003c x \u003c\u003c \", \" \u003c\u003c y \u003c\u003c \", \" \u003c\u003c z \n            \u003c\u003c \" result is : \" \u003c\u003c res \n            \u003c\u003c std::endl;\n  return res;\n}\n\n// structure with member function to call\nstruct foo_struct\n{\n    // member function to call\n    double foo_fn(int x, float y, double z)\n    {\n        double res = x + y + z;\n        std::cout \u003c\u003c \"foo_struct::foo_fn called with arguments: \" \n                \u003c\u003c x \u003c\u003c \", \" \u003c\u003c y \u003c\u003c \", \" \u003c\u003c z \n                \u003c\u003c \" result is : \" \u003c\u003c res \n                \u003c\u003c std::endl;\n        return res;\n    }\n    // this member function has different signature - but it can be used too\n    // please not that argument order is changed too\n    double foo_fn_4(int x, double z, float y, long xx)\n    {\n        double res = x + y + z + xx;\n        std::cout \u003c\u003c \"foo_struct::foo_fn_4 called with arguments: \" \n                \u003c\u003c x \u003c\u003c \", \" \u003c\u003c z \u003c\u003c \", \" \u003c\u003c y \u003c\u003c \", \" \u003c\u003c xx\n                \u003c\u003c \" result is : \" \u003c\u003c res \n                \u003c\u003c std::endl;\n        return res;\n    }\n    // overloaded operator() makes whole object to be callable\n    double operator()(int x, float y, double z)\n    {\n        double res = x + y + z;\n        std::cout \u003c\u003c \"foo_struct::operator() called with arguments: \" \n                \u003c\u003c x \u003c\u003c \", \" \u003c\u003c y \u003c\u003c \", \" \u003c\u003c z \n                \u003c\u003c \" result is : \" \u003c\u003c res \n                \u003c\u003c std::endl;\n        return res;\n    }\n};\n\n\nint main(void)\n{\n  // typedefs\n  using function_type = std::function\u003cdouble(int, float, double)\u003e;\n\n  // foo_struct instance\n  foo_struct fs;\n  \n  // here we will store all binded functions \n  std::vector\u003cfunction_type\u003e bindings;\n\n  // var #1 - you can use simple function\n  function_type var1 = foo_fn;\n  bindings.push_back(var1);\n  \n  // var #2 - you can use member function \n  function_type var2 = std::bind(\u0026foo_struct::foo_fn, fs, _1, _2, _3);\n  bindings.push_back(var2);\n  \n  // var #3 - you can use member function with different signature\n  // foo_fn_4 has different count of arguments and types\n  function_type var3 = std::bind(\u0026foo_struct::foo_fn_4, fs, _1, _3, _2, 0l);\n  bindings.push_back(var3);\n\n  // var #4 - you can use object with overloaded operator() \n  function_type var4 = fs;\n  bindings.push_back(var4);\n\n  // var #5 - you can use lambda function\n  function_type var5 = [](int x, float y, double z)\n    {\n        double res = x + y + z;\n        std::cout \u003c\u003c \"lambda  called with arguments: \" \n                \u003c\u003c x \u003c\u003c \", \" \u003c\u003c y \u003c\u003c \", \" \u003c\u003c z \n                \u003c\u003c \" result is : \" \u003c\u003c res \n                \u003c\u003c std::endl;\n        return res;\n    };\n  bindings.push_back(var5);\n    \n  std::cout \u003c\u003c \"Test stored functions with arguments: x = 1, y = 2, z = 3\" \n            \u003c\u003c std::endl;\n  \n  for (auto f : bindings)\n      f(1, 2, 3);\n      \n}",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522707445,
        "id": "1319e0df-f582-47a3-a40e-05ba879904bb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522707445,
        "parent_id": "10a353b3-a47a-4574-8d26-29636884a33d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Live",
              [
                [
                  "b"
                ],
                [
                  "a",
                  "http://ideone.com/VIbkkZ"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Live",
            "AttrFlags": 1,
            "Link": "http://ideone.com/VIbkkZ"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522707445,
        "id": "0455890c-9384-4a1e-b147-0d2619bbaab9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522707445,
        "parent_id": "10a353b3-a47a-4574-8d26-29636884a33d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Output:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Output:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522707445,
        "id": "74d21076-bab8-4b02-b877-7dc4f7b30739",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522707445,
        "parent_id": "10a353b3-a47a-4574-8d26-29636884a33d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Test stored functions with arguments: x = 1, y = 2, z = 3\nfoo_fn called with arguments: 1, 2, 3 result is : 6\nfoo_struct::foo_fn called with arguments: 1, 2, 3 result is : 6\nfoo_struct::foo_fn_4 called with arguments: 1, 3, 2, 0 result is : 6\nfoo_struct::operator() called with arguments: 1, 2, 3 result is : 6\nlambda  called with arguments: 1, 2, 3 result is : 6"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Test stored functions with arguments: x = 1, y = 2, z = 3\nfoo_fn called with arguments: 1, 2, 3 result is : 6\nfoo_struct::foo_fn called with arguments: 1, 2, 3 result is : 6\nfoo_struct::foo_fn_4 called with arguments: 1, 3, 2, 0 result is : 6\nfoo_struct::operator() called with arguments: 1, 2, 3 result is : 6\nlambda  called with arguments: 1, 2, 3 result is : 6",
        "code_language": "Plain Text"
      }
    ],
    "title": "Binding std::function to a different callable types",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}