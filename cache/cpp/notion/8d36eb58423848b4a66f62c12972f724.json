{
  "ID": "8d36eb58-4238-48b4-a66f-62c12972f724",
  "Root": {
    "alive": true,
    "content": [
      "487f28ad-fcb6-4318-aa06-90b571ecb420",
      "2d78823a-83e7-4e7e-bc40-40f3c9dcaf2f",
      "d7224c30-5b6c-4e93-b57f-081928be4a7c",
      "b00b1da9-236a-41b1-b65c-64602cedc979",
      "8c15d155-e974-4ca4-846b-1cc9acae7232",
      "9fb27032-bfa3-4e64-b7d7-aedc67823e14",
      "5125ec42-5586-4143-bc6f-b5eb90fed770",
      "f5ca049a-952b-4cfd-8098-7e9fe2918c28",
      "8ebe2671-22ca-4c0d-ac38-d955f37a8093",
      "4c980c3f-cc03-4e01-940b-dbf1e19e9dc0",
      "e4bcdb2b-e799-4e12-b50a-f0d4742f622b",
      "33875ac7-2739-416f-9563-45377b54f4b5",
      "a769b9fc-4726-4328-a93e-2649fc7bdf89",
      "175638ea-288c-4886-a52c-6afacca6a57a",
      "7e179300-bc3d-4e2d-852f-bd6a46fb52b6",
      "da7419d0-3feb-44e6-9915-f2b6541377a6",
      "6e27e207-f428-4108-983f-281b8300d61d",
      "8c5415d2-54ee-49b1-8022-4d86799bf4c4",
      "b924671c-deb1-45a0-9c82-e659efcd2386",
      "c1cd90e3-5738-47cf-a851-c7f075bded09"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550521992437,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "8d36eb58-4238-48b4-a66f-62c12972f724",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550656440000,
    "parent_id": "b886ff5d-614b-4aa9-9e99-851b7998439b",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Lexicographical comparison"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521992428,
        "id": "487f28ad-fcb6-4318-aa06-90b571ecb420",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521992428,
        "parent_id": "8d36eb58-4238-48b4-a66f-62c12972f724",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Two "
            ],
            [
              "std::string",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "s can be compared lexicographically using the operators "
            ],
            [
              "==",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "!=",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "\\\u003c",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "\u003c=",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "\\\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", and "
            ],
            [
              "\u003e=",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Two "
          },
          {
            "Text": "std::string",
            "AttrFlags": 2
          },
          {
            "Text": "s can be compared lexicographically using the operators "
          },
          {
            "Text": "==",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "!=",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "\\\u003c",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "\u003c=",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "\\\u003e",
            "AttrFlags": 2
          },
          {
            "Text": ", and "
          },
          {
            "Text": "\u003e=",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521992431,
        "id": "2d78823a-83e7-4e7e-bc40-40f3c9dcaf2f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521992431,
        "parent_id": "8d36eb58-4238-48b4-a66f-62c12972f724",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "std::string str1 = \"Foo\";\nstd::string str2 = \"Bar\";\n\nassert(!(str1 \u003c str2));\nassert(str \u003e str2);\nassert(!(str1 \u003c= str2));\nassert(str1 \u003e= str2);\nassert(!(str1 == str2));\nassert(str1 != str2);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "std::string str1 = \"Foo\";\nstd::string str2 = \"Bar\";\n\nassert(!(str1 \u003c str2));\nassert(str \u003e str2);\nassert(!(str1 \u003c= str2));\nassert(str1 \u003e= str2);\nassert(!(str1 == str2));\nassert(str1 != str2);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521992431,
        "id": "d7224c30-5b6c-4e93-b57f-081928be4a7c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521992431,
        "parent_id": "8d36eb58-4238-48b4-a66f-62c12972f724",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "All these functions use the underlying "
            ],
            [
              "std::string::compare()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method to perform the comparison, and return for convenience boolean values. The operation of these functions may be interpreted as follows, regardless of the actual implementation:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "All these functions use the underlying "
          },
          {
            "Text": "std::string::compare()",
            "AttrFlags": 2
          },
          {
            "Text": " method to perform the comparison, and return for convenience boolean values. The operation of these functions may be interpreted as follows, regardless of the actual implementation:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521992432,
        "id": "b00b1da9-236a-41b1-b65c-64602cedc979",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521992432,
        "parent_id": "8d36eb58-4238-48b4-a66f-62c12972f724",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "operator"
            ],
            [
              "==",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "operator"
          },
          {
            "Text": "==",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521992432,
        "id": "8c15d155-e974-4ca4-846b-1cc9acae7232",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521992432,
        "parent_id": "8d36eb58-4238-48b4-a66f-62c12972f724",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If "
            ],
            [
              "str1.length() == str2.length()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and each character pair matches, then returns "
            ],
            [
              "true",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", otherwise returns "
            ],
            [
              "false",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If "
          },
          {
            "Text": "str1.length() == str2.length()",
            "AttrFlags": 2
          },
          {
            "Text": " and each character pair matches, then returns "
          },
          {
            "Text": "true",
            "AttrFlags": 2
          },
          {
            "Text": ", otherwise returns "
          },
          {
            "Text": "false",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521992433,
        "id": "9fb27032-bfa3-4e64-b7d7-aedc67823e14",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521992433,
        "parent_id": "8d36eb58-4238-48b4-a66f-62c12972f724",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "operator"
            ],
            [
              "!=",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "operator"
          },
          {
            "Text": "!=",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521992433,
        "id": "5125ec42-5586-4143-bc6f-b5eb90fed770",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521992433,
        "parent_id": "8d36eb58-4238-48b4-a66f-62c12972f724",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "If `str1.length() != str2.length()` or one character pair doesn't match, returns `true`, otherwise it returns `false`."
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "If `str1.length() != str2.length()` or one character pair doesn't match, returns `true`, otherwise it returns `false`.",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521992433,
        "id": "f5ca049a-952b-4cfd-8098-7e9fe2918c28",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521992433,
        "parent_id": "8d36eb58-4238-48b4-a66f-62c12972f724",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "operator"
            ],
            [
              "\\\u003c",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or operator"
            ],
            [
              "\\\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "operator"
          },
          {
            "Text": "\\\u003c",
            "AttrFlags": 2
          },
          {
            "Text": " or operator"
          },
          {
            "Text": "\\\u003e",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521992433,
        "id": "8ebe2671-22ca-4c0d-ac38-d955f37a8093",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521992433,
        "parent_id": "8d36eb58-4238-48b4-a66f-62c12972f724",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Finds the first different character pair, compares them then returns the boolean result."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Finds the first different character pair, compares them then returns the boolean result."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521992434,
        "id": "4c980c3f-cc03-4e01-940b-dbf1e19e9dc0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521992434,
        "parent_id": "8d36eb58-4238-48b4-a66f-62c12972f724",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "operator"
            ],
            [
              "\u003c=",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or operator"
            ],
            [
              "\u003e=",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "operator"
          },
          {
            "Text": "\u003c=",
            "AttrFlags": 2
          },
          {
            "Text": " or operator"
          },
          {
            "Text": "\u003e=",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521992434,
        "id": "e4bcdb2b-e799-4e12-b50a-f0d4742f622b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521992434,
        "parent_id": "8d36eb58-4238-48b4-a66f-62c12972f724",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Finds the first different character pair, compares them then returns the boolean result."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Finds the first different character pair, compares them then returns the boolean result."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521992434,
        "id": "33875ac7-2739-416f-9563-45377b54f4b5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521992434,
        "parent_id": "8d36eb58-4238-48b4-a66f-62c12972f724",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note:",
              [
                [
                  "b"
                ],
                [
                  "i"
                ]
              ]
            ],
            [
              " The term "
            ],
            [
              "character pair",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " means the corresponding characters in both strings of the same positions. For better understanding, if two example strings are "
            ],
            [
              "str1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "str2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", and their lengths are "
            ],
            [
              "n",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "m",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " respectively, then character pairs of both strings means each "
            ],
            [
              "str1[i]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "str2[i]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " pairs where "
            ],
            [
              "i = 0, 1, 2, …, max(n,m)",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ". If for any "
            ],
            [
              "i",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " where the corresponding character does not exist, that is, when "
            ],
            [
              "i",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " is greater than or equal to "
            ],
            [
              "n",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "m",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", it would be considered as the lowest value."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note:",
            "AttrFlags": 5
          },
          {
            "Text": " The term "
          },
          {
            "Text": "character pair",
            "AttrFlags": 1
          },
          {
            "Text": " means the corresponding characters in both strings of the same positions. For better understanding, if two example strings are "
          },
          {
            "Text": "str1",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "str2",
            "AttrFlags": 2
          },
          {
            "Text": ", and their lengths are "
          },
          {
            "Text": "n",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "m",
            "AttrFlags": 2
          },
          {
            "Text": " respectively, then character pairs of both strings means each "
          },
          {
            "Text": "str1[i]",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "str2[i]",
            "AttrFlags": 2
          },
          {
            "Text": " pairs where "
          },
          {
            "Text": "i = 0, 1, 2, …, max(n,m)",
            "AttrFlags": 4
          },
          {
            "Text": ". If for any "
          },
          {
            "Text": "i",
            "AttrFlags": 4
          },
          {
            "Text": " where the corresponding character does not exist, that is, when "
          },
          {
            "Text": "i",
            "AttrFlags": 4
          },
          {
            "Text": " is greater than or equal to "
          },
          {
            "Text": "n",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "m",
            "AttrFlags": 2
          },
          {
            "Text": ", it would be considered as the lowest value."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521992435,
        "id": "a769b9fc-4726-4328-a93e-2649fc7bdf89",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521992435,
        "parent_id": "8d36eb58-4238-48b4-a66f-62c12972f724",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521992435,
        "id": "175638ea-288c-4886-a52c-6afacca6a57a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521992435,
        "parent_id": "8d36eb58-4238-48b4-a66f-62c12972f724",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Here is an example of using "
            ],
            [
              "\\\u003c",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Here is an example of using "
          },
          {
            "Text": "\\\u003c",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521992435,
        "id": "7e179300-bc3d-4e2d-852f-bd6a46fb52b6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521992435,
        "parent_id": "8d36eb58-4238-48b4-a66f-62c12972f724",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "std::string str1 = \"Barr\";\nstd::string str2 = \"Bar\";\n\nassert(str2 \u003c str1);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "std::string str1 = \"Barr\";\nstd::string str2 = \"Bar\";\n\nassert(str2 \u003c str1);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521992435,
        "id": "da7419d0-3feb-44e6-9915-f2b6541377a6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521992435,
        "parent_id": "8d36eb58-4238-48b4-a66f-62c12972f724",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The steps are as follows:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The steps are as follows:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521992435,
        "id": "6e27e207-f428-4108-983f-281b8300d61d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521992435,
        "parent_id": "8d36eb58-4238-48b4-a66f-62c12972f724",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Compare the first characters, "
            ],
            [
              "'B' == 'B'",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " - move on."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Compare the first characters, "
          },
          {
            "Text": "'B' == 'B'",
            "AttrFlags": 2
          },
          {
            "Text": " - move on."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521992436,
        "id": "8c5415d2-54ee-49b1-8022-4d86799bf4c4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521992436,
        "parent_id": "8d36eb58-4238-48b4-a66f-62c12972f724",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Compare the second characters, "
            ],
            [
              "'a' == 'a'",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " - move on."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Compare the second characters, "
          },
          {
            "Text": "'a' == 'a'",
            "AttrFlags": 2
          },
          {
            "Text": " - move on."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521992436,
        "id": "b924671c-deb1-45a0-9c82-e659efcd2386",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521992436,
        "parent_id": "8d36eb58-4238-48b4-a66f-62c12972f724",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Compare the third characters, "
            ],
            [
              "'r' == 'r'",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " - move on."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Compare the third characters, "
          },
          {
            "Text": "'r' == 'r'",
            "AttrFlags": 2
          },
          {
            "Text": " - move on."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521992437,
        "id": "c1cd90e3-5738-47cf-a851-c7f075bded09",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521992437,
        "parent_id": "8d36eb58-4238-48b4-a66f-62c12972f724",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "str2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " range is now exhausted, while the "
            ],
            [
              "str1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " range still has characters. Thus, "
            ],
            [
              "str2 \u003c str1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "str2",
            "AttrFlags": 2
          },
          {
            "Text": " range is now exhausted, while the "
          },
          {
            "Text": "str1",
            "AttrFlags": 2
          },
          {
            "Text": " range still has characters. Thus, "
          },
          {
            "Text": "str2 \u003c str1",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      }
    ],
    "title": "Lexicographical comparison",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}