{
  "ID": "6f0f9f91-85f0-4b37-aff3-b4b40936a473",
  "Root": {
    "alive": true,
    "content": [
      "03ed740d-cf78-4118-9be6-0e6b320db7dd",
      "7c3896c6-9d2a-474b-b854-f1591f16883f",
      "54589766-ddde-4cf2-bef6-9e692b2edfa4"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550521971410,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "6f0f9f91-85f0-4b37-aff3-b4b40936a473",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550778720000,
    "parent_id": "ee86edbe-8dd9-497a-a24c-fa516272404e",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Stream Iterators"
        ]
      ]
    },
    "type": "page",
    "version": 9,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521971408,
        "id": "03ed740d-cf78-4118-9be6-0e6b320db7dd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521971408,
        "parent_id": "6f0f9f91-85f0-4b37-aff3-b4b40936a473",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Stream iterators are useful when we need to read a sequence or print formatted data from a container:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Stream iterators are useful when we need to read a sequence or print formatted data from a container:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521971410,
        "id": "7c3896c6-9d2a-474b-b854-f1591f16883f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550778720000,
        "parent_id": "6f0f9f91-85f0-4b37-aff3-b4b40936a473",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "// Data stream. Any number of various whitespace characters will be OK.\nstd::istringstream istr(\"1\\t 2     3 4\");\nstd::vector\u003cint\u003e v;\n\n// Constructing stream iterators and copying data from stream into vector.\nstd::copy(\n    // Iterator which will read stream data as integers.\n    std::istream_iterator\u003cint\u003e(istr),\n    // Default constructor produces end-of-stream iterator.\n    std::istream_iterator\u003cint\u003e(),\n    std::back_inserter(v));\n\n// Print vector contents.\nstd::copy(v.begin(), v.end(),\n    //Will print values to standard output as integers delimeted by \" -- \".\n    std::ostream_iterator\u003cint\u003e(std::cout, \" -- \"));"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "// Data stream. Any number of various whitespace characters will be OK.\nstd::istringstream istr(\"1\\t 2     3 4\");\nstd::vector\u003cint\u003e v;\n\n// Constructing stream iterators and copying data from stream into vector.\nstd::copy(\n    // Iterator which will read stream data as integers.\n    std::istream_iterator\u003cint\u003e(istr),\n    // Default constructor produces end-of-stream iterator.\n    std::istream_iterator\u003cint\u003e(),\n    std::back_inserter(v));\n\n// Print vector contents.\nstd::copy(v.begin(), v.end(),\n    //Will print values to standard output as integers delimeted by \" -- \".\n    std::ostream_iterator\u003cint\u003e(std::cout, \" -- \"));",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521971410,
        "id": "54589766-ddde-4cf2-bef6-9e692b2edfa4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521971410,
        "parent_id": "6f0f9f91-85f0-4b37-aff3-b4b40936a473",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The example program will print "
            ],
            [
              "1 -- 2 -- 3 -- 4 --",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to standard output."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The example program will print "
          },
          {
            "Text": "1 -- 2 -- 3 -- 4 --",
            "AttrFlags": 2
          },
          {
            "Text": " to standard output."
          }
        ]
      }
    ],
    "title": "Stream Iterators",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}