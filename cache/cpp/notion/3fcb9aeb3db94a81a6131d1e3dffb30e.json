{
  "ID": "3fcb9aeb-3db9-4a81-a613-1d1e3dffb30e",
  "Root": {
    "alive": true,
    "content": [
      "a8559ba3-7d3b-44a7-8d52-fdef35ac8d6b",
      "4f3b4430-bc33-4c82-9db7-73d6943332f1",
      "6f2f7c97-770f-4ce9-b6b6-fd066aca896e",
      "e034dafc-3778-49e8-87c3-739d0861eb76",
      "4ae00350-89e1-4ccc-bee5-eb8354159fed",
      "98202682-2744-4683-bd8e-2026c876215f",
      "ff0788ae-05f2-4bd4-9b74-f25223f5fc5e",
      "71ba14d7-6914-496b-8dfe-9a014a1edee3"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522281616,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "3fcb9aeb-3db9-4a81-a613-1d1e3dffb30e",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550655300000,
    "parent_id": "f1b860db-be5a-41ed-a67b-b7b0181ec59f",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Create a simple thread pool"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522281610,
        "id": "a8559ba3-7d3b-44a7-8d52-fdef35ac8d6b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522281610,
        "parent_id": "3fcb9aeb-3db9-4a81-a613-1d1e3dffb30e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "C++11 threading primitives are still relatively low level. They can be used to write a higher level construct, like a thread pool:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "C++11 threading primitives are still relatively low level. They can be used to write a higher level construct, like a thread pool:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522281613,
        "id": "4f3b4430-bc33-4c82-9db7-73d6943332f1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522281613,
        "parent_id": "3fcb9aeb-3db9-4a81-a613-1d1e3dffb30e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "struct tasks {\n  // the mutex, condition variable and deque form a single\n  // thread-safe triggered queue of tasks:\n  std::mutex m;\n  std::condition_variable v;\n  // note that a packaged_task\u003cvoid\u003e can store a packaged_task\u003cR\u003e:\n  std::deque\u003cstd::packaged_task\u003cvoid()\u003e\u003e work;\n\n  // this holds futures representing the worker threads being done:\n  std::vector\u003cstd::future\u003cvoid\u003e\u003e finished;\n\n  // queue( lambda ) will enqueue the lambda into the tasks for the threads\n  // to use.  A future of the type the lambda returns is given to let you get\n  // the result out.\n  template\u003cclass F, class R=std::result_of_t\u003cF\u0026()\u003e\u003e\n  std::future\u003cR\u003e queue(F\u0026\u0026 f) {\n    // wrap the function object into a packaged task, splitting\n    // execution from the return value:\n    std::packaged_task\u003cR()\u003e p(std::forward\u003cF\u003e(f));\n\n    auto r=p.get_future(); // get the return value before we hand off the task\n    {\n      std::unique_lock\u003cstd::mutex\u003e l(m);\n      work.emplace_back(std::move(p)); // store the task\u003cR()\u003e as a task\u003cvoid()\u003e\n    }\n    v.notify_one(); // wake a thread to work on the task\n\n    return r; // return the future result of the task\n  }\n\n  // start N threads in the thread pool.\n  void start(std::size_t N=1){\n    for (std::size_t i = 0; i \u003c N; ++i)\n    {\n      // each thread is a std::async running this-\u003ethread_task():\n      finished.push_back(\n        std::async(\n          std::launch::async,\n          [this]{ thread_task(); }\n        )\n      );\n    }\n  }\n  // abort() cancels all non-started tasks, and tells every working thread\n  // stop running, and waits for them to finish up.\n  void abort() {\n    cancel_pending();\n    finish();\n  }\n  // cancel_pending() merely cancels all non-started tasks:\n  void cancel_pending() {\n    std::unique_lock\u003cstd::mutex\u003e l(m);\n    work.clear();\n  }\n  // finish enques a \"stop the thread\" message for every thread, then waits for them:\n  void finish() {\n    {\n      std::unique_lock\u003cstd::mutex\u003e l(m);\n      for(auto\u0026\u0026unused:finished){\n        work.push_back({});\n      }\n    }\n    v.notify_all();\n    finished.clear();\n  }\n  ~tasks() {\n    finish();\n  }\nprivate:\n  // the work that a worker thread does:\n  void thread_task() {\n    while(true){\n      // pop a task off the queue:\n      std::packaged_task\u003cvoid()\u003e f;\n      {\n        // usual thread-safe queue code:\n        std::unique_lock\u003cstd::mutex\u003e l(m);\n        if (work.empty()){\n          v.wait(l,[\u0026]{return !work.empty();});\n        }\n        f = std::move(work.front());\n        work.pop_front();\n      }\n      // if the task is invalid, it means we are asked to abort:\n      if (!f.valid()) return;\n      // otherwise, run the task:\n      f();\n    }\n  }\n};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "struct tasks {\n  // the mutex, condition variable and deque form a single\n  // thread-safe triggered queue of tasks:\n  std::mutex m;\n  std::condition_variable v;\n  // note that a packaged_task\u003cvoid\u003e can store a packaged_task\u003cR\u003e:\n  std::deque\u003cstd::packaged_task\u003cvoid()\u003e\u003e work;\n\n  // this holds futures representing the worker threads being done:\n  std::vector\u003cstd::future\u003cvoid\u003e\u003e finished;\n\n  // queue( lambda ) will enqueue the lambda into the tasks for the threads\n  // to use.  A future of the type the lambda returns is given to let you get\n  // the result out.\n  template\u003cclass F, class R=std::result_of_t\u003cF\u0026()\u003e\u003e\n  std::future\u003cR\u003e queue(F\u0026\u0026 f) {\n    // wrap the function object into a packaged task, splitting\n    // execution from the return value:\n    std::packaged_task\u003cR()\u003e p(std::forward\u003cF\u003e(f));\n\n    auto r=p.get_future(); // get the return value before we hand off the task\n    {\n      std::unique_lock\u003cstd::mutex\u003e l(m);\n      work.emplace_back(std::move(p)); // store the task\u003cR()\u003e as a task\u003cvoid()\u003e\n    }\n    v.notify_one(); // wake a thread to work on the task\n\n    return r; // return the future result of the task\n  }\n\n  // start N threads in the thread pool.\n  void start(std::size_t N=1){\n    for (std::size_t i = 0; i \u003c N; ++i)\n    {\n      // each thread is a std::async running this-\u003ethread_task():\n      finished.push_back(\n        std::async(\n          std::launch::async,\n          [this]{ thread_task(); }\n        )\n      );\n    }\n  }\n  // abort() cancels all non-started tasks, and tells every working thread\n  // stop running, and waits for them to finish up.\n  void abort() {\n    cancel_pending();\n    finish();\n  }\n  // cancel_pending() merely cancels all non-started tasks:\n  void cancel_pending() {\n    std::unique_lock\u003cstd::mutex\u003e l(m);\n    work.clear();\n  }\n  // finish enques a \"stop the thread\" message for every thread, then waits for them:\n  void finish() {\n    {\n      std::unique_lock\u003cstd::mutex\u003e l(m);\n      for(auto\u0026\u0026unused:finished){\n        work.push_back({});\n      }\n    }\n    v.notify_all();\n    finished.clear();\n  }\n  ~tasks() {\n    finish();\n  }\nprivate:\n  // the work that a worker thread does:\n  void thread_task() {\n    while(true){\n      // pop a task off the queue:\n      std::packaged_task\u003cvoid()\u003e f;\n      {\n        // usual thread-safe queue code:\n        std::unique_lock\u003cstd::mutex\u003e l(m);\n        if (work.empty()){\n          v.wait(l,[\u0026]{return !work.empty();});\n        }\n        f = std::move(work.front());\n        work.pop_front();\n      }\n      // if the task is invalid, it means we are asked to abort:\n      if (!f.valid()) return;\n      // otherwise, run the task:\n      f();\n    }\n  }\n};",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522281613,
        "id": "6f2f7c97-770f-4ce9-b6b6-fd066aca896e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522281613,
        "parent_id": "3fcb9aeb-3db9-4a81-a613-1d1e3dffb30e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "tasks.queue( []{ return \"hello world\"s; } )",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " returns a "
            ],
            [
              "std::future\u003cstd::string\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", which when the tasks object gets around to running it is populated with "
            ],
            [
              "hello world",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "tasks.queue( []{ return \"hello world\"s; } )",
            "AttrFlags": 2
          },
          {
            "Text": " returns a "
          },
          {
            "Text": "std::future\u003cstd::string\u003e",
            "AttrFlags": 2
          },
          {
            "Text": ", which when the tasks object gets around to running it is populated with "
          },
          {
            "Text": "hello world",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522281613,
        "id": "e034dafc-3778-49e8-87c3-739d0861eb76",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522281613,
        "parent_id": "3fcb9aeb-3db9-4a81-a613-1d1e3dffb30e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You create threads by running "
            ],
            [
              "tasks.start(10)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (which starts 10 threads)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You create threads by running "
          },
          {
            "Text": "tasks.start(10)",
            "AttrFlags": 2
          },
          {
            "Text": " (which starts 10 threads)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522281614,
        "id": "4ae00350-89e1-4ccc-bee5-eb8354159fed",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522281614,
        "parent_id": "3fcb9aeb-3db9-4a81-a613-1d1e3dffb30e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The use of "
            ],
            [
              "packaged_task\u003cvoid()\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is merely because there is no type-erased "
            ],
            [
              "std::function",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " equivalent that stores move-only types. Writing a custom one of those would probably be faster than using "
            ],
            [
              "packaged_task\u003cvoid()\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The use of "
          },
          {
            "Text": "packaged_task\u003cvoid()\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " is merely because there is no type-erased "
          },
          {
            "Text": "std::function",
            "AttrFlags": 2
          },
          {
            "Text": " equivalent that stores move-only types. Writing a custom one of those would probably be faster than using "
          },
          {
            "Text": "packaged_task\u003cvoid()\u003e",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522281615,
        "id": "98202682-2744-4683-bd8e-2026c876215f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522281615,
        "parent_id": "3fcb9aeb-3db9-4a81-a613-1d1e3dffb30e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Live example",
              [
                [
                  "a",
                  "http://coliru.stacked-crooked.com/"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Live example",
            "Link": "http://coliru.stacked-crooked.com/"
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522281616,
        "id": "ff0788ae-05f2-4bd4-9b74-f25223f5fc5e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522281616,
        "parent_id": "3fcb9aeb-3db9-4a81-a613-1d1e3dffb30e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In C++11, replace "
            ],
            [
              "result_of_t\u003cblah\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " with "
            ],
            [
              "typename result_of\u003cblah\u003e::type",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In C++11, replace "
          },
          {
            "Text": "result_of_t\u003cblah\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " with "
          },
          {
            "Text": "typename result_of\u003cblah\u003e::type",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522281616,
        "id": "71ba14d7-6914-496b-8dfe-9a014a1edee3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522281616,
        "parent_id": "3fcb9aeb-3db9-4a81-a613-1d1e3dffb30e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "More on "
            ],
            [
              "Mutexes",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%2B%2B/9895/mutexes#t=201705101230556157064"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "More on "
          },
          {
            "Text": "Mutexes",
            "Link": "http://stackoverflow.com/documentation/c%2B%2B/9895/mutexes#t=201705101230556157064"
          },
          {
            "Text": "."
          }
        ]
      }
    ],
    "title": "Create a simple thread pool",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}