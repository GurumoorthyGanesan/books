{
  "ID": "032eb061-9388-424f-8907-bdc73532b233",
  "Root": {
    "alive": true,
    "content": [
      "7f9c4da8-12c4-48e8-91c5-f01b15f71c76",
      "7bc05583-634c-496d-916c-ba0dae026ab2",
      "ef75bcb6-3d71-4e7c-aa45-dccdef318878",
      "789a2e1c-eb96-4efe-8112-9594613d0f7c"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522075416,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "032eb061-9388-424f-8907-bdc73532b233",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550655540000,
    "parent_id": "71517390-0244-456d-87c4-82c582ca8abf",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Porting lambda functions to C 03 using functors"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522075415,
        "id": "7f9c4da8-12c4-48e8-91c5-f01b15f71c76",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522075415,
        "parent_id": "032eb061-9388-424f-8907-bdc73532b233",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Lambda functions in C++ are syntactic sugar that provide a very concise syntax for writing "
            ],
            [
              "functors",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%2B%2B/1412/class-functors#t=201607221029133733631"
                ]
              ]
            ],
            [
              ". As such, equivalent functionality can be obtained in C++03 (albeit much more verbose) by converting the lambda function into a functor:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Lambda functions in C++ are syntactic sugar that provide a very concise syntax for writing "
          },
          {
            "Text": "functors",
            "Link": "http://stackoverflow.com/documentation/c%2B%2B/1412/class-functors#t=201607221029133733631"
          },
          {
            "Text": ". As such, equivalent functionality can be obtained in C++03 (albeit much more verbose) by converting the lambda function into a functor:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522075415,
        "id": "7bc05583-634c-496d-916c-ba0dae026ab2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522075415,
        "parent_id": "032eb061-9388-424f-8907-bdc73532b233",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// Some dummy types:\nstruct T1 {int dummy;};\nstruct T2 {int dummy;};\nstruct R {int dummy;};\n\n// Code using a lambda function (requires C++11)\nR use_lambda(T1 val, T2 ref) {\n  // Use auto because the type of the lambda is unknown.\n  auto lambda = [val, \u0026ref](int arg1, int arg2) -\u003e R {\n    /* lambda-body */\n    return R();\n  };\n  return lambda(12, 27);\n}\n\n// The functor class (valid C++03)\n// Similar to what the compiler generates for the lambda function.\nclass Functor {\n  // Capture list.\n  T1 val;\n  T2\u0026 ref;\n\npublic:\n  // Constructor\n  inline Functor(T1 val, T2\u0026 ref) : val(val), ref(ref) {}\n\n  // Functor body\n  R operator()(int arg1, int arg2) const {\n    /* lambda-body */\n    return R();\n  }\n};\n\n// Equivalent to use_lambda, but uses a functor (valid C++03).\nR use_functor(T1 val, T2 ref) {\n  Functor functor(val, ref);\n  return functor(12, 27);\n}\n\n// Make this a self-contained example.\nint main() {\n  T1 t1;\n  T2 t2;\n  use_functor(t1,t2);\n  use_lambda(t1,t2);\n  return 0;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// Some dummy types:\nstruct T1 {int dummy;};\nstruct T2 {int dummy;};\nstruct R {int dummy;};\n\n// Code using a lambda function (requires C++11)\nR use_lambda(T1 val, T2 ref) {\n  // Use auto because the type of the lambda is unknown.\n  auto lambda = [val, \u0026ref](int arg1, int arg2) -\u003e R {\n    /* lambda-body */\n    return R();\n  };\n  return lambda(12, 27);\n}\n\n// The functor class (valid C++03)\n// Similar to what the compiler generates for the lambda function.\nclass Functor {\n  // Capture list.\n  T1 val;\n  T2\u0026 ref;\n\npublic:\n  // Constructor\n  inline Functor(T1 val, T2\u0026 ref) : val(val), ref(ref) {}\n\n  // Functor body\n  R operator()(int arg1, int arg2) const {\n    /* lambda-body */\n    return R();\n  }\n};\n\n// Equivalent to use_lambda, but uses a functor (valid C++03).\nR use_functor(T1 val, T2 ref) {\n  Functor functor(val, ref);\n  return functor(12, 27);\n}\n\n// Make this a self-contained example.\nint main() {\n  T1 t1;\n  T2 t2;\n  use_functor(t1,t2);\n  use_lambda(t1,t2);\n  return 0;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522075416,
        "id": "ef75bcb6-3d71-4e7c-aa45-dccdef318878",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522075416,
        "parent_id": "032eb061-9388-424f-8907-bdc73532b233",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If the lambda function is "
            ],
            [
              "mutable",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " then make the functor’s call-operator non-const, i.e.:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If the lambda function is "
          },
          {
            "Text": "mutable",
            "AttrFlags": 2
          },
          {
            "Text": " then make the functor’s call-operator non-const, i.e.:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522075416,
        "id": "789a2e1c-eb96-4efe-8112-9594613d0f7c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522075416,
        "parent_id": "032eb061-9388-424f-8907-bdc73532b233",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "R operator()(int arg1, int arg2) /*non-const*/ {\n  /* lambda-body */\n  return R();\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "R operator()(int arg1, int arg2) /*non-const*/ {\n  /* lambda-body */\n  return R();\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "Porting lambda functions to C 03 using functors",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}