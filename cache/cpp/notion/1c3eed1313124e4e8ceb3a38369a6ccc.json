{
  "ID": "1c3eed13-1312-4e4e-8ceb-3a38369a6ccc",
  "Root": {
    "alive": true,
    "content": [
      "a4651d62-1837-4e4b-a31b-70283e92f35e",
      "f5fdca7e-230d-4ea5-b1bd-223cad3fbb24",
      "c9f24b1b-7329-4df0-a78d-47bcb6768827",
      "146a6a37-b3c9-4da4-9127-08a736d64217",
      "371b04b8-0238-479d-a2a0-f825f9fc5bfd",
      "852e9dc7-ed31-4475-a8ee-86a32d4f5582",
      "04832b44-a144-4890-8307-86a98f58b919",
      "b475caf5-a60b-41dd-abe2-0694b6d164ac"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550521995563,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "1c3eed13-1312-4e4e-8ceb-3a38369a6ccc",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552304280000,
    "parent_id": "b886ff5d-614b-4aa9-9e99-851b7998439b",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Checking if a string is a prefix of another"
        ]
      ]
    },
    "type": "page",
    "version": 10,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521995562,
        "id": "a4651d62-1837-4e4b-a31b-70283e92f35e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521995562,
        "parent_id": "1c3eed13-1312-4e4e-8ceb-3a38369a6ccc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In C++14, this is easily done by "
            ],
            [
              "std::mismatch",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://en.cppreference.com/w/cpp/algorithm/mismatch"
                ]
              ]
            ],
            [
              " which returns the first mismatching pair from two ranges:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In C++14, this is easily done by "
          },
          {
            "Text": "std::mismatch",
            "AttrFlags": 2,
            "Link": "http://en.cppreference.com/w/cpp/algorithm/mismatch"
          },
          {
            "Text": " which returns the first mismatching pair from two ranges:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521995563,
        "id": "f5fdca7e-230d-4ea5-b1bd-223cad3fbb24",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552304280000,
        "parent_id": "1c3eed13-1312-4e4e-8ceb-3a38369a6ccc",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "std::string prefix = \"foo\";\nstd::string string = \"foobar\";\n\nbool isPrefix = std::mismatch(prefix.begin(), prefix.end(),\n    string.begin(), string.end()).first == prefix.end();"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "std::string prefix = \"foo\";\nstd::string string = \"foobar\";\n\nbool isPrefix = std::mismatch(prefix.begin(), prefix.end(),\n    string.begin(), string.end()).first == prefix.end();",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521995563,
        "id": "c9f24b1b-7329-4df0-a78d-47bcb6768827",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521995563,
        "parent_id": "1c3eed13-1312-4e4e-8ceb-3a38369a6ccc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note that a range-and-a-half version of "
            ],
            [
              "mismatch()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " existed prior to C++14, but this is unsafe in the case that the second string is the shorter of the two."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note that a range-and-a-half version of "
          },
          {
            "Text": "mismatch()",
            "AttrFlags": 2
          },
          {
            "Text": " existed prior to C++14, but this is unsafe in the case that the second string is the shorter of the two."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521995563,
        "id": "146a6a37-b3c9-4da4-9127-08a736d64217",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521995563,
        "parent_id": "1c3eed13-1312-4e4e-8ceb-3a38369a6ccc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We can still use the range-and-a-half version of "
            ],
            [
              "std::mismatch()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", but we need to first check that the first string is at most as big as the second:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "We can still use the range-and-a-half version of "
          },
          {
            "Text": "std::mismatch()",
            "AttrFlags": 2
          },
          {
            "Text": ", but we need to first check that the first string is at most as big as the second:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521995563,
        "id": "371b04b8-0238-479d-a2a0-f825f9fc5bfd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552304280000,
        "parent_id": "1c3eed13-1312-4e4e-8ceb-3a38369a6ccc",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "bool isPrefix = prefix.size() \u003c= string.size() \u0026\u0026\n    std::mismatch(prefix.begin(), prefix.end(),\n        string.begin(), string.end()).first == prefix.end();"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "bool isPrefix = prefix.size() \u003c= string.size() \u0026\u0026\n    std::mismatch(prefix.begin(), prefix.end(),\n        string.begin(), string.end()).first == prefix.end();",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521995563,
        "id": "852e9dc7-ed31-4475-a8ee-86a32d4f5582",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521995563,
        "parent_id": "1c3eed13-1312-4e4e-8ceb-3a38369a6ccc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "With "
            ],
            [
              "std::string_view",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", we can write the direct comparison we want without having to worry about allocation overhead or making copies:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "With "
          },
          {
            "Text": "std::string_view",
            "AttrFlags": 2
          },
          {
            "Text": ", we can write the direct comparison we want without having to worry about allocation overhead or making copies:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521995563,
        "id": "04832b44-a144-4890-8307-86a98f58b919",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552304280000,
        "parent_id": "1c3eed13-1312-4e4e-8ceb-3a38369a6ccc",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "bool isPrefix(std::string_view prefix, std::string_view full)\n{\n    return prefix == full.substr(0, prefix.size());\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "bool isPrefix(std::string_view prefix, std::string_view full)\n{\n    return prefix == full.substr(0, prefix.size());\n}",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552304280000,
        "id": "b475caf5-a60b-41dd-abe2-0694b6d164ac",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552304280000,
        "parent_id": "1c3eed13-1312-4e4e-8ceb-3a38369a6ccc",
        "parent_table": "block",
        "type": "text",
        "version": 3
      }
    ],
    "title": "Checking if a string is a prefix of another",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}