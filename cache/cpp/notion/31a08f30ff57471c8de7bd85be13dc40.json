{
  "ID": "31a08f30-ff57-471c-8de7-bd85be13dc40",
  "Root": {
    "alive": true,
    "content": [
      "294a49bb-8d1c-42a2-b014-0a9c28c934a8",
      "027bfbf7-6584-4ebb-aadc-ce98d1288d96",
      "22d12594-efd7-45ca-9bab-9bf69c71a519",
      "c40fcbaa-9b6c-48b4-83fc-2b0ec5936185",
      "e87b69f8-ace3-4e7c-aefa-88f103675d76",
      "efe464ad-8ad7-475c-828a-033741f8ecc8",
      "653d9325-a497-440f-bc9d-0a125cd313d9",
      "9ce3c581-6bb9-4977-8772-a1dee74f3715",
      "8f51658b-d4b2-4166-a99a-e1f0cce483b2",
      "42eb2be1-6588-4330-8114-1e289e4c072c",
      "bebf94d6-e441-4a77-b882-2e700ed87056",
      "0992c2f0-9bb2-45a1-a04e-d4a8d1e4a7cf",
      "6ee6bd4b-6b54-4627-ac03-3223946242d7",
      "1db68938-c740-46a7-bc10-c8fd1cc7103c",
      "11e6918f-d554-4690-9790-6629770ee336"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522053611,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "31a08f30-ff57-471c-8de7-bd85be13dc40",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550655900000,
    "parent_id": "8655f492-9c51-4f68-ad52-8b6c1e02a277",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Using a Sorted Vector for Fast Element Lookup"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522053605,
        "id": "294a49bb-8d1c-42a2-b014-0a9c28c934a8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522053605,
        "parent_id": "31a08f30-ff57-471c-8de7-bd85be13dc40",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "\u003calgorithm\u003e",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://en.cppreference.com/w/cpp/header/algorithm"
                ]
              ]
            ],
            [
              " header provides a number of useful functions for working with sorted vectors."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "\u003calgorithm\u003e",
            "AttrFlags": 2,
            "Link": "http://en.cppreference.com/w/cpp/header/algorithm"
          },
          {
            "Text": " header provides a number of useful functions for working with sorted vectors."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522053606,
        "id": "027bfbf7-6584-4ebb-aadc-ce98d1288d96",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522053606,
        "parent_id": "31a08f30-ff57-471c-8de7-bd85be13dc40",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "An important prerequisite for working with sorted vectors is that the stored values are comparable with "
            ],
            [
              "\\\u003c",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "An important prerequisite for working with sorted vectors is that the stored values are comparable with "
          },
          {
            "Text": "\\\u003c",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522053606,
        "id": "22d12594-efd7-45ca-9bab-9bf69c71a519",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522053606,
        "parent_id": "31a08f30-ff57-471c-8de7-bd85be13dc40",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "An unsorted vector can be sorted by using the function "
            ],
            [
              "std::sort()",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://en.cppreference.com/w/cpp/algorithm/sort"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "An unsorted vector can be sorted by using the function "
          },
          {
            "Text": "std::sort()",
            "AttrFlags": 2,
            "Link": "http://en.cppreference.com/w/cpp/algorithm/sort"
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522053606,
        "id": "c40fcbaa-9b6c-48b4-83fc-2b0ec5936185",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522053606,
        "parent_id": "31a08f30-ff57-471c-8de7-bd85be13dc40",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "std::vector\u003cint\u003e v;\n// add some code here to fill v with some elements\nstd::sort(v.begin(), v.end());"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "std::vector\u003cint\u003e v;\n// add some code here to fill v with some elements\nstd::sort(v.begin(), v.end());",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522053607,
        "id": "e87b69f8-ace3-4e7c-aefa-88f103675d76",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522053607,
        "parent_id": "31a08f30-ff57-471c-8de7-bd85be13dc40",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Sorted vectors allow efficient element lookup using the function "
            ],
            [
              "std::lower_bound()",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://en.cppreference.com/w/cpp/algorithm/lower_bound"
                ]
              ]
            ],
            [
              ". Unlike "
            ],
            [
              "std::find()",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://en.cppreference.com/w/cpp/algorithm/find"
                ]
              ]
            ],
            [
              ", this performs an efficient binary search on the vector. The downside is that it only gives valid results for sorted input ranges:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Sorted vectors allow efficient element lookup using the function "
          },
          {
            "Text": "std::lower_bound()",
            "AttrFlags": 2,
            "Link": "http://en.cppreference.com/w/cpp/algorithm/lower_bound"
          },
          {
            "Text": ". Unlike "
          },
          {
            "Text": "std::find()",
            "AttrFlags": 2,
            "Link": "http://en.cppreference.com/w/cpp/algorithm/find"
          },
          {
            "Text": ", this performs an efficient binary search on the vector. The downside is that it only gives valid results for sorted input ranges:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522053608,
        "id": "efe464ad-8ad7-475c-828a-033741f8ecc8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522053608,
        "parent_id": "31a08f30-ff57-471c-8de7-bd85be13dc40",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// search the vector for the first element with value 42\nstd::vector\u003cint\u003e::iterator it = std::lower_bound(v.begin(), v.end(), 42);\nif (it != v.end() \u0026\u0026 *it == 42) {\n    // we found the element!\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// search the vector for the first element with value 42\nstd::vector\u003cint\u003e::iterator it = std::lower_bound(v.begin(), v.end(), 42);\nif (it != v.end() \u0026\u0026 *it == 42) {\n    // we found the element!\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522053608,
        "id": "653d9325-a497-440f-bc9d-0a125cd313d9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522053608,
        "parent_id": "31a08f30-ff57-471c-8de7-bd85be13dc40",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note:",
              [
                [
                  "b"
                ],
                [
                  "i"
                ]
              ]
            ],
            [
              " If the requested value is not part of the vector, "
            ],
            [
              "std::lower_bound()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will return an iterator to the first element that is "
            ],
            [
              "greater",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " than the requested value. This behavior allows us to insert a new element at its right place in an already sorted vector:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note:",
            "AttrFlags": 5
          },
          {
            "Text": " If the requested value is not part of the vector, "
          },
          {
            "Text": "std::lower_bound()",
            "AttrFlags": 2
          },
          {
            "Text": " will return an iterator to the first element that is "
          },
          {
            "Text": "greater",
            "AttrFlags": 4
          },
          {
            "Text": " than the requested value. This behavior allows us to insert a new element at its right place in an already sorted vector:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522053608,
        "id": "9ce3c581-6bb9-4977-8772-a1dee74f3715",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522053608,
        "parent_id": "31a08f30-ff57-471c-8de7-bd85be13dc40",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int const new_element = 33;\nv.insert(std::lower_bound(v.begin(), v.end(), new_element), new_element);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int const new_element = 33;\nv.insert(std::lower_bound(v.begin(), v.end(), new_element), new_element);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522053608,
        "id": "8f51658b-d4b2-4166-a99a-e1f0cce483b2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522053608,
        "parent_id": "31a08f30-ff57-471c-8de7-bd85be13dc40",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If you need to insert a lot of elements at once, it might be more efficient to call "
            ],
            [
              "push_back()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " for all them first and then call "
            ],
            [
              "std::sort()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " once all elements have been inserted. In this case, the increased cost of the sorting can pay off against the reduced cost of inserting new elements at the end of the vector and not in the middle."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If you need to insert a lot of elements at once, it might be more efficient to call "
          },
          {
            "Text": "push_back()",
            "AttrFlags": 2
          },
          {
            "Text": " for all them first and then call "
          },
          {
            "Text": "std::sort()",
            "AttrFlags": 2
          },
          {
            "Text": " once all elements have been inserted. In this case, the increased cost of the sorting can pay off against the reduced cost of inserting new elements at the end of the vector and not in the middle."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522053609,
        "id": "42eb2be1-6588-4330-8114-1e289e4c072c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522053609,
        "parent_id": "31a08f30-ff57-471c-8de7-bd85be13dc40",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If your vector contains multiple elements of the same value, "
            ],
            [
              "std::lower_bound()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will try to return an iterator to the first element of the searched value. However, if you need to insert a new element "
            ],
            [
              "after",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " the last element of the searched value, you should use the function "
            ],
            [
              "std::upper_bound()",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://en.cppreference.com/w/cpp/algorithm/upper_bound"
                ]
              ]
            ],
            [
              " as this will cause less shifting around of elements:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If your vector contains multiple elements of the same value, "
          },
          {
            "Text": "std::lower_bound()",
            "AttrFlags": 2
          },
          {
            "Text": " will try to return an iterator to the first element of the searched value. However, if you need to insert a new element "
          },
          {
            "Text": "after",
            "AttrFlags": 4
          },
          {
            "Text": " the last element of the searched value, you should use the function "
          },
          {
            "Text": "std::upper_bound()",
            "AttrFlags": 2,
            "Link": "http://en.cppreference.com/w/cpp/algorithm/upper_bound"
          },
          {
            "Text": " as this will cause less shifting around of elements:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522053609,
        "id": "bebf94d6-e441-4a77-b882-2e700ed87056",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522053609,
        "parent_id": "31a08f30-ff57-471c-8de7-bd85be13dc40",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "v.insert(std::upper_bound(v.begin(), v.end(), new_element), new_element);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "v.insert(std::upper_bound(v.begin(), v.end(), new_element), new_element);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522053610,
        "id": "0992c2f0-9bb2-45a1-a04e-d4a8d1e4a7cf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522053610,
        "parent_id": "31a08f30-ff57-471c-8de7-bd85be13dc40",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If you need both the upper bound and the lower bound iterators, you can use the function "
            ],
            [
              "std::equal_range()",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://en.cppreference.com/w/cpp/algorithm/equal_range"
                ]
              ]
            ],
            [
              " to retrieve both of them efficiently with one call:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If you need both the upper bound and the lower bound iterators, you can use the function "
          },
          {
            "Text": "std::equal_range()",
            "AttrFlags": 2,
            "Link": "http://en.cppreference.com/w/cpp/algorithm/equal_range"
          },
          {
            "Text": " to retrieve both of them efficiently with one call:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522053610,
        "id": "6ee6bd4b-6b54-4627-ac03-3223946242d7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522053610,
        "parent_id": "31a08f30-ff57-471c-8de7-bd85be13dc40",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "std::pair\u003cstd::vector\u003cint\u003e::iterator,\n          std::vector\u003cint\u003e::iterator\u003e rg = std::equal_range(v.begin(), v.end(), 42);\nstd::vector\u003cint\u003e::iterator lower_bound = rg.first;\nstd::vector\u003cint\u003e::iterator upper_bound = rg.second;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "std::pair\u003cstd::vector\u003cint\u003e::iterator,\n          std::vector\u003cint\u003e::iterator\u003e rg = std::equal_range(v.begin(), v.end(), 42);\nstd::vector\u003cint\u003e::iterator lower_bound = rg.first;\nstd::vector\u003cint\u003e::iterator upper_bound = rg.second;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522053610,
        "id": "1db68938-c740-46a7-bc10-c8fd1cc7103c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522053610,
        "parent_id": "31a08f30-ff57-471c-8de7-bd85be13dc40",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In order to test whether an element exists in a sorted vector (although not specific to vectors), you can use the function "
            ],
            [
              "std::binary_search()",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://en.cppreference.com/w/cpp/algorithm/binary_search"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In order to test whether an element exists in a sorted vector (although not specific to vectors), you can use the function "
          },
          {
            "Text": "std::binary_search()",
            "AttrFlags": 2,
            "Link": "http://en.cppreference.com/w/cpp/algorithm/binary_search"
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522053611,
        "id": "11e6918f-d554-4690-9790-6629770ee336",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522053611,
        "parent_id": "31a08f30-ff57-471c-8de7-bd85be13dc40",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "bool exists = std::binary_search(v.begin(), v.end(), value_to_find);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "bool exists = std::binary_search(v.begin(), v.end(), value_to_find);",
        "code_language": "Plain Text"
      }
    ],
    "title": "Using a Sorted Vector for Fast Element Lookup",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}