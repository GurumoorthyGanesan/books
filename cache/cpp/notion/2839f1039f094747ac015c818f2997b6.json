{
  "ID": "2839f103-9f09-4747-ac01-5c818f2997b6",
  "Root": {
    "alive": true,
    "content": [
      "d1d0d880-e2c7-4b4d-a58b-4b976758d0fa",
      "cbbd9cc1-7acc-4cfc-b001-fd16fc2117f2",
      "6c95e2ab-6d9b-45cb-9e7b-ee0f62c14919",
      "bc65d740-2efa-4771-aa5b-eb72db57b07b",
      "23ed18f4-cf11-46f1-817e-38a95f60b955",
      "192df4e4-4d94-4bed-9cc2-1f062799227a",
      "90ecedb7-4436-4edd-b26a-85b1615cc489",
      "4a258b7f-9a5f-4e8d-9459-bee38ce0b2bc"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550524255786,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "2839f103-9f09-4747-ac01-5c818f2997b6",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551688410397,
    "parent_id": "0dfb5c8c-d986-4536-97a3-b3f543cfd7fa",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Function Pointers"
        ]
      ]
    },
    "type": "page",
    "version": 4,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524255783,
        "id": "d1d0d880-e2c7-4b4d-a58b-4b976758d0fa",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524255783,
        "parent_id": "2839f103-9f09-4747-ac01-5c818f2997b6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Function pointers are the most basic way of passing functions around, which can also be used in C. (See the "
            ],
            [
              "C documentation",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c/250/function-pointers"
                ]
              ]
            ],
            [
              " for more details)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Function pointers are the most basic way of passing functions around, which can also be used in C. (See the "
          },
          {
            "Text": "C documentation",
            "Link": "http://stackoverflow.com/documentation/c/250/function-pointers"
          },
          {
            "Text": " for more details)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524255784,
        "id": "cbbd9cc1-7acc-4cfc-b001-fd16fc2117f2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524255784,
        "parent_id": "2839f103-9f09-4747-ac01-5c818f2997b6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For the purpose of callable objects, a function pointer can be defined as:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For the purpose of callable objects, a function pointer can be defined as:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524255784,
        "id": "6c95e2ab-6d9b-45cb-9e7b-ee0f62c14919",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524255784,
        "parent_id": "2839f103-9f09-4747-ac01-5c818f2997b6",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "typedef returnType(*name)(arguments);                       // All\nusing name = returnType(*)(arguments);                      // \u003c= C++11\nusing name = std::add_pointer\u003creturnType(arguments)\u003e::type; // \u003c= C++11\nusing name = std::add_pointer_t\u003creturnType(arguments)\u003e;     // \u003c= C++14"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "typedef returnType(*name)(arguments);                       // All\nusing name = returnType(*)(arguments);                      // \u003c= C++11\nusing name = std::add_pointer\u003creturnType(arguments)\u003e::type; // \u003c= C++11\nusing name = std::add_pointer_t\u003creturnType(arguments)\u003e;     // \u003c= C++14",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524255784,
        "id": "bc65d740-2efa-4771-aa5b-eb72db57b07b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524255784,
        "parent_id": "2839f103-9f09-4747-ac01-5c818f2997b6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If we would be using a function pointer for writing our own vector sort, it would look like:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If we would be using a function pointer for writing our own vector sort, it would look like:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524255784,
        "id": "23ed18f4-cf11-46f1-817e-38a95f60b955",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524255784,
        "parent_id": "2839f103-9f09-4747-ac01-5c818f2997b6",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "using LessThanFunctionPtr = std::add_pointer_t\u003cbool(int, int)\u003e;\nvoid sortVectorInt(std::vector\u003cint\u003e\u0026v, LessThanFunctionPtr lessThan) {\n    if (v.size() \u003c 2)\n        return;\n    if (v.size() == 2) {\n        if (!lessThan(v.front(), v.back())) // Invoke the function pointer\n            std::swap(v.front(), v.back());\n        return;\n    }\n    std::sort(v, lessThan);\n}\n\nbool lessThanInt(int lhs, int rhs) { return lhs \u003c rhs; }\nsortVectorInt(vectorOfInt, lessThanInt); // Passes the pointer to a free function\n\nstruct GreaterThanInt {\n   static bool cmp(int lhs, int rhs) { return lhs \u003e rhs; }\n};\nsortVectorInt(vectorOfInt, \u0026GreaterThanInt::cmp); // Passes the pointer to a static member function"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "using LessThanFunctionPtr = std::add_pointer_t\u003cbool(int, int)\u003e;\nvoid sortVectorInt(std::vector\u003cint\u003e\u0026v, LessThanFunctionPtr lessThan) {\n    if (v.size() \u003c 2)\n        return;\n    if (v.size() == 2) {\n        if (!lessThan(v.front(), v.back())) // Invoke the function pointer\n            std::swap(v.front(), v.back());\n        return;\n    }\n    std::sort(v, lessThan);\n}\n\nbool lessThanInt(int lhs, int rhs) { return lhs \u003c rhs; }\nsortVectorInt(vectorOfInt, lessThanInt); // Passes the pointer to a free function\n\nstruct GreaterThanInt {\n   static bool cmp(int lhs, int rhs) { return lhs \u003e rhs; }\n};\nsortVectorInt(vectorOfInt, \u0026GreaterThanInt::cmp); // Passes the pointer to a static member function",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524255785,
        "id": "192df4e4-4d94-4bed-9cc2-1f062799227a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524255785,
        "parent_id": "2839f103-9f09-4747-ac01-5c818f2997b6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Alternatively, we could have invoked the function pointer one of following ways:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Alternatively, we could have invoked the function pointer one of following ways:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524255786,
        "id": "90ecedb7-4436-4edd-b26a-85b1615cc489",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524255786,
        "parent_id": "2839f103-9f09-4747-ac01-5c818f2997b6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "(*lessThan)(v.front(), v.back()) // All",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "(*lessThan)(v.front(), v.back()) // All",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524255786,
        "id": "4a258b7f-9a5f-4e8d-9459-bee38ce0b2bc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524255786,
        "parent_id": "2839f103-9f09-4747-ac01-5c818f2997b6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "std::invoke(lessThan, v.front(), v.back()) // \u003c= C++17",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "std::invoke(lessThan, v.front(), v.back()) // \u003c= C++17",
            "AttrFlags": 2
          }
        ]
      }
    ],
    "title": "Function Pointers",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}