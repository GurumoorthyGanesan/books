{
  "ID": "bfddbd52-3e87-41e6-b451-74a2cfb7a4d2",
  "Root": {
    "alive": true,
    "content": [
      "08faf977-1574-427a-9aac-5dd5c12aab44",
      "a77bd230-07b9-45c8-b59c-8c7f1ad3a939",
      "75504b12-8b5b-4a0b-997a-6b0586d23190",
      "1cef2b7d-6a9c-4f56-84cb-5f4ef31a7276",
      "d5fac929-379d-46b3-b53b-a4aad45420e0",
      "ded84ad0-c816-429e-801c-b3c1dd0b3b29",
      "dd483842-8d1e-4926-acb4-e6bbbcb60b1d",
      "13891905-c47d-4b92-961f-9afa54616cb5",
      "7340d4f5-40d6-4c54-9952-d28f2e72b965"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550525497796,
    "id": "bfddbd52-3e87-41e6-b451-74a2cfb7a4d2",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550525497796,
    "parent_id": "ecf8cc46-eac4-4c36-a422-ed2cca054451",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "030 Input stream manipulators"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525497792,
        "id": "08faf977-1574-427a-9aac-5dd5c12aab44",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525497792,
        "parent_id": "bfddbd52-3e87-41e6-b451-74a2cfb7a4d2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "std::ws",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://en.cppreference.com/w/cpp/io/manip/ws"
                ]
              ]
            ],
            [
              " - consumes leading whitespaces in input stream. It different from "
            ],
            [
              "std::skipws",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "std::ws",
            "AttrFlags": 2,
            "Link": "http://en.cppreference.com/w/cpp/io/manip/ws"
          },
          {
            "Text": " - consumes leading whitespaces in input stream. It different from "
          },
          {
            "Text": "std::skipws",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525497793,
        "id": "a77bd230-07b9-45c8-b59c-8c7f1ad3a939",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525497793,
        "parent_id": "bfddbd52-3e87-41e6-b451-74a2cfb7a4d2",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003csstream\u003e\n...\n\nstd::string str;\nstd::istringstream(\"  \\v\\n\\r\\t    Wow!There   is no whitespaces!\") \u003e\u003e std::ws \u003e\u003e str;\nstd::cout \u003c\u003c str;\n// Output: Wow!There   is no whitespaces!"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003csstream\u003e\n...\n\nstd::string str;\nstd::istringstream(\"  \\v\\n\\r\\t    Wow!There   is no whitespaces!\") \u003e\u003e std::ws \u003e\u003e str;\nstd::cout \u003c\u003c str;\n// Output: Wow!There   is no whitespaces!",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525497794,
        "id": "75504b12-8b5b-4a0b-997a-6b0586d23190",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525497794,
        "parent_id": "bfddbd52-3e87-41e6-b451-74a2cfb7a4d2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "std::get_money(mon[, intl])",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://en.cppreference.com/w/cpp/io/manip/get_money"
                ]
              ]
            ],
            [
              " [C++11]. In an expression "
            ],
            [
              "in \u003e\u003e std::get_money(mon, intl)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " parses the character input as a monetary value, as specified by the "
            ],
            [
              "std::money_get",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://en.cppreference.com/w/cpp/locale/money_get"
                ]
              ]
            ],
            [
              " facet of the locale currently imbued in "
            ],
            [
              "in",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", and stores the value in "
            ],
            [
              "mon",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (of "
            ],
            [
              "long double",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "std::basic_string",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " type). Manipulator expects "
            ],
            [
              "required",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " international currency strings if "
            ],
            [
              "intl",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is "
            ],
            [
              "true",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", expects "
            ],
            [
              "optional",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " currency symbols otherwise."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "std::get_money(mon[, intl])",
            "AttrFlags": 2,
            "Link": "http://en.cppreference.com/w/cpp/io/manip/get_money"
          },
          {
            "Text": " [C++11]. In an expression "
          },
          {
            "Text": "in \u003e\u003e std::get_money(mon, intl)",
            "AttrFlags": 2
          },
          {
            "Text": " parses the character input as a monetary value, as specified by the "
          },
          {
            "Text": "std::money_get",
            "AttrFlags": 2,
            "Link": "http://en.cppreference.com/w/cpp/locale/money_get"
          },
          {
            "Text": " facet of the locale currently imbued in "
          },
          {
            "Text": "in",
            "AttrFlags": 2
          },
          {
            "Text": ", and stores the value in "
          },
          {
            "Text": "mon",
            "AttrFlags": 2
          },
          {
            "Text": " (of "
          },
          {
            "Text": "long double",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "std::basic_string",
            "AttrFlags": 2
          },
          {
            "Text": " type). Manipulator expects "
          },
          {
            "Text": "required",
            "AttrFlags": 4
          },
          {
            "Text": " international currency strings if "
          },
          {
            "Text": "intl",
            "AttrFlags": 2
          },
          {
            "Text": " is "
          },
          {
            "Text": "true",
            "AttrFlags": 2
          },
          {
            "Text": ", expects "
          },
          {
            "Text": "optional",
            "AttrFlags": 4
          },
          {
            "Text": " currency symbols otherwise."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525497794,
        "id": "1cef2b7d-6a9c-4f56-84cb-5f4ef31a7276",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525497794,
        "parent_id": "bfddbd52-3e87-41e6-b451-74a2cfb7a4d2",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003csstream\u003e\n#include \u003clocale\u003e\n...\n \nstd::istringstream in(\"$1,234.56 2.22 USD  3.33\");\nlong double v1, v2;\nstd::string v3;\n\nin.imbue(std::locale(\"en_US.UTF-8\"));\nin \u003e\u003e std::get_money(v1) \u003e\u003e std::get_money(v2) \u003e\u003e std::get_money(v3, true);\nif (in) {"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003csstream\u003e\n#include \u003clocale\u003e\n...\n \nstd::istringstream in(\"$1,234.56 2.22 USD  3.33\");\nlong double v1, v2;\nstd::string v3;\n\nin.imbue(std::locale(\"en_US.UTF-8\"));\nin \u003e\u003e std::get_money(v1) \u003e\u003e std::get_money(v2) \u003e\u003e std::get_money(v3, true);\nif (in) {",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525497794,
        "id": "d5fac929-379d-46b3-b53b-a4aad45420e0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525497794,
        "parent_id": "bfddbd52-3e87-41e6-b451-74a2cfb7a4d2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "std::cout \u003c\u003c std::quoted(in.str()) \u003c\u003c “ parsed as: “ \u003c\u003c v1 \u003c\u003c “, “ \u003c\u003c v2 \u003c\u003c “, “ \u003c\u003c v3 \u003c\u003c ‘\\n’;"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "std::cout \u003c\u003c std::quoted(in.str()) \u003c\u003c “ parsed as: “ \u003c\u003c v1 \u003c\u003c “, “ \u003c\u003c v2 \u003c\u003c “, “ \u003c\u003c v3 \u003c\u003c ‘\\n’;"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525497795,
        "id": "ded84ad0-c816-429e-801c-b3c1dd0b3b29",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525497795,
        "parent_id": "bfddbd52-3e87-41e6-b451-74a2cfb7a4d2",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "}\n// Output:\n// \"$1,234.56 2.22 USD  3.33\" parsed as: 123456, 222, 333"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "}\n// Output:\n// \"$1,234.56 2.22 USD  3.33\" parsed as: 123456, 222, 333",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525497795,
        "id": "dd483842-8d1e-4926-acb4-e6bbbcb60b1d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525497795,
        "parent_id": "bfddbd52-3e87-41e6-b451-74a2cfb7a4d2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "std::get_time(tmb, fmt)",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://en.cppreference.com/w/cpp/io/manip/get_time"
                ]
              ]
            ],
            [
              " [C++11] - parses a date/time value stored in "
            ],
            [
              "tmb",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " of specified format "
            ],
            [
              "fmt",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". "
            ],
            [
              "tmb",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " - valid pointer to the "
            ],
            [
              "const std::tm*",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " object where the result will be stored. "
            ],
            [
              "fmt",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " - pointer to a null-terminated string "
            ],
            [
              "const CharT*",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " specifying the conversion format."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "std::get_time(tmb, fmt)",
            "AttrFlags": 2,
            "Link": "http://en.cppreference.com/w/cpp/io/manip/get_time"
          },
          {
            "Text": " [C++11] - parses a date/time value stored in "
          },
          {
            "Text": "tmb",
            "AttrFlags": 2
          },
          {
            "Text": " of specified format "
          },
          {
            "Text": "fmt",
            "AttrFlags": 2
          },
          {
            "Text": ". "
          },
          {
            "Text": "tmb",
            "AttrFlags": 2
          },
          {
            "Text": " - valid pointer to the "
          },
          {
            "Text": "const std::tm*",
            "AttrFlags": 2
          },
          {
            "Text": " object where the result will be stored. "
          },
          {
            "Text": "fmt",
            "AttrFlags": 2
          },
          {
            "Text": " - pointer to a null-terminated string "
          },
          {
            "Text": "const CharT*",
            "AttrFlags": 2
          },
          {
            "Text": " specifying the conversion format."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525497795,
        "id": "13891905-c47d-4b92-961f-9afa54616cb5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525497795,
        "parent_id": "bfddbd52-3e87-41e6-b451-74a2cfb7a4d2",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003csstream\u003e\n#include \u003clocale\u003e\n...\n\nstd::tm t = {};\nstd::istringstream ss(\"2011-Februar-18 23:12:34\");\n\nss.imbue(std::locale(\"de_DE.utf-8\"));\nss \u003e\u003e std::get_time(\u0026t, \"%Y-%b-%d %H:%M:%S\");\nif (ss.fail()) {\n    std::cout \u003c\u003c \"Parse failed\\n\";\n}\nelse {\n    std::cout \u003c\u003c std::put_time(\u0026t, \"%c\") \u003c\u003c '\\n';\n}\n// Possible output:\n// Sun Feb 18 23:12:34 2011"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003csstream\u003e\n#include \u003clocale\u003e\n...\n\nstd::tm t = {};\nstd::istringstream ss(\"2011-Februar-18 23:12:34\");\n\nss.imbue(std::locale(\"de_DE.utf-8\"));\nss \u003e\u003e std::get_time(\u0026t, \"%Y-%b-%d %H:%M:%S\");\nif (ss.fail()) {\n    std::cout \u003c\u003c \"Parse failed\\n\";\n}\nelse {\n    std::cout \u003c\u003c std::put_time(\u0026t, \"%c\") \u003c\u003c '\\n';\n}\n// Possible output:\n// Sun Feb 18 23:12:34 2011",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525497796,
        "id": "7340d4f5-40d6-4c54-9952-d28f2e72b965",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525497796,
        "parent_id": "bfddbd52-3e87-41e6-b451-74a2cfb7a4d2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For more information see the link above."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For more information see the link above."
          }
        ]
      }
    ],
    "title": "030 Input stream manipulators"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}