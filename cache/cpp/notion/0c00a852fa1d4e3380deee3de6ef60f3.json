{
  "ID": "0c00a852-fa1d-4e33-80de-ee3de6ef60f3",
  "Root": {
    "alive": true,
    "content": [
      "21eaa073-7a99-44fb-bac4-8ee5bdd36933",
      "60723989-fa93-4d8a-a8cc-9c54f5079f52",
      "e471c352-f0ee-4b4a-83a4-a2d47353acbd",
      "3760fed1-64f0-4c55-9648-ec7299a9b582",
      "eee09179-224c-4075-9fb3-89a22f725a7d",
      "301bd80a-72db-43bf-a1a9-74d90a33fb51",
      "f792a999-e0f3-449b-8ac8-ab364574ac35",
      "6fc6783d-04fd-4faa-996a-4eec27fb3d8f",
      "1c326a78-9d30-4995-99a2-ea0120229490",
      "433b1592-5897-403e-a499-7586448bc953",
      "7f25c1b7-ae3f-4993-ac04-a644e6c513bf",
      "df436035-8d1d-4b05-a23d-bb213dbf95bd",
      "a5abac24-2b53-4b2c-9d79-189e4818fc6d",
      "822fb723-92e7-448a-8821-87a0b8143690",
      "62ef7c0b-f8a2-40dc-95b6-b98c1748b427",
      "de1dbdde-8905-4e31-90a9-e6eb0992e8af"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522049471,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "0c00a852-fa1d-4e33-80de-ee3de6ef60f3",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552343820000,
    "parent_id": "8655f492-9c51-4f68-ad52-8b6c1e02a277",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Inserting elements"
        ]
      ]
    },
    "type": "page",
    "version": 16,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522049464,
        "id": "21eaa073-7a99-44fb-bac4-8ee5bdd36933",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522049464,
        "parent_id": "0c00a852-fa1d-4e33-80de-ee3de6ef60f3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Appending an element at the end of a vector (by copying/moving):"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Appending an element at the end of a vector (by copying/moving):"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522049466,
        "id": "60723989-fa93-4d8a-a8cc-9c54f5079f52",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552343760000,
        "parent_id": "0c00a852-fa1d-4e33-80de-ee3de6ef60f3",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "struct Point {\n  double x, y;\n  Point(double x, double y) : x(x), y(y) {}\n};\nstd::vector\u003cPoint\u003e v;\nPoint p(10.0, 2.0);\nv.push_back(p);  // p is copied into the vector."
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "struct Point {\n  double x, y;\n  Point(double x, double y) : x(x), y(y) {}\n};\nstd::vector\u003cPoint\u003e v;\nPoint p(10.0, 2.0);\nv.push_back(p);  // p is copied into the vector.",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522049467,
        "id": "e471c352-f0ee-4b4a-83a4-a2d47353acbd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522049467,
        "parent_id": "0c00a852-fa1d-4e33-80de-ee3de6ef60f3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Appending an element at the end of a vector by constructing the element in place:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Appending an element at the end of a vector by constructing the element in place:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522049467,
        "id": "3760fed1-64f0-4c55-9648-ec7299a9b582",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552343820000,
        "parent_id": "0c00a852-fa1d-4e33-80de-ee3de6ef60f3",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "std::vector\u003cPoint\u003e v;\nv.emplace_back(10.0, 2.0); // The arguments are passed to the constructor of the\n                           // given type (here Point). The object is constructed\n                           // in the vector, avoiding a copy."
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "std::vector\u003cPoint\u003e v;\nv.emplace_back(10.0, 2.0); // The arguments are passed to the constructor of the\n                           // given type (here Point). The object is constructed\n                           // in the vector, avoiding a copy.",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522049467,
        "id": "eee09179-224c-4075-9fb3-89a22f725a7d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522049467,
        "parent_id": "0c00a852-fa1d-4e33-80de-ee3de6ef60f3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note that "
            ],
            [
              "std::vector",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " does "
            ],
            [
              "not",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " have a "
            ],
            [
              "push_front()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " member function due to performance reasons. Adding an element at the beginning causes all existing elements in the vector to be moved. If you want to frequently insert elements at the beginning of your container, then you might want to use "
            ],
            [
              "std::list",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "std::deque",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " instead."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note that "
          },
          {
            "Text": "std::vector",
            "AttrFlags": 2
          },
          {
            "Text": " does "
          },
          {
            "Text": "not",
            "AttrFlags": 4
          },
          {
            "Text": " have a "
          },
          {
            "Text": "push_front()",
            "AttrFlags": 2
          },
          {
            "Text": " member function due to performance reasons. Adding an element at the beginning causes all existing elements in the vector to be moved. If you want to frequently insert elements at the beginning of your container, then you might want to use "
          },
          {
            "Text": "std::list",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "std::deque",
            "AttrFlags": 2
          },
          {
            "Text": " instead."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522049467,
        "id": "301bd80a-72db-43bf-a1a9-74d90a33fb51",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522049467,
        "parent_id": "0c00a852-fa1d-4e33-80de-ee3de6ef60f3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Inserting an element at any position of a vector:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Inserting an element at any position of a vector:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522049467,
        "id": "f792a999-e0f3-449b-8ac8-ab364574ac35",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552343820000,
        "parent_id": "0c00a852-fa1d-4e33-80de-ee3de6ef60f3",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "std::vector\u003cint\u003e v{ 1, 2, 3 };\nv.insert(v.begin(), 9);          // v now contains {9, 1, 2, 3}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "std::vector\u003cint\u003e v{ 1, 2, 3 };\nv.insert(v.begin(), 9);          // v now contains {9, 1, 2, 3}",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522049467,
        "id": "6fc6783d-04fd-4faa-996a-4eec27fb3d8f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522049467,
        "parent_id": "0c00a852-fa1d-4e33-80de-ee3de6ef60f3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Inserting an element at any position of a vector by constructing the element in place:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Inserting an element at any position of a vector by constructing the element in place:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522049468,
        "id": "1c326a78-9d30-4995-99a2-ea0120229490",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552343820000,
        "parent_id": "0c00a852-fa1d-4e33-80de-ee3de6ef60f3",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "std::vector\u003cint\u003e v{ 1, 2, 3 };\nv.emplace(v.begin()+1, 9);     // v now contains {1, 9, 2, 3}"
            ]
          ]
        },
        "type": "code",
        "version": 4,
        "code": "std::vector\u003cint\u003e v{ 1, 2, 3 };\nv.emplace(v.begin()+1, 9);     // v now contains {1, 9, 2, 3}",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522049468,
        "id": "433b1592-5897-403e-a499-7586448bc953",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522049468,
        "parent_id": "0c00a852-fa1d-4e33-80de-ee3de6ef60f3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Inserting another vector at any position of the vector:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Inserting another vector at any position of the vector:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522049468,
        "id": "7f25c1b7-ae3f-4993-ac04-a644e6c513bf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552343820000,
        "parent_id": "0c00a852-fa1d-4e33-80de-ee3de6ef60f3",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "std::vector\u003cint\u003e v(4);      // contains: 0, 0, 0, 0\nstd::vector\u003cint\u003e v2(2, 10); // contains: 10, 10\nv.insert(v.begin()+2, v2.begin(), v2.end()); // contains: 0, 0, 10, 10, 0, 0"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "std::vector\u003cint\u003e v(4);      // contains: 0, 0, 0, 0\nstd::vector\u003cint\u003e v2(2, 10); // contains: 10, 10\nv.insert(v.begin()+2, v2.begin(), v2.end()); // contains: 0, 0, 10, 10, 0, 0",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522049468,
        "id": "df436035-8d1d-4b05-a23d-bb213dbf95bd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522049468,
        "parent_id": "0c00a852-fa1d-4e33-80de-ee3de6ef60f3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Inserting an array at any position of a vector:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Inserting an array at any position of a vector:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522049468,
        "id": "a5abac24-2b53-4b2c-9d79-189e4818fc6d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552343820000,
        "parent_id": "0c00a852-fa1d-4e33-80de-ee3de6ef60f3",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "std::vector\u003cint\u003e v(4); // contains: 0, 0, 0, 0\nint a [] = {1, 2, 3}; // contains: 1, 2, 3\nv.insert(v.begin()+1, a, a+sizeof(a)/sizeof(a[0])); // contains: 0, 1, 2, 3, 0, 0, 0"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "std::vector\u003cint\u003e v(4); // contains: 0, 0, 0, 0\nint a [] = {1, 2, 3}; // contains: 1, 2, 3\nv.insert(v.begin()+1, a, a+sizeof(a)/sizeof(a[0])); // contains: 0, 1, 2, 3, 0, 0, 0",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522049470,
        "id": "822fb723-92e7-448a-8821-87a0b8143690",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522049470,
        "parent_id": "0c00a852-fa1d-4e33-80de-ee3de6ef60f3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Use "
            ],
            [
              "reserve()",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://www.cplusplus.com/reference/vector/vector/reserve/"
                ]
              ]
            ],
            [
              " before inserting multiple elements if resulting vector size is known beforehand to avoid multiple reallocations (see "
            ],
            [
              "vector size and capacity",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%2B%2B/511/stdvector/3694/vector-size-and-capacity#t=201607270933320554687"
                ]
              ]
            ],
            [
              "):"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Use "
          },
          {
            "Text": "reserve()",
            "AttrFlags": 2,
            "Link": "http://www.cplusplus.com/reference/vector/vector/reserve/"
          },
          {
            "Text": " before inserting multiple elements if resulting vector size is known beforehand to avoid multiple reallocations (see "
          },
          {
            "Text": "vector size and capacity",
            "Link": "http://stackoverflow.com/documentation/c%2B%2B/511/stdvector/3694/vector-size-and-capacity#t=201607270933320554687"
          },
          {
            "Text": "):"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522049470,
        "id": "62ef7c0b-f8a2-40dc-95b6-b98c1748b427",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552343820000,
        "parent_id": "0c00a852-fa1d-4e33-80de-ee3de6ef60f3",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "std::vector\u003cint\u003e v;\nv.reserve(100);\nfor (int i = 0; i \u003c 100; ++i) {\n    v.emplace_back(i);\n}"
            ]
          ]
        },
        "type": "code",
        "version": 8,
        "code": "std::vector\u003cint\u003e v;\nv.reserve(100);\nfor (int i = 0; i \u003c 100; ++i) {\n    v.emplace_back(i);\n}",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522049471,
        "id": "de1dbdde-8905-4e31-90a9-e6eb0992e8af",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522049471,
        "parent_id": "0c00a852-fa1d-4e33-80de-ee3de6ef60f3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Be sure to not make the mistake of calling "
            ],
            [
              "resize()",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://www.cplusplus.com/reference/vector/vector/resize/"
                ]
              ]
            ],
            [
              " in this case, or you will inadvertently create a vector with 200 elements where only the latter one hundred will have the value you intended."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Be sure to not make the mistake of calling "
          },
          {
            "Text": "resize()",
            "AttrFlags": 2,
            "Link": "http://www.cplusplus.com/reference/vector/vector/resize/"
          },
          {
            "Text": " in this case, or you will inadvertently create a vector with 200 elements where only the latter one hundred will have the value you intended."
          }
        ]
      }
    ],
    "title": "Inserting elements",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}