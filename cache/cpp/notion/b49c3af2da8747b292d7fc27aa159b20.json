{
  "ID": "b49c3af2-da87-47b2-92d7-fc27aa159b20",
  "Root": {
    "alive": true,
    "content": [
      "6bf2251b-e5f4-4b84-9d0f-e5cffd54da93",
      "53df1177-077f-4f17-943e-e567d0660dba",
      "5c47cf8c-0063-4fdc-a330-a1767a20212a",
      "c9598d09-9075-4d35-9d7e-5486e075b4ac",
      "eb51a423-d753-4cf9-8456-ef8df1180887",
      "9f3adf75-8f7c-4171-8914-347ea7ca6d78",
      "064e4daf-8768-4383-ac1f-ccdb2a69925e",
      "e3ea3114-0880-416b-97eb-451bac345e41",
      "67b3def9-17a7-4292-8f28-3b5318b21120",
      "88351f0e-d135-4b36-aa8f-90130322296f",
      "4349968f-12fb-419f-b9e5-12ae6d5422b5",
      "e2fe7c55-20c0-4dbd-93d1-cbc80bb2990e",
      "a770718f-6e4c-4dcd-9317-2b1381b1c374",
      "a1669170-4ded-4a76-802e-7e4b4b144302",
      "6f1de6d4-3820-4483-96ee-edcea0b83e68",
      "0fb66fb6-03e5-42d8-b0e1-fdfda3fcd0fa",
      "3adf332c-59d8-4fe5-b626-f4a451993cde",
      "fce357c9-ebe5-48d7-a788-669ce1254879",
      "f932011b-5d31-42b6-bdba-ac67d11e1bf3",
      "470baaf0-9ed4-434a-9a59-4b336f888ab5",
      "742bf58b-3f5e-4289-a45b-5b32f4cadc77",
      "1b9d834d-6a8b-4b0b-b31d-5e5ab6032738",
      "77a27184-a6a5-4701-91e9-65f72fda7c5d",
      "22be001d-8e25-48ce-bc8e-f74b2cb77684",
      "e3ef5b25-5c3f-48cb-b1a0-91eaf9d3d14e",
      "7e9f96bc-5d99-46aa-9e6f-ae15f3de514c",
      "9daed7c8-8c73-4a58-9293-d63e03e6c762",
      "92990c85-75b8-421b-b0ed-2ff01a5ff3f2",
      "bf9fd5c8-8e91-4a00-9661-a4daa94fcd2d",
      "6ebdb874-6745-4fd3-884f-8dd6d3e0ac51",
      "a565981d-2d89-4dc8-a0b0-9e7e8f6571f7",
      "cbd0aaf8-5fcc-4053-83fa-6c61000bb604",
      "d71b0a20-c5df-498f-92e6-6cd83683d525"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522046555,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "b49c3af2-da87-47b2-92d7-fc27aa159b20",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550655780000,
    "parent_id": "8655f492-9c51-4f68-ad52-8b6c1e02a277",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Deleting Elements"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522046541,
        "id": "6bf2251b-e5f4-4b84-9d0f-e5cffd54da93",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522046541,
        "parent_id": "b49c3af2-da87-47b2-92d7-fc27aa159b20",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Deleting the last element:"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Deleting the last element:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522046544,
        "id": "53df1177-077f-4f17-943e-e567d0660dba",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522046544,
        "parent_id": "b49c3af2-da87-47b2-92d7-fc27aa159b20",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "std::vector\u003cint\u003e v{ 1, 2, 3 };\nv.pop_back();                           // v becomes {1, 2}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "std::vector\u003cint\u003e v{ 1, 2, 3 };\nv.pop_back();                           // v becomes {1, 2}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522046544,
        "id": "5c47cf8c-0063-4fdc-a330-a1767a20212a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522046544,
        "parent_id": "b49c3af2-da87-47b2-92d7-fc27aa159b20",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Deleting all elements:"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Deleting all elements:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522046544,
        "id": "c9598d09-9075-4d35-9d7e-5486e075b4ac",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522046544,
        "parent_id": "b49c3af2-da87-47b2-92d7-fc27aa159b20",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "std::vector\u003cint\u003e v{ 1, 2, 3 };\nv.clear();                              // v becomes an empty vector"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "std::vector\u003cint\u003e v{ 1, 2, 3 };\nv.clear();                              // v becomes an empty vector",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522046544,
        "id": "eb51a423-d753-4cf9-8456-ef8df1180887",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522046544,
        "parent_id": "b49c3af2-da87-47b2-92d7-fc27aa159b20",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Deleting element by index:"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Deleting element by index:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522046544,
        "id": "9f3adf75-8f7c-4171-8914-347ea7ca6d78",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522046544,
        "parent_id": "b49c3af2-da87-47b2-92d7-fc27aa159b20",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "std::vector\u003cint\u003e v{ 1, 2, 3, 4, 5, 6 };\nv.erase(v.begin() + 3);                 // v becomes {1, 2, 3, 5, 6}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "std::vector\u003cint\u003e v{ 1, 2, 3, 4, 5, 6 };\nv.erase(v.begin() + 3);                 // v becomes {1, 2, 3, 5, 6}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522046546,
        "id": "064e4daf-8768-4383-ac1f-ccdb2a69925e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522046546,
        "parent_id": "b49c3af2-da87-47b2-92d7-fc27aa159b20",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note:",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " For a "
            ],
            [
              "vector",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " deleting an element which is not the last element, all elements beyond the deleted element have to be copied or moved to fill the gap, see the note below and "
            ],
            [
              "std::list",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%2B%2B/783/standard-library-containers/2688/stdlist#t=201607251402013099142"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note:",
            "AttrFlags": 4
          },
          {
            "Text": " For a "
          },
          {
            "Text": "vector",
            "AttrFlags": 2
          },
          {
            "Text": " deleting an element which is not the last element, all elements beyond the deleted element have to be copied or moved to fill the gap, see the note below and "
          },
          {
            "Text": "std::list",
            "Link": "http://stackoverflow.com/documentation/c%2B%2B/783/standard-library-containers/2688/stdlist#t=201607251402013099142"
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522046546,
        "id": "e3ea3114-0880-416b-97eb-451bac345e41",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522046546,
        "parent_id": "b49c3af2-da87-47b2-92d7-fc27aa159b20",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Deleting all elements in a range:"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Deleting all elements in a range:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522046546,
        "id": "67b3def9-17a7-4292-8f28-3b5318b21120",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522046546,
        "parent_id": "b49c3af2-da87-47b2-92d7-fc27aa159b20",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "std::vector\u003cint\u003e v{ 1, 2, 3, 4, 5, 6 };\nv.erase(v.begin() + 1, v.begin() + 5);  // v becomes {1, 6}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "std::vector\u003cint\u003e v{ 1, 2, 3, 4, 5, 6 };\nv.erase(v.begin() + 1, v.begin() + 5);  // v becomes {1, 6}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522046547,
        "id": "88351f0e-d135-4b36-aa8f-90130322296f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522046547,
        "parent_id": "b49c3af2-da87-47b2-92d7-fc27aa159b20",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note:",
              [
                [
                  "b"
                ],
                [
                  "i"
                ]
              ]
            ],
            [
              " The above methods do not change the capacity of the vector, only the size. See "
            ],
            [
              "Vector Size and Capacity",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%2B%2B/511/stdvector/3694/vector-size-and-capacity#t=201608311621108011517"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note:",
            "AttrFlags": 5
          },
          {
            "Text": " The above methods do not change the capacity of the vector, only the size. See "
          },
          {
            "Text": "Vector Size and Capacity",
            "Link": "http://stackoverflow.com/documentation/c%2B%2B/511/stdvector/3694/vector-size-and-capacity#t=201608311621108011517"
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522046549,
        "id": "4349968f-12fb-419f-b9e5-12ae6d5422b5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522046549,
        "parent_id": "b49c3af2-da87-47b2-92d7-fc27aa159b20",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "erase",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://en.cppreference.com/w/cpp/container/vector/erase"
                ]
              ]
            ],
            [
              " method, which removes a range of elements, is often used as a part of the "
            ],
            [
              "erase-remove",
              [
                [
                  "b"
                ],
                [
                  "a",
                  "https://en.wikipedia.org/wiki/Erase%E2%80%93remove_idiom"
                ]
              ]
            ],
            [
              " idiom. That is, first "
            ],
            [
              "std::remove",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://en.cppreference.com/w/cpp/algorithm/remove"
                ]
              ]
            ],
            [
              " moves some elements to the end of the vector, and then "
            ],
            [
              "erase",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " chops them off. This is a relatively inefficient operation for any indices less than the last index of the vector because all elements after the erased segments must be relocated to new positions. For speed critical applications that require efficient removal of arbitrary elements in a container, see "
            ],
            [
              "std::list",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%2B%2B/783/standard-library-containers/2688/stdlist#t=201607251402013099142"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "erase",
            "AttrFlags": 2,
            "Link": "http://en.cppreference.com/w/cpp/container/vector/erase"
          },
          {
            "Text": " method, which removes a range of elements, is often used as a part of the "
          },
          {
            "Text": "erase-remove",
            "AttrFlags": 1,
            "Link": "https://en.wikipedia.org/wiki/Erase%E2%80%93remove_idiom"
          },
          {
            "Text": " idiom. That is, first "
          },
          {
            "Text": "std::remove",
            "AttrFlags": 2,
            "Link": "http://en.cppreference.com/w/cpp/algorithm/remove"
          },
          {
            "Text": " moves some elements to the end of the vector, and then "
          },
          {
            "Text": "erase",
            "AttrFlags": 2
          },
          {
            "Text": " chops them off. This is a relatively inefficient operation for any indices less than the last index of the vector because all elements after the erased segments must be relocated to new positions. For speed critical applications that require efficient removal of arbitrary elements in a container, see "
          },
          {
            "Text": "std::list",
            "Link": "http://stackoverflow.com/documentation/c%2B%2B/783/standard-library-containers/2688/stdlist#t=201607251402013099142"
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522046549,
        "id": "e2fe7c55-20c0-4dbd-93d1-cbc80bb2990e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522046549,
        "parent_id": "b49c3af2-da87-47b2-92d7-fc27aa159b20",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Deleting elements by value:"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Deleting elements by value:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522046549,
        "id": "a770718f-6e4c-4dcd-9317-2b1381b1c374",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522046549,
        "parent_id": "b49c3af2-da87-47b2-92d7-fc27aa159b20",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "std::vector\u003cint\u003e v{ 1, 1, 2, 2, 3, 3 };\nint value_to_remove = 2;\nv.erase(std::remove(v.begin(), v.end(), value_to_remove), v.end()); // v becomes {1, 1, 3, 3}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "std::vector\u003cint\u003e v{ 1, 1, 2, 2, 3, 3 };\nint value_to_remove = 2;\nv.erase(std::remove(v.begin(), v.end(), value_to_remove), v.end()); // v becomes {1, 1, 3, 3}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522046549,
        "id": "a1669170-4ded-4a76-802e-7e4b4b144302",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522046549,
        "parent_id": "b49c3af2-da87-47b2-92d7-fc27aa159b20",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Deleting elements by condition:"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Deleting elements by condition:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522046549,
        "id": "6f1de6d4-3820-4483-96ee-edcea0b83e68",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522046549,
        "parent_id": "b49c3af2-da87-47b2-92d7-fc27aa159b20",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// std::remove_if needs a function, that takes a vector element as argument and returns true, \n// if the element shall be removed\nbool _predicate(const int\u0026 element) {\n    return (element \u003e 3); // This will cause all elements to be deleted that are larger than 3\n}\n...\nstd::vector\u003cint\u003e v{ 1, 2, 3, 4, 5, 6 };\nv.erase(std::remove_if(v.begin(), v.end(), _predicate), v.end()); // v becomes {1, 2, 3}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// std::remove_if needs a function, that takes a vector element as argument and returns true, \n// if the element shall be removed\nbool _predicate(const int\u0026 element) {\n    return (element \u003e 3); // This will cause all elements to be deleted that are larger than 3\n}\n...\nstd::vector\u003cint\u003e v{ 1, 2, 3, 4, 5, 6 };\nv.erase(std::remove_if(v.begin(), v.end(), _predicate), v.end()); // v becomes {1, 2, 3}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522046550,
        "id": "0fb66fb6-03e5-42d8-b0e1-fdfda3fcd0fa",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522046550,
        "parent_id": "b49c3af2-da87-47b2-92d7-fc27aa159b20",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Deleting elements by lambda, without creating additional predicate function"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Deleting elements by lambda, without creating additional predicate function"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522046550,
        "id": "3adf332c-59d8-4fe5-b626-f4a451993cde",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522046550,
        "parent_id": "b49c3af2-da87-47b2-92d7-fc27aa159b20",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "std::vector\u003cint\u003e v{ 1, 2, 3, 4, 5, 6 };\nv.erase(std::remove_if(v.begin(), v.end(),\n     [](auto\u0026 element){return element \u003e 3;} ), v.end()\n);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "std::vector\u003cint\u003e v{ 1, 2, 3, 4, 5, 6 };\nv.erase(std::remove_if(v.begin(), v.end(),\n     [](auto\u0026 element){return element \u003e 3;} ), v.end()\n);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522046550,
        "id": "fce357c9-ebe5-48d7-a788-669ce1254879",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522046550,
        "parent_id": "b49c3af2-da87-47b2-92d7-fc27aa159b20",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Deleting elements by condition from a loop:"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Deleting elements by condition from a loop:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522046550,
        "id": "f932011b-5d31-42b6-bdba-ac67d11e1bf3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522046550,
        "parent_id": "b49c3af2-da87-47b2-92d7-fc27aa159b20",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "std::vector\u003cint\u003e v{ 1, 2, 3, 4, 5, 6 };\nstd::vector\u003cint\u003e::iterator it = v.begin();\nwhile (it != v.end()) {\n    if (condition)\n        it = v.erase(it); // after erasing, 'it' will be set to the next element in v\n    else\n        ++it;             // manually set 'it' to the next element in v\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "std::vector\u003cint\u003e v{ 1, 2, 3, 4, 5, 6 };\nstd::vector\u003cint\u003e::iterator it = v.begin();\nwhile (it != v.end()) {\n    if (condition)\n        it = v.erase(it); // after erasing, 'it' will be set to the next element in v\n    else\n        ++it;             // manually set 'it' to the next element in v\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522046550,
        "id": "470baaf0-9ed4-434a-9a59-4b336f888ab5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522046550,
        "parent_id": "b49c3af2-da87-47b2-92d7-fc27aa159b20",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "While it is important "
            ],
            [
              "not",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " to increment "
            ],
            [
              "it",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in case of a deletion, you should consider using a different method when then erasing repeatedly in a loop. Consider "
            ],
            [
              "remove_if",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " for a more efficient way."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "While it is important "
          },
          {
            "Text": "not",
            "AttrFlags": 4
          },
          {
            "Text": " to increment "
          },
          {
            "Text": "it",
            "AttrFlags": 2
          },
          {
            "Text": " in case of a deletion, you should consider using a different method when then erasing repeatedly in a loop. Consider "
          },
          {
            "Text": "remove_if",
            "AttrFlags": 2
          },
          {
            "Text": " for a more efficient way."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522046550,
        "id": "742bf58b-3f5e-4289-a45b-5b32f4cadc77",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522046550,
        "parent_id": "b49c3af2-da87-47b2-92d7-fc27aa159b20",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Deleting elements by condition from a reverse loop:"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Deleting elements by condition from a reverse loop:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522046550,
        "id": "1b9d834d-6a8b-4b0b-b31d-5e5ab6032738",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522046550,
        "parent_id": "b49c3af2-da87-47b2-92d7-fc27aa159b20",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "std::vector\u003cint\u003e v{ -1, 0, 1, 2, 3, 4, 5, 6 };\ntypedef std::vector\u003cint\u003e::reverse_iterator rev_itr;\nrev_itr it = v.rbegin();\n\nwhile (it != v.rend()) { // after the loop only '0' will be in v\n    int value = *it;\n    if (value) {\n        ++it;\n        // See explanation below for the following line.\n        it = rev_itr(v.erase(it.base()));\n    } else\n        ++it;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "std::vector\u003cint\u003e v{ -1, 0, 1, 2, 3, 4, 5, 6 };\ntypedef std::vector\u003cint\u003e::reverse_iterator rev_itr;\nrev_itr it = v.rbegin();\n\nwhile (it != v.rend()) { // after the loop only '0' will be in v\n    int value = *it;\n    if (value) {\n        ++it;\n        // See explanation below for the following line.\n        it = rev_itr(v.erase(it.base()));\n    } else\n        ++it;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522046550,
        "id": "77a27184-a6a5-4701-91e9-65f72fda7c5d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522046550,
        "parent_id": "b49c3af2-da87-47b2-92d7-fc27aa159b20",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note some points for the preceding loop:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note some points for the preceding loop:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522046552,
        "id": "22be001d-8e25-48ce-bc8e-f74b2cb77684",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522046552,
        "parent_id": "b49c3af2-da87-47b2-92d7-fc27aa159b20",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Given a reverse iterator "
            ],
            [
              "it",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " pointing to some element, the method "
            ],
            [
              "base",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://en.cppreference.com/w/cpp/iterator/reverse_iterator/base"
                ]
              ]
            ],
            [
              " gives the regular (non-reverse) iterator pointing to the same element."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Given a reverse iterator "
          },
          {
            "Text": "it",
            "AttrFlags": 2
          },
          {
            "Text": " pointing to some element, the method "
          },
          {
            "Text": "base",
            "AttrFlags": 2,
            "Link": "http://en.cppreference.com/w/cpp/iterator/reverse_iterator/base"
          },
          {
            "Text": " gives the regular (non-reverse) iterator pointing to the same element."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522046552,
        "id": "e3ef5b25-5c3f-48cb-b1a0-91eaf9d3d14e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522046552,
        "parent_id": "b49c3af2-da87-47b2-92d7-fc27aa159b20",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "vector::erase(iterator)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " erases the element pointed to by an iterator, and returns an iterator to the element that followed the given element."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "vector::erase(iterator)",
            "AttrFlags": 2
          },
          {
            "Text": " erases the element pointed to by an iterator, and returns an iterator to the element that followed the given element."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522046552,
        "id": "7e9f96bc-5d99-46aa-9e6f-ae15f3de514c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522046552,
        "parent_id": "b49c3af2-da87-47b2-92d7-fc27aa159b20",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "reverse_iterator::reverse_iterator(iterator)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " constructs a reverse iterator from an iterator."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "reverse_iterator::reverse_iterator(iterator)",
            "AttrFlags": 2
          },
          {
            "Text": " constructs a reverse iterator from an iterator."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522046553,
        "id": "9daed7c8-8c73-4a58-9293-d63e03e6c762",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522046553,
        "parent_id": "b49c3af2-da87-47b2-92d7-fc27aa159b20",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Put altogether, the line "
            ],
            [
              "it = rev_itr(v.erase(it.base()))",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " says: take the reverse iterator "
            ],
            [
              "it",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", have "
            ],
            [
              "v",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " erase the element pointed by its regular iterator; take the resulting iterator, construct a reverse iterator from it, and assign it to the reverse iterator "
            ],
            [
              "it",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Put altogether, the line "
          },
          {
            "Text": "it = rev_itr(v.erase(it.base()))",
            "AttrFlags": 2
          },
          {
            "Text": " says: take the reverse iterator "
          },
          {
            "Text": "it",
            "AttrFlags": 2
          },
          {
            "Text": ", have "
          },
          {
            "Text": "v",
            "AttrFlags": 2
          },
          {
            "Text": " erase the element pointed by its regular iterator; take the resulting iterator, construct a reverse iterator from it, and assign it to the reverse iterator "
          },
          {
            "Text": "it",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522046553,
        "id": "92990c85-75b8-421b-b0ed-2ff01a5ff3f2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522046553,
        "parent_id": "b49c3af2-da87-47b2-92d7-fc27aa159b20",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522046553,
        "id": "bf9fd5c8-8e91-4a00-9661-a4daa94fcd2d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522046553,
        "parent_id": "b49c3af2-da87-47b2-92d7-fc27aa159b20",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Deleting all elements using "
            ],
            [
              "v.clear()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " does not free up memory ("
            ],
            [
              "capacity()",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://en.cppreference.com/w/cpp/container/vector/capacity"
                ]
              ]
            ],
            [
              " of the vector remains unchanged). To reclaim space, use:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Deleting all elements using "
          },
          {
            "Text": "v.clear()",
            "AttrFlags": 2
          },
          {
            "Text": " does not free up memory ("
          },
          {
            "Text": "capacity()",
            "AttrFlags": 2,
            "Link": "http://en.cppreference.com/w/cpp/container/vector/capacity"
          },
          {
            "Text": " of the vector remains unchanged). To reclaim space, use:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522046554,
        "id": "6ebdb874-6745-4fd3-884f-8dd6d3e0ac51",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522046554,
        "parent_id": "b49c3af2-da87-47b2-92d7-fc27aa159b20",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "std::vector\u003cint\u003e().swap(v);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "std::vector\u003cint\u003e().swap(v);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522046555,
        "id": "a565981d-2d89-4dc8-a0b0-9e7e8f6571f7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522046555,
        "parent_id": "b49c3af2-da87-47b2-92d7-fc27aa159b20",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "shrink_to_fit()",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://en.cppreference.com/w/cpp/container/vector/shrink_to_fit"
                ]
              ]
            ],
            [
              " frees up unused vector capacity:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "shrink_to_fit()",
            "AttrFlags": 2,
            "Link": "http://en.cppreference.com/w/cpp/container/vector/shrink_to_fit"
          },
          {
            "Text": " frees up unused vector capacity:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522046555,
        "id": "cbd0aaf8-5fcc-4053-83fa-6c61000bb604",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522046555,
        "parent_id": "b49c3af2-da87-47b2-92d7-fc27aa159b20",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "v.shrink_to_fit();"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "v.shrink_to_fit();",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522046555,
        "id": "d71b0a20-c5df-498f-92e6-6cd83683d525",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522046555,
        "parent_id": "b49c3af2-da87-47b2-92d7-fc27aa159b20",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "shrink_to_fit",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " does not guarantee to really reclaim space, but most current implementations do."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "shrink_to_fit",
            "AttrFlags": 2
          },
          {
            "Text": " does not guarantee to really reclaim space, but most current implementations do."
          }
        ]
      }
    ],
    "title": "Deleting Elements",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}