{
  "ID": "bbed177e-f72c-4822-9f3e-d8d6774591dd",
  "Root": {
    "alive": true,
    "content": [
      "d0a39d60-d899-431d-881f-0e626154701c",
      "baaad4d3-b3ba-4e66-af5c-608c8ec25e90",
      "1466fa04-b8e3-4196-b0c6-9c1b5d0ca531",
      "2205d773-686a-4060-9796-d167a895e6d9",
      "c49ede2c-9a2f-46eb-bcb1-68532d86cf3e",
      "9ba1f363-c584-4b20-8fbf-7f5fae6a947e",
      "c7f3b273-bfa8-4975-8b43-c976bdb8111f",
      "fc66267b-9bee-4f3b-8d69-11e2d7704517",
      "ec82af8c-3144-40fa-8b5a-e96f945e6688",
      "b4175d71-08c3-498f-97f4-23f31bcb0054",
      "06a2afe7-1baa-45eb-a4a1-8b744033c243",
      "7f4e100a-db70-4410-8046-896d7579bbb2"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522288719,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "bbed177e-f72c-4822-9f3e-d8d6774591dd",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550655360000,
    "parent_id": "d548e856-41b8-49c8-a801-044c518c9fe5",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "rvalue"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522288715,
        "id": "d0a39d60-d899-431d-881f-0e626154701c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522288715,
        "parent_id": "bbed177e-f72c-4822-9f3e-d8d6774591dd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "An rvalue expression is any expression which can be implicitly moved from, regardless of whether it has identity."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "An rvalue expression is any expression which can be implicitly moved from, regardless of whether it has identity."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522288716,
        "id": "baaad4d3-b3ba-4e66-af5c-608c8ec25e90",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522288716,
        "parent_id": "bbed177e-f72c-4822-9f3e-d8d6774591dd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "More precisely, rvalue expressions may be used as the argument to a function that takes a parameter of type "
            ],
            [
              "T \u0026\u0026",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (where "
            ],
            [
              "T",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is the type of "
            ],
            [
              "expr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "). "
            ],
            [
              "Only",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " rvalue expressions may be given as arguments to such function parameters; if a non-rvalue expression is used, then overload resolution will pick any function that does not use an rvalue reference parameter. And if none exist, then you get an error."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "More precisely, rvalue expressions may be used as the argument to a function that takes a parameter of type "
          },
          {
            "Text": "T \u0026\u0026",
            "AttrFlags": 2
          },
          {
            "Text": " (where "
          },
          {
            "Text": "T",
            "AttrFlags": 2
          },
          {
            "Text": " is the type of "
          },
          {
            "Text": "expr",
            "AttrFlags": 2
          },
          {
            "Text": "). "
          },
          {
            "Text": "Only",
            "AttrFlags": 4
          },
          {
            "Text": " rvalue expressions may be given as arguments to such function parameters; if a non-rvalue expression is used, then overload resolution will pick any function that does not use an rvalue reference parameter. And if none exist, then you get an error."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522288716,
        "id": "1466fa04-b8e3-4196-b0c6-9c1b5d0ca531",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522288716,
        "parent_id": "bbed177e-f72c-4822-9f3e-d8d6774591dd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The category of rvalue expressions includes all xvalue and prvalue expressions, and only those expressions."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The category of rvalue expressions includes all xvalue and prvalue expressions, and only those expressions."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522288716,
        "id": "2205d773-686a-4060-9796-d167a895e6d9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522288716,
        "parent_id": "bbed177e-f72c-4822-9f3e-d8d6774591dd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The standard library function "
            ],
            [
              "std::move",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " exists to explicitly transform a non-rvalue expression into an rvalue. More specifically, it turns the expression into an xvalue, since even if it was an identity-less prvalue expression before, by passing it as a parameter to "
            ],
            [
              "std::move",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", it gains identity (the function’s parameter name) and becomes an xvalue."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The standard library function "
          },
          {
            "Text": "std::move",
            "AttrFlags": 2
          },
          {
            "Text": " exists to explicitly transform a non-rvalue expression into an rvalue. More specifically, it turns the expression into an xvalue, since even if it was an identity-less prvalue expression before, by passing it as a parameter to "
          },
          {
            "Text": "std::move",
            "AttrFlags": 2
          },
          {
            "Text": ", it gains identity (the function’s parameter name) and becomes an xvalue."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522288717,
        "id": "c49ede2c-9a2f-46eb-bcb1-68532d86cf3e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522288717,
        "parent_id": "bbed177e-f72c-4822-9f3e-d8d6774591dd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Consider the following:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Consider the following:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522288717,
        "id": "9ba1f363-c584-4b20-8fbf-7f5fae6a947e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522288717,
        "parent_id": "bbed177e-f72c-4822-9f3e-d8d6774591dd",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "std::string str(\"init\");                       //1\nstd::string test1(str);                        //2\nstd::string test2(std::move(str));             //3\n\nstr = std::string(\"new value\");                //4 \nstd::string \u0026\u0026str_ref = std::move(str);        //5\nstd::string test3(str_ref);                    //6"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "std::string str(\"init\");                       //1\nstd::string test1(str);                        //2\nstd::string test2(std::move(str));             //3\n\nstr = std::string(\"new value\");                //4 \nstd::string \u0026\u0026str_ref = std::move(str);        //5\nstd::string test3(str_ref);                    //6",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522288717,
        "id": "c7f3b273-bfa8-4975-8b43-c976bdb8111f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522288717,
        "parent_id": "bbed177e-f72c-4822-9f3e-d8d6774591dd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "std::string",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " has a constructor which takes a single parameter of type "
            ],
            [
              "std::string\u0026\u0026",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", commonly called a “move constructor”. However, the value category of the expression "
            ],
            [
              "str",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is not an rvalue (specifically it is an lvalue), so it cannot call that constructor overload. Instead, it calls the "
            ],
            [
              "const std::string\u0026",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " overload, the copy constructor."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "std::string",
            "AttrFlags": 2
          },
          {
            "Text": " has a constructor which takes a single parameter of type "
          },
          {
            "Text": "std::string\u0026\u0026",
            "AttrFlags": 2
          },
          {
            "Text": ", commonly called a “move constructor”. However, the value category of the expression "
          },
          {
            "Text": "str",
            "AttrFlags": 2
          },
          {
            "Text": " is not an rvalue (specifically it is an lvalue), so it cannot call that constructor overload. Instead, it calls the "
          },
          {
            "Text": "const std::string\u0026",
            "AttrFlags": 2
          },
          {
            "Text": " overload, the copy constructor."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522288718,
        "id": "fc66267b-9bee-4f3b-8d69-11e2d7704517",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522288718,
        "parent_id": "bbed177e-f72c-4822-9f3e-d8d6774591dd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Line 3 changes things. The return value of "
            ],
            [
              "std::move",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is a "
            ],
            [
              "T\u0026\u0026",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", where "
            ],
            [
              "T",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is the base type of the parameter passed in. So "
            ],
            [
              "std::move(str)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " returns "
            ],
            [
              "std::string\u0026\u0026",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". A function call who’s return value is an rvalue reference is an rvalue expression (specifically an xvalue), so it may call the move constructor of "
            ],
            [
              "std::string",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". After line 3, "
            ],
            [
              "str",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " has been moved from (who’s contents are now undefined)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Line 3 changes things. The return value of "
          },
          {
            "Text": "std::move",
            "AttrFlags": 2
          },
          {
            "Text": " is a "
          },
          {
            "Text": "T\u0026\u0026",
            "AttrFlags": 2
          },
          {
            "Text": ", where "
          },
          {
            "Text": "T",
            "AttrFlags": 2
          },
          {
            "Text": " is the base type of the parameter passed in. So "
          },
          {
            "Text": "std::move(str)",
            "AttrFlags": 2
          },
          {
            "Text": " returns "
          },
          {
            "Text": "std::string\u0026\u0026",
            "AttrFlags": 2
          },
          {
            "Text": ". A function call who’s return value is an rvalue reference is an rvalue expression (specifically an xvalue), so it may call the move constructor of "
          },
          {
            "Text": "std::string",
            "AttrFlags": 2
          },
          {
            "Text": ". After line 3, "
          },
          {
            "Text": "str",
            "AttrFlags": 2
          },
          {
            "Text": " has been moved from (who’s contents are now undefined)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522288718,
        "id": "ec82af8c-3144-40fa-8b5a-e96f945e6688",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522288718,
        "parent_id": "bbed177e-f72c-4822-9f3e-d8d6774591dd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Line 4 passes a temporary to the assignment operator of "
            ],
            [
              "std::string",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". This has an overload which takes a "
            ],
            [
              "std::string\u0026\u0026",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". The expression "
            ],
            [
              "std::string(\"new value\")",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is an rvalue expression (specifically a prvalue), so it may call that overload. Thus, the temporary is moved into "
            ],
            [
              "str",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", replacing the undefined contents with specific contents."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Line 4 passes a temporary to the assignment operator of "
          },
          {
            "Text": "std::string",
            "AttrFlags": 2
          },
          {
            "Text": ". This has an overload which takes a "
          },
          {
            "Text": "std::string\u0026\u0026",
            "AttrFlags": 2
          },
          {
            "Text": ". The expression "
          },
          {
            "Text": "std::string(\"new value\")",
            "AttrFlags": 2
          },
          {
            "Text": " is an rvalue expression (specifically a prvalue), so it may call that overload. Thus, the temporary is moved into "
          },
          {
            "Text": "str",
            "AttrFlags": 2
          },
          {
            "Text": ", replacing the undefined contents with specific contents."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522288718,
        "id": "b4175d71-08c3-498f-97f4-23f31bcb0054",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522288718,
        "parent_id": "bbed177e-f72c-4822-9f3e-d8d6774591dd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Line 5 creates a named rvalue reference called "
            ],
            [
              "str_ref",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " that refers to "
            ],
            [
              "str",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". This is where value categories get confusing."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Line 5 creates a named rvalue reference called "
          },
          {
            "Text": "str_ref",
            "AttrFlags": 2
          },
          {
            "Text": " that refers to "
          },
          {
            "Text": "str",
            "AttrFlags": 2
          },
          {
            "Text": ". This is where value categories get confusing."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522288719,
        "id": "06a2afe7-1baa-45eb-a4a1-8b744033c243",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522288719,
        "parent_id": "bbed177e-f72c-4822-9f3e-d8d6774591dd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "See, while "
            ],
            [
              "str_ref",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is an rvalue reference to "
            ],
            [
              "std::string",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", the value category of the expression "
            ],
            [
              "str_ref",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "is not an rvalue",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ". It is an lvalue expression. Yes, really. Because of this, one cannot call the move constructor of "
            ],
            [
              "std::string",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " with the expression "
            ],
            [
              "str_ref",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Line 6 therefore "
            ],
            [
              "copies",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " the value of "
            ],
            [
              "str",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " into "
            ],
            [
              "test3",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "See, while "
          },
          {
            "Text": "str_ref",
            "AttrFlags": 2
          },
          {
            "Text": " is an rvalue reference to "
          },
          {
            "Text": "std::string",
            "AttrFlags": 2
          },
          {
            "Text": ", the value category of the expression "
          },
          {
            "Text": "str_ref",
            "AttrFlags": 2
          },
          {
            "Text": " "
          },
          {
            "Text": "is not an rvalue",
            "AttrFlags": 4
          },
          {
            "Text": ". It is an lvalue expression. Yes, really. Because of this, one cannot call the move constructor of "
          },
          {
            "Text": "std::string",
            "AttrFlags": 2
          },
          {
            "Text": " with the expression "
          },
          {
            "Text": "str_ref",
            "AttrFlags": 2
          },
          {
            "Text": ". Line 6 therefore "
          },
          {
            "Text": "copies",
            "AttrFlags": 4
          },
          {
            "Text": " the value of "
          },
          {
            "Text": "str",
            "AttrFlags": 2
          },
          {
            "Text": " into "
          },
          {
            "Text": "test3",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522288719,
        "id": "7f4e100a-db70-4410-8046-896d7579bbb2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522288719,
        "parent_id": "bbed177e-f72c-4822-9f3e-d8d6774591dd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To move it, we would have to employ "
            ],
            [
              "std::move",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " again."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To move it, we would have to employ "
          },
          {
            "Text": "std::move",
            "AttrFlags": 2
          },
          {
            "Text": " again."
          }
        ]
      }
    ],
    "title": "rvalue",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}