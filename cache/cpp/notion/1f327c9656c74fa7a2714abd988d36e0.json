{
  "ID": "1f327c96-56c7-4fa7-a271-4abd988d36e0",
  "Root": {
    "alive": true,
    "content": [
      "91fc3003-64d3-44fd-91f9-687e900370ff",
      "b37d3dc9-a37e-46d3-a016-6948f7b1f4d8",
      "d33f73ad-252a-404a-bdc2-cc1ef251ba20",
      "4b858373-a56c-4efe-a1ed-c8f905eb4aaa",
      "d915f4d9-1af3-4dae-9d48-9b99b9a75dc6",
      "98ef2ee8-a9b5-4a66-bdfc-cd4373de6646",
      "bdeff810-1823-42ea-877a-53173f9dd8ca",
      "270c339d-3143-4312-ad0d-e583b2ff1191",
      "7d9ec4d1-bc31-450d-8876-1169bf50daae",
      "22285656-e3ba-4f2c-9616-dd5747d660d0",
      "de28fbbd-e5fd-47e4-8304-dbd6067fa55c"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550525407600,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "1f327c96-56c7-4fa7-a271-4abd988d36e0",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551689201206,
    "parent_id": "b1cbbef7-66d3-49c3-aaff-f598af5cdf47",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "std future error and std future errc"
        ]
      ]
    },
    "type": "page",
    "version": 4,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525407596,
        "id": "91fc3003-64d3-44fd-91f9-687e900370ff",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525407596,
        "parent_id": "1f327c96-56c7-4fa7-a271-4abd988d36e0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If constraints for std::promise and std::future are not met an exception of type std::future_error is thrown."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If constraints for std::promise and std::future are not met an exception of type std::future_error is thrown."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525407598,
        "id": "b37d3dc9-a37e-46d3-a016-6948f7b1f4d8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525407598,
        "parent_id": "1f327c96-56c7-4fa7-a271-4abd988d36e0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The error code member in the exception is of type std::future_errc and values are as below, along with some test cases:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The error code member in the exception is of type std::future_errc and values are as below, along with some test cases:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525407598,
        "id": "d33f73ad-252a-404a-bdc2-cc1ef251ba20",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525407598,
        "parent_id": "1f327c96-56c7-4fa7-a271-4abd988d36e0",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "enum class future_errc {\n    broken_promise             = /* the task is no longer shared */,\n    future_already_retrieved   = /* the answer was already retrieved */,\n    promise_already_satisfied  = /* the answer was stored already */,\n    no_state                   = /* access to a promise in non-shared state */\n};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "enum class future_errc {\n    broken_promise             = /* the task is no longer shared */,\n    future_already_retrieved   = /* the answer was already retrieved */,\n    promise_already_satisfied  = /* the answer was stored already */,\n    no_state                   = /* access to a promise in non-shared state */\n};",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525407599,
        "id": "4b858373-a56c-4efe-a1ed-c8f905eb4aaa",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525407599,
        "parent_id": "1f327c96-56c7-4fa7-a271-4abd988d36e0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Inactive promise:",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Inactive promise:",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525407599,
        "id": "d915f4d9-1af3-4dae-9d48-9b99b9a75dc6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525407599,
        "parent_id": "1f327c96-56c7-4fa7-a271-4abd988d36e0",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int test()\n{\n    std::promise\u003cint\u003e pr;\n    return 0; // returns ok\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int test()\n{\n    std::promise\u003cint\u003e pr;\n    return 0; // returns ok\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525407599,
        "id": "98ef2ee8-a9b5-4a66-bdfc-cd4373de6646",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525407599,
        "parent_id": "1f327c96-56c7-4fa7-a271-4abd988d36e0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Active promise, unused:",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Active promise, unused:",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525407599,
        "id": "bdeff810-1823-42ea-877a-53173f9dd8ca",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525407599,
        "parent_id": "1f327c96-56c7-4fa7-a271-4abd988d36e0",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int test()\n  {\n      std::promise\u003cint\u003e pr;\n      auto fut = pr.get_future(); //blocks indefinitely!\n      return 0; \n  }"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int test()\n  {\n      std::promise\u003cint\u003e pr;\n      auto fut = pr.get_future(); //blocks indefinitely!\n      return 0; \n  }",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525407599,
        "id": "270c339d-3143-4312-ad0d-e583b2ff1191",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525407599,
        "parent_id": "1f327c96-56c7-4fa7-a271-4abd988d36e0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Double retrieval:",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Double retrieval:",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525407599,
        "id": "7d9ec4d1-bc31-450d-8876-1169bf50daae",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525407599,
        "parent_id": "1f327c96-56c7-4fa7-a271-4abd988d36e0",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int test()\n{\n    std::promise\u003cint\u003e pr;\n    auto fut1 = pr.get_future();\n\n    try{\n        auto fut2 = pr.get_future();    //   second attempt to get future\n        return 0;\n    }\n    catch(const std::future_error\u0026 e)\n    {\n        cout \u003c\u003c e.what() \u003c\u003c endl;       //   Error: \"The future has already been retrieved from the promise or packaged_task.\"\n        return -1;\n    }\n    return fut2.get();\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int test()\n{\n    std::promise\u003cint\u003e pr;\n    auto fut1 = pr.get_future();\n\n    try{\n        auto fut2 = pr.get_future();    //   second attempt to get future\n        return 0;\n    }\n    catch(const std::future_error\u0026 e)\n    {\n        cout \u003c\u003c e.what() \u003c\u003c endl;       //   Error: \"The future has already been retrieved from the promise or packaged_task.\"\n        return -1;\n    }\n    return fut2.get();\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525407599,
        "id": "22285656-e3ba-4f2c-9616-dd5747d660d0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525407599,
        "parent_id": "1f327c96-56c7-4fa7-a271-4abd988d36e0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Setting std::promise value twice:",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Setting std::promise value twice:",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525407599,
        "id": "de28fbbd-e5fd-47e4-8304-dbd6067fa55c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525407599,
        "parent_id": "1f327c96-56c7-4fa7-a271-4abd988d36e0",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int test()\n{\n    std::promise\u003cint\u003e pr;\n    auto fut = pr.get_future();\n    try{\n        std::promise\u003cint\u003e pr2(std::move(pr));\n        pr2.set_value(10);\n        pr2.set_value(10);  // second attempt to set promise throws exception\n    }\n    catch(const std::future_error\u0026 e)\n    {\n        cout \u003c\u003c e.what() \u003c\u003c endl;       //   Error: \"The state of the promise has already been set.\"\n        return -1;\n    }\n    return fut.get();\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int test()\n{\n    std::promise\u003cint\u003e pr;\n    auto fut = pr.get_future();\n    try{\n        std::promise\u003cint\u003e pr2(std::move(pr));\n        pr2.set_value(10);\n        pr2.set_value(10);  // second attempt to set promise throws exception\n    }\n    catch(const std::future_error\u0026 e)\n    {\n        cout \u003c\u003c e.what() \u003c\u003c endl;       //   Error: \"The state of the promise has already been set.\"\n        return -1;\n    }\n    return fut.get();\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "std future error and std future errc",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}