{
  "ID": "ff672478-a69f-4d06-9776-9fbbae75a548",
  "Root": {
    "alive": true,
    "content": [
      "2cf86659-a9b1-4ac8-896a-11dd29d431ce",
      "c2d27a0f-2a80-4acf-a4ee-b59e20434f00",
      "2c09fa1a-bbaa-4751-a5fa-45fed3deba31",
      "3ceb0703-9152-46a4-a0bf-c4f9a4e21a9f",
      "84e807d2-367a-461f-8785-22467583546f",
      "94b9c544-17ce-4ca7-9592-89bb572dac13",
      "5521f0bd-a84c-4875-8bfc-5534ac453ff2",
      "769a0491-6b6f-4b72-8bda-24f5951c0d61",
      "315f107f-d5d9-4636-b7fe-69e8bb75dc88",
      "60bb146c-5e8f-402f-9275-fd30b5d358cf",
      "def7c03b-7cf7-4226-995d-dcc4e2616c64",
      "2c1a6bd1-8ce0-4bdd-a92a-e01a4c038544"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550521949458,
    "id": "ff672478-a69f-4d06-9776-9fbbae75a548",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550521949458,
    "parent_id": "94bfa868-4e02-4b90-841b-817c34132524",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "030 Function Templates"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521949455,
        "id": "2cf86659-a9b1-4ac8-896a-11dd29d431ce",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521949455,
        "parent_id": "ff672478-a69f-4d06-9776-9fbbae75a548",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Templating can also be applied to functions (as well as the more traditional structures) with the same effect."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Templating can also be applied to functions (as well as the more traditional structures) with the same effect."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521949457,
        "id": "c2d27a0f-2a80-4acf-a4ee-b59e20434f00",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521949457,
        "parent_id": "ff672478-a69f-4d06-9776-9fbbae75a548",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// 'T' stands for the unknown type\n// Both of our arguments will be of the same type.\ntemplate\u003ctypename T\u003e\nvoid printSum(T add1, T add2)\n{\n    std::cout \u003c\u003c (add1 + add2) \u003c\u003c std::endl;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// 'T' stands for the unknown type\n// Both of our arguments will be of the same type.\ntemplate\u003ctypename T\u003e\nvoid printSum(T add1, T add2)\n{\n    std::cout \u003c\u003c (add1 + add2) \u003c\u003c std::endl;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521949457,
        "id": "2c09fa1a-bbaa-4751-a5fa-45fed3deba31",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521949457,
        "parent_id": "ff672478-a69f-4d06-9776-9fbbae75a548",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This can then be used in the same way as structure templates."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This can then be used in the same way as structure templates."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521949457,
        "id": "3ceb0703-9152-46a4-a0bf-c4f9a4e21a9f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521949457,
        "parent_id": "ff672478-a69f-4d06-9776-9fbbae75a548",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "printSum\u003cint\u003e(4, 5);\nprintSum\u003cfloat\u003e(4.5f, 8.9f);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "printSum\u003cint\u003e(4, 5);\nprintSum\u003cfloat\u003e(4.5f, 8.9f);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521949457,
        "id": "84e807d2-367a-461f-8785-22467583546f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521949457,
        "parent_id": "ff672478-a69f-4d06-9776-9fbbae75a548",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In both these case the template argument is used to replace the types of the parameters; the result works just like a normal C++ function (if the parameters don’t match the template type the compiler applies the standard conversions)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In both these case the template argument is used to replace the types of the parameters; the result works just like a normal C++ function (if the parameters don’t match the template type the compiler applies the standard conversions)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521949457,
        "id": "94b9c544-17ce-4ca7-9592-89bb572dac13",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521949457,
        "parent_id": "ff672478-a69f-4d06-9776-9fbbae75a548",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "One additional property of template functions (unlike template classes) is that the compiler can infer the template parameters based on the parameters passed to the function."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "One additional property of template functions (unlike template classes) is that the compiler can infer the template parameters based on the parameters passed to the function."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521949458,
        "id": "5521f0bd-a84c-4875-8bfc-5534ac453ff2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521949458,
        "parent_id": "ff672478-a69f-4d06-9776-9fbbae75a548",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "printSum(4, 5);     // Both parameters are int.\n                    // This allows the compiler deduce that the type\n                    // T is also int.\n\nprintSum(5.0, 4);   // In this case the parameters are two different types.\n                    // The compiler is unable to deduce the type of T\n                    // because there are contradictions. As a result\n                    // this is a compile time error."
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "printSum(4, 5);     // Both parameters are int.\n                    // This allows the compiler deduce that the type\n                    // T is also int.\n\nprintSum(5.0, 4);   // In this case the parameters are two different types.\n                    // The compiler is unable to deduce the type of T\n                    // because there are contradictions. As a result\n                    // this is a compile time error.",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521949458,
        "id": "769a0491-6b6f-4b72-8bda-24f5951c0d61",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521949458,
        "parent_id": "ff672478-a69f-4d06-9776-9fbbae75a548",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This feature allows us to simplify code when we combine template structures and functions. There is a common pattern in the standard library that allows us to make "
            ],
            [
              "template structure X",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " using a helper function "
            ],
            [
              "make_X()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This feature allows us to simplify code when we combine template structures and functions. There is a common pattern in the standard library that allows us to make "
          },
          {
            "Text": "template structure X",
            "AttrFlags": 2
          },
          {
            "Text": " using a helper function "
          },
          {
            "Text": "make_X()",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521949458,
        "id": "315f107f-d5d9-4636-b7fe-69e8bb75dc88",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521949458,
        "parent_id": "ff672478-a69f-4d06-9776-9fbbae75a548",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// The make_X pattern looks like this.\n// 1) A template structure with 1 or more template types.\ntemplate\u003ctypename T1, typename T2\u003e\nstruct MyPair\n{\n    T1      first;\n    T2      second;\n};\n// 2) A make function that has a parameter type for\n//    each template parameter in the template structure.\ntemplate\u003ctypename T1, typename T2\u003e\nMyPair\u003cT1, T2\u003e make_MyPair(T1 t1, T2 t2)\n{\n    return MyPair\u003cT1, T2\u003e{t1, t2};\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// The make_X pattern looks like this.\n// 1) A template structure with 1 or more template types.\ntemplate\u003ctypename T1, typename T2\u003e\nstruct MyPair\n{\n    T1      first;\n    T2      second;\n};\n// 2) A make function that has a parameter type for\n//    each template parameter in the template structure.\ntemplate\u003ctypename T1, typename T2\u003e\nMyPair\u003cT1, T2\u003e make_MyPair(T1 t1, T2 t2)\n{\n    return MyPair\u003cT1, T2\u003e{t1, t2};\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521949458,
        "id": "60bb146c-5e8f-402f-9275-fd30b5d358cf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521949458,
        "parent_id": "ff672478-a69f-4d06-9776-9fbbae75a548",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "How does this help?"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "How does this help?"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521949458,
        "id": "def7c03b-7cf7-4226-995d-dcc4e2616c64",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521949458,
        "parent_id": "ff672478-a69f-4d06-9776-9fbbae75a548",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "auto val1 = MyPair\u003cint, float\u003e{5, 8.7};     // Create object explicitly defining the types\nauto val2 = make_MyPair(5, 8.7);            // Create object using the types of the paramters.\n                                            // In this code both val1 and val2 are the same\n                                            // type."
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "auto val1 = MyPair\u003cint, float\u003e{5, 8.7};     // Create object explicitly defining the types\nauto val2 = make_MyPair(5, 8.7);            // Create object using the types of the paramters.\n                                            // In this code both val1 and val2 are the same\n                                            // type.",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521949458,
        "id": "2c1a6bd1-8ce0-4bdd-a92a-e01a4c038544",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521949458,
        "parent_id": "ff672478-a69f-4d06-9776-9fbbae75a548",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note: This is not designed to shorten the code. This is designed to make the code more robust. It allows the types to be changed by changing the code in a single place rather than in multiple locations."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note: This is not designed to shorten the code. This is designed to make the code more robust. It allows the types to be changed by changing the code in a single place rather than in multiple locations."
          }
        ]
      }
    ],
    "title": "030 Function Templates"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}