{
  "ID": "03e23fca-584b-4f80-aa94-7805af74fb8f",
  "Root": {
    "alive": true,
    "content": [
      "ff3d93b7-e611-4cf7-b8cb-c43249985b3f",
      "62dacec1-279b-4da7-8f33-6e46d16c6c75",
      "b6c6c08b-d3e9-45c3-ad45-bec04627e03a",
      "03e7483f-13e9-48b0-9fff-19c4ba5c2a9b",
      "c34538e8-886d-456c-86f2-67e879d30ea3",
      "db7a0592-17f8-4cba-8f80-711e446ec768",
      "9d3c94b7-ff01-4ee1-80be-2846daef3ec5",
      "14ac4f95-f64d-479b-b1dc-d01e8ba25711",
      "be800e7c-df9b-4464-904c-f742d97f1fcf",
      "bf72a909-486a-4849-83dd-e59146f50b1d",
      "15a377db-8a21-4d79-89a4-43c73937f274",
      "8d988acb-b106-44fc-b1a6-c96dc6dc5933",
      "8eaabe2c-5abe-482a-b9c9-51c07ebda3c7",
      "95bdfac9-0b38-42ee-a4ab-4deaea57d5ca"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550523080722,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "03e23fca-584b-4f80-aa94-7805af74fb8f",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550800380000,
    "parent_id": "a47adf4d-f2bb-4f72-84ee-798641440dfd",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Pointer arithmetic"
        ]
      ]
    },
    "type": "page",
    "version": 10,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523080717,
        "id": "ff3d93b7-e611-4cf7-b8cb-c43249985b3f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523080717,
        "parent_id": "03e23fca-584b-4f80-aa94-7805af74fb8f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Increment / Decrement"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Increment / Decrement"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523080720,
        "id": "62dacec1-279b-4da7-8f33-6e46d16c6c75",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523080720,
        "parent_id": "03e23fca-584b-4f80-aa94-7805af74fb8f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A pointer can be incremented or decremented (prefix and postfix). Incrementing a pointer advances the pointer value to the element in the array one element past the currently pointed to element. Decrementing a pointer moves it to the previous element in the array."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A pointer can be incremented or decremented (prefix and postfix). Incrementing a pointer advances the pointer value to the element in the array one element past the currently pointed to element. Decrementing a pointer moves it to the previous element in the array."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523080720,
        "id": "b6c6c08b-d3e9-45c3-ad45-bec04627e03a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523080720,
        "parent_id": "03e23fca-584b-4f80-aa94-7805af74fb8f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Pointer arithmetic is not permitted if the type that the pointer points to is not complete. "
            ],
            [
              "void",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is always an incomplete type."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Pointer arithmetic is not permitted if the type that the pointer points to is not complete. "
          },
          {
            "Text": "void",
            "AttrFlags": 2
          },
          {
            "Text": " is always an incomplete type."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523080720,
        "id": "03e7483f-13e9-48b0-9fff-19c4ba5c2a9b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550800380000,
        "parent_id": "03e23fca-584b-4f80-aa94-7805af74fb8f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "char* str = new char[10]; // str = 0x010\n++str;                    // str = 0x011  in this case sizeof(char) = 1 byte\n\nint* arr = new int[10];   // arr = 0x00100\n++arr;                    // arr = 0x00104 if sizeof(int) = 4 bytes\n\nvoid* ptr = (void*)new char[10];\n++ptr;    // void is incomplete."
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "char* str = new char[10]; // str = 0x010\n++str;                    // str = 0x011  in this case sizeof(char) = 1 byte\n\nint* arr = new int[10];   // arr = 0x00100\n++arr;                    // arr = 0x00104 if sizeof(int) = 4 bytes\n\nvoid* ptr = (void*)new char[10];\n++ptr;    // void is incomplete.",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523080720,
        "id": "c34538e8-886d-456c-86f2-67e879d30ea3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523080720,
        "parent_id": "03e23fca-584b-4f80-aa94-7805af74fb8f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If a pointer to the end element is incremented, then the pointer points to one element past the end of the array. Such a pointer cannot be dereferenced, but it can be decremented."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If a pointer to the end element is incremented, then the pointer points to one element past the end of the array. Such a pointer cannot be dereferenced, but it can be decremented."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523080720,
        "id": "db7a0592-17f8-4cba-8f80-711e446ec768",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523080720,
        "parent_id": "03e23fca-584b-4f80-aa94-7805af74fb8f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Incrementing a pointer to the one-past-the-end element in the array, or decrementing a pointer to the first element in an array yields undefined behavior."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Incrementing a pointer to the one-past-the-end element in the array, or decrementing a pointer to the first element in an array yields undefined behavior."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523080720,
        "id": "9d3c94b7-ff01-4ee1-80be-2846daef3ec5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523080720,
        "parent_id": "03e23fca-584b-4f80-aa94-7805af74fb8f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A pointer to a non-array object can be treated, for the purposes of pointer arithmetic, as though it were an array of size 1."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A pointer to a non-array object can be treated, for the purposes of pointer arithmetic, as though it were an array of size 1."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523080720,
        "id": "14ac4f95-f64d-479b-b1dc-d01e8ba25711",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523080720,
        "parent_id": "03e23fca-584b-4f80-aa94-7805af74fb8f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Addition / Subtraction"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Addition / Subtraction"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523080721,
        "id": "be800e7c-df9b-4464-904c-f742d97f1fcf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523080721,
        "parent_id": "03e23fca-584b-4f80-aa94-7805af74fb8f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Integer values can be added to pointers; they act as incrementing, but by a specific number rather than by 1. Integer values can be subtracted from pointers as well, acting as pointer decrementing. As with incrementing/decrementing, the pointer must point to a complete type."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Integer values can be added to pointers; they act as incrementing, but by a specific number rather than by 1. Integer values can be subtracted from pointers as well, acting as pointer decrementing. As with incrementing/decrementing, the pointer must point to a complete type."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523080721,
        "id": "bf72a909-486a-4849-83dd-e59146f50b1d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550800380000,
        "parent_id": "03e23fca-584b-4f80-aa94-7805af74fb8f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "char* str = new char[10];  // str = 0x010\nstr += 2;                  // str = 0x010 + 2 * sizeof(char) = 0x012\n\nint* arr = new int[10];    // arr = 0x100\narr += 2;                  // arr = 0x100 + 2 * sizeof(int) = 0x108, assuming sizeof(int) == 4."
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "char* str = new char[10];  // str = 0x010\nstr += 2;                  // str = 0x010 + 2 * sizeof(char) = 0x012\n\nint* arr = new int[10];    // arr = 0x100\narr += 2;                  // arr = 0x100 + 2 * sizeof(int) = 0x108, assuming sizeof(int) == 4.",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523080721,
        "id": "15a377db-8a21-4d79-89a4-43c73937f274",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523080721,
        "parent_id": "03e23fca-584b-4f80-aa94-7805af74fb8f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Pointer Differencing"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Pointer Differencing"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523080721,
        "id": "8d988acb-b106-44fc-b1a6-c96dc6dc5933",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523080721,
        "parent_id": "03e23fca-584b-4f80-aa94-7805af74fb8f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The difference between two pointers to the same type can be computed. The two pointers must be within the same array object; otherwise undefined behavior results."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The difference between two pointers to the same type can be computed. The two pointers must be within the same array object; otherwise undefined behavior results."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523080721,
        "id": "8eaabe2c-5abe-482a-b9c9-51c07ebda3c7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523080721,
        "parent_id": "03e23fca-584b-4f80-aa94-7805af74fb8f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Given two pointers "
            ],
            [
              "P",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "Q",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in the same array, if "
            ],
            [
              "P",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is the "
            ],
            [
              "i",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "th element in the array, and "
            ],
            [
              "Q",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is the "
            ],
            [
              "j",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "th element, then "
            ],
            [
              "P - Q",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " shall be "
            ],
            [
              "i - j",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". The type of the result is "
            ],
            [
              "std::ptrdiff_t",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", from "
            ],
            [
              "\u003ccstddef\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Given two pointers "
          },
          {
            "Text": "P",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "Q",
            "AttrFlags": 2
          },
          {
            "Text": " in the same array, if "
          },
          {
            "Text": "P",
            "AttrFlags": 2
          },
          {
            "Text": " is the "
          },
          {
            "Text": "i",
            "AttrFlags": 2
          },
          {
            "Text": "th element in the array, and "
          },
          {
            "Text": "Q",
            "AttrFlags": 2
          },
          {
            "Text": " is the "
          },
          {
            "Text": "j",
            "AttrFlags": 2
          },
          {
            "Text": "th element, then "
          },
          {
            "Text": "P - Q",
            "AttrFlags": 2
          },
          {
            "Text": " shall be "
          },
          {
            "Text": "i - j",
            "AttrFlags": 2
          },
          {
            "Text": ". The type of the result is "
          },
          {
            "Text": "std::ptrdiff_t",
            "AttrFlags": 2
          },
          {
            "Text": ", from "
          },
          {
            "Text": "\u003ccstddef\u003e",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523080722,
        "id": "95bdfac9-0b38-42ee-a4ab-4deaea57d5ca",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550800380000,
        "parent_id": "03e23fca-584b-4f80-aa94-7805af74fb8f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "char* start = new char[10];  // str = 0x010\nchar* test = \u0026start[5];\nstd::ptrdiff_t diff = test - start; //Equal to 5.\nstd::ptrdiff_t diff = start - test; //Equal to -5; ptrdiff_t is signed."
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "char* start = new char[10];  // str = 0x010\nchar* test = \u0026start[5];\nstd::ptrdiff_t diff = test - start; //Equal to 5.\nstd::ptrdiff_t diff = start - test; //Equal to -5; ptrdiff_t is signed.",
        "code_language": "C++"
      }
    ],
    "title": "Pointer arithmetic",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}