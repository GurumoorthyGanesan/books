{
  "ID": "e7a760f1-483b-42fd-ad1c-97e83a336fe2",
  "Root": {
    "alive": true,
    "content": [
      "580f67fd-0286-4662-ba24-f671f95ea06c",
      "371a3b2f-3287-4893-b08e-39125331319f",
      "97ef21ae-75f6-41ce-a9d5-1fa7a160f11a",
      "db805eb7-3f4a-4eb4-afa8-f34afe5d390a",
      "e9de64fa-fa5d-4dff-90b4-4c6cbb7bac7b",
      "b82db310-fb33-47c0-ac11-f8fe16684d57",
      "97e6888f-4ea5-4d3f-b34c-47c6b7d04a08",
      "5897d6f7-9a72-4fe2-98fa-674b6876f665",
      "636190ee-99c2-45b3-9b9b-dafe44d060aa",
      "dab21399-ed35-4ca3-bb4a-35a788a16a69",
      "55304f06-832d-4cba-bd9f-b892e1ae451a",
      "9f5ae5f7-a897-4e9a-b04a-658048b83b63"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522066820,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "e7a760f1-483b-42fd-ad1c-97e83a336fe2",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550655600000,
    "parent_id": "71517390-0244-456d-87c4-82c582ca8abf",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Capture by value"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522066818,
        "id": "580f67fd-0286-4662-ba24-f671f95ea06c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522066818,
        "parent_id": "e7a760f1-483b-42fd-ad1c-97e83a336fe2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If you specify the variable’s name in the capture list, the lambda will capture it by value. This means that the generated closure type for the lambda stores a copy of the variable. This also requires that the variable’s type be "
            ],
            [
              "copy-constructible",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If you specify the variable’s name in the capture list, the lambda will capture it by value. This means that the generated closure type for the lambda stores a copy of the variable. This also requires that the variable’s type be "
          },
          {
            "Text": "copy-constructible",
            "AttrFlags": 4
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522066818,
        "id": "371a3b2f-3287-4893-b08e-39125331319f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522066818,
        "parent_id": "e7a760f1-483b-42fd-ad1c-97e83a336fe2",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int a = 0;\n\n[a]() {\n    return a;   // Ok, 'a' is captured by value\n};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int a = 0;\n\n[a]() {\n    return a;   // Ok, 'a' is captured by value\n};",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522066819,
        "id": "97ef21ae-75f6-41ce-a9d5-1fa7a160f11a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522066819,
        "parent_id": "e7a760f1-483b-42fd-ad1c-97e83a336fe2",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "auto p = std::unique_ptr\u003cT\u003e(...);\n\n[p]() {         // Compile error; `unique_ptr` is not copy-constructible\n    return p-\u003ecreateWidget(); \n};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "auto p = std::unique_ptr\u003cT\u003e(...);\n\n[p]() {         // Compile error; `unique_ptr` is not copy-constructible\n    return p-\u003ecreateWidget(); \n};",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522066819,
        "id": "db805eb7-3f4a-4eb4-afa8-f34afe5d390a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522066819,
        "parent_id": "e7a760f1-483b-42fd-ad1c-97e83a336fe2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "From C++14 on, it is possible to initialize variables on the spot. This allows move only types to be captured in the lambda."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "From C++14 on, it is possible to initialize variables on the spot. This allows move only types to be captured in the lambda."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522066819,
        "id": "e9de64fa-fa5d-4dff-90b4-4c6cbb7bac7b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522066819,
        "parent_id": "e7a760f1-483b-42fd-ad1c-97e83a336fe2",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "auto p = std::make_unique\u003cT\u003e(...);\n\n[p = std::move(p)]() {\n    return p-\u003ecreateWidget(); \n};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "auto p = std::make_unique\u003cT\u003e(...);\n\n[p = std::move(p)]() {\n    return p-\u003ecreateWidget(); \n};",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522066819,
        "id": "b82db310-fb33-47c0-ac11-f8fe16684d57",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522066819,
        "parent_id": "e7a760f1-483b-42fd-ad1c-97e83a336fe2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Even though a lambda captures variables by value when they are given by their name, such variables cannot be modified within the lambda body by default. This is because the closure type puts the lambda body in a declaration of "
            ],
            [
              "operator() const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Even though a lambda captures variables by value when they are given by their name, such variables cannot be modified within the lambda body by default. This is because the closure type puts the lambda body in a declaration of "
          },
          {
            "Text": "operator() const",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522066819,
        "id": "97e6888f-4ea5-4d3f-b34c-47c6b7d04a08",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522066819,
        "parent_id": "e7a760f1-483b-42fd-ad1c-97e83a336fe2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " applies to accesses to member variables of the closure type, and captured variables that are members of the closure (all appearances to the contrary):"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": " applies to accesses to member variables of the closure type, and captured variables that are members of the closure (all appearances to the contrary):"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522066819,
        "id": "5897d6f7-9a72-4fe2-98fa-674b6876f665",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522066819,
        "parent_id": "e7a760f1-483b-42fd-ad1c-97e83a336fe2",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int a = 0;\n\n[a]() {\n    a = 2;      // Illegal, 'a' is accessed via `const`\n\n    decltype(a) a1 = 1; \n    a1 = 2; // valid: variable 'a1' is not const\n};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int a = 0;\n\n[a]() {\n    a = 2;      // Illegal, 'a' is accessed via `const`\n\n    decltype(a) a1 = 1; \n    a1 = 2; // valid: variable 'a1' is not const\n};",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522066820,
        "id": "636190ee-99c2-45b3-9b9b-dafe44d060aa",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522066820,
        "parent_id": "e7a760f1-483b-42fd-ad1c-97e83a336fe2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To remove the "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", you have to specify the keyword "
            ],
            [
              "mutable",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " on the lambda:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To remove the "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": ", you have to specify the keyword "
          },
          {
            "Text": "mutable",
            "AttrFlags": 2
          },
          {
            "Text": " on the lambda:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522066820,
        "id": "dab21399-ed35-4ca3-bb4a-35a788a16a69",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522066820,
        "parent_id": "e7a760f1-483b-42fd-ad1c-97e83a336fe2",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int a = 0;\n\n[a]() mutable {\n    a = 2;      // OK, 'a' can be modified\n    return a;\n};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int a = 0;\n\n[a]() mutable {\n    a = 2;      // OK, 'a' can be modified\n    return a;\n};",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522066820,
        "id": "55304f06-832d-4cba-bd9f-b892e1ae451a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522066820,
        "parent_id": "e7a760f1-483b-42fd-ad1c-97e83a336fe2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Because "
            ],
            [
              "a",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " was captured by value, any modifications done by calling the lambda will not affect "
            ],
            [
              "a",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". The value of "
            ],
            [
              "a",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " was copied into the lambda when it was constructed, so the lambda’s copy of "
            ],
            [
              "a",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is separate from the external "
            ],
            [
              "a",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " variable."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Because "
          },
          {
            "Text": "a",
            "AttrFlags": 2
          },
          {
            "Text": " was captured by value, any modifications done by calling the lambda will not affect "
          },
          {
            "Text": "a",
            "AttrFlags": 2
          },
          {
            "Text": ". The value of "
          },
          {
            "Text": "a",
            "AttrFlags": 2
          },
          {
            "Text": " was copied into the lambda when it was constructed, so the lambda’s copy of "
          },
          {
            "Text": "a",
            "AttrFlags": 2
          },
          {
            "Text": " is separate from the external "
          },
          {
            "Text": "a",
            "AttrFlags": 2
          },
          {
            "Text": " variable."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522066820,
        "id": "9f5ae5f7-a897-4e9a-b04a-658048b83b63",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522066820,
        "parent_id": "e7a760f1-483b-42fd-ad1c-97e83a336fe2",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int a = 5 ; \nauto plus5Val = [a] (void) { return a + 5 ; } ; \nauto plus5Ref = [\u0026a] (void) {return a + 5 ; } ; \n\na = 7 ; \nstd::cout \u003c\u003c a \u003c\u003c \", value \" \u003c\u003c plus5Val() \u003c\u003c \", reference \" \u003c\u003c plus5Ref() ;\n// The result will be \"7, value 10, reference 12\""
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int a = 5 ; \nauto plus5Val = [a] (void) { return a + 5 ; } ; \nauto plus5Ref = [\u0026a] (void) {return a + 5 ; } ; \n\na = 7 ; \nstd::cout \u003c\u003c a \u003c\u003c \", value \" \u003c\u003c plus5Val() \u003c\u003c \", reference \" \u003c\u003c plus5Ref() ;\n// The result will be \"7, value 10, reference 12\"",
        "code_language": "Plain Text"
      }
    ],
    "title": "Capture by value",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}