{
  "ID": "8cb58290-3535-4b28-b01f-81262ac0be66",
  "Root": {
    "alive": true,
    "content": [
      "a4d33b38-5dac-401c-9f82-8707af953528",
      "43bd9042-e1e9-4164-8d82-e34789267095",
      "2ad7e7ac-eadb-4828-94fc-5dfcb13d699a",
      "bda5f14b-30e2-4418-aabd-fe6f4a5522dd",
      "41a352b5-9250-474a-9fc8-411f5becd12b",
      "00f56781-dce1-4148-a12f-3f5c01392fbd",
      "b1f4f8f0-c61b-449d-b5af-a271987dd971",
      "f1ed9791-0ff1-4fb7-b4aa-128df4f8ef97",
      "6462494d-fa52-4b36-a22f-f13f90c71071",
      "a2a200e1-d007-4499-ac1a-46c5bcde13ef",
      "17a2df72-dc80-4dc8-8d18-3dc66d9e9d9f",
      "74bcb7a4-e37e-4dec-a659-5cf13a93c58c",
      "45b3b318-01f6-46d8-8aa7-89b8073ad919",
      "120ee853-4073-4f14-a63a-9a2a0be989fe",
      "e013b7a1-ef89-491a-9884-e4b250c2bfad",
      "f2502395-a573-4a30-b028-7a37a0f6a1ed",
      "b4546332-b1c4-4291-ba92-de97cd2aad1c",
      "57225f7d-2dcb-4efb-9325-324ae7c97ef6",
      "e7f60ee0-b9b6-4184-853d-ad8a614709f6",
      "c02ed67b-e1ba-43bd-a0d5-4abcb6437014",
      "135e683d-e50a-4289-b996-2e202824e704",
      "7fd81b57-bd00-44b6-ac0b-5dcb65ef4545",
      "14406852-ce08-4306-a92e-5b30eaef2c35",
      "627dbc5a-856b-409c-a796-8949862e24aa"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550524296536,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "8cb58290-3535-4b28-b01f-81262ac0be66",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550800680000,
    "parent_id": "c0487639-ff5b-4e90-a0b3-9fe411676c2c",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "this Pointer CV-Qualifiers"
        ]
      ]
    },
    "type": "page",
    "version": 15,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524296520,
        "id": "a4d33b38-5dac-401c-9f82-8707af953528",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524296520,
        "parent_id": "8cb58290-3535-4b28-b01f-81262ac0be66",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "this",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can also be cv-qualified, the same as any other pointer. However, due to the "
            ],
            [
              "this",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " parameter not being listed in the parameter list, special syntax is required for this; the cv-qualifiers are listed after the parameter list, but before the function’s body."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "this",
            "AttrFlags": 2
          },
          {
            "Text": " can also be cv-qualified, the same as any other pointer. However, due to the "
          },
          {
            "Text": "this",
            "AttrFlags": 2
          },
          {
            "Text": " parameter not being listed in the parameter list, special syntax is required for this; the cv-qualifiers are listed after the parameter list, but before the function’s body."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524296522,
        "id": "43bd9042-e1e9-4164-8d82-e34789267095",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550800620000,
        "parent_id": "8cb58290-3535-4b28-b01f-81262ac0be66",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "struct ThisCVQ {\n    void no_qualifier()                {} // \"this\" is: ThisCVQ*\n    void  c_qualifier() const          {} // \"this\" is: const ThisCVQ*\n    void  v_qualifier() volatile       {} // \"this\" is: volatile ThisCVQ*\n    void cv_qualifier() const volatile {} // \"this\" is: const volatile ThisCVQ*\n};"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "struct ThisCVQ {\n    void no_qualifier()                {} // \"this\" is: ThisCVQ*\n    void  c_qualifier() const          {} // \"this\" is: const ThisCVQ*\n    void  v_qualifier() volatile       {} // \"this\" is: volatile ThisCVQ*\n    void cv_qualifier() const volatile {} // \"this\" is: const volatile ThisCVQ*\n};",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524296525,
        "id": "2ad7e7ac-eadb-4828-94fc-5dfcb13d699a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524296525,
        "parent_id": "8cb58290-3535-4b28-b01f-81262ac0be66",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As "
            ],
            [
              "this",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is a parameter, a "
            ],
            [
              "function can be overloaded based on its ",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%2B%2B/510/function-overloading/11242/member-function-cv-qualifier-overloading#t=201610191448370301667"
                ]
              ]
            ],
            [
              "this",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%2B%2B/510/function-overloading/11242/member-function-cv-qualifier-overloading#t=201610191448370301667"
                ]
              ]
            ],
            [
              " cv-qualifier(s)",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%2B%2B/510/function-overloading/11242/member-function-cv-qualifier-overloading#t=201610191448370301667"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "As "
          },
          {
            "Text": "this",
            "AttrFlags": 2
          },
          {
            "Text": " is a parameter, a "
          },
          {
            "Text": "function can be overloaded based on its ",
            "Link": "http://stackoverflow.com/documentation/c%2B%2B/510/function-overloading/11242/member-function-cv-qualifier-overloading#t=201610191448370301667"
          },
          {
            "Text": "this",
            "AttrFlags": 2,
            "Link": "http://stackoverflow.com/documentation/c%2B%2B/510/function-overloading/11242/member-function-cv-qualifier-overloading#t=201610191448370301667"
          },
          {
            "Text": " cv-qualifier(s)",
            "Link": "http://stackoverflow.com/documentation/c%2B%2B/510/function-overloading/11242/member-function-cv-qualifier-overloading#t=201610191448370301667"
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524296525,
        "id": "bda5f14b-30e2-4418-aabd-fe6f4a5522dd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550800620000,
        "parent_id": "8cb58290-3535-4b28-b01f-81262ac0be66",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "struct CVOverload {\n    int func()                { return    3; }\n    int func() const          { return   33; }\n    int func() volatile       { return  333; }\n    int func() const volatile { return 3333; }\n};"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "struct CVOverload {\n    int func()                { return    3; }\n    int func() const          { return   33; }\n    int func() volatile       { return  333; }\n    int func() const volatile { return 3333; }\n};",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524296526,
        "id": "41a352b5-9250-474a-9fc8-411f5becd12b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524296526,
        "parent_id": "8cb58290-3535-4b28-b01f-81262ac0be66",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When "
            ],
            [
              "this",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (including "
            ],
            [
              "const volatile",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "), the function is unable to write to member variables through it, whether implicitly or explicitly. The sole exception to this is "
            ],
            [
              "mutable",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%2B%2B/2705/mutable-keyword/9058/non-static-class-member-modifier#t=201610111819273885699"
                ]
              ]
            ],
            [
              " member variables",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%2B%2B/2705/mutable-keyword/9058/non-static-class-member-modifier#t=201610111819273885699"
                ]
              ]
            ],
            [
              ", which can be written regardless of const-ness. Due to this, "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is used to indicate that the member function doesn’t change the object’s logical state (the way the object appears to the outside world), even if it does modify the physical state (the way the object looks under the hood)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When "
          },
          {
            "Text": "this",
            "AttrFlags": 2
          },
          {
            "Text": " is "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": " (including "
          },
          {
            "Text": "const volatile",
            "AttrFlags": 2
          },
          {
            "Text": "), the function is unable to write to member variables through it, whether implicitly or explicitly. The sole exception to this is "
          },
          {
            "Text": "mutable",
            "AttrFlags": 2,
            "Link": "http://stackoverflow.com/documentation/c%2B%2B/2705/mutable-keyword/9058/non-static-class-member-modifier#t=201610111819273885699"
          },
          {
            "Text": " member variables",
            "Link": "http://stackoverflow.com/documentation/c%2B%2B/2705/mutable-keyword/9058/non-static-class-member-modifier#t=201610111819273885699"
          },
          {
            "Text": ", which can be written regardless of const-ness. Due to this, "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": " is used to indicate that the member function doesn’t change the object’s logical state (the way the object appears to the outside world), even if it does modify the physical state (the way the object looks under the hood)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524296527,
        "id": "00f56781-dce1-4148-a12f-3f5c01392fbd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524296527,
        "parent_id": "8cb58290-3535-4b28-b01f-81262ac0be66",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Logical state is the way the object appears to outside observers. It isn’t directly tied to physical state, and indeed, might not even be stored as physical state. As long as outside observers can’t see any changes, the logical state is constant, even if you flip every single bit in the object."
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "Logical state is the way the object appears to outside observers. It isn’t directly tied to physical state, and indeed, might not even be stored as physical state. As long as outside observers can’t see any changes, the logical state is constant, even if you flip every single bit in the object."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524296527,
        "id": "b1f4f8f0-c61b-449d-b5af-a271987dd971",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524296527,
        "parent_id": "8cb58290-3535-4b28-b01f-81262ac0be66",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Physical state, also known as bitwise state, is how the object is stored in memory. This is the object’s nitty-gritty, the raw 1s and 0s that make up its data. An object is only physically constant if its representation in memory never changes."
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "Physical state, also known as bitwise state, is how the object is stored in memory. This is the object’s nitty-gritty, the raw 1s and 0s that make up its data. An object is only physically constant if its representation in memory never changes."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524296527,
        "id": "f1ed9791-0ff1-4fb7-b4aa-128df4f8ef97",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524296527,
        "parent_id": "8cb58290-3535-4b28-b01f-81262ac0be66",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note that C++ bases "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "ness on logical state, not physical state."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note that C++ bases "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": "ness on logical state, not physical state."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524296527,
        "id": "6462494d-fa52-4b36-a22f-f13f90c71071",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550800680000,
        "parent_id": "8cb58290-3535-4b28-b01f-81262ac0be66",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "class DoSomethingComplexAndOrExpensive {\n    mutable ResultType cached_result;\n    mutable bool state_changed;\n\n    ResultType calculate_result();\n    void modify_somehow(const Param\u0026 p);\n\n    // ...\n\n  public:\n    DoSomethingComplexAndOrExpensive(Param p) : state_changed(true) {\n        modify_somehow(p);\n    }\n\n    void change_state(Param p) {\n        modify_somehow(p);\n        state_changed = true;\n    }\n\n    // Return some complex and/or expensive-to-calculate result.\n    // As this has no reason to modify logical state, it is marked as \"const\".\n    ResultType get_result() const;\n};\nResultType DoSomethingComplexAndOrExpensive::get_result() const {\n    // cached_result and state_changed can be modified, even with a const \"this\" pointer.\n    // Even though the function doesn't modify logical state, it does modify physical state\n    //  by caching the result, so it doesn't need to be recalculated every time the function\n    //  is called.  This is indicated by cached_result and state_changed being mutable.\n\n    if (state_changed) {\n        cached_result = calculate_result();\n        state_changed = false;\n    }\n\n    return cached_result;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "class DoSomethingComplexAndOrExpensive {\n    mutable ResultType cached_result;\n    mutable bool state_changed;\n\n    ResultType calculate_result();\n    void modify_somehow(const Param\u0026 p);\n\n    // ...\n\n  public:\n    DoSomethingComplexAndOrExpensive(Param p) : state_changed(true) {\n        modify_somehow(p);\n    }\n\n    void change_state(Param p) {\n        modify_somehow(p);\n        state_changed = true;\n    }\n\n    // Return some complex and/or expensive-to-calculate result.\n    // As this has no reason to modify logical state, it is marked as \"const\".\n    ResultType get_result() const;\n};\nResultType DoSomethingComplexAndOrExpensive::get_result() const {\n    // cached_result and state_changed can be modified, even with a const \"this\" pointer.\n    // Even though the function doesn't modify logical state, it does modify physical state\n    //  by caching the result, so it doesn't need to be recalculated every time the function\n    //  is called.  This is indicated by cached_result and state_changed being mutable.\n\n    if (state_changed) {\n        cached_result = calculate_result();\n        state_changed = false;\n    }\n\n    return cached_result;\n}",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524296528,
        "id": "a2a200e1-d007-4499-ac1a-46c5bcde13ef",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524296528,
        "parent_id": "8cb58290-3535-4b28-b01f-81262ac0be66",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note that while you technically "
            ],
            [
              "could",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " use "
            ],
            [
              "const_cast",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " on "
            ],
            [
              "this",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to make it non-cv-qualified, you really, "
            ],
            [
              "REALLY",
              [
                [
                  "b"
                ],
                [
                  "i"
                ]
              ]
            ],
            [
              " shouldn’t, and should use "
            ],
            [
              "mutable",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " instead. A "
            ],
            [
              "const_cast",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is liable to invoke undefined behaviour when used on an object that actually "
            ],
            [
              "is",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", while "
            ],
            [
              "mutable",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is designed to be safe to use. It is, however, possible that you may run into this in extremely old code."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note that while you technically "
          },
          {
            "Text": "could",
            "AttrFlags": 4
          },
          {
            "Text": " use "
          },
          {
            "Text": "const_cast",
            "AttrFlags": 2
          },
          {
            "Text": " on "
          },
          {
            "Text": "this",
            "AttrFlags": 2
          },
          {
            "Text": " to make it non-cv-qualified, you really, "
          },
          {
            "Text": "REALLY",
            "AttrFlags": 5
          },
          {
            "Text": " shouldn’t, and should use "
          },
          {
            "Text": "mutable",
            "AttrFlags": 2
          },
          {
            "Text": " instead. A "
          },
          {
            "Text": "const_cast",
            "AttrFlags": 2
          },
          {
            "Text": " is liable to invoke undefined behaviour when used on an object that actually "
          },
          {
            "Text": "is",
            "AttrFlags": 4
          },
          {
            "Text": " "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": ", while "
          },
          {
            "Text": "mutable",
            "AttrFlags": 2
          },
          {
            "Text": " is designed to be safe to use. It is, however, possible that you may run into this in extremely old code."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524296531,
        "id": "17a2df72-dc80-4dc8-8d18-3dc66d9e9d9f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524296531,
        "parent_id": "8cb58290-3535-4b28-b01f-81262ac0be66",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "An exception to this rule is defining non-cv-qualified accessors in terms of ",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%2B%2B/2386/const-keyword/16974/avoiding-duplication-of-code-in-const-and-non-const-getter-methods"
                ]
              ]
            ],
            [
              "const",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%2B%2B/2386/const-keyword/16974/avoiding-duplication-of-code-in-const-and-non-const-getter-methods"
                ]
              ]
            ],
            [
              " accessors; as the object is guaranteed to not be ",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%2B%2B/2386/const-keyword/16974/avoiding-duplication-of-code-in-const-and-non-const-getter-methods"
                ]
              ]
            ],
            [
              "const",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%2B%2B/2386/const-keyword/16974/avoiding-duplication-of-code-in-const-and-non-const-getter-methods"
                ]
              ]
            ],
            [
              " if the non-cv-qualified version is called, there’s no risk of UB.",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%2B%2B/2386/const-keyword/16974/avoiding-duplication-of-code-in-const-and-non-const-getter-methods"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "An exception to this rule is defining non-cv-qualified accessors in terms of ",
            "Link": "http://stackoverflow.com/documentation/c%2B%2B/2386/const-keyword/16974/avoiding-duplication-of-code-in-const-and-non-const-getter-methods"
          },
          {
            "Text": "const",
            "AttrFlags": 2,
            "Link": "http://stackoverflow.com/documentation/c%2B%2B/2386/const-keyword/16974/avoiding-duplication-of-code-in-const-and-non-const-getter-methods"
          },
          {
            "Text": " accessors; as the object is guaranteed to not be ",
            "Link": "http://stackoverflow.com/documentation/c%2B%2B/2386/const-keyword/16974/avoiding-duplication-of-code-in-const-and-non-const-getter-methods"
          },
          {
            "Text": "const",
            "AttrFlags": 2,
            "Link": "http://stackoverflow.com/documentation/c%2B%2B/2386/const-keyword/16974/avoiding-duplication-of-code-in-const-and-non-const-getter-methods"
          },
          {
            "Text": " if the non-cv-qualified version is called, there’s no risk of UB.",
            "Link": "http://stackoverflow.com/documentation/c%2B%2B/2386/const-keyword/16974/avoiding-duplication-of-code-in-const-and-non-const-getter-methods"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524296531,
        "id": "74bcb7a4-e37e-4dec-a659-5cf13a93c58c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550800680000,
        "parent_id": "8cb58290-3535-4b28-b01f-81262ac0be66",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "class CVAccessor {\n    int arr[5];\n\n  public:\n    const int\u0026 get_arr_element(size_t i) const { return arr[i]; }\n\n    int\u0026 get_arr_element(size_t i) {\n        return const_cast\u003cint\u0026\u003e(const_cast\u003cconst CVAccessor*\u003e(this)-\u003eget_arr_element(i));\n    }\n};"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "class CVAccessor {\n    int arr[5];\n\n  public:\n    const int\u0026 get_arr_element(size_t i) const { return arr[i]; }\n\n    int\u0026 get_arr_element(size_t i) {\n        return const_cast\u003cint\u0026\u003e(const_cast\u003cconst CVAccessor*\u003e(this)-\u003eget_arr_element(i));\n    }\n};",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524296531,
        "id": "45b3b318-01f6-46d8-8aa7-89b8073ad919",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524296531,
        "parent_id": "8cb58290-3535-4b28-b01f-81262ac0be66",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This prevents unnecessary duplication of code."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This prevents unnecessary duplication of code."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550800680000,
        "id": "120ee853-4073-4f14-a63a-9a2a0be989fe",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550800680000,
        "parent_id": "8cb58290-3535-4b28-b01f-81262ac0be66",
        "parent_table": "block",
        "type": "text",
        "version": 4
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524296531,
        "id": "e013b7a1-ef89-491a-9884-e4b250c2bfad",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550800680000,
        "parent_id": "8cb58290-3535-4b28-b01f-81262ac0be66",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As with regular pointers, if "
            ],
            [
              "this",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is "
            ],
            [
              "volatile",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (including "
            ],
            [
              "const volatile",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "), it is loaded from memory each time it is accessed, instead of being cached. This has the same effects on optimization as declaring any other pointer "
            ],
            [
              "volatile",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " would, so care should be taken."
            ]
          ]
        },
        "type": "text",
        "version": 4,
        "inline_content": [
          {
            "Text": "As with regular pointers, if "
          },
          {
            "Text": "this",
            "AttrFlags": 2
          },
          {
            "Text": " is "
          },
          {
            "Text": "volatile",
            "AttrFlags": 2
          },
          {
            "Text": " (including "
          },
          {
            "Text": "const volatile",
            "AttrFlags": 2
          },
          {
            "Text": "), it is loaded from memory each time it is accessed, instead of being cached. This has the same effects on optimization as declaring any other pointer "
          },
          {
            "Text": "volatile",
            "AttrFlags": 2
          },
          {
            "Text": " would, so care should be taken."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550800680000,
        "id": "f2502395-a573-4a30-b028-7a37a0f6a1ed",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550800680000,
        "parent_id": "8cb58290-3535-4b28-b01f-81262ac0be66",
        "parent_table": "block",
        "type": "text",
        "version": 4
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524296532,
        "id": "b4546332-b1c4-4291-ba92-de97cd2aad1c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524296532,
        "parent_id": "8cb58290-3535-4b28-b01f-81262ac0be66",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note that if an instance is cv-qualified, the only member functions it is allowed to access are member functions whose "
            ],
            [
              "this",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " pointer is at least as cv-qualified as the instance itself:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note that if an instance is cv-qualified, the only member functions it is allowed to access are member functions whose "
          },
          {
            "Text": "this",
            "AttrFlags": 2
          },
          {
            "Text": " pointer is at least as cv-qualified as the instance itself:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524296533,
        "id": "57225f7d-2dcb-4efb-9325-324ae7c97ef6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524296533,
        "parent_id": "8cb58290-3535-4b28-b01f-81262ac0be66",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Non-cv instances can access any member functions."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Non-cv instances can access any member functions."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524296533,
        "id": "e7f60ee0-b9b6-4184-853d-ad8a614709f6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524296533,
        "parent_id": "8cb58290-3535-4b28-b01f-81262ac0be66",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " instances can access "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "const volatile",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " functions."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": " instances can access "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "const volatile",
            "AttrFlags": 2
          },
          {
            "Text": " functions."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524296533,
        "id": "c02ed67b-e1ba-43bd-a0d5-4abcb6437014",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524296533,
        "parent_id": "8cb58290-3535-4b28-b01f-81262ac0be66",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "volatile",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " instances can access "
            ],
            [
              "volatile",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "const volatile",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " functions."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "volatile",
            "AttrFlags": 2
          },
          {
            "Text": " instances can access "
          },
          {
            "Text": "volatile",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "const volatile",
            "AttrFlags": 2
          },
          {
            "Text": " functions."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524296534,
        "id": "135e683d-e50a-4289-b996-2e202824e704",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524296534,
        "parent_id": "8cb58290-3535-4b28-b01f-81262ac0be66",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "const volatile",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " instances can access "
            ],
            [
              "const volatile",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " functions."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "const volatile",
            "AttrFlags": 2
          },
          {
            "Text": " instances can access "
          },
          {
            "Text": "const volatile",
            "AttrFlags": 2
          },
          {
            "Text": " functions."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524296535,
        "id": "7fd81b57-bd00-44b6-ac0b-5dcb65ef4545",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524296535,
        "parent_id": "8cb58290-3535-4b28-b01f-81262ac0be66",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This is one of the key tenets of "
            ],
            [
              "const",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%2B%2B/7217/const-correctness#t=201610111815341169566"
                ]
              ]
            ],
            [
              " correctness",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%2B%2B/7217/const-correctness#t=201610111815341169566"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This is one of the key tenets of "
          },
          {
            "Text": "const",
            "AttrFlags": 2,
            "Link": "http://stackoverflow.com/documentation/c%2B%2B/7217/const-correctness#t=201610111815341169566"
          },
          {
            "Text": " correctness",
            "Link": "http://stackoverflow.com/documentation/c%2B%2B/7217/const-correctness#t=201610111815341169566"
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524296535,
        "id": "14406852-ce08-4306-a92e-5b30eaef2c35",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550800680000,
        "parent_id": "8cb58290-3535-4b28-b01f-81262ac0be66",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "struct CVAccess {\n    void    func()                {}\n    void  func_c() const          {}\n    void  func_v() volatile       {}\n    void func_cv() const volatile {}\n};\n\nCVAccess cva;\ncva.func();    // Good.\ncva.func_c();  // Good.\ncva.func_v();  // Good.\ncva.func_cv(); // Good.\n\nconst CVAccess c_cva;\nc_cva.func();    // Error.\nc_cva.func_c();  // Good.\nc_cva.func_v();  // Error.\nc_cva.func_cv(); // Good.\n\nvolatile CVAccess v_cva;\nv_cva.func();    // Error.\nv_cva.func_c();  // Error.\nv_cva.func_v();  // Good.\nv_cva.func_cv(); // Good.\n\nconst volatile CVAccess cv_cva;\ncv_cva.func();    // Error.\ncv_cva.func_c();  // Error.\ncv_cva.func_v();  // Error.\ncv_cva.func_cv(); // Good."
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "struct CVAccess {\n    void    func()                {}\n    void  func_c() const          {}\n    void  func_v() volatile       {}\n    void func_cv() const volatile {}\n};\n\nCVAccess cva;\ncva.func();    // Good.\ncva.func_c();  // Good.\ncva.func_v();  // Good.\ncva.func_cv(); // Good.\n\nconst CVAccess c_cva;\nc_cva.func();    // Error.\nc_cva.func_c();  // Good.\nc_cva.func_v();  // Error.\nc_cva.func_cv(); // Good.\n\nvolatile CVAccess v_cva;\nv_cva.func();    // Error.\nv_cva.func_c();  // Error.\nv_cva.func_v();  // Good.\nv_cva.func_cv(); // Good.\n\nconst volatile CVAccess cv_cva;\ncv_cva.func();    // Error.\ncv_cva.func_c();  // Error.\ncv_cva.func_v();  // Error.\ncv_cva.func_cv(); // Good.",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550800680000,
        "id": "627dbc5a-856b-409c-a796-8949862e24aa",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550800680000,
        "parent_id": "8cb58290-3535-4b28-b01f-81262ac0be66",
        "parent_table": "block",
        "type": "text",
        "version": 3
      }
    ],
    "title": "this Pointer CV-Qualifiers",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}