{
  "ID": "c717632b-31ac-494f-afab-d1c32106bae2",
  "Root": {
    "alive": true,
    "content": [
      "afacbbcf-af03-495a-9147-3a04a13f6dfd",
      "379910c5-82fb-4563-83e6-07e84bb0e65d",
      "5dd8b47c-eec6-4662-86e0-3c0f1b8cfa15",
      "ef875298-7750-4921-a656-58dbc529a563",
      "908db5e2-909a-4dd7-9d3e-80f0d0044a1a",
      "0b8d6e9b-d487-425d-be9b-7da2b7777b52",
      "00b33dbb-767c-4a98-b0e0-07bd514245ff",
      "db0f5fa3-a1c0-48df-873e-ab2018c629e2"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550524706566,
    "id": "c717632b-31ac-494f-afab-d1c32106bae2",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550524706566,
    "parent_id": "29483c03-d3f3-426c-bd91-6dba06c1c86f",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "030 Template Type Deduction"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524706564,
        "id": "afacbbcf-af03-495a-9147-3a04a13f6dfd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524706564,
        "parent_id": "c717632b-31ac-494f-afab-d1c32106bae2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Template Generic Syntax"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Template Generic Syntax"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524706564,
        "id": "379910c5-82fb-4563-83e6-07e84bb0e65d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524706564,
        "parent_id": "c717632b-31ac-494f-afab-d1c32106bae2",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "template\u003ctypename T\u003e\nvoid f(ParamType param);\n\nf(expr);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "template\u003ctypename T\u003e\nvoid f(ParamType param);\n\nf(expr);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524706565,
        "id": "5dd8b47c-eec6-4662-86e0-3c0f1b8cfa15",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524706565,
        "parent_id": "c717632b-31ac-494f-afab-d1c32106bae2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Case 1: "
            ],
            [
              "ParamType",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is a Reference or Pointer, but not a Universal or Forward Reference. In this case type deduction works this way. The compiler ignores the reference part if it exists in "
            ],
            [
              "expr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". The compiler then pattern-matches "
            ],
            [
              "expr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "’s type against "
            ],
            [
              "ParamType",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to determing "
            ],
            [
              "T",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Case 1: "
          },
          {
            "Text": "ParamType",
            "AttrFlags": 2
          },
          {
            "Text": " is a Reference or Pointer, but not a Universal or Forward Reference. In this case type deduction works this way. The compiler ignores the reference part if it exists in "
          },
          {
            "Text": "expr",
            "AttrFlags": 2
          },
          {
            "Text": ". The compiler then pattern-matches "
          },
          {
            "Text": "expr",
            "AttrFlags": 2
          },
          {
            "Text": "’s type against "
          },
          {
            "Text": "ParamType",
            "AttrFlags": 2
          },
          {
            "Text": " to determing "
          },
          {
            "Text": "T",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524706565,
        "id": "ef875298-7750-4921-a656-58dbc529a563",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524706565,
        "parent_id": "c717632b-31ac-494f-afab-d1c32106bae2",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "template\u003ctypename T\u003e\nvoid f(T\u0026 param);      //param is a reference\n\nint x = 27;            // x is an int\nconst int cx = x;      // cx is a const int\nconst int\u0026 rx = x;     // rx is a reference to x as a const int\n\nf(x);                  // T is int, param's type is int\u0026\nf(cx);                 // T is const int, param's type is const int\u0026\nf(rx);                 // T is const int, param's type is const int\u0026"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "template\u003ctypename T\u003e\nvoid f(T\u0026 param);      //param is a reference\n\nint x = 27;            // x is an int\nconst int cx = x;      // cx is a const int\nconst int\u0026 rx = x;     // rx is a reference to x as a const int\n\nf(x);                  // T is int, param's type is int\u0026\nf(cx);                 // T is const int, param's type is const int\u0026\nf(rx);                 // T is const int, param's type is const int\u0026",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524706565,
        "id": "908db5e2-909a-4dd7-9d3e-80f0d0044a1a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524706565,
        "parent_id": "c717632b-31ac-494f-afab-d1c32106bae2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Case 2: "
            ],
            [
              "ParamType",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is a Universal Reference or Forward Reference. In this case type deduction is the same as in case 1 if the "
            ],
            [
              "expr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is an rvalue. If "
            ],
            [
              "expr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is an lvalue, both "
            ],
            [
              "T",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "ParamType",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " are deduced to be lvalue references."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Case 2: "
          },
          {
            "Text": "ParamType",
            "AttrFlags": 2
          },
          {
            "Text": " is a Universal Reference or Forward Reference. In this case type deduction is the same as in case 1 if the "
          },
          {
            "Text": "expr",
            "AttrFlags": 2
          },
          {
            "Text": " is an rvalue. If "
          },
          {
            "Text": "expr",
            "AttrFlags": 2
          },
          {
            "Text": " is an lvalue, both "
          },
          {
            "Text": "T",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "ParamType",
            "AttrFlags": 2
          },
          {
            "Text": " are deduced to be lvalue references."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524706565,
        "id": "0b8d6e9b-d487-425d-be9b-7da2b7777b52",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524706565,
        "parent_id": "c717632b-31ac-494f-afab-d1c32106bae2",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "template\u003ctypename T\u003e\nvoid f(T\u0026\u0026 param);     // param is a universal reference\n\nint x = 27;            // x is an int\nconst int cx = x;      // cx is a const int\nconst int\u0026 rx = x;     // rx is a reference to x as a const int\n\nf(x);                  // x is lvalue, so T is int\u0026, param's type is also int\u0026\nf(cx);                 // cx is lvalue, so T is const int\u0026, param's type is also const int\u0026\nf(rx);                 // rx is lvalue, so T is const int\u0026, param's type is also const int\u0026\nf(27);                 // 27 is rvalue, so T is int, param's type is therefore int\u0026\u0026"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "template\u003ctypename T\u003e\nvoid f(T\u0026\u0026 param);     // param is a universal reference\n\nint x = 27;            // x is an int\nconst int cx = x;      // cx is a const int\nconst int\u0026 rx = x;     // rx is a reference to x as a const int\n\nf(x);                  // x is lvalue, so T is int\u0026, param's type is also int\u0026\nf(cx);                 // cx is lvalue, so T is const int\u0026, param's type is also const int\u0026\nf(rx);                 // rx is lvalue, so T is const int\u0026, param's type is also const int\u0026\nf(27);                 // 27 is rvalue, so T is int, param's type is therefore int\u0026\u0026",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524706565,
        "id": "00b33dbb-767c-4a98-b0e0-07bd514245ff",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524706565,
        "parent_id": "c717632b-31ac-494f-afab-d1c32106bae2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Case 3: "
            ],
            [
              "ParamType",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is Neither a Pointer nor a Reference. If "
            ],
            [
              "expr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is a reference the reference part is ignored. If "
            ],
            [
              "expr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is const that is ignored as well. If it is volatile that is also ignored when deducing T’s type."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Case 3: "
          },
          {
            "Text": "ParamType",
            "AttrFlags": 2
          },
          {
            "Text": " is Neither a Pointer nor a Reference. If "
          },
          {
            "Text": "expr",
            "AttrFlags": 2
          },
          {
            "Text": " is a reference the reference part is ignored. If "
          },
          {
            "Text": "expr",
            "AttrFlags": 2
          },
          {
            "Text": " is const that is ignored as well. If it is volatile that is also ignored when deducing T’s type."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524706566,
        "id": "db0f5fa3-a1c0-48df-873e-ab2018c629e2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524706566,
        "parent_id": "c717632b-31ac-494f-afab-d1c32106bae2",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "template\u003ctypename T\u003e\nvoid f(T param);       // param is now passed by value\n\nint x = 27;            // x is an int\nconst int cx = x;      // cx is a const int\nconst int\u0026 rx = x;     // rx is a reference to x as a const int\n\nf(x);                  // T's and param's types are both int\nf(cx);                 // T's and param's types are again both int\nf(rx);                 // T's and param's types are still both int"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "template\u003ctypename T\u003e\nvoid f(T param);       // param is now passed by value\n\nint x = 27;            // x is an int\nconst int cx = x;      // cx is a const int\nconst int\u0026 rx = x;     // rx is a reference to x as a const int\n\nf(x);                  // T's and param's types are both int\nf(cx);                 // T's and param's types are again both int\nf(rx);                 // T's and param's types are still both int",
        "code_language": "Plain Text"
      }
    ],
    "title": "030 Template Type Deduction"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}