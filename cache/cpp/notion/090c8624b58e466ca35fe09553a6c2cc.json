{
  "ID": "090c8624-b58e-466c-a35f-e09553a6c2cc",
  "Root": {
    "alive": true,
    "content": [
      "fa563af2-2302-4359-89b8-4a5fd50c631b",
      "d0ad5816-ceb4-4bd6-9edb-e33990d840c9",
      "4a216756-087f-4139-8a33-bb3ce71b7889",
      "2839be19-5213-4c31-989c-7a0132b72d48",
      "7ea341ed-a78e-4365-8feb-c1fc7862771d",
      "ec58b38d-a77d-4513-8c2f-9b04a1cc737a",
      "34353e3d-ed3d-4712-88c1-a2578eb153d0",
      "a6ee547d-bb7d-4d29-a109-f0599fc6f317",
      "abc64c1e-669e-4940-84b0-60a0dd8fa23c",
      "3a5ae08f-2892-4e5c-8e6f-ea3c04248a71",
      "864ada57-3442-4291-a5f8-4c9efa1979e5",
      "699c394a-276f-40ae-859a-e6cd2bfdaffb",
      "c1817955-2272-42c5-8cc9-8b49b6f2f1d7",
      "20559fac-1a47-44c7-ae61-adcbe45cd9f8",
      "4c41c4c2-7b96-4f12-a94d-c5249e20dc58",
      "e1e04db3-3a22-4a91-8b7d-dc0b8fec444b",
      "8882cc83-9f72-4e28-99ba-ee82725e8a51",
      "64991ebf-47c4-4019-97bb-d8019bb038f5",
      "a56980d7-1a81-4369-8864-96165051121d",
      "ebf5bb3f-0763-4b18-8f48-f9391534e2fc",
      "59590766-26f3-40a3-aa89-f5aa43688772",
      "ccd8e4d1-dda3-4ce6-94aa-96040772b6a7",
      "2b4701f3-8a95-4e96-b1ac-dd7cf411163d",
      "58ccffed-89d4-400d-a36b-084eefc160c4",
      "c97a31cc-04c4-42d7-8240-033bf17a885f",
      "c1e1c1c8-45da-4504-8c9c-d7e2cc82f2fa",
      "097eeec4-a391-4411-88ae-5e7bcb4ef943",
      "af9b9678-f6e8-44c5-bcda-b8d480d0baa8",
      "2444fda2-5f44-4963-b70b-cda207ae3ebb",
      "0cffea22-9a0a-49e1-907a-334e04df93bd",
      "52c8b8b3-536a-4f56-898c-c3e4a31f7705",
      "963f53f7-52a9-4877-9847-8f428cd7bf0a",
      "1821ef9e-66fd-41a0-a1ae-5873cfe12a9a",
      "d19e9e03-c03d-40fc-9121-eb08628ead8a",
      "bd0d1eb2-d7d4-4d7b-b467-8676e4a8ee50"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550521946796,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "090c8624-b58e-466c-a35f-e09553a6c2cc",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550656740000,
    "parent_id": "94bfa868-4e02-4b90-841b-817c34132524",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Templates"
        ]
      ]
    },
    "type": "page",
    "version": 10,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521946778,
        "id": "fa563af2-2302-4359-89b8-4a5fd50c631b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521946778,
        "parent_id": "090c8624-b58e-466c-a35f-e09553a6c2cc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Introduction"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Introduction"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521946781,
        "id": "d0ad5816-ceb4-4bd6-9edb-e33990d840c9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521946781,
        "parent_id": "090c8624-b58e-466c-a35f-e09553a6c2cc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Classes, functions, and (since C++14) variables can be templated. A template is a piece of code with some free parameters that will become a concrete class, function, or variable when all parameters are specified. Parameters can be types, values, or themselves templates. A well-known template is "
            ],
            [
              "std::vector",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", which becomes a concrete container type when the element type is specified, "
            ],
            [
              "e.g.,",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "std::vector\u003cint\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Classes, functions, and (since C++14) variables can be templated. A template is a piece of code with some free parameters that will become a concrete class, function, or variable when all parameters are specified. Parameters can be types, values, or themselves templates. A well-known template is "
          },
          {
            "Text": "std::vector",
            "AttrFlags": 2
          },
          {
            "Text": ", which becomes a concrete container type when the element type is specified, "
          },
          {
            "Text": "e.g.,",
            "AttrFlags": 4
          },
          {
            "Text": " "
          },
          {
            "Text": "std::vector\u003cint\u003e",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521946781,
        "id": "4a216756-087f-4139-8a33-bb3ce71b7889",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521946781,
        "parent_id": "090c8624-b58e-466c-a35f-e09553a6c2cc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Syntax"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Syntax"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521946782,
        "id": "2839be19-5213-4c31-989c-7a0132b72d48",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521946782,
        "parent_id": "090c8624-b58e-466c-a35f-e09553a6c2cc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "template \u003c "
            ],
            [
              "template-parameter-list",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " \u003e "
            ],
            [
              "declaration",
              [
                [
                  "i"
                ]
              ]
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "template \u003c "
          },
          {
            "Text": "template-parameter-list",
            "AttrFlags": 4
          },
          {
            "Text": " \u003e "
          },
          {
            "Text": "declaration",
            "AttrFlags": 4
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521946783,
        "id": "7ea341ed-a78e-4365-8feb-c1fc7862771d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521946783,
        "parent_id": "090c8624-b58e-466c-a35f-e09553a6c2cc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "export template \u003c "
            ],
            [
              "template-parameter-list",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " \u003e "
            ],
            [
              "declaration",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " /* until C++11 */"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "export template \u003c "
          },
          {
            "Text": "template-parameter-list",
            "AttrFlags": 4
          },
          {
            "Text": " \u003e "
          },
          {
            "Text": "declaration",
            "AttrFlags": 4
          },
          {
            "Text": " /* until C++11 */"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521946783,
        "id": "ec58b38d-a77d-4513-8c2f-9b04a1cc737a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521946783,
        "parent_id": "090c8624-b58e-466c-a35f-e09553a6c2cc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "template \u003c\u003e "
            ],
            [
              "declaration",
              [
                [
                  "i"
                ]
              ]
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "template \u003c\u003e "
          },
          {
            "Text": "declaration",
            "AttrFlags": 4
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521946783,
        "id": "34353e3d-ed3d-4712-88c1-a2578eb153d0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521946783,
        "parent_id": "090c8624-b58e-466c-a35f-e09553a6c2cc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "template "
            ],
            [
              "declaration",
              [
                [
                  "i"
                ]
              ]
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "template "
          },
          {
            "Text": "declaration",
            "AttrFlags": 4
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521946783,
        "id": "a6ee547d-bb7d-4d29-a109-f0599fc6f317",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521946783,
        "parent_id": "090c8624-b58e-466c-a35f-e09553a6c2cc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "extern template "
            ],
            [
              "declaration",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " /* since C++11 */"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "extern template "
          },
          {
            "Text": "declaration",
            "AttrFlags": 4
          },
          {
            "Text": " /* since C++11 */"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521946784,
        "id": "abc64c1e-669e-4940-84b0-60a0dd8fa23c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521946784,
        "parent_id": "090c8624-b58e-466c-a35f-e09553a6c2cc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "template \u003c "
            ],
            [
              "template-parameter-list",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " \u003e class …("
            ],
            [
              "opt",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ") "
            ],
            [
              "identifier",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              "("
            ],
            [
              "opt",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ")"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "template \u003c "
          },
          {
            "Text": "template-parameter-list",
            "AttrFlags": 4
          },
          {
            "Text": " \u003e class …("
          },
          {
            "Text": "opt",
            "AttrFlags": 4
          },
          {
            "Text": ") "
          },
          {
            "Text": "identifier",
            "AttrFlags": 4
          },
          {
            "Text": "("
          },
          {
            "Text": "opt",
            "AttrFlags": 4
          },
          {
            "Text": ")"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521946784,
        "id": "3a5ae08f-2892-4e5c-8e6f-ea3c04248a71",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521946784,
        "parent_id": "090c8624-b58e-466c-a35f-e09553a6c2cc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "template \u003c "
            ],
            [
              "template-parameter-list",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " \u003e class "
            ],
            [
              "identifier",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              "("
            ],
            [
              "opt",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ") = "
            ],
            [
              "id-expression",
              [
                [
                  "i"
                ]
              ]
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "template \u003c "
          },
          {
            "Text": "template-parameter-list",
            "AttrFlags": 4
          },
          {
            "Text": " \u003e class "
          },
          {
            "Text": "identifier",
            "AttrFlags": 4
          },
          {
            "Text": "("
          },
          {
            "Text": "opt",
            "AttrFlags": 4
          },
          {
            "Text": ") = "
          },
          {
            "Text": "id-expression",
            "AttrFlags": 4
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521946785,
        "id": "864ada57-3442-4291-a5f8-4c9efa1979e5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521946785,
        "parent_id": "090c8624-b58e-466c-a35f-e09553a6c2cc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "template \u003c "
            ],
            [
              "template-parameter-list",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " \u003e typename …("
            ],
            [
              "opt",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ") "
            ],
            [
              "identifier",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              "("
            ],
            [
              "opt",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ") /* since C++17 */"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "template \u003c "
          },
          {
            "Text": "template-parameter-list",
            "AttrFlags": 4
          },
          {
            "Text": " \u003e typename …("
          },
          {
            "Text": "opt",
            "AttrFlags": 4
          },
          {
            "Text": ") "
          },
          {
            "Text": "identifier",
            "AttrFlags": 4
          },
          {
            "Text": "("
          },
          {
            "Text": "opt",
            "AttrFlags": 4
          },
          {
            "Text": ") /* since C++17 */"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521946785,
        "id": "699c394a-276f-40ae-859a-e6cd2bfdaffb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521946785,
        "parent_id": "090c8624-b58e-466c-a35f-e09553a6c2cc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "template \u003c "
            ],
            [
              "template-parameter-list",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " \u003e typename "
            ],
            [
              "identifier",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              "("
            ],
            [
              "opt",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ") = "
            ],
            [
              "id-expression",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " /* since C++17 */"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "template \u003c "
          },
          {
            "Text": "template-parameter-list",
            "AttrFlags": 4
          },
          {
            "Text": " \u003e typename "
          },
          {
            "Text": "identifier",
            "AttrFlags": 4
          },
          {
            "Text": "("
          },
          {
            "Text": "opt",
            "AttrFlags": 4
          },
          {
            "Text": ") = "
          },
          {
            "Text": "id-expression",
            "AttrFlags": 4
          },
          {
            "Text": " /* since C++17 */"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521946785,
        "id": "c1817955-2272-42c5-8cc9-8b49b6f2f1d7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521946785,
        "parent_id": "090c8624-b58e-466c-a35f-e09553a6c2cc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "postfix-expression",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " . template "
            ],
            [
              "id-expression",
              [
                [
                  "i"
                ]
              ]
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "postfix-expression",
            "AttrFlags": 4
          },
          {
            "Text": " . template "
          },
          {
            "Text": "id-expression",
            "AttrFlags": 4
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521946786,
        "id": "20559fac-1a47-44c7-ae61-adcbe45cd9f8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521946786,
        "parent_id": "090c8624-b58e-466c-a35f-e09553a6c2cc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "postfix-expression",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " -\u003e template "
            ],
            [
              "id-expression",
              [
                [
                  "i"
                ]
              ]
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "postfix-expression",
            "AttrFlags": 4
          },
          {
            "Text": " -\u003e template "
          },
          {
            "Text": "id-expression",
            "AttrFlags": 4
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521946786,
        "id": "4c41c4c2-7b96-4f12-a94d-c5249e20dc58",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521946786,
        "parent_id": "090c8624-b58e-466c-a35f-e09553a6c2cc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "nested-name-specifier",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "template",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "simple-template-id",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "::",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "nested-name-specifier",
            "AttrFlags": 4
          },
          {
            "Text": " "
          },
          {
            "Text": "template",
            "AttrFlags": 2
          },
          {
            "Text": " "
          },
          {
            "Text": "simple-template-id",
            "AttrFlags": 4
          },
          {
            "Text": " "
          },
          {
            "Text": "::",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521946786,
        "id": "e1e04db3-3a22-4a91-8b7d-dc0b8fec444b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521946786,
        "parent_id": "090c8624-b58e-466c-a35f-e09553a6c2cc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Remarks"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Remarks"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521946788,
        "id": "8882cc83-9f72-4e28-99ba-ee82725e8a51",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521946788,
        "parent_id": "090c8624-b58e-466c-a35f-e09553a6c2cc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The word "
            ],
            [
              "template",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is a "
            ],
            [
              "keyword",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%2B%2B/4891/keywords"
                ]
              ]
            ],
            [
              " with five different meanings in the C++ language, depending on the context."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The word "
          },
          {
            "Text": "template",
            "AttrFlags": 2
          },
          {
            "Text": " is a "
          },
          {
            "Text": "keyword",
            "Link": "http://stackoverflow.com/documentation/c%2B%2B/4891/keywords"
          },
          {
            "Text": " with five different meanings in the C++ language, depending on the context."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521946790,
        "id": "64991ebf-47c4-4019-97bb-d8019bb038f5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521946790,
        "parent_id": "090c8624-b58e-466c-a35f-e09553a6c2cc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When followed by a list of template parameters enclosed in "
            ],
            [
              "\u003c\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", it declares a template such as a "
            ],
            [
              "class template",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%2B%2B/460/templates/3999/basic-class-template"
                ]
              ]
            ],
            [
              ", a "
            ],
            [
              "function template",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%2B%2B/460/templates/1517/function-templates"
                ]
              ]
            ],
            [
              ", or a "
            ],
            [
              "partial specialization",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%2B%2B/460/templates/6253/partial-template-specialization"
                ]
              ]
            ],
            [
              " of an existing template."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "When followed by a list of template parameters enclosed in "
          },
          {
            "Text": "\u003c\u003e",
            "AttrFlags": 2
          },
          {
            "Text": ", it declares a template such as a "
          },
          {
            "Text": "class template",
            "Link": "http://stackoverflow.com/documentation/c%2B%2B/460/templates/3999/basic-class-template"
          },
          {
            "Text": ", a "
          },
          {
            "Text": "function template",
            "Link": "http://stackoverflow.com/documentation/c%2B%2B/460/templates/1517/function-templates"
          },
          {
            "Text": ", or a "
          },
          {
            "Text": "partial specialization",
            "Link": "http://stackoverflow.com/documentation/c%2B%2B/460/templates/6253/partial-template-specialization"
          },
          {
            "Text": " of an existing template."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521946790,
        "id": "a56980d7-1a81-4369-8864-96165051121d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521946790,
        "parent_id": "090c8624-b58e-466c-a35f-e09553a6c2cc",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "template \u003cclass T\u003e\nvoid increment(T\u0026 x) { ++x; }"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "template \u003cclass T\u003e\nvoid increment(T\u0026 x) { ++x; }",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521946791,
        "id": "ebf5bb3f-0763-4b18-8f48-f9391534e2fc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521946791,
        "parent_id": "090c8624-b58e-466c-a35f-e09553a6c2cc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When followed by an "
            ],
            [
              "empty",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "\u003c\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", it declares a an "
            ],
            [
              "explicit (full) specialization",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%2B%2B/460/templates/5054/template-specialization"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "When followed by an "
          },
          {
            "Text": "empty",
            "AttrFlags": 4
          },
          {
            "Text": " "
          },
          {
            "Text": "\u003c\u003e",
            "AttrFlags": 2
          },
          {
            "Text": ", it declares a an "
          },
          {
            "Text": "explicit (full) specialization",
            "Link": "http://stackoverflow.com/documentation/c%2B%2B/460/templates/5054/template-specialization"
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521946791,
        "id": "59590766-26f3-40a3-aa89-f5aa43688772",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521946791,
        "parent_id": "090c8624-b58e-466c-a35f-e09553a6c2cc",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "template \u003cclass T\u003e\nvoid print(T x);\n\ntemplate \u003c\u003e // \u003c-- keyword used in this sense here\nvoid print(const char* s) {\n    // output the content of the string\n    printf(\"%s\\n\", s);\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "template \u003cclass T\u003e\nvoid print(T x);\n\ntemplate \u003c\u003e // \u003c-- keyword used in this sense here\nvoid print(const char* s) {\n    // output the content of the string\n    printf(\"%s\\n\", s);\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521946792,
        "id": "ccd8e4d1-dda3-4ce6-94aa-96040772b6a7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521946792,
        "parent_id": "090c8624-b58e-466c-a35f-e09553a6c2cc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When followed by a declaration without "
            ],
            [
              "\u003c\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", it forms an "
            ],
            [
              "explicit instantiation",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%2B%2B/460/templates/28734/explicit-instantiation"
                ]
              ]
            ],
            [
              " declaration or definition."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "When followed by a declaration without "
          },
          {
            "Text": "\u003c\u003e",
            "AttrFlags": 2
          },
          {
            "Text": ", it forms an "
          },
          {
            "Text": "explicit instantiation",
            "Link": "http://stackoverflow.com/documentation/c%2B%2B/460/templates/28734/explicit-instantiation"
          },
          {
            "Text": " declaration or definition."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521946792,
        "id": "2b4701f3-8a95-4e96-b1ac-dd7cf411163d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521946792,
        "parent_id": "090c8624-b58e-466c-a35f-e09553a6c2cc",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "template \u003cclass T\u003e\nstd::set\u003cT\u003e make_singleton(T x) { return std::set\u003cT\u003e(x); }\n\ntemplate std::set\u003cint\u003e make_singleton(int x); // \u003c-- keyword used in this sense here"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "template \u003cclass T\u003e\nstd::set\u003cT\u003e make_singleton(T x) { return std::set\u003cT\u003e(x); }\n\ntemplate std::set\u003cint\u003e make_singleton(int x); // \u003c-- keyword used in this sense here",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521946793,
        "id": "58ccffed-89d4-400d-a36b-084eefc160c4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521946793,
        "parent_id": "090c8624-b58e-466c-a35f-e09553a6c2cc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Within a template parameter list, it introduces a "
            ],
            [
              "template template parameter",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%2B%2B/460/templates/10838/template-template-parameters"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Within a template parameter list, it introduces a "
          },
          {
            "Text": "template template parameter",
            "Link": "http://stackoverflow.com/documentation/c%2B%2B/460/templates/10838/template-template-parameters"
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521946793,
        "id": "c97a31cc-04c4-42d7-8240-033bf17a885f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521946793,
        "parent_id": "090c8624-b58e-466c-a35f-e09553a6c2cc",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "template \u003cclass T, template \u003cclass U\u003e class Alloc\u003e\n//                 ^^^^^^^^ keyword used in this sense here\nclass List {\n    struct Node {\n        T value;\n        Node* next;\n    };\n    Alloc\u003cNode\u003e allocator;\n    Node* allocate_node() {\n        return allocator.allocate(sizeof(T));\n    }\n    // ...\n};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "template \u003cclass T, template \u003cclass U\u003e class Alloc\u003e\n//                 ^^^^^^^^ keyword used in this sense here\nclass List {\n    struct Node {\n        T value;\n        Node* next;\n    };\n    Alloc\u003cNode\u003e allocator;\n    Node* allocate_node() {\n        return allocator.allocate(sizeof(T));\n    }\n    // ...\n};",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521946794,
        "id": "c1e1c1c8-45da-4504-8c9c-d7e2cc82f2fa",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521946794,
        "parent_id": "090c8624-b58e-466c-a35f-e09553a6c2cc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "After the scope resolution operator "
            ],
            [
              "::",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and the class member access operators "
            ],
            [
              ".",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "-\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", it specifies that the following name is a template."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "After the scope resolution operator "
          },
          {
            "Text": "::",
            "AttrFlags": 2
          },
          {
            "Text": " and the class member access operators "
          },
          {
            "Text": ".",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "-\u003e",
            "AttrFlags": 2
          },
          {
            "Text": ", it specifies that the following name is a template."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521946794,
        "id": "097eeec4-a391-4411-88ae-5e7bcb4ef943",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521946794,
        "parent_id": "090c8624-b58e-466c-a35f-e09553a6c2cc",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "struct Allocator {\n    template \u003cclass T\u003e\n    T* allocate();\n};\n\ntemplate \u003cclass T, class Alloc\u003e\nclass List {\n    struct Node {\n        T value;\n        Node* next;\n    }\n    Alloc allocator;\n    Node* allocate_node() {\n        // return allocator.allocate\u003cNode\u003e();       // error: \u003c and \u003e are interpreted as\n                                                    // comparison operators\n        return allocator.template allocate\u003cNode\u003e(); // ok; allocate is a template\n        //               ^^^^^^^^ keyword used in this sense here\n    }\n};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "struct Allocator {\n    template \u003cclass T\u003e\n    T* allocate();\n};\n\ntemplate \u003cclass T, class Alloc\u003e\nclass List {\n    struct Node {\n        T value;\n        Node* next;\n    }\n    Alloc allocator;\n    Node* allocate_node() {\n        // return allocator.allocate\u003cNode\u003e();       // error: \u003c and \u003e are interpreted as\n                                                    // comparison operators\n        return allocator.template allocate\u003cNode\u003e(); // ok; allocate is a template\n        //               ^^^^^^^^ keyword used in this sense here\n    }\n};",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521946795,
        "id": "af9b9678-f6e8-44c5-bcda-b8d480d0baa8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521946795,
        "parent_id": "090c8624-b58e-466c-a35f-e09553a6c2cc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Before C++11, a template could be declared with the "
            ],
            [
              "export",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "keyword",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%2B%2B/4891/keywords"
                ]
              ]
            ],
            [
              ", making it into an "
            ],
            [
              "exported",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " template. An exported template’s definition does not need to be present in every translation unit in which the template is instantiated. For example, the following was supposed to work:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Before C++11, a template could be declared with the "
          },
          {
            "Text": "export",
            "AttrFlags": 2
          },
          {
            "Text": " "
          },
          {
            "Text": "keyword",
            "Link": "http://stackoverflow.com/documentation/c%2B%2B/4891/keywords"
          },
          {
            "Text": ", making it into an "
          },
          {
            "Text": "exported",
            "AttrFlags": 4
          },
          {
            "Text": " template. An exported template’s definition does not need to be present in every translation unit in which the template is instantiated. For example, the following was supposed to work:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521946795,
        "id": "2444fda2-5f44-4963-b70b-cda207ae3ebb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521946795,
        "parent_id": "090c8624-b58e-466c-a35f-e09553a6c2cc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "foo.h",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "foo.h",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521946795,
        "id": "0cffea22-9a0a-49e1-907a-334e04df93bd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521946795,
        "parent_id": "090c8624-b58e-466c-a35f-e09553a6c2cc",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#ifndef FOO_H\n#define FOO_H\nexport template \u003cclass T\u003e T identity(T x);\n#endif"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#ifndef FOO_H\n#define FOO_H\nexport template \u003cclass T\u003e T identity(T x);\n#endif",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521946795,
        "id": "52c8b8b3-536a-4f56-898c-c3e4a31f7705",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521946795,
        "parent_id": "090c8624-b58e-466c-a35f-e09553a6c2cc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "foo.cpp",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "foo.cpp",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521946795,
        "id": "963f53f7-52a9-4877-9847-8f428cd7bf0a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521946795,
        "parent_id": "090c8624-b58e-466c-a35f-e09553a6c2cc",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \"foo.h\"\ntemplate \u003cclass T\u003e T identity(T x) { return x; }"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \"foo.h\"\ntemplate \u003cclass T\u003e T identity(T x) { return x; }",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521946796,
        "id": "1821ef9e-66fd-41a0-a1ae-5873cfe12a9a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521946796,
        "parent_id": "090c8624-b58e-466c-a35f-e09553a6c2cc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "main.cpp",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "main.cpp",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521946796,
        "id": "d19e9e03-c03d-40fc-9121-eb08628ead8a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521946796,
        "parent_id": "090c8624-b58e-466c-a35f-e09553a6c2cc",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \"foo.h\"\nint main() {\n    const int x = identity(42); // x is 42\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \"foo.h\"\nint main() {\n    const int x = identity(42); // x is 42\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521946796,
        "id": "bd0d1eb2-d7d4-4d7b-b467-8676e4a8ee50",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521946796,
        "parent_id": "090c8624-b58e-466c-a35f-e09553a6c2cc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Due to difficulty of implementation, the "
            ],
            [
              "export",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " keyword was not supported by most major compilers. It was removed in C++11; now, it is illegal to use the "
            ],
            [
              "export",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " keyword at all. Instead, it is usually necessary to define templates in headers (in contrast to non-template functions, which are usually "
            ],
            [
              "not",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " defined in headers). See http://stackoverflow.com/questions/495021/why-can-templates-only-be-implemented-in-the-header-file"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Due to difficulty of implementation, the "
          },
          {
            "Text": "export",
            "AttrFlags": 2
          },
          {
            "Text": " keyword was not supported by most major compilers. It was removed in C++11; now, it is illegal to use the "
          },
          {
            "Text": "export",
            "AttrFlags": 2
          },
          {
            "Text": " keyword at all. Instead, it is usually necessary to define templates in headers (in contrast to non-template functions, which are usually "
          },
          {
            "Text": "not",
            "AttrFlags": 4
          },
          {
            "Text": " defined in headers). See http://stackoverflow.com/questions/495021/why-can-templates-only-be-implemented-in-the-header-file"
          }
        ]
      }
    ],
    "title": "Templates",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}