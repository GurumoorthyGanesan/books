{
  "ID": "43fa8019-9089-49fd-94ff-9444d864fdc3",
  "Root": {
    "alive": true,
    "content": [
      "41b0a567-ab11-4017-9982-20bdd6ea71ca",
      "11164c54-cc30-4c3d-a35e-5beea1650e3e",
      "f15cf731-ebb7-4efc-9f99-ef41507507d3",
      "e21fd158-a65a-4cd8-8f98-9e844e78a5c0",
      "cba16f4f-3a4c-4808-9967-69ba2eedc8ba",
      "204880cd-9caa-4bb4-9850-706620e0716f",
      "fde481c9-41c0-49d7-93cd-8252055ccf7e",
      "807f7661-f0b3-4e84-bd87-27c22d8d2c4a",
      "d7d91b1d-b7ab-4203-b3cd-cca1b82975c0"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550523094535,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "43fa8019-9089-49fd-94ff-9444d864fdc3",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551687259625,
    "parent_id": "10c1e1fe-bf0e-4f71-b1f2-173539570a03",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Type punning conversion"
        ]
      ]
    },
    "type": "page",
    "version": 4,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523094531,
        "id": "41b0a567-ab11-4017-9982-20bdd6ea71ca",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523094531,
        "parent_id": "43fa8019-9089-49fd-94ff-9444d864fdc3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A pointer (resp. reference) to an object type can be converted to a pointer (resp. reference) to any other object type using "
            ],
            [
              "reinterpret_cast",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". This does not call any constructors or conversion functions."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A pointer (resp. reference) to an object type can be converted to a pointer (resp. reference) to any other object type using "
          },
          {
            "Text": "reinterpret_cast",
            "AttrFlags": 2
          },
          {
            "Text": ". This does not call any constructors or conversion functions."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523094534,
        "id": "11164c54-cc30-4c3d-a35e-5beea1650e3e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523094534,
        "parent_id": "43fa8019-9089-49fd-94ff-9444d864fdc3",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int x = 42;\nchar* p = static_cast\u003cchar*\u003e(\u0026x);      // error: static_cast cannot perform this conversion\nchar* p = reinterpret_cast\u003cchar*\u003e(\u0026x); // OK\n*p = 'z';                              // maybe this modifies x (see below)"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int x = 42;\nchar* p = static_cast\u003cchar*\u003e(\u0026x);      // error: static_cast cannot perform this conversion\nchar* p = reinterpret_cast\u003cchar*\u003e(\u0026x); // OK\n*p = 'z';                              // maybe this modifies x (see below)",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523094534,
        "id": "f15cf731-ebb7-4efc-9f99-ef41507507d3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523094534,
        "parent_id": "43fa8019-9089-49fd-94ff-9444d864fdc3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The result of "
            ],
            [
              "reinterpret_cast",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " represents the same address as the operand, provided that the address is appropriately aligned for the destination type. Otherwise, the result is unspecified."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The result of "
          },
          {
            "Text": "reinterpret_cast",
            "AttrFlags": 2
          },
          {
            "Text": " represents the same address as the operand, provided that the address is appropriately aligned for the destination type. Otherwise, the result is unspecified."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523094534,
        "id": "e21fd158-a65a-4cd8-8f98-9e844e78a5c0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523094534,
        "parent_id": "43fa8019-9089-49fd-94ff-9444d864fdc3",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int x = 42;\nchar\u0026 r = reinterpret_cast\u003cchar\u0026\u003e(x);\nconst void* px = \u0026x;\nconst void* pr = \u0026r;\nassert(px == pr); // should never fire"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int x = 42;\nchar\u0026 r = reinterpret_cast\u003cchar\u0026\u003e(x);\nconst void* px = \u0026x;\nconst void* pr = \u0026r;\nassert(px == pr); // should never fire",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523094534,
        "id": "cba16f4f-3a4c-4808-9967-69ba2eedc8ba",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523094534,
        "parent_id": "43fa8019-9089-49fd-94ff-9444d864fdc3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The result of "
            ],
            [
              "reinterpret_cast",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is unspecified, except that a pointer (resp. reference) will survive a round trip from the source type to the destination type and back, as long as the destination type’s alignment requirement is not stricter than that of the source type."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The result of "
          },
          {
            "Text": "reinterpret_cast",
            "AttrFlags": 2
          },
          {
            "Text": " is unspecified, except that a pointer (resp. reference) will survive a round trip from the source type to the destination type and back, as long as the destination type’s alignment requirement is not stricter than that of the source type."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523094535,
        "id": "204880cd-9caa-4bb4-9850-706620e0716f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523094535,
        "parent_id": "43fa8019-9089-49fd-94ff-9444d864fdc3",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int x = 123;\nunsigned int\u0026 r1 = reinterpret_cast\u003cunsigned int\u0026\u003e(x);\nint\u0026 r2 = reinterpret_cast\u003cint\u0026\u003e(r1);\nr2 = 456; // sets x to 456"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int x = 123;\nunsigned int\u0026 r1 = reinterpret_cast\u003cunsigned int\u0026\u003e(x);\nint\u0026 r2 = reinterpret_cast\u003cint\u0026\u003e(r1);\nr2 = 456; // sets x to 456",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523094535,
        "id": "fde481c9-41c0-49d7-93cd-8252055ccf7e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523094535,
        "parent_id": "43fa8019-9089-49fd-94ff-9444d864fdc3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "On most implementations, "
            ],
            [
              "reinterpret_cast",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " does not change the address, but this requirement was not standardized until C++11."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "On most implementations, "
          },
          {
            "Text": "reinterpret_cast",
            "AttrFlags": 2
          },
          {
            "Text": " does not change the address, but this requirement was not standardized until C++11."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523094535,
        "id": "807f7661-f0b3-4e84-bd87-27c22d8d2c4a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523094535,
        "parent_id": "43fa8019-9089-49fd-94ff-9444d864fdc3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "reinterpret_cast",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can also be used to convert from one pointer-to-data-member type to another, or one pointer-to-member-function type to another."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "reinterpret_cast",
            "AttrFlags": 2
          },
          {
            "Text": " can also be used to convert from one pointer-to-data-member type to another, or one pointer-to-member-function type to another."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523094535,
        "id": "d7d91b1d-b7ab-4203-b3cd-cca1b82975c0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523094535,
        "parent_id": "43fa8019-9089-49fd-94ff-9444d864fdc3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Use of "
            ],
            [
              "reinterpret_cast",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is considered dangerous because reading or writing through a pointer or reference obtained using "
            ],
            [
              "reinterpret_cast",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " may trigger undefined behaviour when the source and destination types are unrelated."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Use of "
          },
          {
            "Text": "reinterpret_cast",
            "AttrFlags": 2
          },
          {
            "Text": " is considered dangerous because reading or writing through a pointer or reference obtained using "
          },
          {
            "Text": "reinterpret_cast",
            "AttrFlags": 2
          },
          {
            "Text": " may trigger undefined behaviour when the source and destination types are unrelated."
          }
        ]
      }
    ],
    "title": "Type punning conversion",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}