{
  "ID": "91e2f520-7549-4a1e-9223-6054337bde97",
  "Root": {
    "alive": true,
    "content": [
      "8c167581-86f9-4aed-958a-f3359aff0a2d",
      "7f4c79c2-3c9e-40ad-9a68-ac53d03b522a",
      "7b53b2c7-5959-47f8-9b0e-2083f3634393",
      "a8a41367-9b23-4713-b52e-a32ae86fc009",
      "3b0a157c-77f1-42e7-88b8-dc4cff7eb282",
      "41246fa6-db3c-4ea3-b711-62d825d9e6e1"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522670479,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "91e2f520-7549-4a1e-9223-6054337bde97",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550710440000,
    "parent_id": "6c5aa9dd-7698-4690-bd9e-644763376917",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Destroying an object that has already been destroyed"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522670476,
        "id": "8c167581-86f9-4aed-958a-f3359aff0a2d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522670476,
        "parent_id": "91e2f520-7549-4a1e-9223-6054337bde97",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In this example, a destructor is explicitly invoked for an object that will later be automatically destroyed."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In this example, a destructor is explicitly invoked for an object that will later be automatically destroyed."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522670478,
        "id": "7f4c79c2-3c9e-40ad-9a68-ac53d03b522a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550710440000,
        "parent_id": "91e2f520-7549-4a1e-9223-6054337bde97",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "struct S {\n    ~S() { std::cout \u003c\u003c \"destroying S\\n\"; }\n};\nint main() {\n    S s;\n    s.~S();\n} // UB: s destroyed a second time here"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "struct S {\n    ~S() { std::cout \u003c\u003c \"destroying S\\n\"; }\n};\nint main() {\n    S s;\n    s.~S();\n} // UB: s destroyed a second time here",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522670478,
        "id": "7b53b2c7-5959-47f8-9b0e-2083f3634393",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522670478,
        "parent_id": "91e2f520-7549-4a1e-9223-6054337bde97",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A similar issue occurs when a "
            ],
            [
              "std::unique_ptr\u003cT\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is made to point at a "
            ],
            [
              "T",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " with automatic or static storage duration."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A similar issue occurs when a "
          },
          {
            "Text": "std::unique_ptr\u003cT\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " is made to point at a "
          },
          {
            "Text": "T",
            "AttrFlags": 2
          },
          {
            "Text": " with automatic or static storage duration."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522670478,
        "id": "a8a41367-9b23-4713-b52e-a32ae86fc009",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550710440000,
        "parent_id": "91e2f520-7549-4a1e-9223-6054337bde97",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "void f(std::unique_ptr\u003cS\u003e p);\nint main() {\n    S s;\n    std::unique_ptr\u003cS\u003e p(\u0026s);\n    f(std::move(p)); // s destroyed upon return from f\n}                    // UB: s destroyed"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "void f(std::unique_ptr\u003cS\u003e p);\nint main() {\n    S s;\n    std::unique_ptr\u003cS\u003e p(\u0026s);\n    f(std::move(p)); // s destroyed upon return from f\n}                    // UB: s destroyed",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522670479,
        "id": "3b0a157c-77f1-42e7-88b8-dc4cff7eb282",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522670479,
        "parent_id": "91e2f520-7549-4a1e-9223-6054337bde97",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Another way to destroy an object twice is by having two "
            ],
            [
              "shared_ptr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "s both manage the object without sharing ownership with each other."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Another way to destroy an object twice is by having two "
          },
          {
            "Text": "shared_ptr",
            "AttrFlags": 2
          },
          {
            "Text": "s both manage the object without sharing ownership with each other."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522670479,
        "id": "41246fa6-db3c-4ea3-b711-62d825d9e6e1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550710440000,
        "parent_id": "91e2f520-7549-4a1e-9223-6054337bde97",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "void f(std::shared_ptr\u003cS\u003e p1, std::shared_ptr\u003cS\u003e p2);\nint main() {\n    S* p = new S;\n    // I want to pass the same object twice...\n    std::shared_ptr\u003cS\u003e sp1(p);\n    std::shared_ptr\u003cS\u003e sp2(p);\n    f(sp1, sp2);\n} // UB: both sp1 and sp2 will destroy s separately\n// NB: this is correct:\n// std::shared_ptr\u003cS\u003e sp(p);\n// f(sp, sp);"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "void f(std::shared_ptr\u003cS\u003e p1, std::shared_ptr\u003cS\u003e p2);\nint main() {\n    S* p = new S;\n    // I want to pass the same object twice...\n    std::shared_ptr\u003cS\u003e sp1(p);\n    std::shared_ptr\u003cS\u003e sp2(p);\n    f(sp1, sp2);\n} // UB: both sp1 and sp2 will destroy s separately\n// NB: this is correct:\n// std::shared_ptr\u003cS\u003e sp(p);\n// f(sp, sp);",
        "code_language": "C++"
      }
    ],
    "title": "Destroying an object that has already been destroyed",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}