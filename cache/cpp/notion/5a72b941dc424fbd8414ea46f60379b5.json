{
  "ID": "5a72b941-dc42-4fbd-8414-ea46f60379b5",
  "Root": {
    "alive": true,
    "content": [
      "e607a257-68a1-4e47-b46e-7fa554e59e60"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550525198479,
    "id": "5a72b941-dc42-4fbd-8414-ea46f60379b5",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550525198479,
    "parent_id": "46b28c54-a7e1-4286-9bdc-69ae87c3bad3",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "010 Semaphore C 11"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525198476,
        "id": "e607a257-68a1-4e47-b46e-7fa554e59e60",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525198476,
        "parent_id": "5a72b941-dc42-4fbd-8414-ea46f60379b5",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cmutex\u003e\n#include \u003ccondition_variable\u003e\n        \nclass Semaphore {\npublic:\n    Semaphore (int count_ = 0)\n    : count(count_) \n    {\n    }\n    \n    inline void notify( int tid ) {\n        std::unique_lock\u003cstd::mutex\u003e lock(mtx);\n        count++;\n        cout \u003c\u003c \"thread \" \u003c\u003c tid \u003c\u003c  \" notify\" \u003c\u003c endl;\n        //notify the waiting thread\n        cv.notify_one();\n    }\n    inline void wait( int tid ) {\n        std::unique_lock\u003cstd::mutex\u003e lock(mtx);\n        while(count == 0) {\n            cout \u003c\u003c \"thread \" \u003c\u003c tid \u003c\u003c \" wait\" \u003c\u003c endl;\n            //wait on the mutex until notify is called\n            cv.wait(lock);\n            cout \u003c\u003c \"thread \" \u003c\u003c tid \u003c\u003c \" run\" \u003c\u003c endl;\n        }\n        count--;\n    }\nprivate:\n    std::mutex mtx;\n    std::condition_variable cv;\n    int count;\n};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cmutex\u003e\n#include \u003ccondition_variable\u003e\n        \nclass Semaphore {\npublic:\n    Semaphore (int count_ = 0)\n    : count(count_) \n    {\n    }\n    \n    inline void notify( int tid ) {\n        std::unique_lock\u003cstd::mutex\u003e lock(mtx);\n        count++;\n        cout \u003c\u003c \"thread \" \u003c\u003c tid \u003c\u003c  \" notify\" \u003c\u003c endl;\n        //notify the waiting thread\n        cv.notify_one();\n    }\n    inline void wait( int tid ) {\n        std::unique_lock\u003cstd::mutex\u003e lock(mtx);\n        while(count == 0) {\n            cout \u003c\u003c \"thread \" \u003c\u003c tid \u003c\u003c \" wait\" \u003c\u003c endl;\n            //wait on the mutex until notify is called\n            cv.wait(lock);\n            cout \u003c\u003c \"thread \" \u003c\u003c tid \u003c\u003c \" run\" \u003c\u003c endl;\n        }\n        count--;\n    }\nprivate:\n    std::mutex mtx;\n    std::condition_variable cv;\n    int count;\n};",
        "code_language": "Plain Text"
      }
    ],
    "title": "010 Semaphore C 11"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}