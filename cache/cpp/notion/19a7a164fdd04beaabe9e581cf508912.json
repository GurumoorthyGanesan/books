{
  "ID": "19a7a164-fdd0-4bea-abe9-e581cf508912",
  "Root": {
    "alive": true,
    "content": [
      "57162b65-01c9-421d-a949-cb0fc17ec7f2",
      "396220bc-3935-4edd-b892-ba00f9df017d",
      "404e6a37-b0ed-4b47-8d71-356bf27be291",
      "18812222-54a0-4e64-a08b-1b2639071f97",
      "446a5956-13ae-4767-a095-50f080fdd260",
      "5b35b18b-56d6-438a-9c9c-b4e760daf77f",
      "0aa61712-97ee-4685-af41-4a8c90904af2"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550524323633,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "19a7a164-fdd0-4bea-abe9-e581cf508912",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551688500819,
    "parent_id": "48c65d67-f77e-4b0b-b90a-83ab75bd68a9",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Hello TCP Server"
        ]
      ]
    },
    "type": "page",
    "version": 4,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524323631,
        "id": "57162b65-01c9-421d-a949-cb0fc17ec7f2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524323631,
        "parent_id": "19a7a164-fdd0-4bea-abe9-e581cf508912",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Let me start by saying you should first visit "
            ],
            [
              "Beej’s Guide to Network Programming",
              [
                [
                  "a",
                  "https://beej.us/guide/bgnet/output/html/singlepage/bgnet.html"
                ]
              ]
            ],
            [
              " and give it a quick read, which explains most of this stuff a bit more verbosely. We’ll be creating a simple TCP server here which will say “Hello World” to all incoming connections and then close them. Another thing to note is, the server will be communicating to clients iteratively, which means one client at a time. Make sure to check out relevant man pages as they might contain valuable information about each function call and socket structures."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Let me start by saying you should first visit "
          },
          {
            "Text": "Beej’s Guide to Network Programming",
            "Link": "https://beej.us/guide/bgnet/output/html/singlepage/bgnet.html"
          },
          {
            "Text": " and give it a quick read, which explains most of this stuff a bit more verbosely. We’ll be creating a simple TCP server here which will say “Hello World” to all incoming connections and then close them. Another thing to note is, the server will be communicating to clients iteratively, which means one client at a time. Make sure to check out relevant man pages as they might contain valuable information about each function call and socket structures."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524323632,
        "id": "396220bc-3935-4edd-b892-ba00f9df017d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524323632,
        "parent_id": "19a7a164-fdd0-4bea-abe9-e581cf508912",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We’ll run the server with a port, so we’ll take an argument for port number as well. Let’s get started with code -"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "We’ll run the server with a port, so we’ll take an argument for port number as well. Let’s get started with code -"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524323632,
        "id": "404e6a37-b0ed-4b47-8d71-356bf27be291",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524323632,
        "parent_id": "19a7a164-fdd0-4bea-abe9-e581cf508912",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003ccstring\u003e    // sizeof()\n#include \u003ciostream\u003e\n#include \u003cstring\u003e   \n\n// headers for socket(), getaddrinfo() and friends\n#include \u003carpa/inet.h\u003e\n#include \u003cnetdb.h\u003e\n#include \u003csys/socket.h\u003e\n#include \u003csys/types.h\u003e\n\n#include \u003cunistd.h\u003e    // close()\n\n\nint main(int argc, char *argv[])\n{\n    // Let's check if port number is supplied or not..\n    if (argc != 2) {\n        std::cerr \u003c\u003c \"Run program as 'program \u003cport\u003e'\\n\";\n        return -1;\n    }\n    \n    auto \u0026portNum = argv[1];\n    const unsigned int backLog = 8;  // number of connections allowed on the incoming queue"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003ccstring\u003e    // sizeof()\n#include \u003ciostream\u003e\n#include \u003cstring\u003e   \n\n// headers for socket(), getaddrinfo() and friends\n#include \u003carpa/inet.h\u003e\n#include \u003cnetdb.h\u003e\n#include \u003csys/socket.h\u003e\n#include \u003csys/types.h\u003e\n\n#include \u003cunistd.h\u003e    // close()\n\n\nint main(int argc, char *argv[])\n{\n    // Let's check if port number is supplied or not..\n    if (argc != 2) {\n        std::cerr \u003c\u003c \"Run program as 'program \u003cport\u003e'\\n\";\n        return -1;\n    }\n    \n    auto \u0026portNum = argv[1];\n    const unsigned int backLog = 8;  // number of connections allowed on the incoming queue",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524323632,
        "id": "18812222-54a0-4e64-a08b-1b2639071f97",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524323632,
        "parent_id": "19a7a164-fdd0-4bea-abe9-e581cf508912",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "addrinfo hints, *res, *p;    // we need 2 pointers, res to hold and p to iterate over\nmemset(\u0026hints, 0, sizeof(hints));\n\n// for more explanation, man socket\nhints.ai_family   = AF_UNSPEC;    // don't specify which IP version to use yet\nhints.ai_socktype = SOCK_STREAM;  // SOCK_STREAM refers to TCP, SOCK_DGRAM will be?\nhints.ai_flags    = AI_PASSIVE;\n\n\n// man getaddrinfo\nint gAddRes = getaddrinfo(NULL, portNum, \u0026hints, \u0026res);\nif (gAddRes != 0) {\n    std::cerr \u003c\u003c gai_strerror(gAddRes) \u003c\u003c \"\\n\";\n    return -2;\n}\n\nstd::cout \u003c\u003c \"Detecting addresses\" \u003c\u003c std::endl;\n\nunsigned int numOfAddr = 0;\nchar ipStr[INET6_ADDRSTRLEN];    // ipv6 length makes sure both ipv4/6 addresses can be stored in this variable\n\n\n// Now since getaddrinfo() has given us a list of addresses\n// we're going to iterate over them and ask user to choose one\n// address for program to bind to\nfor (p = res; p != NULL; p = p-\u003eai_next) {\n    void *addr;\n    std::string ipVer;\n\n    // if address is ipv4 address\n    if (p-\u003eai_family == AF_INET) {\n        ipVer             = \"IPv4\";\n        sockaddr_in *ipv4 = reinterpret_cast\u003csockaddr_in *\u003e(p-\u003eai_addr);\n        addr              = \u0026(ipv4-\u003esin_addr);\n        ++numOfAddr;\n    }\n\n    // if address is ipv6 address\n    else {\n        ipVer              = \"IPv6\";\n        sockaddr_in6 *ipv6 = reinterpret_cast\u003csockaddr_in6 *\u003e(p-\u003eai_addr);\n        addr               = \u0026(ipv6-\u003esin6_addr);\n        ++numOfAddr;\n    }\n\n    // convert IPv4 and IPv6 addresses from binary to text form\n    inet_ntop(p-\u003eai_family, addr, ipStr, sizeof(ipStr));\n    std::cout \u003c\u003c \"(\" \u003c\u003c numOfAddr \u003c\u003c \") \" \u003c\u003c ipVer \u003c\u003c \" : \" \u003c\u003c ipStr\n              \u003c\u003c std::endl;\n}\n\n// if no addresses found :(\nif (!numOfAddr) {\n    std::cerr \u003c\u003c \"Found no host address to use\\n\";\n    return -3;\n}\n\n// ask user to choose an address\nstd::cout \u003c\u003c \"Enter the number of host address to bind with: \";\nunsigned int choice = 0;\nbool madeChoice     = false;\ndo {\n    std::cin \u003e\u003e choice;\n    if (choice \u003e (numOfAddr + 1) || choice \u003c 1) {\n        madeChoice = false;\n        std::cout \u003c\u003c \"Wrong choice, try again!\" \u003c\u003c std::endl;\n    } else\n        madeChoice = true;\n} while (!madeChoice);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "addrinfo hints, *res, *p;    // we need 2 pointers, res to hold and p to iterate over\nmemset(\u0026hints, 0, sizeof(hints));\n\n// for more explanation, man socket\nhints.ai_family   = AF_UNSPEC;    // don't specify which IP version to use yet\nhints.ai_socktype = SOCK_STREAM;  // SOCK_STREAM refers to TCP, SOCK_DGRAM will be?\nhints.ai_flags    = AI_PASSIVE;\n\n\n// man getaddrinfo\nint gAddRes = getaddrinfo(NULL, portNum, \u0026hints, \u0026res);\nif (gAddRes != 0) {\n    std::cerr \u003c\u003c gai_strerror(gAddRes) \u003c\u003c \"\\n\";\n    return -2;\n}\n\nstd::cout \u003c\u003c \"Detecting addresses\" \u003c\u003c std::endl;\n\nunsigned int numOfAddr = 0;\nchar ipStr[INET6_ADDRSTRLEN];    // ipv6 length makes sure both ipv4/6 addresses can be stored in this variable\n\n\n// Now since getaddrinfo() has given us a list of addresses\n// we're going to iterate over them and ask user to choose one\n// address for program to bind to\nfor (p = res; p != NULL; p = p-\u003eai_next) {\n    void *addr;\n    std::string ipVer;\n\n    // if address is ipv4 address\n    if (p-\u003eai_family == AF_INET) {\n        ipVer             = \"IPv4\";\n        sockaddr_in *ipv4 = reinterpret_cast\u003csockaddr_in *\u003e(p-\u003eai_addr);\n        addr              = \u0026(ipv4-\u003esin_addr);\n        ++numOfAddr;\n    }\n\n    // if address is ipv6 address\n    else {\n        ipVer              = \"IPv6\";\n        sockaddr_in6 *ipv6 = reinterpret_cast\u003csockaddr_in6 *\u003e(p-\u003eai_addr);\n        addr               = \u0026(ipv6-\u003esin6_addr);\n        ++numOfAddr;\n    }\n\n    // convert IPv4 and IPv6 addresses from binary to text form\n    inet_ntop(p-\u003eai_family, addr, ipStr, sizeof(ipStr));\n    std::cout \u003c\u003c \"(\" \u003c\u003c numOfAddr \u003c\u003c \") \" \u003c\u003c ipVer \u003c\u003c \" : \" \u003c\u003c ipStr\n              \u003c\u003c std::endl;\n}\n\n// if no addresses found :(\nif (!numOfAddr) {\n    std::cerr \u003c\u003c \"Found no host address to use\\n\";\n    return -3;\n}\n\n// ask user to choose an address\nstd::cout \u003c\u003c \"Enter the number of host address to bind with: \";\nunsigned int choice = 0;\nbool madeChoice     = false;\ndo {\n    std::cin \u003e\u003e choice;\n    if (choice \u003e (numOfAddr + 1) || choice \u003c 1) {\n        madeChoice = false;\n        std::cout \u003c\u003c \"Wrong choice, try again!\" \u003c\u003c std::endl;\n    } else\n        madeChoice = true;\n} while (!madeChoice);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524323632,
        "id": "446a5956-13ae-4767-a095-50f080fdd260",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524323632,
        "parent_id": "19a7a164-fdd0-4bea-abe9-e581cf508912",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "p = res;\n\n// let's create a new socket, socketFD is returned as descriptor\n// man socket for more information\n// these calls usually return -1 as result of some error\nint sockFD = socket(p-\u003eai_family, p-\u003eai_socktype, p-\u003eai_protocol);\nif (sockFD == -1) {\n    std::cerr \u003c\u003c \"Error while creating socket\\n\";\n    freeaddrinfo(res);\n    return -4;\n}\n\n\n// Let's bind address to our socket we've just created\nint bindR = bind(sockFD, p-\u003eai_addr, p-\u003eai_addrlen);\nif (bindR == -1) {\n    std::cerr \u003c\u003c \"Error while binding socket\\n\";\n    \n    // if some error occurs, make sure to close socket and free resources\n    close(sockFD);\n    freeaddrinfo(res);\n    return -5;\n}\n\n\n// finally start listening for connections on our socket\nint listenR = listen(sockFD, backLog);\nif (listenR == -1) {\n    std::cerr \u003c\u003c \"Error while Listening on socket\\n\";\n\n    // if some error occurs, make sure to close socket and free resources\n    close(sockFD);\n    freeaddrinfo(res);\n    return -6;\n}\n\n\n// structure large enough to hold client's address\nsockaddr_storage client_addr;\nsocklen_t client_addr_size = sizeof(client_addr);\n\n\nconst std::string response = \"Hello World\";\n\n\n// a fresh infinite loop to communicate with incoming connections\n// this will take client connections one at a time\n// in further examples, we're going to use fork() call for each client connection\nwhile (1) {\n\n    // accept call will give us a new socket descriptor\n    int newFD\n      = accept(sockFD, (sockaddr *) \u0026client_addr, \u0026client_addr_size);\n    if (newFD == -1) {\n        std::cerr \u003c\u003c \"Error while Accepting on socket\\n\";\n        continue;\n    }\n\n    // send call sends the data you specify as second param and it's length as 3rd param, also returns how many bytes were actually sent\n    auto bytes_sent = send(newFD, response.data(), response.length(), 0);\n    close(newFD);\n}\n\nclose(sockFD);\nfreeaddrinfo(res);\n\nreturn 0;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "p = res;\n\n// let's create a new socket, socketFD is returned as descriptor\n// man socket for more information\n// these calls usually return -1 as result of some error\nint sockFD = socket(p-\u003eai_family, p-\u003eai_socktype, p-\u003eai_protocol);\nif (sockFD == -1) {\n    std::cerr \u003c\u003c \"Error while creating socket\\n\";\n    freeaddrinfo(res);\n    return -4;\n}\n\n\n// Let's bind address to our socket we've just created\nint bindR = bind(sockFD, p-\u003eai_addr, p-\u003eai_addrlen);\nif (bindR == -1) {\n    std::cerr \u003c\u003c \"Error while binding socket\\n\";\n    \n    // if some error occurs, make sure to close socket and free resources\n    close(sockFD);\n    freeaddrinfo(res);\n    return -5;\n}\n\n\n// finally start listening for connections on our socket\nint listenR = listen(sockFD, backLog);\nif (listenR == -1) {\n    std::cerr \u003c\u003c \"Error while Listening on socket\\n\";\n\n    // if some error occurs, make sure to close socket and free resources\n    close(sockFD);\n    freeaddrinfo(res);\n    return -6;\n}\n\n\n// structure large enough to hold client's address\nsockaddr_storage client_addr;\nsocklen_t client_addr_size = sizeof(client_addr);\n\n\nconst std::string response = \"Hello World\";\n\n\n// a fresh infinite loop to communicate with incoming connections\n// this will take client connections one at a time\n// in further examples, we're going to use fork() call for each client connection\nwhile (1) {\n\n    // accept call will give us a new socket descriptor\n    int newFD\n      = accept(sockFD, (sockaddr *) \u0026client_addr, \u0026client_addr_size);\n    if (newFD == -1) {\n        std::cerr \u003c\u003c \"Error while Accepting on socket\\n\";\n        continue;\n    }\n\n    // send call sends the data you specify as second param and it's length as 3rd param, also returns how many bytes were actually sent\n    auto bytes_sent = send(newFD, response.data(), response.length(), 0);\n    close(newFD);\n}\n\nclose(sockFD);\nfreeaddrinfo(res);\n\nreturn 0;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524323633,
        "id": "5b35b18b-56d6-438a-9c9c-b4e760daf77f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524323633,
        "parent_id": "19a7a164-fdd0-4bea-abe9-e581cf508912",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The following program runs as -"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The following program runs as -"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524323633,
        "id": "0aa61712-97ee-4685-af41-4a8c90904af2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524323633,
        "parent_id": "19a7a164-fdd0-4bea-abe9-e581cf508912",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Detecting addresses\n(1) IPv4 : 0.0.0.0\n(2) IPv6 : ::\nEnter the number of host address to bind with: 1"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Detecting addresses\n(1) IPv4 : 0.0.0.0\n(2) IPv6 : ::\nEnter the number of host address to bind with: 1",
        "code_language": "Plain Text"
      }
    ],
    "title": "Hello TCP Server",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}