{
  "ID": "2ef777ea-66f5-45bc-97e2-98266d982a01",
  "Root": {
    "alive": true,
    "content": [
      "3e077121-f5c8-479f-aed8-d4c14bc8594d",
      "a4e3242a-015a-45c9-8b69-73cd161fc4bb",
      "f43e541b-7f96-485a-a3e7-160ad7783734",
      "9be67a13-92c4-45a3-895b-793ea7cd1841",
      "b60bb240-7080-405b-ad8d-6ee1983cbe07",
      "8297d576-c059-4dd7-afd2-1417dd34e06e",
      "911ef429-2518-4c67-abbd-a8cc9f3d413c",
      "20647790-07ab-424e-9de9-acb1dc0f3990",
      "a9d4de3e-f979-4a0a-b432-7d9139db9979"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550525092542,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "2ef777ea-66f5-45bc-97e2-98266d982a01",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551688860529,
    "parent_id": "0789dc55-0210-4292-957d-ed83df8e73af",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Searching values in set and multiset"
        ]
      ]
    },
    "type": "page",
    "version": 4,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525092540,
        "id": "3e077121-f5c8-479f-aed8-d4c14bc8594d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525092540,
        "parent_id": "2ef777ea-66f5-45bc-97e2-98266d982a01",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "There are several ways to search a given value in "
            ],
            [
              "std::set",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or in "
            ],
            [
              "std::multiset",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "There are several ways to search a given value in "
          },
          {
            "Text": "std::set",
            "AttrFlags": 2
          },
          {
            "Text": " or in "
          },
          {
            "Text": "std::multiset",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525092540,
        "id": "a4e3242a-015a-45c9-8b69-73cd161fc4bb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525092540,
        "parent_id": "2ef777ea-66f5-45bc-97e2-98266d982a01",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To get the iterator of the first occurrence of a key, the "
            ],
            [
              "find()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " function can be used. It returns "
            ],
            [
              "end()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " if the key does not exist."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To get the iterator of the first occurrence of a key, the "
          },
          {
            "Text": "find()",
            "AttrFlags": 2
          },
          {
            "Text": " function can be used. It returns "
          },
          {
            "Text": "end()",
            "AttrFlags": 2
          },
          {
            "Text": " if the key does not exist."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525092541,
        "id": "f43e541b-7f96-485a-a3e7-160ad7783734",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525092541,
        "parent_id": "2ef777ea-66f5-45bc-97e2-98266d982a01",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "std::set\u003cint\u003e sut;\nsut.insert(10);\nsut.insert(15);\nsut.insert(22);\nsut.insert(3); // contains 3, 10, 15, 22    \n\nauto itS = sut.find(10); // the value is found, so *itS == 10\nitS = sut.find(555); // the value is not found, so itS == sut.end()"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "std::set\u003cint\u003e sut;\nsut.insert(10);\nsut.insert(15);\nsut.insert(22);\nsut.insert(3); // contains 3, 10, 15, 22    \n\nauto itS = sut.find(10); // the value is found, so *itS == 10\nitS = sut.find(555); // the value is not found, so itS == sut.end()",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525092541,
        "id": "9be67a13-92c4-45a3-895b-793ea7cd1841",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525092541,
        "parent_id": "2ef777ea-66f5-45bc-97e2-98266d982a01",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "std::multiset\u003cint\u003e msut;\nsut.insert(10);\nsut.insert(15);\nsut.insert(22);\nsut.insert(15);\nsut.insert(3); // contains 3, 10, 15, 15, 22"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "std::multiset\u003cint\u003e msut;\nsut.insert(10);\nsut.insert(15);\nsut.insert(22);\nsut.insert(15);\nsut.insert(3); // contains 3, 10, 15, 15, 22",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525092541,
        "id": "b60bb240-7080-405b-ad8d-6ee1983cbe07",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525092541,
        "parent_id": "2ef777ea-66f5-45bc-97e2-98266d982a01",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "auto itMS = msut.find(10);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "auto itMS = msut.find(10);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525092541,
        "id": "8297d576-c059-4dd7-afd2-1417dd34e06e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525092541,
        "parent_id": "2ef777ea-66f5-45bc-97e2-98266d982a01",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Another way is using the "
            ],
            [
              "count()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " function, which counts how many corresponding values have been found in the "
            ],
            [
              "set",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "/"
            ],
            [
              "multiset",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (in case of a "
            ],
            [
              "set",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", the return value can be only 0 or 1). Using the same values as above, we will have:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Another way is using the "
          },
          {
            "Text": "count()",
            "AttrFlags": 2
          },
          {
            "Text": " function, which counts how many corresponding values have been found in the "
          },
          {
            "Text": "set",
            "AttrFlags": 2
          },
          {
            "Text": "/"
          },
          {
            "Text": "multiset",
            "AttrFlags": 2
          },
          {
            "Text": " (in case of a "
          },
          {
            "Text": "set",
            "AttrFlags": 2
          },
          {
            "Text": ", the return value can be only 0 or 1). Using the same values as above, we will have:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525092541,
        "id": "911ef429-2518-4c67-abbd-a8cc9f3d413c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525092541,
        "parent_id": "2ef777ea-66f5-45bc-97e2-98266d982a01",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int result = sut.count(10); // result == 1\nresult = sut.count(555); // result == 0\n\nresult = msut.count(10); // result == 1\nresult = msut.count(15); // result == 2"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int result = sut.count(10); // result == 1\nresult = sut.count(555); // result == 0\n\nresult = msut.count(10); // result == 1\nresult = msut.count(15); // result == 2",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525092541,
        "id": "20647790-07ab-424e-9de9-acb1dc0f3990",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525092541,
        "parent_id": "2ef777ea-66f5-45bc-97e2-98266d982a01",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In the case of "
            ],
            [
              "std::multiset",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", there could be several elements having the same value. To get this range, the "
            ],
            [
              "equal_range()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " function can be used. It returns "
            ],
            [
              "std::pair",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " having iterator lower bound (inclusive) and upper bound (exclusive) respectively. If the key does not exist, both iterators would point to the nearest superior value (based on compare method used to sort the given "
            ],
            [
              "multiset",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ")."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In the case of "
          },
          {
            "Text": "std::multiset",
            "AttrFlags": 2
          },
          {
            "Text": ", there could be several elements having the same value. To get this range, the "
          },
          {
            "Text": "equal_range()",
            "AttrFlags": 2
          },
          {
            "Text": " function can be used. It returns "
          },
          {
            "Text": "std::pair",
            "AttrFlags": 2
          },
          {
            "Text": " having iterator lower bound (inclusive) and upper bound (exclusive) respectively. If the key does not exist, both iterators would point to the nearest superior value (based on compare method used to sort the given "
          },
          {
            "Text": "multiset",
            "AttrFlags": 2
          },
          {
            "Text": ")."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525092542,
        "id": "a9d4de3e-f979-4a0a-b432-7d9139db9979",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525092542,
        "parent_id": "2ef777ea-66f5-45bc-97e2-98266d982a01",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "auto eqr = msut.equal_range(15);\nauto st = eqr.first; // point to first element '15'\nauto en = eqr.second; // point to element '22'\n\neqr = msut.equal_range(9); // both eqr.first and eqr.second point to element '10'"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "auto eqr = msut.equal_range(15);\nauto st = eqr.first; // point to first element '15'\nauto en = eqr.second; // point to element '22'\n\neqr = msut.equal_range(9); // both eqr.first and eqr.second point to element '10'",
        "code_language": "Plain Text"
      }
    ],
    "title": "Searching values in set and multiset",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}