{
  "ID": "a1addb66-6283-4d82-bc95-8b5bd6aacf45",
  "Root": {
    "alive": true,
    "content": [
      "28a58fcf-837f-47c3-8d06-0c77152426a9",
      "b6beb8d1-b690-4f42-a720-74f95292a6bb",
      "d2afeb8e-deff-41f5-9041-cd7103a000de",
      "a0655610-2557-40af-96d6-b4e134ba3718",
      "e8b27f34-593a-43f6-ab5b-a99dc493b211",
      "30028c71-a0e9-4bf9-bb1b-8d4021cf937f",
      "ba5f9fe2-b320-4eaf-80d2-2a6f9f3f84aa",
      "495cecf1-e049-4c3c-a4bd-ae0cd9976086",
      "cb8cf973-4b07-46b7-9592-934d3b48d913",
      "553d8a7f-884b-432d-a1c8-17348f0669ce",
      "03056a26-5e05-4921-af0a-49c43f10a647",
      "88779abb-b87e-4276-9ba0-a66aece747d5"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522675422,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "a1addb66-6283-4d82-bc95-8b5bd6aacf45",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550710620000,
    "parent_id": "44b9891c-fe65-4aa6-8ac6-b623709b7c02",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Move constructor"
        ]
      ]
    },
    "type": "page",
    "version": 9,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522675417,
        "id": "28a58fcf-837f-47c3-8d06-0c77152426a9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522675417,
        "parent_id": "a1addb66-6283-4d82-bc95-8b5bd6aacf45",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Say we have this code snippet."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Say we have this code snippet."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522675420,
        "id": "b6beb8d1-b690-4f42-a720-74f95292a6bb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550710620000,
        "parent_id": "a1addb66-6283-4d82-bc95-8b5bd6aacf45",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "class A {\npublic:\n    int a;\n    int b;\n       \n    A(const A \u0026other) {\n        this-\u003ea = other.a;\n        this-\u003eb = other.b;\n    }\n};"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "class A {\npublic:\n    int a;\n    int b;\n       \n    A(const A \u0026other) {\n        this-\u003ea = other.a;\n        this-\u003eb = other.b;\n    }\n};",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522675420,
        "id": "d2afeb8e-deff-41f5-9041-cd7103a000de",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522675420,
        "parent_id": "a1addb66-6283-4d82-bc95-8b5bd6aacf45",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To create a copy constructor, that is, to make a function that copies an object and creates a new one, we normally would choose the syntax shown above, we would have a constructor for A that takes an reference to another object of type A, and we would copy the object manually inside the method."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To create a copy constructor, that is, to make a function that copies an object and creates a new one, we normally would choose the syntax shown above, we would have a constructor for A that takes an reference to another object of type A, and we would copy the object manually inside the method."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522675420,
        "id": "a0655610-2557-40af-96d6-b4e134ba3718",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522675420,
        "parent_id": "a1addb66-6283-4d82-bc95-8b5bd6aacf45",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Alternatively, we could have written "
            ],
            [
              "A(const A \u0026) = default;",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " which automatically copies over all members, making use of its copy constructor."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Alternatively, we could have written "
          },
          {
            "Text": "A(const A \u0026) = default;",
            "AttrFlags": 2
          },
          {
            "Text": " which automatically copies over all members, making use of its copy constructor."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522675421,
        "id": "e8b27f34-593a-43f6-ab5b-a99dc493b211",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522675421,
        "parent_id": "a1addb66-6283-4d82-bc95-8b5bd6aacf45",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To create a move constructor, however, we will be taking an rvalue reference instead of an lvalue reference, like here."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To create a move constructor, however, we will be taking an rvalue reference instead of an lvalue reference, like here."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522675421,
        "id": "30028c71-a0e9-4bf9-bb1b-8d4021cf937f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550710620000,
        "parent_id": "a1addb66-6283-4d82-bc95-8b5bd6aacf45",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "class Wallet {\npublic:\n    int nrOfDollars;\n    \n    Wallet() = default; //default ctor\n\n    Wallet(Wallet \u0026\u0026other) {\n        this-\u003enrOfDollars = other.nrOfDollars;\n        other.nrOfDollars = 0;\n    }\n};"
            ]
          ]
        },
        "type": "code",
        "version": 4,
        "code": "class Wallet {\npublic:\n    int nrOfDollars;\n    \n    Wallet() = default; //default ctor\n\n    Wallet(Wallet \u0026\u0026other) {\n        this-\u003enrOfDollars = other.nrOfDollars;\n        other.nrOfDollars = 0;\n    }\n};",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522675421,
        "id": "ba5f9fe2-b320-4eaf-80d2-2a6f9f3f84aa",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522675421,
        "parent_id": "a1addb66-6283-4d82-bc95-8b5bd6aacf45",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Please notice that we set the old values to "
            ],
            [
              "zero",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". The default move constructor ("
            ],
            [
              "Wallet(Wallet\u0026\u0026) = default;",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") copies the value of "
            ],
            [
              "nrOfDollars",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", as it is a POD."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Please notice that we set the old values to "
          },
          {
            "Text": "zero",
            "AttrFlags": 2
          },
          {
            "Text": ". The default move constructor ("
          },
          {
            "Text": "Wallet(Wallet\u0026\u0026) = default;",
            "AttrFlags": 2
          },
          {
            "Text": ") copies the value of "
          },
          {
            "Text": "nrOfDollars",
            "AttrFlags": 2
          },
          {
            "Text": ", as it is a POD."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522675421,
        "id": "495cecf1-e049-4c3c-a4bd-ae0cd9976086",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522675421,
        "parent_id": "a1addb66-6283-4d82-bc95-8b5bd6aacf45",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As move semantics are designed to allow ‘stealing’ state from the original instance, it is important to consider how the original instance should look like after this stealing. In this case, if we would not change the value to zero we would have doubled the amount of dollars into play."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "As move semantics are designed to allow ‘stealing’ state from the original instance, it is important to consider how the original instance should look like after this stealing. In this case, if we would not change the value to zero we would have doubled the amount of dollars into play."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522675421,
        "id": "cb8cf973-4b07-46b7-9592-934d3b48d913",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550710620000,
        "parent_id": "a1addb66-6283-4d82-bc95-8b5bd6aacf45",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "Wallet a;\na.nrOfDollars = 1;\nWallet b (std::move(a)); //calling B(B\u0026\u0026 other);\nstd::cout \u003c\u003c a.nrOfDollars \u003c\u003c std::endl; //0\nstd::cout \u003c\u003c b.nrOfDollars \u003c\u003c std::endl; //1"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "Wallet a;\na.nrOfDollars = 1;\nWallet b (std::move(a)); //calling B(B\u0026\u0026 other);\nstd::cout \u003c\u003c a.nrOfDollars \u003c\u003c std::endl; //0\nstd::cout \u003c\u003c b.nrOfDollars \u003c\u003c std::endl; //1",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522675421,
        "id": "553d8a7f-884b-432d-a1c8-17348f0669ce",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522675421,
        "parent_id": "a1addb66-6283-4d82-bc95-8b5bd6aacf45",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Thus we have move constructed an object from an old one."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Thus we have move constructed an object from an old one."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522675421,
        "id": "03056a26-5e05-4921-af0a-49c43f10a647",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522675421,
        "parent_id": "a1addb66-6283-4d82-bc95-8b5bd6aacf45",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "While the above is a simple example, it shows what the move constructor is intended to do. It becomes more useful in more complex cases, such as when resource management is involved."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "While the above is a simple example, it shows what the move constructor is intended to do. It becomes more useful in more complex cases, such as when resource management is involved."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522675421,
        "id": "88779abb-b87e-4276-9ba0-a66aece747d5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550710620000,
        "parent_id": "a1addb66-6283-4d82-bc95-8b5bd6aacf45",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "// Manages operations involving a specified type.\n// Owns a helper on the heap, and one in its memory (presumably on the stack).\n// Both helpers are DefaultConstructible, CopyConstructible, and MoveConstructible.\ntemplate\u003ctypename T,\n         template\u003ctypename\u003e typename HeapHelper,\n         template\u003ctypename\u003e typename StackHelper\u003e\nclass OperationsManager {\n    using MyType = OperationsManager\u003cT, HeapHelper, StackHelper\u003e;\n\n    HeapHelper\u003cT\u003e* h_helper;\n    StackHelper\u003cT\u003e s_helper;\n    // ...\n\n  public:\n    // Default constructor \u0026 Rule of Five.\n    OperationsManager() : h_helper(new HeapHelper\u003cT\u003e) {}\n    OperationsManager(const MyType\u0026 other)\n      : h_helper(new HeapHelper\u003cT\u003e(*other.h_helper)), s_helper(other.s_helper) {}\n    MyType\u0026 operator=(MyType copy) {\n        swap(*this, copy);\n        return *this;\n    }\n    ~OperationsManager() {\n        if (h_helper) { delete h_helper; }\n    }\n\n    // Move constructor (without swap()).\n    // Takes other's HeapHelper\u003cT\u003e*.\n    // Takes other's StackHelper\u003cT\u003e, by forcing the use of StackHelper\u003cT\u003e's move constructor.\n    // Replaces other's HeapHelper\u003cT\u003e* with nullptr, to keep other from deleting our shiny\n    //  new helper when it's destroyed.\n    OperationsManager(MyType\u0026\u0026 other) noexcept\n      : h_helper(other.h_helper),\n        s_helper(std::move(other.s_helper)) {\n        other.h_helper = nullptr;\n    }\n\n    // Move constructor (with swap()).\n    // Places our members in the condition we want other's to be in, then switches members\n    //  with other.\n    // OperationsManager(MyType\u0026\u0026 other) noexcept : h_helper(nullptr) {\n    //     swap(*this, other);\n    // }\n\n    // Copy/move helper.\n    friend void swap(MyType\u0026 left, MyType\u0026 right) noexcept {\n        std::swap(left.h_helper, right.h_helper);\n        std::swap(left.s_helper, right.s_helper);\n    }\n};"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "// Manages operations involving a specified type.\n// Owns a helper on the heap, and one in its memory (presumably on the stack).\n// Both helpers are DefaultConstructible, CopyConstructible, and MoveConstructible.\ntemplate\u003ctypename T,\n         template\u003ctypename\u003e typename HeapHelper,\n         template\u003ctypename\u003e typename StackHelper\u003e\nclass OperationsManager {\n    using MyType = OperationsManager\u003cT, HeapHelper, StackHelper\u003e;\n\n    HeapHelper\u003cT\u003e* h_helper;\n    StackHelper\u003cT\u003e s_helper;\n    // ...\n\n  public:\n    // Default constructor \u0026 Rule of Five.\n    OperationsManager() : h_helper(new HeapHelper\u003cT\u003e) {}\n    OperationsManager(const MyType\u0026 other)\n      : h_helper(new HeapHelper\u003cT\u003e(*other.h_helper)), s_helper(other.s_helper) {}\n    MyType\u0026 operator=(MyType copy) {\n        swap(*this, copy);\n        return *this;\n    }\n    ~OperationsManager() {\n        if (h_helper) { delete h_helper; }\n    }\n\n    // Move constructor (without swap()).\n    // Takes other's HeapHelper\u003cT\u003e*.\n    // Takes other's StackHelper\u003cT\u003e, by forcing the use of StackHelper\u003cT\u003e's move constructor.\n    // Replaces other's HeapHelper\u003cT\u003e* with nullptr, to keep other from deleting our shiny\n    //  new helper when it's destroyed.\n    OperationsManager(MyType\u0026\u0026 other) noexcept\n      : h_helper(other.h_helper),\n        s_helper(std::move(other.s_helper)) {\n        other.h_helper = nullptr;\n    }\n\n    // Move constructor (with swap()).\n    // Places our members in the condition we want other's to be in, then switches members\n    //  with other.\n    // OperationsManager(MyType\u0026\u0026 other) noexcept : h_helper(nullptr) {\n    //     swap(*this, other);\n    // }\n\n    // Copy/move helper.\n    friend void swap(MyType\u0026 left, MyType\u0026 right) noexcept {\n        std::swap(left.h_helper, right.h_helper);\n        std::swap(left.s_helper, right.s_helper);\n    }\n};",
        "code_language": "C++"
      }
    ],
    "title": "Move constructor",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}