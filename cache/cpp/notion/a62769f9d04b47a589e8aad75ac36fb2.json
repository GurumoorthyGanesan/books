{
  "ID": "a62769f9-d04b-47a5-89e8-aad75ac36fb2",
  "Root": {
    "alive": true,
    "content": [
      "5fc2d140-5368-42f8-9d6c-70d50898cd04",
      "ce4b2a14-6e0f-4db3-90fa-18f3b1c41519",
      "84eaad4c-2eff-4dd3-bc29-5ff240d665ab",
      "54e1b9fd-b700-42db-874f-af1620a12481",
      "15e0a26f-0849-4934-a532-d0bba4d66e3c",
      "caf62382-cee0-4567-a4ef-dc85f542669d",
      "9dd7ee28-1f2c-4e82-b30f-ab7c9164809f",
      "8ba1d742-2e05-41ec-b9d4-d62d72eebaca",
      "fd709f29-5d9a-4db5-8a5b-239cec799863",
      "defecb91-a0fd-4244-bab9-c7e44ec70a8b"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522717482,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "a62769f9-d04b-47a5-89e8-aad75ac36fb2",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550710920000,
    "parent_id": "6fdcface-f439-4f73-87ef-255a8f378573",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Avoiding duplication of code in const and non-const getter methods."
        ]
      ]
    },
    "type": "page",
    "version": 9,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522717478,
        "id": "5fc2d140-5368-42f8-9d6c-70d50898cd04",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522717478,
        "parent_id": "a62769f9-d04b-47a5-89e8-aad75ac36fb2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In C++ methods that differs only by "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " qualifier can be overloaded. Sometimes there may be a need of two versions of getter that return a reference to some member."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In C++ methods that differs only by "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": " qualifier can be overloaded. Sometimes there may be a need of two versions of getter that return a reference to some member."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522717481,
        "id": "ce4b2a14-6e0f-4db3-90fa-18f3b1c41519",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522717481,
        "parent_id": "a62769f9-d04b-47a5-89e8-aad75ac36fb2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Let "
            ],
            [
              "Foo",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " be a class, that has two methods that perform identical operations and returns a reference to an object of type "
            ],
            [
              "Bar",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Let "
          },
          {
            "Text": "Foo",
            "AttrFlags": 2
          },
          {
            "Text": " be a class, that has two methods that perform identical operations and returns a reference to an object of type "
          },
          {
            "Text": "Bar",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522717481,
        "id": "84eaad4c-2eff-4dd3-bc29-5ff240d665ab",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550710860000,
        "parent_id": "a62769f9-d04b-47a5-89e8-aad75ac36fb2",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "class Foo\n{\npublic:\n    Bar\u0026 GetBar(/* some arguments */)\n    {\n        /* some calculations */\n        return bar;\n    }\n    \n    const Bar\u0026 GetBar(/* some arguments */) const\n    {\n        /* some calculations */\n        return bar;\n    }\n\n    // ...\n};"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "class Foo\n{\npublic:\n    Bar\u0026 GetBar(/* some arguments */)\n    {\n        /* some calculations */\n        return bar;\n    }\n    \n    const Bar\u0026 GetBar(/* some arguments */) const\n    {\n        /* some calculations */\n        return bar;\n    }\n\n    // ...\n};",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522717481,
        "id": "54e1b9fd-b700-42db-874f-af1620a12481",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522717481,
        "parent_id": "a62769f9-d04b-47a5-89e8-aad75ac36fb2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The only difference between them is that one method is non-const and return a non-const reference (that can be use to modify object) and the second is const and returns const reference."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The only difference between them is that one method is non-const and return a non-const reference (that can be use to modify object) and the second is const and returns const reference."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522717481,
        "id": "15e0a26f-0849-4934-a532-d0bba4d66e3c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522717481,
        "parent_id": "a62769f9-d04b-47a5-89e8-aad75ac36fb2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To avoid the code duplication, there is a temptation to call one method from another. However, we can not call non-const method from the const one. But we can call const method from non-const one. That will require as to use ‘const_cast’ to remove the const qualifier."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To avoid the code duplication, there is a temptation to call one method from another. However, we can not call non-const method from the const one. But we can call const method from non-const one. That will require as to use ‘const_cast’ to remove the const qualifier."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522717481,
        "id": "caf62382-cee0-4567-a4ef-dc85f542669d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522717481,
        "parent_id": "a62769f9-d04b-47a5-89e8-aad75ac36fb2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The solution is:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The solution is:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522717481,
        "id": "9dd7ee28-1f2c-4e82-b30f-ab7c9164809f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550710860000,
        "parent_id": "a62769f9-d04b-47a5-89e8-aad75ac36fb2",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "struct Foo\n{\n    Bar\u0026 GetBar(/*arguments*/)\n    {\n        return const_cast\u003cBar\u0026\u003e(const_cast\u003cconst Foo*\u003e(this)-\u003eGetBar(/*arguments*/));\n    }\n    \n    const Bar\u0026 GetBar(/*arguments*/) const\n    {\n        /* some calculations */\n        return foo;\n    }\n};"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "struct Foo\n{\n    Bar\u0026 GetBar(/*arguments*/)\n    {\n        return const_cast\u003cBar\u0026\u003e(const_cast\u003cconst Foo*\u003e(this)-\u003eGetBar(/*arguments*/));\n    }\n    \n    const Bar\u0026 GetBar(/*arguments*/) const\n    {\n        /* some calculations */\n        return foo;\n    }\n};",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522717482,
        "id": "8ba1d742-2e05-41ec-b9d4-d62d72eebaca",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522717482,
        "parent_id": "a62769f9-d04b-47a5-89e8-aad75ac36fb2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In code above, we call const version of "
            ],
            [
              "GetBar",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " from the non-const "
            ],
            [
              "GetBar",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " by casting this to const type: "
            ],
            [
              "const_cast\u003cconst Foo*\u003e(this)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Since we call const method from non-const, the object itself is non-const, and casting away the const is allowed."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In code above, we call const version of "
          },
          {
            "Text": "GetBar",
            "AttrFlags": 2
          },
          {
            "Text": " from the non-const "
          },
          {
            "Text": "GetBar",
            "AttrFlags": 2
          },
          {
            "Text": " by casting this to const type: "
          },
          {
            "Text": "const_cast\u003cconst Foo*\u003e(this)",
            "AttrFlags": 2
          },
          {
            "Text": ". Since we call const method from non-const, the object itself is non-const, and casting away the const is allowed."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522717482,
        "id": "fd709f29-5d9a-4db5-8a5b-239cec799863",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522717482,
        "parent_id": "a62769f9-d04b-47a5-89e8-aad75ac36fb2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Examine the following more complete example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Examine the following more complete example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522717482,
        "id": "defecb91-a0fd-4244-bab9-c7e44ec70a8b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550710860000,
        "parent_id": "a62769f9-d04b-47a5-89e8-aad75ac36fb2",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "#include \u003ciostream\u003e\n\nclass Student\n{\npublic:\n    char\u0026 GetScore(bool midterm)\n    {\n        return const_cast\u003cchar\u0026\u003e(const_cast\u003cconst Student*\u003e(this)-\u003eGetScore(midterm));\n    }\n    \n    const char\u0026 GetScore(bool midterm) const\n    {\n        if (midterm)\n        {\n            return midtermScore;\n        }\n        else\n        {\n            return finalScore;\n        }\n    }\n    \nprivate:\n    char midtermScore;\n    char finalScore;\n};\n\nint main()\n{\n    // non-const object\n    Student a; \n    // We can assign to the reference. Non-const version of GetScore is called\n    a.GetScore(true) = 'B';\n    a.GetScore(false) = 'A';\n    \n    // const object\n    const Student b(a); \n    // We still can call GetScore method of const object,\n    // because we have overloaded const version of GetScore\n    std::cout \u003c\u003c b.GetScore(true) \u003c\u003c b.GetScore(false) \u003c\u003c '\\n'; \n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "#include \u003ciostream\u003e\n\nclass Student\n{\npublic:\n    char\u0026 GetScore(bool midterm)\n    {\n        return const_cast\u003cchar\u0026\u003e(const_cast\u003cconst Student*\u003e(this)-\u003eGetScore(midterm));\n    }\n    \n    const char\u0026 GetScore(bool midterm) const\n    {\n        if (midterm)\n        {\n            return midtermScore;\n        }\n        else\n        {\n            return finalScore;\n        }\n    }\n    \nprivate:\n    char midtermScore;\n    char finalScore;\n};\n\nint main()\n{\n    // non-const object\n    Student a; \n    // We can assign to the reference. Non-const version of GetScore is called\n    a.GetScore(true) = 'B';\n    a.GetScore(false) = 'A';\n    \n    // const object\n    const Student b(a); \n    // We still can call GetScore method of const object,\n    // because we have overloaded const version of GetScore\n    std::cout \u003c\u003c b.GetScore(true) \u003c\u003c b.GetScore(false) \u003c\u003c '\\n'; \n}",
        "code_language": "C++"
      }
    ],
    "title": "Avoiding duplication of code in const and non-const getter methods.",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}