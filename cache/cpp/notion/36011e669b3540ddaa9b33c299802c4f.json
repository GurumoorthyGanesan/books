{
  "ID": "36011e66-9b35-40dd-aa9b-33c299802c4f",
  "Root": {
    "alive": true,
    "content": [
      "c6a9ca86-56bc-4745-9ea9-650a6418870d",
      "acb572a4-768b-42f6-8afa-ddb59b5b4741",
      "faf8783f-5cd3-49d3-9648-dd09d310ad36",
      "3cc0fa96-8b53-4d9d-a93a-a9f4465674ae",
      "6ae59378-1ae0-4973-beca-d2f31ae6a67a",
      "a04bf898-78ab-4c03-a9db-75f4b5af9df5",
      "1b9884d2-a308-4496-af64-46f7c60cfcbf",
      "3cce855c-07ec-45e6-90e9-31191387d407",
      "f2d6f275-d6bb-43f8-a16a-1f58b80196a2",
      "6bd13d0a-c8c1-4ac7-9e9e-4a07cdc148e9",
      "1e030695-7e4b-49af-a219-ddb3a7c2f37c"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522737570,
    "id": "36011e66-9b35-40dd-aa9b-33c299802c4f",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550522737570,
    "parent_id": "de2aa703-c2f6-4f94-bc50-eb5201c26ac3",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "030 Introduction"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522737566,
        "id": "c6a9ca86-56bc-4745-9ea9-650a6418870d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522737566,
        "parent_id": "36011e66-9b35-40dd-aa9b-33c299802c4f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Optionals (also known as Maybe types) are used to represent a type whose contents may or may not be present. They are implemented in C++17 as the "
            ],
            [
              "std::optional",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " class. For example, an object of type "
            ],
            [
              "std::optional\u003cint\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " may contain some value of type "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", or it may contain no value."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Optionals (also known as Maybe types) are used to represent a type whose contents may or may not be present. They are implemented in C++17 as the "
          },
          {
            "Text": "std::optional",
            "AttrFlags": 2
          },
          {
            "Text": " class. For example, an object of type "
          },
          {
            "Text": "std::optional\u003cint\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " may contain some value of type "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": ", or it may contain no value."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522737568,
        "id": "acb572a4-768b-42f6-8afa-ddb59b5b4741",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522737568,
        "parent_id": "36011e66-9b35-40dd-aa9b-33c299802c4f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Optionals are commonly used either to represent a value that may not exist or as a return type from a function that can fail to return a meaningful result."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Optionals are commonly used either to represent a value that may not exist or as a return type from a function that can fail to return a meaningful result."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522737569,
        "id": "faf8783f-5cd3-49d3-9648-dd09d310ad36",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522737569,
        "parent_id": "36011e66-9b35-40dd-aa9b-33c299802c4f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Other approaches to optional"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Other approaches to optional"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522737569,
        "id": "3cc0fa96-8b53-4d9d-a93a-a9f4465674ae",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522737569,
        "parent_id": "36011e66-9b35-40dd-aa9b-33c299802c4f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "There are many other approach to solving the problem that "
            ],
            [
              "std::optional",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " solves, but none of them are quite complete: using a pointer, using a sentinel, or using a "
            ],
            [
              "pair\u003cbool, T\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "There are many other approach to solving the problem that "
          },
          {
            "Text": "std::optional",
            "AttrFlags": 2
          },
          {
            "Text": " solves, but none of them are quite complete: using a pointer, using a sentinel, or using a "
          },
          {
            "Text": "pair\u003cbool, T\u003e",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522737569,
        "id": "6ae59378-1ae0-4973-beca-d2f31ae6a67a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522737569,
        "parent_id": "36011e66-9b35-40dd-aa9b-33c299802c4f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Optional vs Pointer"
            ]
          ]
        },
        "type": "sub_sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Optional vs Pointer"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522737569,
        "id": "a04bf898-78ab-4c03-a9db-75f4b5af9df5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522737569,
        "parent_id": "36011e66-9b35-40dd-aa9b-33c299802c4f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In some cases, we can provide a pointer to an existing object or "
            ],
            [
              "nullptr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to indicate failure. But this is limited to those cases where objects already exist - "
            ],
            [
              "optional",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", as a value type, can also be used to return new objects without resorting to memory allocation."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In some cases, we can provide a pointer to an existing object or "
          },
          {
            "Text": "nullptr",
            "AttrFlags": 2
          },
          {
            "Text": " to indicate failure. But this is limited to those cases where objects already exist - "
          },
          {
            "Text": "optional",
            "AttrFlags": 2
          },
          {
            "Text": ", as a value type, can also be used to return new objects without resorting to memory allocation."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522737569,
        "id": "1b9884d2-a308-4496-af64-46f7c60cfcbf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522737569,
        "parent_id": "36011e66-9b35-40dd-aa9b-33c299802c4f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Optional vs Sentinel"
            ]
          ]
        },
        "type": "sub_sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Optional vs Sentinel"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522737569,
        "id": "3cce855c-07ec-45e6-90e9-31191387d407",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522737569,
        "parent_id": "36011e66-9b35-40dd-aa9b-33c299802c4f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A common idiom is to use a special value to indicate that the value is meaningless. This may be 0 or -1 for integral types, or "
            ],
            [
              "nullptr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " for pointers. However, this reduces the space of valid values (you cannot differentiate between a valid 0 and a meaningless 0) and many types do not have a natural choice for the sentinel value."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A common idiom is to use a special value to indicate that the value is meaningless. This may be 0 or -1 for integral types, or "
          },
          {
            "Text": "nullptr",
            "AttrFlags": 2
          },
          {
            "Text": " for pointers. However, this reduces the space of valid values (you cannot differentiate between a valid 0 and a meaningless 0) and many types do not have a natural choice for the sentinel value."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522737570,
        "id": "f2d6f275-d6bb-43f8-a16a-1f58b80196a2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522737570,
        "parent_id": "36011e66-9b35-40dd-aa9b-33c299802c4f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Optional vs "
            ],
            [
              "std::pair\u003cbool, T\u003e",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "sub_sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Optional vs "
          },
          {
            "Text": "std::pair\u003cbool, T\u003e",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522737570,
        "id": "6bd13d0a-c8c1-4ac7-9e9e-4a07cdc148e9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522737570,
        "parent_id": "36011e66-9b35-40dd-aa9b-33c299802c4f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Another common idiom is to provide a pair, where one of the elements is a "
            ],
            [
              "bool",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " indicating whether or not the value is meaningful."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Another common idiom is to provide a pair, where one of the elements is a "
          },
          {
            "Text": "bool",
            "AttrFlags": 2
          },
          {
            "Text": " indicating whether or not the value is meaningful."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522737570,
        "id": "1e030695-7e4b-49af-a219-ddb3a7c2f37c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522737570,
        "parent_id": "36011e66-9b35-40dd-aa9b-33c299802c4f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This relies upon the value type being default-constructible in the case of error, which is not possible for some types and possible but undesirable for others. An "
            ],
            [
              "optional\u003cT\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", in the case of error, does not need to construct anything."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This relies upon the value type being default-constructible in the case of error, which is not possible for some types and possible but undesirable for others. An "
          },
          {
            "Text": "optional\u003cT\u003e",
            "AttrFlags": 2
          },
          {
            "Text": ", in the case of error, does not need to construct anything."
          }
        ]
      }
    ],
    "title": "030 Introduction"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}