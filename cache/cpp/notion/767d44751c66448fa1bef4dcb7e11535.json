{
  "ID": "767d4475-1c66-448f-a1be-f4dcb7e11535",
  "Root": {
    "alive": true,
    "content": [
      "40750fae-66f7-4df3-81fd-7579d99cecae",
      "0a84aacc-e74e-4c13-aa11-d9aeafc46e8a",
      "26262855-4ba1-44b9-9db3-c8250dacc62e",
      "8d839991-0414-45bd-9070-39ac753247f5",
      "e2574206-0342-4e82-a399-794985cd3cd9",
      "cc93d50f-63ab-4b8c-a857-e5f2a814c934",
      "e1cf2974-bdf0-4c79-8b27-b67c465eca8b",
      "7e33c595-73db-43a8-85e5-b8e0c8cca3b1",
      "a0bc7941-a986-491f-b7e3-f0c442f8e196",
      "3bf9ea73-7834-4696-be5d-c93d898d0e76",
      "6ae2ada2-eda6-4326-ab52-ac54d1dd5279"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522736601,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "767d4475-1c66-448f-a1be-f4dcb7e11535",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552345380000,
    "parent_id": "de2aa703-c2f6-4f94-bc50-eb5201c26ac3",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "std::optional as return value"
        ]
      ]
    },
    "type": "page",
    "version": 11,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522736598,
        "id": "40750fae-66f7-4df3-81fd-7579d99cecae",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552345320000,
        "parent_id": "767d4475-1c66-448f-a1be-f4dcb7e11535",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "std::optional\u003cfloat\u003e divide(float a, float b) {\n  if (b!=0.f) return a/b;\n  return {};\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "std::optional\u003cfloat\u003e divide(float a, float b) {\n  if (b!=0.f) return a/b;\n  return {};\n}",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522736600,
        "id": "0a84aacc-e74e-4c13-aa11-d9aeafc46e8a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522736600,
        "parent_id": "767d4475-1c66-448f-a1be-f4dcb7e11535",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Here we return either the fraction "
            ],
            [
              "a/b",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", but if it is not defined (would be infinity) we instead return the empty optional."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Here we return either the fraction "
          },
          {
            "Text": "a/b",
            "AttrFlags": 2
          },
          {
            "Text": ", but if it is not defined (would be infinity) we instead return the empty optional."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522736600,
        "id": "26262855-4ba1-44b9-9db3-c8250dacc62e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522736600,
        "parent_id": "767d4475-1c66-448f-a1be-f4dcb7e11535",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A more complex case:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A more complex case:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522736600,
        "id": "8d839991-0414-45bd-9070-39ac753247f5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552345320000,
        "parent_id": "767d4475-1c66-448f-a1be-f4dcb7e11535",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "template\u003cclass Range, class Pred\u003e\nauto find_if( Range\u0026\u0026 r, Pred\u0026\u0026 p ) {\n  using std::begin; using std::end;\n  auto b = begin(r), e = end(r);\n  auto r = std::find_if(b, e , p );\n  using iterator = decltype(r);\n  if (r==e)\n    return std::optional\u003citerator\u003e();\n  return std::optional\u003citerator\u003e(r);\n}\ntemplate\u003cclass Range, class T\u003e\nauto find( Range\u0026\u0026 r, T const\u0026 t ) {\n  return find_if( std::forward\u003cRange\u003e(r), [\u0026t](auto\u0026\u0026 x){return x==t;} );\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "template\u003cclass Range, class Pred\u003e\nauto find_if( Range\u0026\u0026 r, Pred\u0026\u0026 p ) {\n  using std::begin; using std::end;\n  auto b = begin(r), e = end(r);\n  auto r = std::find_if(b, e , p );\n  using iterator = decltype(r);\n  if (r==e)\n    return std::optional\u003citerator\u003e();\n  return std::optional\u003citerator\u003e(r);\n}\ntemplate\u003cclass Range, class T\u003e\nauto find( Range\u0026\u0026 r, T const\u0026 t ) {\n  return find_if( std::forward\u003cRange\u003e(r), [\u0026t](auto\u0026\u0026 x){return x==t;} );\n}",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522736601,
        "id": "e2574206-0342-4e82-a399-794985cd3cd9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522736601,
        "parent_id": "767d4475-1c66-448f-a1be-f4dcb7e11535",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "find( some_range, 7 )",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " searches the container or range "
            ],
            [
              "some_range",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " for something equal to the number "
            ],
            [
              "7",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". "
            ],
            [
              "find_if",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " does it with a predicate."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "find( some_range, 7 )",
            "AttrFlags": 2
          },
          {
            "Text": " searches the container or range "
          },
          {
            "Text": "some_range",
            "AttrFlags": 2
          },
          {
            "Text": " for something equal to the number "
          },
          {
            "Text": "7",
            "AttrFlags": 2
          },
          {
            "Text": ". "
          },
          {
            "Text": "find_if",
            "AttrFlags": 2
          },
          {
            "Text": " does it with a predicate."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522736601,
        "id": "cc93d50f-63ab-4b8c-a857-e5f2a814c934",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522736601,
        "parent_id": "767d4475-1c66-448f-a1be-f4dcb7e11535",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It returns either an empty optional if it was not found, or an optional containing an iterator tothe element if it was."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It returns either an empty optional if it was not found, or an optional containing an iterator tothe element if it was."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522736601,
        "id": "e1cf2974-bdf0-4c79-8b27-b67c465eca8b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522736601,
        "parent_id": "767d4475-1c66-448f-a1be-f4dcb7e11535",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This allows you to do:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This allows you to do:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522736601,
        "id": "7e33c595-73db-43a8-85e5-b8e0c8cca3b1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552345380000,
        "parent_id": "767d4475-1c66-448f-a1be-f4dcb7e11535",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "if (find( vec, 7 )) {\n  // code\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "if (find( vec, 7 )) {\n  // code\n}",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522736601,
        "id": "a0bc7941-a986-491f-b7e3-f0c442f8e196",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522736601,
        "parent_id": "767d4475-1c66-448f-a1be-f4dcb7e11535",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "or even"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "or even"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522736601,
        "id": "3bf9ea73-7834-4696-be5d-c93d898d0e76",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552345380000,
        "parent_id": "767d4475-1c66-448f-a1be-f4dcb7e11535",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "if (auto oit = find( vec, 7 )) {\n  vec.erase(*oit);\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "if (auto oit = find( vec, 7 )) {\n  vec.erase(*oit);\n}",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522736601,
        "id": "6ae2ada2-eda6-4326-ab52-ac54d1dd5279",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522736601,
        "parent_id": "767d4475-1c66-448f-a1be-f4dcb7e11535",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "without having to mess around with begin/end iterators and tests."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "without having to mess around with begin/end iterators and tests."
          }
        ]
      }
    ],
    "title": "std::optional as return value",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}