{
  "ID": "5644241e-ceec-479a-8322-e9c1780f1515",
  "Root": {
    "alive": true,
    "content": [
      "d5fca62d-ff53-4ce7-94df-c82fdf6103d2",
      "110e592d-c163-48c5-a645-d51140230a9d",
      "cfbfbe1f-ec92-4f1b-ac6e-f8b9a4317e4e",
      "f0195d61-1a5d-41d9-87e9-753c6175398e",
      "750001f9-c723-4ea3-bc4f-9d06fec97dfe",
      "c401673a-49df-49ec-94ab-db3712a0c151",
      "188af8fc-f52b-421b-863e-3bea81038f6c",
      "8ba36288-cdd1-460b-8345-d5bcc4cdabfd"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550523840000,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "5644241e-ceec-479a-8322-e9c1780f1515",
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552345260000,
    "parent_id": "ad527dc6-d4a7-420b-9234-94d0b9bfb560",
    "parent_table": "block",
    "permissions": [
      {
        "role": "editor",
        "type": "user_permission",
        "user_id": "bb760e2d-d679-4b64-b2a9-03005b21870a"
      }
    ],
    "properties": {
      "title": [
        [
          "std::variant"
        ]
      ]
    },
    "type": "page",
    "version": 60,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523888053,
        "id": "d5fca62d-ff53-4ce7-94df-c82fdf6103d2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552345140000,
        "parent_id": "5644241e-ceec-479a-8322-e9c1780f1515",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Variant is a replacement for raw "
            ],
            [
              "union",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " use. It is type-safe and knows what type it is, and it carefully constructs and destroys the objects within it when it should."
            ]
          ]
        },
        "type": "text",
        "version": 3,
        "inline_content": [
          {
            "Text": "Variant is a replacement for raw "
          },
          {
            "Text": "union",
            "AttrFlags": 2
          },
          {
            "Text": " use. It is type-safe and knows what type it is, and it carefully constructs and destroys the objects within it when it should."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523888054,
        "id": "110e592d-c163-48c5-a645-d51140230a9d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552345140000,
        "parent_id": "5644241e-ceec-479a-8322-e9c1780f1515",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It is almost never empty: only in corner cases where replacing its content throws and it cannot back out safely does it end up being in an empty state."
            ]
          ]
        },
        "type": "text",
        "version": 3,
        "inline_content": [
          {
            "Text": "It is almost never empty: only in corner cases where replacing its content throws and it cannot back out safely does it end up being in an empty state."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523888054,
        "id": "cfbfbe1f-ec92-4f1b-ac6e-f8b9a4317e4e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552345140000,
        "parent_id": "5644241e-ceec-479a-8322-e9c1780f1515",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It behaves somewhat like a "
            ],
            [
              "std::tuple",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", and somewhat like an "
            ],
            [
              "std::optional",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 3,
        "inline_content": [
          {
            "Text": "It behaves somewhat like a "
          },
          {
            "Text": "std::tuple",
            "AttrFlags": 2
          },
          {
            "Text": ", and somewhat like an "
          },
          {
            "Text": "std::optional",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523888054,
        "id": "f0195d61-1a5d-41d9-87e9-753c6175398e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552345140000,
        "parent_id": "5644241e-ceec-479a-8322-e9c1780f1515",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Using "
            ],
            [
              "std::get",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "std::get_if",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is usually a bad idea. The right answer is usually "
            ],
            [
              "std::visit",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", which lets you deal with every possibility right there. "
            ],
            [
              "if constexpr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can be used within the "
            ],
            [
              "visit",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " if you need to branch your behavior, rather than doing a sequence of runtime checks that duplicate what "
            ],
            [
              "visit",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will do more efficiently."
            ]
          ]
        },
        "type": "text",
        "version": 3,
        "inline_content": [
          {
            "Text": "Using "
          },
          {
            "Text": "std::get",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "std::get_if",
            "AttrFlags": 2
          },
          {
            "Text": " is usually a bad idea. The right answer is usually "
          },
          {
            "Text": "std::visit",
            "AttrFlags": 2
          },
          {
            "Text": ", which lets you deal with every possibility right there. "
          },
          {
            "Text": "if constexpr",
            "AttrFlags": 2
          },
          {
            "Text": " can be used within the "
          },
          {
            "Text": "visit",
            "AttrFlags": 2
          },
          {
            "Text": " if you need to branch your behavior, rather than doing a sequence of runtime checks that duplicate what "
          },
          {
            "Text": "visit",
            "AttrFlags": 2
          },
          {
            "Text": " will do more efficiently."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552345140000,
        "id": "750001f9-c723-4ea3-bc4f-9d06fec97dfe",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552345140000,
        "parent_id": "5644241e-ceec-479a-8322-e9c1780f1515",
        "parent_table": "block",
        "type": "text",
        "version": 4
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523890414,
        "format": {
          "page_full_width": true,
          "page_small_text": true
        },
        "id": "c401673a-49df-49ec-94ab-db3712a0c151",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552345140000,
        "parent_id": "5644241e-ceec-479a-8322-e9c1780f1515",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Basic std::variant use"
            ]
          ]
        },
        "type": "page",
        "version": 8,
        "title": "Basic std::variant use",
        "format_page": {
          "page_cover": "",
          "page_cover_position": 0,
          "page_font": "",
          "page_full_width": true,
          "page_icon": "",
          "page_small_text": true
        }
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523891479,
        "format": {
          "page_full_width": true,
          "page_small_text": true
        },
        "id": "188af8fc-f52b-421b-863e-3bea81038f6c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552345140000,
        "parent_id": "5644241e-ceec-479a-8322-e9c1780f1515",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Constructing a std::variant"
            ]
          ]
        },
        "type": "page",
        "version": 12,
        "title": "Constructing a std::variant",
        "format_page": {
          "page_cover": "",
          "page_cover_position": 0,
          "page_font": "",
          "page_full_width": true,
          "page_icon": "",
          "page_small_text": true
        }
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523889680,
        "format": {
          "page_full_width": true,
          "page_small_text": true
        },
        "id": "8ba36288-cdd1-460b-8345-d5bcc4cdabfd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552345200000,
        "parent_id": "5644241e-ceec-479a-8322-e9c1780f1515",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Create pseudo-method pointers"
            ]
          ]
        },
        "type": "page",
        "version": 8,
        "title": "Create pseudo-method pointers",
        "format_page": {
          "page_cover": "",
          "page_cover_position": 0,
          "page_font": "",
          "page_full_width": true,
          "page_icon": "",
          "page_small_text": true
        }
      }
    ],
    "title": "std::variant",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}