{
  "ID": "cd9d94e5-dfda-4ac4-8dc0-3e34c8b135df",
  "Root": {
    "alive": true,
    "content": [
      "da89785a-23ff-42dc-a893-8cedbe502731",
      "c5460ac7-ec2e-4db4-9d5a-63dab12f0a0e",
      "23f69621-c9bc-4eed-b9ab-6e9d7e7ff76f",
      "ce4ee429-5b4a-44ea-863c-c059be84b792",
      "75e1dd9a-9fcb-41a8-83de-8c89c2d7324c"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550524257021,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "cd9d94e5-dfda-4ac4-8dc0-3e34c8b135df",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551688416618,
    "parent_id": "0dfb5c8c-d986-4536-97a3-b3f543cfd7fa",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Classes with operator Functors"
        ]
      ]
    },
    "type": "page",
    "version": 4,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524257020,
        "id": "da89785a-23ff-42dc-a893-8cedbe502731",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524257020,
        "parent_id": "cd9d94e5-dfda-4ac4-8dc0-3e34c8b135df",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Every class which overloads the "
            ],
            [
              "operator()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can be used as a function object. These classes can be written by hand (often referred to as functors) or automatically generated by the compiler by writing "
            ],
            [
              "Lambdas",
              [
                [
                  "a",
                  "https://stackoverflow.com/documentation/c%2B%2B/572/lambdas"
                ]
              ]
            ],
            [
              " from C++11 on."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Every class which overloads the "
          },
          {
            "Text": "operator()",
            "AttrFlags": 2
          },
          {
            "Text": " can be used as a function object. These classes can be written by hand (often referred to as functors) or automatically generated by the compiler by writing "
          },
          {
            "Text": "Lambdas",
            "Link": "https://stackoverflow.com/documentation/c%2B%2B/572/lambdas"
          },
          {
            "Text": " from C++11 on."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524257021,
        "id": "c5460ac7-ec2e-4db4-9d5a-63dab12f0a0e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524257021,
        "parent_id": "cd9d94e5-dfda-4ac4-8dc0-3e34c8b135df",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "struct Person {\n    std::string name;\n    unsigned int age;\n};\n\n// Functor which find a person by name\nstruct FindPersonByName {\n    FindPersonByName(const std::string \u0026name) : _name(name) {}\n\n    // Overloaded method which will get called\n    bool operator()(const Person \u0026person) const {\n         return person.name == _name;\n    }\nprivate:\n    std::string _name;\n};\n\nstd::vector\u003cPerson\u003e v; // Assume this contains data\nstd::vector\u003cPerson\u003e::iterator iFind =\n    std::find_if(v.begin(), v.end(), FindPersonByName(\"Foobar\"));\n// ..."
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "struct Person {\n    std::string name;\n    unsigned int age;\n};\n\n// Functor which find a person by name\nstruct FindPersonByName {\n    FindPersonByName(const std::string \u0026name) : _name(name) {}\n\n    // Overloaded method which will get called\n    bool operator()(const Person \u0026person) const {\n         return person.name == _name;\n    }\nprivate:\n    std::string _name;\n};\n\nstd::vector\u003cPerson\u003e v; // Assume this contains data\nstd::vector\u003cPerson\u003e::iterator iFind =\n    std::find_if(v.begin(), v.end(), FindPersonByName(\"Foobar\"));\n// ...",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524257021,
        "id": "23f69621-c9bc-4eed-b9ab-6e9d7e7ff76f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524257021,
        "parent_id": "cd9d94e5-dfda-4ac4-8dc0-3e34c8b135df",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As functors have their own identity, they cannot be put in a typedef and these have to be accepted via template argument. The definition of "
            ],
            [
              "std::find_if",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can look like:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "As functors have their own identity, they cannot be put in a typedef and these have to be accepted via template argument. The definition of "
          },
          {
            "Text": "std::find_if",
            "AttrFlags": 2
          },
          {
            "Text": " can look like:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524257021,
        "id": "ce4ee429-5b4a-44ea-863c-c059be84b792",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524257021,
        "parent_id": "cd9d94e5-dfda-4ac4-8dc0-3e34c8b135df",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "template\u003ctypename Iterator, typename Predicate\u003e\nIterator find_if(Iterator begin, Iterator end, Predicate \u0026predicate) {\n     for (Iterator i = begin, i != end, ++i)\n         if (predicate(*i))\n             return i;\n     return end;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "template\u003ctypename Iterator, typename Predicate\u003e\nIterator find_if(Iterator begin, Iterator end, Predicate \u0026predicate) {\n     for (Iterator i = begin, i != end, ++i)\n         if (predicate(*i))\n             return i;\n     return end;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524257021,
        "id": "75e1dd9a-9fcb-41a8-83de-8c89c2d7324c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524257021,
        "parent_id": "cd9d94e5-dfda-4ac4-8dc0-3e34c8b135df",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "From C++17 on, the calling of the predicate can be done with invoke: "
            ],
            [
              "std::invoke(predicate, *i)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "From C++17 on, the calling of the predicate can be done with invoke: "
          },
          {
            "Text": "std::invoke(predicate, *i)",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      }
    ],
    "title": "Classes with operator Functors",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}