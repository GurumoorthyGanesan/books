{
  "ID": "d553e7c4-bcbc-4cc8-a258-9ee2c1f96856",
  "Root": {
    "alive": true,
    "content": [
      "56a198d1-f943-4828-8ba8-8e89a43b5399",
      "a3c80968-78c2-4ec6-b868-bbae904c5ef1",
      "8a18217b-5ae4-4a93-9ffd-58de9a8e6312",
      "3185c13a-7cb6-428b-b7a6-59384b9f6090",
      "a1bd0b6a-b2d4-4eb4-970c-8ded489d0ea2",
      "1358c56a-0eb0-4a41-b8b1-0e57bc01d458",
      "40f0e308-e760-45aa-84b0-3334f2457f88",
      "7cf7c6a5-dd47-4bce-8aaf-5f25ea08b433",
      "bb7a1fb8-2aea-4044-9d96-98ae9d689623",
      "184c6dc2-9a8d-4433-aaf7-331af50bd426"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550523843569,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "d553e7c4-bcbc-4cc8-a258-9ee2c1f96856",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550798280000,
    "parent_id": "193b149e-733b-4344-8898-29dc4a2ef0b0",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Controlling alignment"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523843565,
        "id": "56a198d1-f943-4828-8ba8-8e89a43b5399",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523843565,
        "parent_id": "d553e7c4-bcbc-4cc8-a258-9ee2c1f96856",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "alignas",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "keyword",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%2B%2B/4891/keywords"
                ]
              ]
            ],
            [
              " can be used to force a variable, class data member, declaration or definition of a class, or declaration or definition of an enum, to have a particular alignment, if supported. It comes in two forms:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "alignas",
            "AttrFlags": 2
          },
          {
            "Text": " "
          },
          {
            "Text": "keyword",
            "Link": "http://stackoverflow.com/documentation/c%2B%2B/4891/keywords"
          },
          {
            "Text": " can be used to force a variable, class data member, declaration or definition of a class, or declaration or definition of an enum, to have a particular alignment, if supported. It comes in two forms:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523843567,
        "id": "a3c80968-78c2-4ec6-b868-bbae904c5ef1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523843567,
        "parent_id": "d553e7c4-bcbc-4cc8-a258-9ee2c1f96856",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "alignas(x)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", where "
            ],
            [
              "x",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is a constant expression, gives the entity the alignment "
            ],
            [
              "x",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", if supported."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "alignas(x)",
            "AttrFlags": 2
          },
          {
            "Text": ", where "
          },
          {
            "Text": "x",
            "AttrFlags": 2
          },
          {
            "Text": " is a constant expression, gives the entity the alignment "
          },
          {
            "Text": "x",
            "AttrFlags": 2
          },
          {
            "Text": ", if supported."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523843567,
        "id": "8a18217b-5ae4-4a93-9ffd-58de9a8e6312",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523843567,
        "parent_id": "d553e7c4-bcbc-4cc8-a258-9ee2c1f96856",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "alignas(T)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", where "
            ],
            [
              "T",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is a type, gives the entity an alignment equal to the alignment requirement of "
            ],
            [
              "T",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", that is, "
            ],
            [
              "alignof(T)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", if supported."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "alignas(T)",
            "AttrFlags": 2
          },
          {
            "Text": ", where "
          },
          {
            "Text": "T",
            "AttrFlags": 2
          },
          {
            "Text": " is a type, gives the entity an alignment equal to the alignment requirement of "
          },
          {
            "Text": "T",
            "AttrFlags": 2
          },
          {
            "Text": ", that is, "
          },
          {
            "Text": "alignof(T)",
            "AttrFlags": 2
          },
          {
            "Text": ", if supported."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523843567,
        "id": "3185c13a-7cb6-428b-b7a6-59384b9f6090",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523843567,
        "parent_id": "d553e7c4-bcbc-4cc8-a258-9ee2c1f96856",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If multiple "
            ],
            [
              "alignas",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " specifiers are applied to the same entity, the strictest one applies."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If multiple "
          },
          {
            "Text": "alignas",
            "AttrFlags": 2
          },
          {
            "Text": " specifiers are applied to the same entity, the strictest one applies."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523843568,
        "id": "a1bd0b6a-b2d4-4eb4-970c-8ded489d0ea2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523843568,
        "parent_id": "d553e7c4-bcbc-4cc8-a258-9ee2c1f96856",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In this example, the buffer "
            ],
            [
              "buf",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is guaranteed to be appropriately aligned to hold an "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " object, even though its element type is "
            ],
            [
              "unsigned char",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", which may have a weaker alignment requirement."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In this example, the buffer "
          },
          {
            "Text": "buf",
            "AttrFlags": 2
          },
          {
            "Text": " is guaranteed to be appropriately aligned to hold an "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": " object, even though its element type is "
          },
          {
            "Text": "unsigned char",
            "AttrFlags": 2
          },
          {
            "Text": ", which may have a weaker alignment requirement."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523843568,
        "id": "1358c56a-0eb0-4a41-b8b1-0e57bc01d458",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550798280000,
        "parent_id": "d553e7c4-bcbc-4cc8-a258-9ee2c1f96856",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "alignas(int) unsigned char buf[sizeof(int)];\nnew (buf) int(42);"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "alignas(int) unsigned char buf[sizeof(int)];\nnew (buf) int(42);",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523843568,
        "id": "40f0e308-e760-45aa-84b0-3334f2457f88",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523843568,
        "parent_id": "d553e7c4-bcbc-4cc8-a258-9ee2c1f96856",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "alignas",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " cannot be used to give a type a smaller alignment than the type would have without this declaration:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "alignas",
            "AttrFlags": 2
          },
          {
            "Text": " cannot be used to give a type a smaller alignment than the type would have without this declaration:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523843568,
        "id": "7cf7c6a5-dd47-4bce-8aaf-5f25ea08b433",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550798280000,
        "parent_id": "d553e7c4-bcbc-4cc8-a258-9ee2c1f96856",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "alignas(1) int i; //Il-formed, unless `int` on this platform is aligned to 1 byte.\nalignas(char) int j; //Il-formed, unless `int` has the same or smaller alignment than `char`."
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "alignas(1) int i; //Il-formed, unless `int` on this platform is aligned to 1 byte.\nalignas(char) int j; //Il-formed, unless `int` has the same or smaller alignment than `char`.",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523843568,
        "id": "bb7a1fb8-2aea-4044-9d96-98ae9d689623",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523843568,
        "parent_id": "d553e7c4-bcbc-4cc8-a258-9ee2c1f96856",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "alignas",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", when given an integer constant expression, must be given a valid alignment. Valid alignments are always powers of two, and must be greater than zero. Compilers are required to support all valid alignments up to the alignment of the type "
            ],
            [
              "std::max_align_t",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". They "
            ],
            [
              "may",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " support larger alignments than this, but support for allocating memory for such objects is limited. The upper limit on alignments is implementation dependent."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "alignas",
            "AttrFlags": 2
          },
          {
            "Text": ", when given an integer constant expression, must be given a valid alignment. Valid alignments are always powers of two, and must be greater than zero. Compilers are required to support all valid alignments up to the alignment of the type "
          },
          {
            "Text": "std::max_align_t",
            "AttrFlags": 2
          },
          {
            "Text": ". They "
          },
          {
            "Text": "may",
            "AttrFlags": 4
          },
          {
            "Text": " support larger alignments than this, but support for allocating memory for such objects is limited. The upper limit on alignments is implementation dependent."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523843568,
        "id": "184c6dc2-9a8d-4433-aaf7-331af50bd426",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523843568,
        "parent_id": "d553e7c4-bcbc-4cc8-a258-9ee2c1f96856",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "C++17 features direct support in "
            ],
            [
              "operator new",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " for allocating memory for over-aligned types."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "C++17 features direct support in "
          },
          {
            "Text": "operator new",
            "AttrFlags": 2
          },
          {
            "Text": " for allocating memory for over-aligned types."
          }
        ]
      }
    ],
    "title": "Controlling alignment",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}