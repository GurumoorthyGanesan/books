{
  "ID": "aa159454-5376-41b5-aa92-dd658739119b",
  "Root": {
    "alive": true,
    "content": [
      "b7036f57-09ee-456c-a492-e363e7fe81cb",
      "567d904a-23ee-4470-926f-ef613d592ce5",
      "90b9f86b-2b74-43bb-92f9-ac23471a3196",
      "bd6c866b-bd23-4824-bc80-d92099599012",
      "5a0b557a-e8bc-497b-a907-979b5a0a8fa1",
      "33fd5202-aeb3-4259-ae4a-baec8aadfc9b",
      "7e476f6b-d32f-4aba-bcf4-7f825448e140",
      "3e3fef9c-5baf-4b24-b67f-995ddb93886b",
      "6f921f86-585a-4608-b0e0-2c40332b0c96",
      "452017db-2236-4ab8-ae00-b16870f622e4",
      "1f1b003e-1eed-4acf-b06e-244b706a8bd5",
      "bc0f4e0e-5371-4002-b509-43efe27ff797",
      "66ee956b-5082-4525-a6c3-665bc7f69645",
      "ba0ad25e-0012-439d-91bd-01843d82f51b",
      "2b4014e7-c1cf-42a4-a918-88c004d86b88",
      "737c064a-c30d-4b18-8748-b94c3c50daf3",
      "9227bd4a-d40a-464d-a180-069d05f21ade",
      "d6584959-d5f5-4433-96fa-681447fa127e"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550523904683,
    "id": "aa159454-5376-41b5-aa92-dd658739119b",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550523904683,
    "parent_id": "b41d10e9-7c12-482e-a1ff-612580407bc1",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "040 noreturn"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523904665,
        "id": "b7036f57-09ee-456c-a492-e363e7fe81cb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523904665,
        "parent_id": "aa159454-5376-41b5-aa92-dd658739119b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "C++11 introduced the "
            ],
            [
              "[[noreturn]]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " attribute. It can be used for a function to indicate that the function does not return to the caller by either executing a "
            ],
            [
              "return",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " statement, or by reaching the end if it’s body (it is important to note that this does not apply to "
            ],
            [
              "void",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " functions, since they do return to the caller, they just do not return any value). Such a function may end by calling "
            ],
            [
              "std::terminate",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "std::exit",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", or by throwing an exception. It is also worth noting that such a function can return by executing "
            ],
            [
              "longjmp",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "C++11 introduced the "
          },
          {
            "Text": "[[noreturn]]",
            "AttrFlags": 2
          },
          {
            "Text": " attribute. It can be used for a function to indicate that the function does not return to the caller by either executing a "
          },
          {
            "Text": "return",
            "AttrFlags": 4
          },
          {
            "Text": " statement, or by reaching the end if it’s body (it is important to note that this does not apply to "
          },
          {
            "Text": "void",
            "AttrFlags": 2
          },
          {
            "Text": " functions, since they do return to the caller, they just do not return any value). Such a function may end by calling "
          },
          {
            "Text": "std::terminate",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "std::exit",
            "AttrFlags": 2
          },
          {
            "Text": ", or by throwing an exception. It is also worth noting that such a function can return by executing "
          },
          {
            "Text": "longjmp",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523904668,
        "id": "567d904a-23ee-4470-926f-ef613d592ce5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523904668,
        "parent_id": "aa159454-5376-41b5-aa92-dd658739119b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For instance, the function below will always either throw an exception or call "
            ],
            [
              "std::terminate",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", so it is a good candidate for "
            ],
            [
              "[[noreturn]]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For instance, the function below will always either throw an exception or call "
          },
          {
            "Text": "std::terminate",
            "AttrFlags": 2
          },
          {
            "Text": ", so it is a good candidate for "
          },
          {
            "Text": "[[noreturn]]",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523904668,
        "id": "90b9f86b-2b74-43bb-92f9-ac23471a3196",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523904668,
        "parent_id": "aa159454-5376-41b5-aa92-dd658739119b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "[[noreturn]] void ownAssertFailureHandler(std::string message) {\n    std::cerr \u003c\u003c message \u003c\u003c std::endl;\n    if (THROW_EXCEPTION_ON_ASSERT)\n        throw AssertException(std::move(message));\n    std::terminate();\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "[[noreturn]] void ownAssertFailureHandler(std::string message) {\n    std::cerr \u003c\u003c message \u003c\u003c std::endl;\n    if (THROW_EXCEPTION_ON_ASSERT)\n        throw AssertException(std::move(message));\n    std::terminate();\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523904669,
        "id": "bd6c866b-bd23-4824-bc80-d92099599012",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523904669,
        "parent_id": "aa159454-5376-41b5-aa92-dd658739119b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This kind of functionality allows the compiler to end a function without a return statement if it knows the code will never be executed. Here, because the call to "
            ],
            [
              "ownAssertFailureHandler",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (defined above) in the code below will never return, the compiler does not need to add code below that call:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This kind of functionality allows the compiler to end a function without a return statement if it knows the code will never be executed. Here, because the call to "
          },
          {
            "Text": "ownAssertFailureHandler",
            "AttrFlags": 2
          },
          {
            "Text": " (defined above) in the code below will never return, the compiler does not need to add code below that call:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523904669,
        "id": "5a0b557a-e8bc-497b-a907-979b5a0a8fa1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523904669,
        "parent_id": "aa159454-5376-41b5-aa92-dd658739119b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "std::vector\u003cint\u003e createSequence(int end) {\n    if (end \u003e 0) {\n        std::vector\u003cint\u003e sequence;\n        sequence.reserve(end+1);\n        for (int i = 0; i \u003c= end; ++i)\n            sequence.push_back(i);\n        return sequence;\n    }\n    ownAssertFailureHandler(\"Negative number passed to createSequence()\"s);\n    // return std::vector\u003cint\u003e{}; //\u003c Not needed because of [[noreturn]]\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "std::vector\u003cint\u003e createSequence(int end) {\n    if (end \u003e 0) {\n        std::vector\u003cint\u003e sequence;\n        sequence.reserve(end+1);\n        for (int i = 0; i \u003c= end; ++i)\n            sequence.push_back(i);\n        return sequence;\n    }\n    ownAssertFailureHandler(\"Negative number passed to createSequence()\"s);\n    // return std::vector\u003cint\u003e{}; //\u003c Not needed because of [[noreturn]]\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523904669,
        "id": "33fd5202-aeb3-4259-ae4a-baec8aadfc9b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523904669,
        "parent_id": "aa159454-5376-41b5-aa92-dd658739119b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It is undefined behavior if the function will actually return, so the following is not allowed:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It is undefined behavior if the function will actually return, so the following is not allowed:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523904669,
        "id": "7e476f6b-d32f-4aba-bcf4-7f825448e140",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523904669,
        "parent_id": "aa159454-5376-41b5-aa92-dd658739119b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "[[noreturn]] void assertPositive(int number) {\n    if (number \u003e= 0)\n        return;\n    else\n        ownAssertFailureHandler(\"Positive number expected\"s); //\u003c [[noreturn]]\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "[[noreturn]] void assertPositive(int number) {\n    if (number \u003e= 0)\n        return;\n    else\n        ownAssertFailureHandler(\"Positive number expected\"s); //\u003c [[noreturn]]\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523904669,
        "id": "3e3fef9c-5baf-4b24-b67f-995ddb93886b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523904669,
        "parent_id": "aa159454-5376-41b5-aa92-dd658739119b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note that the "
            ],
            [
              "[[noreturn]]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is mostly used in void functions. However, this is not a requirement, allowing the functions to be used in generic programming:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note that the "
          },
          {
            "Text": "[[noreturn]]",
            "AttrFlags": 2
          },
          {
            "Text": " is mostly used in void functions. However, this is not a requirement, allowing the functions to be used in generic programming:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523904669,
        "id": "6f921f86-585a-4608-b0e0-2c40332b0c96",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523904669,
        "parent_id": "aa159454-5376-41b5-aa92-dd658739119b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "template\u003cclass InconsistencyHandler\u003e\ndouble fortyTwoDivideBy(int i) {\n    if (i == 0)\n         i = InconsistencyHandler::correct(i);\n    return 42. / i;\n}\n\nstruct InconsistencyThrower {\n    static [[noreturn]] int correct(int i) { ownAssertFailureHandler(\"Unknown inconsistency\"s); }\n}\n\nstruct InconsistencyChangeToOne {\n    static int correct(int i) { return 1; }\n}\n\ndouble fortyTwo = fortyTwoDivideBy\u003cInconsistencyChangeToOne\u003e(0);\ndouble unreachable = fortyTwoDivideBy\u003cInconsistencyThrower\u003e(0);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "template\u003cclass InconsistencyHandler\u003e\ndouble fortyTwoDivideBy(int i) {\n    if (i == 0)\n         i = InconsistencyHandler::correct(i);\n    return 42. / i;\n}\n\nstruct InconsistencyThrower {\n    static [[noreturn]] int correct(int i) { ownAssertFailureHandler(\"Unknown inconsistency\"s); }\n}\n\nstruct InconsistencyChangeToOne {\n    static int correct(int i) { return 1; }\n}\n\ndouble fortyTwo = fortyTwoDivideBy\u003cInconsistencyChangeToOne\u003e(0);\ndouble unreachable = fortyTwoDivideBy\u003cInconsistencyThrower\u003e(0);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523904669,
        "id": "452017db-2236-4ab8-ae00-b16870f622e4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523904669,
        "parent_id": "aa159454-5376-41b5-aa92-dd658739119b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The following standard library functions have this attribute:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The following standard library functions have this attribute:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523904670,
        "id": "1f1b003e-1eed-4acf-b06e-244b706a8bd5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523904670,
        "parent_id": "aa159454-5376-41b5-aa92-dd658739119b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "std::abort"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "std::abort"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523904681,
        "id": "bc0f4e0e-5371-4002-b509-43efe27ff797",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523904681,
        "parent_id": "aa159454-5376-41b5-aa92-dd658739119b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "std::exit"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "std::exit"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523904682,
        "id": "66ee956b-5082-4525-a6c3-665bc7f69645",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523904682,
        "parent_id": "aa159454-5376-41b5-aa92-dd658739119b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "std::quick_exit"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "std::quick_exit"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523904682,
        "id": "ba0ad25e-0012-439d-91bd-01843d82f51b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523904682,
        "parent_id": "aa159454-5376-41b5-aa92-dd658739119b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "std::unexpected"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "std::unexpected"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523904682,
        "id": "2b4014e7-c1cf-42a4-a918-88c004d86b88",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523904682,
        "parent_id": "aa159454-5376-41b5-aa92-dd658739119b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "std::terminate"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "std::terminate"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523904683,
        "id": "737c064a-c30d-4b18-8748-b94c3c50daf3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523904683,
        "parent_id": "aa159454-5376-41b5-aa92-dd658739119b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "std::rethrow_exception"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "std::rethrow_exception"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523904683,
        "id": "9227bd4a-d40a-464d-a180-069d05f21ade",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523904683,
        "parent_id": "aa159454-5376-41b5-aa92-dd658739119b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "std::throw_with_nested"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "std::throw_with_nested"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523904683,
        "id": "d6584959-d5f5-4433-96fa-681447fa127e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523904683,
        "parent_id": "aa159454-5376-41b5-aa92-dd658739119b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "std::nested_exception::rethrow_nested"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "std::nested_exception::rethrow_nested"
          }
        ]
      }
    ],
    "title": "040 noreturn"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}