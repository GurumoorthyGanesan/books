{
  "ID": "d366f033-9e5a-4390-8b51-d44722f42547",
  "Root": {
    "alive": true,
    "content": [
      "7b05b397-5637-418a-848e-c1e33ce695aa",
      "9a7a6ac7-b92b-4339-b862-259c41d97f44",
      "03665f65-eab8-4129-a36e-8fd28631b3be",
      "133a4085-49d0-4fb6-bf68-1dd8027da579"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550523441500,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "d366f033-9e5a-4390-8b51-d44722f42547",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550736120000,
    "parent_id": "9582f39a-18d4-4387-a429-d2d9d9c1c0a3",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Arithmetic operators"
        ]
      ]
    },
    "type": "page",
    "version": 10,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523441497,
        "id": "7b05b397-5637-418a-848e-c1e33ce695aa",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523441497,
        "parent_id": "d366f033-9e5a-4390-8b51-d44722f42547",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Arithmetic operators in C++ have the same precedence as they do in mathematics:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Arithmetic operators in C++ have the same precedence as they do in mathematics:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523441500,
        "id": "9a7a6ac7-b92b-4339-b862-259c41d97f44",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523441500,
        "parent_id": "d366f033-9e5a-4390-8b51-d44722f42547",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Multiplication and division have left associativity(meaning that they will be evaluated from left to right) and they have higher precedence than addition and subtraction, which also have left associativity."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Multiplication and division have left associativity(meaning that they will be evaluated from left to right) and they have higher precedence than addition and subtraction, which also have left associativity."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523441500,
        "id": "03665f65-eab8-4129-a36e-8fd28631b3be",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550736120000,
        "parent_id": "d366f033-9e5a-4390-8b51-d44722f42547",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We can also force the precedence of expression using parentheses "
            ],
            [
              "()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Just the same way as you would do that in normal mathematics."
            ]
          ]
        },
        "type": "text",
        "version": 5,
        "inline_content": [
          {
            "Text": "We can also force the precedence of expression using parentheses "
          },
          {
            "Text": "()",
            "AttrFlags": 2
          },
          {
            "Text": ". Just the same way as you would do that in normal mathematics."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523441500,
        "id": "133a4085-49d0-4fb6-bf68-1dd8027da579",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550736060000,
        "parent_id": "d366f033-9e5a-4390-8b51-d44722f42547",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "// volume of a spherical shell = 4 pi R^3 - 4 pi r^3\ndouble vol = 4.0*pi*R*R*R/3.0 - 4.0*pi*r*r*r/3.0;\n\n// Addition:\nint a = 2+4/2;          // equal to: 2+(4/2)         result: 4\nint b = (3+3)/2;        // equal to: (3+3)/2         result: 3\n\n// With Multiplication\n\nint c = 3+4/2*6;        // equal to: 3+((4/2)*6)     result: 15\nint d = 3*(3+6)/9;      // equal to: (3*(3+6))/9     result: 3\n\n// Division and Modulo\n\nint g = 3-3%1;          // equal to: 3 % 1 = 0  3 - 0 = 3\nint h = 3-(3%1);        // equal to: 3 % 1 = 0  3 - 0 = 3\nint i = 3-3/1%3;        // equal to: 3 / 1 = 3  3 % 3 = 0  3 - 0 = 3\nint l = 3-(3/1)%3;      // equal to: 3 / 1 = 3  3 % 3 = 0  3 - 0 = 3\nint m = 3-(3/(1%3));    // equal to: 1 % 3 = 1  3 / 1 = 3  3 - 3 = 0"
            ]
          ]
        },
        "type": "code",
        "version": 8,
        "code": "// volume of a spherical shell = 4 pi R^3 - 4 pi r^3\ndouble vol = 4.0*pi*R*R*R/3.0 - 4.0*pi*r*r*r/3.0;\n\n// Addition:\nint a = 2+4/2;          // equal to: 2+(4/2)         result: 4\nint b = (3+3)/2;        // equal to: (3+3)/2         result: 3\n\n// With Multiplication\n\nint c = 3+4/2*6;        // equal to: 3+((4/2)*6)     result: 15\nint d = 3*(3+6)/9;      // equal to: (3*(3+6))/9     result: 3\n\n// Division and Modulo\n\nint g = 3-3%1;          // equal to: 3 % 1 = 0  3 - 0 = 3\nint h = 3-(3%1);        // equal to: 3 % 1 = 0  3 - 0 = 3\nint i = 3-3/1%3;        // equal to: 3 / 1 = 3  3 % 3 = 0  3 - 0 = 3\nint l = 3-(3/1)%3;      // equal to: 3 / 1 = 3  3 % 3 = 0  3 - 0 = 3\nint m = 3-(3/(1%3));    // equal to: 1 % 3 = 1  3 / 1 = 3  3 - 3 = 0",
        "code_language": "C++"
      }
    ],
    "title": "Arithmetic operators",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}