{
  "ID": "28a3af88-43d9-40e0-9a78-ec5a3edbbd70",
  "Root": {
    "alive": true,
    "content": [
      "ddfadf93-2867-48ff-9cd1-25638dd0fd7a",
      "c6bb8c31-e780-45a7-9312-d3124475432d",
      "9ac15e7a-8dc3-41c9-a234-e9e992138f89",
      "e8b817b8-66ab-4e55-959c-1b333a1a2c43"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550523945555,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "28a3af88-43d9-40e0-9a78-ec5a3edbbd70",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551688391645,
    "parent_id": "2f06e164-6745-4c46-9402-92f51f9f9266",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Const Correctness"
        ]
      ]
    },
    "type": "page",
    "version": 4,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523945553,
        "id": "ddfadf93-2867-48ff-9cd1-25638dd0fd7a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523945553,
        "parent_id": "28a3af88-43d9-40e0-9a78-ec5a3edbbd70",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "One of the primary uses for "
            ],
            [
              "this",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " cv-qualifiers is "
            ],
            [
              "const",
              [
                [
                  "i"
                ],
                [
                  "c"
                ],
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%2B%2B/7217/const-correctness#t=201610191431578985982"
                ]
              ]
            ],
            [
              " correctness",
              [
                [
                  "i"
                ],
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%2B%2B/7217/const-correctness#t=201610191431578985982"
                ]
              ]
            ],
            [
              ". This is the practice of guaranteeing that only accesses that "
            ],
            [
              "need",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " to modify an object are "
            ],
            [
              "able",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " to modify the object, and that any (member or non-member) function that doesn’t need to modify an object doesn’t have write access to that object (whether directly or indirectly). This prevents unintentional modifications, making code less errorprone. It also allows any function that doesn’t need to modify state to be able to take either a "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or non-"
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " object, without needing to rewrite or overload the function."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "One of the primary uses for "
          },
          {
            "Text": "this",
            "AttrFlags": 2
          },
          {
            "Text": " cv-qualifiers is "
          },
          {
            "Text": "const",
            "AttrFlags": 6,
            "Link": "http://stackoverflow.com/documentation/c%2B%2B/7217/const-correctness#t=201610191431578985982"
          },
          {
            "Text": " correctness",
            "AttrFlags": 4,
            "Link": "http://stackoverflow.com/documentation/c%2B%2B/7217/const-correctness#t=201610191431578985982"
          },
          {
            "Text": ". This is the practice of guaranteeing that only accesses that "
          },
          {
            "Text": "need",
            "AttrFlags": 4
          },
          {
            "Text": " to modify an object are "
          },
          {
            "Text": "able",
            "AttrFlags": 4
          },
          {
            "Text": " to modify the object, and that any (member or non-member) function that doesn’t need to modify an object doesn’t have write access to that object (whether directly or indirectly). This prevents unintentional modifications, making code less errorprone. It also allows any function that doesn’t need to modify state to be able to take either a "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": " or non-"
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": " object, without needing to rewrite or overload the function."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523945555,
        "id": "c6bb8c31-e780-45a7-9312-d3124475432d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523945555,
        "parent_id": "28a3af88-43d9-40e0-9a78-ec5a3edbbd70",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " correctness, due to its nature, starts at the bottom up: Any class member function that doesn’t need to change state is "
            ],
            [
              "declared as ",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%2B%2B/7146/the-this-pointer/24492/this-pointer-cv-qualifiers#t=201610191432572968878"
                ]
              ]
            ],
            [
              "const",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%2B%2B/7146/the-this-pointer/24492/this-pointer-cv-qualifiers#t=201610191432572968878"
                ]
              ]
            ],
            [
              ", so that it can be called on "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " instances. This, in turn, allows passed-by-reference parameters to be declared "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " when they don’t need to be modified, which allows functions to take either "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or non-"
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " objects without complaining, and "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "-ness can propagate outwards in this manner. Due to this, getters are frequently "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", as are any other functions that don’t need to modify logical state."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": " correctness, due to its nature, starts at the bottom up: Any class member function that doesn’t need to change state is "
          },
          {
            "Text": "declared as ",
            "Link": "http://stackoverflow.com/documentation/c%2B%2B/7146/the-this-pointer/24492/this-pointer-cv-qualifiers#t=201610191432572968878"
          },
          {
            "Text": "const",
            "AttrFlags": 2,
            "Link": "http://stackoverflow.com/documentation/c%2B%2B/7146/the-this-pointer/24492/this-pointer-cv-qualifiers#t=201610191432572968878"
          },
          {
            "Text": ", so that it can be called on "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": " instances. This, in turn, allows passed-by-reference parameters to be declared "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": " when they don’t need to be modified, which allows functions to take either "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": " or non-"
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": " objects without complaining, and "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": "-ness can propagate outwards in this manner. Due to this, getters are frequently "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": ", as are any other functions that don’t need to modify logical state."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523945555,
        "id": "9ac15e7a-8dc3-41c9-a234-e9e992138f89",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523945555,
        "parent_id": "28a3af88-43d9-40e0-9a78-ec5a3edbbd70",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class ConstIncorrect {\n    Field fld;\n\n  public:\n    ConstIncorrect(const Field\u0026 f) : fld(f) {}     // Modifies.\n\n    const Field\u0026 get_field()       { return fld; } // Doesn't modify; should be const.\n    void set_field(const Field\u0026 f) { fld = f; }    // Modifies.\n\n    void do_something(int i) {                     // Modifies.\n        fld.insert_value(i);\n    }\n    void do_nothing()        { }                   // Doesn't modify; should be const.\n};\n\nclass ConstCorrect {\n    Field fld;\n\n  public:\n    ConstCorrect(const Field\u0026 f) : fld(f) {}       // Not const: Modifies.\n\n    const Field\u0026 get_field() const { return fld; } // const: Doesn't modify.\n    void set_field(const Field\u0026 f) { fld = f; }    // Not const: Modifies.\n\n    void do_something(int i) {                     // Not const: Modifies.\n        fld.insert_value(i);\n    }\n    void do_nothing() const  { }                   // const: Doesn't modify.\n};\n\n// ...\n\nconst ConstIncorrect i_cant_do_anything(make_me_a_field());\n// Now, let's read it...\nField f = i_cant_do_anything.get_field();\n  // Error: Loses cv-qualifiers, get_field() isn't const.\ni_cant_do_anything.do_nothing();\n  // Error: Same as above.\n// Oops.\n\nconst ConstCorrect but_i_can(make_me_a_field());\n// Now, let's read it...\nField f = but_i_can.get_field(); // Good.\nbut_i_can.do_nothing();          // Good."
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class ConstIncorrect {\n    Field fld;\n\n  public:\n    ConstIncorrect(const Field\u0026 f) : fld(f) {}     // Modifies.\n\n    const Field\u0026 get_field()       { return fld; } // Doesn't modify; should be const.\n    void set_field(const Field\u0026 f) { fld = f; }    // Modifies.\n\n    void do_something(int i) {                     // Modifies.\n        fld.insert_value(i);\n    }\n    void do_nothing()        { }                   // Doesn't modify; should be const.\n};\n\nclass ConstCorrect {\n    Field fld;\n\n  public:\n    ConstCorrect(const Field\u0026 f) : fld(f) {}       // Not const: Modifies.\n\n    const Field\u0026 get_field() const { return fld; } // const: Doesn't modify.\n    void set_field(const Field\u0026 f) { fld = f; }    // Not const: Modifies.\n\n    void do_something(int i) {                     // Not const: Modifies.\n        fld.insert_value(i);\n    }\n    void do_nothing() const  { }                   // const: Doesn't modify.\n};\n\n// ...\n\nconst ConstIncorrect i_cant_do_anything(make_me_a_field());\n// Now, let's read it...\nField f = i_cant_do_anything.get_field();\n  // Error: Loses cv-qualifiers, get_field() isn't const.\ni_cant_do_anything.do_nothing();\n  // Error: Same as above.\n// Oops.\n\nconst ConstCorrect but_i_can(make_me_a_field());\n// Now, let's read it...\nField f = but_i_can.get_field(); // Good.\nbut_i_can.do_nothing();          // Good.",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523945555,
        "id": "e8b817b8-66ab-4e55-959c-1b333a1a2c43",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523945555,
        "parent_id": "28a3af88-43d9-40e0-9a78-ec5a3edbbd70",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As illustrated by the comments on "
            ],
            [
              "ConstIncorrect",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "ConstCorrect",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", properly cv-qualifying functions also serves as documentation. If a class is "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " correct, any function that isn’t "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can safely be assumed to change state, and any function that is "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can safely be assumed not to change state."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "As illustrated by the comments on "
          },
          {
            "Text": "ConstIncorrect",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "ConstCorrect",
            "AttrFlags": 2
          },
          {
            "Text": ", properly cv-qualifying functions also serves as documentation. If a class is "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": " correct, any function that isn’t "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": " can safely be assumed to change state, and any function that is "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": " can safely be assumed not to change state."
          }
        ]
      }
    ],
    "title": "Const Correctness",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}