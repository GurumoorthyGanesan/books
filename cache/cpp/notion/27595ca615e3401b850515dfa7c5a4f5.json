{
  "ID": "27595ca6-15e3-401b-8505-15dfa7c5a4f5",
  "Root": {
    "alive": true,
    "content": [
      "85e21549-cebd-42e9-96ac-b5c854a74c33",
      "14aa3047-d88c-4cc1-8dc4-e84bd95b5608",
      "08a52f01-2a39-4989-99be-ffdefcb29341",
      "0903bd2e-9318-4794-ad78-c7904c532b88",
      "10d45008-3f6a-4f72-bb45-5159b73cbc4e",
      "db33b084-ea49-4068-ac01-9e9756f89634",
      "9304c49f-dda7-40e5-8c28-9d92aedfd81b",
      "07f53224-8922-4fbd-bd39-833f820928b1",
      "1c3cfdf7-0021-4966-9441-fbba3d45c270",
      "d2afeb5c-7151-4de0-bdf1-70e5ffbf2b96",
      "0ef90fd9-a47b-42aa-9823-fc71b416f20a",
      "e9736b8d-3994-4fca-9017-cddf0c42209f",
      "7c68093e-4603-43b7-87fe-5fc3087468ef",
      "895c087e-a102-482b-93c5-f4dee94cb0ec",
      "6c0ab9c9-ee79-4430-a573-90ce10c29220",
      "67d0606e-83a7-43a6-951c-2c24a4a923c6",
      "26244e3b-07d3-45ef-b9af-65496cf6adfd",
      "6abb10e5-5225-4b98-bce0-097176e11bb0",
      "54b7de51-1d21-4166-b40d-9a8d515a77c6",
      "b4852f97-53ea-4fc1-bf90-bf2103ed2b41",
      "ee222e7b-245c-441a-a863-c1ae039957a4",
      "3055288c-24b3-4359-8a15-f817892180f1",
      "ca19b122-3fcc-4056-b30d-9e2c840d186b",
      "bd503708-4255-412e-9c71-457d597d998c",
      "ed966bd6-209d-408f-a528-82a501632535",
      "f2318471-4d98-4f50-a8ce-8bfe59051186",
      "91fbf118-e31e-4d99-9c77-e97ee9fce559"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550524345046,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "27595ca6-15e3-401b-8505-15dfa7c5a4f5",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551688556577,
    "parent_id": "1e648ce1-cc7e-4997-bf6e-9a33d2ac504d",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Const Correctness as Documentation"
        ]
      ]
    },
    "type": "page",
    "version": 4,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524345035,
        "id": "85e21549-cebd-42e9-96ac-b5c854a74c33",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524345035,
        "parent_id": "27595ca6-15e3-401b-8505-15dfa7c5a4f5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "One of the more useful things about "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " correctness is that it serves as a way of documenting code, providing certain guarantees to the programmer and other users. These guarantees are enforced by the compiler due to "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "ness, with a lack of "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "ness in turn indicating that code doesn’t provide them."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "One of the more useful things about "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": " correctness is that it serves as a way of documenting code, providing certain guarantees to the programmer and other users. These guarantees are enforced by the compiler due to "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": "ness, with a lack of "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": "ness in turn indicating that code doesn’t provide them."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524345038,
        "id": "14aa3047-d88c-4cc1-8dc4-e84bd95b5608",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524345038,
        "parent_id": "27595ca6-15e3-401b-8505-15dfa7c5a4f5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " CV-Qualified Member Functions:"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": " CV-Qualified Member Functions:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524345039,
        "id": "08a52f01-2a39-4989-99be-ffdefcb29341",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524345039,
        "parent_id": "27595ca6-15e3-401b-8505-15dfa7c5a4f5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Any member function which is "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can be assumed to have intent to read the instance, and:"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Any member function which is "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": " can be assumed to have intent to read the instance, and:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524345039,
        "id": "0903bd2e-9318-4794-ad78-c7904c532b88",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524345039,
        "parent_id": "27595ca6-15e3-401b-8505-15dfa7c5a4f5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Shall not modify the logical state of the instance they are called on. Therefore, they shall not modify any member variables of the instance they are called on, except "
            ],
            [
              "mutable",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " variables."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Shall not modify the logical state of the instance they are called on. Therefore, they shall not modify any member variables of the instance they are called on, except "
          },
          {
            "Text": "mutable",
            "AttrFlags": 2
          },
          {
            "Text": " variables."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524345039,
        "id": "10d45008-3f6a-4f72-bb45-5159b73cbc4e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524345039,
        "parent_id": "27595ca6-15e3-401b-8505-15dfa7c5a4f5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Shall not call any "
            ],
            [
              "other",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " functions that would modify any member variables of the instance, except "
            ],
            [
              "mutable",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " variables."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Shall not call any "
          },
          {
            "Text": "other",
            "AttrFlags": 4
          },
          {
            "Text": " functions that would modify any member variables of the instance, except "
          },
          {
            "Text": "mutable",
            "AttrFlags": 2
          },
          {
            "Text": " variables."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524345040,
        "id": "db33b084-ea49-4068-ac01-9e9756f89634",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524345040,
        "parent_id": "27595ca6-15e3-401b-8505-15dfa7c5a4f5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Conversely, any member function which isn’t "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can be assumed to have intent to modify the instance, and:"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Conversely, any member function which isn’t "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": " can be assumed to have intent to modify the instance, and:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524345040,
        "id": "9304c49f-dda7-40e5-8c28-9d92aedfd81b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524345040,
        "parent_id": "27595ca6-15e3-401b-8505-15dfa7c5a4f5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "May or may not modify logical state."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "May or may not modify logical state."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524345040,
        "id": "07f53224-8922-4fbd-bd39-833f820928b1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524345040,
        "parent_id": "27595ca6-15e3-401b-8505-15dfa7c5a4f5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "May or may not call other functions which modify logical state."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "May or may not call other functions which modify logical state."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524345040,
        "id": "1c3cfdf7-0021-4966-9441-fbba3d45c270",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524345040,
        "parent_id": "27595ca6-15e3-401b-8505-15dfa7c5a4f5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This can be used to make assumptions about the state of the object after any given member function is called, even without seeing the definition of that function:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This can be used to make assumptions about the state of the object after any given member function is called, even without seeing the definition of that function:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524345040,
        "id": "d2afeb5c-7151-4de0-bdf1-70e5ffbf2b96",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524345040,
        "parent_id": "27595ca6-15e3-401b-8505-15dfa7c5a4f5",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// ConstMemberFunctions.h\n\nclass ConstMemberFunctions {\n    int val;\n    mutable int cache;\n    mutable bool state_changed;\n\n  public:\n    // Constructor clearly changes logical state.  No assumptions necessary.\n    ConstMemberFunctions(int v = 0);\n\n    // We can assume this function doesn't change logical state, and doesn't call\n    //  set_val().  It may or may not call squared_calc() or bad_func().\n    int calc() const;\n\n    // We can assume this function doesn't change logical state, and doesn't call\n    //  set_val().  It may or may not call calc() or bad_func().\n    int squared_calc() const;\n\n    // We can assume this function doesn't change logical state, and doesn't call\n    //  set_val().  It may or may not call calc() or squared_calc().\n    void bad_func() const;\n\n    // We can assume this function changes logical state, and may or may not call\n    //  calc(), squared_calc(), or bad_func().\n    void set_val(int v);\n};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// ConstMemberFunctions.h\n\nclass ConstMemberFunctions {\n    int val;\n    mutable int cache;\n    mutable bool state_changed;\n\n  public:\n    // Constructor clearly changes logical state.  No assumptions necessary.\n    ConstMemberFunctions(int v = 0);\n\n    // We can assume this function doesn't change logical state, and doesn't call\n    //  set_val().  It may or may not call squared_calc() or bad_func().\n    int calc() const;\n\n    // We can assume this function doesn't change logical state, and doesn't call\n    //  set_val().  It may or may not call calc() or bad_func().\n    int squared_calc() const;\n\n    // We can assume this function doesn't change logical state, and doesn't call\n    //  set_val().  It may or may not call calc() or squared_calc().\n    void bad_func() const;\n\n    // We can assume this function changes logical state, and may or may not call\n    //  calc(), squared_calc(), or bad_func().\n    void set_val(int v);\n};",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524345041,
        "id": "0ef90fd9-a47b-42aa-9823-fc71b416f20a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524345041,
        "parent_id": "27595ca6-15e3-401b-8505-15dfa7c5a4f5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Due to "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " rules, these assumptions will in fact be enforced by the compiler."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Due to "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": " rules, these assumptions will in fact be enforced by the compiler."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524345041,
        "id": "e9736b8d-3994-4fca-9017-cddf0c42209f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524345041,
        "parent_id": "27595ca6-15e3-401b-8505-15dfa7c5a4f5",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// ConstMemberFunctions.cpp\n\nConstMemberFunctions::ConstMemberFunctions(int v /* = 0*/)\n  : cache(0), val(v), state_changed(true) {}\n\n// Our assumption was correct.\nint ConstMemberFunctions::calc() const {\n    if (state_changed) {\n        cache = 3 * val;\n        state_changed = false;\n    }\n\n    return cache;\n}\n\n// Our assumption was correct.\nint ConstMemberFunctions::squared_calc() const {\n    return calc() * calc();\n}\n\n// Our assumption was incorrect.\n// Function fails to compile, due to `this` losing qualifiers.\nvoid ConstMemberFunctions::bad_func() const {\n    set_val(863);\n}\n\n// Our assumption was correct.\nvoid ConstMemberFunctions::set_val(int v) {\n    if (v != val) {\n        val = v;\n        state_changed = true;\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// ConstMemberFunctions.cpp\n\nConstMemberFunctions::ConstMemberFunctions(int v /* = 0*/)\n  : cache(0), val(v), state_changed(true) {}\n\n// Our assumption was correct.\nint ConstMemberFunctions::calc() const {\n    if (state_changed) {\n        cache = 3 * val;\n        state_changed = false;\n    }\n\n    return cache;\n}\n\n// Our assumption was correct.\nint ConstMemberFunctions::squared_calc() const {\n    return calc() * calc();\n}\n\n// Our assumption was incorrect.\n// Function fails to compile, due to `this` losing qualifiers.\nvoid ConstMemberFunctions::bad_func() const {\n    set_val(863);\n}\n\n// Our assumption was correct.\nvoid ConstMemberFunctions::set_val(int v) {\n    if (v != val) {\n        val = v;\n        state_changed = true;\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524345041,
        "id": "7c68093e-4603-43b7-87fe-5fc3087468ef",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524345041,
        "parent_id": "27595ca6-15e3-401b-8505-15dfa7c5a4f5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " Function Parameters:"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": " Function Parameters:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524345041,
        "id": "895c087e-a102-482b-93c5-f4dee94cb0ec",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524345041,
        "parent_id": "27595ca6-15e3-401b-8505-15dfa7c5a4f5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Any function with one or more parameters which are "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can be assumed to have intent to read those parameters, and:"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Any function with one or more parameters which are "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": " can be assumed to have intent to read those parameters, and:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524345041,
        "id": "6c0ab9c9-ee79-4430-a573-90ce10c29220",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524345041,
        "parent_id": "27595ca6-15e3-401b-8505-15dfa7c5a4f5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Shall not modify those parameters, or call any member functions that would modify them."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Shall not modify those parameters, or call any member functions that would modify them."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524345042,
        "id": "67d0606e-83a7-43a6-951c-2c24a4a923c6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524345042,
        "parent_id": "27595ca6-15e3-401b-8505-15dfa7c5a4f5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Shall not pass those parameters to any "
            ],
            [
              "other",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " function which would modify them and/or call any member functions that would modify them."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Shall not pass those parameters to any "
          },
          {
            "Text": "other",
            "AttrFlags": 4
          },
          {
            "Text": " function which would modify them and/or call any member functions that would modify them."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524345042,
        "id": "26244e3b-07d3-45ef-b9af-65496cf6adfd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524345042,
        "parent_id": "27595ca6-15e3-401b-8505-15dfa7c5a4f5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Conversely, any function with one or more parameters which aren’t "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can be assumed to have intent to modify those parameters, and:"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Conversely, any function with one or more parameters which aren’t "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": " can be assumed to have intent to modify those parameters, and:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524345042,
        "id": "6abb10e5-5225-4b98-bce0-097176e11bb0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524345042,
        "parent_id": "27595ca6-15e3-401b-8505-15dfa7c5a4f5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "May or may not modify those parameters, or call any member functions which whould modify them."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "May or may not modify those parameters, or call any member functions which whould modify them."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524345042,
        "id": "54b7de51-1d21-4166-b40d-9a8d515a77c6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524345042,
        "parent_id": "27595ca6-15e3-401b-8505-15dfa7c5a4f5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "May or may not pass those parameters to other functions which would modify them and/or call any member functions that would modify them."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "May or may not pass those parameters to other functions which would modify them and/or call any member functions that would modify them."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524345043,
        "id": "b4852f97-53ea-4fc1-bf90-bf2103ed2b41",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524345043,
        "parent_id": "27595ca6-15e3-401b-8505-15dfa7c5a4f5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This can be used to make assumptions about the state of the parameters after being passed to any given function, even without seeing the definition of that function."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This can be used to make assumptions about the state of the parameters after being passed to any given function, even without seeing the definition of that function."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524345043,
        "id": "ee222e7b-245c-441a-a863-c1ae039957a4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524345043,
        "parent_id": "27595ca6-15e3-401b-8505-15dfa7c5a4f5",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// function_parameter.h\n\n// We can assume that c isn't modified (and c.set_val() isn't called), and isn't passed\n//  to non_qualified_function_parameter().  If passed to one_const_one_not(), it is the first\n//  parameter.\nvoid const_function_parameter(const ConstMemberFunctions\u0026 c);\n\n// We can assume that c is modified and/or c.set_val() is called, and may or may not be passed\n//  to any of these functions.  If passed to one_const_one_not, it may be either parameter.\nvoid non_qualified_function_parameter(ConstMemberFunctions\u0026 c);\n\n// We can assume that:\n  // l is not modified, and l.set_val() won't be called.\n  // l may or may not be passed to const_function_parameter().\n  // r is modified, and/or r.set_val() may be called.\n  // r may or may not be passed to either of the preceding functions.\nvoid one_const_one_not(const ConstMemberFunctions\u0026 l, ConstMemberFunctions\u0026 r);\n\n// We can assume that c isn't modified (and c.set_val() isn't called), and isn't passed\n//  to non_qualified_function_parameter().  If passed to one_const_one_not(), it is the first\n//  parameter.\nvoid bad_parameter(const ConstMemberFunctions\u0026 c);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// function_parameter.h\n\n// We can assume that c isn't modified (and c.set_val() isn't called), and isn't passed\n//  to non_qualified_function_parameter().  If passed to one_const_one_not(), it is the first\n//  parameter.\nvoid const_function_parameter(const ConstMemberFunctions\u0026 c);\n\n// We can assume that c is modified and/or c.set_val() is called, and may or may not be passed\n//  to any of these functions.  If passed to one_const_one_not, it may be either parameter.\nvoid non_qualified_function_parameter(ConstMemberFunctions\u0026 c);\n\n// We can assume that:\n  // l is not modified, and l.set_val() won't be called.\n  // l may or may not be passed to const_function_parameter().\n  // r is modified, and/or r.set_val() may be called.\n  // r may or may not be passed to either of the preceding functions.\nvoid one_const_one_not(const ConstMemberFunctions\u0026 l, ConstMemberFunctions\u0026 r);\n\n// We can assume that c isn't modified (and c.set_val() isn't called), and isn't passed\n//  to non_qualified_function_parameter().  If passed to one_const_one_not(), it is the first\n//  parameter.\nvoid bad_parameter(const ConstMemberFunctions\u0026 c);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524345043,
        "id": "3055288c-24b3-4359-8a15-f817892180f1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524345043,
        "parent_id": "27595ca6-15e3-401b-8505-15dfa7c5a4f5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Due to "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " rules, these assumptions will in fact be enforced by the compiler."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Due to "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": " rules, these assumptions will in fact be enforced by the compiler."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524345043,
        "id": "ca19b122-3fcc-4056-b30d-9e2c840d186b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524345043,
        "parent_id": "27595ca6-15e3-401b-8505-15dfa7c5a4f5",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// function_parameter.cpp\n\n// Our assumption was correct.\nvoid const_function_parameter(const ConstMemberFunctions\u0026 c) {\n    std::cout \u003c\u003c \"With the current value, the output is: \" \u003c\u003c c.calc() \u003c\u003c '\\n'\n              \u003c\u003c \"If squared, it's: \" \u003c\u003c c.squared_calc()\n              \u003c\u003c std::endl;\n}\n\n// Our assumption was correct.\nvoid non_qualified_function_parameter(ConstMemberFunctions\u0026 c) {\n    c.set_val(42);\n    std::cout \u003c\u003c \"For the value 42, the output is: \" \u003c\u003c c.calc() \u003c\u003c '\\n'\n              \u003c\u003c \"If squared, it's: \" \u003c\u003c c.squared_calc()\n              \u003c\u003c std::endl;\n}\n\n// Our assumption was correct, in the ugliest possible way.\n// Note that const correctness doesn't prevent encapsulation from intentionally being broken,\n//  it merely prevents code from having write access when it doesn't need it.\nvoid one_const_one_not(const ConstMemberFunctions\u0026 l, ConstMemberFunctions\u0026 r) {\n    // Let's just punch access modifiers and common sense in the face here.\n    struct Machiavelli {\n        int val;\n        int unimportant;\n        bool state_changed;\n    };\n    reinterpret_cast\u003cMachiavelli\u0026\u003e(r).val = l.calc();\n    reinterpret_cast\u003cMachiavelli\u0026\u003e(r).state_changed = true;\n\n    const_function_parameter(l);\n    const_function_parameter(r);\n}\n\n// Our assumption was incorrect.\n// Function fails to compile, due to `this` losing qualifiers in c.set_val().\nvoid bad_parameter(const ConstMemberFunctions\u0026 c) {\n    c.set_val(18);\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// function_parameter.cpp\n\n// Our assumption was correct.\nvoid const_function_parameter(const ConstMemberFunctions\u0026 c) {\n    std::cout \u003c\u003c \"With the current value, the output is: \" \u003c\u003c c.calc() \u003c\u003c '\\n'\n              \u003c\u003c \"If squared, it's: \" \u003c\u003c c.squared_calc()\n              \u003c\u003c std::endl;\n}\n\n// Our assumption was correct.\nvoid non_qualified_function_parameter(ConstMemberFunctions\u0026 c) {\n    c.set_val(42);\n    std::cout \u003c\u003c \"For the value 42, the output is: \" \u003c\u003c c.calc() \u003c\u003c '\\n'\n              \u003c\u003c \"If squared, it's: \" \u003c\u003c c.squared_calc()\n              \u003c\u003c std::endl;\n}\n\n// Our assumption was correct, in the ugliest possible way.\n// Note that const correctness doesn't prevent encapsulation from intentionally being broken,\n//  it merely prevents code from having write access when it doesn't need it.\nvoid one_const_one_not(const ConstMemberFunctions\u0026 l, ConstMemberFunctions\u0026 r) {\n    // Let's just punch access modifiers and common sense in the face here.\n    struct Machiavelli {\n        int val;\n        int unimportant;\n        bool state_changed;\n    };\n    reinterpret_cast\u003cMachiavelli\u0026\u003e(r).val = l.calc();\n    reinterpret_cast\u003cMachiavelli\u0026\u003e(r).state_changed = true;\n\n    const_function_parameter(l);\n    const_function_parameter(r);\n}\n\n// Our assumption was incorrect.\n// Function fails to compile, due to `this` losing qualifiers in c.set_val().\nvoid bad_parameter(const ConstMemberFunctions\u0026 c) {\n    c.set_val(18);\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524345043,
        "id": "bd503708-4255-412e-9c71-457d597d998c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524345043,
        "parent_id": "27595ca6-15e3-401b-8505-15dfa7c5a4f5",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524345046,
        "id": "ed966bd6-209d-408f-a528-82a501632535",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524345046,
        "parent_id": "27595ca6-15e3-401b-8505-15dfa7c5a4f5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "While it "
            ],
            [
              "is",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " possible to "
            ],
            [
              "circumvent ",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%2B%2B/4891/keywords/18511/const-cast#t=201610041626457103824"
                ]
              ]
            ],
            [
              "const",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%2B%2B/4891/keywords/18511/const-cast#t=201610041626457103824"
                ]
              ]
            ],
            [
              " correctness",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%2B%2B/4891/keywords/18511/const-cast#t=201610041626457103824"
                ]
              ]
            ],
            [
              ", and by extension break these guarantees, this must be done intentionally by the programmer (just like breaking encapsulation with "
            ],
            [
              "Machiavelli",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", above), and is likely to cause undefined behaviour."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "While it "
          },
          {
            "Text": "is",
            "AttrFlags": 4
          },
          {
            "Text": " possible to "
          },
          {
            "Text": "circumvent ",
            "Link": "http://stackoverflow.com/documentation/c%2B%2B/4891/keywords/18511/const-cast#t=201610041626457103824"
          },
          {
            "Text": "const",
            "AttrFlags": 2,
            "Link": "http://stackoverflow.com/documentation/c%2B%2B/4891/keywords/18511/const-cast#t=201610041626457103824"
          },
          {
            "Text": " correctness",
            "Link": "http://stackoverflow.com/documentation/c%2B%2B/4891/keywords/18511/const-cast#t=201610041626457103824"
          },
          {
            "Text": ", and by extension break these guarantees, this must be done intentionally by the programmer (just like breaking encapsulation with "
          },
          {
            "Text": "Machiavelli",
            "AttrFlags": 2
          },
          {
            "Text": ", above), and is likely to cause undefined behaviour."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524345046,
        "id": "f2318471-4d98-4f50-a8ce-8bfe59051186",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524345046,
        "parent_id": "27595ca6-15e3-401b-8505-15dfa7c5a4f5",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class DealBreaker : public ConstMemberFunctions {\n  public:\n    DealBreaker(int v = 0);\n\n    // A foreboding name, but it's const...\n    void no_guarantees() const;\n}\n\nDealBreaker::DealBreaker(int v /* = 0 */) : ConstMemberFunctions(v) {}\n\n// Our assumption was incorrect.\n// const_cast removes const-ness, making the compiler think we know what we're doing.\nvoid DealBreaker::no_guarantees() const {\n    const_cast\u003cDealBreaker*\u003e(this)-\u003eset_val(823);\n}\n\n// ...\n\nconst DealBreaker d(50);\nd.no_guarantees(); // Undefined behaviour: d really IS const, it may or may not be modified."
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class DealBreaker : public ConstMemberFunctions {\n  public:\n    DealBreaker(int v = 0);\n\n    // A foreboding name, but it's const...\n    void no_guarantees() const;\n}\n\nDealBreaker::DealBreaker(int v /* = 0 */) : ConstMemberFunctions(v) {}\n\n// Our assumption was incorrect.\n// const_cast removes const-ness, making the compiler think we know what we're doing.\nvoid DealBreaker::no_guarantees() const {\n    const_cast\u003cDealBreaker*\u003e(this)-\u003eset_val(823);\n}\n\n// ...\n\nconst DealBreaker d(50);\nd.no_guarantees(); // Undefined behaviour: d really IS const, it may or may not be modified.",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524345046,
        "id": "91fbf118-e31e-4d99-9c77-e97ee9fce559",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524345046,
        "parent_id": "27595ca6-15e3-401b-8505-15dfa7c5a4f5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "However, due to this requiring the programmer to very specifically "
            ],
            [
              "tell",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " the compiler that they intend to ignore "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "ness, and being inconsistent across compilers, it is generally safe to assume that "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " correct code will refrain from doing so unless otherwise specified."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "However, due to this requiring the programmer to very specifically "
          },
          {
            "Text": "tell",
            "AttrFlags": 4
          },
          {
            "Text": " the compiler that they intend to ignore "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": "ness, and being inconsistent across compilers, it is generally safe to assume that "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": " correct code will refrain from doing so unless otherwise specified."
          }
        ]
      }
    ],
    "title": "Const Correctness as Documentation",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}