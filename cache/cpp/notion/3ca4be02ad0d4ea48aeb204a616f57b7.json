{
  "ID": "3ca4be02-ad0d-4ea4-8aeb-204a616f57b7",
  "Root": {
    "alive": true,
    "content": [
      "6cdb1547-c879-4c69-9fc1-d10f3f99913e",
      "9adb8f0f-6df0-4de5-82bf-9df98bfce32a",
      "d0b3dade-bb4c-49a9-b98a-4f64bc76c749",
      "0fd1ecbc-a09f-4da2-97cb-b27c8ccfdebf"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550523098694,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "3ca4be02-ad0d-4ea4-8aeb-204a616f57b7",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551687284401,
    "parent_id": "10c1e1fe-bf0e-4f71-b1f2-173539570a03",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Derived to base conversion for pointers to members"
        ]
      ]
    },
    "type": "page",
    "version": 4,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523098691,
        "id": "6cdb1547-c879-4c69-9fc1-d10f3f99913e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523098691,
        "parent_id": "3ca4be02-ad0d-4ea4-8aeb-204a616f57b7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A pointer to member of derived class can be converted to a pointer to member of base class using "
            ],
            [
              "static_cast",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". The types pointed to must match."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A pointer to member of derived class can be converted to a pointer to member of base class using "
          },
          {
            "Text": "static_cast",
            "AttrFlags": 2
          },
          {
            "Text": ". The types pointed to must match."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523098693,
        "id": "9adb8f0f-6df0-4de5-82bf-9df98bfce32a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523098693,
        "parent_id": "3ca4be02-ad0d-4ea4-8aeb-204a616f57b7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If the operand is a null pointer to member value, the result is also a null pointer to member value."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If the operand is a null pointer to member value, the result is also a null pointer to member value."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523098694,
        "id": "d0b3dade-bb4c-49a9-b98a-4f64bc76c749",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523098694,
        "parent_id": "3ca4be02-ad0d-4ea4-8aeb-204a616f57b7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Otherwise, the conversion is only valid if the member pointed to by the operand actually exists in the destination class, or if the destination class is a base or derived class of the class containing the member pointed to by the operand. "
            ],
            [
              "static_cast",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " does not check for validity. If the conversion is not valid, the behaviour is undefined."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Otherwise, the conversion is only valid if the member pointed to by the operand actually exists in the destination class, or if the destination class is a base or derived class of the class containing the member pointed to by the operand. "
          },
          {
            "Text": "static_cast",
            "AttrFlags": 2
          },
          {
            "Text": " does not check for validity. If the conversion is not valid, the behaviour is undefined."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523098694,
        "id": "0fd1ecbc-a09f-4da2-97cb-b27c8ccfdebf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523098694,
        "parent_id": "3ca4be02-ad0d-4ea4-8aeb-204a616f57b7",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "struct A {};\nstruct B { int x; };\nstruct C : A, B { int y; double z; };\nint B::*p1 = \u0026B::x;\nint C::*p2 = p1;                              // ok; implicit conversion\nint B::*p3 = p2;                              // error\nint B::*p4 = static_cast\u003cint B::*\u003e(p2);       // ok; p4 is equal to p1\nint A::*p5 = static_cast\u003cint A::*\u003e(p2);       // undefined; p2 points to x, which is a member\n                                              // of the unrelated class B\ndouble C::*p6 = \u0026C::z;\ndouble A::*p7 = static_cast\u003cdouble A::*\u003e(p6); // ok, even though A doesn't contain z\nint A::*p8 = static_cast\u003cint A::*\u003e(p6);       // error: types don't match"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "struct A {};\nstruct B { int x; };\nstruct C : A, B { int y; double z; };\nint B::*p1 = \u0026B::x;\nint C::*p2 = p1;                              // ok; implicit conversion\nint B::*p3 = p2;                              // error\nint B::*p4 = static_cast\u003cint B::*\u003e(p2);       // ok; p4 is equal to p1\nint A::*p5 = static_cast\u003cint A::*\u003e(p2);       // undefined; p2 points to x, which is a member\n                                              // of the unrelated class B\ndouble C::*p6 = \u0026C::z;\ndouble A::*p7 = static_cast\u003cdouble A::*\u003e(p6); // ok, even though A doesn't contain z\nint A::*p8 = static_cast\u003cint A::*\u003e(p6);       // error: types don't match",
        "code_language": "Plain Text"
      }
    ],
    "title": "Derived to base conversion for pointers to members",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}