{
  "ID": "68848d45-3358-4034-be90-911feb4e3757",
  "Root": {
    "alive": true,
    "content": [
      "e6157581-111f-4ac9-8584-87137d6b94aa",
      "18a5e042-bc83-4c47-a6ce-c006364ce9a9",
      "87b50357-5e0c-4b6d-8eeb-bae03934ac18",
      "33c79cc2-d187-4568-aec9-d47866599049"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550523390496,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "68848d45-3358-4034-be90-911feb4e3757",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550797140000,
    "parent_id": "546689ba-7cc0-49cb-ae94-05172f20d6dc",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Friend class"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523390493,
        "id": "e6157581-111f-4ac9-8584-87137d6b94aa",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523390493,
        "parent_id": "68848d45-3358-4034-be90-911feb4e3757",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A whole class may be declared as friend. Friend class declaration means that any member of the friend may access private and protected members of the declaring class:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A whole class may be declared as friend. Friend class declaration means that any member of the friend may access private and protected members of the declaring class:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523390496,
        "id": "18a5e042-bc83-4c47-a6ce-c006364ce9a9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550797140000,
        "parent_id": "68848d45-3358-4034-be90-911feb4e3757",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "class Accesser {\npublic:\n    void private_accesser1();\n    void private_accesser2();\n};\n\nclass PrivateHolder {\npublic:\n    PrivateHolder(int val) : private_value(val) {}\n    friend class Accesser;\nprivate:\n    int private_value;\n};\n\nvoid Accesser::private_accesser1() {\n    PrivateHolder ph(10);\n    // OK.\n    std::cout \u003c\u003c ph.private_value \u003c\u003c std::endl;\n}\n\nvoid Accesser::private_accesser2() {\n    PrivateHolder ph(10);\n    // OK.\n    std::cout \u003c\u003c ph.private_value + 1 \u003c\u003c std::endl;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "class Accesser {\npublic:\n    void private_accesser1();\n    void private_accesser2();\n};\n\nclass PrivateHolder {\npublic:\n    PrivateHolder(int val) : private_value(val) {}\n    friend class Accesser;\nprivate:\n    int private_value;\n};\n\nvoid Accesser::private_accesser1() {\n    PrivateHolder ph(10);\n    // OK.\n    std::cout \u003c\u003c ph.private_value \u003c\u003c std::endl;\n}\n\nvoid Accesser::private_accesser2() {\n    PrivateHolder ph(10);\n    // OK.\n    std::cout \u003c\u003c ph.private_value + 1 \u003c\u003c std::endl;\n}",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523390496,
        "id": "87b50357-5e0c-4b6d-8eeb-bae03934ac18",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523390496,
        "parent_id": "68848d45-3358-4034-be90-911feb4e3757",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Friend class declaration is not reflexive. If classes need private access in both directions, both of them need friend declarations."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Friend class declaration is not reflexive. If classes need private access in both directions, both of them need friend declarations."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523390496,
        "id": "33c79cc2-d187-4568-aec9-d47866599049",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550797140000,
        "parent_id": "68848d45-3358-4034-be90-911feb4e3757",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "class Accesser {\npublic:\n    void private_accesser1();\n    void private_accesser2();\nprivate:\n    int private_value = 0;\n};\n\nclass PrivateHolder {\npublic:\n    PrivateHolder(int val) : private_value(val) {}\n    // Accesser is a friend of PrivateHolder\n    friend class Accesser;\n    void reverse_accesse() {\n        // but PrivateHolder cannot access Accesser's members.\n        Accesser a;\n        std::cout \u003c\u003c a.private_value;\n    }\nprivate:\n    int private_value;\n};"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "class Accesser {\npublic:\n    void private_accesser1();\n    void private_accesser2();\nprivate:\n    int private_value = 0;\n};\n\nclass PrivateHolder {\npublic:\n    PrivateHolder(int val) : private_value(val) {}\n    // Accesser is a friend of PrivateHolder\n    friend class Accesser;\n    void reverse_accesse() {\n        // but PrivateHolder cannot access Accesser's members.\n        Accesser a;\n        std::cout \u003c\u003c a.private_value;\n    }\nprivate:\n    int private_value;\n};",
        "code_language": "C++"
      }
    ],
    "title": "Friend class",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}