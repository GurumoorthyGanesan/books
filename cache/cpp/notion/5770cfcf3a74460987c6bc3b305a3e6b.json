{
  "ID": "5770cfcf-3a74-4609-87c6-bc3b305a3e6b",
  "Root": {
    "alive": true,
    "content": [
      "41e54abb-8630-40a3-bbf9-5abc349ae48f",
      "465eb56b-3697-4b44-a20b-2c40ef07fd98",
      "6d575965-2393-47fd-b1d1-455d6a8b6907",
      "e7bb2044-e599-496e-8b54-be806acd0e6b",
      "deff6188-5f3d-432f-92e6-003791aa8cf5",
      "a410fc53-5cd3-4c11-85ca-fd023f6a7ff8"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550523069482,
    "id": "5770cfcf-3a74-4609-87c6-bc3b305a3e6b",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550523069482,
    "parent_id": "3724ad56-a879-48bf-847e-5adcfcb60c18",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "020 A fixed size raw array matrix that is a 2D raw array."
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523069477,
        "id": "41e54abb-8630-40a3-bbf9-5abc349ae48f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523069477,
        "parent_id": "5770cfcf-3a74-4609-87c6-bc3b305a3e6b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// A fixed size raw array matrix (that is, a 2D raw array).\n#include \u003ciostream\u003e\n#include \u003ciomanip\u003e\nusing namespace std;\n\nauto main() -\u003e int\n{\n    int const   n_rows  = 3;\n    int const   n_cols  = 7;\n    int const   m[n_rows][n_cols] =             // A raw array matrix.\n    {\n        {  1,  2,  3,  4,  5,  6,  7 },\n        {  8,  9, 10, 11, 12, 13, 14 },\n        { 15, 16, 17, 18, 19, 20, 21 }\n    };\n    \n    for( int y = 0; y \u003c n_rows; ++y )\n    {\n        for( int x = 0; x \u003c n_cols; ++x )\n        {\n            cout \u003c\u003c setw( 4 ) \u003c\u003c m[y][x];       // Note: do NOT use m[y,x]!\n        }\n        cout \u003c\u003c '\\n';\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// A fixed size raw array matrix (that is, a 2D raw array).\n#include \u003ciostream\u003e\n#include \u003ciomanip\u003e\nusing namespace std;\n\nauto main() -\u003e int\n{\n    int const   n_rows  = 3;\n    int const   n_cols  = 7;\n    int const   m[n_rows][n_cols] =             // A raw array matrix.\n    {\n        {  1,  2,  3,  4,  5,  6,  7 },\n        {  8,  9, 10, 11, 12, 13, 14 },\n        { 15, 16, 17, 18, 19, 20, 21 }\n    };\n    \n    for( int y = 0; y \u003c n_rows; ++y )\n    {\n        for( int x = 0; x \u003c n_cols; ++x )\n        {\n            cout \u003c\u003c setw( 4 ) \u003c\u003c m[y][x];       // Note: do NOT use m[y,x]!\n        }\n        cout \u003c\u003c '\\n';\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523069480,
        "id": "465eb56b-3697-4b44-a20b-2c40ef07fd98",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523069480,
        "parent_id": "5770cfcf-3a74-4609-87c6-bc3b305a3e6b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Output:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Output:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523069480,
        "id": "6d575965-2393-47fd-b1d1-455d6a8b6907",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523069480,
        "parent_id": "5770cfcf-3a74-4609-87c6-bc3b305a3e6b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "1   2   3   4   5   6   7\n   8   9  10  11  12  13  14\n  15  16  17  18  19  20  21"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "1   2   3   4   5   6   7\n   8   9  10  11  12  13  14\n  15  16  17  18  19  20  21",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523069481,
        "id": "e7bb2044-e599-496e-8b54-be806acd0e6b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523069481,
        "parent_id": "5770cfcf-3a74-4609-87c6-bc3b305a3e6b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "C++ doesn’t support special syntax for indexing a multi-dimensional array. Instead such an array is viewed as an array of arrays (possibly of arrays, and so on), and the ordinary single index notation "
            ],
            [
              "\\[",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "i",
              [
                [
                  "i"
                ],
                [
                  "c"
                ]
              ]
            ],
            [
              "\\]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is used for each level. In the example above "
            ],
            [
              "m[y]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " refers to row "
            ],
            [
              "y",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " of "
            ],
            [
              "m",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", where "
            ],
            [
              "y",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is a zero-based index. Then this row can be indexed in turn, e.g. "
            ],
            [
              "m[y]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", which refers to the "
            ],
            [
              "x",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "th item – or column – of row "
            ],
            [
              "y",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "C++ doesn’t support special syntax for indexing a multi-dimensional array. Instead such an array is viewed as an array of arrays (possibly of arrays, and so on), and the ordinary single index notation "
          },
          {
            "Text": "\\[",
            "AttrFlags": 2
          },
          {
            "Text": "i",
            "AttrFlags": 6
          },
          {
            "Text": "\\]",
            "AttrFlags": 2
          },
          {
            "Text": " is used for each level. In the example above "
          },
          {
            "Text": "m[y]",
            "AttrFlags": 2
          },
          {
            "Text": " refers to row "
          },
          {
            "Text": "y",
            "AttrFlags": 2
          },
          {
            "Text": " of "
          },
          {
            "Text": "m",
            "AttrFlags": 2
          },
          {
            "Text": ", where "
          },
          {
            "Text": "y",
            "AttrFlags": 2
          },
          {
            "Text": " is a zero-based index. Then this row can be indexed in turn, e.g. "
          },
          {
            "Text": "m[y]",
            "AttrFlags": 2
          },
          {
            "Text": ", which refers to the "
          },
          {
            "Text": "x",
            "AttrFlags": 2
          },
          {
            "Text": "th item – or column – of row "
          },
          {
            "Text": "y",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523069481,
        "id": "deff6188-5f3d-432f-92e6-003791aa8cf5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523069481,
        "parent_id": "5770cfcf-3a74-4609-87c6-bc3b305a3e6b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "I.e. the last index varies fastest, and in the declaration the range of this index, which here is the number of columns per row, is the last and “innermost” size specified."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "I.e. the last index varies fastest, and in the declaration the range of this index, which here is the number of columns per row, is the last and “innermost” size specified."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523069481,
        "id": "a410fc53-5cd3-4c11-85ca-fd023f6a7ff8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523069481,
        "parent_id": "5770cfcf-3a74-4609-87c6-bc3b305a3e6b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Since C++ doesn’t provide built-in support for dynamic size arrays, other than dynamic allocation, a dynamic size matrix is often implemented as a class. Then the raw array matrix indexing notation "
            ],
            [
              "m[y]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " has some cost, either by exposing the implementation (so that e.g. a view of a transposed matrix becomes practically impossible) or by adding some overhead and slight inconvenience when it’s done by returning a proxy object from "
            ],
            [
              "operator[]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". And so the indexing notation for such an abstraction can and will usually be different, both in look-and-feel and in the order of indices, e.g. "
            ],
            [
              "m(x,y)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "m.at(x,y)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "m.item(x,y)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Since C++ doesn’t provide built-in support for dynamic size arrays, other than dynamic allocation, a dynamic size matrix is often implemented as a class. Then the raw array matrix indexing notation "
          },
          {
            "Text": "m[y]",
            "AttrFlags": 2
          },
          {
            "Text": " has some cost, either by exposing the implementation (so that e.g. a view of a transposed matrix becomes practically impossible) or by adding some overhead and slight inconvenience when it’s done by returning a proxy object from "
          },
          {
            "Text": "operator[]",
            "AttrFlags": 2
          },
          {
            "Text": ". And so the indexing notation for such an abstraction can and will usually be different, both in look-and-feel and in the order of indices, e.g. "
          },
          {
            "Text": "m(x,y)",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "m.at(x,y)",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "m.item(x,y)",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      }
    ],
    "title": "020 A fixed size raw array matrix that is a 2D raw array."
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}