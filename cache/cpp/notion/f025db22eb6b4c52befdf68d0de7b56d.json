{
  "ID": "f025db22-eb6b-4c52-befd-f68d0de7b56d",
  "Root": {
    "alive": true,
    "content": [
      "8d625dbf-b4d5-4ae1-955a-8f892f1c13fe",
      "6449fce3-6d45-4fda-ad75-8af7b1539ca1",
      "3ce9808f-268c-4979-a639-84accfa10d97",
      "b47a670b-22de-41fc-a4c2-04a750fc4b12",
      "7bccc03d-b107-48f9-9e36-8695e3003d71",
      "52b1049d-32b0-4837-bbeb-3383870081ed",
      "97d934ec-3884-418b-9319-5f827a389dbf",
      "444e6b8d-26e7-49a0-acf3-ef8aab0a33b3",
      "66bce53d-32ad-4c00-958d-f912c67c83aa"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522739859,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "f025db22-eb6b-4c52-befd-f68d0de7b56d",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551686823344,
    "parent_id": "de2aa703-c2f6-4f94-bc50-eb5201c26ac3",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Using optionals to represent the failure of a function"
        ]
      ]
    },
    "type": "page",
    "version": 4,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522739854,
        "id": "8d625dbf-b4d5-4ae1-955a-8f892f1c13fe",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522739854,
        "parent_id": "f025db22-eb6b-4c52-befd-f68d0de7b56d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Before C++17, a function typically represented failure in one of several ways:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Before C++17, a function typically represented failure in one of several ways:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522739857,
        "id": "6449fce3-6d45-4fda-ad75-8af7b1539ca1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522739857,
        "parent_id": "f025db22-eb6b-4c52-befd-f68d0de7b56d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A null pointer was returned."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "A null pointer was returned."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522739857,
        "id": "3ce9808f-268c-4979-a639-84accfa10d97",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522739857,
        "parent_id": "f025db22-eb6b-4c52-befd-f68d0de7b56d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "* e.g. Calling a function `Delegate *App::get_delegate()` on an `App` instance that did not have a delegate would return `nullptr`.\n* This is a good solution for objects that have been dynamically allocated or are large and managed by pointers, but isn't a good solution for small objects that are typically stack-allocated and passed by copying."
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "* e.g. Calling a function `Delegate *App::get_delegate()` on an `App` instance that did not have a delegate would return `nullptr`.\n* This is a good solution for objects that have been dynamically allocated or are large and managed by pointers, but isn't a good solution for small objects that are typically stack-allocated and passed by copying.",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522739858,
        "id": "b47a670b-22de-41fc-a4c2-04a750fc4b12",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522739858,
        "parent_id": "f025db22-eb6b-4c52-befd-f68d0de7b56d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A specific value of the return type was reserved to indicate failure."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "A specific value of the return type was reserved to indicate failure."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522739858,
        "id": "7bccc03d-b107-48f9-9e36-8695e3003d71",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522739858,
        "parent_id": "f025db22-eb6b-4c52-befd-f68d0de7b56d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "e.g. Calling a function "
            ],
            [
              "unsigned shortest_path_distance(Vertex a, Vertex b)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " on two vertices that are not connected may return zero to indicate this fact."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "e.g. Calling a function "
          },
          {
            "Text": "unsigned shortest_path_distance(Vertex a, Vertex b)",
            "AttrFlags": 2
          },
          {
            "Text": " on two vertices that are not connected may return zero to indicate this fact."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522739858,
        "id": "52b1049d-32b0-4837-bbeb-3383870081ed",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522739858,
        "parent_id": "f025db22-eb6b-4c52-befd-f68d0de7b56d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The value was paired together with a "
            ],
            [
              "bool",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to indicate is the returned value was meaningful."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "The value was paired together with a "
          },
          {
            "Text": "bool",
            "AttrFlags": 2
          },
          {
            "Text": " to indicate is the returned value was meaningful."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522739859,
        "id": "97d934ec-3884-418b-9319-5f827a389dbf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522739859,
        "parent_id": "f025db22-eb6b-4c52-befd-f68d0de7b56d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "e.g. Calling a function "
            ],
            [
              "std::pair\u003cint, bool\u003e parse(const std::string \u0026str)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " with a string argument that is not an integer would return a pair with an undefined "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and a "
            ],
            [
              "bool",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " set to "
            ],
            [
              "false",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "e.g. Calling a function "
          },
          {
            "Text": "std::pair\u003cint, bool\u003e parse(const std::string \u0026str)",
            "AttrFlags": 2
          },
          {
            "Text": " with a string argument that is not an integer would return a pair with an undefined "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": " and a "
          },
          {
            "Text": "bool",
            "AttrFlags": 2
          },
          {
            "Text": " set to "
          },
          {
            "Text": "false",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522739859,
        "id": "444e6b8d-26e7-49a0-acf3-ef8aab0a33b3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522739859,
        "parent_id": "f025db22-eb6b-4c52-befd-f68d0de7b56d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In this example, John is given two pets, Fluffy and Furball. The function "
            ],
            [
              "Person::pet_with_name()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is then called to retrieve John’s pet Whiskers. Since John does not have a pet named Whiskers, the function fails and "
            ],
            [
              "std::nullopt",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is returned instead."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In this example, John is given two pets, Fluffy and Furball. The function "
          },
          {
            "Text": "Person::pet_with_name()",
            "AttrFlags": 2
          },
          {
            "Text": " is then called to retrieve John’s pet Whiskers. Since John does not have a pet named Whiskers, the function fails and "
          },
          {
            "Text": "std::nullopt",
            "AttrFlags": 2
          },
          {
            "Text": " is returned instead."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522739859,
        "id": "66bce53d-32ad-4c00-958d-f912c67c83aa",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522739859,
        "parent_id": "f025db22-eb6b-4c52-befd-f68d0de7b56d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003ciostream\u003e\n#include \u003coptional\u003e\n#include \u003cstring\u003e\n#include \u003cvector\u003e\n\nstruct Animal {\n    std::string name;\n};\n\nstruct Person {\n    std::string name;\n    std::vector\u003cAnimal\u003e pets;\n    \n    std::optional\u003cAnimal\u003e pet_with_name(const std::string \u0026name) {\n        for (const Animal \u0026pet : pets) {\n            if (pet.name == name) {\n                return pet;\n            }\n        }\n        return std::nullopt;\n    }\n};\n\nint main() {\n    Person john;\n    john.name = \"John\";\n    \n    Animal fluffy;\n    fluffy.name = \"Fluffy\";\n    john.pets.push_back(fluffy);\n    \n    Animal furball;\n    furball.name = \"Furball\";\n    john.pets.push_back(furball);\n    \n    std::optional\u003cAnimal\u003e whiskers = john.pet_with_name(\"Whiskers\");\n    if (whiskers) {\n        std::cout \u003c\u003c \"John has a pet named Whiskers.\" \u003c\u003c std::endl;\n    }\n    else {\n        std::cout \u003c\u003c \"Whiskers must not belong to John.\" \u003c\u003c std::endl;\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003ciostream\u003e\n#include \u003coptional\u003e\n#include \u003cstring\u003e\n#include \u003cvector\u003e\n\nstruct Animal {\n    std::string name;\n};\n\nstruct Person {\n    std::string name;\n    std::vector\u003cAnimal\u003e pets;\n    \n    std::optional\u003cAnimal\u003e pet_with_name(const std::string \u0026name) {\n        for (const Animal \u0026pet : pets) {\n            if (pet.name == name) {\n                return pet;\n            }\n        }\n        return std::nullopt;\n    }\n};\n\nint main() {\n    Person john;\n    john.name = \"John\";\n    \n    Animal fluffy;\n    fluffy.name = \"Fluffy\";\n    john.pets.push_back(fluffy);\n    \n    Animal furball;\n    furball.name = \"Furball\";\n    john.pets.push_back(furball);\n    \n    std::optional\u003cAnimal\u003e whiskers = john.pet_with_name(\"Whiskers\");\n    if (whiskers) {\n        std::cout \u003c\u003c \"John has a pet named Whiskers.\" \u003c\u003c std::endl;\n    }\n    else {\n        std::cout \u003c\u003c \"Whiskers must not belong to John.\" \u003c\u003c std::endl;\n    }\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "Using optionals to represent the failure of a function",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}