{
  "ID": "d96d5725-b4b7-4bb5-8f6a-81dd9622ea00",
  "Root": {
    "alive": true,
    "content": [
      "29559dcf-bcc9-4a95-a2c5-ad1f43425f35",
      "4ddd1f30-ea84-4b2a-a070-8b5340a0b3ae",
      "7b88ebae-822c-4970-9141-77671a224d28",
      "a0d44858-32ac-497c-aa02-1cca37dc1e3f",
      "9f68f521-ec4c-4be2-b58c-9b8a0b9baeaf",
      "913f962d-d6db-4b29-a75d-fe89cdc23874",
      "a6b0df41-2996-4af7-b144-c323263807ed",
      "e6d40bad-2c82-4209-af4e-58fb4b0d6401"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522073476,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "d96d5725-b4b7-4bb5-8f6a-81dd9622ea00",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550655660000,
    "parent_id": "71517390-0244-456d-87c4-82c582ca8abf",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Conversion to function pointer"
        ]
      ]
    },
    "type": "page",
    "version": 9,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522073473,
        "id": "29559dcf-bcc9-4a95-a2c5-ad1f43425f35",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522073473,
        "parent_id": "d96d5725-b4b7-4bb5-8f6a-81dd9622ea00",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If a lambda’s capture list is empty, then the lambda has an implicit conversion to a function pointer that takes the same arguments and returns the same return type:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If a lambda’s capture list is empty, then the lambda has an implicit conversion to a function pointer that takes the same arguments and returns the same return type:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522073475,
        "id": "4ddd1f30-ea84-4b2a-a070-8b5340a0b3ae",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522073475,
        "parent_id": "d96d5725-b4b7-4bb5-8f6a-81dd9622ea00",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "auto sorter = [](int lhs, int rhs) -\u003e bool {return lhs \u003c rhs;};\n\nusing func_ptr = bool(*)(int, int);\nfunc_ptr sorter_func = sorter; // implicit conversion"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "auto sorter = [](int lhs, int rhs) -\u003e bool {return lhs \u003c rhs;};\n\nusing func_ptr = bool(*)(int, int);\nfunc_ptr sorter_func = sorter; // implicit conversion",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522073475,
        "id": "7b88ebae-822c-4970-9141-77671a224d28",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522073475,
        "parent_id": "d96d5725-b4b7-4bb5-8f6a-81dd9622ea00",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Such a conversion may also be enforced using unary plus operator:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Such a conversion may also be enforced using unary plus operator:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522073476,
        "id": "a0d44858-32ac-497c-aa02-1cca37dc1e3f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522073476,
        "parent_id": "d96d5725-b4b7-4bb5-8f6a-81dd9622ea00",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "func_ptr sorter_func2 = +sorter; // enforce implicit conversion"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "func_ptr sorter_func2 = +sorter; // enforce implicit conversion",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522073476,
        "id": "9f68f521-ec4c-4be2-b58c-9b8a0b9baeaf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522073476,
        "parent_id": "d96d5725-b4b7-4bb5-8f6a-81dd9622ea00",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Calling this function pointer behaves exactly like invoking "
            ],
            [
              "operator()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " on the lambda. This function pointer is in no way reliant on the source lambda closure’s existence. It therefore may outlive the lambda closure."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Calling this function pointer behaves exactly like invoking "
          },
          {
            "Text": "operator()",
            "AttrFlags": 2
          },
          {
            "Text": " on the lambda. This function pointer is in no way reliant on the source lambda closure’s existence. It therefore may outlive the lambda closure."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522073476,
        "id": "913f962d-d6db-4b29-a75d-fe89cdc23874",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522073476,
        "parent_id": "d96d5725-b4b7-4bb5-8f6a-81dd9622ea00",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This feature is mainly useful for using lambdas with APIs that deal in function pointers, rather than C++ function objects."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This feature is mainly useful for using lambdas with APIs that deal in function pointers, rather than C++ function objects."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522073476,
        "id": "a6b0df41-2996-4af7-b144-c323263807ed",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522073476,
        "parent_id": "d96d5725-b4b7-4bb5-8f6a-81dd9622ea00",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Conversion to a function pointer is also possible for generic lambdas with an empty capture list. If necessary, template argument deduction will be used to select the correct specialization."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Conversion to a function pointer is also possible for generic lambdas with an empty capture list. If necessary, template argument deduction will be used to select the correct specialization."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522073476,
        "id": "e6d40bad-2c82-4209-af4e-58fb4b0d6401",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522073476,
        "parent_id": "d96d5725-b4b7-4bb5-8f6a-81dd9622ea00",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "auto sorter = [](auto lhs, auto rhs) { return lhs \u003c rhs; };\nusing func_ptr = bool(*)(int, int);\nfunc_ptr sorter_func = sorter;  // deduces int, int\n// note however that the following is ambiguous\n// func_ptr sorter_func2 = +sorter;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "auto sorter = [](auto lhs, auto rhs) { return lhs \u003c rhs; };\nusing func_ptr = bool(*)(int, int);\nfunc_ptr sorter_func = sorter;  // deduces int, int\n// note however that the following is ambiguous\n// func_ptr sorter_func2 = +sorter;",
        "code_language": "Plain Text"
      }
    ],
    "title": "Conversion to function pointer",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}