{
  "ID": "fea23dde-a9ac-48ba-8720-28de60ab7976",
  "Root": {
    "alive": true,
    "content": [
      "f0c7269c-b232-4cf6-9247-e9d5d3a849b8",
      "8caca9b9-ad5c-47d2-9f77-c9ad791f071c",
      "d4c66551-6ebe-41e4-a328-4fccb23c5054",
      "89f82fe4-d693-4a2c-a703-36b0a250d7d2",
      "5722a211-d70f-4264-9c8a-e09ff5ecb848",
      "a2dfb5ab-6636-4e85-92e7-29d9d6244420",
      "d511b9b4-180b-4398-a512-35e95b3b4930",
      "d0ce05b7-670c-4931-ab3c-c7f6bac7237d",
      "29327bf9-e1bb-4c08-9bda-35bdc6f17289"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522055442,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "fea23dde-a9ac-48ba-8720-28de60ab7976",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550655660000,
    "parent_id": "2be9c7d5-be12-439a-8968-ad057c67187a",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Array subscript operator"
        ]
      ]
    },
    "type": "page",
    "version": 10,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522055440,
        "id": "f0c7269c-b232-4cf6-9247-e9d5d3a849b8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522055440,
        "parent_id": "fea23dde-a9ac-48ba-8720-28de60ab7976",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You can even overload the array subscript operator "
            ],
            [
              "[]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You can even overload the array subscript operator "
          },
          {
            "Text": "[]",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522055441,
        "id": "8caca9b9-ad5c-47d2-9f77-c9ad791f071c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522055441,
        "parent_id": "fea23dde-a9ac-48ba-8720-28de60ab7976",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You should always (99.98% of the time) implement 2 versions, a "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and a not-"
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " version, because if the object is "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", it should not be able to modify the object returned by "
            ],
            [
              "[]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You should always (99.98% of the time) implement 2 versions, a "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": " and a not-"
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": " version, because if the object is "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": ", it should not be able to modify the object returned by "
          },
          {
            "Text": "[]",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522055441,
        "id": "d4c66551-6ebe-41e4-a328-4fccb23c5054",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522055441,
        "parent_id": "fea23dde-a9ac-48ba-8720-28de60ab7976",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The arguments are passed by "
            ],
            [
              "const\u0026",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " instead of by value because passing by reference is faster than by value, and "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " so that the operator doesn’t change the index accidentally."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The arguments are passed by "
          },
          {
            "Text": "const\u0026",
            "AttrFlags": 2
          },
          {
            "Text": " instead of by value because passing by reference is faster than by value, and "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": " so that the operator doesn’t change the index accidentally."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522055441,
        "id": "89f82fe4-d693-4a2c-a703-36b0a250d7d2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522055441,
        "parent_id": "fea23dde-a9ac-48ba-8720-28de60ab7976",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The operators return by reference, because by design you can modify the object "
            ],
            [
              "[]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " return, i.e:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The operators return by reference, because by design you can modify the object "
          },
          {
            "Text": "[]",
            "AttrFlags": 2
          },
          {
            "Text": " return, i.e:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522055441,
        "id": "5722a211-d70f-4264-9c8a-e09ff5ecb848",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522055441,
        "parent_id": "fea23dde-a9ac-48ba-8720-28de60ab7976",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "std::vector\u003cint\u003e v{ 1 };\nv[0] = 2; //Changes value of 1 to 2\n          //wouldn't be possible if not returned by reference"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "std::vector\u003cint\u003e v{ 1 };\nv[0] = 2; //Changes value of 1 to 2\n          //wouldn't be possible if not returned by reference",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522055441,
        "id": "a2dfb5ab-6636-4e85-92e7-29d9d6244420",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522055441,
        "parent_id": "fea23dde-a9ac-48ba-8720-28de60ab7976",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You can only overload inside a "
            ],
            [
              "class",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "/"
            ],
            [
              "struct",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You can only overload inside a "
          },
          {
            "Text": "class",
            "AttrFlags": 2
          },
          {
            "Text": "/"
          },
          {
            "Text": "struct",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522055441,
        "id": "d511b9b4-180b-4398-a512-35e95b3b4930",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522055441,
        "parent_id": "fea23dde-a9ac-48ba-8720-28de60ab7976",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "//I is the index type, normally an int\nT\u0026 operator[](const I\u0026 index)\n{\n    //Do something\n    //return something\n}\n\n//I is the index type, normally an int\nconst T\u0026 operator[](const I\u0026 index) const\n{\n    //Do something\n    //return something\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "//I is the index type, normally an int\nT\u0026 operator[](const I\u0026 index)\n{\n    //Do something\n    //return something\n}\n\n//I is the index type, normally an int\nconst T\u0026 operator[](const I\u0026 index) const\n{\n    //Do something\n    //return something\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522055442,
        "id": "d0ce05b7-670c-4931-ab3c-c7f6bac7237d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522055442,
        "parent_id": "fea23dde-a9ac-48ba-8720-28de60ab7976",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Multiple subscript operators, "
            ],
            [
              "[][]...",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", can be achieved via proxy objects. The following example of a simple row-major matrix class demonstrates this:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Multiple subscript operators, "
          },
          {
            "Text": "[][]...",
            "AttrFlags": 2
          },
          {
            "Text": ", can be achieved via proxy objects. The following example of a simple row-major matrix class demonstrates this:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522055442,
        "id": "29327bf9-e1bb-4c08-9bda-35bdc6f17289",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522055442,
        "parent_id": "fea23dde-a9ac-48ba-8720-28de60ab7976",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "template\u003cclass T\u003e\nclass matrix {\n    // class enabling [][] overload to access matrix elements\n    template \u003cclass C\u003e\n    class proxy_row_vector {\n        using reference = decltype(std::declval\u003cC\u003e()[0]);\n        using const_reference = decltype(std::declval\u003cC const\u003e()[0]);\n    public:\n        proxy_row_vector(C\u0026 _vec, std::size_t _r_ind, std::size_t _cols)\n            : vec(_vec), row_index(_r_ind), cols(_cols) {}\n        const_reference operator[](std::size_t _col_index) const {\n            return vec[row_index*cols + _col_index];\n        }\n        reference operator[](std::size_t _col_index) {\n            return vec[row_index*cols + _col_index];\n        }\n    private:\n        C\u0026 vec;\n        std::size_t row_index; // row index to access\n        std::size_t cols; // number of columns in matrix\n    };\n\n    using const_proxy = proxy_row_vector\u003cconst std::vector\u003cT\u003e\u003e;\n    using proxy = proxy_row_vector\u003cstd::vector\u003cT\u003e\u003e;\npublic:\n    matrix() : mtx(), rows(0), cols(0) {}\n    matrix(std::size_t _rows, std::size_t _cols)\n        : mtx(_rows*_cols), rows(_rows), cols(_cols) {}\n\n    // call operator[] followed by another [] call to access matrix elements\n    const_proxy operator[](std::size_t _row_index) const {\n        return const_proxy(mtx, _row_index, cols);\n    }\n\n    proxy operator[](std::size_t _row_index) {\n        return proxy(mtx, _row_index, cols);\n    }\nprivate:\n    std::vector\u003cT\u003e mtx;\n    std::size_t rows;\n    std::size_t cols;\n};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "template\u003cclass T\u003e\nclass matrix {\n    // class enabling [][] overload to access matrix elements\n    template \u003cclass C\u003e\n    class proxy_row_vector {\n        using reference = decltype(std::declval\u003cC\u003e()[0]);\n        using const_reference = decltype(std::declval\u003cC const\u003e()[0]);\n    public:\n        proxy_row_vector(C\u0026 _vec, std::size_t _r_ind, std::size_t _cols)\n            : vec(_vec), row_index(_r_ind), cols(_cols) {}\n        const_reference operator[](std::size_t _col_index) const {\n            return vec[row_index*cols + _col_index];\n        }\n        reference operator[](std::size_t _col_index) {\n            return vec[row_index*cols + _col_index];\n        }\n    private:\n        C\u0026 vec;\n        std::size_t row_index; // row index to access\n        std::size_t cols; // number of columns in matrix\n    };\n\n    using const_proxy = proxy_row_vector\u003cconst std::vector\u003cT\u003e\u003e;\n    using proxy = proxy_row_vector\u003cstd::vector\u003cT\u003e\u003e;\npublic:\n    matrix() : mtx(), rows(0), cols(0) {}\n    matrix(std::size_t _rows, std::size_t _cols)\n        : mtx(_rows*_cols), rows(_rows), cols(_cols) {}\n\n    // call operator[] followed by another [] call to access matrix elements\n    const_proxy operator[](std::size_t _row_index) const {\n        return const_proxy(mtx, _row_index, cols);\n    }\n\n    proxy operator[](std::size_t _row_index) {\n        return proxy(mtx, _row_index, cols);\n    }\nprivate:\n    std::vector\u003cT\u003e mtx;\n    std::size_t rows;\n    std::size_t cols;\n};",
        "code_language": "Plain Text"
      }
    ],
    "title": "Array subscript operator",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}