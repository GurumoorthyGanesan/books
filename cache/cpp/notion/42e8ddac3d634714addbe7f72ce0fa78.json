{
  "ID": "42e8ddac-3d63-4714-addb-e7f72ce0fa78",
  "Root": {
    "alive": true,
    "content": [
      "cddbb87a-8ac2-4695-9fc3-7cd2b3a0bc04",
      "4999f2e1-f92f-4167-a44e-ac081d5af043",
      "df7135af-974e-436a-bbf0-275bcf02b0c2"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550523099567,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "42e8ddac-3d63-4714-addb-e7f72ce0fa78",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551687288266,
    "parent_id": "10c1e1fe-bf0e-4f71-b1f2-173539570a03",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "void to T"
        ]
      ]
    },
    "type": "page",
    "version": 4,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523099566,
        "id": "cddbb87a-8ac2-4695-9fc3-7cd2b3a0bc04",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523099566,
        "parent_id": "42e8ddac-3d63-4714-addb-e7f72ce0fa78",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In C++, "
            ],
            [
              "void*",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " cannot be implicitly converted to "
            ],
            [
              "T*",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " where "
            ],
            [
              "T",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is an object type. Instead, "
            ],
            [
              "static_cast",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " should be used to perform the conversion explicitly. If the operand actually points to a "
            ],
            [
              "T",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " object, the result points to that object. Otherwise, the result is unspecified."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In C++, "
          },
          {
            "Text": "void*",
            "AttrFlags": 2
          },
          {
            "Text": " cannot be implicitly converted to "
          },
          {
            "Text": "T*",
            "AttrFlags": 2
          },
          {
            "Text": " where "
          },
          {
            "Text": "T",
            "AttrFlags": 2
          },
          {
            "Text": " is an object type. Instead, "
          },
          {
            "Text": "static_cast",
            "AttrFlags": 2
          },
          {
            "Text": " should be used to perform the conversion explicitly. If the operand actually points to a "
          },
          {
            "Text": "T",
            "AttrFlags": 2
          },
          {
            "Text": " object, the result points to that object. Otherwise, the result is unspecified."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523099567,
        "id": "4999f2e1-f92f-4167-a44e-ac081d5af043",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523099567,
        "parent_id": "42e8ddac-3d63-4714-addb-e7f72ce0fa78",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Even if the operand does not point to a "
            ],
            [
              "T",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " object, as long as the operand points to a byte whose address is properly aligned for the type "
            ],
            [
              "T",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", the result of the conversion points to the same byte."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Even if the operand does not point to a "
          },
          {
            "Text": "T",
            "AttrFlags": 2
          },
          {
            "Text": " object, as long as the operand points to a byte whose address is properly aligned for the type "
          },
          {
            "Text": "T",
            "AttrFlags": 2
          },
          {
            "Text": ", the result of the conversion points to the same byte."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523099567,
        "id": "df7135af-974e-436a-bbf0-275bcf02b0c2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523099567,
        "parent_id": "42e8ddac-3d63-4714-addb-e7f72ce0fa78",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// allocating an array of 100 ints, the hard way\nint* a = malloc(100*sizeof(*a));                    // error; malloc returns void*\nint* a = static_cast\u003cint*\u003e(malloc(100*sizeof(*a))); // ok\n// int* a = new int[100];                           // no cast needed\n// std::vector\u003cint\u003e a(100);                         // better\n\nconst char c = '!';\nconst void* p1 = \u0026c;\nconst char* p2 = p1;                           // error\nconst char* p3 = static_cast\u003cconst char*\u003e(p1); // ok; p3 points to c\nconst int* p4 = static_cast\u003cconst int*\u003e(p1);   // unspecified in C++03;\n                                               // possibly unspecified in C++11 if\n                                               // alignof(int) \u003e alignof(char)\nchar* p5 = static_cast\u003cchar*\u003e(p1);             // error: casting away constness"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// allocating an array of 100 ints, the hard way\nint* a = malloc(100*sizeof(*a));                    // error; malloc returns void*\nint* a = static_cast\u003cint*\u003e(malloc(100*sizeof(*a))); // ok\n// int* a = new int[100];                           // no cast needed\n// std::vector\u003cint\u003e a(100);                         // better\n\nconst char c = '!';\nconst void* p1 = \u0026c;\nconst char* p2 = p1;                           // error\nconst char* p3 = static_cast\u003cconst char*\u003e(p1); // ok; p3 points to c\nconst int* p4 = static_cast\u003cconst int*\u003e(p1);   // unspecified in C++03;\n                                               // possibly unspecified in C++11 if\n                                               // alignof(int) \u003e alignof(char)\nchar* p5 = static_cast\u003cchar*\u003e(p1);             // error: casting away constness",
        "code_language": "Plain Text"
      }
    ],
    "title": "void to T",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}