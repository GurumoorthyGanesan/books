{
  "ID": "66659d82-a166-4437-81eb-6b8a145e559f",
  "Root": {
    "alive": true,
    "content": [
      "7b49635a-7762-48be-8bb1-a15c1e2f2e0a",
      "3982fe3b-6b7b-489f-a329-c7ddf470081f",
      "15b9dc32-2402-4170-a62b-78ae37ccc04f",
      "8560004c-0b26-4ae3-a87e-0c9a77c0648f",
      "c10e3690-74c2-4f5e-b034-4b5ccd36e4f5",
      "05b69c99-f36f-4948-91a4-423db6519d96",
      "d10bf43b-c924-4df8-be04-d1c8962374c8",
      "88dee7af-2002-4d3b-8dc1-bd7ed8521a2b",
      "940fb7d7-7d16-4347-ae77-dacef758a3c2",
      "eda65b99-9f68-40c3-ad46-aaae34f49544",
      "82991b29-f893-407e-aa82-31bc9f296f71",
      "ebe8d7f1-ab88-4618-9be3-e32de13a6f72",
      "0d881190-44a9-4298-8b28-27feb1d14e99",
      "db4533ca-75f3-456f-a324-9104a2daec87",
      "71e2f8f8-7359-44dd-8a25-7d7d11ad2297",
      "900b3491-d200-427b-b786-e5b9b1a09789",
      "c0b1cc79-9251-4967-9c68-479c80e84f0f",
      "7e621d76-283f-4895-9a0b-cd3f72e6e275",
      "8c031dbd-99ec-4417-bd52-f96a378e7508",
      "644e243f-f60c-429b-991f-4fe9096b9de8",
      "e9475823-b9b2-4973-9675-dde37f059ca0",
      "4a10d2b8-6852-458d-ad18-797de4e98fa0",
      "776ae553-3056-4175-8056-2c1109a94803",
      "2a8b909a-926a-4765-9655-6cf026ee9083",
      "d2cbf6af-9d8a-46f1-9ed7-60aefc498b99",
      "f4efda28-68e4-43ce-a851-f6c5cfdaaea6",
      "baadb5e7-6b95-482d-9b17-99aeb1272cd3",
      "6cf7bc4b-ed0e-44fc-a4c0-3876760a042b",
      "2400f2f2-eb21-4a1f-9b2d-e2c9bdce8866",
      "d75b9cbc-fb4a-4519-8a86-b249a98a6a5e"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550523398669,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "66659d82-a166-4437-81eb-6b8a145e559f",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551687398919,
    "parent_id": "9a0f90cc-6905-4660-8751-556567fcd897",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "A basic example illustrating expression templates"
        ]
      ]
    },
    "type": "page",
    "version": 4,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523398660,
        "id": "7b49635a-7762-48be-8bb1-a15c1e2f2e0a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523398660,
        "parent_id": "66659d82-a166-4437-81eb-6b8a145e559f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "An expression template is a compile-time optimization technique used mostly in scientific computing. It’s main purpose is to avoid unnecessary temporaries and optimize loop calculations using a single pass (typically when performing operations on numerical aggregates). Expression templates were initially devised in order to circumvent the inefficiencies of naïve operator overloading when implementing numerical "
            ],
            [
              "Array",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "Matrix",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " types. An equivalent terminology for expression templates has been introduced by Bjarne Stroustrup, who calls them “fused operations” in the latest version of his book, “The C++ Programming Language”."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "An expression template is a compile-time optimization technique used mostly in scientific computing. It’s main purpose is to avoid unnecessary temporaries and optimize loop calculations using a single pass (typically when performing operations on numerical aggregates). Expression templates were initially devised in order to circumvent the inefficiencies of naïve operator overloading when implementing numerical "
          },
          {
            "Text": "Array",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "Matrix",
            "AttrFlags": 2
          },
          {
            "Text": " types. An equivalent terminology for expression templates has been introduced by Bjarne Stroustrup, who calls them “fused operations” in the latest version of his book, “The C++ Programming Language”."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523398663,
        "id": "3982fe3b-6b7b-489f-a329-c7ddf470081f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523398663,
        "parent_id": "66659d82-a166-4437-81eb-6b8a145e559f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Before actually diving into expression templates, you should understand why you need them in the first place. To illustrate this, consider the very simple Matrix class given below:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Before actually diving into expression templates, you should understand why you need them in the first place. To illustrate this, consider the very simple Matrix class given below:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523398663,
        "id": "15b9dc32-2402-4170-a62b-78ae37ccc04f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523398663,
        "parent_id": "66659d82-a166-4437-81eb-6b8a145e559f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "template \u003ctypename T, std::size_t COL, std::size_t ROW\u003e\nclass Matrix {\npublic:\n    using value_type = T;\n\n    Matrix() : values(COL * ROW) {}\n\n    static size_t cols() { return COL; }\n    static size_t rows() { return ROW; }\n\n    const T\u0026 operator()(size_t x, size_t y) const { return values[y * COL + x]; }\n    T\u0026 operator()(size_t x, size_t y) { return values[y * COL + x]; }\n\nprivate:\n    std::vector\u003cT\u003e values;\n};\n\ntemplate \u003ctypename T, std::size_t COL, std::size_t ROW\u003e\nMatrix\u003cT, COL, ROW\u003e\noperator+(const Matrix\u003cT, COL, ROW\u003e\u0026 lhs, const Matrix\u003cT, COL, ROW\u003e\u0026 rhs)\n{\n    Matrix\u003cT, COL, ROW\u003e result;\n\n    for (size_t y = 0; y != lhs.rows(); ++y) {\n        for (size_t x = 0; x != lhs.cols(); ++x) {\n            result(x, y) = lhs(x, y) + rhs(x, y);\n        }\n    }\n    return result;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "template \u003ctypename T, std::size_t COL, std::size_t ROW\u003e\nclass Matrix {\npublic:\n    using value_type = T;\n\n    Matrix() : values(COL * ROW) {}\n\n    static size_t cols() { return COL; }\n    static size_t rows() { return ROW; }\n\n    const T\u0026 operator()(size_t x, size_t y) const { return values[y * COL + x]; }\n    T\u0026 operator()(size_t x, size_t y) { return values[y * COL + x]; }\n\nprivate:\n    std::vector\u003cT\u003e values;\n};\n\ntemplate \u003ctypename T, std::size_t COL, std::size_t ROW\u003e\nMatrix\u003cT, COL, ROW\u003e\noperator+(const Matrix\u003cT, COL, ROW\u003e\u0026 lhs, const Matrix\u003cT, COL, ROW\u003e\u0026 rhs)\n{\n    Matrix\u003cT, COL, ROW\u003e result;\n\n    for (size_t y = 0; y != lhs.rows(); ++y) {\n        for (size_t x = 0; x != lhs.cols(); ++x) {\n            result(x, y) = lhs(x, y) + rhs(x, y);\n        }\n    }\n    return result;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523398663,
        "id": "8560004c-0b26-4ae3-a87e-0c9a77c0648f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523398663,
        "parent_id": "66659d82-a166-4437-81eb-6b8a145e559f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Given the previous class definition, you can now write Matrix expressions such as:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Given the previous class definition, you can now write Matrix expressions such as:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523398663,
        "id": "c10e3690-74c2-4f5e-b034-4b5ccd36e4f5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523398663,
        "parent_id": "66659d82-a166-4437-81eb-6b8a145e559f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "const std::size_t cols = 2000;\nconst std::size_t rows = 1000;\n\nMatrix\u003cdouble, cols, rows\u003e a, b, c;\n\n// initialize a, b \u0026 c\nfor (std::size_t y = 0; y != rows; ++y) {\n    for (std::size_t x = 0; x != cols; ++x) {\n        a(x, y) = 1.0;\n        b(x, y) = 2.0;\n        c(x, y) = 3.0;\n    }\n}  \n\nMatrix\u003cdouble, cols, rows\u003e d = a + b + c;  // d(x, y) = 6"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "const std::size_t cols = 2000;\nconst std::size_t rows = 1000;\n\nMatrix\u003cdouble, cols, rows\u003e a, b, c;\n\n// initialize a, b \u0026 c\nfor (std::size_t y = 0; y != rows; ++y) {\n    for (std::size_t x = 0; x != cols; ++x) {\n        a(x, y) = 1.0;\n        b(x, y) = 2.0;\n        c(x, y) = 3.0;\n    }\n}  \n\nMatrix\u003cdouble, cols, rows\u003e d = a + b + c;  // d(x, y) = 6",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523398663,
        "id": "05b69c99-f36f-4948-91a4-423db6519d96",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523398663,
        "parent_id": "66659d82-a166-4437-81eb-6b8a145e559f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As illustrated above, being able to overload "
            ],
            [
              "operator+()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " provides you with a notation which mimics the natural mathematical notation for matrices."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "As illustrated above, being able to overload "
          },
          {
            "Text": "operator+()",
            "AttrFlags": 2
          },
          {
            "Text": " provides you with a notation which mimics the natural mathematical notation for matrices."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523398664,
        "id": "d10bf43b-c924-4df8-be04-d1c8962374c8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523398664,
        "parent_id": "66659d82-a166-4437-81eb-6b8a145e559f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Unfortunately, the previous implementation is also highly inefficient compared to an equivalent “hand-crafted” version."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Unfortunately, the previous implementation is also highly inefficient compared to an equivalent “hand-crafted” version."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523398664,
        "id": "88dee7af-2002-4d3b-8dc1-bd7ed8521a2b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523398664,
        "parent_id": "66659d82-a166-4437-81eb-6b8a145e559f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To understand why, you have to consider what happens when you write an expression such as "
            ],
            [
              "Matrix d = a + b + c",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". This in fact expands to "
            ],
            [
              "((a + b) + c)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "operator+(operator+(a, b), c)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". In other words, the loop inside "
            ],
            [
              "operator+()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is executed twice, whereas it could have been easily performed in a single pass. This also results in 2 temporaries being created, which further degrades performance. In essence, by adding the flexibility to use a notation close to its mathematical counterpart, you have also made the "
            ],
            [
              "Matrix",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " class highly inefficient."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To understand why, you have to consider what happens when you write an expression such as "
          },
          {
            "Text": "Matrix d = a + b + c",
            "AttrFlags": 2
          },
          {
            "Text": ". This in fact expands to "
          },
          {
            "Text": "((a + b) + c)",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "operator+(operator+(a, b), c)",
            "AttrFlags": 2
          },
          {
            "Text": ". In other words, the loop inside "
          },
          {
            "Text": "operator+()",
            "AttrFlags": 2
          },
          {
            "Text": " is executed twice, whereas it could have been easily performed in a single pass. This also results in 2 temporaries being created, which further degrades performance. In essence, by adding the flexibility to use a notation close to its mathematical counterpart, you have also made the "
          },
          {
            "Text": "Matrix",
            "AttrFlags": 2
          },
          {
            "Text": " class highly inefficient."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523398664,
        "id": "940fb7d7-7d16-4347-ae77-dacef758a3c2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523398664,
        "parent_id": "66659d82-a166-4437-81eb-6b8a145e559f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For example, without operator overloading, you could implement a far more efficient Matrix summation using a single pass:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For example, without operator overloading, you could implement a far more efficient Matrix summation using a single pass:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523398664,
        "id": "eda65b99-9f68-40c3-ad46-aaae34f49544",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523398664,
        "parent_id": "66659d82-a166-4437-81eb-6b8a145e559f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "template\u003ctypename T, std::size_t COL, std::size_t ROW\u003e\nMatrix\u003cT, COL, ROW\u003e add3(const Matrix\u003cT, COL, ROW\u003e\u0026 a,\n                         const Matrix\u003cT, COL, ROW\u003e\u0026 b,\n                         const Matrix\u003cT, COL, ROW\u003e\u0026 c)\n{\n    Matrix\u003cT, COL, ROW\u003e result;\n    for (size_t y = 0; y != ROW; ++y) {\n        for (size_t x = 0; x != COL; ++x) {\n            result(x, y) = a(x, y) + b(x, y) + c(x, y);\n        }\n    }\n    return result;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "template\u003ctypename T, std::size_t COL, std::size_t ROW\u003e\nMatrix\u003cT, COL, ROW\u003e add3(const Matrix\u003cT, COL, ROW\u003e\u0026 a,\n                         const Matrix\u003cT, COL, ROW\u003e\u0026 b,\n                         const Matrix\u003cT, COL, ROW\u003e\u0026 c)\n{\n    Matrix\u003cT, COL, ROW\u003e result;\n    for (size_t y = 0; y != ROW; ++y) {\n        for (size_t x = 0; x != COL; ++x) {\n            result(x, y) = a(x, y) + b(x, y) + c(x, y);\n        }\n    }\n    return result;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523398664,
        "id": "82991b29-f893-407e-aa82-31bc9f296f71",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523398664,
        "parent_id": "66659d82-a166-4437-81eb-6b8a145e559f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The previous example however has its own disadvantages because it creates a far more convoluted interface for the Matrix class (you would have to consider methods such as "
            ],
            [
              "Matrix::add2()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "Matrix::AddMultiply()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and so on)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The previous example however has its own disadvantages because it creates a far more convoluted interface for the Matrix class (you would have to consider methods such as "
          },
          {
            "Text": "Matrix::add2()",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "Matrix::AddMultiply()",
            "AttrFlags": 2
          },
          {
            "Text": " and so on)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523398664,
        "id": "ebe8d7f1-ab88-4618-9be3-e32de13a6f72",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523398664,
        "parent_id": "66659d82-a166-4437-81eb-6b8a145e559f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Instead let us take a step back and see how we can adapt operator overloading to perform in a more efficient way"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Instead let us take a step back and see how we can adapt operator overloading to perform in a more efficient way"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523398666,
        "id": "0d881190-44a9-4298-8b28-27feb1d14e99",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523398666,
        "parent_id": "66659d82-a166-4437-81eb-6b8a145e559f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The problem stems from the fact that the expression "
            ],
            [
              "Matrix d = a + b + c",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is evaluated too “eagerly” before you have had an opportunity to build the entire expression tree. In other words, what you really want to achieve is to evaluate "
            ],
            [
              "a + b + c",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in one pass and only once you actually need to assign the resulting expressing to "
            ],
            [
              "d",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The problem stems from the fact that the expression "
          },
          {
            "Text": "Matrix d = a + b + c",
            "AttrFlags": 2
          },
          {
            "Text": " is evaluated too “eagerly” before you have had an opportunity to build the entire expression tree. In other words, what you really want to achieve is to evaluate "
          },
          {
            "Text": "a + b + c",
            "AttrFlags": 2
          },
          {
            "Text": " in one pass and only once you actually need to assign the resulting expressing to "
          },
          {
            "Text": "d",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523398666,
        "id": "db4533ca-75f3-456f-a324-9104a2daec87",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523398666,
        "parent_id": "66659d82-a166-4437-81eb-6b8a145e559f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This is the core idea behind expression templates: instead of having "
            ],
            [
              "operator+()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " evaluate immediately the result of adding two Matrix instances, it will return an "
            ],
            [
              "“expression template”",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " for future evaluation once the entire expression tree has been built."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This is the core idea behind expression templates: instead of having "
          },
          {
            "Text": "operator+()",
            "AttrFlags": 2
          },
          {
            "Text": " evaluate immediately the result of adding two Matrix instances, it will return an "
          },
          {
            "Text": "“expression template”",
            "AttrFlags": 4
          },
          {
            "Text": " for future evaluation once the entire expression tree has been built."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523398667,
        "id": "71e2f8f8-7359-44dd-8a25-7d7d11ad2297",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523398667,
        "parent_id": "66659d82-a166-4437-81eb-6b8a145e559f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For example, here is a possible implementation for an expression template corresponding to the summation of 2 types:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For example, here is a possible implementation for an expression template corresponding to the summation of 2 types:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523398667,
        "id": "900b3491-d200-427b-b786-e5b9b1a09789",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523398667,
        "parent_id": "66659d82-a166-4437-81eb-6b8a145e559f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "template \u003ctypename LHS, typename RHS\u003e\nclass MatrixSum\n{\npublic:\n    using value_type = typename LHS::value_type;\n\n    MatrixSum(const LHS\u0026 lhs, const RHS\u0026 rhs) : rhs(rhs), lhs(lhs) {}\n    \n    value_type operator() (int x, int y) const  {\n        return lhs(x, y) + rhs(x, y);\n    }\nprivate:\n    const LHS\u0026 lhs;\n    const RHS\u0026 rhs;\n};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "template \u003ctypename LHS, typename RHS\u003e\nclass MatrixSum\n{\npublic:\n    using value_type = typename LHS::value_type;\n\n    MatrixSum(const LHS\u0026 lhs, const RHS\u0026 rhs) : rhs(rhs), lhs(lhs) {}\n    \n    value_type operator() (int x, int y) const  {\n        return lhs(x, y) + rhs(x, y);\n    }\nprivate:\n    const LHS\u0026 lhs;\n    const RHS\u0026 rhs;\n};",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523398667,
        "id": "c0b1cc79-9251-4967-9c68-479c80e84f0f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523398667,
        "parent_id": "66659d82-a166-4437-81eb-6b8a145e559f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "And here is the updated version of "
            ],
            [
              "operator+()",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "And here is the updated version of "
          },
          {
            "Text": "operator+()",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523398667,
        "id": "7e621d76-283f-4895-9a0b-cd3f72e6e275",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523398667,
        "parent_id": "66659d82-a166-4437-81eb-6b8a145e559f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "template \u003ctypename LHS, typename RHS\u003e\nMatrixSum\u003cLHS, RHS\u003e operator+(const LHS\u0026 lhs, const LHS\u0026 rhs) {\n    return MatrixSum\u003cLHS, RHS\u003e(lhs, rhs);\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "template \u003ctypename LHS, typename RHS\u003e\nMatrixSum\u003cLHS, RHS\u003e operator+(const LHS\u0026 lhs, const LHS\u0026 rhs) {\n    return MatrixSum\u003cLHS, RHS\u003e(lhs, rhs);\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523398667,
        "id": "8c031dbd-99ec-4417-bd52-f96a378e7508",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523398667,
        "parent_id": "66659d82-a166-4437-81eb-6b8a145e559f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As you can see, "
            ],
            [
              "operator+()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " no longer returns an “eager evaluation” of the result of adding 2 Matrix instances (which would be another Matrix instance), but instead an expression template representing the addition operation. The most important point to keep in mind is that the expression has not been evaluated yet. It merely holds references to its operands."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "As you can see, "
          },
          {
            "Text": "operator+()",
            "AttrFlags": 2
          },
          {
            "Text": " no longer returns an “eager evaluation” of the result of adding 2 Matrix instances (which would be another Matrix instance), but instead an expression template representing the addition operation. The most important point to keep in mind is that the expression has not been evaluated yet. It merely holds references to its operands."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523398667,
        "id": "644e243f-f60c-429b-991f-4fe9096b9de8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523398667,
        "parent_id": "66659d82-a166-4437-81eb-6b8a145e559f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In fact, nothing stops you from instantiating the "
            ],
            [
              "MatrixSum\u003c\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " expression template as follows:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In fact, nothing stops you from instantiating the "
          },
          {
            "Text": "MatrixSum\u003c\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " expression template as follows:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523398668,
        "id": "e9475823-b9b2-4973-9675-dde37f059ca0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523398668,
        "parent_id": "66659d82-a166-4437-81eb-6b8a145e559f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "MatrixSum\u003cMatrix\u003cdouble\u003e, Matrix\u003cdouble\u003e \u003e SumAB(a, b);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "MatrixSum\u003cMatrix\u003cdouble\u003e, Matrix\u003cdouble\u003e \u003e SumAB(a, b);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523398668,
        "id": "4a10d2b8-6852-458d-ad18-797de4e98fa0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523398668,
        "parent_id": "66659d82-a166-4437-81eb-6b8a145e559f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You can however at a later stage, when you actually need the result of the summation, evaluate the expression "
            ],
            [
              "d = a + b",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " as follows:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You can however at a later stage, when you actually need the result of the summation, evaluate the expression "
          },
          {
            "Text": "d = a + b",
            "AttrFlags": 2
          },
          {
            "Text": " as follows:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523398668,
        "id": "776ae553-3056-4175-8056-2c1109a94803",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523398668,
        "parent_id": "66659d82-a166-4437-81eb-6b8a145e559f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "for (std::size_t y = 0; y != a.rows(); ++y) {\n    for (std::size_t x = 0; x != a.cols(); ++x) {\n        d(x, y) = SumAB(x, y);\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "for (std::size_t y = 0; y != a.rows(); ++y) {\n    for (std::size_t x = 0; x != a.cols(); ++x) {\n        d(x, y) = SumAB(x, y);\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523398668,
        "id": "2a8b909a-926a-4765-9655-6cf026ee9083",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523398668,
        "parent_id": "66659d82-a166-4437-81eb-6b8a145e559f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As you can see, another benefit of using an expression template, is that you have basically managed to evaluate the sum of "
            ],
            [
              "a",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "b",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and assign it to "
            ],
            [
              "d",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in a single pass."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "As you can see, another benefit of using an expression template, is that you have basically managed to evaluate the sum of "
          },
          {
            "Text": "a",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "b",
            "AttrFlags": 2
          },
          {
            "Text": " and assign it to "
          },
          {
            "Text": "d",
            "AttrFlags": 2
          },
          {
            "Text": " in a single pass."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523398668,
        "id": "d2cbf6af-9d8a-46f1-9ed7-60aefc498b99",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523398668,
        "parent_id": "66659d82-a166-4437-81eb-6b8a145e559f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Also, nothing stops you from combining multiple expression templates. For example, "
            ],
            [
              "a + b + c",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " would result in the following expression template:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Also, nothing stops you from combining multiple expression templates. For example, "
          },
          {
            "Text": "a + b + c",
            "AttrFlags": 2
          },
          {
            "Text": " would result in the following expression template:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523398668,
        "id": "f4efda28-68e4-43ce-a851-f6c5cfdaaea6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523398668,
        "parent_id": "66659d82-a166-4437-81eb-6b8a145e559f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "MatrixSum\u003cMatrixSum\u003cMatrix\u003cdouble\u003e, Matrix\u003cdouble\u003e \u003e, Matrix\u003cdouble\u003e \u003e SumABC(SumAB, c);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "MatrixSum\u003cMatrixSum\u003cMatrix\u003cdouble\u003e, Matrix\u003cdouble\u003e \u003e, Matrix\u003cdouble\u003e \u003e SumABC(SumAB, c);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523398668,
        "id": "baadb5e7-6b95-482d-9b17-99aeb1272cd3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523398668,
        "parent_id": "66659d82-a166-4437-81eb-6b8a145e559f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "And here again you can evaluate the final result using a single pass:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "And here again you can evaluate the final result using a single pass:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523398669,
        "id": "6cf7bc4b-ed0e-44fc-a4c0-3876760a042b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523398669,
        "parent_id": "66659d82-a166-4437-81eb-6b8a145e559f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "for (std::size_t y = 0; y != a.rows(); ++y) {\n    for (std::size_t x = 0; x != a.cols(); ++x) {\n        d(x, y) = SumABC(x, y);\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "for (std::size_t y = 0; y != a.rows(); ++y) {\n    for (std::size_t x = 0; x != a.cols(); ++x) {\n        d(x, y) = SumABC(x, y);\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523398669,
        "id": "2400f2f2-eb21-4a1f-9b2d-e2c9bdce8866",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523398669,
        "parent_id": "66659d82-a166-4437-81eb-6b8a145e559f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Finally, the last piece of the puzzle is to actually plug your expression template into the "
            ],
            [
              "Matrix",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " class. This is essentially achieved by providing an implementation for "
            ],
            [
              "Matrix::operator=()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", which takes the expression template as an argument and evaluates it in one pass, as you did “manually” before:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Finally, the last piece of the puzzle is to actually plug your expression template into the "
          },
          {
            "Text": "Matrix",
            "AttrFlags": 2
          },
          {
            "Text": " class. This is essentially achieved by providing an implementation for "
          },
          {
            "Text": "Matrix::operator=()",
            "AttrFlags": 2
          },
          {
            "Text": ", which takes the expression template as an argument and evaluates it in one pass, as you did “manually” before:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523398669,
        "id": "d75b9cbc-fb4a-4519-8a86-b249a98a6a5e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523398669,
        "parent_id": "66659d82-a166-4437-81eb-6b8a145e559f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "template \u003ctypename T, std::size_t COL, std::size_t ROW\u003e\nclass Matrix {\npublic:\n    using value_type = T;\n\n    Matrix() : values(COL * ROW) {}\n\n    static size_t cols() { return COL; }\n    static size_t rows() { return ROW; }\n\n    const T\u0026 operator()(size_t x, size_t y) const { return values[y * COL + x]; }\n    T\u0026 operator()(size_t x, size_t y) { return values[y * COL + x]; }\n\n    template \u003ctypename E\u003e\n    Matrix\u003cT, COL, ROW\u003e\u0026 operator=(const E\u0026 expression) {\n        for (std::size_t y = 0; y != rows(); ++y) {\n            for (std::size_t x = 0; x != cols(); ++x) {\n                values[y * COL + x] = expression(x, y);\n            }\n        }\n        return *this;\n    }\n\nprivate:\n    std::vector\u003cT\u003e values;\n};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "template \u003ctypename T, std::size_t COL, std::size_t ROW\u003e\nclass Matrix {\npublic:\n    using value_type = T;\n\n    Matrix() : values(COL * ROW) {}\n\n    static size_t cols() { return COL; }\n    static size_t rows() { return ROW; }\n\n    const T\u0026 operator()(size_t x, size_t y) const { return values[y * COL + x]; }\n    T\u0026 operator()(size_t x, size_t y) { return values[y * COL + x]; }\n\n    template \u003ctypename E\u003e\n    Matrix\u003cT, COL, ROW\u003e\u0026 operator=(const E\u0026 expression) {\n        for (std::size_t y = 0; y != rows(); ++y) {\n            for (std::size_t x = 0; x != cols(); ++x) {\n                values[y * COL + x] = expression(x, y);\n            }\n        }\n        return *this;\n    }\n\nprivate:\n    std::vector\u003cT\u003e values;\n};",
        "code_language": "Plain Text"
      }
    ],
    "title": "A basic example illustrating expression templates",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}