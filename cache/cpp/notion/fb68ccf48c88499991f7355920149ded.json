{
  "ID": "fb68ccf4-8c88-4999-91f7-355920149ded",
  "Root": {
    "alive": true,
    "content": [
      "5510dc82-5153-4f48-90a4-f8e65839ff37",
      "0046cbab-9d8f-435b-9416-413afa5f55ad",
      "21616277-9828-4db2-9edb-579d86d82bcc",
      "fb3b0ad5-6501-4f31-bfb1-7129ce519282",
      "837fedc1-c411-42c6-9c2a-2d34ed2e90fe"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522673604,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "fb68ccf4-8c88-4999-91f7-355920149ded",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550710620000,
    "parent_id": "44b9891c-fe65-4aa6-8ac6-b623709b7c02",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Move semantics"
        ]
      ]
    },
    "type": "page",
    "version": 9,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522673600,
        "id": "5510dc82-5153-4f48-90a4-f8e65839ff37",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522673600,
        "parent_id": "fb68ccf4-8c88-4999-91f7-355920149ded",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Move semantics are a way of moving one object to another in C++. For this, we empty the old object and place everything it had in the new object."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Move semantics are a way of moving one object to another in C++. For this, we empty the old object and place everything it had in the new object."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522673603,
        "id": "0046cbab-9d8f-435b-9416-413afa5f55ad",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522673603,
        "parent_id": "fb68ccf4-8c88-4999-91f7-355920149ded",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For this, we must understand what an rvalue reference is. An rvalue reference ("
            ],
            [
              "T\u0026\u0026",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " where T is the object type) is not much different than a normal reference ("
            ],
            [
              "T\u0026",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", now called lvalue references). But they act as 2 different types, and so, we can make constructors or functions that take one type or the other, which will be necessary when dealing with move semantics."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For this, we must understand what an rvalue reference is. An rvalue reference ("
          },
          {
            "Text": "T\u0026\u0026",
            "AttrFlags": 2
          },
          {
            "Text": " where T is the object type) is not much different than a normal reference ("
          },
          {
            "Text": "T\u0026",
            "AttrFlags": 2
          },
          {
            "Text": ", now called lvalue references). But they act as 2 different types, and so, we can make constructors or functions that take one type or the other, which will be necessary when dealing with move semantics."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522673603,
        "id": "21616277-9828-4db2-9edb-579d86d82bcc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522673603,
        "parent_id": "fb68ccf4-8c88-4999-91f7-355920149ded",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The reason why we need two different types is to specify two different behaviors. Lvalue reference constructors are related to copying, while rvalue reference constructors are related to moving."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The reason why we need two different types is to specify two different behaviors. Lvalue reference constructors are related to copying, while rvalue reference constructors are related to moving."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522673604,
        "id": "fb3b0ad5-6501-4f31-bfb1-7129ce519282",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522673604,
        "parent_id": "fb68ccf4-8c88-4999-91f7-355920149ded",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To move an object, we will use "
            ],
            [
              "std::move(obj)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". This function returns an rvalue reference to the object, so that we can steal the data from that object into a new one. There are several ways of doing this which are discussed below."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To move an object, we will use "
          },
          {
            "Text": "std::move(obj)",
            "AttrFlags": 2
          },
          {
            "Text": ". This function returns an rvalue reference to the object, so that we can steal the data from that object into a new one. There are several ways of doing this which are discussed below."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522673604,
        "id": "837fedc1-c411-42c6-9c2a-2d34ed2e90fe",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522673604,
        "parent_id": "fb68ccf4-8c88-4999-91f7-355920149ded",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Important to note is that the use of "
            ],
            [
              "std::move",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " creates just an rvalue reference. In other words the statement "
            ],
            [
              "std::move(obj)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " does not change the content of obj, while "
            ],
            [
              "auto obj2 = std::move(obj)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (possibly) does."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Important to note is that the use of "
          },
          {
            "Text": "std::move",
            "AttrFlags": 2
          },
          {
            "Text": " creates just an rvalue reference. In other words the statement "
          },
          {
            "Text": "std::move(obj)",
            "AttrFlags": 2
          },
          {
            "Text": " does not change the content of obj, while "
          },
          {
            "Text": "auto obj2 = std::move(obj)",
            "AttrFlags": 2
          },
          {
            "Text": " (possibly) does."
          }
        ]
      }
    ],
    "title": "Move semantics",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}