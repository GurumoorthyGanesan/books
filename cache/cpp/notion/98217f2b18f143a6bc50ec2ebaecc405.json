{
  "ID": "98217f2b-18f1-43a6-bc50-ec2ebaecc405",
  "Root": {
    "alive": true,
    "content": [
      "110c372c-8f22-4d53-b454-5dd2fb7f148d",
      "09ee93eb-b7e3-4a50-a749-890f912dbf07",
      "e8f07749-c6f0-43ac-a494-bbcf52fe3b3e",
      "a8643f80-4bb6-46d1-a0f7-82f1b398c72a",
      "69c53573-9b51-408e-9532-9f4c38ddbf15",
      "e4edf946-d622-48d8-bfd2-146c220f7043",
      "d79cc2e8-08d8-4526-8c9e-b65435012958",
      "fdfc458c-823f-4855-82c6-f49d8c32433a",
      "e4d5e322-9313-4288-be0d-8982832a7641",
      "645f4c9f-398a-4955-87f9-2c858ae3a66f",
      "70a47b27-7f74-4091-8b71-fb180b0e579f",
      "2921b76d-d41c-4e53-85df-3782d641763f",
      "197034ed-92cc-4269-af39-980ac18492ad"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522744499,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "98217f2b-18f1-43a6-bc50-ec2ebaecc405",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551686831318,
    "parent_id": "a29d7b5a-3989-43f1-8efa-86ef82101f43",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Purpose of copy elision"
        ]
      ]
    },
    "type": "page",
    "version": 4,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522744494,
        "id": "110c372c-8f22-4d53-b454-5dd2fb7f148d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522744494,
        "parent_id": "98217f2b-18f1-43a6-bc50-ec2ebaecc405",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "There are places in the standard where an object is copied or moved in order to initialize an object. Copy elision (sometimes called return value optimization) is an optimization whereby, under certain specific circumstances, a compiler is permitted to avoid the copy or move even though the standard says that it must happen."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "There are places in the standard where an object is copied or moved in order to initialize an object. Copy elision (sometimes called return value optimization) is an optimization whereby, under certain specific circumstances, a compiler is permitted to avoid the copy or move even though the standard says that it must happen."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522744497,
        "id": "09ee93eb-b7e3-4a50-a749-890f912dbf07",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522744497,
        "parent_id": "98217f2b-18f1-43a6-bc50-ec2ebaecc405",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Consider the following function:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Consider the following function:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522744497,
        "id": "e8f07749-c6f0-43ac-a494-bbcf52fe3b3e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522744497,
        "parent_id": "98217f2b-18f1-43a6-bc50-ec2ebaecc405",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "std::string get_string()\n{\n  return std::string(\"I am a string.\");\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "std::string get_string()\n{\n  return std::string(\"I am a string.\");\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522744497,
        "id": "a8643f80-4bb6-46d1-a0f7-82f1b398c72a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522744497,
        "parent_id": "98217f2b-18f1-43a6-bc50-ec2ebaecc405",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "According to the strict wording of the standard, this function will initialize a temporary "
            ],
            [
              "std::string",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", then copy/move that into the return value object, then destroy the temporary. The standard is very clear that this is how the code is interpreted."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "According to the strict wording of the standard, this function will initialize a temporary "
          },
          {
            "Text": "std::string",
            "AttrFlags": 2
          },
          {
            "Text": ", then copy/move that into the return value object, then destroy the temporary. The standard is very clear that this is how the code is interpreted."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522744497,
        "id": "69c53573-9b51-408e-9532-9f4c38ddbf15",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522744497,
        "parent_id": "98217f2b-18f1-43a6-bc50-ec2ebaecc405",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Copy elision is a rule that permits a C++ compiler to "
            ],
            [
              "ignore",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " the creation of the temporary and its subsequent copy/destruction. That is, the compiler can take the initializing expression for the temporary and initialize the function’s return value from it directly. This obviously saves performance."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Copy elision is a rule that permits a C++ compiler to "
          },
          {
            "Text": "ignore",
            "AttrFlags": 4
          },
          {
            "Text": " the creation of the temporary and its subsequent copy/destruction. That is, the compiler can take the initializing expression for the temporary and initialize the function’s return value from it directly. This obviously saves performance."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522744497,
        "id": "e4edf946-d622-48d8-bfd2-146c220f7043",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522744497,
        "parent_id": "98217f2b-18f1-43a6-bc50-ec2ebaecc405",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "However, it does have two visible effects on the user:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "However, it does have two visible effects on the user:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522744498,
        "id": "d79cc2e8-08d8-4526-8c9e-b65435012958",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522744498,
        "parent_id": "98217f2b-18f1-43a6-bc50-ec2ebaecc405",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The type must have the copy/move constructor that would have been called. Even if the compiler elides the copy/move, the type must still be able to have been copied/moved."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "The type must have the copy/move constructor that would have been called. Even if the compiler elides the copy/move, the type must still be able to have been copied/moved."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522744498,
        "id": "fdfc458c-823f-4855-82c6-f49d8c32433a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522744498,
        "parent_id": "98217f2b-18f1-43a6-bc50-ec2ebaecc405",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Side-effects of copy/move constructors are not guaranteed in circumstances where elision can happen. Consider the following:"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Side-effects of copy/move constructors are not guaranteed in circumstances where elision can happen. Consider the following:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522744498,
        "id": "e4d5e322-9313-4288-be0d-8982832a7641",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522744498,
        "parent_id": "98217f2b-18f1-43a6-bc50-ec2ebaecc405",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "struct my_type\n{\n  my_type() = default;\n  my_type(const my_type \u0026) {std::cout \u003c\u003c\"Copying\\n\";}\n  my_type(my_type \u0026\u0026) {std::cout \u003c\u003c\"Moving\\n\";}\n};\n\nmy_type func()\n{\n  return my_type();\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "struct my_type\n{\n  my_type() = default;\n  my_type(const my_type \u0026) {std::cout \u003c\u003c\"Copying\\n\";}\n  my_type(my_type \u0026\u0026) {std::cout \u003c\u003c\"Moving\\n\";}\n};\n\nmy_type func()\n{\n  return my_type();\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522744498,
        "id": "645f4c9f-398a-4955-87f9-2c858ae3a66f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522744498,
        "parent_id": "98217f2b-18f1-43a6-bc50-ec2ebaecc405",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "What will calling "
            ],
            [
              "func",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " do? Well, it will never print “Copying”, since the temporary is an rvalue and "
            ],
            [
              "my_type",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is a moveable type. So will it print “Moving”?"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "What will calling "
          },
          {
            "Text": "func",
            "AttrFlags": 2
          },
          {
            "Text": " do? Well, it will never print “Copying”, since the temporary is an rvalue and "
          },
          {
            "Text": "my_type",
            "AttrFlags": 2
          },
          {
            "Text": " is a moveable type. So will it print “Moving”?"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522744498,
        "id": "70a47b27-7f74-4091-8b71-fb180b0e579f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522744498,
        "parent_id": "98217f2b-18f1-43a6-bc50-ec2ebaecc405",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Without the copy elision rule, this would be required to always print “Moving”. But because the copy elision rule exists, the move constructor may or may not be called; it is implementation-dependent."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Without the copy elision rule, this would be required to always print “Moving”. But because the copy elision rule exists, the move constructor may or may not be called; it is implementation-dependent."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522744499,
        "id": "2921b76d-d41c-4e53-85df-3782d641763f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522744499,
        "parent_id": "98217f2b-18f1-43a6-bc50-ec2ebaecc405",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "And therefore, you cannot depend on the calling of copy/move constructors in contexts where elision is possible."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "And therefore, you cannot depend on the calling of copy/move constructors in contexts where elision is possible."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522744499,
        "id": "197034ed-92cc-4269-af39-980ac18492ad",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522744499,
        "parent_id": "98217f2b-18f1-43a6-bc50-ec2ebaecc405",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Because elision is an optimization, your compiler may not support elision in all cases. And regardless of whether the compiler elides a particular case or not, the type must still support the operation being elided. So if a copy construction is elided, the type must still have a copy constructor, even though it will not be called."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Because elision is an optimization, your compiler may not support elision in all cases. And regardless of whether the compiler elides a particular case or not, the type must still support the operation being elided. So if a copy construction is elided, the type must still have a copy constructor, even though it will not be called."
          }
        ]
      }
    ],
    "title": "Purpose of copy elision",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}