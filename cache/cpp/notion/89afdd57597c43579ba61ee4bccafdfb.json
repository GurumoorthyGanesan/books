{
  "ID": "89afdd57-597c-4357-9ba6-1ee4bccafdfb",
  "Root": {
    "alive": true,
    "content": [
      "fc6e5082-9901-41de-98b7-bf9d84857739",
      "51de8a7b-3cb2-41b8-b5e9-7be020f51220",
      "0cfb6520-48c8-4476-8694-d21a5e382651",
      "30516036-1fd1-4897-ab9f-b31f1cc962bf",
      "d8a3de83-0b5b-4731-bc73-14ddb4cd7cbe",
      "280a4178-8984-4d79-9601-18cbc4b94f0e",
      "2d0b950b-567a-40ea-8e4f-70292064e4ae",
      "b9a26405-7be4-4d60-a796-1888626dc626",
      "0de7a7cf-d992-44a1-9f63-3a242d7f3f17",
      "cdd18786-f395-42ff-835f-af1fb15f476b",
      "7e062de2-c7af-494c-bf1b-dc47f716237c",
      "890e8c44-ef0a-47b9-853a-ba2b6a0e6985",
      "3ef31b18-1b24-43d3-83e6-c236baf85696",
      "57a46c40-12b3-46a2-b400-ab957100d78e",
      "f979d109-8678-4752-b241-d36f5f8e253b",
      "b31690b9-65b0-4608-b33f-a9f299578f83",
      "15b515e4-0247-46bd-9656-7179fd932c39",
      "48c3fb8e-2d3d-49cd-8834-dcee4947ea60",
      "06f8305c-50a2-4fd9-8fbf-d6fcefaa0be1"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522406614,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "89afdd57-597c-4357-9ba6-1ee4bccafdfb",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550799480000,
    "parent_id": "efdc4616-d5e4-4dce-b49c-941c07a9ac4b",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Define polymorphic classes"
        ]
      ]
    },
    "type": "page",
    "version": 9,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522406606,
        "id": "fc6e5082-9901-41de-98b7-bf9d84857739",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522406606,
        "parent_id": "89afdd57-597c-4357-9ba6-1ee4bccafdfb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The typical example is an abstract shape class, that can then be derived into squares, circles, and other concrete shapes."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The typical example is an abstract shape class, that can then be derived into squares, circles, and other concrete shapes."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522406609,
        "id": "51de8a7b-3cb2-41b8-b5e9-7be020f51220",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522406609,
        "parent_id": "89afdd57-597c-4357-9ba6-1ee4bccafdfb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The parent class:",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The parent class:",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522406609,
        "id": "0cfb6520-48c8-4476-8694-d21a5e382651",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522406609,
        "parent_id": "89afdd57-597c-4357-9ba6-1ee4bccafdfb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Let’s start with the polymorphic class:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Let’s start with the polymorphic class:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522406609,
        "id": "30516036-1fd1-4897-ab9f-b31f1cc962bf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550799480000,
        "parent_id": "89afdd57-597c-4357-9ba6-1ee4bccafdfb",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "class Shape {\npublic:\n    virtual ~Shape() = default;\n    virtual double get_surface() const = 0;\n    virtual void describe_object() const { std::cout \u003c\u003c \"this is a shape\" \u003c\u003c std::endl; }  \n\n    double get_doubled_surface() const { return 2 * get_surface(); } \n};"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "class Shape {\npublic:\n    virtual ~Shape() = default;\n    virtual double get_surface() const = 0;\n    virtual void describe_object() const { std::cout \u003c\u003c \"this is a shape\" \u003c\u003c std::endl; }  \n\n    double get_doubled_surface() const { return 2 * get_surface(); } \n};",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522406610,
        "id": "d8a3de83-0b5b-4731-bc73-14ddb4cd7cbe",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522406610,
        "parent_id": "89afdd57-597c-4357-9ba6-1ee4bccafdfb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "How to read this definition ?"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "How to read this definition ?"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522406610,
        "id": "280a4178-8984-4d79-9601-18cbc4b94f0e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522406610,
        "parent_id": "89afdd57-597c-4357-9ba6-1ee4bccafdfb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You can define polymorphic behavior by introduced member functions with the keyword "
            ],
            [
              "virtual",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Here "
            ],
            [
              "get_surface()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "describe_object()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will obviously be implemented differently for a square than for a circle. When the function is invoked on an object, function corresponding to the real class of the object will be determined at runtime."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "You can define polymorphic behavior by introduced member functions with the keyword "
          },
          {
            "Text": "virtual",
            "AttrFlags": 2
          },
          {
            "Text": ". Here "
          },
          {
            "Text": "get_surface()",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "describe_object()",
            "AttrFlags": 2
          },
          {
            "Text": " will obviously be implemented differently for a square than for a circle. When the function is invoked on an object, function corresponding to the real class of the object will be determined at runtime."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522406611,
        "id": "2d0b950b-567a-40ea-8e4f-70292064e4ae",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522406611,
        "parent_id": "89afdd57-597c-4357-9ba6-1ee4bccafdfb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It makes no sense to define "
            ],
            [
              "get_surface()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " for an abstract shape. This is why the function is followed by "
            ],
            [
              "= 0",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". This means that the function is "
            ],
            [
              "pure virtual function",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "It makes no sense to define "
          },
          {
            "Text": "get_surface()",
            "AttrFlags": 2
          },
          {
            "Text": " for an abstract shape. This is why the function is followed by "
          },
          {
            "Text": "= 0",
            "AttrFlags": 2
          },
          {
            "Text": ". This means that the function is "
          },
          {
            "Text": "pure virtual function",
            "AttrFlags": 4
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522406611,
        "id": "b9a26405-7be4-4d60-a796-1888626dc626",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522406611,
        "parent_id": "89afdd57-597c-4357-9ba6-1ee4bccafdfb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A polymorphic class should always define a virtual destructor."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "A polymorphic class should always define a virtual destructor."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522406611,
        "id": "0de7a7cf-d992-44a1-9f63-3a242d7f3f17",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522406611,
        "parent_id": "89afdd57-597c-4357-9ba6-1ee4bccafdfb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You may define non virtual member functions. When these function will be invoked for an object, the function will be chosen depending on the class used at compile-time. Here "
            ],
            [
              "get_double_surface()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is defined in this way."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "You may define non virtual member functions. When these function will be invoked for an object, the function will be chosen depending on the class used at compile-time. Here "
          },
          {
            "Text": "get_double_surface()",
            "AttrFlags": 2
          },
          {
            "Text": " is defined in this way."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522406612,
        "id": "cdd18786-f395-42ff-835f-af1fb15f476b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522406612,
        "parent_id": "89afdd57-597c-4357-9ba6-1ee4bccafdfb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A class that contains at least one pure virtual function is an abstract class. Abstract classes cannot be instantiated. You may only have pointers or references of an abstract class type."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "A class that contains at least one pure virtual function is an abstract class. Abstract classes cannot be instantiated. You may only have pointers or references of an abstract class type."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522406612,
        "id": "7e062de2-c7af-494c-bf1b-dc47f716237c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522406612,
        "parent_id": "89afdd57-597c-4357-9ba6-1ee4bccafdfb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Derived classes",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Derived classes",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522406612,
        "id": "890e8c44-ef0a-47b9-853a-ba2b6a0e6985",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522406612,
        "parent_id": "89afdd57-597c-4357-9ba6-1ee4bccafdfb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Once a polymorphic base class is defined you can derive it. For example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Once a polymorphic base class is defined you can derive it. For example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522406612,
        "id": "3ef31b18-1b24-43d3-83e6-c236baf85696",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550799480000,
        "parent_id": "89afdd57-597c-4357-9ba6-1ee4bccafdfb",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "class Square : public Shape {\n    Point top_left;\n    double side_length;\npublic: \n    Square (const Point\u0026 top_left, double side)\n       : top_left(top_left), side_length(side_length) {}\n\n    double get_surface() override { return side_length * side_length; }   \n    void describe_object() override { \n        std::cout \u003c\u003c \"this is a square starting at \" \u003c\u003c top_left.x \u003c\u003c \", \" \u003c\u003c top_left.y\n                  \u003c\u003c \" with a length of \" \u003c\u003c side_length \u003c\u003c std::endl; \n    }  \n};"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "class Square : public Shape {\n    Point top_left;\n    double side_length;\npublic: \n    Square (const Point\u0026 top_left, double side)\n       : top_left(top_left), side_length(side_length) {}\n\n    double get_surface() override { return side_length * side_length; }   \n    void describe_object() override { \n        std::cout \u003c\u003c \"this is a square starting at \" \u003c\u003c top_left.x \u003c\u003c \", \" \u003c\u003c top_left.y\n                  \u003c\u003c \" with a length of \" \u003c\u003c side_length \u003c\u003c std::endl; \n    }  \n};",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522406612,
        "id": "57a46c40-12b3-46a2-b400-ab957100d78e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522406612,
        "parent_id": "89afdd57-597c-4357-9ba6-1ee4bccafdfb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Some explanations:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Some explanations:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522406613,
        "id": "f979d109-8678-4752-b241-d36f5f8e253b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522406613,
        "parent_id": "89afdd57-597c-4357-9ba6-1ee4bccafdfb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You can define or override any of the virtual functions of the parent class. The fact that a function was virtual in the parent class makes it virtual in the derived class. No need to tell the compiler the keyword "
            ],
            [
              "virtual",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " again. But it’s recommended to add the keyword "
            ],
            [
              "override",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " at the end of the function declaration, in order to prevent subtle bugs caused by unnoticed variations in the function signature."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "You can define or override any of the virtual functions of the parent class. The fact that a function was virtual in the parent class makes it virtual in the derived class. No need to tell the compiler the keyword "
          },
          {
            "Text": "virtual",
            "AttrFlags": 2
          },
          {
            "Text": " again. But it’s recommended to add the keyword "
          },
          {
            "Text": "override",
            "AttrFlags": 2
          },
          {
            "Text": " at the end of the function declaration, in order to prevent subtle bugs caused by unnoticed variations in the function signature."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522406613,
        "id": "b31690b9-65b0-4608-b33f-a9f299578f83",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522406613,
        "parent_id": "89afdd57-597c-4357-9ba6-1ee4bccafdfb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If all the pure virtual functions of the parent class are defined you can instantiate objects for this class, else it will also become an abstract class."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "If all the pure virtual functions of the parent class are defined you can instantiate objects for this class, else it will also become an abstract class."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522406613,
        "id": "15b515e4-0247-46bd-9656-7179fd932c39",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522406613,
        "parent_id": "89afdd57-597c-4357-9ba6-1ee4bccafdfb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You are not obliged to override all the virtual functions. You can keep the version of the parent if it suits your need."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "You are not obliged to override all the virtual functions. You can keep the version of the parent if it suits your need."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522406613,
        "id": "48c3fb8e-2d3d-49cd-8834-dcee4947ea60",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522406613,
        "parent_id": "89afdd57-597c-4357-9ba6-1ee4bccafdfb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Example of instantiation",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Example of instantiation",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522406614,
        "id": "06f8305c-50a2-4fd9-8fbf-d6fcefaa0be1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550799480000,
        "parent_id": "89afdd57-597c-4357-9ba6-1ee4bccafdfb",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "int main() {\n\n    Square square(Point(10.0, 0.0), 6); // we know it's a square, the compiler also\n    square.describe_object(); \n    std::cout \u003c\u003c \"Surface: \" \u003c\u003c square.get_surface() \u003c\u003c std::endl; \n\n    Circle circle(Point(0.0, 0.0), 5);\n\n    Shape *ps = nullptr;  // we don't know yet the real type of the object\n    ps = \u0026circle;         // it's a circle, but it could as well be a square\n    ps-\u003edescribe_object(); \n    std::cout \u003c\u003c \"Surface: \" \u003c\u003c ps-\u003eget_surface() \u003c\u003c std::endl;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "int main() {\n\n    Square square(Point(10.0, 0.0), 6); // we know it's a square, the compiler also\n    square.describe_object(); \n    std::cout \u003c\u003c \"Surface: \" \u003c\u003c square.get_surface() \u003c\u003c std::endl; \n\n    Circle circle(Point(0.0, 0.0), 5);\n\n    Shape *ps = nullptr;  // we don't know yet the real type of the object\n    ps = \u0026circle;         // it's a circle, but it could as well be a square\n    ps-\u003edescribe_object(); \n    std::cout \u003c\u003c \"Surface: \" \u003c\u003c ps-\u003eget_surface() \u003c\u003c std::endl;\n}",
        "code_language": "C++"
      }
    ],
    "title": "Define polymorphic classes",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}