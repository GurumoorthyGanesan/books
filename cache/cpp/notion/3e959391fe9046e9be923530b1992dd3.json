{
  "ID": "3e959391-fe90-46e9-be92-3530b1992dd3",
  "Root": {
    "alive": true,
    "content": [
      "02724645-5057-430d-9e63-2050d1a231f3",
      "a32589ce-b93c-4767-87a1-f1170219a18b",
      "7f7f5e43-7f40-4292-b8a6-0fe47e17f301",
      "e5e31741-6f89-4a12-8e7a-4879ed174c5c",
      "9a6ce7e8-1651-488e-9aff-4ba9e72abc3b",
      "c4ec3689-5251-474d-8d23-80b0547f5309",
      "0f1cff44-925e-409a-b630-fc3241e73073",
      "636ad067-475f-4593-bb69-6f73908445a9",
      "4d0cbc82-1afd-4d39-98a5-55691b08deb7",
      "29b56ece-a7a2-4675-b311-ed679ceb18da"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522058840,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "3e959391-fe90-46e9-be92-3530b1992dd3",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550655900000,
    "parent_id": "8655f492-9c51-4f68-ad52-8b6c1e02a277",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Find max and min Element and Respective Index in a Vector"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522058838,
        "id": "02724645-5057-430d-9e63-2050d1a231f3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522058838,
        "parent_id": "3e959391-fe90-46e9-be92-3530b1992dd3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To find the largest or smallest element stored in a vector, you can use the methods "
            ],
            [
              "std::max_element",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://en.cppreference.com/w/cpp/algorithm/max_element"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "std::min_element",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://en.cppreference.com/w/cpp/algorithm/min_element"
                ]
              ]
            ],
            [
              ", respectively. These methods are defined in "
            ],
            [
              "\u003calgorithm\u003e",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://en.cppreference.com/w/cpp/algorithm"
                ]
              ]
            ],
            [
              " header. If several elements are equivalent to the greatest (smallest) element, the methods return the iterator to the first such element. Return "
            ],
            [
              "v.end()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " for empty vectors."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To find the largest or smallest element stored in a vector, you can use the methods "
          },
          {
            "Text": "std::max_element",
            "AttrFlags": 2,
            "Link": "http://en.cppreference.com/w/cpp/algorithm/max_element"
          },
          {
            "Text": " and "
          },
          {
            "Text": "std::min_element",
            "AttrFlags": 2,
            "Link": "http://en.cppreference.com/w/cpp/algorithm/min_element"
          },
          {
            "Text": ", respectively. These methods are defined in "
          },
          {
            "Text": "\u003calgorithm\u003e",
            "AttrFlags": 2,
            "Link": "http://en.cppreference.com/w/cpp/algorithm"
          },
          {
            "Text": " header. If several elements are equivalent to the greatest (smallest) element, the methods return the iterator to the first such element. Return "
          },
          {
            "Text": "v.end()",
            "AttrFlags": 2
          },
          {
            "Text": " for empty vectors."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522058839,
        "id": "a32589ce-b93c-4767-87a1-f1170219a18b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522058839,
        "parent_id": "3e959391-fe90-46e9-be92-3530b1992dd3",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "std::vector\u003cint\u003e v = {5, 2, 8, 10, 9}; \nint maxElementIndex = std::max_element(v.begin(),v.end()) - v.begin();\nint maxElement = *std::max_element(v.begin(), v.end());\n\nint minElementIndex = std::min_element(v.begin(),v.end()) - v.begin();\nint minElement = *std::min_element(v.begin(), v.end());\n\nstd::cout \u003c\u003c \"maxElementIndex:\" \u003c\u003c maxElementIndex \u003c\u003c \", maxElement:\" \u003c\u003c maxElement \u003c\u003c '\\n';\nstd::cout \u003c\u003c \"minElementIndex:\" \u003c\u003c minElementIndex \u003c\u003c \", minElement:\" \u003c\u003c minElement \u003c\u003c '\\n';"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "std::vector\u003cint\u003e v = {5, 2, 8, 10, 9}; \nint maxElementIndex = std::max_element(v.begin(),v.end()) - v.begin();\nint maxElement = *std::max_element(v.begin(), v.end());\n\nint minElementIndex = std::min_element(v.begin(),v.end()) - v.begin();\nint minElement = *std::min_element(v.begin(), v.end());\n\nstd::cout \u003c\u003c \"maxElementIndex:\" \u003c\u003c maxElementIndex \u003c\u003c \", maxElement:\" \u003c\u003c maxElement \u003c\u003c '\\n';\nstd::cout \u003c\u003c \"minElementIndex:\" \u003c\u003c minElementIndex \u003c\u003c \", minElement:\" \u003c\u003c minElement \u003c\u003c '\\n';",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522058839,
        "id": "7f7f5e43-7f40-4292-b8a6-0fe47e17f301",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522058839,
        "parent_id": "3e959391-fe90-46e9-be92-3530b1992dd3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Output:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Output:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522058839,
        "id": "e5e31741-6f89-4a12-8e7a-4879ed174c5c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522058839,
        "parent_id": "3e959391-fe90-46e9-be92-3530b1992dd3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "maxElementIndex:3, maxElement:10"
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "maxElementIndex:3, maxElement:10"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522058839,
        "id": "9a6ce7e8-1651-488e-9aff-4ba9e72abc3b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522058839,
        "parent_id": "3e959391-fe90-46e9-be92-3530b1992dd3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "minElementIndex:1, minElement:2"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "minElementIndex:1, minElement:2"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522058840,
        "id": "c4ec3689-5251-474d-8d23-80b0547f5309",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522058840,
        "parent_id": "3e959391-fe90-46e9-be92-3530b1992dd3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The minimum and maximum element in a vector can be retrieved at the same time by using the method "
            ],
            [
              "std::minmax_element",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://en.cppreference.com/w/cpp/minmax_element"
                ]
              ]
            ],
            [
              ", which is also defined in "
            ],
            [
              "\u003calgorithm\u003e",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://en.cppreference.com/w/cpp/algorithm"
                ]
              ]
            ],
            [
              " header:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The minimum and maximum element in a vector can be retrieved at the same time by using the method "
          },
          {
            "Text": "std::minmax_element",
            "AttrFlags": 2,
            "Link": "http://en.cppreference.com/w/cpp/minmax_element"
          },
          {
            "Text": ", which is also defined in "
          },
          {
            "Text": "\u003calgorithm\u003e",
            "AttrFlags": 2,
            "Link": "http://en.cppreference.com/w/cpp/algorithm"
          },
          {
            "Text": " header:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522058840,
        "id": "0f1cff44-925e-409a-b630-fc3241e73073",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522058840,
        "parent_id": "3e959391-fe90-46e9-be92-3530b1992dd3",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "std::vector\u003cint\u003e v = {5, 2, 8, 10, 9}; \nauto minmax = std::minmax_element(v.begin(), v.end());\n\nstd::cout \u003c\u003c \"minimum element: \" \u003c\u003c *minmax.first \u003c\u003c '\\n';\nstd::cout \u003c\u003c \"maximum element: \" \u003c\u003c *minmax.second \u003c\u003c '\\n';"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "std::vector\u003cint\u003e v = {5, 2, 8, 10, 9}; \nauto minmax = std::minmax_element(v.begin(), v.end());\n\nstd::cout \u003c\u003c \"minimum element: \" \u003c\u003c *minmax.first \u003c\u003c '\\n';\nstd::cout \u003c\u003c \"maximum element: \" \u003c\u003c *minmax.second \u003c\u003c '\\n';",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522058840,
        "id": "636ad067-475f-4593-bb69-6f73908445a9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522058840,
        "parent_id": "3e959391-fe90-46e9-be92-3530b1992dd3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Output:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Output:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522058840,
        "id": "4d0cbc82-1afd-4d39-98a5-55691b08deb7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522058840,
        "parent_id": "3e959391-fe90-46e9-be92-3530b1992dd3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "minimum element: 2"
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "minimum element: 2"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522058840,
        "id": "29b56ece-a7a2-4675-b311-ed679ceb18da",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522058840,
        "parent_id": "3e959391-fe90-46e9-be92-3530b1992dd3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "maximum element: 10"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "maximum element: 10"
          }
        ]
      }
    ],
    "title": "Find max and min Element and Respective Index in a Vector",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}