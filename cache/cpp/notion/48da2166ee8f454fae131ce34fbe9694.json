{
  "ID": "48da2166-ee8f-454f-ae13-1ce34fbe9694",
  "Root": {
    "alive": true,
    "content": [
      "8b8b2255-83cc-48f1-b581-922005cafad9",
      "5a2a14ba-4280-4086-9769-23b2c9b96caa",
      "77412185-83f3-4ebf-b14d-49a774a3f855",
      "9bf75a7d-5bf9-47c2-a67d-001d2995114d",
      "f34a987e-122d-45a8-bf91-e071506b466f",
      "7bb7d56a-c0ec-448b-a504-4556558b52f7",
      "efa32b3d-786b-45f5-aef2-5269e1f49c41",
      "b82079b6-78ad-47d8-829f-a636d19574b9",
      "64f0cb07-606a-4413-b830-578f8e4f843a",
      "6a837c1e-071a-48cf-8311-c8915ea3bb3f",
      "622b613e-e532-4473-bb41-27bcaf7b837a"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522355481,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "48da2166-ee8f-454f-ae13-1ce34fbe9694",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550709780000,
    "parent_id": "2ed71a30-e220-47b0-b0e7-1bc14fce30c0",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Copy and swap"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522355479,
        "id": "8b8b2255-83cc-48f1-b581-922005cafad9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522355479,
        "parent_id": "48da2166-ee8f-454f-ae13-1ce34fbe9694",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If you’re writing a class that manages resources, you need to implement all the special member functions (see "
            ],
            [
              "Rule of Three/Five/Zero",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%2B%2B/1206/the-rule-of-three-five-and-zero#t=201607231819366817285"
                ]
              ]
            ],
            [
              "). The most direct approach to writing the copy constructor and assignment operator would be:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If you’re writing a class that manages resources, you need to implement all the special member functions (see "
          },
          {
            "Text": "Rule of Three/Five/Zero",
            "Link": "http://stackoverflow.com/documentation/c%2B%2B/1206/the-rule-of-three-five-and-zero#t=201607231819366817285"
          },
          {
            "Text": "). The most direct approach to writing the copy constructor and assignment operator would be:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522355479,
        "id": "5a2a14ba-4280-4086-9769-23b2c9b96caa",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522355479,
        "parent_id": "48da2166-ee8f-454f-ae13-1ce34fbe9694",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "person(const person \u0026other)\n    : name(new char[std::strlen(other.name) + 1])\n    , age(other.age)\n{\n    std::strcpy(name, other.name);\n}\n\nperson\u0026 operator=(person const\u0026 rhs) {\n    if (this != \u0026other) {\n        delete [] name;\n        name = new char[std::strlen(other.name) + 1];\n        std::strcpy(name, other.name);\n        age = other.age;\n    }\n\n    return *this;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "person(const person \u0026other)\n    : name(new char[std::strlen(other.name) + 1])\n    , age(other.age)\n{\n    std::strcpy(name, other.name);\n}\n\nperson\u0026 operator=(person const\u0026 rhs) {\n    if (this != \u0026other) {\n        delete [] name;\n        name = new char[std::strlen(other.name) + 1];\n        std::strcpy(name, other.name);\n        age = other.age;\n    }\n\n    return *this;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522355480,
        "id": "77412185-83f3-4ebf-b14d-49a774a3f855",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522355480,
        "parent_id": "48da2166-ee8f-454f-ae13-1ce34fbe9694",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "But this approach has some problems. It fails the strong exception guarantee - if "
            ],
            [
              "new[]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " throws, we’ve already cleared the resources owned by "
            ],
            [
              "this",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and cannot recover. We’re duplicating a lot of the logic of copy construction in copy assignment. And we have to remember the self-assignment check, which usually just adds overhead to the copy operation, but is still critical."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "But this approach has some problems. It fails the strong exception guarantee - if "
          },
          {
            "Text": "new[]",
            "AttrFlags": 2
          },
          {
            "Text": " throws, we’ve already cleared the resources owned by "
          },
          {
            "Text": "this",
            "AttrFlags": 2
          },
          {
            "Text": " and cannot recover. We’re duplicating a lot of the logic of copy construction in copy assignment. And we have to remember the self-assignment check, which usually just adds overhead to the copy operation, but is still critical."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522355480,
        "id": "9bf75a7d-5bf9-47c2-a67d-001d2995114d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522355480,
        "parent_id": "48da2166-ee8f-454f-ae13-1ce34fbe9694",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To satisfy the strong exception guarantee and avoid code duplication (double so with the subsequent move assignment operator), we can use the copy-and-swap idiom:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To satisfy the strong exception guarantee and avoid code duplication (double so with the subsequent move assignment operator), we can use the copy-and-swap idiom:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522355480,
        "id": "f34a987e-122d-45a8-bf91-e071506b466f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522355480,
        "parent_id": "48da2166-ee8f-454f-ae13-1ce34fbe9694",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class person {\n    char* name;\n    int age;\npublic:\n    /* all the other functions ... */\n\n    friend void swap(person\u0026 lhs, person\u0026 rhs) {\n        using std::swap; // enable ADL\n\n        swap(lhs.name, rhs.name);\n        swap(lhs.age, rhs.age);\n    }\n\n    person\u0026 operator=(person rhs) {\n        swap(*this, rhs);\n        return *this;\n    }\n};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class person {\n    char* name;\n    int age;\npublic:\n    /* all the other functions ... */\n\n    friend void swap(person\u0026 lhs, person\u0026 rhs) {\n        using std::swap; // enable ADL\n\n        swap(lhs.name, rhs.name);\n        swap(lhs.age, rhs.age);\n    }\n\n    person\u0026 operator=(person rhs) {\n        swap(*this, rhs);\n        return *this;\n    }\n};",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522355480,
        "id": "7bb7d56a-c0ec-448b-a504-4556558b52f7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522355480,
        "parent_id": "48da2166-ee8f-454f-ae13-1ce34fbe9694",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Why does this work? Consider what happens when we have"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Why does this work? Consider what happens when we have"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522355480,
        "id": "efa32b3d-786b-45f5-aef2-5269e1f49c41",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522355480,
        "parent_id": "48da2166-ee8f-454f-ae13-1ce34fbe9694",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "person p1 = ...;\nperson p2 = ...;\np1 = p2;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "person p1 = ...;\nperson p2 = ...;\np1 = p2;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522355481,
        "id": "b82079b6-78ad-47d8-829f-a636d19574b9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522355481,
        "parent_id": "48da2166-ee8f-454f-ae13-1ce34fbe9694",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "First, we copy-construct "
            ],
            [
              "rhs",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " from "
            ],
            [
              "p2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (which we didn’t have to duplicate here). If that operation throws, we don’t do anything in "
            ],
            [
              "operator=",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "p1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " remains untouched. Next, we swap the members between "
            ],
            [
              "*this",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "rhs",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", and then "
            ],
            [
              "rhs",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " goes out of scope. When "
            ],
            [
              "operator=",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", that implicitly cleans the original resources of "
            ],
            [
              "this",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (via the destructor, which we didn’t have to duplicate). Self-assignment works too - it’s less efficient with copy-and-swap (involves an extra allocation and deallocation), but if that’s the unlikely scenario, we don’t slow down the typical use case to account for it."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "First, we copy-construct "
          },
          {
            "Text": "rhs",
            "AttrFlags": 2
          },
          {
            "Text": " from "
          },
          {
            "Text": "p2",
            "AttrFlags": 2
          },
          {
            "Text": " (which we didn’t have to duplicate here). If that operation throws, we don’t do anything in "
          },
          {
            "Text": "operator=",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "p1",
            "AttrFlags": 2
          },
          {
            "Text": " remains untouched. Next, we swap the members between "
          },
          {
            "Text": "*this",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "rhs",
            "AttrFlags": 2
          },
          {
            "Text": ", and then "
          },
          {
            "Text": "rhs",
            "AttrFlags": 2
          },
          {
            "Text": " goes out of scope. When "
          },
          {
            "Text": "operator=",
            "AttrFlags": 2
          },
          {
            "Text": ", that implicitly cleans the original resources of "
          },
          {
            "Text": "this",
            "AttrFlags": 2
          },
          {
            "Text": " (via the destructor, which we didn’t have to duplicate). Self-assignment works too - it’s less efficient with copy-and-swap (involves an extra allocation and deallocation), but if that’s the unlikely scenario, we don’t slow down the typical use case to account for it."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522355481,
        "id": "64f0cb07-606a-4413-b830-578f8e4f843a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522355481,
        "parent_id": "48da2166-ee8f-454f-ae13-1ce34fbe9694",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The above formulation works as-is already for move assignment."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The above formulation works as-is already for move assignment."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522355481,
        "id": "6a837c1e-071a-48cf-8311-c8915ea3bb3f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522355481,
        "parent_id": "48da2166-ee8f-454f-ae13-1ce34fbe9694",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "p1 = std::move(p2);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "p1 = std::move(p2);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522355481,
        "id": "622b613e-e532-4473-bb41-27bcaf7b837a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522355481,
        "parent_id": "48da2166-ee8f-454f-ae13-1ce34fbe9694",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Here, we move-construct "
            ],
            [
              "rhs",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " from "
            ],
            [
              "p2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", and all the rest is just as valid. If a class is movable but not copyable, there is no need to delete the copy-assignment, since this assignment operator will simply be ill-formed due to the deleted copy constructor."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Here, we move-construct "
          },
          {
            "Text": "rhs",
            "AttrFlags": 2
          },
          {
            "Text": " from "
          },
          {
            "Text": "p2",
            "AttrFlags": 2
          },
          {
            "Text": ", and all the rest is just as valid. If a class is movable but not copyable, there is no need to delete the copy-assignment, since this assignment operator will simply be ill-formed due to the deleted copy constructor."
          }
        ]
      }
    ],
    "title": "Copy and swap",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}