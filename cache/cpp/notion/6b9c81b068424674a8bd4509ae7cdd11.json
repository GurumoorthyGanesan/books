{
  "ID": "6b9c81b0-6842-4674-a8bd-4509ae7cdd11",
  "Root": {
    "alive": true,
    "content": [
      "7cfcd38c-f84f-488e-9cb7-19bc3f1dd192",
      "6cc267a8-ad92-49da-9ee0-e6e0f77e3483",
      "5c97adab-5b65-441f-b78c-71bcb52b1443",
      "6ce136bc-bf54-4731-8a81-a777492c9844",
      "4d81da64-d9cd-437a-885a-fbd5b76ebdc5",
      "d9ab5556-1e70-419d-bc59-41f22d052e5a",
      "6a24a71a-60ee-4228-8ca6-fca6f05afeb4",
      "cd061ea6-c986-4693-9bf4-c2040f85610c",
      "1a4d2b4d-20fd-4afd-97b7-539ebcead2da",
      "2f4614d5-4071-4c30-8f28-f9ac290d0dfe",
      "887bd2ed-db9f-4797-b863-6233018cf073",
      "0640616b-cd80-4636-b4c8-fd3f6bc2ecdd",
      "9004168d-31bf-4093-99b2-e454ca841bdc",
      "cc243a09-234c-4cb7-8930-c3fb8b4b81cb",
      "ae9fe906-6bc5-4d8a-8599-356db45843e2",
      "ab1d9b6f-bbc4-4558-889c-718b42a55af4",
      "21ca608c-d570-4b75-b96e-3d406dd426c5",
      "f4af884a-5c3a-4069-8929-cb9b79f978a5",
      "76d60aad-9445-4eb8-9ecd-bb312b87a466",
      "9d6c7634-c777-4716-ad35-c379eeadc300",
      "2336387d-a634-4fa2-bf39-8af25d59e656",
      "1bd14c4c-5a94-449d-a23d-cfa99a902fcd",
      "efb1997e-d7eb-4ea4-a1d7-7e34aaf6059b",
      "2a7c554a-f2a1-475b-8b67-cf534f0b1d89",
      "027fd710-d19c-4d01-9f2d-344396e918e7",
      "b1236412-b9ee-4074-934e-fc7cd4027dd2",
      "1cfc834f-8ab9-42f2-a835-6450a0e8dd14",
      "641db8da-432b-487a-b4ef-2264b2dee8bb",
      "44ac7c7a-6242-42f1-a7fe-801a0c2919ef",
      "bad537e5-887b-4975-9510-3407c7da37fb",
      "f6a89972-0838-4bee-a978-3ab67a8ca053",
      "f20de06a-070e-4d6f-b727-87e50fd25417",
      "ca845c0a-f8a5-43a2-9b68-4d2b5df260c4",
      "51df3314-fbc4-4497-a87a-30fffa98e1fa"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522076679,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "6b9c81b0-6842-4674-a8bd-4509ae7cdd11",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550655540000,
    "parent_id": "ee10cf45-84c7-467c-8068-ea9076a2401a",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "For loop"
        ]
      ]
    },
    "type": "page",
    "version": 9,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522076667,
        "id": "7cfcd38c-f84f-488e-9cb7-19bc3f1dd192",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522076667,
        "parent_id": "6b9c81b0-6842-4674-a8bd-4509ae7cdd11",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A "
            ],
            [
              "for",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " loop executes statements in the "
            ],
            [
              "loop body",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", while the loop "
            ],
            [
              "condition",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is true. Before the loop "
            ],
            [
              "initialization statement",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is executed exactly once. After each cycle, the "
            ],
            [
              "iteration execution",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " part is executed."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A "
          },
          {
            "Text": "for",
            "AttrFlags": 2
          },
          {
            "Text": " loop executes statements in the "
          },
          {
            "Text": "loop body",
            "AttrFlags": 2
          },
          {
            "Text": ", while the loop "
          },
          {
            "Text": "condition",
            "AttrFlags": 2
          },
          {
            "Text": " is true. Before the loop "
          },
          {
            "Text": "initialization statement",
            "AttrFlags": 2
          },
          {
            "Text": " is executed exactly once. After each cycle, the "
          },
          {
            "Text": "iteration execution",
            "AttrFlags": 2
          },
          {
            "Text": " part is executed."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522076671,
        "id": "6cc267a8-ad92-49da-9ee0-e6e0f77e3483",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522076671,
        "parent_id": "6b9c81b0-6842-4674-a8bd-4509ae7cdd11",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A "
            ],
            [
              "for",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " loop is defined as follows:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A "
          },
          {
            "Text": "for",
            "AttrFlags": 2
          },
          {
            "Text": " loop is defined as follows:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522076671,
        "id": "5c97adab-5b65-441f-b78c-71bcb52b1443",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522076671,
        "parent_id": "6b9c81b0-6842-4674-a8bd-4509ae7cdd11",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "for (/*initialization statement*/; /*condition*/; /*iteration execution*/)\n{\n    // body of the loop\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "for (/*initialization statement*/; /*condition*/; /*iteration execution*/)\n{\n    // body of the loop\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522076671,
        "id": "6ce136bc-bf54-4731-8a81-a777492c9844",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522076671,
        "parent_id": "6b9c81b0-6842-4674-a8bd-4509ae7cdd11",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Explanation of the placeholder statements:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Explanation of the placeholder statements:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522076672,
        "id": "4d81da64-d9cd-437a-885a-fbd5b76ebdc5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522076672,
        "parent_id": "6b9c81b0-6842-4674-a8bd-4509ae7cdd11",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "initialization statement",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ": This statement gets executed only once, at the beginning of the "
            ],
            [
              "for",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " loop. You can enter a declaration of multiple variables of one type, such as "
            ],
            [
              "int i = 0, a = 2, b = 3",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". These variables are only valid in the scope of the loop. Variables defined before the loop with the same name are hidden during execution of the loop."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "initialization statement",
            "AttrFlags": 2
          },
          {
            "Text": ": This statement gets executed only once, at the beginning of the "
          },
          {
            "Text": "for",
            "AttrFlags": 2
          },
          {
            "Text": " loop. You can enter a declaration of multiple variables of one type, such as "
          },
          {
            "Text": "int i = 0, a = 2, b = 3",
            "AttrFlags": 2
          },
          {
            "Text": ". These variables are only valid in the scope of the loop. Variables defined before the loop with the same name are hidden during execution of the loop."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522076672,
        "id": "d9ab5556-1e70-419d-bc59-41f22d052e5a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522076672,
        "parent_id": "6b9c81b0-6842-4674-a8bd-4509ae7cdd11",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "condition",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ": This statement gets evaluated ahead of each "
            ],
            [
              "loop body",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " execution, and aborts the loop if it evaluates to "
            ],
            [
              "false",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "condition",
            "AttrFlags": 2
          },
          {
            "Text": ": This statement gets evaluated ahead of each "
          },
          {
            "Text": "loop body",
            "AttrFlags": 4
          },
          {
            "Text": " execution, and aborts the loop if it evaluates to "
          },
          {
            "Text": "false",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522076673,
        "id": "6a24a71a-60ee-4228-8ca6-fca6f05afeb4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522076673,
        "parent_id": "6b9c81b0-6842-4674-a8bd-4509ae7cdd11",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "iteration execution",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ": This statement gets executed after the loop "
            ],
            [
              "body",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ", ahead of the next "
            ],
            [
              "condition",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " evaluation, unless the "
            ],
            [
              "for",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " loop is aborted in the "
            ],
            [
              "body",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " (by "
            ],
            [
              "break",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "goto",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "return",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or an exception being thrown). You can enter multiple statements in the "
            ],
            [
              "iteration execution",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " part, such as "
            ],
            [
              "a++, b+=10, c=b+a",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "iteration execution",
            "AttrFlags": 2
          },
          {
            "Text": ": This statement gets executed after the loop "
          },
          {
            "Text": "body",
            "AttrFlags": 4
          },
          {
            "Text": ", ahead of the next "
          },
          {
            "Text": "condition",
            "AttrFlags": 4
          },
          {
            "Text": " evaluation, unless the "
          },
          {
            "Text": "for",
            "AttrFlags": 2
          },
          {
            "Text": " loop is aborted in the "
          },
          {
            "Text": "body",
            "AttrFlags": 4
          },
          {
            "Text": " (by "
          },
          {
            "Text": "break",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "goto",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "return",
            "AttrFlags": 2
          },
          {
            "Text": " or an exception being thrown). You can enter multiple statements in the "
          },
          {
            "Text": "iteration execution",
            "AttrFlags": 2
          },
          {
            "Text": " part, such as "
          },
          {
            "Text": "a++, b+=10, c=b+a",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522076673,
        "id": "cd061ea6-c986-4693-9bf4-c2040f85610c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522076673,
        "parent_id": "6b9c81b0-6842-4674-a8bd-4509ae7cdd11",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The rough equivalent of a "
            ],
            [
              "for",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " loop, rewritten as a "
            ],
            [
              "while",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " loop is:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The rough equivalent of a "
          },
          {
            "Text": "for",
            "AttrFlags": 2
          },
          {
            "Text": " loop, rewritten as a "
          },
          {
            "Text": "while",
            "AttrFlags": 2
          },
          {
            "Text": " loop is:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522076673,
        "id": "1a4d2b4d-20fd-4afd-97b7-539ebcead2da",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522076673,
        "parent_id": "6b9c81b0-6842-4674-a8bd-4509ae7cdd11",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "/*initialization*/\nwhile (/*condition*/)\n{\n    // body of the loop; using 'continue' will skip to increment part below\n    /*iteration execution*/\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "/*initialization*/\nwhile (/*condition*/)\n{\n    // body of the loop; using 'continue' will skip to increment part below\n    /*iteration execution*/\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522076674,
        "id": "2f4614d5-4071-4c30-8f28-f9ac290d0dfe",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522076674,
        "parent_id": "6b9c81b0-6842-4674-a8bd-4509ae7cdd11",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The most common case for using a "
            ],
            [
              "for",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " loop is to execute statements a specific number of times. For example, consider the following:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The most common case for using a "
          },
          {
            "Text": "for",
            "AttrFlags": 2
          },
          {
            "Text": " loop is to execute statements a specific number of times. For example, consider the following:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522076674,
        "id": "887bd2ed-db9f-4797-b863-6233018cf073",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522076674,
        "parent_id": "6b9c81b0-6842-4674-a8bd-4509ae7cdd11",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "for(int i = 0; i \u003c 10; i++) {\n    std::cout \u003c\u003c i \u003c\u003c std::endl;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "for(int i = 0; i \u003c 10; i++) {\n    std::cout \u003c\u003c i \u003c\u003c std::endl;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522076674,
        "id": "0640616b-cd80-4636-b4c8-fd3f6bc2ecdd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522076674,
        "parent_id": "6b9c81b0-6842-4674-a8bd-4509ae7cdd11",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A valid loop is also:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A valid loop is also:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522076674,
        "id": "9004168d-31bf-4093-99b2-e454ca841bdc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522076674,
        "parent_id": "6b9c81b0-6842-4674-a8bd-4509ae7cdd11",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "for(int a = 0, b = 10, c = 20; (a+b+c \u003c 100); c--, b++, a+=c) {\n    std::cout \u003c\u003c a \u003c\u003c \" \" \u003c\u003c b \u003c\u003c \" \" \u003c\u003c c \u003c\u003c std::endl; \n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "for(int a = 0, b = 10, c = 20; (a+b+c \u003c 100); c--, b++, a+=c) {\n    std::cout \u003c\u003c a \u003c\u003c \" \" \u003c\u003c b \u003c\u003c \" \" \u003c\u003c c \u003c\u003c std::endl; \n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522076674,
        "id": "cc243a09-234c-4cb7-8930-c3fb8b4b81cb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522076674,
        "parent_id": "6b9c81b0-6842-4674-a8bd-4509ae7cdd11",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "An example of hiding declared variables before a loop is:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "An example of hiding declared variables before a loop is:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522076674,
        "id": "ae9fe906-6bc5-4d8a-8599-356db45843e2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522076674,
        "parent_id": "6b9c81b0-6842-4674-a8bd-4509ae7cdd11",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int i = 99; //i = 99\nfor(int i = 0; i \u003c 10; i++) { //we declare a new variable i\n    //some operations, the value of i ranges from 0 to 9 during loop execution\n}\n//after the loop is executed, we can access i with value of 99"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int i = 99; //i = 99\nfor(int i = 0; i \u003c 10; i++) { //we declare a new variable i\n    //some operations, the value of i ranges from 0 to 9 during loop execution\n}\n//after the loop is executed, we can access i with value of 99",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522076674,
        "id": "ab1d9b6f-bbc4-4558-889c-718b42a55af4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522076674,
        "parent_id": "6b9c81b0-6842-4674-a8bd-4509ae7cdd11",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "But if you want to use the already declared variable and not hide it, then omit the declaration part:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "But if you want to use the already declared variable and not hide it, then omit the declaration part:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522076674,
        "id": "21ca608c-d570-4b75-b96e-3d406dd426c5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522076674,
        "parent_id": "6b9c81b0-6842-4674-a8bd-4509ae7cdd11",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int i = 99; //i = 99\nfor(i = 0; i \u003c 10; i++) { //we are using already declared variable i\n    //some operations, the value of i ranges from 0 to 9 during loop execution\n}\n//after the loop is executed, we can access i with value of 10"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int i = 99; //i = 99\nfor(i = 0; i \u003c 10; i++) { //we are using already declared variable i\n    //some operations, the value of i ranges from 0 to 9 during loop execution\n}\n//after the loop is executed, we can access i with value of 10",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522076674,
        "id": "f4af884a-5c3a-4069-8929-cb9b79f978a5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522076674,
        "parent_id": "6b9c81b0-6842-4674-a8bd-4509ae7cdd11",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Notes:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Notes:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522076675,
        "id": "76d60aad-9445-4eb8-9ecd-bb312b87a466",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522076675,
        "parent_id": "6b9c81b0-6842-4674-a8bd-4509ae7cdd11",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The initialization and increment statements can perform operations unrelated to the condition statement, or nothing at all - if you wish to do so. But for readability reasons, it is best practice to only perform operations directly relevant to the loop."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "The initialization and increment statements can perform operations unrelated to the condition statement, or nothing at all - if you wish to do so. But for readability reasons, it is best practice to only perform operations directly relevant to the loop."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522076675,
        "id": "9d6c7634-c777-4716-ad35-c379eeadc300",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522076675,
        "parent_id": "6b9c81b0-6842-4674-a8bd-4509ae7cdd11",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A variable declared in the initialization statement is visible only inside the scope of the "
            ],
            [
              "for",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " loop and is released upon termination of the loop."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "A variable declared in the initialization statement is visible only inside the scope of the "
          },
          {
            "Text": "for",
            "AttrFlags": 2
          },
          {
            "Text": " loop and is released upon termination of the loop."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522076676,
        "id": "2336387d-a634-4fa2-bf39-8af25d59e656",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522076676,
        "parent_id": "6b9c81b0-6842-4674-a8bd-4509ae7cdd11",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Don’t forget that the variable which was declared in the "
            ],
            [
              "initialization statement",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can be modified during the loop, as well as the variable checked in the "
            ],
            [
              "condition",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Don’t forget that the variable which was declared in the "
          },
          {
            "Text": "initialization statement",
            "AttrFlags": 2
          },
          {
            "Text": " can be modified during the loop, as well as the variable checked in the "
          },
          {
            "Text": "condition",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522076676,
        "id": "1bd14c4c-5a94-449d-a23d-cfa99a902fcd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522076676,
        "parent_id": "6b9c81b0-6842-4674-a8bd-4509ae7cdd11",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Example of a loop which counts from 0 to 10:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Example of a loop which counts from 0 to 10:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522076676,
        "id": "efb1997e-d7eb-4ea4-a1d7-7e34aaf6059b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522076676,
        "parent_id": "6b9c81b0-6842-4674-a8bd-4509ae7cdd11",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "for (int counter = 0; counter \u003c= 10; ++counter)\n{\n    std::cout \u003c\u003c counter \u003c\u003c '\\n';\n}\n// counter is not accessible here (had value 11 at the end)"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "for (int counter = 0; counter \u003c= 10; ++counter)\n{\n    std::cout \u003c\u003c counter \u003c\u003c '\\n';\n}\n// counter is not accessible here (had value 11 at the end)",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522076676,
        "id": "2a7c554a-f2a1-475b-8b67-cf534f0b1d89",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522076676,
        "parent_id": "6b9c81b0-6842-4674-a8bd-4509ae7cdd11",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Explanation of the code fragments:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Explanation of the code fragments:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522076677,
        "id": "027fd710-d19c-4d01-9f2d-344396e918e7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522076677,
        "parent_id": "6b9c81b0-6842-4674-a8bd-4509ae7cdd11",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "int counter = 0",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " initializes the variable "
            ],
            [
              "counter",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to 0. (This variable can only be used inside of the "
            ],
            [
              "for",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " loop.)"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "int counter = 0",
            "AttrFlags": 2
          },
          {
            "Text": " initializes the variable "
          },
          {
            "Text": "counter",
            "AttrFlags": 2
          },
          {
            "Text": " to 0. (This variable can only be used inside of the "
          },
          {
            "Text": "for",
            "AttrFlags": 2
          },
          {
            "Text": " loop.)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522076677,
        "id": "b1236412-b9ee-4074-934e-fc7cd4027dd2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522076677,
        "parent_id": "6b9c81b0-6842-4674-a8bd-4509ae7cdd11",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "counter \u003c= 10",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is a Boolean condition that checks whether "
            ],
            [
              "counter",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is less than or equal to 10. If it is "
            ],
            [
              "true",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", the loop executes. If it is "
            ],
            [
              "false",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", the loop ends."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "counter \u003c= 10",
            "AttrFlags": 2
          },
          {
            "Text": " is a Boolean condition that checks whether "
          },
          {
            "Text": "counter",
            "AttrFlags": 2
          },
          {
            "Text": " is less than or equal to 10. If it is "
          },
          {
            "Text": "true",
            "AttrFlags": 2
          },
          {
            "Text": ", the loop executes. If it is "
          },
          {
            "Text": "false",
            "AttrFlags": 2
          },
          {
            "Text": ", the loop ends."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522076677,
        "id": "1cfc834f-8ab9-42f2-a835-6450a0e8dd14",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522076677,
        "parent_id": "6b9c81b0-6842-4674-a8bd-4509ae7cdd11",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "++counter",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is an increment operation that increments the value of "
            ],
            [
              "counter",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " by 1 ahead of the next condition check."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "++counter",
            "AttrFlags": 2
          },
          {
            "Text": " is an increment operation that increments the value of "
          },
          {
            "Text": "counter",
            "AttrFlags": 2
          },
          {
            "Text": " by 1 ahead of the next condition check."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522076677,
        "id": "641db8da-432b-487a-b4ef-2264b2dee8bb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522076677,
        "parent_id": "6b9c81b0-6842-4674-a8bd-4509ae7cdd11",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "By leaving all statements empty, you can create an infinite loop:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "By leaving all statements empty, you can create an infinite loop:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522076678,
        "id": "44ac7c7a-6242-42f1-a7fe-801a0c2919ef",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522076678,
        "parent_id": "6b9c81b0-6842-4674-a8bd-4509ae7cdd11",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// infinite loop\nfor (;;)\n    std::cout \u003c\u003c \"Never ending!\\n\";"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// infinite loop\nfor (;;)\n    std::cout \u003c\u003c \"Never ending!\\n\";",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522076678,
        "id": "bad537e5-887b-4975-9510-3407c7da37fb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522076678,
        "parent_id": "6b9c81b0-6842-4674-a8bd-4509ae7cdd11",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "while",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " loop equivalent of the above is:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "while",
            "AttrFlags": 2
          },
          {
            "Text": " loop equivalent of the above is:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522076678,
        "id": "f6a89972-0838-4bee-a978-3ab67a8ca053",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522076678,
        "parent_id": "6b9c81b0-6842-4674-a8bd-4509ae7cdd11",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// infinite loop\nwhile (true)\n    std::cout \u003c\u003c \"Never ending!\\n\";"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// infinite loop\nwhile (true)\n    std::cout \u003c\u003c \"Never ending!\\n\";",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522076678,
        "id": "f20de06a-070e-4d6f-b727-87e50fd25417",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522076678,
        "parent_id": "6b9c81b0-6842-4674-a8bd-4509ae7cdd11",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "However, an infinite loop can still be left by using the statements "
            ],
            [
              "break",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "goto",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", or "
            ],
            [
              "return",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or by throwing an exception."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "However, an infinite loop can still be left by using the statements "
          },
          {
            "Text": "break",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "goto",
            "AttrFlags": 2
          },
          {
            "Text": ", or "
          },
          {
            "Text": "return",
            "AttrFlags": 2
          },
          {
            "Text": " or by throwing an exception."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522076678,
        "id": "ca845c0a-f8a5-43a2-9b68-4d2b5df260c4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522076678,
        "parent_id": "6b9c81b0-6842-4674-a8bd-4509ae7cdd11",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The next common example of iterating over all elements from an STL collection (e.g., a "
            ],
            [
              "vector",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") without using the "
            ],
            [
              "\u003calgorithm\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " header is:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The next common example of iterating over all elements from an STL collection (e.g., a "
          },
          {
            "Text": "vector",
            "AttrFlags": 2
          },
          {
            "Text": ") without using the "
          },
          {
            "Text": "\u003calgorithm\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " header is:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522076679,
        "id": "51df3314-fbc4-4497-a87a-30fffa98e1fa",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522076679,
        "parent_id": "6b9c81b0-6842-4674-a8bd-4509ae7cdd11",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "std::vector\u003cstd::string\u003e names = {\"Albert Einstein\", \"Stephen Hawking\", \"Michael Ellis\"};\nfor(std::vector\u003cstd::string\u003e::iterator it = names.begin(); it != names.end(); ++it) {\n    std::cout \u003c\u003c *it \u003c\u003c std::endl;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "std::vector\u003cstd::string\u003e names = {\"Albert Einstein\", \"Stephen Hawking\", \"Michael Ellis\"};\nfor(std::vector\u003cstd::string\u003e::iterator it = names.begin(); it != names.end(); ++it) {\n    std::cout \u003c\u003c *it \u003c\u003c std::endl;\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "For loop",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}