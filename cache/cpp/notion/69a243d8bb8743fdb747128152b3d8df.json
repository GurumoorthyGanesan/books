{
  "ID": "69a243d8-bb87-43fd-b747-128152b3d8df",
  "Root": {
    "alive": true,
    "content": [
      "246f89f4-c5fe-4fc9-b579-87e3f85860b9",
      "de8223fe-1bd7-4950-87d7-b15520dc6dec",
      "de9357cd-57c8-45c5-b371-2fadd9561736",
      "9c7db991-bca8-4d9a-b46e-38f4b2310e41"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522001484,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "69a243d8-bb87-43fd-b747-128152b3d8df",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552304100000,
    "parent_id": "b886ff5d-614b-4aa9-9e99-851b7998439b",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Converting between character encodings"
        ]
      ]
    },
    "type": "page",
    "version": 5,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522001479,
        "id": "246f89f4-c5fe-4fc9-b579-87e3f85860b9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522001479,
        "parent_id": "69a243d8-bb87-43fd-b747-128152b3d8df",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Converting between encodings is easy with C++11 and most compilers are able to deal with it in a cross-platform manner through "
            ],
            [
              "\u003ccodecvt\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "\u003clocale\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " headers."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Converting between encodings is easy with C++11 and most compilers are able to deal with it in a cross-platform manner through "
          },
          {
            "Text": "\u003ccodecvt\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "\u003clocale\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " headers."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522001482,
        "id": "de8223fe-1bd7-4950-87d7-b15520dc6dec",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552304100000,
        "parent_id": "69a243d8-bb87-43fd-b747-128152b3d8df",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "#include \u003ciostream\u003e\n#include \u003ccodecvt\u003e\n#include \u003clocale\u003e\n#include \u003cstring\u003e\nusing namespace std;\n\nint main() {\n    // converts between wstring and utf8 string\n    wstring_convert\u003ccodecvt_utf8_utf16\u003cwchar_t\u003e\u003e wchar_to_utf8;\n    // converts between u16string and utf8 string\n    wstring_convert\u003ccodecvt_utf8_utf16\u003cchar16_t\u003e, char16_t\u003e utf16_to_utf8;\n    \n    wstring wstr = L\"foobar\";\n    string utf8str = wchar_to_utf8.to_bytes(wstr);\n    wstring wstr2 = wchar_to_utf8.from_bytes(utf8str);\n    \n    wcout \u003c\u003c wstr \u003c\u003c endl;\n    cout \u003c\u003c utf8str \u003c\u003c endl;\n    wcout \u003c\u003c wstr2 \u003c\u003c endl;\n    \n    u16string u16str = u\"foobar\";\n    string utf8str2 = utf16_to_utf8.to_bytes(u16str);\n    u16string u16str2 = utf16_to_utf8.from_bytes(utf8str2);\n    \n    return 0;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "#include \u003ciostream\u003e\n#include \u003ccodecvt\u003e\n#include \u003clocale\u003e\n#include \u003cstring\u003e\nusing namespace std;\n\nint main() {\n    // converts between wstring and utf8 string\n    wstring_convert\u003ccodecvt_utf8_utf16\u003cwchar_t\u003e\u003e wchar_to_utf8;\n    // converts between u16string and utf8 string\n    wstring_convert\u003ccodecvt_utf8_utf16\u003cchar16_t\u003e, char16_t\u003e utf16_to_utf8;\n    \n    wstring wstr = L\"foobar\";\n    string utf8str = wchar_to_utf8.to_bytes(wstr);\n    wstring wstr2 = wchar_to_utf8.from_bytes(utf8str);\n    \n    wcout \u003c\u003c wstr \u003c\u003c endl;\n    cout \u003c\u003c utf8str \u003c\u003c endl;\n    wcout \u003c\u003c wstr2 \u003c\u003c endl;\n    \n    u16string u16str = u\"foobar\";\n    string utf8str2 = utf16_to_utf8.to_bytes(u16str);\n    u16string u16str2 = utf16_to_utf8.from_bytes(utf8str2);\n    \n    return 0;\n}",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522001484,
        "id": "de9357cd-57c8-45c5-b371-2fadd9561736",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522001484,
        "parent_id": "69a243d8-bb87-43fd-b747-128152b3d8df",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Mind that Visual Studio 2015 provides supports for these conversion but a "
            ],
            [
              "bug",
              [
                [
                  "a",
                  "https://social.msdn.microsoft.com/Forums/vstudio/en-US/8f40dcd8-c67f-4eba-9134-a19b9178e481/vs-2015-rc-linker-stdcodecvt-error?forum=vcgeneral"
                ]
              ]
            ],
            [
              " in their library implementation requires to use a different template for "
            ],
            [
              "wstring_convert",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " when dealing with "
            ],
            [
              "char16_t",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Mind that Visual Studio 2015 provides supports for these conversion but a "
          },
          {
            "Text": "bug",
            "Link": "https://social.msdn.microsoft.com/Forums/vstudio/en-US/8f40dcd8-c67f-4eba-9134-a19b9178e481/vs-2015-rc-linker-stdcodecvt-error?forum=vcgeneral"
          },
          {
            "Text": " in their library implementation requires to use a different template for "
          },
          {
            "Text": "wstring_convert",
            "AttrFlags": 2
          },
          {
            "Text": " when dealing with "
          },
          {
            "Text": "char16_t",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522001484,
        "id": "9c7db991-bca8-4d9a-b46e-38f4b2310e41",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552304100000,
        "parent_id": "69a243d8-bb87-43fd-b747-128152b3d8df",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "using utf16_char = unsigned short;\nwstring_convert\u003ccodecvt_utf8_utf16\u003cutf16_char\u003e, utf16_char\u003e conv_utf8_utf16;\n\nvoid strings::utf16_to_utf8(const std::u16string\u0026 utf16, std::string\u0026 utf8)\n{\n  std::basic_string\u003cutf16_char\u003e tmp;\n  tmp.resize(utf16.length());\n  std::copy(utf16.begin(), utf16.end(), tmp.begin());\n  utf8 = conv_utf8_utf16.to_bytes(tmp);\n}\nvoid strings::utf8_to_utf16(const std::string\u0026 utf8, std::u16string\u0026 utf16)\n{ \n  std::basic_string\u003cutf16_char\u003e tmp = conv_utf8_utf16.from_bytes(utf8);\n  utf16.clear();\n  utf16.resize(tmp.length());\n  std::copy(tmp.begin(), tmp.end(), utf16.begin());\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "using utf16_char = unsigned short;\nwstring_convert\u003ccodecvt_utf8_utf16\u003cutf16_char\u003e, utf16_char\u003e conv_utf8_utf16;\n\nvoid strings::utf16_to_utf8(const std::u16string\u0026 utf16, std::string\u0026 utf8)\n{\n  std::basic_string\u003cutf16_char\u003e tmp;\n  tmp.resize(utf16.length());\n  std::copy(utf16.begin(), utf16.end(), tmp.begin());\n  utf8 = conv_utf8_utf16.to_bytes(tmp);\n}\nvoid strings::utf8_to_utf16(const std::string\u0026 utf8, std::u16string\u0026 utf16)\n{ \n  std::basic_string\u003cutf16_char\u003e tmp = conv_utf8_utf16.from_bytes(utf8);\n  utf16.clear();\n  utf16.resize(tmp.length());\n  std::copy(tmp.begin(), tmp.end(), utf16.begin());\n}",
        "code_language": "C++"
      }
    ],
    "title": "Converting between character encodings",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}