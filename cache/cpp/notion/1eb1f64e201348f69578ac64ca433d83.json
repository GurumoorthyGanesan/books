{
  "ID": "1eb1f64e-2013-48f6-9578-ac64ca433d83",
  "Root": {
    "alive": true,
    "content": [
      "61505621-ea93-449f-b537-71d1b408a7fe",
      "7ebb0acb-4138-48a9-ab06-6080340eb531",
      "0a55bc91-7533-4274-b899-7bc0387e4d58",
      "89754bbd-2fd7-4d69-9807-9fe6e4c38d8f",
      "30a67323-d7ac-4a3f-88cd-45d60865fc27",
      "e0564d74-fcfc-4d24-a3fa-fb7923636529",
      "8f0f5693-342e-42e3-a9fc-290d17de6b6b",
      "f943d1a5-9533-4562-8daa-893d796062a1",
      "41b2b916-0ab5-4b49-bfff-c04e0f16e5cc",
      "00472f1e-6ba0-4f7b-a88a-136fd3b502e3",
      "32d9edbe-251d-4d8a-8bee-70f8c7e26f01",
      "e5fda5f4-c7b6-402b-a652-b867ea012b91",
      "84d27cf5-7ace-4f1a-bfbe-b41752272219",
      "42cf1813-abf8-482f-9a31-54475878215c",
      "08153b58-8277-47de-a974-1f79ebc0d5a0"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550524705650,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "1eb1f64e-2013-48f6-9578-ac64ca433d83",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551688647928,
    "parent_id": "29483c03-d3f3-426c-bd91-6dba06c1c86f",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Auto Type Deduction"
        ]
      ]
    },
    "type": "page",
    "version": 4,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524705645,
        "id": "61505621-ea93-449f-b537-71d1b408a7fe",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524705645,
        "parent_id": "1eb1f64e-2013-48f6-9578-ac64ca433d83",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Type deduction using the "
            ],
            [
              "auto",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "keyword",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%2B%2B/4891/keywords"
                ]
              ]
            ],
            [
              " works almost the same as Template Type Deduction. Below are a few examples:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Type deduction using the "
          },
          {
            "Text": "auto",
            "AttrFlags": 2
          },
          {
            "Text": " "
          },
          {
            "Text": "keyword",
            "Link": "http://stackoverflow.com/documentation/c%2B%2B/4891/keywords"
          },
          {
            "Text": " works almost the same as Template Type Deduction. Below are a few examples:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524705646,
        "id": "7ebb0acb-4138-48a9-ab06-6080340eb531",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524705646,
        "parent_id": "1eb1f64e-2013-48f6-9578-ac64ca433d83",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "auto x = 27;           // (x is neither a pointer nor a reference), x's type is int\nconst auto cx = x;     // (cx is neither a pointer nor a reference), cs's type is const int\nconst auto\u0026 rx = x;    // (rx is a non-universal reference), rx's type is a reference to a const int\n\nauto\u0026\u0026 uref1 = x;      // x is int and lvalue, so uref1's type is int\u0026\nauto\u0026\u0026 uref2 = cx;     // cx is const int and lvalue, so uref2's type is const int \u0026\nauto\u0026\u0026 uref3 = 27;     // 27 is an int and rvalue, so uref3's type is int\u0026\u0026"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "auto x = 27;           // (x is neither a pointer nor a reference), x's type is int\nconst auto cx = x;     // (cx is neither a pointer nor a reference), cs's type is const int\nconst auto\u0026 rx = x;    // (rx is a non-universal reference), rx's type is a reference to a const int\n\nauto\u0026\u0026 uref1 = x;      // x is int and lvalue, so uref1's type is int\u0026\nauto\u0026\u0026 uref2 = cx;     // cx is const int and lvalue, so uref2's type is const int \u0026\nauto\u0026\u0026 uref3 = 27;     // 27 is an int and rvalue, so uref3's type is int\u0026\u0026",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524705646,
        "id": "0a55bc91-7533-4274-b899-7bc0387e4d58",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524705646,
        "parent_id": "1eb1f64e-2013-48f6-9578-ac64ca433d83",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The differences are outlined below:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The differences are outlined below:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524705646,
        "id": "89754bbd-2fd7-4d69-9807-9fe6e4c38d8f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524705646,
        "parent_id": "1eb1f64e-2013-48f6-9578-ac64ca433d83",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "auto x1 = 27;          // type is int, value is 27\nauto x2(27);           // type is int, value is 27\nauto x3 = { 27 };      // type is std::initializer_list\u003cint\u003e, value is { 27 }\nauto x4{ 27 };         // type is std::initializer_list\u003cint\u003e, value is { 27 }\n                       // in some compilers type may be deduced as an int with a \n                       // value of 27. See remarks for more information.\nauto x5 = { 1, 2.0 }   // error! can't deduce T for std::initializer_list\u003ct\u003e"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "auto x1 = 27;          // type is int, value is 27\nauto x2(27);           // type is int, value is 27\nauto x3 = { 27 };      // type is std::initializer_list\u003cint\u003e, value is { 27 }\nauto x4{ 27 };         // type is std::initializer_list\u003cint\u003e, value is { 27 }\n                       // in some compilers type may be deduced as an int with a \n                       // value of 27. See remarks for more information.\nauto x5 = { 1, 2.0 }   // error! can't deduce T for std::initializer_list\u003ct\u003e",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524705647,
        "id": "30a67323-d7ac-4a3f-88cd-45d60865fc27",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524705647,
        "parent_id": "1eb1f64e-2013-48f6-9578-ac64ca433d83",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As you can see if you use braced initializers, auto is forced into creating a variable of type "
            ],
            [
              "std::initializer_list\u003cT\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". If it can’t deduce the of "
            ],
            [
              "T",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", the code is rejected."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "As you can see if you use braced initializers, auto is forced into creating a variable of type "
          },
          {
            "Text": "std::initializer_list\u003cT\u003e",
            "AttrFlags": 2
          },
          {
            "Text": ". If it can’t deduce the of "
          },
          {
            "Text": "T",
            "AttrFlags": 2
          },
          {
            "Text": ", the code is rejected."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524705647,
        "id": "e0564d74-fcfc-4d24-a3fa-fb7923636529",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524705647,
        "parent_id": "1eb1f64e-2013-48f6-9578-ac64ca433d83",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When "
            ],
            [
              "auto",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is used as the return type of a function, it specifies that the function has a "
            ],
            [
              "trailing return type",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%2B%2B/4142/trailing-return-type"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When "
          },
          {
            "Text": "auto",
            "AttrFlags": 2
          },
          {
            "Text": " is used as the return type of a function, it specifies that the function has a "
          },
          {
            "Text": "trailing return type",
            "Link": "http://stackoverflow.com/documentation/c%2B%2B/4142/trailing-return-type"
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524705647,
        "id": "8f0f5693-342e-42e3-a9fc-290d17de6b6b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524705647,
        "parent_id": "1eb1f64e-2013-48f6-9578-ac64ca433d83",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "auto f() -\u003e int {\n    return 42;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "auto f() -\u003e int {\n    return 42;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524705647,
        "id": "f943d1a5-9533-4562-8daa-893d796062a1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524705647,
        "parent_id": "1eb1f64e-2013-48f6-9578-ac64ca433d83",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "C++14 allows, in addition to the usages of auto allowed in C++11, the following:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "C++14 allows, in addition to the usages of auto allowed in C++11, the following:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524705648,
        "id": "41b2b916-0ab5-4b49-bfff-c04e0f16e5cc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524705648,
        "parent_id": "1eb1f64e-2013-48f6-9578-ac64ca433d83",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When used as the return type of a function without a trailing return type, specifies that the function’s return type should be deduced from the return statements in the function’s body, if any."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "When used as the return type of a function without a trailing return type, specifies that the function’s return type should be deduced from the return statements in the function’s body, if any."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524705648,
        "id": "00472f1e-6ba0-4f7b-a88a-136fd3b502e3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524705648,
        "parent_id": "1eb1f64e-2013-48f6-9578-ac64ca433d83",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// f returns int:\nauto f() { return 42; }\n// g returns void:\nauto g() { std::cout \u003c\u003c \"hello, world!\\n\"; }"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// f returns int:\nauto f() { return 42; }\n// g returns void:\nauto g() { std::cout \u003c\u003c \"hello, world!\\n\"; }",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524705649,
        "id": "32d9edbe-251d-4d8a-8bee-70f8c7e26f01",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524705649,
        "parent_id": "1eb1f64e-2013-48f6-9578-ac64ca433d83",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When used in the parameter type of a lambda, defines the lambda to be a "
            ],
            [
              "generic lambda",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%2B%2B/572/lambdas/1969/generic-lambdas"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "When used in the parameter type of a lambda, defines the lambda to be a "
          },
          {
            "Text": "generic lambda",
            "Link": "http://stackoverflow.com/documentation/c%2B%2B/572/lambdas/1969/generic-lambdas"
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524705649,
        "id": "e5fda5f4-c7b6-402b-a652-b867ea012b91",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524705649,
        "parent_id": "1eb1f64e-2013-48f6-9578-ac64ca433d83",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "auto triple = [](auto x) { return 3*x; };\nconst auto x = triple(42); // x is a const int with value 126"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "auto triple = [](auto x) { return 3*x; };\nconst auto x = triple(42); // x is a const int with value 126",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524705649,
        "id": "84d27cf5-7ace-4f1a-bfbe-b41752272219",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524705649,
        "parent_id": "1eb1f64e-2013-48f6-9578-ac64ca433d83",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The special form "
            ],
            [
              "decltype(auto)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " deduces a type using the type deduction rules of "
            ],
            [
              "decltype",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " rather than those of "
            ],
            [
              "auto",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The special form "
          },
          {
            "Text": "decltype(auto)",
            "AttrFlags": 2
          },
          {
            "Text": " deduces a type using the type deduction rules of "
          },
          {
            "Text": "decltype",
            "AttrFlags": 2
          },
          {
            "Text": " rather than those of "
          },
          {
            "Text": "auto",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524705649,
        "id": "42cf1813-abf8-482f-9a31-54475878215c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524705649,
        "parent_id": "1eb1f64e-2013-48f6-9578-ac64ca433d83",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int* p = new int(42);\nauto x = *p;           // x has type int\ndecltype(auto) y = *p; // y is a reference to *p"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int* p = new int(42);\nauto x = *p;           // x has type int\ndecltype(auto) y = *p; // y is a reference to *p",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524705650,
        "id": "08153b58-8277-47de-a974-1f79ebc0d5a0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524705650,
        "parent_id": "1eb1f64e-2013-48f6-9578-ac64ca433d83",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In C++03 and earlier, the "
            ],
            [
              "auto",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " keyword had a completely different meaning as a "
            ],
            [
              "storage class specifier",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%2B%2B/9225/storage-class-specifiers/28629/auto"
                ]
              ]
            ],
            [
              " that was inherited from C."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In C++03 and earlier, the "
          },
          {
            "Text": "auto",
            "AttrFlags": 2
          },
          {
            "Text": " keyword had a completely different meaning as a "
          },
          {
            "Text": "storage class specifier",
            "Link": "http://stackoverflow.com/documentation/c%2B%2B/9225/storage-class-specifiers/28629/auto"
          },
          {
            "Text": " that was inherited from C."
          }
        ]
      }
    ],
    "title": "Auto Type Deduction",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}