{
  "ID": "a0d14351-9e82-45f5-b55f-74b3976ea99c",
  "Root": {
    "alive": true,
    "content": [
      "41af4b6b-4135-4817-9914-ec24b3631726",
      "07039207-3bcc-40cb-8d60-1720c185e4ae",
      "e129dac6-571c-40c6-b7ea-f632523ffc66",
      "9f176a83-d846-4463-8fe8-c825db1909f4",
      "5e088dbe-3a4f-44aa-b879-3495ce395451",
      "cbe9a0ca-94c4-4faa-9ada-22436cc040f9",
      "a91fa7fe-2a1c-4a2a-92a8-484a02783d04",
      "6d344700-892f-46bc-9eb6-aac4fa1c5978",
      "aa6ff3f6-e342-4acd-9588-9dc54581e204",
      "29548a47-7899-4db3-bc20-c3fde892b8c4",
      "faf2ae23-c169-4bc4-bbbb-f1ee3ed3e974",
      "27d43969-1026-4e24-abda-dd29afd77066"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550521959497,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "a0d14351-9e82-45f5-b55f-74b3976ea99c",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550656860000,
    "parent_id": "94bfa868-4e02-4b90-841b-817c34132524",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Non-type template parameter"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521959490,
        "id": "41af4b6b-4135-4817-9914-ec24b3631726",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521959490,
        "parent_id": "a0d14351-9e82-45f5-b55f-74b3976ea99c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Apart from types as a template parameter we are allowed to declare values of constant expressions meeting one of the following criteria:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Apart from types as a template parameter we are allowed to declare values of constant expressions meeting one of the following criteria:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521959493,
        "id": "07039207-3bcc-40cb-8d60-1720c185e4ae",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521959493,
        "parent_id": "a0d14351-9e82-45f5-b55f-74b3976ea99c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "integral or enumeration type,"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "integral or enumeration type,"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521959494,
        "id": "e129dac6-571c-40c6-b7ea-f632523ffc66",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521959494,
        "parent_id": "a0d14351-9e82-45f5-b55f-74b3976ea99c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "pointer to object or pointer to function,"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "pointer to object or pointer to function,"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521959494,
        "id": "9f176a83-d846-4463-8fe8-c825db1909f4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521959494,
        "parent_id": "a0d14351-9e82-45f5-b55f-74b3976ea99c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "lvalue reference to object or lvalue reference to function,"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "lvalue reference to object or lvalue reference to function,"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521959494,
        "id": "5e088dbe-3a4f-44aa-b879-3495ce395451",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521959494,
        "parent_id": "a0d14351-9e82-45f5-b55f-74b3976ea99c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "pointer to member,"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "pointer to member,"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521959495,
        "id": "cbe9a0ca-94c4-4faa-9ada-22436cc040f9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521959495,
        "parent_id": "a0d14351-9e82-45f5-b55f-74b3976ea99c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "std::nullptr_t",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "std::nullptr_t",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521959495,
        "id": "a91fa7fe-2a1c-4a2a-92a8-484a02783d04",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521959495,
        "parent_id": "a0d14351-9e82-45f5-b55f-74b3976ea99c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Like all template parameters, non-type template parameters can be explicitly specified, defaulted, or derived implicitly via Template Argument Deduction."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Like all template parameters, non-type template parameters can be explicitly specified, defaulted, or derived implicitly via Template Argument Deduction."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521959495,
        "id": "6d344700-892f-46bc-9eb6-aac4fa1c5978",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521959495,
        "parent_id": "a0d14351-9e82-45f5-b55f-74b3976ea99c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Example of non-type template parameter usage:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Example of non-type template parameter usage:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521959495,
        "id": "aa6ff3f6-e342-4acd-9588-9dc54581e204",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521959495,
        "parent_id": "a0d14351-9e82-45f5-b55f-74b3976ea99c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003ciostream\u003e\n\ntemplate\u003ctypename T, std::size_t size\u003e\nstd::size_t size_of(T (\u0026anArray)[size])  // Pass array by reference. Requires.\n{                                        // an exact size. We allow all sizes\n    return size;                         // by using a template \"size\".\n}\n\nint main()\n{\n    char anArrayOfChar[15];\n    std::cout \u003c\u003c \"anArrayOfChar: \" \u003c\u003c size_of(anArrayOfChar) \u003c\u003c \"\\n\";\n\n    int  anArrayOfData[] = {1,2,3,4,5,6,7,8,9};\n    std::cout \u003c\u003c \"anArrayOfData: \" \u003c\u003c size_of(anArrayOfData) \u003c\u003c \"\\n\";\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003ciostream\u003e\n\ntemplate\u003ctypename T, std::size_t size\u003e\nstd::size_t size_of(T (\u0026anArray)[size])  // Pass array by reference. Requires.\n{                                        // an exact size. We allow all sizes\n    return size;                         // by using a template \"size\".\n}\n\nint main()\n{\n    char anArrayOfChar[15];\n    std::cout \u003c\u003c \"anArrayOfChar: \" \u003c\u003c size_of(anArrayOfChar) \u003c\u003c \"\\n\";\n\n    int  anArrayOfData[] = {1,2,3,4,5,6,7,8,9};\n    std::cout \u003c\u003c \"anArrayOfData: \" \u003c\u003c size_of(anArrayOfData) \u003c\u003c \"\\n\";\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521959495,
        "id": "29548a47-7899-4db3-bc20-c3fde892b8c4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521959495,
        "parent_id": "a0d14351-9e82-45f5-b55f-74b3976ea99c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Example of explicitly specifying both type and non-type template parameters:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Example of explicitly specifying both type and non-type template parameters:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521959495,
        "id": "faf2ae23-c169-4bc4-bbbb-f1ee3ed3e974",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521959495,
        "parent_id": "a0d14351-9e82-45f5-b55f-74b3976ea99c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003carray\u003e\nint main ()\n{\n    std::array\u003cint, 5\u003e foo; // int is a type parameter, 5 is non-type\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003carray\u003e\nint main ()\n{\n    std::array\u003cint, 5\u003e foo; // int is a type parameter, 5 is non-type\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521959497,
        "id": "27d43969-1026-4e24-abda-dd29afd77066",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521959497,
        "parent_id": "a0d14351-9e82-45f5-b55f-74b3976ea99c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Non-type template parameters are one of the ways to achieve template recurrence and enables to do "
            ],
            [
              "Metaprogramming",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%2B%2B/462/metaprogramming"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Non-type template parameters are one of the ways to achieve template recurrence and enables to do "
          },
          {
            "Text": "Metaprogramming",
            "Link": "http://stackoverflow.com/documentation/c%2B%2B/462/metaprogramming"
          },
          {
            "Text": "."
          }
        ]
      }
    ],
    "title": "Non-type template parameter",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}