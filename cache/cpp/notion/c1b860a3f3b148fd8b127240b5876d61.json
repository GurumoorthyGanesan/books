{
  "ID": "c1b860a3-f3b1-48fd-8b12-7240b5876d61",
  "Root": {
    "alive": true,
    "content": [
      "2a080992-1549-4a69-8e8d-039a2d91f6ac",
      "40a745dc-44d8-4f01-b921-6096c0e1db8d",
      "d4683ea9-ca05-4362-bd32-0817b56fd012",
      "15df092a-6faf-4639-a667-5509cb407070",
      "51836bed-94dd-4706-99c6-294ba0de163a"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522366470,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "c1b860a3-f3b1-48fd-8b12-7240b5876d61",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550709840000,
    "parent_id": "ea515dbf-689d-48fb-bfb8-93f8853d7ec0",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "True random value generator"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522366465,
        "id": "2a080992-1549-4a69-8e8d-039a2d91f6ac",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522366465,
        "parent_id": "c1b860a3-f3b1-48fd-8b12-7240b5876d61",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To generate true random values that can be used for cryptography "
            ],
            [
              "std::random_device",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " has to be used as generator."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To generate true random values that can be used for cryptography "
          },
          {
            "Text": "std::random_device",
            "AttrFlags": 2
          },
          {
            "Text": " has to be used as generator."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522366467,
        "id": "40a745dc-44d8-4f01-b921-6096c0e1db8d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522366467,
        "parent_id": "c1b860a3-f3b1-48fd-8b12-7240b5876d61",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003ciostream\u003e\n#include \u003crandom\u003e\n\nint main()\n{\n   std::random_device crypto_random_generator;\n   std::uniform_int_distribution\u003cint\u003e int_distribution(0,9);\n   \n   int actual_distribution[10] = {0,0,0,0,0,0,0,0,0,0};\n   \n   for(int i = 0; i \u003c 10000; i++) {\n       int result = int_distribution(crypto_random_generator);\n       actual_distribution[result]++;\n   }\n\n   for(int i = 0; i \u003c 10; i++) {\n       std::cout \u003c\u003c actual_distribution[i] \u003c\u003c \" \";\n   }\n   \n   return 0;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003ciostream\u003e\n#include \u003crandom\u003e\n\nint main()\n{\n   std::random_device crypto_random_generator;\n   std::uniform_int_distribution\u003cint\u003e int_distribution(0,9);\n   \n   int actual_distribution[10] = {0,0,0,0,0,0,0,0,0,0};\n   \n   for(int i = 0; i \u003c 10000; i++) {\n       int result = int_distribution(crypto_random_generator);\n       actual_distribution[result]++;\n   }\n\n   for(int i = 0; i \u003c 10; i++) {\n       std::cout \u003c\u003c actual_distribution[i] \u003c\u003c \" \";\n   }\n   \n   return 0;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522366467,
        "id": "d4683ea9-ca05-4362-bd32-0817b56fd012",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522366467,
        "parent_id": "c1b860a3-f3b1-48fd-8b12-7240b5876d61",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "std::random_device",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is used in the same way as a pseudo random value generator is used."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "std::random_device",
            "AttrFlags": 2
          },
          {
            "Text": " is used in the same way as a pseudo random value generator is used."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522366468,
        "id": "15df092a-6faf-4639-a667-5509cb407070",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522366468,
        "parent_id": "c1b860a3-f3b1-48fd-8b12-7240b5876d61",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "However "
            ],
            [
              "std::random_device",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "may be implemented in terms of an implementation-defined pseudo-random number engine",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " if a non-deterministic source (e.g. a hardware device) isn’t available to the implementation."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "However "
          },
          {
            "Text": "std::random_device",
            "AttrFlags": 2
          },
          {
            "Text": " "
          },
          {
            "Text": "may be implemented in terms of an implementation-defined pseudo-random number engine",
            "AttrFlags": 1
          },
          {
            "Text": " if a non-deterministic source (e.g. a hardware device) isn’t available to the implementation."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522366470,
        "id": "51836bed-94dd-4706-99c6-294ba0de163a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522366470,
        "parent_id": "c1b860a3-f3b1-48fd-8b12-7240b5876d61",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Detecting such implementations should be possible via the "
            ],
            [
              "entropy",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://en.cppreference.com/w/cpp/numeric/random/random_device/entropy"
                ]
              ]
            ],
            [
              " member function",
              [
                [
                  "a",
                  "http://en.cppreference.com/w/cpp/numeric/random/random_device/entropy"
                ]
              ]
            ],
            [
              " (which return zero when the generator is completely deterministic), but many popular libraries (both GCC’s libstdc++ and LLVM’s libc++) always return zero, even when they’re using high-quality external randomness."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Detecting such implementations should be possible via the "
          },
          {
            "Text": "entropy",
            "AttrFlags": 2,
            "Link": "http://en.cppreference.com/w/cpp/numeric/random/random_device/entropy"
          },
          {
            "Text": " member function",
            "Link": "http://en.cppreference.com/w/cpp/numeric/random/random_device/entropy"
          },
          {
            "Text": " (which return zero when the generator is completely deterministic), but many popular libraries (both GCC’s libstdc++ and LLVM’s libc++) always return zero, even when they’re using high-quality external randomness."
          }
        ]
      }
    ],
    "title": "True random value generator",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}