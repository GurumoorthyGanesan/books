{
  "ID": "324fdf1e-b2fa-4eba-b7f0-611ccd32f38e",
  "Root": {
    "alive": true,
    "content": [
      "b5884d03-92df-47b3-a538-8bbba7d3819b",
      "bc416b1e-4fda-466d-9843-75711b127def",
      "2af022d5-3a79-44a3-b700-f1dd05985a9b",
      "2cd7ab67-6a14-485e-9dbc-213eb8aeda1b",
      "6c9e7ea1-6443-4f7b-812e-6403629540e9",
      "381179ec-6c9d-4238-92e4-b1ae61d6f596",
      "d32d72bd-be41-4c2f-b26a-00ce1203fb42",
      "fbcba87f-a375-41ce-ba24-f88420e20e1a",
      "5c3da84b-7090-479e-8e7f-854c6f2cb252",
      "7aa4142e-4dab-4229-92af-55efb2301cb6"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522337835,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "324fdf1e-b2fa-4eba-b7f0-611ccd32f38e",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550709660000,
    "parent_id": "5a1044bb-eec6-47e0-932c-1a000fc67e20",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Custom exception"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522337831,
        "id": "b5884d03-92df-47b3-a538-8bbba7d3819b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522337831,
        "parent_id": "324fdf1e-b2fa-4eba-b7f0-611ccd32f38e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You shouldn’t throw raw values as exceptions, instead use one of the standard exception classes or make your own."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You shouldn’t throw raw values as exceptions, instead use one of the standard exception classes or make your own."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522337834,
        "id": "bc416b1e-4fda-466d-9843-75711b127def",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522337834,
        "parent_id": "324fdf1e-b2fa-4eba-b7f0-611ccd32f38e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Having your own exception class inherited from "
            ],
            [
              "std::exception",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is a good way to go about it. Here’s a custom exception class which directly inherits from "
            ],
            [
              "std::exception",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Having your own exception class inherited from "
          },
          {
            "Text": "std::exception",
            "AttrFlags": 2
          },
          {
            "Text": " is a good way to go about it. Here’s a custom exception class which directly inherits from "
          },
          {
            "Text": "std::exception",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522337834,
        "id": "2af022d5-3a79-44a3-b700-f1dd05985a9b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522337834,
        "parent_id": "324fdf1e-b2fa-4eba-b7f0-611ccd32f38e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cexception\u003e\n\nclass Except: virtual public std::exception {\n    \nprotected:\n\n    int error_number;               ///\u003c Error number\n    int error_offset;               ///\u003c Error offset\n    std::string error_message;      ///\u003c Error message\n    \npublic:\n\n    /** Constructor (C++ STL string, int, int).\n     *  @param msg The error message\n     *  @param err_num Error number\n     *  @param err_off Error offset\n     */\n    explicit \n    Except(const std::string\u0026 msg, int err_num, int err_off):\n        error_number(err_num),\n        error_offset(err_off),\n        error_message(msg)\n        {}\n\n    /** Destructor.\n     *  Virtual to allow for subclassing.\n     */\n    virtual ~Except() throw () {}\n\n    /** Returns a pointer to the (constant) error description.\n     *  @return A pointer to a const char*. The underlying memory\n     *  is in possession of the Except object. Callers must\n     *  not attempt to free the memory.\n     */\n    virtual const char* what() const throw () {\n       return error_message.c_str();\n    }\n    \n    /** Returns error number.\n     *  @return #error_number\n     */\n    virtual int getErrorNumber() const throw() {\n        return error_number;\n    }\n    \n    /**Returns error offset.\n     * @return #error_offset\n     */\n    virtual int getErrorOffset() const throw() {\n        return error_offset;\n    }\n\n};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cexception\u003e\n\nclass Except: virtual public std::exception {\n    \nprotected:\n\n    int error_number;               ///\u003c Error number\n    int error_offset;               ///\u003c Error offset\n    std::string error_message;      ///\u003c Error message\n    \npublic:\n\n    /** Constructor (C++ STL string, int, int).\n     *  @param msg The error message\n     *  @param err_num Error number\n     *  @param err_off Error offset\n     */\n    explicit \n    Except(const std::string\u0026 msg, int err_num, int err_off):\n        error_number(err_num),\n        error_offset(err_off),\n        error_message(msg)\n        {}\n\n    /** Destructor.\n     *  Virtual to allow for subclassing.\n     */\n    virtual ~Except() throw () {}\n\n    /** Returns a pointer to the (constant) error description.\n     *  @return A pointer to a const char*. The underlying memory\n     *  is in possession of the Except object. Callers must\n     *  not attempt to free the memory.\n     */\n    virtual const char* what() const throw () {\n       return error_message.c_str();\n    }\n    \n    /** Returns error number.\n     *  @return #error_number\n     */\n    virtual int getErrorNumber() const throw() {\n        return error_number;\n    }\n    \n    /**Returns error offset.\n     * @return #error_offset\n     */\n    virtual int getErrorOffset() const throw() {\n        return error_offset;\n    }\n\n};",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522337834,
        "id": "2cd7ab67-6a14-485e-9dbc-213eb8aeda1b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522337834,
        "parent_id": "324fdf1e-b2fa-4eba-b7f0-611ccd32f38e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "An example throw catch:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "An example throw catch:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522337834,
        "id": "6c9e7ea1-6443-4f7b-812e-6403629540e9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522337834,
        "parent_id": "324fdf1e-b2fa-4eba-b7f0-611ccd32f38e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "try {\n    throw(Except(\"Couldn't do what you were expecting\", -12, -34));\n} catch (const Except\u0026 e) {\n    std::cout\u003c\u003ce.what()\n             \u003c\u003c\"\\nError number: \"\u003c\u003ce.getErrorNumber()\n             \u003c\u003c\"\\nError offset: \"\u003c\u003ce.getErrorOffset();\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "try {\n    throw(Except(\"Couldn't do what you were expecting\", -12, -34));\n} catch (const Except\u0026 e) {\n    std::cout\u003c\u003ce.what()\n             \u003c\u003c\"\\nError number: \"\u003c\u003ce.getErrorNumber()\n             \u003c\u003c\"\\nError offset: \"\u003c\u003ce.getErrorOffset();\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522337834,
        "id": "381179ec-6c9d-4238-92e4-b1ae61d6f596",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522337834,
        "parent_id": "324fdf1e-b2fa-4eba-b7f0-611ccd32f38e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As you are not only just throwing a dumb error message, also some other values representing what the error exactly was, your error handling becomes much more efficient and meaningful."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "As you are not only just throwing a dumb error message, also some other values representing what the error exactly was, your error handling becomes much more efficient and meaningful."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522337834,
        "id": "d32d72bd-be41-4c2f-b26a-00ce1203fb42",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522337834,
        "parent_id": "324fdf1e-b2fa-4eba-b7f0-611ccd32f38e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "There’s an exception class that let’s you handle error messages nicely :"
            ],
            [
              "std::runtime_error",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "There’s an exception class that let’s you handle error messages nicely :"
          },
          {
            "Text": "std::runtime_error",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522337834,
        "id": "fbcba87f-a375-41ce-ba24-f88420e20e1a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522337834,
        "parent_id": "324fdf1e-b2fa-4eba-b7f0-611ccd32f38e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You can inherit from this class too:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You can inherit from this class too:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522337835,
        "id": "5c3da84b-7090-479e-8e7f-854c6f2cb252",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522337835,
        "parent_id": "324fdf1e-b2fa-4eba-b7f0-611ccd32f38e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cstdexcept\u003e\n\nclass Except: virtual public std::runtime_error {\n    \nprotected:\n\n    int error_number;               ///\u003c Error number\n    int error_offset;               ///\u003c Error offset\n    \npublic:\n\n    /** Constructor (C++ STL string, int, int).\n     *  @param msg The error message\n     *  @param err_num Error number\n     *  @param err_off Error offset\n     */\n    explicit \n    Except(const std::string\u0026 msg, int err_num, int err_off):\n        std::runtime_error(msg)\n        {\n            error_number = err_num;\n            error_offset = err_off;\n            \n        }\n\n    /** Destructor.\n     *  Virtual to allow for subclassing.\n     */\n    virtual ~Except() throw () {}\n    \n    /** Returns error number.\n     *  @return #error_number\n     */\n    virtual int getErrorNumber() const throw() {\n        return error_number;\n    }\n    \n    /**Returns error offset.\n     * @return #error_offset\n     */\n    virtual int getErrorOffset() const throw() {\n        return error_offset;\n    }\n\n};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cstdexcept\u003e\n\nclass Except: virtual public std::runtime_error {\n    \nprotected:\n\n    int error_number;               ///\u003c Error number\n    int error_offset;               ///\u003c Error offset\n    \npublic:\n\n    /** Constructor (C++ STL string, int, int).\n     *  @param msg The error message\n     *  @param err_num Error number\n     *  @param err_off Error offset\n     */\n    explicit \n    Except(const std::string\u0026 msg, int err_num, int err_off):\n        std::runtime_error(msg)\n        {\n            error_number = err_num;\n            error_offset = err_off;\n            \n        }\n\n    /** Destructor.\n     *  Virtual to allow for subclassing.\n     */\n    virtual ~Except() throw () {}\n    \n    /** Returns error number.\n     *  @return #error_number\n     */\n    virtual int getErrorNumber() const throw() {\n        return error_number;\n    }\n    \n    /**Returns error offset.\n     * @return #error_offset\n     */\n    virtual int getErrorOffset() const throw() {\n        return error_offset;\n    }\n\n};",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522337835,
        "id": "7aa4142e-4dab-4229-92af-55efb2301cb6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522337835,
        "parent_id": "324fdf1e-b2fa-4eba-b7f0-611ccd32f38e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note that I haven’t overridden the "
            ],
            [
              "what()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " function from the base class ("
            ],
            [
              "std::runtime_error",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") i.e we will be using the base class’s version of "
            ],
            [
              "what()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". You can override it if you have further agenda."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note that I haven’t overridden the "
          },
          {
            "Text": "what()",
            "AttrFlags": 2
          },
          {
            "Text": " function from the base class ("
          },
          {
            "Text": "std::runtime_error",
            "AttrFlags": 2
          },
          {
            "Text": ") i.e we will be using the base class’s version of "
          },
          {
            "Text": "what()",
            "AttrFlags": 2
          },
          {
            "Text": ". You can override it if you have further agenda."
          }
        ]
      }
    ],
    "title": "Custom exception",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}