{
  "ID": "79e0844f-59ad-40b9-912a-bf8798b361c4",
  "Root": {
    "alive": true,
    "content": [
      "123a52b5-91bd-4a45-b6b5-f7d4e8eade84",
      "69fb0da5-fb4a-43f8-81cc-8335c4dc48f7",
      "2df2ae06-0686-4cd4-ac31-7edff331adc1",
      "285c7f23-98c3-4ede-9a7e-3155625f80ae",
      "7fd7dbcf-0c09-4058-a5e5-a21c228f4382",
      "cbf36ab2-15c9-4f01-aaa2-827399992752",
      "80b61dcc-3dfc-4788-9f87-c82bd39def46",
      "f211de54-ea5a-457e-baab-c2f0796c364e",
      "a7ea9138-e0af-4867-948f-31114f1b3a94",
      "edbebfb0-5b0b-419e-8ba6-8adf7492c287",
      "719c1510-b7a8-429e-8d1d-9fca31314589",
      "a336d229-041e-45db-baea-a20344f43516",
      "24512572-23cc-4b2e-8c46-424e8743eb04",
      "dc21326c-05bf-4ccf-b42d-e60b700847c9",
      "cda8312b-314a-40e0-9822-ac624d8002bc"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550523427696,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "79e0844f-59ad-40b9-912a-bf8798b361c4",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551687519421,
    "parent_id": "e2db6936-0727-4a61-bd9e-8712c9355a28",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "static assert"
        ]
      ]
    },
    "type": "page",
    "version": 4,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523427688,
        "id": "123a52b5-91bd-4a45-b6b5-f7d4e8eade84",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523427688,
        "parent_id": "79e0844f-59ad-40b9-912a-bf8798b361c4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Assertations mean that a condition should be checked and if it’s false, it’s an error. For "
            ],
            [
              "static_assert()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", this is done compile-time."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Assertations mean that a condition should be checked and if it’s false, it’s an error. For "
          },
          {
            "Text": "static_assert()",
            "AttrFlags": 2
          },
          {
            "Text": ", this is done compile-time."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523427691,
        "id": "69fb0da5-fb4a-43f8-81cc-8335c4dc48f7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523427691,
        "parent_id": "79e0844f-59ad-40b9-912a-bf8798b361c4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "template\u003ctypename T\u003e\nT mul10(const T t)\n{\n    static_assert( std::is_integral\u003cT\u003e::value, \"mul10() only works for integral types\" );\n    return (t \u003c\u003c 3) + (t \u003c\u003c 1);\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "template\u003ctypename T\u003e\nT mul10(const T t)\n{\n    static_assert( std::is_integral\u003cT\u003e::value, \"mul10() only works for integral types\" );\n    return (t \u003c\u003c 3) + (t \u003c\u003c 1);\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523427691,
        "id": "2df2ae06-0686-4cd4-ac31-7edff331adc1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523427691,
        "parent_id": "79e0844f-59ad-40b9-912a-bf8798b361c4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A "
            ],
            [
              "static_assert()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " has a mandatory first parameter, the condition, that is a bool constexpr. It "
            ],
            [
              "might",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " have a second parameter, the message, that is a string literal. From C++17, the second parameter is optional; before that, it’s mandatory."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A "
          },
          {
            "Text": "static_assert()",
            "AttrFlags": 2
          },
          {
            "Text": " has a mandatory first parameter, the condition, that is a bool constexpr. It "
          },
          {
            "Text": "might",
            "AttrFlags": 4
          },
          {
            "Text": " have a second parameter, the message, that is a string literal. From C++17, the second parameter is optional; before that, it’s mandatory."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523427691,
        "id": "285c7f23-98c3-4ede-9a7e-3155625f80ae",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523427691,
        "parent_id": "79e0844f-59ad-40b9-912a-bf8798b361c4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "template\u003ctypename T\u003e\nT mul10(const T t)\n{\n    static_assert(std::is_integral\u003cT\u003e::value);\n    return (t \u003c\u003c 3) + (t \u003c\u003c 1);\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "template\u003ctypename T\u003e\nT mul10(const T t)\n{\n    static_assert(std::is_integral\u003cT\u003e::value);\n    return (t \u003c\u003c 3) + (t \u003c\u003c 1);\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523427692,
        "id": "7fd7dbcf-0c09-4058-a5e5-a21c228f4382",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523427692,
        "parent_id": "79e0844f-59ad-40b9-912a-bf8798b361c4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It is used when:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It is used when:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523427692,
        "id": "cbf36ab2-15c9-4f01-aaa2-827399992752",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523427692,
        "parent_id": "79e0844f-59ad-40b9-912a-bf8798b361c4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In general, a verification at compile-time is required on some type on constexpr value"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "In general, a verification at compile-time is required on some type on constexpr value"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523427692,
        "id": "80b61dcc-3dfc-4788-9f87-c82bd39def46",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523427692,
        "parent_id": "79e0844f-59ad-40b9-912a-bf8798b361c4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A template function needs to verify certain properties of a type passed to it"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "A template function needs to verify certain properties of a type passed to it"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523427693,
        "id": "f211de54-ea5a-457e-baab-c2f0796c364e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523427693,
        "parent_id": "79e0844f-59ad-40b9-912a-bf8798b361c4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "One wants to write test cases for:"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "One wants to write test cases for:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523427693,
        "id": "a7ea9138-e0af-4867-948f-31114f1b3a94",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523427693,
        "parent_id": "79e0844f-59ad-40b9-912a-bf8798b361c4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "template metafunctions"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "template metafunctions"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523427693,
        "id": "edbebfb0-5b0b-419e-8ba6-8adf7492c287",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523427693,
        "parent_id": "79e0844f-59ad-40b9-912a-bf8798b361c4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "constexpr functions"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "constexpr functions"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523427693,
        "id": "719c1510-b7a8-429e-8d1d-9fca31314589",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523427693,
        "parent_id": "79e0844f-59ad-40b9-912a-bf8798b361c4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "macro metaprogramming"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "macro metaprogramming"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523427694,
        "id": "a336d229-041e-45db-baea-a20344f43516",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523427694,
        "parent_id": "79e0844f-59ad-40b9-912a-bf8798b361c4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Certain defines are required (for ex., C++ version)"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Certain defines are required (for ex., C++ version)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523427694,
        "id": "24512572-23cc-4b2e-8c46-424e8743eb04",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523427694,
        "parent_id": "79e0844f-59ad-40b9-912a-bf8798b361c4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Porting legacy code, assertations on "
            ],
            [
              "sizeof(T)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (e.g., 32-bit int)"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Porting legacy code, assertations on "
          },
          {
            "Text": "sizeof(T)",
            "AttrFlags": 2
          },
          {
            "Text": " (e.g., 32-bit int)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523427694,
        "id": "dc21326c-05bf-4ccf-b42d-e60b700847c9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523427694,
        "parent_id": "79e0844f-59ad-40b9-912a-bf8798b361c4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Certain compiler features are required for the program to work (packing, empty base class optimization, etc.)"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Certain compiler features are required for the program to work (packing, empty base class optimization, etc.)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523427696,
        "id": "cda8312b-314a-40e0-9822-ac624d8002bc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523427696,
        "parent_id": "79e0844f-59ad-40b9-912a-bf8798b361c4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note that "
            ],
            [
              "static_assert()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " does not participate in "
            ],
            [
              "SFINAE",
              [
                [
                  "a",
                  "https://stackoverflow.com/documentation/c%2B%2B/1169/sfinae-substitution-failure-is-not-an-error"
                ]
              ]
            ],
            [
              ": thus, when additional overloads / specializations are possible, one should not use it instead of template metaprogramming techniques (like "
            ],
            [
              "std::enable_if\u003c\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "). It might be used in template code when the expected overload / specialization is already found, but further verifications are required. In such cases, it might provide more concrete error message(s) than relying on SFINAE for this."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note that "
          },
          {
            "Text": "static_assert()",
            "AttrFlags": 2
          },
          {
            "Text": " does not participate in "
          },
          {
            "Text": "SFINAE",
            "Link": "https://stackoverflow.com/documentation/c%2B%2B/1169/sfinae-substitution-failure-is-not-an-error"
          },
          {
            "Text": ": thus, when additional overloads / specializations are possible, one should not use it instead of template metaprogramming techniques (like "
          },
          {
            "Text": "std::enable_if\u003c\u003e",
            "AttrFlags": 2
          },
          {
            "Text": "). It might be used in template code when the expected overload / specialization is already found, but further verifications are required. In such cases, it might provide more concrete error message(s) than relying on SFINAE for this."
          }
        ]
      }
    ],
    "title": "static assert",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}