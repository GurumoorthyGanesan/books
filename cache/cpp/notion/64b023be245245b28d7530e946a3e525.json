{
  "ID": "64b023be-2452-45b2-8d75-30e946a3e525",
  "Root": {
    "alive": true,
    "content": [
      "56a696c1-9e55-4a6f-af27-4756db040b49",
      "4fd88b30-c223-44f8-ac3c-6585c510ea8f",
      "107967e6-3e1f-480e-bc0f-4b22715106dd",
      "15396077-f5ba-4f00-b130-12652374605a",
      "01502cde-fbec-441d-b62b-f00d8927fa2e",
      "1e8b2d74-0005-46bd-8ece-1103bdfa62bb",
      "7a2768dd-1f4a-424f-b494-3f90b70017c5",
      "8f311dab-2580-48dd-93f0-1f0c81f54b5b",
      "2e455cad-8353-47dc-a331-1c718194b2b3"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550523043871,
    "id": "64b023be-2452-45b2-8d75-30e946a3e525",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550523043871,
    "parent_id": "5dbd715a-2e96-4062-9cda-4e181e63af5e",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "040 Erasing down to a contiguous buffer of T"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523043868,
        "id": "56a696c1-9e55-4a6f-af27-4756db040b49",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523043868,
        "parent_id": "64b023be-2452-45b2-8d75-30e946a3e525",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Not all type erasure involves virtual inheritance, allocations, placement new, or even function pointers."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Not all type erasure involves virtual inheritance, allocations, placement new, or even function pointers."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523043868,
        "id": "4fd88b30-c223-44f8-ac3c-6585c510ea8f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523043868,
        "parent_id": "64b023be-2452-45b2-8d75-30e946a3e525",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "What makes type erasure type erasure is that it describes a (set of) behavior(s), and takes any type that supports that behavior and wraps it up. All information that isn’t in that set of behaviors is “forgotten” or “erased”."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "What makes type erasure type erasure is that it describes a (set of) behavior(s), and takes any type that supports that behavior and wraps it up. All information that isn’t in that set of behaviors is “forgotten” or “erased”."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523043869,
        "id": "107967e6-3e1f-480e-bc0f-4b22715106dd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523043869,
        "parent_id": "64b023be-2452-45b2-8d75-30e946a3e525",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "An "
            ],
            [
              "array_view",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " takes its incoming range or container type and erases everything except the fact it is a contiguous buffer of "
            ],
            [
              "T",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "An "
          },
          {
            "Text": "array_view",
            "AttrFlags": 2
          },
          {
            "Text": " takes its incoming range or container type and erases everything except the fact it is a contiguous buffer of "
          },
          {
            "Text": "T",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523043869,
        "id": "15396077-f5ba-4f00-b130-12652374605a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523043869,
        "parent_id": "64b023be-2452-45b2-8d75-30e946a3e525",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// helper traits for SFINAE:\ntemplate\u003cclass T\u003e\nusing data_t = decltype( std::declval\u003cT\u003e().data() );\n\ntemplate\u003cclass Src, class T\u003e\nusing compatible_data = std::integral_constant\u003cbool, std::is_same\u003c data_t\u003cSrc\u003e, T* \u003e{} || std::is_same\u003c data_t\u003cSrc\u003e, std::remove_const_t\u003cT\u003e* \u003e{}\u003e;\n\ntemplate\u003cclass T\u003e\nstruct array_view {\n  // the core of the class:\n  T* b=nullptr;\n  T* e=nullptr;\n  T* begin() const { return b; }\n  T* end() const { return e; }\n\n  // provide the expected methods of a good contiguous range:\n  T* data() const { return begin(); }\n  bool empty() const { return begin()==end(); }\n  std::size_t size() const { return end()-begin(); }\n\n  T\u0026 operator[](std::size_t i)const{ return begin()[i]; }\n  T\u0026 front()const{ return *begin(); }\n  T\u0026 back()const{ return *(end()-1); }\n\n  // useful helpers that let you generate other ranges from this one\n  // quickly and safely:\n  array_view without_front( std::size_t i=1 ) const {\n    i = (std::min)(i, size());\n    return {begin()+i, end()};\n  }\n  array_view without_back( std::size_t i=1 ) const {\n    i = (std::min)(i, size());\n    return {begin(), end()-i};\n  }\n\n  // array_view is plain old data, so default copy:\n  array_view(array_view const\u0026)=default;\n  // generates a null, empty range:\n  array_view()=default;\n\n  // final constructor:\n  array_view(T* s, T* f):b(s),e(f) {}\n  // start and length is useful in my experience:\n  array_view(T* s, std::size_t length):array_view(s, s+length) {}\n\n  // SFINAE constructor that takes any .data() supporting container\n  // or other range in one fell swoop:\n  template\u003cclass Src,\n    std::enable_if_t\u003c compatible_data\u003cstd::remove_reference_t\u003cSrc\u003e\u0026, T \u003e{}, int\u003e* =nullptr,\n    std::enable_if_t\u003c !std::is_same\u003cstd::decay_t\u003cSrc\u003e, array_view \u003e{}, int\u003e* =nullptr\n  \u003e\n  array_view( Src\u0026\u0026 src ):\n    array_view( src.data(), src.size() )\n  {}\n\n  // array constructor:\n  template\u003cstd::size_t N\u003e\n  array_view( T(\u0026arr)[N] ):array_view(arr, N) {}\n\n  // initializer list, allowing {} based:\n  template\u003cclass U,\n    std::enable_if_t\u003c std::is_same\u003cconst U, T\u003e{}, int\u003e* =nullptr\n  \u003e\n  array_view( std::initializer_list\u003cU\u003e il ):array_view(il.begin(), il.end()) {}\n};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// helper traits for SFINAE:\ntemplate\u003cclass T\u003e\nusing data_t = decltype( std::declval\u003cT\u003e().data() );\n\ntemplate\u003cclass Src, class T\u003e\nusing compatible_data = std::integral_constant\u003cbool, std::is_same\u003c data_t\u003cSrc\u003e, T* \u003e{} || std::is_same\u003c data_t\u003cSrc\u003e, std::remove_const_t\u003cT\u003e* \u003e{}\u003e;\n\ntemplate\u003cclass T\u003e\nstruct array_view {\n  // the core of the class:\n  T* b=nullptr;\n  T* e=nullptr;\n  T* begin() const { return b; }\n  T* end() const { return e; }\n\n  // provide the expected methods of a good contiguous range:\n  T* data() const { return begin(); }\n  bool empty() const { return begin()==end(); }\n  std::size_t size() const { return end()-begin(); }\n\n  T\u0026 operator[](std::size_t i)const{ return begin()[i]; }\n  T\u0026 front()const{ return *begin(); }\n  T\u0026 back()const{ return *(end()-1); }\n\n  // useful helpers that let you generate other ranges from this one\n  // quickly and safely:\n  array_view without_front( std::size_t i=1 ) const {\n    i = (std::min)(i, size());\n    return {begin()+i, end()};\n  }\n  array_view without_back( std::size_t i=1 ) const {\n    i = (std::min)(i, size());\n    return {begin(), end()-i};\n  }\n\n  // array_view is plain old data, so default copy:\n  array_view(array_view const\u0026)=default;\n  // generates a null, empty range:\n  array_view()=default;\n\n  // final constructor:\n  array_view(T* s, T* f):b(s),e(f) {}\n  // start and length is useful in my experience:\n  array_view(T* s, std::size_t length):array_view(s, s+length) {}\n\n  // SFINAE constructor that takes any .data() supporting container\n  // or other range in one fell swoop:\n  template\u003cclass Src,\n    std::enable_if_t\u003c compatible_data\u003cstd::remove_reference_t\u003cSrc\u003e\u0026, T \u003e{}, int\u003e* =nullptr,\n    std::enable_if_t\u003c !std::is_same\u003cstd::decay_t\u003cSrc\u003e, array_view \u003e{}, int\u003e* =nullptr\n  \u003e\n  array_view( Src\u0026\u0026 src ):\n    array_view( src.data(), src.size() )\n  {}\n\n  // array constructor:\n  template\u003cstd::size_t N\u003e\n  array_view( T(\u0026arr)[N] ):array_view(arr, N) {}\n\n  // initializer list, allowing {} based:\n  template\u003cclass U,\n    std::enable_if_t\u003c std::is_same\u003cconst U, T\u003e{}, int\u003e* =nullptr\n  \u003e\n  array_view( std::initializer_list\u003cU\u003e il ):array_view(il.begin(), il.end()) {}\n};",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523043869,
        "id": "01502cde-fbec-441d-b62b-f00d8927fa2e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523043869,
        "parent_id": "64b023be-2452-45b2-8d75-30e946a3e525",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "an "
            ],
            [
              "array_view",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " takes any container that supports "
            ],
            [
              ".data()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " returning a pointer to "
            ],
            [
              "T",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and a "
            ],
            [
              ".size()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method, or an array, and erases it down to being a random-access range over contiguous "
            ],
            [
              "T",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "s."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "an "
          },
          {
            "Text": "array_view",
            "AttrFlags": 2
          },
          {
            "Text": " takes any container that supports "
          },
          {
            "Text": ".data()",
            "AttrFlags": 2
          },
          {
            "Text": " returning a pointer to "
          },
          {
            "Text": "T",
            "AttrFlags": 2
          },
          {
            "Text": " and a "
          },
          {
            "Text": ".size()",
            "AttrFlags": 2
          },
          {
            "Text": " method, or an array, and erases it down to being a random-access range over contiguous "
          },
          {
            "Text": "T",
            "AttrFlags": 2
          },
          {
            "Text": "s."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523043870,
        "id": "1e8b2d74-0005-46bd-8ece-1103bdfa62bb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523043870,
        "parent_id": "64b023be-2452-45b2-8d75-30e946a3e525",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It can take a "
            ],
            [
              "std::vector\u003cT\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", a "
            ],
            [
              "std::string\u003cT\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " a "
            ],
            [
              "std::array\u003cT, N\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " a "
            ],
            [
              "T[37]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", an initializer list (including "
            ],
            [
              "{}",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " based ones), or something else you make up that supports it (via "
            ],
            [
              "T* x.data()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "size_t x.size()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ")."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It can take a "
          },
          {
            "Text": "std::vector\u003cT\u003e",
            "AttrFlags": 2
          },
          {
            "Text": ", a "
          },
          {
            "Text": "std::string\u003cT\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " a "
          },
          {
            "Text": "std::array\u003cT, N\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " a "
          },
          {
            "Text": "T[37]",
            "AttrFlags": 2
          },
          {
            "Text": ", an initializer list (including "
          },
          {
            "Text": "{}",
            "AttrFlags": 2
          },
          {
            "Text": " based ones), or something else you make up that supports it (via "
          },
          {
            "Text": "T* x.data()",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "size_t x.size()",
            "AttrFlags": 2
          },
          {
            "Text": ")."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523043870,
        "id": "7a2768dd-1f4a-424f-b494-3f90b70017c5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523043870,
        "parent_id": "64b023be-2452-45b2-8d75-30e946a3e525",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In this case, the data we can extract from the thing we are erasing, together with our “view” non-owning state, means we don’t have to allocate memory or write custom type-dependent functions."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In this case, the data we can extract from the thing we are erasing, together with our “view” non-owning state, means we don’t have to allocate memory or write custom type-dependent functions."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523043870,
        "id": "8f311dab-2580-48dd-93f0-1f0c81f54b5b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523043870,
        "parent_id": "64b023be-2452-45b2-8d75-30e946a3e525",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Live example",
              [
                [
                  "a",
                  "http://coliru.stacked-crooked.com/a/c9f8e013a309ca66"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Live example",
            "Link": "http://coliru.stacked-crooked.com/a/c9f8e013a309ca66"
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523043871,
        "id": "2e455cad-8353-47dc-a331-1c718194b2b3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523043871,
        "parent_id": "64b023be-2452-45b2-8d75-30e946a3e525",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "An improvement would be to use a non-member "
            ],
            [
              "data",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and a non-member "
            ],
            [
              "size",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in an ADL-enabled context."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "An improvement would be to use a non-member "
          },
          {
            "Text": "data",
            "AttrFlags": 2
          },
          {
            "Text": " and a non-member "
          },
          {
            "Text": "size",
            "AttrFlags": 2
          },
          {
            "Text": " in an ADL-enabled context."
          }
        ]
      }
    ],
    "title": "040 Erasing down to a contiguous buffer of T"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}