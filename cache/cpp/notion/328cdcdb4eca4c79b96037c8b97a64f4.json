{
  "ID": "328cdcdb-4eca-4c79-b960-37c8b97a64f4",
  "Root": {
    "alive": true,
    "content": [
      "c20e0390-cb9e-47c3-acf9-506d0564ce05",
      "d09bcb69-5432-4cb7-9891-209199517a7b",
      "ac1a8ebb-d3d8-4eb9-97b4-7c83e12dec78",
      "bf600e8b-147b-4f91-8697-00bba24deb72",
      "480a18eb-5dc1-4cb6-bd73-03fb69cf448d",
      "98081ea8-e290-4a91-a68a-df41cb41bbbb",
      "28062afa-9ce7-437e-b986-d91e3d01f406",
      "dd6e4789-7250-4206-a34a-7944609ce1c3"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550521989543,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "328cdcdb-4eca-4c79-b960-37c8b97a64f4",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552303980000,
    "parent_id": "b886ff5d-614b-4aa9-9e99-851b7998439b",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Using the std::string_view class"
        ]
      ]
    },
    "type": "page",
    "version": 14,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521989539,
        "id": "c20e0390-cb9e-47c3-acf9-506d0564ce05",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521989539,
        "parent_id": "328cdcdb-4eca-4c79-b960-37c8b97a64f4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "C++17 introduces "
            ],
            [
              "std::string_view",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", which is simply a non-owning range of "
            ],
            [
              "const char",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "s, implementable as either a pair of pointers or a pointer and a length. It is a superior parameter type for functions that requires non-modifiable string data. Before C++17, there were three options for this:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "C++17 introduces "
          },
          {
            "Text": "std::string_view",
            "AttrFlags": 2
          },
          {
            "Text": ", which is simply a non-owning range of "
          },
          {
            "Text": "const char",
            "AttrFlags": 2
          },
          {
            "Text": "s, implementable as either a pair of pointers or a pointer and a length. It is a superior parameter type for functions that requires non-modifiable string data. Before C++17, there were three options for this:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521989541,
        "id": "d09bcb69-5432-4cb7-9891-209199517a7b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552303980000,
        "parent_id": "328cdcdb-4eca-4c79-b960-37c8b97a64f4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "void foo(std::string const\u0026 s);      // pre-C++17, single argument, could incur\n                                     // allocation if caller's data was not in a string\n                                     // (e.g. string literal or vector\u003cchar\u003e )\n\nvoid foo(const char* s, size_t len); // pre-C++17, two arguments, have to pass them\n                                     // both everywhere\n\nvoid foo(const char* s);             // pre-C++17, single argument, but need to call\n                                     // strlen()\n\ntemplate \u003cclass StringT\u003e\nvoid foo(StringT const\u0026 s);          // pre-C++17, caller can pass arbitrary char data\n                                     // provider, but now foo() has to live in a header"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "void foo(std::string const\u0026 s);      // pre-C++17, single argument, could incur\n                                     // allocation if caller's data was not in a string\n                                     // (e.g. string literal or vector\u003cchar\u003e )\n\nvoid foo(const char* s, size_t len); // pre-C++17, two arguments, have to pass them\n                                     // both everywhere\n\nvoid foo(const char* s);             // pre-C++17, single argument, but need to call\n                                     // strlen()\n\ntemplate \u003cclass StringT\u003e\nvoid foo(StringT const\u0026 s);          // pre-C++17, caller can pass arbitrary char data\n                                     // provider, but now foo() has to live in a header",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521989542,
        "id": "ac1a8ebb-d3d8-4eb9-97b4-7c83e12dec78",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521989542,
        "parent_id": "328cdcdb-4eca-4c79-b960-37c8b97a64f4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "All of these can be replaced with:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "All of these can be replaced with:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521989542,
        "id": "bf600e8b-147b-4f91-8697-00bba24deb72",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552303980000,
        "parent_id": "328cdcdb-4eca-4c79-b960-37c8b97a64f4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "void foo(std::string_view s);        // post-C++17, single argument, tighter coupling\n                                     // zero copies regardless of how caller is storing\n                                     // the data"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "void foo(std::string_view s);        // post-C++17, single argument, tighter coupling\n                                     // zero copies regardless of how caller is storing\n                                     // the data",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521989542,
        "id": "480a18eb-5dc1-4cb6-bd73-03fb69cf448d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521989542,
        "parent_id": "328cdcdb-4eca-4c79-b960-37c8b97a64f4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note that ",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              "std::string_view",
              [
                [
                  "i"
                ],
                [
                  "c"
                ]
              ]
            ],
            [
              " ",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              "cannot",
              [
                [
                  "b"
                ],
                [
                  "i"
                ]
              ]
            ],
            [
              " modify its underlying data",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note that ",
            "AttrFlags": 4
          },
          {
            "Text": "std::string_view",
            "AttrFlags": 6
          },
          {
            "Text": " ",
            "AttrFlags": 4
          },
          {
            "Text": "cannot",
            "AttrFlags": 5
          },
          {
            "Text": " modify its underlying data",
            "AttrFlags": 4
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521989542,
        "id": "98081ea8-e290-4a91-a68a-df41cb41bbbb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521989542,
        "parent_id": "328cdcdb-4eca-4c79-b960-37c8b97a64f4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "string_view",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is useful when you want to avoid unnecessary copies."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "string_view",
            "AttrFlags": 2
          },
          {
            "Text": " is useful when you want to avoid unnecessary copies."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521989542,
        "id": "28062afa-9ce7-437e-b986-d91e3d01f406",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521989542,
        "parent_id": "328cdcdb-4eca-4c79-b960-37c8b97a64f4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It offers a useful subset of the functionality that "
            ],
            [
              "std::string",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " does, although some of the functions behave differently:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It offers a useful subset of the functionality that "
          },
          {
            "Text": "std::string",
            "AttrFlags": 2
          },
          {
            "Text": " does, although some of the functions behave differently:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521989542,
        "id": "dd6e4789-7250-4206-a34a-7944609ce1c3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552303980000,
        "parent_id": "328cdcdb-4eca-4c79-b960-37c8b97a64f4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "std::string str = \"lllloooonnnngggg sssstttrrriiinnnggg\"; //A really long string\n\n//Bad way - 'string::substr' returns a new string (expensive if the string is long)\nstd::cout \u003c\u003c str.substr(15, 10) \u003c\u003c '\\n';\n\n//Good way - No copies are created!\nstd::string_view view = str;\n\n// string_view::substr returns a new string_view\nstd::cout \u003c\u003c view.substr(15, 10) \u003c\u003c '\\n';"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "std::string str = \"lllloooonnnngggg sssstttrrriiinnnggg\"; //A really long string\n\n//Bad way - 'string::substr' returns a new string (expensive if the string is long)\nstd::cout \u003c\u003c str.substr(15, 10) \u003c\u003c '\\n';\n\n//Good way - No copies are created!\nstd::string_view view = str;\n\n// string_view::substr returns a new string_view\nstd::cout \u003c\u003c view.substr(15, 10) \u003c\u003c '\\n';",
        "code_language": "C++"
      }
    ],
    "title": "Using the std::string_view class",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}