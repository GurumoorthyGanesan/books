{
  "ID": "5f214e3d-270a-4272-a0d4-d579cb707db7",
  "Root": {
    "alive": true,
    "content": [
      "075b2bb2-8597-4f88-8235-f3feab1f904f",
      "aa07e168-d9ba-429c-9544-1c52f0131c41",
      "13da1279-b121-406f-b75b-bdca60f4a4fb",
      "031cd0df-86d7-4060-834c-59d2d71b6d28",
      "838bc7d5-e105-4e27-8489-5f5dd75a59c0"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550523949340,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "5f214e3d-270a-4272-a0d4-d579cb707db7",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551688396621,
    "parent_id": "b2086806-a259-48af-adcb-172245e66aa0",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Using tail recursion and Fibonnaci-style recursion to solve the Fibonnaci sequence"
        ]
      ]
    },
    "type": "page",
    "version": 4,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523949337,
        "id": "075b2bb2-8597-4f88-8235-f3feab1f904f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523949337,
        "parent_id": "5f214e3d-270a-4272-a0d4-d579cb707db7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The simple and most obvious way to use recursion to get the Nth term of the Fibonnaci sequence is this"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The simple and most obvious way to use recursion to get the Nth term of the Fibonnaci sequence is this"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523949339,
        "id": "aa07e168-d9ba-429c-9544-1c52f0131c41",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523949339,
        "parent_id": "5f214e3d-270a-4272-a0d4-d579cb707db7",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int get_term_fib(int n)\n{\n  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return get_term_fib(n - 1) + get_term_fib(n - 2);\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int get_term_fib(int n)\n{\n  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return get_term_fib(n - 1) + get_term_fib(n - 2);\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523949340,
        "id": "13da1279-b121-406f-b75b-bdca60f4a4fb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523949340,
        "parent_id": "5f214e3d-270a-4272-a0d4-d579cb707db7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "However, this algorithm does not scale for higher terms: for bigger and bigger "
            ],
            [
              "n",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", the number of function calls that you need to make grows exponentially. This can be replaced with a simple tail recursion."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "However, this algorithm does not scale for higher terms: for bigger and bigger "
          },
          {
            "Text": "n",
            "AttrFlags": 2
          },
          {
            "Text": ", the number of function calls that you need to make grows exponentially. This can be replaced with a simple tail recursion."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523949340,
        "id": "031cd0df-86d7-4060-834c-59d2d71b6d28",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523949340,
        "parent_id": "5f214e3d-270a-4272-a0d4-d579cb707db7",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int get_term_fib(int n, int prev = 0, int curr = 1)\n{\n  if (n == 0)\n    return prev;\n  if (n == 1)\n    return curr;\n  return get_term_fib(n - 1, curr, prev + curr);\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int get_term_fib(int n, int prev = 0, int curr = 1)\n{\n  if (n == 0)\n    return prev;\n  if (n == 1)\n    return curr;\n  return get_term_fib(n - 1, curr, prev + curr);\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523949340,
        "id": "838bc7d5-e105-4e27-8489-5f5dd75a59c0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523949340,
        "parent_id": "5f214e3d-270a-4272-a0d4-d579cb707db7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Each call to the function now immediately calculates the next term in the Fibonnaci sequence, so the number of function calls scales linearly with "
            ],
            [
              "n",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Each call to the function now immediately calculates the next term in the Fibonnaci sequence, so the number of function calls scales linearly with "
          },
          {
            "Text": "n",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      }
    ],
    "title": "Using tail recursion and Fibonnaci-style recursion to solve the Fibonnaci sequence",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}