{
  "ID": "84e68bcf-6c45-47e1-a9db-2ea49a787872",
  "Root": {
    "alive": true,
    "content": [
      "474f7930-e67c-49ee-ad49-6acf7b416bce",
      "975b4ebb-17eb-495e-b2d9-3670e0da6bed",
      "5bd23acb-3d5b-4f77-963b-f21bf44fa9ea",
      "59b5137a-5a4a-41e1-99bd-1ceb2dedb866"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522029530,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "84e68bcf-6c45-47e1-a9db-2ea49a787872",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550801100000,
    "parent_id": "402ef4da-a4e3-4503-ab08-9a4aa56821b5",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Casting std::shared_ptr pointers"
        ]
      ]
    },
    "type": "page",
    "version": 14,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522029528,
        "id": "474f7930-e67c-49ee-ad49-6acf7b416bce",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522029528,
        "parent_id": "84e68bcf-6c45-47e1-a9db-2ea49a787872",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It is not possible to directly use "
            ],
            [
              "static_cast",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "const_cast",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "dynamic_cast",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "reinterpret_cast",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " on "
            ],
            [
              "std::shared_ptr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to retrieve a pointer sharing ownership with the pointer being passed as argument. Instead, the functions "
            ],
            [
              "std::static_pointer_cast",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "std::const_pointer_cast",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "std::dynamic_pointer_cast",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "std::reinterpret_pointer_cast",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " should be used:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It is not possible to directly use "
          },
          {
            "Text": "static_cast",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "const_cast",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "dynamic_cast",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "reinterpret_cast",
            "AttrFlags": 2
          },
          {
            "Text": " on "
          },
          {
            "Text": "std::shared_ptr",
            "AttrFlags": 2
          },
          {
            "Text": " to retrieve a pointer sharing ownership with the pointer being passed as argument. Instead, the functions "
          },
          {
            "Text": "std::static_pointer_cast",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "std::const_pointer_cast",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "std::dynamic_pointer_cast",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "std::reinterpret_pointer_cast",
            "AttrFlags": 2
          },
          {
            "Text": " should be used:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522029528,
        "id": "975b4ebb-17eb-495e-b2d9-3670e0da6bed",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550801100000,
        "parent_id": "84e68bcf-6c45-47e1-a9db-2ea49a787872",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "struct Base { virtual ~Base() noexcept {}; };\nstruct Derived: Base {};\nauto derivedPtr(std::make_shared\u003cDerived\u003e());\nauto basePtr(std::static_pointer_cast\u003cBase\u003e(derivedPtr));\nauto constBasePtr(std::const_pointer_cast\u003cBase const\u003e(basePtr));\nauto constDerivedPtr(std::dynamic_pointer_cast\u003cDerived const\u003e(constBasePtr));"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "struct Base { virtual ~Base() noexcept {}; };\nstruct Derived: Base {};\nauto derivedPtr(std::make_shared\u003cDerived\u003e());\nauto basePtr(std::static_pointer_cast\u003cBase\u003e(derivedPtr));\nauto constBasePtr(std::const_pointer_cast\u003cBase const\u003e(basePtr));\nauto constDerivedPtr(std::dynamic_pointer_cast\u003cDerived const\u003e(constBasePtr));",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522029530,
        "id": "5bd23acb-3d5b-4f77-963b-f21bf44fa9ea",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522029530,
        "parent_id": "84e68bcf-6c45-47e1-a9db-2ea49a787872",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note that "
            ],
            [
              "std::reinterpret_pointer_cast",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is not available in C++11 and C++14, as it was only proposed by "
            ],
            [
              "N3920",
              [
                [
                  "a",
                  "https://isocpp.org/files/papers/N3920.html"
                ]
              ]
            ],
            [
              " and adopted into Library Fundamentals TS "
            ],
            [
              "in February 2014",
              [
                [
                  "a",
                  "https://isocpp.org/blog/2014/02/trip-report"
                ]
              ]
            ],
            [
              ". However, it can be implemented as follows:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note that "
          },
          {
            "Text": "std::reinterpret_pointer_cast",
            "AttrFlags": 2
          },
          {
            "Text": " is not available in C++11 and C++14, as it was only proposed by "
          },
          {
            "Text": "N3920",
            "Link": "https://isocpp.org/files/papers/N3920.html"
          },
          {
            "Text": " and adopted into Library Fundamentals TS "
          },
          {
            "Text": "in February 2014",
            "Link": "https://isocpp.org/blog/2014/02/trip-report"
          },
          {
            "Text": ". However, it can be implemented as follows:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522029530,
        "id": "59b5137a-5a4a-41e1-99bd-1ceb2dedb866",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550801100000,
        "parent_id": "84e68bcf-6c45-47e1-a9db-2ea49a787872",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "template \u003ctypename To, typename From\u003e\ninline std::shared_ptr\u003cTo\u003e reinterpret_pointer_cast(\n    std::shared_ptr\u003cFrom\u003e const \u0026 ptr) noexcept\n{ return std::shared_ptr\u003cTo\u003e(ptr, reinterpret_cast\u003cTo *\u003e(ptr.get())); }"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "template \u003ctypename To, typename From\u003e\ninline std::shared_ptr\u003cTo\u003e reinterpret_pointer_cast(\n    std::shared_ptr\u003cFrom\u003e const \u0026 ptr) noexcept\n{ return std::shared_ptr\u003cTo\u003e(ptr, reinterpret_cast\u003cTo *\u003e(ptr.get())); }",
        "code_language": "C++"
      }
    ],
    "title": "Casting std::shared_ptr pointers",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}