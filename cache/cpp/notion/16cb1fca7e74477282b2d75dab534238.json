{
  "ID": "16cb1fca-7e74-4772-82b2-d75dab534238",
  "Root": {
    "alive": true,
    "content": [
      "90f04678-a5a9-483b-b929-49aa33d46ab0",
      "d110e407-8875-4180-bdec-8dd233b97872",
      "d5ceef0d-3d73-4951-8518-67d507ea892d",
      "8937ca9e-3a5a-49fe-ab75-e4920315c14e",
      "b9b6a7fc-9cb6-4a64-a46e-f67266d6b962",
      "f0d89bc5-5b0c-4fda-b83c-fefdc9ef78f8",
      "d6c97a5d-bcf5-442a-9226-b6f8bd5d242c",
      "b9642820-e2bc-40a5-b7eb-69741268705e",
      "645ce923-856e-4495-883d-c3242dabf22d",
      "f03da329-921e-4990-85b3-a697ae405f2a",
      "1a847852-a192-4d4e-aa0c-8cd44e782433",
      "b5607b00-0ead-4689-958f-3f330dee3b2a",
      "9e7a0184-23e6-448c-99a8-ce7d3855d6b9",
      "45717f5a-32fd-4ca9-9566-b4eb07fd27b6",
      "4a445c1a-589d-435b-b8ce-4d84dfefee85",
      "708fdcac-89e1-431d-b2a3-76c88bc915ed",
      "ebf63aea-e455-4de6-a9ae-6bfc78bbc441"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522745520,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "16cb1fca-7e74-4772-82b2-d75dab534238",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551686839861,
    "parent_id": "a29d7b5a-3989-43f1-8efa-86ef82101f43",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Guaranteed copy elision"
        ]
      ]
    },
    "type": "page",
    "version": 4,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522745514,
        "id": "90f04678-a5a9-483b-b929-49aa33d46ab0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522745514,
        "parent_id": "16cb1fca-7e74-4772-82b2-d75dab534238",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Normally, elision is an optimization. While virtually every compiler support copy elision in the simplest of cases, having elision still places a particular burden on users. Namely, the type who’s copy/move is being elided "
            ],
            [
              "must",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " still have the copy/move operation that was elided."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Normally, elision is an optimization. While virtually every compiler support copy elision in the simplest of cases, having elision still places a particular burden on users. Namely, the type who’s copy/move is being elided "
          },
          {
            "Text": "must",
            "AttrFlags": 4
          },
          {
            "Text": " still have the copy/move operation that was elided."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522745516,
        "id": "d110e407-8875-4180-bdec-8dd233b97872",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522745516,
        "parent_id": "16cb1fca-7e74-4772-82b2-d75dab534238",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522745516,
        "id": "d5ceef0d-3d73-4951-8518-67d507ea892d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522745516,
        "parent_id": "16cb1fca-7e74-4772-82b2-d75dab534238",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "std::mutex a_mutex;\nstd::lock_guard\u003cstd::mutex\u003e get_lock()\n{\n  return std::lock_guard\u003cstd::mutex\u003e(a_mutex);\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "std::mutex a_mutex;\nstd::lock_guard\u003cstd::mutex\u003e get_lock()\n{\n  return std::lock_guard\u003cstd::mutex\u003e(a_mutex);\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522745516,
        "id": "8937ca9e-3a5a-49fe-ab75-e4920315c14e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522745516,
        "parent_id": "16cb1fca-7e74-4772-82b2-d75dab534238",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This might be useful in cases where "
            ],
            [
              "a_mutex",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is a mutex that is privately held by some system, yet an external user might want to have a scoped lock to it."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This might be useful in cases where "
          },
          {
            "Text": "a_mutex",
            "AttrFlags": 2
          },
          {
            "Text": " is a mutex that is privately held by some system, yet an external user might want to have a scoped lock to it."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522745516,
        "id": "b9b6a7fc-9cb6-4a64-a46e-f67266d6b962",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522745516,
        "parent_id": "16cb1fca-7e74-4772-82b2-d75dab534238",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This is also not legal, because "
            ],
            [
              "std::lock_guard",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " cannot be copied or moved. Even though virtually every C++ compiler will elide the copy/move, the standard still "
            ],
            [
              "requires",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " the type to have that operation available."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This is also not legal, because "
          },
          {
            "Text": "std::lock_guard",
            "AttrFlags": 2
          },
          {
            "Text": " cannot be copied or moved. Even though virtually every C++ compiler will elide the copy/move, the standard still "
          },
          {
            "Text": "requires",
            "AttrFlags": 4
          },
          {
            "Text": " the type to have that operation available."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522745517,
        "id": "f0d89bc5-5b0c-4fda-b83c-fefdc9ef78f8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522745517,
        "parent_id": "16cb1fca-7e74-4772-82b2-d75dab534238",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Until C++17."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Until C++17."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522745517,
        "id": "d6c97a5d-bcf5-442a-9226-b6f8bd5d242c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522745517,
        "parent_id": "16cb1fca-7e74-4772-82b2-d75dab534238",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "C++17 mandates elision by effectively redefining the very meaning of certain expressions so that no copy/moving takes place. Consider the above code."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "C++17 mandates elision by effectively redefining the very meaning of certain expressions so that no copy/moving takes place. Consider the above code."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522745517,
        "id": "b9642820-e2bc-40a5-b7eb-69741268705e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522745517,
        "parent_id": "16cb1fca-7e74-4772-82b2-d75dab534238",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Under pre-C++17 wording, that code says to create a temporary and then use the temporary to copy/move into the return value, but the temporary copy can be elided. Under C++17 wording, that does not create a temporary at all."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Under pre-C++17 wording, that code says to create a temporary and then use the temporary to copy/move into the return value, but the temporary copy can be elided. Under C++17 wording, that does not create a temporary at all."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522745518,
        "id": "645ce923-856e-4495-883d-c3242dabf22d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522745518,
        "parent_id": "16cb1fca-7e74-4772-82b2-d75dab534238",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In C++17, any "
            ],
            [
              "prvalue expression",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%2B%2B/763/value-categories/2603/prvalue#t=201607301613191630536"
                ]
              ]
            ],
            [
              ", when used to initialize an object of the same type as the expression, does not generate a temporary. The expression directly initializes that object. If you return a prvalue of the same type as the return value, then the type need not have a copy/move constructor. And therefore, under C++17 rules, the above code can work."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In C++17, any "
          },
          {
            "Text": "prvalue expression",
            "Link": "http://stackoverflow.com/documentation/c%2B%2B/763/value-categories/2603/prvalue#t=201607301613191630536"
          },
          {
            "Text": ", when used to initialize an object of the same type as the expression, does not generate a temporary. The expression directly initializes that object. If you return a prvalue of the same type as the return value, then the type need not have a copy/move constructor. And therefore, under C++17 rules, the above code can work."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522745519,
        "id": "f03da329-921e-4990-85b3-a697ae405f2a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522745519,
        "parent_id": "16cb1fca-7e74-4772-82b2-d75dab534238",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The C++17 wording works in cases where the prvalue’s type matches the type being initialized. So given "
            ],
            [
              "get_lock",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " above, this will also not require a copy/move:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The C++17 wording works in cases where the prvalue’s type matches the type being initialized. So given "
          },
          {
            "Text": "get_lock",
            "AttrFlags": 2
          },
          {
            "Text": " above, this will also not require a copy/move:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522745519,
        "id": "1a847852-a192-4d4e-aa0c-8cd44e782433",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522745519,
        "parent_id": "16cb1fca-7e74-4772-82b2-d75dab534238",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "std::lock_guard the_lock = get_lock();"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "std::lock_guard the_lock = get_lock();",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522745519,
        "id": "b5607b00-0ead-4689-958f-3f330dee3b2a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522745519,
        "parent_id": "16cb1fca-7e74-4772-82b2-d75dab534238",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Since the result of "
            ],
            [
              "get_lock",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is a prvalue expression being used to initialize an object of the same type, no copying or moving will happen. That expression never creates a temporary; it is used to directly initialize "
            ],
            [
              "the_lock",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". There is no elision because there is no copy/move to be elided elide."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Since the result of "
          },
          {
            "Text": "get_lock",
            "AttrFlags": 2
          },
          {
            "Text": " is a prvalue expression being used to initialize an object of the same type, no copying or moving will happen. That expression never creates a temporary; it is used to directly initialize "
          },
          {
            "Text": "the_lock",
            "AttrFlags": 2
          },
          {
            "Text": ". There is no elision because there is no copy/move to be elided elide."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522745519,
        "id": "9e7a0184-23e6-448c-99a8-ce7d3855d6b9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522745519,
        "parent_id": "16cb1fca-7e74-4772-82b2-d75dab534238",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The term “guaranteed copy elision” is therefore something of a misnomer, but "
            ],
            [
              "that is the name of the feature as it is proposed for C++17 standardization",
              [
                [
                  "a",
                  "http://wg21.link/P0135"
                ]
              ]
            ],
            [
              ". It does not guarantee elision at all; it "
            ],
            [
              "eliminates",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " the copy/move altogether, redefining C++ so that there never was a copy/move to be elided."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The term “guaranteed copy elision” is therefore something of a misnomer, but "
          },
          {
            "Text": "that is the name of the feature as it is proposed for C++17 standardization",
            "Link": "http://wg21.link/P0135"
          },
          {
            "Text": ". It does not guarantee elision at all; it "
          },
          {
            "Text": "eliminates",
            "AttrFlags": 4
          },
          {
            "Text": " the copy/move altogether, redefining C++ so that there never was a copy/move to be elided."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522745520,
        "id": "45717f5a-32fd-4ca9-9566-b4eb07fd27b6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522745520,
        "parent_id": "16cb1fca-7e74-4772-82b2-d75dab534238",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This feature only works in cases involving a prvalue expression. As such, this uses the usual elision rules:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This feature only works in cases involving a prvalue expression. As such, this uses the usual elision rules:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522745520,
        "id": "4a445c1a-589d-435b-b8ce-4d84dfefee85",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522745520,
        "parent_id": "16cb1fca-7e74-4772-82b2-d75dab534238",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "std::mutex a_mutex;\nstd::lock_guard\u003cstd::mutex\u003e get_lock()\n{\n  std::lock_guard\u003cstd::mutex\u003e my_lock(a_mutex);\n  //Do stuff\n  return my_lock;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "std::mutex a_mutex;\nstd::lock_guard\u003cstd::mutex\u003e get_lock()\n{\n  std::lock_guard\u003cstd::mutex\u003e my_lock(a_mutex);\n  //Do stuff\n  return my_lock;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522745520,
        "id": "708fdcac-89e1-431d-b2a3-76c88bc915ed",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522745520,
        "parent_id": "16cb1fca-7e74-4772-82b2-d75dab534238",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "While this is a valid case for copy elision, C++17 rules do not "
            ],
            [
              "eliminate",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " the copy/move in this case. As such, the type must still have a copy/move constructor to use to initialize the return value. And since "
            ],
            [
              "lock_guard",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " does not, this is still a compile error. Implementations are allowed to refuse to elide copies when passing or returning an object of trivially-copyable type. This is to allow moving such objects around in registers, which some ABIs might mandate in their calling conventions."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "While this is a valid case for copy elision, C++17 rules do not "
          },
          {
            "Text": "eliminate",
            "AttrFlags": 4
          },
          {
            "Text": " the copy/move in this case. As such, the type must still have a copy/move constructor to use to initialize the return value. And since "
          },
          {
            "Text": "lock_guard",
            "AttrFlags": 2
          },
          {
            "Text": " does not, this is still a compile error. Implementations are allowed to refuse to elide copies when passing or returning an object of trivially-copyable type. This is to allow moving such objects around in registers, which some ABIs might mandate in their calling conventions."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522745520,
        "id": "ebf63aea-e455-4de6-a9ae-6bfc78bbc441",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522745520,
        "parent_id": "16cb1fca-7e74-4772-82b2-d75dab534238",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "struct trivially_copyable {\n    int a;  \n};\n\nvoid foo (trivially_copyable a) {}\n\nfoo(trivially_copyable{}); //copy elision not mandated"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "struct trivially_copyable {\n    int a;  \n};\n\nvoid foo (trivially_copyable a) {}\n\nfoo(trivially_copyable{}); //copy elision not mandated",
        "code_language": "Plain Text"
      }
    ],
    "title": "Guaranteed copy elision",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}