{
  "ID": "46c7fe43-58dc-4150-b746-9fdda11bbd01",
  "Root": {
    "alive": true,
    "content": [
      "da4572f3-8620-4aeb-86e5-311d0a03821a",
      "d4d6a6f7-c2bd-4ad1-aee1-68398dfec50f",
      "fc8c3667-f080-4821-8d56-b9b35e93dc8d",
      "a694723c-eb5b-4fca-8601-89d5deafaadd",
      "e6c0a14e-0842-4e1f-b12c-67def6139ece",
      "b86f52b9-26bb-4357-9420-0a82ff2a9683",
      "6a833c15-d0e7-4ad6-bf4a-2e71b5122630",
      "57a6ffe2-39ea-4bfe-8b0b-d2ea91f68be0",
      "d29354ca-265c-4ed6-9e34-c0850c3630b9",
      "3845071a-a1b0-447a-8c24-2412d075ea51"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522334474,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "46c7fe43-58dc-4150-b746-9fdda11bbd01",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552298640000,
    "parent_id": "5a1044bb-eec6-47e0-932c-1a000fc67e20",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Catching exceptions"
        ]
      ]
    },
    "type": "page",
    "version": 9,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522334469,
        "id": "da4572f3-8620-4aeb-86e5-311d0a03821a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522334469,
        "parent_id": "46c7fe43-58dc-4150-b746-9fdda11bbd01",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A "
            ],
            [
              "try/catch",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " block is used to catch exceptions. The code in the "
            ],
            [
              "try",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " section is the code that may throw an exception, and the code in the "
            ],
            [
              "catch",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " clause(s) handles the exception."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A "
          },
          {
            "Text": "try/catch",
            "AttrFlags": 2
          },
          {
            "Text": " block is used to catch exceptions. The code in the "
          },
          {
            "Text": "try",
            "AttrFlags": 2
          },
          {
            "Text": " section is the code that may throw an exception, and the code in the "
          },
          {
            "Text": "catch",
            "AttrFlags": 2
          },
          {
            "Text": " clause(s) handles the exception."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522334472,
        "id": "d4d6a6f7-c2bd-4ad1-aee1-68398dfec50f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552298640000,
        "parent_id": "46c7fe43-58dc-4150-b746-9fdda11bbd01",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "#include \u003ciostream\u003e\n#include \u003cstring\u003e\n#include \u003cstdexcept\u003e\n\nint main() {\n  std::string str(\"foo\");\n  \n  try {\n      str.at(10); // access element, may throw std::out_of_range\n  } catch (const std::out_of_range\u0026 e) {\n      // what() is inherited from std::exception and contains an explanatory message\n      std::cout \u003c\u003c e.what();\n  }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "#include \u003ciostream\u003e\n#include \u003cstring\u003e\n#include \u003cstdexcept\u003e\n\nint main() {\n  std::string str(\"foo\");\n  \n  try {\n      str.at(10); // access element, may throw std::out_of_range\n  } catch (const std::out_of_range\u0026 e) {\n      // what() is inherited from std::exception and contains an explanatory message\n      std::cout \u003c\u003c e.what();\n  }\n}",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522334473,
        "id": "fc8c3667-f080-4821-8d56-b9b35e93dc8d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522334473,
        "parent_id": "46c7fe43-58dc-4150-b746-9fdda11bbd01",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Multiple "
            ],
            [
              "catch",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " clauses may be used to handle multiple exception types. If multiple "
            ],
            [
              "catch",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " clauses are present, the exception handling mechanism tries to match them "
            ],
            [
              "in order",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " of their appearance in the code:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Multiple "
          },
          {
            "Text": "catch",
            "AttrFlags": 2
          },
          {
            "Text": " clauses may be used to handle multiple exception types. If multiple "
          },
          {
            "Text": "catch",
            "AttrFlags": 2
          },
          {
            "Text": " clauses are present, the exception handling mechanism tries to match them "
          },
          {
            "Text": "in order",
            "AttrFlags": 1
          },
          {
            "Text": " of their appearance in the code:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522334473,
        "id": "a694723c-eb5b-4fca-8601-89d5deafaadd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552298640000,
        "parent_id": "46c7fe43-58dc-4150-b746-9fdda11bbd01",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "std::string str(\"foo\");\n  \ntry {\n    str.reserve(2); // reserve extra capacity, may throw std::length_error\n    str.at(10); // access element, may throw std::out_of_range\n} catch (const std::length_error\u0026 e) {\n    std::cout \u003c\u003c e.what();\n} catch (const std::out_of_range\u0026 e) {\n    std::cout \u003c\u003c e.what();\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "std::string str(\"foo\");\n  \ntry {\n    str.reserve(2); // reserve extra capacity, may throw std::length_error\n    str.at(10); // access element, may throw std::out_of_range\n} catch (const std::length_error\u0026 e) {\n    std::cout \u003c\u003c e.what();\n} catch (const std::out_of_range\u0026 e) {\n    std::cout \u003c\u003c e.what();\n}",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522334473,
        "id": "e6c0a14e-0842-4e1f-b12c-67def6139ece",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522334473,
        "parent_id": "46c7fe43-58dc-4150-b746-9fdda11bbd01",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Exception classes which are derived from a common base class can be caught with a single "
            ],
            [
              "catch",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " clause for the common base class. The above example can replace the two "
            ],
            [
              "catch",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " clauses for "
            ],
            [
              "std::length_error",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "std::out_of_range",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " with a single clause for "
            ],
            [
              "std:exception",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Exception classes which are derived from a common base class can be caught with a single "
          },
          {
            "Text": "catch",
            "AttrFlags": 2
          },
          {
            "Text": " clause for the common base class. The above example can replace the two "
          },
          {
            "Text": "catch",
            "AttrFlags": 2
          },
          {
            "Text": " clauses for "
          },
          {
            "Text": "std::length_error",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "std::out_of_range",
            "AttrFlags": 2
          },
          {
            "Text": " with a single clause for "
          },
          {
            "Text": "std:exception",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522334473,
        "id": "b86f52b9-26bb-4357-9420-0a82ff2a9683",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552298640000,
        "parent_id": "46c7fe43-58dc-4150-b746-9fdda11bbd01",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "std::string str(\"foo\");\n  \ntry {\n    str.reserve(2); // reserve extra capacity, may throw std::length_error\n    str.at(10); // access element, may throw std::out_of_range\n} catch (const std::exception\u0026 e) {\n    std::cout \u003c\u003c e.what();\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "std::string str(\"foo\");\n  \ntry {\n    str.reserve(2); // reserve extra capacity, may throw std::length_error\n    str.at(10); // access element, may throw std::out_of_range\n} catch (const std::exception\u0026 e) {\n    std::cout \u003c\u003c e.what();\n}",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522334473,
        "id": "6a833c15-d0e7-4ad6-bf4a-2e71b5122630",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522334473,
        "parent_id": "46c7fe43-58dc-4150-b746-9fdda11bbd01",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Because the "
            ],
            [
              "catch",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " clauses are tried in order, be sure to write more specific catch clauses first, otherwise your exception handling code might never get called:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Because the "
          },
          {
            "Text": "catch",
            "AttrFlags": 2
          },
          {
            "Text": " clauses are tried in order, be sure to write more specific catch clauses first, otherwise your exception handling code might never get called:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522334474,
        "id": "57a6ffe2-39ea-4bfe-8b0b-d2ea91f68be0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552298640000,
        "parent_id": "46c7fe43-58dc-4150-b746-9fdda11bbd01",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "try {\n    /* Code throwing exceptions omitted. */\n} catch (const std::exception\u0026 e) {\n    /* Handle all exceptions of type std::exception. */\n} catch (const std::runtime_error\u0026 e) {\n    /* This block of code will never execute, because std::runtime_error inherits\n       from std::exception, and all exceptions of type std::exception were already\n       caught by the previous catch clause. */\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "try {\n    /* Code throwing exceptions omitted. */\n} catch (const std::exception\u0026 e) {\n    /* Handle all exceptions of type std::exception. */\n} catch (const std::runtime_error\u0026 e) {\n    /* This block of code will never execute, because std::runtime_error inherits\n       from std::exception, and all exceptions of type std::exception were already\n       caught by the previous catch clause. */\n}",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522334474,
        "id": "d29354ca-265c-4ed6-9e34-c0850c3630b9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522334474,
        "parent_id": "46c7fe43-58dc-4150-b746-9fdda11bbd01",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Another possibility is the catch-all handler, which will catch any thrown object:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Another possibility is the catch-all handler, which will catch any thrown object:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522334474,
        "id": "3845071a-a1b0-447a-8c24-2412d075ea51",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552298640000,
        "parent_id": "46c7fe43-58dc-4150-b746-9fdda11bbd01",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "try {\n    throw 10;\n} catch (...) {\n    std::cout \u003c\u003c \"caught an exception\";\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "try {\n    throw 10;\n} catch (...) {\n    std::cout \u003c\u003c \"caught an exception\";\n}",
        "code_language": "C++"
      }
    ],
    "title": "Catching exceptions",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}