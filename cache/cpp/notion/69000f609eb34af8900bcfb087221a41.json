{
  "ID": "69000f60-9eb3-4af8-900b-cfb087221a41",
  "Root": {
    "alive": true,
    "content": [
      "5a06a647-b3d6-40d0-b5d9-0999cd4c5979",
      "fb3f150b-10b5-4dae-b02d-19ef25d54555",
      "f6890ec3-7900-4b32-a0b4-81ab69f86bf2",
      "886a6ca8-58d6-482f-bba3-9565d3941477",
      "8d609f96-3d00-4794-85f7-f35e4f087993",
      "8b9c37ce-1223-4376-8e69-62f3738de5c8",
      "542d1cc7-d7e2-4778-9ee2-ec93da53e654",
      "fc40358b-e052-4f59-8918-f1c8b442cc9c"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522050522,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "69000f60-9eb3-4af8-900b-cfb087221a41",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550655840000,
    "parent_id": "8655f492-9c51-4f68-ad52-8b6c1e02a277",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Using std::vector as a C array"
        ]
      ]
    },
    "type": "page",
    "version": 11,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522050517,
        "id": "5a06a647-b3d6-40d0-b5d9-0999cd4c5979",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522050517,
        "parent_id": "69000f60-9eb3-4af8-900b-cfb087221a41",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "There are several ways to use a "
            ],
            [
              "std::vector",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " as a C array (for example, for compatibility with C libraries). This is possible because the elements in a vector are stored contiguously."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "There are several ways to use a "
          },
          {
            "Text": "std::vector",
            "AttrFlags": 2
          },
          {
            "Text": " as a C array (for example, for compatibility with C libraries). This is possible because the elements in a vector are stored contiguously."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522050520,
        "id": "fb3f150b-10b5-4dae-b02d-19ef25d54555",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522050520,
        "parent_id": "69000f60-9eb3-4af8-900b-cfb087221a41",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "std::vector\u003cint\u003e v{ 1, 2, 3 };\nint* p = v.data();"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "std::vector\u003cint\u003e v{ 1, 2, 3 };\nint* p = v.data();",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522050520,
        "id": "f6890ec3-7900-4b32-a0b4-81ab69f86bf2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522050520,
        "parent_id": "69000f60-9eb3-4af8-900b-cfb087221a41",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In contrast to solutions based on previous C++ standards (see below), the member function "
            ],
            [
              ".data()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " may also be applied to empty vectors, because it doesn’t cause undefined behavior in this case."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In contrast to solutions based on previous C++ standards (see below), the member function "
          },
          {
            "Text": ".data()",
            "AttrFlags": 2
          },
          {
            "Text": " may also be applied to empty vectors, because it doesn’t cause undefined behavior in this case."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522050520,
        "id": "886a6ca8-58d6-482f-bba3-9565d3941477",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522050520,
        "parent_id": "69000f60-9eb3-4af8-900b-cfb087221a41",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Before C++11, you would take the address of the vector’s first element to get an equivalent pointer, if the vector isn’t empty, these both methods are interchangeable:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Before C++11, you would take the address of the vector’s first element to get an equivalent pointer, if the vector isn’t empty, these both methods are interchangeable:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522050520,
        "id": "8d609f96-3d00-4794-85f7-f35e4f087993",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522050520,
        "parent_id": "69000f60-9eb3-4af8-900b-cfb087221a41",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int* p = \u0026v[0];      // combine subscript operator and 0 literal\n\nint* p = \u0026v.front(); // explicitly reference the first element"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int* p = \u0026v[0];      // combine subscript operator and 0 literal\n\nint* p = \u0026v.front(); // explicitly reference the first element",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522050520,
        "id": "8b9c37ce-1223-4376-8e69-62f3738de5c8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522050520,
        "parent_id": "69000f60-9eb3-4af8-900b-cfb087221a41",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note:",
              [
                [
                  "b"
                ],
                [
                  "i"
                ]
              ]
            ],
            [
              " If the vector is empty, "
            ],
            [
              "v[0]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "v.front()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " are undefined and cannot be used."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note:",
            "AttrFlags": 5
          },
          {
            "Text": " If the vector is empty, "
          },
          {
            "Text": "v[0]",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "v.front()",
            "AttrFlags": 2
          },
          {
            "Text": " are undefined and cannot be used."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522050522,
        "id": "542d1cc7-d7e2-4778-9ee2-ec93da53e654",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522050522,
        "parent_id": "69000f60-9eb3-4af8-900b-cfb087221a41",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When storing the base address of the vector’s data, note that many operations (such as "
            ],
            [
              "push_back",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "resize",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", etc.) can change the data memory location of the vector, thus "
            ],
            [
              "invalidating previous data pointers",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%2B%2B/511/stdvector/1914/iterator-pointer-invalidation"
                ]
              ]
            ],
            [
              ". For example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When storing the base address of the vector’s data, note that many operations (such as "
          },
          {
            "Text": "push_back",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "resize",
            "AttrFlags": 2
          },
          {
            "Text": ", etc.) can change the data memory location of the vector, thus "
          },
          {
            "Text": "invalidating previous data pointers",
            "Link": "http://stackoverflow.com/documentation/c%2B%2B/511/stdvector/1914/iterator-pointer-invalidation"
          },
          {
            "Text": ". For example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522050522,
        "id": "fc40358b-e052-4f59-8918-f1c8b442cc9c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522050522,
        "parent_id": "69000f60-9eb3-4af8-900b-cfb087221a41",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "std::vector\u003cint\u003e v;\nint* p = v.data();\nv.resize(42);      // internal memory location changed; value of p is now invalid"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "std::vector\u003cint\u003e v;\nint* p = v.data();\nv.resize(42);      // internal memory location changed; value of p is now invalid",
        "code_language": "Plain Text"
      }
    ],
    "title": "Using std::vector as a C array",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}