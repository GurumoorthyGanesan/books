{
  "ID": "8695463f-8fa3-40d9-909e-bf5e51818ac8",
  "Root": {
    "alive": true,
    "content": [
      "3912d403-de4c-48a0-b72a-7ee429004c57",
      "c4b41693-863f-4105-8b8a-2e75e43398a3",
      "3030c109-2d3b-42ff-bb7c-c5451e3dab1e"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522273484,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "8695463f-8fa3-40d9-909e-bf5e51818ac8",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552344720000,
    "parent_id": "50a27510-120b-4da0-9ecb-cf15396a0108",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Iterating over std::map or std::multimap"
        ]
      ]
    },
    "type": "page",
    "version": 17,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522273483,
        "id": "3912d403-de4c-48a0-b72a-7ee429004c57",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522273483,
        "parent_id": "8695463f-8fa3-40d9-909e-bf5e51818ac8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "std::map",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "std::multimap",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " could be traversed by the following ways:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "std::map",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "std::multimap",
            "AttrFlags": 2
          },
          {
            "Text": " could be traversed by the following ways:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522273483,
        "id": "c4b41693-863f-4105-8b8a-2e75e43398a3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552344720000,
        "parent_id": "8695463f-8fa3-40d9-909e-bf5e51818ac8",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "std::multimap\u003c int , int \u003e mmp{ {1, 2}, {3, 4}, {6, 5}, {8, 9}, {3, 4}, {6, 7} };\n                               \n//Range based loop - since C++11\nfor(const auto \u0026x: mmp) \n    std::cout\u003c\u003c x.first \u003c\u003c\":\"\u003c\u003c x.second \u003c\u003c std::endl;\n\n//Forward iterator for loop: it would loop through first element to last element\n//it will be a std::map\u003c int, int \u003e::iterator\nfor (auto it = mmp.begin(); it != mmp.end(); ++it)\nstd::cout\u003c\u003c it-\u003efirst \u003c\u003c\":\"\u003c\u003c it-\u003esecond \u003c\u003c std::endl; //Do something with iterator\n\n//Backward iterator for loop: it would loop through last element to first element\n//it will be a std::map\u003c int, int \u003e::reverse_iterator\nfor (auto it = mmp.rbegin(); it != mmp.rend(); ++it)\nstd::cout\u003c\u003c it-\u003efirst \u003c\u003c\" \"\u003c\u003c it-\u003esecond \u003c\u003c std::endl; //Do something with iterator"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "std::multimap\u003c int , int \u003e mmp{ {1, 2}, {3, 4}, {6, 5}, {8, 9}, {3, 4}, {6, 7} };\n                               \n//Range based loop - since C++11\nfor(const auto \u0026x: mmp) \n    std::cout\u003c\u003c x.first \u003c\u003c\":\"\u003c\u003c x.second \u003c\u003c std::endl;\n\n//Forward iterator for loop: it would loop through first element to last element\n//it will be a std::map\u003c int, int \u003e::iterator\nfor (auto it = mmp.begin(); it != mmp.end(); ++it)\nstd::cout\u003c\u003c it-\u003efirst \u003c\u003c\":\"\u003c\u003c it-\u003esecond \u003c\u003c std::endl; //Do something with iterator\n\n//Backward iterator for loop: it would loop through last element to first element\n//it will be a std::map\u003c int, int \u003e::reverse_iterator\nfor (auto it = mmp.rbegin(); it != mmp.rend(); ++it)\nstd::cout\u003c\u003c it-\u003efirst \u003c\u003c\" \"\u003c\u003c it-\u003esecond \u003c\u003c std::endl; //Do something with iterator",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522273484,
        "id": "3030c109-2d3b-42ff-bb7c-c5451e3dab1e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522273484,
        "parent_id": "8695463f-8fa3-40d9-909e-bf5e51818ac8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "While iterating over a "
            ],
            [
              "std::map",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or a "
            ],
            [
              "std::multimap",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", the use of "
            ],
            [
              "auto",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is preferred to avoid useless implicit conversions (see "
            ],
            [
              "this SO answer",
              [
                [
                  "a",
                  "http://stackoverflow.com/questions/32510183/can-the-use-of-c11s-auto-improve-performance"
                ]
              ]
            ],
            [
              " for more details)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "While iterating over a "
          },
          {
            "Text": "std::map",
            "AttrFlags": 2
          },
          {
            "Text": " or a "
          },
          {
            "Text": "std::multimap",
            "AttrFlags": 2
          },
          {
            "Text": ", the use of "
          },
          {
            "Text": "auto",
            "AttrFlags": 2
          },
          {
            "Text": " is preferred to avoid useless implicit conversions (see "
          },
          {
            "Text": "this SO answer",
            "Link": "http://stackoverflow.com/questions/32510183/can-the-use-of-c11s-auto-improve-performance"
          },
          {
            "Text": " for more details)."
          }
        ]
      }
    ],
    "title": "Iterating over std::map or std::multimap",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}