{
  "ID": "eb03bd60-2121-4c88-8941-0bc6b4b2fb75",
  "Root": {
    "alive": true,
    "content": [
      "ebe5a850-1690-4366-a603-56f546f3e549",
      "f73591ba-e621-4f2b-9c63-e7f6fba8d48e",
      "c41a8680-3a73-438d-bc85-a178525c200e",
      "4b4323c9-e522-4677-bc78-bd28ad17ab5b",
      "43da0483-33a9-4e1a-a51a-13d9bb24c0cf",
      "81818051-7f4d-4369-ad13-4f83f453d983",
      "8eb9cd62-fd14-477f-8d58-df9008fde1cd",
      "16d225b9-75c2-44c1-90e6-bbafd5ecba40",
      "ca698eee-2550-489d-af56-2f83037b34c0",
      "892802ca-d3f8-4d4a-b1d9-652c8fb9de95"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522319752,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "eb03bd60-2121-4c88-8941-0bc6b4b2fb75",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550709540000,
    "parent_id": "eb50f34f-bfa8-4e16-9ad9-d114eb1d34d9",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Self-assignment Protection"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522319749,
        "id": "ebe5a850-1690-4366-a603-56f546f3e549",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522319749,
        "parent_id": "eb03bd60-2121-4c88-8941-0bc6b4b2fb75",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When writing a copy assignment operator, it is "
            ],
            [
              "very",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " important that it be able to work in the event of self-assignment. That is, it has to allow this:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When writing a copy assignment operator, it is "
          },
          {
            "Text": "very",
            "AttrFlags": 4
          },
          {
            "Text": " important that it be able to work in the event of self-assignment. That is, it has to allow this:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522319750,
        "id": "f73591ba-e621-4f2b-9c63-e7f6fba8d48e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522319750,
        "parent_id": "eb03bd60-2121-4c88-8941-0bc6b4b2fb75",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "SomeType t = ...;\nt = t;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "SomeType t = ...;\nt = t;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522319750,
        "id": "c41a8680-3a73-438d-bc85-a178525c200e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522319750,
        "parent_id": "eb03bd60-2121-4c88-8941-0bc6b4b2fb75",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Self-assignment usually doesn’t happen in such an obvious way. It typically happens via a circuitous route through various code systems, where the location of the assignment simply has two "
            ],
            [
              "Person",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " pointers or references and has no idea that they are the same object."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Self-assignment usually doesn’t happen in such an obvious way. It typically happens via a circuitous route through various code systems, where the location of the assignment simply has two "
          },
          {
            "Text": "Person",
            "AttrFlags": 2
          },
          {
            "Text": " pointers or references and has no idea that they are the same object."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522319750,
        "id": "4b4323c9-e522-4677-bc78-bd28ad17ab5b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522319750,
        "parent_id": "eb03bd60-2121-4c88-8941-0bc6b4b2fb75",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Any copy assignment operator you write must be able to take this into account."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Any copy assignment operator you write must be able to take this into account."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522319751,
        "id": "43da0483-33a9-4e1a-a51a-13d9bb24c0cf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522319751,
        "parent_id": "eb03bd60-2121-4c88-8941-0bc6b4b2fb75",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The typical way to do so is to wrap all of the assignment logic in a condition like this:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The typical way to do so is to wrap all of the assignment logic in a condition like this:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522319751,
        "id": "81818051-7f4d-4369-ad13-4f83f453d983",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522319751,
        "parent_id": "eb03bd60-2121-4c88-8941-0bc6b4b2fb75",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "SomeType \u0026operator=(const SomeType \u0026other)\n{\n    if(this != \u0026other)\n    {\n        //Do assignment logic.\n    }\n    return *this;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "SomeType \u0026operator=(const SomeType \u0026other)\n{\n    if(this != \u0026other)\n    {\n        //Do assignment logic.\n    }\n    return *this;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522319751,
        "id": "8eb9cd62-fd14-477f-8d58-df9008fde1cd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522319751,
        "parent_id": "eb03bd60-2121-4c88-8941-0bc6b4b2fb75",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note:",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " It is important to think about self-assignment and ensure that your code behaves correctly when it happens. However, self-assignment is a very rare occurrence and optimizing to prevent it may actually pessimize the normal case. Since the normal case is much more common, pessimizing for self-assignment may well reduce your code efficiency (so be careful using it)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note:",
            "AttrFlags": 1
          },
          {
            "Text": " It is important to think about self-assignment and ensure that your code behaves correctly when it happens. However, self-assignment is a very rare occurrence and optimizing to prevent it may actually pessimize the normal case. Since the normal case is much more common, pessimizing for self-assignment may well reduce your code efficiency (so be careful using it)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522319751,
        "id": "16d225b9-75c2-44c1-90e6-bbafd5ecba40",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522319751,
        "parent_id": "eb03bd60-2121-4c88-8941-0bc6b4b2fb75",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As an example, the normal technique for implementing the assignment operator is the "
            ],
            [
              "copy and swap idiom",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". The normal implementation of this technique does not bother to test for self-assignment (even though self-assignment is expensive because a copy is made). The reason is that pessimization of the normal case has been shown to be much more costly (as it happens more often)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "As an example, the normal technique for implementing the assignment operator is the "
          },
          {
            "Text": "copy and swap idiom",
            "AttrFlags": 2
          },
          {
            "Text": ". The normal implementation of this technique does not bother to test for self-assignment (even though self-assignment is expensive because a copy is made). The reason is that pessimization of the normal case has been shown to be much more costly (as it happens more often)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522319751,
        "id": "ca698eee-2550-489d-af56-2f83037b34c0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522319751,
        "parent_id": "eb03bd60-2121-4c88-8941-0bc6b4b2fb75",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Move assignment operators must also be protected against self-assignment. However, the logic for many such operators is based on "
            ],
            [
              "std::swap",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", which can handle swapping from/to the same memory just fine. So if your move assignment logic is nothing more than a series of swap operations, then you do not need self-assignment protection."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Move assignment operators must also be protected against self-assignment. However, the logic for many such operators is based on "
          },
          {
            "Text": "std::swap",
            "AttrFlags": 2
          },
          {
            "Text": ", which can handle swapping from/to the same memory just fine. So if your move assignment logic is nothing more than a series of swap operations, then you do not need self-assignment protection."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522319751,
        "id": "892802ca-d3f8-4d4a-b1d9-652c8fb9de95",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522319751,
        "parent_id": "eb03bd60-2121-4c88-8941-0bc6b4b2fb75",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If this is not the case, you "
            ],
            [
              "must",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " take similar measures as above."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If this is not the case, you "
          },
          {
            "Text": "must",
            "AttrFlags": 4
          },
          {
            "Text": " take similar measures as above."
          }
        ]
      }
    ],
    "title": "Self-assignment Protection",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}