{
  "ID": "ee86edbe-8dd9-497a-a24c-fa516272404e",
  "Root": {
    "alive": true,
    "content": [
      "49e49864-f1f8-4983-9e17-2105f2157082",
      "9bdd5ec2-29ad-4c16-94cc-11e85e26dcae",
      "730bd5ca-40ed-4e31-9edb-2d86dc670b75",
      "483e8828-4855-4ca0-9689-3a831fd49d45",
      "f661282a-a868-4958-a028-571c9c7594ad",
      "7b746678-b078-47df-af5d-ded97c5eeaa5",
      "962a6229-3fdd-4da5-b76e-a3ab2e958262",
      "e1e5a676-6aaa-4765-b634-5b124319ec7c",
      "9f072590-16dd-42ce-b5f9-c69b85789fc8",
      "d8c35064-dc0d-4af8-a66b-6b8d6289d9e7",
      "be48f50c-4aa2-4148-8f3f-707f739689b0",
      "f5a9fa75-c001-4578-987f-ddf43d5272af",
      "9a5c999c-de2a-46ea-a807-a26824105938",
      "e5415100-dabc-49b1-a4fe-b0f78b1867c2",
      "5e652df7-3eed-47aa-9a2b-a6f0abb4c4a7",
      "5a9ca51a-e064-4e27-98ef-63f72454e647",
      "2cd6932e-9241-4d4a-a8fc-b7b57afde11a",
      "caf75cff-399f-4f44-bb2b-d0ebb0231330",
      "fb69458f-68e8-4d47-bd05-68d9b3c1c992",
      "26198b95-2237-441a-ad5b-0e628d067688",
      "aede31d5-5def-47ab-9292-6219c16e13ba",
      "1e126a6b-c020-4cc5-9fb9-c610836d8630",
      "6cf24e97-23ff-4761-8ce6-c376a3be9a64",
      "fa7bf8e0-7135-40ec-ad6f-eaea775b317e",
      "6a8ca654-5d4b-4025-ac57-0b70bb3d56b7",
      "98a736bb-96e4-4e4f-b752-7a9ef2fcf142",
      "55a3da2d-e4ee-426d-a736-f4daf3d7507a",
      "6587702f-8f14-49f3-a7d2-e14534ed2883",
      "7339e2a0-67e8-45c9-8a51-e776717b65b2",
      "2d016462-c68a-4534-94cc-7969f537d083",
      "49efd601-e0dc-4c7f-adc1-754e799da550",
      "bf1399f3-fac3-44bc-bdbb-df77f452d323",
      "6481d07b-5985-46d3-8361-16e7b0eb23b6",
      "7f6a341c-dbff-41a5-98f1-18e284acb8f9",
      "6c55a9a9-15bd-4913-b821-b1db75512732",
      "cf09bc27-a612-4d35-9139-06bcb50cc35f",
      "9086cf38-ba14-495b-a418-d97d76006205",
      "8cbeed4b-217b-4b0b-a7b1-bf4b9e9e0b4d",
      "e3399af0-834a-49fb-b710-56d68dbe30f1",
      "fedd8af6-c3a4-4929-9b71-998370e3dfcf",
      "965ba988-dfa3-45ee-b7d4-222151318906",
      "6cf34f2c-e6e8-4386-8d0d-9c3b70dae7b6",
      "c6ed93e0-15ee-427c-ac50-411267545d64",
      "9b3938da-7f5f-4fcb-b2d9-9a5806f26b03",
      "4f8f4602-2e4d-4016-b96c-f65b22a8e2b6",
      "88291400-0c77-4535-93d8-92dd63ef7a2a",
      "0413552c-5882-422a-b481-48431647a2db",
      "cad48f9e-36b3-43af-98ba-053fe1d06d75",
      "9451d0ed-da1a-4ba8-966e-e2bd9bbb9075",
      "6b9e3cbe-6c1b-4b0a-8555-5916f5bfb5dc",
      "6f0f9f91-85f0-4b37-aff3-b4b40936a473",
      "1abaca68-4e7a-416c-9431-ad93d9e80622",
      "d05f05a6-1dda-497b-84b2-961dbedbfafb",
      "47eceb6b-259b-4d36-b434-26490eccd8c6"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550521920000,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "ee86edbe-8dd9-497a-a24c-fa516272404e",
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552346100000,
    "parent_id": "ad527dc6-d4a7-420b-9234-94d0b9bfb560",
    "parent_table": "block",
    "permissions": [
      {
        "role": "editor",
        "type": "user_permission",
        "user_id": "bb760e2d-d679-4b64-b2a9-03005b21870a"
      }
    ],
    "properties": {
      "title": [
        [
          "Iterators"
        ]
      ]
    },
    "type": "page",
    "version": 88,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521967619,
        "id": "49e49864-f1f8-4983-9e17-2105f2157082",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550778600000,
        "parent_id": "ee86edbe-8dd9-497a-a24c-fa516272404e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Iterators are Positions"
            ]
          ]
        },
        "type": "header",
        "version": 3,
        "inline_content": [
          {
            "Text": "Iterators are Positions"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521967622,
        "id": "9bdd5ec2-29ad-4c16-94cc-11e85e26dcae",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550778600000,
        "parent_id": "ee86edbe-8dd9-497a-a24c-fa516272404e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Iterators are a means of navigating and operating on a sequence of elements and are a generalized extension of pointers. Conceptually it is important to remember that iterators are positions, not elements. For example, take the following sequence:"
            ]
          ]
        },
        "type": "text",
        "version": 3,
        "inline_content": [
          {
            "Text": "Iterators are a means of navigating and operating on a sequence of elements and are a generalized extension of pointers. Conceptually it is important to remember that iterators are positions, not elements. For example, take the following sequence:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521967622,
        "id": "730bd5ca-40ed-4e31-9edb-2d86dc670b75",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550778600000,
        "parent_id": "ee86edbe-8dd9-497a-a24c-fa516272404e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "A B C"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "A B C",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521967622,
        "id": "483e8828-4855-4ca0-9689-3a831fd49d45",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550778600000,
        "parent_id": "ee86edbe-8dd9-497a-a24c-fa516272404e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The sequence contains three elements and four positions"
            ]
          ]
        },
        "type": "text",
        "version": 3,
        "inline_content": [
          {
            "Text": "The sequence contains three elements and four positions"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521967622,
        "id": "f661282a-a868-4958-a028-571c9c7594ad",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550778600000,
        "parent_id": "ee86edbe-8dd9-497a-a24c-fa516272404e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "+---+---+---+---+\n| A | B | C |   |\n+---+---+---+---+"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "+---+---+---+---+\n| A | B | C |   |\n+---+---+---+---+",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521967623,
        "id": "7b746678-b078-47df-af5d-ded97c5eeaa5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550778600000,
        "parent_id": "ee86edbe-8dd9-497a-a24c-fa516272404e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Elements are things within a sequence. Positions are places where meaningful operations can happen to the sequence. For example, one inserts into a position, "
            ],
            [
              "before",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "after",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " element A, not into an element. Even deletion of an element ("
            ],
            [
              "erase(A)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") is done by first finding its position, then deleting it."
            ]
          ]
        },
        "type": "text",
        "version": 3,
        "inline_content": [
          {
            "Text": "Elements are things within a sequence. Positions are places where meaningful operations can happen to the sequence. For example, one inserts into a position, "
          },
          {
            "Text": "before",
            "AttrFlags": 4
          },
          {
            "Text": " or "
          },
          {
            "Text": "after",
            "AttrFlags": 4
          },
          {
            "Text": " element A, not into an element. Even deletion of an element ("
          },
          {
            "Text": "erase(A)",
            "AttrFlags": 2
          },
          {
            "Text": ") is done by first finding its position, then deleting it."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521967623,
        "id": "962a6229-3fdd-4da5-b76e-a3ab2e958262",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550778600000,
        "parent_id": "ee86edbe-8dd9-497a-a24c-fa516272404e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "From Iterators to Values"
            ]
          ]
        },
        "type": "header",
        "version": 3,
        "inline_content": [
          {
            "Text": "From Iterators to Values"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521967623,
        "id": "e1e5a676-6aaa-4765-b634-5b124319ec7c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550778600000,
        "parent_id": "ee86edbe-8dd9-497a-a24c-fa516272404e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To convert from a position to a value, an iterator is "
            ],
            [
              "dereferenced",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 3,
        "inline_content": [
          {
            "Text": "To convert from a position to a value, an iterator is "
          },
          {
            "Text": "dereferenced",
            "AttrFlags": 4
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521967623,
        "id": "9f072590-16dd-42ce-b5f9-c69b85789fc8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552345920000,
        "parent_id": "ee86edbe-8dd9-497a-a24c-fa516272404e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "auto my_iterator = my_vector.begin(); // position\nauto my_value = *my_iterator; // value"
            ]
          ]
        },
        "type": "code",
        "version": 5,
        "code": "auto my_iterator = my_vector.begin(); // position\nauto my_value = *my_iterator; // value",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521967623,
        "id": "d8c35064-dc0d-4af8-a66b-6b8d6289d9e7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550778600000,
        "parent_id": "ee86edbe-8dd9-497a-a24c-fa516272404e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "One can think of an iterator as dereferencing to the value it refers to in the sequence. This is especially useful in understanding why you should never dereference the "
            ],
            [
              "end()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " iterator in a sequence:"
            ]
          ]
        },
        "type": "text",
        "version": 3,
        "inline_content": [
          {
            "Text": "One can think of an iterator as dereferencing to the value it refers to in the sequence. This is especially useful in understanding why you should never dereference the "
          },
          {
            "Text": "end()",
            "AttrFlags": 2
          },
          {
            "Text": " iterator in a sequence:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521967623,
        "id": "be48f50c-4aa2-4148-8f3f-707f739689b0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550778600000,
        "parent_id": "ee86edbe-8dd9-497a-a24c-fa516272404e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "+---+---+---+---+\n| A | B | C |   |\n+---+---+---+---+\n  ↑           ↑\n  |           +-- An iterator here has no value. Do not dereference it!\n  +-------------- An iterator here dereferences to the value A."
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "+---+---+---+---+\n| A | B | C |   |\n+---+---+---+---+\n  ↑           ↑\n  |           +-- An iterator here has no value. Do not dereference it!\n  +-------------- An iterator here dereferences to the value A.",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521967624,
        "id": "f5a9fa75-c001-4578-987f-ddf43d5272af",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550778600000,
        "parent_id": "ee86edbe-8dd9-497a-a24c-fa516272404e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In all the sequences and containers found in the C++ standard library, "
            ],
            [
              "begin()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will return an iterator to the first position, and "
            ],
            [
              "end()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will return an iterator to one past the last position ("
            ],
            [
              "not",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " the last position!). Consequently, the names of these iterators in algorithms are oftentimes labelled "
            ],
            [
              "first",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "last",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 3,
        "inline_content": [
          {
            "Text": "In all the sequences and containers found in the C++ standard library, "
          },
          {
            "Text": "begin()",
            "AttrFlags": 2
          },
          {
            "Text": " will return an iterator to the first position, and "
          },
          {
            "Text": "end()",
            "AttrFlags": 2
          },
          {
            "Text": " will return an iterator to one past the last position ("
          },
          {
            "Text": "not",
            "AttrFlags": 4
          },
          {
            "Text": " the last position!). Consequently, the names of these iterators in algorithms are oftentimes labelled "
          },
          {
            "Text": "first",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "last",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521967624,
        "id": "9a5c999c-de2a-46ea-a807-a26824105938",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550778600000,
        "parent_id": "ee86edbe-8dd9-497a-a24c-fa516272404e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "+---+---+---+---+\n| A | B | C |   |\n+---+---+---+---+\n  ↑           ↑\n  |           |\n  +- first    +- last"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "+---+---+---+---+\n| A | B | C |   |\n+---+---+---+---+\n  ↑           ↑\n  |           |\n  +- first    +- last",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521967624,
        "id": "e5415100-dabc-49b1-a4fe-b0f78b1867c2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550778600000,
        "parent_id": "ee86edbe-8dd9-497a-a24c-fa516272404e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It is also possible to obtain an iterator to "
            ],
            [
              "any sequence",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ", because even an empty sequence contains at least one position:"
            ]
          ]
        },
        "type": "text",
        "version": 3,
        "inline_content": [
          {
            "Text": "It is also possible to obtain an iterator to "
          },
          {
            "Text": "any sequence",
            "AttrFlags": 4
          },
          {
            "Text": ", because even an empty sequence contains at least one position:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521967624,
        "id": "5e652df7-3eed-47aa-9a2b-a6f0abb4c4a7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550778600000,
        "parent_id": "ee86edbe-8dd9-497a-a24c-fa516272404e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "+---+\n|   |\n+---+"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "+---+\n|   |\n+---+",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521967624,
        "id": "5a9ca51a-e064-4e27-98ef-63f72454e647",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550778600000,
        "parent_id": "ee86edbe-8dd9-497a-a24c-fa516272404e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In an empty sequence, "
            ],
            [
              "begin()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "end()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will be the same position, and "
            ],
            [
              "neither",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " can be dereferenced:"
            ]
          ]
        },
        "type": "text",
        "version": 3,
        "inline_content": [
          {
            "Text": "In an empty sequence, "
          },
          {
            "Text": "begin()",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "end()",
            "AttrFlags": 2
          },
          {
            "Text": " will be the same position, and "
          },
          {
            "Text": "neither",
            "AttrFlags": 4
          },
          {
            "Text": " can be dereferenced:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521967624,
        "id": "2cd6932e-9241-4d4a-a8fc-b7b57afde11a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550778600000,
        "parent_id": "ee86edbe-8dd9-497a-a24c-fa516272404e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "+---+\n|   |\n+---+\n  ↑\n  |\n  +- empty_sequence.begin()\n  |\n  +- empty_sequence.end()"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "+---+\n|   |\n+---+\n  ↑\n  |\n  +- empty_sequence.begin()\n  |\n  +- empty_sequence.end()",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521967625,
        "id": "caf75cff-399f-4f44-bb2b-d0ebb0231330",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550778600000,
        "parent_id": "ee86edbe-8dd9-497a-a24c-fa516272404e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The alternative visualization of iterators is that they mark the positions "
            ],
            [
              "between",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " elements:"
            ]
          ]
        },
        "type": "text",
        "version": 3,
        "inline_content": [
          {
            "Text": "The alternative visualization of iterators is that they mark the positions "
          },
          {
            "Text": "between",
            "AttrFlags": 4
          },
          {
            "Text": " elements:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521967625,
        "id": "fb69458f-68e8-4d47-bd05-68d9b3c1c992",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550778600000,
        "parent_id": "ee86edbe-8dd9-497a-a24c-fa516272404e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "+---+---+---+\n| A | B | C |\n+---+---+---+\n↑   ^   ^   ↑\n|           |\n+- first    +- last"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "+---+---+---+\n| A | B | C |\n+---+---+---+\n↑   ^   ^   ↑\n|           |\n+- first    +- last",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521967625,
        "id": "26198b95-2237-441a-ad5b-0e628d067688",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550778600000,
        "parent_id": "ee86edbe-8dd9-497a-a24c-fa516272404e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "and dereferencing an iterator returns a reference to the element coming after the iterator. Some situations where this view is particularly useful are:"
            ]
          ]
        },
        "type": "text",
        "version": 3,
        "inline_content": [
          {
            "Text": "and dereferencing an iterator returns a reference to the element coming after the iterator. Some situations where this view is particularly useful are:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521967626,
        "id": "aede31d5-5def-47ab-9292-6219c16e13ba",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550778600000,
        "parent_id": "ee86edbe-8dd9-497a-a24c-fa516272404e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "insert",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " operations will insert elements into the position indicated by the iterator,"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 3,
        "inline_content": [
          {
            "Text": "insert",
            "AttrFlags": 2
          },
          {
            "Text": " operations will insert elements into the position indicated by the iterator,"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521967626,
        "id": "1e126a6b-c020-4cc5-9fb9-c610836d8630",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550778600000,
        "parent_id": "ee86edbe-8dd9-497a-a24c-fa516272404e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "erase",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " operations will return an iterator corresponding to the same position as the one passed in,"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 3,
        "inline_content": [
          {
            "Text": "erase",
            "AttrFlags": 2
          },
          {
            "Text": " operations will return an iterator corresponding to the same position as the one passed in,"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521967628,
        "id": "6cf24e97-23ff-4761-8ce6-c376a3be9a64",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550778600000,
        "parent_id": "ee86edbe-8dd9-497a-a24c-fa516272404e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "an iterator and its corresponding "
            ],
            [
              "reverse iterator",
              [
                [
                  "a",
                  "https://stackoverflow.com/documentation/c%2B%2B/473/iterators/5101/reverse-iterators#t=201610021532190324666"
                ]
              ]
            ],
            [
              " are located in the same .position between elements"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 3,
        "inline_content": [
          {
            "Text": "an iterator and its corresponding "
          },
          {
            "Text": "reverse iterator",
            "Link": "https://stackoverflow.com/documentation/c%2B%2B/473/iterators/5101/reverse-iterators#t=201610021532190324666"
          },
          {
            "Text": " are located in the same .position between elements"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521967629,
        "id": "fa7bf8e0-7135-40ec-ad6f-eaea775b317e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550778600000,
        "parent_id": "ee86edbe-8dd9-497a-a24c-fa516272404e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Invalid Iterators"
            ]
          ]
        },
        "type": "header",
        "version": 3,
        "inline_content": [
          {
            "Text": "Invalid Iterators"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521967629,
        "id": "6a8ca654-5d4b-4025-ac57-0b70bb3d56b7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550778600000,
        "parent_id": "ee86edbe-8dd9-497a-a24c-fa516272404e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "An iterator becomes "
            ],
            [
              "invalidated",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " if (say, in the course of an operation) its position is no longer a part of a sequence. An invalidated iterator cannot be dereferenced until it has been reassigned to a valid position. For example:"
            ]
          ]
        },
        "type": "text",
        "version": 3,
        "inline_content": [
          {
            "Text": "An iterator becomes "
          },
          {
            "Text": "invalidated",
            "AttrFlags": 4
          },
          {
            "Text": " if (say, in the course of an operation) its position is no longer a part of a sequence. An invalidated iterator cannot be dereferenced until it has been reassigned to a valid position. For example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521967629,
        "id": "98a736bb-96e4-4e4f-b752-7a9ef2fcf142",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550778660000,
        "parent_id": "ee86edbe-8dd9-497a-a24c-fa516272404e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "std::vector\u003cint\u003e::iterator first;\n{\n    std::vector\u003cint\u003e foo;\n    first = foo.begin(); // first is now valid\n} // foo falls out of scope and is destroyed\n// At this point first is now invalid"
            ]
          ]
        },
        "type": "code",
        "version": 5,
        "code": "std::vector\u003cint\u003e::iterator first;\n{\n    std::vector\u003cint\u003e foo;\n    first = foo.begin(); // first is now valid\n} // foo falls out of scope and is destroyed\n// At this point first is now invalid",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521967629,
        "id": "55a3da2d-e4ee-426d-a736-f4daf3d7507a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550778600000,
        "parent_id": "ee86edbe-8dd9-497a-a24c-fa516272404e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The many algorithms and sequence member functions in the C++ standard library have rules governing when iterators are invalidated. Each algorithm is different in the way they treat (and invalidate) iterators."
            ]
          ]
        },
        "type": "text",
        "version": 3,
        "inline_content": [
          {
            "Text": "The many algorithms and sequence member functions in the C++ standard library have rules governing when iterators are invalidated. Each algorithm is different in the way they treat (and invalidate) iterators."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521967629,
        "id": "6587702f-8f14-49f3-a7d2-e14534ed2883",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550778600000,
        "parent_id": "ee86edbe-8dd9-497a-a24c-fa516272404e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Navigating with Iterators"
            ]
          ]
        },
        "type": "header",
        "version": 3,
        "inline_content": [
          {
            "Text": "Navigating with Iterators"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521967629,
        "id": "7339e2a0-67e8-45c9-8a51-e776717b65b2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550778600000,
        "parent_id": "ee86edbe-8dd9-497a-a24c-fa516272404e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As we know, iterators are for navigating sequences. In order to do that an iterator must migrate its position throughout the sequence. Iterators can advance forward in the sequence and some can advance backwards:"
            ]
          ]
        },
        "type": "text",
        "version": 3,
        "inline_content": [
          {
            "Text": "As we know, iterators are for navigating sequences. In order to do that an iterator must migrate its position throughout the sequence. Iterators can advance forward in the sequence and some can advance backwards:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521967629,
        "id": "2d016462-c68a-4534-94cc-7969f537d083",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550778660000,
        "parent_id": "ee86edbe-8dd9-497a-a24c-fa516272404e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "auto first = my_vector.begin();\n++first;                                             // advance the iterator 1 position\nstd::advance(first, 1);                              // advance the iterator 1 position\nfirst = std::next(first);                            // returns iterator to the next element\nstd::advance(first, -1);                             // advance the iterator 1 position backwards\nfirst = std::next(first, 20);                        // returns iterator to the element 20 position forward\nfirst = std::prev(first, 5);                         // returns iterator to the element 5 position backward\nauto dist = std::distance(my_vector.begin(), first); // returns distance between two iterators."
            ]
          ]
        },
        "type": "code",
        "version": 5,
        "code": "auto first = my_vector.begin();\n++first;                                             // advance the iterator 1 position\nstd::advance(first, 1);                              // advance the iterator 1 position\nfirst = std::next(first);                            // returns iterator to the next element\nstd::advance(first, -1);                             // advance the iterator 1 position backwards\nfirst = std::next(first, 20);                        // returns iterator to the element 20 position forward\nfirst = std::prev(first, 5);                         // returns iterator to the element 5 position backward\nauto dist = std::distance(my_vector.begin(), first); // returns distance between two iterators.",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521967630,
        "id": "49efd601-e0dc-4c7f-adc1-754e799da550",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550778600000,
        "parent_id": "ee86edbe-8dd9-497a-a24c-fa516272404e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note, second argument of std::distance should be reachable from the first one(or, in other words "
            ],
            [
              "first",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " should be less or equal than "
            ],
            [
              "second",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ")."
            ]
          ]
        },
        "type": "text",
        "version": 3,
        "inline_content": [
          {
            "Text": "Note, second argument of std::distance should be reachable from the first one(or, in other words "
          },
          {
            "Text": "first",
            "AttrFlags": 2
          },
          {
            "Text": " should be less or equal than "
          },
          {
            "Text": "second",
            "AttrFlags": 2
          },
          {
            "Text": ")."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521967630,
        "id": "bf1399f3-fac3-44bc-bdbb-df77f452d323",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550778600000,
        "parent_id": "ee86edbe-8dd9-497a-a24c-fa516272404e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Even though you can perform arithmetic operators with iterators, not all operations are defined for all types of iterators. "
            ],
            [
              "a = b + 3;",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " would work for Random Access Iterators, but wouldn’t work for Forward or Bidirectional Iterators, which still can be advanced by 3 position with something like "
            ],
            [
              "b = a; ++b; ++b; ++b;",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". So it is recommended to use special functions in case you are not sure what is iterator type (for example, in a template function accepting iterator)."
            ]
          ]
        },
        "type": "text",
        "version": 3,
        "inline_content": [
          {
            "Text": "Even though you can perform arithmetic operators with iterators, not all operations are defined for all types of iterators. "
          },
          {
            "Text": "a = b + 3;",
            "AttrFlags": 2
          },
          {
            "Text": " would work for Random Access Iterators, but wouldn’t work for Forward or Bidirectional Iterators, which still can be advanced by 3 position with something like "
          },
          {
            "Text": "b = a; ++b; ++b; ++b;",
            "AttrFlags": 2
          },
          {
            "Text": ". So it is recommended to use special functions in case you are not sure what is iterator type (for example, in a template function accepting iterator)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521967630,
        "id": "6481d07b-5985-46d3-8361-16e7b0eb23b6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550778600000,
        "parent_id": "ee86edbe-8dd9-497a-a24c-fa516272404e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Iterator Concepts"
            ]
          ]
        },
        "type": "header",
        "version": 3,
        "inline_content": [
          {
            "Text": "Iterator Concepts"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521967630,
        "id": "7f6a341c-dbff-41a5-98f1-18e284acb8f9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550778600000,
        "parent_id": "ee86edbe-8dd9-497a-a24c-fa516272404e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The C++ standard describes several different iterator concepts. These are grouped according to how they behave in the sequences they refer to. If you know the concept an iterator "
            ],
            [
              "models",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " (behaves like), you can be assured of the behavior of that iterator "
            ],
            [
              "regardless of the sequence to which it belongs",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ". They are often described in order from the most to least restrictive (because the next iterator concept is a step better than its predecessor):"
            ]
          ]
        },
        "type": "text",
        "version": 3,
        "inline_content": [
          {
            "Text": "The C++ standard describes several different iterator concepts. These are grouped according to how they behave in the sequences they refer to. If you know the concept an iterator "
          },
          {
            "Text": "models",
            "AttrFlags": 4
          },
          {
            "Text": " (behaves like), you can be assured of the behavior of that iterator "
          },
          {
            "Text": "regardless of the sequence to which it belongs",
            "AttrFlags": 4
          },
          {
            "Text": ". They are often described in order from the most to least restrictive (because the next iterator concept is a step better than its predecessor):"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521967631,
        "id": "6c55a9a9-15bd-4913-b821-b1db75512732",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550778600000,
        "parent_id": "ee86edbe-8dd9-497a-a24c-fa516272404e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Input Iterators : Can be dereferenced "
            ],
            [
              "only once",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " per position. Can only advance, and only one position at a time."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 3,
        "inline_content": [
          {
            "Text": "Input Iterators : Can be dereferenced "
          },
          {
            "Text": "only once",
            "AttrFlags": 4
          },
          {
            "Text": " per position. Can only advance, and only one position at a time."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521967631,
        "id": "cf09bc27-a612-4d35-9139-06bcb50cc35f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550778600000,
        "parent_id": "ee86edbe-8dd9-497a-a24c-fa516272404e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Forward Iterators : An input iterator that can be dereferenced any number of times."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 3,
        "inline_content": [
          {
            "Text": "Forward Iterators : An input iterator that can be dereferenced any number of times."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521967631,
        "id": "9086cf38-ba14-495b-a418-d97d76006205",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550778600000,
        "parent_id": "ee86edbe-8dd9-497a-a24c-fa516272404e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Bidirectional Iterators : A forward iterator that can also advance "
            ],
            [
              "backwards",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " one position at a time."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 3,
        "inline_content": [
          {
            "Text": "Bidirectional Iterators : A forward iterator that can also advance "
          },
          {
            "Text": "backwards",
            "AttrFlags": 4
          },
          {
            "Text": " one position at a time."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521967631,
        "id": "8cbeed4b-217b-4b0b-a7b1-bf4b9e9e0b4d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550778600000,
        "parent_id": "ee86edbe-8dd9-497a-a24c-fa516272404e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Random Access Iterators : A bidirectional iterator that can advance forwards or backwards any number of positions at a time."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 3,
        "inline_content": [
          {
            "Text": "Random Access Iterators : A bidirectional iterator that can advance forwards or backwards any number of positions at a time."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521967632,
        "id": "e3399af0-834a-49fb-b710-56d68dbe30f1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550778600000,
        "parent_id": "ee86edbe-8dd9-497a-a24c-fa516272404e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Contiguous Iterators (since C++17) : A random access iterator that guaranties that underlying data is contiguous in memory."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 3,
        "inline_content": [
          {
            "Text": "Contiguous Iterators (since C++17) : A random access iterator that guaranties that underlying data is contiguous in memory."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521967632,
        "id": "fedd8af6-c3a4-4929-9b71-998370e3dfcf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550778600000,
        "parent_id": "ee86edbe-8dd9-497a-a24c-fa516272404e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Algorithms can vary depending on the concept modeled by the iterators they are given. For example, although "
            ],
            [
              "random_shuffle",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can be implemented for forward iterators, a more efficient variant that requires random access iterators could be provided."
            ]
          ]
        },
        "type": "text",
        "version": 3,
        "inline_content": [
          {
            "Text": "Algorithms can vary depending on the concept modeled by the iterators they are given. For example, although "
          },
          {
            "Text": "random_shuffle",
            "AttrFlags": 2
          },
          {
            "Text": " can be implemented for forward iterators, a more efficient variant that requires random access iterators could be provided."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521967632,
        "id": "965ba988-dfa3-45ee-b7d4-222151318906",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550778600000,
        "parent_id": "ee86edbe-8dd9-497a-a24c-fa516272404e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Iterator traits"
            ]
          ]
        },
        "type": "header",
        "version": 3,
        "inline_content": [
          {
            "Text": "Iterator traits"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521967632,
        "id": "6cf34f2c-e6e8-4386-8d0d-9c3b70dae7b6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550778600000,
        "parent_id": "ee86edbe-8dd9-497a-a24c-fa516272404e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Iterator traits provide uniform interface to the properties of iterators. They allow you to retrieve value, difference, pointer, reference types and also category of iterator:"
            ]
          ]
        },
        "type": "text",
        "version": 3,
        "inline_content": [
          {
            "Text": "Iterator traits provide uniform interface to the properties of iterators. They allow you to retrieve value, difference, pointer, reference types and also category of iterator:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521967632,
        "id": "c6ed93e0-15ee-427c-ac50-411267545d64",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550778660000,
        "parent_id": "ee86edbe-8dd9-497a-a24c-fa516272404e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "template\u003cclass Iter\u003e\nIter find(Iter first, Iter last, typename std::iterator_traits\u003cIter\u003e::value_type val)  {\n    while (first != last) {\n        if (*first == val)\n            return first;\n        ++first;\n    }\n    return last;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 5,
        "code": "template\u003cclass Iter\u003e\nIter find(Iter first, Iter last, typename std::iterator_traits\u003cIter\u003e::value_type val)  {\n    while (first != last) {\n        if (*first == val)\n            return first;\n        ++first;\n    }\n    return last;\n}",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521967632,
        "id": "9b3938da-7f5f-4fcb-b2d9-9a5806f26b03",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550778600000,
        "parent_id": "ee86edbe-8dd9-497a-a24c-fa516272404e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Category of iterator can be used to specialize algorithms:"
            ]
          ]
        },
        "type": "text",
        "version": 3,
        "inline_content": [
          {
            "Text": "Category of iterator can be used to specialize algorithms:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521967632,
        "id": "4f8f4602-2e4d-4016-b96c-f65b22a8e2b6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550778660000,
        "parent_id": "ee86edbe-8dd9-497a-a24c-fa516272404e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "template\u003cclass BidirIt\u003e\nvoid test(BidirIt a, std::bidirectional_iterator_tag)  {\n    std::cout \u003c\u003c \"Bidirectional iterator is used\" \u003c\u003c std::endl;\n}\n \ntemplate\u003cclass ForwIt\u003e\nvoid test(ForwIt a, std::forward_iterator_tag)  {\n    std::cout \u003c\u003c \"Forward iterator is used\" \u003c\u003c std::endl;\n}\n \ntemplate\u003cclass Iter\u003e\nvoid test(Iter a)  {\n    test(a, typename std::iterator_traits\u003cIter\u003e::iterator_category());\n}"
            ]
          ]
        },
        "type": "code",
        "version": 5,
        "code": "template\u003cclass BidirIt\u003e\nvoid test(BidirIt a, std::bidirectional_iterator_tag)  {\n    std::cout \u003c\u003c \"Bidirectional iterator is used\" \u003c\u003c std::endl;\n}\n \ntemplate\u003cclass ForwIt\u003e\nvoid test(ForwIt a, std::forward_iterator_tag)  {\n    std::cout \u003c\u003c \"Forward iterator is used\" \u003c\u003c std::endl;\n}\n \ntemplate\u003cclass Iter\u003e\nvoid test(Iter a)  {\n    test(a, typename std::iterator_traits\u003cIter\u003e::iterator_category());\n}",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521967632,
        "id": "88291400-0c77-4535-93d8-92dd63ef7a2a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550778600000,
        "parent_id": "ee86edbe-8dd9-497a-a24c-fa516272404e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Categories of iterators are basically iterators concepts, except Contiguous Iterators don’t have their own tag, since it was found to break code."
            ]
          ]
        },
        "type": "text",
        "version": 3,
        "inline_content": [
          {
            "Text": "Categories of iterators are basically iterators concepts, except Contiguous Iterators don’t have their own tag, since it was found to break code."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552345920000,
        "id": "0413552c-5882-422a-b481-48431647a2db",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552345920000,
        "parent_id": "ee86edbe-8dd9-497a-a24c-fa516272404e",
        "parent_table": "block",
        "type": "text",
        "version": 4
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521968491,
        "format": {
          "page_full_width": true,
          "page_small_text": true
        },
        "id": "cad48f9e-36b3-43af-98ba-053fe1d06d75",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552345980000,
        "parent_id": "ee86edbe-8dd9-497a-a24c-fa516272404e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "std::vector iterator"
            ]
          ]
        },
        "type": "page",
        "version": 19,
        "title": "std::vector iterator",
        "format_page": {
          "page_cover": "",
          "page_cover_position": 0,
          "page_font": "",
          "page_full_width": true,
          "page_icon": "",
          "page_small_text": true
        }
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521969475,
        "format": {
          "page_full_width": true,
          "page_small_text": true
        },
        "id": "9451d0ed-da1a-4ba8-966e-e2bd9bbb9075",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552345980000,
        "parent_id": "ee86edbe-8dd9-497a-a24c-fa516272404e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "std::map iterator"
            ]
          ]
        },
        "type": "page",
        "version": 19,
        "title": "std::map iterator",
        "format_page": {
          "page_cover": "",
          "page_cover_position": 0,
          "page_font": "",
          "page_full_width": true,
          "page_icon": "",
          "page_small_text": true
        }
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521970536,
        "format": {
          "page_full_width": true,
          "page_small_text": true
        },
        "id": "6b9e3cbe-6c1b-4b0a-8555-5916f5bfb5dc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552345980000,
        "parent_id": "ee86edbe-8dd9-497a-a24c-fa516272404e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Reverse iterators"
            ]
          ]
        },
        "type": "page",
        "version": 14,
        "title": "Reverse iterators",
        "format_page": {
          "page_cover": "",
          "page_cover_position": 0,
          "page_font": "",
          "page_full_width": true,
          "page_icon": "",
          "page_small_text": true
        }
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521971410,
        "format": {
          "page_full_width": true,
          "page_small_text": true
        },
        "id": "6f0f9f91-85f0-4b37-aff3-b4b40936a473",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550778720000,
        "parent_id": "ee86edbe-8dd9-497a-a24c-fa516272404e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Stream Iterators"
            ]
          ]
        },
        "type": "page",
        "version": 9,
        "title": "Stream Iterators",
        "format_page": {
          "page_cover": "",
          "page_cover_position": 0,
          "page_font": "",
          "page_full_width": true,
          "page_icon": "",
          "page_small_text": true
        }
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521972515,
        "format": {
          "page_full_width": true,
          "page_small_text": true
        },
        "id": "1abaca68-4e7a-416c-9431-ad93d9e80622",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550778780000,
        "parent_id": "ee86edbe-8dd9-497a-a24c-fa516272404e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "C iterators (pointers)"
            ]
          ]
        },
        "type": "page",
        "version": 23,
        "title": "C iterators (pointers)",
        "format_page": {
          "page_cover": "",
          "page_cover_position": 0,
          "page_font": "",
          "page_full_width": true,
          "page_icon": "",
          "page_small_text": true
        }
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521973562,
        "format": {
          "page_full_width": true,
          "page_small_text": true
        },
        "id": "d05f05a6-1dda-497b-84b2-961dbedbfafb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550778780000,
        "parent_id": "ee86edbe-8dd9-497a-a24c-fa516272404e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Write your own generator-backed iterator"
            ]
          ]
        },
        "type": "page",
        "version": 10,
        "title": "Write your own generator-backed iterator",
        "format_page": {
          "page_cover": "",
          "page_cover_position": 0,
          "page_font": "",
          "page_full_width": true,
          "page_icon": "",
          "page_small_text": true
        }
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550778660000,
        "id": "47eceb6b-259b-4d36-b434-26490eccd8c6",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550778660000,
        "parent_id": "ee86edbe-8dd9-497a-a24c-fa516272404e",
        "parent_table": "block",
        "type": "text",
        "version": 3
      }
    ],
    "title": "Iterators",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}