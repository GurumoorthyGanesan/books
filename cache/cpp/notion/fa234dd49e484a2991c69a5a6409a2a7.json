{
  "ID": "fa234dd4-9e48-4a29-91c6-9a5a6409a2a7",
  "Root": {
    "alive": true,
    "content": [
      "ee6c3817-017c-4dae-9508-3cb98636fa89",
      "c5688dcc-7383-4e32-96c0-bcebf6b888ec",
      "fa71539c-6175-45f2-a6fc-b6c9aca12ec8",
      "3907d62b-d7ce-4881-9aff-c8ae730b1f97",
      "0a7b796d-687b-45e7-9de5-6791bee6d946",
      "301b6ecd-da01-4876-8752-b40337e865d9",
      "71faa38d-ece2-4259-a5a5-a28d1fa51e59",
      "a551ccee-c48a-4db3-9bdf-696f1743af52",
      "ff6b479a-3794-4c80-8a08-725d1cc18706"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522391470,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "fa234dd4-9e48-4a29-91c6-9a5a6409a2a7",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550709960000,
    "parent_id": "899c3027-a75e-4a44-9144-10a53c6a2c11",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "sorting with std map ascending and descending"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522391466,
        "id": "ee6c3817-017c-4dae-9508-3cb98636fa89",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522391466,
        "parent_id": "fa234dd4-9e48-4a29-91c6-9a5a6409a2a7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This example sorts elements in "
            ],
            [
              "ascending",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " order of a "
            ],
            [
              "key",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " using a map. You can use any type, including class, instead of "
            ],
            [
              "std::string",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", in the example below."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This example sorts elements in "
          },
          {
            "Text": "ascending",
            "AttrFlags": 1
          },
          {
            "Text": " order of a "
          },
          {
            "Text": "key",
            "AttrFlags": 1
          },
          {
            "Text": " using a map. You can use any type, including class, instead of "
          },
          {
            "Text": "std::string",
            "AttrFlags": 2
          },
          {
            "Text": ", in the example below."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522391468,
        "id": "c5688dcc-7383-4e32-96c0-bcebf6b888ec",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522391468,
        "parent_id": "fa234dd4-9e48-4a29-91c6-9a5a6409a2a7",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003ciostream\u003e\n#include \u003cutility\u003e\n#include \u003cmap\u003e\n\nint main()\n{\n    std::map\u003cdouble, std::string\u003e sorted_map;\n    // Sort the names of the planets according to their size\n    sorted_map.insert(std::make_pair(0.3829, \"Mercury\"));\n    sorted_map.insert(std::make_pair(0.9499, \"Venus\"));\n    sorted_map.insert(std::make_pair(1,      \"Earth\"));\n    sorted_map.insert(std::make_pair(0.532,  \"Mars\"));\n    sorted_map.insert(std::make_pair(10.97,  \"Jupiter\"));\n    sorted_map.insert(std::make_pair(9.14,   \"Saturn\"));\n    sorted_map.insert(std::make_pair(3.981,  \"Uranus\"));\n    sorted_map.insert(std::make_pair(3.865,  \"Neptune\"));\n\n    for (auto const\u0026 entry: sorted_map)\n    {\n        std::cout \u003c\u003c entry.second \u003c\u003c \" (\" \u003c\u003c entry.first \u003c\u003c \" of Earth's radius)\" \u003c\u003c '\\n';\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003ciostream\u003e\n#include \u003cutility\u003e\n#include \u003cmap\u003e\n\nint main()\n{\n    std::map\u003cdouble, std::string\u003e sorted_map;\n    // Sort the names of the planets according to their size\n    sorted_map.insert(std::make_pair(0.3829, \"Mercury\"));\n    sorted_map.insert(std::make_pair(0.9499, \"Venus\"));\n    sorted_map.insert(std::make_pair(1,      \"Earth\"));\n    sorted_map.insert(std::make_pair(0.532,  \"Mars\"));\n    sorted_map.insert(std::make_pair(10.97,  \"Jupiter\"));\n    sorted_map.insert(std::make_pair(9.14,   \"Saturn\"));\n    sorted_map.insert(std::make_pair(3.981,  \"Uranus\"));\n    sorted_map.insert(std::make_pair(3.865,  \"Neptune\"));\n\n    for (auto const\u0026 entry: sorted_map)\n    {\n        std::cout \u003c\u003c entry.second \u003c\u003c \" (\" \u003c\u003c entry.first \u003c\u003c \" of Earth's radius)\" \u003c\u003c '\\n';\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522391469,
        "id": "fa71539c-6175-45f2-a6fc-b6c9aca12ec8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522391469,
        "parent_id": "fa234dd4-9e48-4a29-91c6-9a5a6409a2a7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Output:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Output:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522391469,
        "id": "3907d62b-d7ce-4881-9aff-c8ae730b1f97",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522391469,
        "parent_id": "fa234dd4-9e48-4a29-91c6-9a5a6409a2a7",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Mercury (0.3829 of Earth's radius)\nMars (0.532 of Earth's radius)\nVenus (0.9499 of Earth's radius)\nEarth (1 of Earth's radius)\nNeptune (3.865 of Earth's radius)\nUranus (3.981 of Earth's radius)\nSaturn (9.14 of Earth's radius)\nJupiter (10.97 of Earth's radius)"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Mercury (0.3829 of Earth's radius)\nMars (0.532 of Earth's radius)\nVenus (0.9499 of Earth's radius)\nEarth (1 of Earth's radius)\nNeptune (3.865 of Earth's radius)\nUranus (3.981 of Earth's radius)\nSaturn (9.14 of Earth's radius)\nJupiter (10.97 of Earth's radius)",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522391469,
        "id": "0a7b796d-687b-45e7-9de5-6791bee6d946",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522391469,
        "parent_id": "fa234dd4-9e48-4a29-91c6-9a5a6409a2a7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If entries with equal keys are possible, use "
            ],
            [
              "multimap",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " instead of "
            ],
            [
              "map",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (like in the following example)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If entries with equal keys are possible, use "
          },
          {
            "Text": "multimap",
            "AttrFlags": 2
          },
          {
            "Text": " instead of "
          },
          {
            "Text": "map",
            "AttrFlags": 2
          },
          {
            "Text": " (like in the following example)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522391469,
        "id": "301b6ecd-da01-4876-8752-b40337e865d9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522391469,
        "parent_id": "fa234dd4-9e48-4a29-91c6-9a5a6409a2a7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To sort elements in "
            ],
            [
              "descending",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " manner, declare the map with a proper comparison functor ("
            ],
            [
              "std::greater\u003c\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "):"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To sort elements in "
          },
          {
            "Text": "descending",
            "AttrFlags": 1
          },
          {
            "Text": " manner, declare the map with a proper comparison functor ("
          },
          {
            "Text": "std::greater\u003c\u003e",
            "AttrFlags": 2
          },
          {
            "Text": "):"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522391469,
        "id": "71faa38d-ece2-4259-a5a5-a28d1fa51e59",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522391469,
        "parent_id": "fa234dd4-9e48-4a29-91c6-9a5a6409a2a7",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003ciostream\u003e\n#include \u003cutility\u003e\n#include \u003cmap\u003e\n\nint main()\n{\n    std::multimap\u003cint, std::string, std::greater\u003cint\u003e\u003e sorted_map;\n    // Sort the names of animals in descending order of the number of legs\n    sorted_map.insert(std::make_pair(6,   \"bug\"));\n    sorted_map.insert(std::make_pair(4,   \"cat\"));\n    sorted_map.insert(std::make_pair(100, \"centipede\"));\n    sorted_map.insert(std::make_pair(2,   \"chicken\"));\n    sorted_map.insert(std::make_pair(0,   \"fish\"));\n    sorted_map.insert(std::make_pair(4,   \"horse\"));\n    sorted_map.insert(std::make_pair(8,   \"spider\"));\n\n    for (auto const\u0026 entry: sorted_map)\n    {\n        std::cout \u003c\u003c entry.second \u003c\u003c \" (has \" \u003c\u003c entry.first \u003c\u003c \" legs)\" \u003c\u003c '\\n';\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003ciostream\u003e\n#include \u003cutility\u003e\n#include \u003cmap\u003e\n\nint main()\n{\n    std::multimap\u003cint, std::string, std::greater\u003cint\u003e\u003e sorted_map;\n    // Sort the names of animals in descending order of the number of legs\n    sorted_map.insert(std::make_pair(6,   \"bug\"));\n    sorted_map.insert(std::make_pair(4,   \"cat\"));\n    sorted_map.insert(std::make_pair(100, \"centipede\"));\n    sorted_map.insert(std::make_pair(2,   \"chicken\"));\n    sorted_map.insert(std::make_pair(0,   \"fish\"));\n    sorted_map.insert(std::make_pair(4,   \"horse\"));\n    sorted_map.insert(std::make_pair(8,   \"spider\"));\n\n    for (auto const\u0026 entry: sorted_map)\n    {\n        std::cout \u003c\u003c entry.second \u003c\u003c \" (has \" \u003c\u003c entry.first \u003c\u003c \" legs)\" \u003c\u003c '\\n';\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522391470,
        "id": "a551ccee-c48a-4db3-9bdf-696f1743af52",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522391470,
        "parent_id": "fa234dd4-9e48-4a29-91c6-9a5a6409a2a7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Output"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Output"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522391470,
        "id": "ff6b479a-3794-4c80-8a08-725d1cc18706",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522391470,
        "parent_id": "fa234dd4-9e48-4a29-91c6-9a5a6409a2a7",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "centipede (has 100 legs)\nspider (has 8 legs)\nbug (has 6 legs)\ncat (has 4 legs)\nhorse (has 4 legs)\nchicken (has 2 legs)\nfish (has 0 legs)"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "centipede (has 100 legs)\nspider (has 8 legs)\nbug (has 6 legs)\ncat (has 4 legs)\nhorse (has 4 legs)\nchicken (has 2 legs)\nfish (has 0 legs)",
        "code_language": "Plain Text"
      }
    ],
    "title": "sorting with std map ascending and descending",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}