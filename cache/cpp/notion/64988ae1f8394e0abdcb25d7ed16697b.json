{
  "ID": "64988ae1-f839-4e0a-bdcb-25d7ed16697b",
  "Root": {
    "alive": true,
    "content": [
      "cb3f1518-1794-4c3a-9441-0f50a8fba390",
      "7d3caf52-4f6b-46ea-83ec-94e6f2f15e65",
      "9413ee69-375a-4516-88b0-83a29b5b63d0",
      "3995a62c-3a30-4041-aa54-9fbbc0994552",
      "da47c193-b415-4d4b-a99d-a3df47b1f359"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550523024465,
    "id": "64988ae1-f839-4e0a-bdcb-25d7ed16697b",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550523024465,
    "parent_id": "d3696e4f-8789-4401-af6c-2f073d356228",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "040 Standard user-defined literals for strings"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523024463,
        "id": "cb3f1518-1794-4c3a-9441-0f50a8fba390",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523024463,
        "parent_id": "64988ae1-f839-4e0a-bdcb-25d7ed16697b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Those following string user literals are declared in the "
            ],
            [
              "namespace",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "std::literals::string_literals",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", where both "
            ],
            [
              "literals",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "string_literals",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " are "
            ],
            [
              "inline namespaces",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%2B%2B/495/namespaces/4556/inline-namespace#t=20160725201733952379"
                ]
              ]
            ],
            [
              ". Access to these operators can be gained with "
            ],
            [
              "using namespace std::literals",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "using namespace std::string_literals",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", and "
            ],
            [
              "using namespace std::literals::string_literals",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Those following string user literals are declared in the "
          },
          {
            "Text": "namespace",
            "AttrFlags": 2
          },
          {
            "Text": " "
          },
          {
            "Text": "std::literals::string_literals",
            "AttrFlags": 2
          },
          {
            "Text": ", where both "
          },
          {
            "Text": "literals",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "string_literals",
            "AttrFlags": 2
          },
          {
            "Text": " are "
          },
          {
            "Text": "inline namespaces",
            "Link": "http://stackoverflow.com/documentation/c%2B%2B/495/namespaces/4556/inline-namespace#t=20160725201733952379"
          },
          {
            "Text": ". Access to these operators can be gained with "
          },
          {
            "Text": "using namespace std::literals",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "using namespace std::string_literals",
            "AttrFlags": 2
          },
          {
            "Text": ", and "
          },
          {
            "Text": "using namespace std::literals::string_literals",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523024464,
        "id": "7d3caf52-4f6b-46ea-83ec-94e6f2f15e65",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523024464,
        "parent_id": "64988ae1-f839-4e0a-bdcb-25d7ed16697b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003ccodecvt\u003e\n#include \u003ciostream\u003e\n#include \u003clocale\u003e\n#include \u003cstring\u003e\n\nint main()\n{\n    using namespace std::literals::string_literals;\n\n    std::string s = \"hello world\"s;\n    std::u16string s16 = u\"hello world\"s;\n    std::u32string s32 = U\"hello world\"s;\n    std::wstring ws = L\"hello world\"s;\n    \n    std::cout \u003c\u003c s \u003c\u003c std::endl;\n\n    std::wstring_convert\u003cstd::codecvt_utf8_utf16\u003cchar16_t\u003e, char16_t\u003e utf16conv;\n    std::cout \u003c\u003c utf16conv.to_bytes(s16) \u003c\u003c std::endl;\n\n    std::wstring_convert\u003cstd::codecvt_utf8_utf16\u003cchar32_t\u003e, char32_t\u003e utf32conv;\n    std::cout \u003c\u003c utf32conv.to_bytes(s32) \u003c\u003c std::endl;\n\n    std::wcout \u003c\u003c ws \u003c\u003c std::endl;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003ccodecvt\u003e\n#include \u003ciostream\u003e\n#include \u003clocale\u003e\n#include \u003cstring\u003e\n\nint main()\n{\n    using namespace std::literals::string_literals;\n\n    std::string s = \"hello world\"s;\n    std::u16string s16 = u\"hello world\"s;\n    std::u32string s32 = U\"hello world\"s;\n    std::wstring ws = L\"hello world\"s;\n    \n    std::cout \u003c\u003c s \u003c\u003c std::endl;\n\n    std::wstring_convert\u003cstd::codecvt_utf8_utf16\u003cchar16_t\u003e, char16_t\u003e utf16conv;\n    std::cout \u003c\u003c utf16conv.to_bytes(s16) \u003c\u003c std::endl;\n\n    std::wstring_convert\u003cstd::codecvt_utf8_utf16\u003cchar32_t\u003e, char32_t\u003e utf32conv;\n    std::cout \u003c\u003c utf32conv.to_bytes(s32) \u003c\u003c std::endl;\n\n    std::wcout \u003c\u003c ws \u003c\u003c std::endl;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523024464,
        "id": "9413ee69-375a-4516-88b0-83a29b5b63d0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523024464,
        "parent_id": "64988ae1-f839-4e0a-bdcb-25d7ed16697b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523024465,
        "id": "3995a62c-3a30-4041-aa54-9fbbc0994552",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523024465,
        "parent_id": "64988ae1-f839-4e0a-bdcb-25d7ed16697b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Literal string may containing "
            ],
            [
              "\\0",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Literal string may containing "
          },
          {
            "Text": "\\0",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523024465,
        "id": "da47c193-b415-4d4b-a99d-a3df47b1f359",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523024465,
        "parent_id": "64988ae1-f839-4e0a-bdcb-25d7ed16697b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "std::string s1 = \"foo\\0\\0bar\";  // constructor from C-string: results in \"foo\"s\nstd::string s2 = \"foo\\0\\0bar\"s; // That string contains 2 '\\0' in its middle"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "std::string s1 = \"foo\\0\\0bar\";  // constructor from C-string: results in \"foo\"s\nstd::string s2 = \"foo\\0\\0bar\"s; // That string contains 2 '\\0' in its middle",
        "code_language": "Plain Text"
      }
    ],
    "title": "040 Standard user-defined literals for strings"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}