{
  "ID": "7669d432-eabe-407b-9af5-b34776392fd4",
  "Root": {
    "alive": true,
    "content": [
      "adc2f8f8-3fc1-4008-aba8-b730eb3dc227",
      "c1584e71-abb6-4f20-840b-7033efa72909",
      "d6f30b80-db12-4a2e-a66d-00abb6b9612b",
      "7c06a537-2cc7-4ed7-aa14-5771afc09075",
      "1da94961-a5dc-4d3d-bca9-25a56b0101b7",
      "cfbfabd8-faf7-45dc-93aa-62712f956567"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550523367616,
    "id": "7669d432-eabe-407b-9af5-b34776392fd4",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550523367616,
    "parent_id": "bd2b6b7e-15fe-4593-9be0-b9cb97312af0",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "030 The typeid keyword"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523367614,
        "id": "adc2f8f8-3fc1-4008-aba8-b730eb3dc227",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523367614,
        "parent_id": "7669d432-eabe-407b-9af5-b34776392fd4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "typeid",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "keyword",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%2B%2B/4891/keywords"
                ]
              ]
            ],
            [
              " is a unary operator that yields run-time type information about its operand if the operand’s type is a polymorphic class type. It returns an lvalue of type "
            ],
            [
              "const std::type_info",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Top-level cv-qualification are ignored."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "typeid",
            "AttrFlags": 2
          },
          {
            "Text": " "
          },
          {
            "Text": "keyword",
            "Link": "http://stackoverflow.com/documentation/c%2B%2B/4891/keywords"
          },
          {
            "Text": " is a unary operator that yields run-time type information about its operand if the operand’s type is a polymorphic class type. It returns an lvalue of type "
          },
          {
            "Text": "const std::type_info",
            "AttrFlags": 2
          },
          {
            "Text": ". Top-level cv-qualification are ignored."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523367615,
        "id": "c1584e71-abb6-4f20-840b-7033efa72909",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523367615,
        "parent_id": "7669d432-eabe-407b-9af5-b34776392fd4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "struct Base {\n    virtual ~Base() = default;\n};\nstruct Derived : Base {};\nBase* b = new Derived;\nassert(typeid(*b) == typeid(Derived{})); // OK"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "struct Base {\n    virtual ~Base() = default;\n};\nstruct Derived : Base {};\nBase* b = new Derived;\nassert(typeid(*b) == typeid(Derived{})); // OK",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523367615,
        "id": "d6f30b80-db12-4a2e-a66d-00abb6b9612b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523367615,
        "parent_id": "7669d432-eabe-407b-9af5-b34776392fd4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "typeid",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can also be applied to a type directly. In this case, first top-level references are stripped, then top-level cv-qualification is ignored. Thus, the above example could have been written with "
            ],
            [
              "typeid(Derived)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " instead of "
            ],
            [
              "typeid(Derived{})",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "typeid",
            "AttrFlags": 2
          },
          {
            "Text": " can also be applied to a type directly. In this case, first top-level references are stripped, then top-level cv-qualification is ignored. Thus, the above example could have been written with "
          },
          {
            "Text": "typeid(Derived)",
            "AttrFlags": 2
          },
          {
            "Text": " instead of "
          },
          {
            "Text": "typeid(Derived{})",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523367615,
        "id": "7c06a537-2cc7-4ed7-aa14-5771afc09075",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523367615,
        "parent_id": "7669d432-eabe-407b-9af5-b34776392fd4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "assert(typeid(*b) == typeid(Derived{})); // OK"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "assert(typeid(*b) == typeid(Derived{})); // OK",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523367615,
        "id": "1da94961-a5dc-4d3d-bca9-25a56b0101b7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523367615,
        "parent_id": "7669d432-eabe-407b-9af5-b34776392fd4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If "
            ],
            [
              "typeid",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is applied to any expression that is "
            ],
            [
              "not",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " of polymorphic class type, the operand is not evaluated, and the type info returned is for the static type."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If "
          },
          {
            "Text": "typeid",
            "AttrFlags": 2
          },
          {
            "Text": " is applied to any expression that is "
          },
          {
            "Text": "not",
            "AttrFlags": 4
          },
          {
            "Text": " of polymorphic class type, the operand is not evaluated, and the type info returned is for the static type."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523367615,
        "id": "cfbfabd8-faf7-45dc-93aa-62712f956567",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523367615,
        "parent_id": "7669d432-eabe-407b-9af5-b34776392fd4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "struct Base {\n    // note: no virtual destructor\n};\nstruct Derived : Base {};\nDerived d;\nBase\u0026 b = d;\nassert(typeid(b) == typeid(Base)); // not Derived\nassert(typeid(std::declval\u003cBase\u003e()) == typeid(Base)); // OK because unevaluated"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "struct Base {\n    // note: no virtual destructor\n};\nstruct Derived : Base {};\nDerived d;\nBase\u0026 b = d;\nassert(typeid(b) == typeid(Base)); // not Derived\nassert(typeid(std::declval\u003cBase\u003e()) == typeid(Base)); // OK because unevaluated",
        "code_language": "Plain Text"
      }
    ],
    "title": "030 The typeid keyword"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}