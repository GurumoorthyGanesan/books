{
  "ID": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
  "Root": {
    "alive": true,
    "content": [
      "1b931f3e-43b7-4e4d-a2fb-19e055030738",
      "03bc4e59-38f8-4277-bef3-ce9430787bd3",
      "60e49dfe-8b34-406b-9a82-218472a436a7",
      "5c0eef40-dfa1-4d0e-bfa5-0ab9413a5e63",
      "f6824b6e-7a98-4eee-91e1-7a616a616b7a",
      "c6e23dba-e396-4a91-8a90-1efce7141e2e",
      "916e9575-d77b-442a-8d82-a3da55e5a81a",
      "0688346d-2dcd-4d26-8fa3-d3dd31bd5169",
      "45e2e38d-5459-4003-9aaa-2d73c6ec6fd5",
      "d9a50bc3-9b8a-4314-bf51-7281b4e08e6f",
      "6149860f-d1d0-4b49-974d-85d3168c8709",
      "e84f340d-694b-4681-abd1-6b8ec96f00b8",
      "2a1c422f-e721-4212-a8ec-bd87fe47f09e",
      "e4f00097-21f9-436d-b5da-2147152079d3",
      "c8bf86c2-cdae-417a-bdf3-6aa32e5d454c",
      "4f476c81-266f-4e80-9b4f-625e63736351",
      "b47a2a65-15d3-482d-9560-92487f41a094",
      "b9da2b58-a2a2-4c2f-b47b-f7a01ce14937",
      "d6976a34-7d41-4595-b000-799f25bfddff",
      "67b31d0b-84c8-41fc-a535-ff54d22bb5d7",
      "80d24e05-693a-4b9f-b1cd-bba39df17184",
      "0c744143-b166-496d-8b04-ad4f8b336456",
      "444cf27b-748d-49b8-b936-1fd3ee928bee",
      "631e4ed6-9eea-4771-8c6e-496716a77276",
      "fa378644-5114-4009-aba7-039d9e1a0136",
      "977b5899-dbc1-4b9a-970f-270fe383ae6e",
      "48ef8f13-72eb-46ac-ad21-7570e3900e39",
      "570ebb5d-0793-40a4-95f1-baaf89ccb1db",
      "6fa93150-363f-49c1-aeda-2a02ba2b3dc8",
      "de965dde-81a4-457e-9e60-b83441ec425e",
      "20758384-fe4b-4e5f-b030-dc5f440daee2",
      "394c24c8-4038-4e3b-9b0d-f299b2496ec8",
      "fb796c08-1df7-4686-945e-8527a1ea5c5e",
      "0ee7a065-1c7d-47ce-8ab1-c1841332e30f",
      "5118dba9-14de-4aa3-9622-106320fa9329",
      "b4315e91-b2a9-4c44-ba0e-d7ff43be5f5d",
      "1ed28d75-8e84-40ee-8fed-b04a9932ec77",
      "08d9cc11-2eb6-4b00-93e3-cfa84cfefb01",
      "b13cf07b-b353-4346-ad2b-82c1c2f50003",
      "ff6ee520-6a8a-419f-a7f6-b91e1a45927f",
      "1ce9e432-86a6-4075-bec3-395128293a5a",
      "d6721a52-89cb-4137-ac24-31e2b28c07aa",
      "09956a55-ee7e-46c3-afd5-45ab09e05c05",
      "119d5924-e461-4b22-a499-0742ea7c0b98",
      "ec2cebb1-16ef-4dd0-88a0-bd2587290e1f",
      "30cda86a-0a3c-40db-b1fb-6247934a0b1f",
      "e8e7aeb7-114f-4c0b-9db5-5eec65d3374b",
      "3050df33-36d9-42bb-b634-8a35a2763c3c",
      "a0b88c41-d17e-4920-82b3-7d09dbc8a986",
      "8f4b2ae0-aac1-4be3-9a6e-12c86e982b7b",
      "5743b78e-c26e-425f-bcbe-035a07f85ede",
      "ad995799-7163-4231-8645-f9c70476b753",
      "3cde7375-7523-4cc5-ab66-9e228622edce",
      "f993bcc7-9988-4338-aad2-e71f00b59629",
      "89e3567a-acda-4d8b-94dd-e018910f62f5",
      "db8fcc01-d350-403f-9f10-a8ccabac7cec",
      "2766b617-de24-45a6-a85b-03f3b40127db",
      "c4ef4174-03a6-4f6c-9c4b-14b3351713e3",
      "34d78a5a-9daa-40fd-986a-5455db651242",
      "f015406e-49d7-4627-be51-7eec9e681912",
      "2aad1736-43d2-4a21-ac9e-379c229f7ca6",
      "e132c6a7-0bc9-4a52-a553-93b9f3cf3411",
      "6cad4374-c142-4477-b9d6-2bca85e72b92",
      "c7e63e16-c375-44c6-af4b-eb809d1fef11",
      "f62403f2-1b92-4373-a588-459fed8e2903",
      "dbd9e0a2-93a2-45b3-9a50-fde3b3355153",
      "0e46259a-abbd-42c7-9406-7e3149335f9a",
      "ac3405dd-b030-44b5-b083-5b6fdf3420c4",
      "0c90a122-af0e-46f1-9093-c06e87dc2db0",
      "4be80bcd-9ff0-4f20-aa90-f5b938542404",
      "80c8e896-f65a-40fb-9f77-3e01e3e2d8b6",
      "ce41c34b-8531-4893-9114-cfece4f8f5dd",
      "37905913-6b56-4acb-8863-ee6712a168c5",
      "b97fd879-9c8f-4c0f-885d-9f04bac50af6",
      "9ac1cbb9-9625-4fb7-92d1-c33ddfcb4a17",
      "e6ecf8d1-4d20-43fe-9ca1-20ffa122f767",
      "5946b2a0-05a3-4ec5-8ab8-96ee97ebe0ba",
      "3a73c102-0ea9-474f-8811-4a4675328eaf",
      "8d7d7d2f-acc1-4499-85a6-3ad34ad7b9c6",
      "822285cf-8142-4356-8473-69d588234ab3",
      "da75df98-a88d-402d-be9d-b06842de7602",
      "adad90cc-7d98-48e7-9265-fd40912149a3",
      "dd353b48-78cd-42b6-a8c3-bb8563962e2e",
      "10381cc9-276f-4675-87cf-de9a02be0e29",
      "8aa57987-4c98-445d-95f8-5a753d98d3bb",
      "4cd02d2b-a56f-41a5-bf35-0a2a759d5490",
      "0a498a39-75d9-42a1-9dda-e77fd282b35e",
      "67fc5da1-1768-42fd-9ae0-22a52f1b2719",
      "90889ba2-7d8f-4a80-9762-c95a3da8d733",
      "718135bf-fafd-49df-8237-706127bb3b26",
      "10469b8d-2e2c-4b98-b8a2-c10ffdbf9d87",
      "4d10b4c6-4576-4e25-9e52-0d93cc47ca36",
      "9c5a2c96-d56d-45f0-ac7a-bebaba705608",
      "cc8ca6b4-2251-41f4-880a-2e73b7eb55e9",
      "05febbb9-4c51-4432-840d-60b93763f9f5",
      "21f1c40b-a8e2-464d-99a9-e7e6241051c4",
      "fa1ce894-5531-4806-9397-381e89687862",
      "66d443e1-aa2e-4d45-8d8e-2a64af4b60be",
      "895fa31c-acbd-4ae9-bf7a-ab75959b2c6d",
      "3d6fbd26-82c7-4db7-a152-11122079d2ab",
      "6c46e49d-8573-4a33-842b-63c7f663dcd8",
      "76229fdd-008f-44a2-8ba3-f28cd1eb8e47",
      "4a79a3c1-b5ee-42ea-8b2d-8b20aa33e75a",
      "f5baa875-8ecb-4213-aa5f-aca7ebd2da94",
      "e353c549-9bd0-466b-9114-32b475db5e9d",
      "12045428-e1bc-4c1e-bc42-0336cf226226",
      "da77f371-968a-4888-8985-ece08dec1501",
      "aacb61b6-87a6-4bde-b87e-2dc56db490bc",
      "ef7cfba2-acd0-4a7f-bf7e-ec6552dccb23",
      "057297c1-a8d4-4080-9949-8d737a4fad52"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550523400046,
    "id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550523400046,
    "parent_id": "9a0f90cc-6905-4660-8751-556567fcd897",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "020 Basic expression templates on element-wise algebraic expressions"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400024,
        "id": "1b931f3e-43b7-4e4d-a2fb-19e055030738",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400024,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400025,
        "id": "03bc4e59-38f8-4277-bef3-ce9430787bd3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400025,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Introduction and motivation",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Introduction and motivation",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400027,
        "id": "60e49dfe-8b34-406b-9a82-218472a436a7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400027,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400027,
        "id": "5c0eef40-dfa1-4d0e-bfa5-0ab9413a5e63",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400027,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Expression templates",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " (denoted as "
            ],
            [
              "ETs",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " in the following) are a powerful template meta-programming technique, used to speed-up calculations of sometimes quite expensive expressions. It is widely used in different domains, for example in implementation of linear algebra libraries."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Expression templates",
            "AttrFlags": 1
          },
          {
            "Text": " (denoted as "
          },
          {
            "Text": "ETs",
            "AttrFlags": 1
          },
          {
            "Text": " in the following) are a powerful template meta-programming technique, used to speed-up calculations of sometimes quite expensive expressions. It is widely used in different domains, for example in implementation of linear algebra libraries."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400027,
        "id": "f6824b6e-7a98-4eee-91e1-7a616a616b7a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400027,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For this example, consider the context of linear algebraic computations. More specifically, computations involving only "
            ],
            [
              "element-wise operations",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". This kind of computations are the most basic applications of "
            ],
            [
              "ETs",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", and they serve as a good introduction to how "
            ],
            [
              "ETs",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " work internally."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For this example, consider the context of linear algebraic computations. More specifically, computations involving only "
          },
          {
            "Text": "element-wise operations",
            "AttrFlags": 1
          },
          {
            "Text": ". This kind of computations are the most basic applications of "
          },
          {
            "Text": "ETs",
            "AttrFlags": 1
          },
          {
            "Text": ", and they serve as a good introduction to how "
          },
          {
            "Text": "ETs",
            "AttrFlags": 1
          },
          {
            "Text": " work internally."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400028,
        "id": "c6e23dba-e396-4a91-8a90-1efce7141e2e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400028,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Let’s look at a motivating example. Consider the computation of the expression:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Let’s look at a motivating example. Consider the computation of the expression:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400028,
        "id": "916e9575-d77b-442a-8d82-a3da55e5a81a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400028,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Vector vec_1, vec_2, vec_3;\n\n// Initializing vec_1, vec_2 and vec_3.\n\nVector result = vec_1 + vec_2*vec_3;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Vector vec_1, vec_2, vec_3;\n\n// Initializing vec_1, vec_2 and vec_3.\n\nVector result = vec_1 + vec_2*vec_3;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400028,
        "id": "0688346d-2dcd-4d26-8fa3-d3dd31bd5169",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400028,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Here for the sake of simplicity, I’ll assume that the class "
            ],
            [
              "Vector",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and operation + (vector plus: element-wise plus operation) and operation * (here means vector inner product: also element-wise operation) are both correctly implemented, as how they should be, mathematically."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Here for the sake of simplicity, I’ll assume that the class "
          },
          {
            "Text": "Vector",
            "AttrFlags": 2
          },
          {
            "Text": " and operation + (vector plus: element-wise plus operation) and operation * (here means vector inner product: also element-wise operation) are both correctly implemented, as how they should be, mathematically."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400028,
        "id": "45e2e38d-5459-4003-9aaa-2d73c6ec6fd5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400028,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In a conventional implementation without using "
            ],
            [
              "ETs",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " (or other similar techniques), "
            ],
            [
              "at least five",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " constructions of "
            ],
            [
              "Vector",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " instances take place in order to obtain the final "
            ],
            [
              "result",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In a conventional implementation without using "
          },
          {
            "Text": "ETs",
            "AttrFlags": 1
          },
          {
            "Text": " (or other similar techniques), "
          },
          {
            "Text": "at least five",
            "AttrFlags": 1
          },
          {
            "Text": " constructions of "
          },
          {
            "Text": "Vector",
            "AttrFlags": 2
          },
          {
            "Text": " instances take place in order to obtain the final "
          },
          {
            "Text": "result",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400029,
        "id": "d9a50bc3-9b8a-4314-bf51-7281b4e08e6f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400029,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Three instances corresponding to "
            ],
            [
              "vec_1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "vec_2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "vec_3",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Three instances corresponding to "
          },
          {
            "Text": "vec_1",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "vec_2",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "vec_3",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400029,
        "id": "6149860f-d1d0-4b49-974d-85d3168c8709",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400029,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A temporary "
            ],
            [
              "Vector",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " instance "
            ],
            [
              "_tmp",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", representing the result of "
            ],
            [
              "_tmp = vec_2*vec_3;",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "A temporary "
          },
          {
            "Text": "Vector",
            "AttrFlags": 2
          },
          {
            "Text": " instance "
          },
          {
            "Text": "_tmp",
            "AttrFlags": 2
          },
          {
            "Text": ", representing the result of "
          },
          {
            "Text": "_tmp = vec_2*vec_3;",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400029,
        "id": "e84f340d-694b-4681-abd1-6b8ec96f00b8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400029,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Finally with proper use of "
            ],
            [
              "return value optimization",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", the construction of final "
            ],
            [
              "result",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in "
            ],
            [
              "result = vec_1 + _tmp;",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Finally with proper use of "
          },
          {
            "Text": "return value optimization",
            "AttrFlags": 1
          },
          {
            "Text": ", the construction of final "
          },
          {
            "Text": "result",
            "AttrFlags": 2
          },
          {
            "Text": " in "
          },
          {
            "Text": "result = vec_1 + _tmp;",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400030,
        "id": "2a1c422f-e721-4212-a8ec-bd87fe47f09e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400030,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Implementation using "
            ],
            [
              "ETs",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " can "
            ],
            [
              "eliminate the creation of temporary",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "Vector _tmp",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in 2, thus leaving only "
            ],
            [
              "four",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " constructions of "
            ],
            [
              "Vector",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " instances. More interestingly, consider the following expression which is more complex:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Implementation using "
          },
          {
            "Text": "ETs",
            "AttrFlags": 1
          },
          {
            "Text": " can "
          },
          {
            "Text": "eliminate the creation of temporary",
            "AttrFlags": 1
          },
          {
            "Text": " "
          },
          {
            "Text": "Vector _tmp",
            "AttrFlags": 2
          },
          {
            "Text": " in 2, thus leaving only "
          },
          {
            "Text": "four",
            "AttrFlags": 1
          },
          {
            "Text": " constructions of "
          },
          {
            "Text": "Vector",
            "AttrFlags": 2
          },
          {
            "Text": " instances. More interestingly, consider the following expression which is more complex:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400030,
        "id": "e4f00097-21f9-436d-b5da-2147152079d3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400030,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Vector result = vec_1 + (vec_2*vec3 + vec_1)*(vec_2 + vec_3*vec_1);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Vector result = vec_1 + (vec_2*vec3 + vec_1)*(vec_2 + vec_3*vec_1);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400030,
        "id": "c8bf86c2-cdae-417a-bdf3-6aa32e5d454c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400030,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "There will also be four constructions of "
            ],
            [
              "Vector",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " instances in total: "
            ],
            [
              "vec_1, vec_2, vec_3",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "result",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". In other words, in this example, "
            ],
            [
              "where only element-wise operations are involved",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", it is guaranteed that "
            ],
            [
              "no temporary objects will be created from intermediate calculations",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "There will also be four constructions of "
          },
          {
            "Text": "Vector",
            "AttrFlags": 2
          },
          {
            "Text": " instances in total: "
          },
          {
            "Text": "vec_1, vec_2, vec_3",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "result",
            "AttrFlags": 2
          },
          {
            "Text": ". In other words, in this example, "
          },
          {
            "Text": "where only element-wise operations are involved",
            "AttrFlags": 1
          },
          {
            "Text": ", it is guaranteed that "
          },
          {
            "Text": "no temporary objects will be created from intermediate calculations",
            "AttrFlags": 1
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400030,
        "id": "4f476c81-266f-4e80-9b4f-625e63736351",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400030,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400030,
        "id": "b47a2a65-15d3-482d-9560-92487f41a094",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400030,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "How do ETs work",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "How do ETs work",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400030,
        "id": "b9da2b58-a2a2-4c2f-b47b-f7a01ce14937",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400030,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400030,
        "id": "d6976a34-7d41-4595-b000-799f25bfddff",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400030,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Basically speaking, "
            ],
            [
              "ETs for any algebraic computations",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " consist of two building blocks:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Basically speaking, "
          },
          {
            "Text": "ETs for any algebraic computations",
            "AttrFlags": 1
          },
          {
            "Text": " consist of two building blocks:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400031,
        "id": "67b31d0b-84c8-41fc-a535-ff54d22bb5d7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400031,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Pure algebraic expressions",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " ("
            ],
            [
              "PAE",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "): they are proxies / abstractions of algebraic expressions. A pure algebraic does not do actual computations, they are merely abstractions / modeling of the computation work-flow. A PAE can be a model of "
            ],
            [
              "either the input or the output of any algebraic expressions",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". Instances of "
            ],
            [
              "PAE",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "s are often considered cheap to copy."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Pure algebraic expressions",
            "AttrFlags": 1
          },
          {
            "Text": " ("
          },
          {
            "Text": "PAE",
            "AttrFlags": 1
          },
          {
            "Text": "): they are proxies / abstractions of algebraic expressions. A pure algebraic does not do actual computations, they are merely abstractions / modeling of the computation work-flow. A PAE can be a model of "
          },
          {
            "Text": "either the input or the output of any algebraic expressions",
            "AttrFlags": 1
          },
          {
            "Text": ". Instances of "
          },
          {
            "Text": "PAE",
            "AttrFlags": 1
          },
          {
            "Text": "s are often considered cheap to copy."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400031,
        "id": "80d24e05-693a-4b9f-b1cd-bba39df17184",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400031,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Lazy evaluations",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ": which are implementation of real computations. In the following example, we will see that for expressions involving only element-wise operations, lazy evaluations can implement actual computations inside the indexed-access operation on the final result, thus creating a scheme of evaluation on-demand: a computation is not performed only if the final result is accessed / asked for."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Lazy evaluations",
            "AttrFlags": 1
          },
          {
            "Text": ": which are implementation of real computations. In the following example, we will see that for expressions involving only element-wise operations, lazy evaluations can implement actual computations inside the indexed-access operation on the final result, thus creating a scheme of evaluation on-demand: a computation is not performed only if the final result is accessed / asked for."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400031,
        "id": "0c744143-b166-496d-8b04-ad4f8b336456",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400031,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "So, specifically how do we implement "
            ],
            [
              "ETs",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " in this example? Let’s walk through it now."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "So, specifically how do we implement "
          },
          {
            "Text": "ETs",
            "AttrFlags": 1
          },
          {
            "Text": " in this example? Let’s walk through it now."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400031,
        "id": "444cf27b-748d-49b8-b936-1fd3ee928bee",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400031,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Consider always the following code snippet:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Consider always the following code snippet:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400031,
        "id": "631e4ed6-9eea-4771-8c6e-496716a77276",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400031,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Vector vec_1, vec_2, vec_3;\n\n// Initializing vec_1, vec_2 and vec_3.\n\nVector result = vec_1 + vec_2*vec_3;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Vector vec_1, vec_2, vec_3;\n\n// Initializing vec_1, vec_2 and vec_3.\n\nVector result = vec_1 + vec_2*vec_3;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400031,
        "id": "fa378644-5114-4009-aba7-039d9e1a0136",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400031,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The expression to compute result can be decomposed further into two sub-expressions:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The expression to compute result can be decomposed further into two sub-expressions:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400032,
        "id": "977b5899-dbc1-4b9a-970f-270fe383ae6e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400032,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A vector plus expression (denoted as "
            ],
            [
              "plus_expr",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ")"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "A vector plus expression (denoted as "
          },
          {
            "Text": "plus_expr",
            "AttrFlags": 1
          },
          {
            "Text": ")"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400032,
        "id": "48ef8f13-72eb-46ac-ad21-7570e3900e39",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400032,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A vector inner product expression (denoted as "
            ],
            [
              "innerprod_expr",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ")."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "A vector inner product expression (denoted as "
          },
          {
            "Text": "innerprod_expr",
            "AttrFlags": 1
          },
          {
            "Text": ")."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400032,
        "id": "570ebb5d-0793-40a4-95f1-baaf89ccb1db",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400032,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "What "
            ],
            [
              "ETs",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " do is the following:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "What "
          },
          {
            "Text": "ETs",
            "AttrFlags": 1
          },
          {
            "Text": " do is the following:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400032,
        "id": "6fa93150-363f-49c1-aeda-2a02ba2b3dc8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400032,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Instead of compute right away each sub-expression, "
            ],
            [
              "ETs",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " first model the whole expression using a graphical structure. Each node in the graph represents a "
            ],
            [
              "PAE",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". The edge connection of the nodes represent the actual computation flow. So for the above expression, we obtain the following graph:"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Instead of compute right away each sub-expression, "
          },
          {
            "Text": "ETs",
            "AttrFlags": 1
          },
          {
            "Text": " first model the whole expression using a graphical structure. Each node in the graph represents a "
          },
          {
            "Text": "PAE",
            "AttrFlags": 1
          },
          {
            "Text": ". The edge connection of the nodes represent the actual computation flow. So for the above expression, we obtain the following graph:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400032,
        "id": "de965dde-81a4-457e-9e60-b83441ec425e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400032,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "result = plus_expr( vec_1, innerprod_expr(vec_2, vec_3) )\n   /   \\\n  /     \\\n /       \\\n/   innerprod_expr( vec_2, vec_3 )\n/         /  \\\n/         /    \\\n/         /      \\\nvec_1     vec_2    vec_3"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "result = plus_expr( vec_1, innerprod_expr(vec_2, vec_3) )\n   /   \\\n  /     \\\n /       \\\n/   innerprod_expr( vec_2, vec_3 )\n/         /  \\\n/         /    \\\n/         /      \\\nvec_1     vec_2    vec_3",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400034,
        "id": "20758384-fe4b-4e5f-b030-dc5f440daee2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400034,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The final computation is implemented by "
            ],
            [
              "looking through the graph hierarchy",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ": since here we are dealing with "
            ],
            [
              "only element-wise",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " operations, the computation of each indexed value in "
            ],
            [
              "result",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "can be done independently",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ": the final evaluation of "
            ],
            [
              "result",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can be lazily postponed to a "
            ],
            [
              "element-wise evaluation",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " of each element of "
            ],
            [
              "result",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". In other words, since the computation of an element of "
            ],
            [
              "result",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "elem_res",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", can be expressed using corresponding elements in "
            ],
            [
              "vec_1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " ("
            ],
            [
              "elem_1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "), "
            ],
            [
              "vec_2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " ("
            ],
            [
              "elem_2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") and "
            ],
            [
              "vec_3",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " ("
            ],
            [
              "elem_3",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") as:"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "The final computation is implemented by "
          },
          {
            "Text": "looking through the graph hierarchy",
            "AttrFlags": 1
          },
          {
            "Text": ": since here we are dealing with "
          },
          {
            "Text": "only element-wise",
            "AttrFlags": 1
          },
          {
            "Text": " operations, the computation of each indexed value in "
          },
          {
            "Text": "result",
            "AttrFlags": 2
          },
          {
            "Text": " "
          },
          {
            "Text": "can be done independently",
            "AttrFlags": 1
          },
          {
            "Text": ": the final evaluation of "
          },
          {
            "Text": "result",
            "AttrFlags": 2
          },
          {
            "Text": " can be lazily postponed to a "
          },
          {
            "Text": "element-wise evaluation",
            "AttrFlags": 1
          },
          {
            "Text": " of each element of "
          },
          {
            "Text": "result",
            "AttrFlags": 2
          },
          {
            "Text": ". In other words, since the computation of an element of "
          },
          {
            "Text": "result",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "elem_res",
            "AttrFlags": 2
          },
          {
            "Text": ", can be expressed using corresponding elements in "
          },
          {
            "Text": "vec_1",
            "AttrFlags": 2
          },
          {
            "Text": " ("
          },
          {
            "Text": "elem_1",
            "AttrFlags": 2
          },
          {
            "Text": "), "
          },
          {
            "Text": "vec_2",
            "AttrFlags": 2
          },
          {
            "Text": " ("
          },
          {
            "Text": "elem_2",
            "AttrFlags": 2
          },
          {
            "Text": ") and "
          },
          {
            "Text": "vec_3",
            "AttrFlags": 2
          },
          {
            "Text": " ("
          },
          {
            "Text": "elem_3",
            "AttrFlags": 2
          },
          {
            "Text": ") as:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400034,
        "id": "394c24c8-4038-4e3b-9b0d-f299b2496ec8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400034,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "elem_res = elem_1 + elem_2*elem_3;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "elem_res = elem_1 + elem_2*elem_3;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400034,
        "id": "fb796c08-1df7-4686-945e-8527a1ea5c5e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400034,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "there is therefore no need to create a temporary "
            ],
            [
              "Vector",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to store the result of intermediate inner product: "
            ],
            [
              "the whole computation for one element can be done altogether, and be encoded inside the indexed-access operation",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "there is therefore no need to create a temporary "
          },
          {
            "Text": "Vector",
            "AttrFlags": 2
          },
          {
            "Text": " to store the result of intermediate inner product: "
          },
          {
            "Text": "the whole computation for one element can be done altogether, and be encoded inside the indexed-access operation",
            "AttrFlags": 1
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400034,
        "id": "0ee7a065-1c7d-47ce-8ab1-c1841332e30f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400034,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400034,
        "id": "5118dba9-14de-4aa3-9622-106320fa9329",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400034,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Here are the example codes in action.",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Here are the example codes in action.",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400035,
        "id": "b4315e91-b2a9-4c44-ba0e-d7ff43be5f5d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400035,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400035,
        "id": "1ed28d75-8e84-40ee-8fed-b04a9932ec77",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400035,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "File vec.hh : wrapper for std::vector, used to show log when a construction is called."
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "File vec.hh : wrapper for std::vector, used to show log when a construction is called."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400035,
        "id": "08d9cc11-2eb6-4b00-93e3-cfa84cfefb01",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400035,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "—``` #ifndef EXPR_VEC # define EXPR_VEC"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "—``` #ifndef EXPR_VEC # define EXPR_VEC"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400035,
        "id": "b13cf07b-b353-4346-ad2b-82c1c2f50003",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400035,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "include"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "include"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400035,
        "id": "ff6ee520-6a8a-419f-a7f6-b91e1a45927f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400035,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "include"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "include"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400035,
        "id": "1ce9e432-86a6-4075-bec3-395128293a5a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400035,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "include"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "include"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400035,
        "id": "d6721a52-89cb-4137-ac24-31e2b28c07aa",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400035,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "include"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "include"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400035,
        "id": "09956a55-ee7e-46c3-afd5-45ab09e05c05",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400035,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "include"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "include"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400035,
        "id": "119d5924-e461-4b22-a499-0742ea7c0b98",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400035,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "include"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "include"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400035,
        "id": "ec2cebb1-16ef-4dd0-88a0-bd2587290e1f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400035,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "/// /// This is a wrapper for std::vector. It’s only purpose is to print out a log when a /// vector constructions in called. /// It wraps the indexed access operator [] and the size() method, which are /// important for later ETs implementation. ///"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "/// /// This is a wrapper for std::vector. It’s only purpose is to print out a log when a /// vector constructions in called. /// It wraps the indexed access operator [] and the size() method, which are /// important for later ETs implementation. ///"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400036,
        "id": "30cda86a-0a3c-40db-b1fb-6247934a0b1f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400036,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "// std::vector wrapper. template"
            ],
            [
              " class Vector { public: explicit Vector() { std::cout \u003c\u003c “ctor called.”; }; explicit Vector(int size): _vec(size) { std::cout \u003c\u003c “ctor called.”; }; explicit Vector(const std::vector"
            ],
            [
              " \u0026vec): _vec(vec) { std::cout \u003c\u003c “ctor called.”; };"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "// std::vector wrapper. template"
          },
          {
            "Text": " class Vector { public: explicit Vector() { std::cout \u003c\u003c “ctor called.”; }; explicit Vector(int size): _vec(size) { std::cout \u003c\u003c “ctor called.”; }; explicit Vector(const std::vector"
          },
          {
            "Text": " \u0026vec): _vec(vec) { std::cout \u003c\u003c “ctor called.”; };"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400036,
        "id": "e8e7aeb7-114f-4c0b-9db5-5eec65d3374b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400036,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Vector(const Vector"
            ],
            [
              " \u0026 vec): _vec{vec()} { std::cout \u003c\u003c “copy ctor called.”; }; Vector(Vector"
            ],
            [
              " \u0026\u0026 vec): _vec(std::move(vec())) { std::cout \u003c\u003c “move ctor called.”; };"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Vector(const Vector"
          },
          {
            "Text": " \u0026 vec): _vec{vec()} { std::cout \u003c\u003c “copy ctor called.”; }; Vector(Vector"
          },
          {
            "Text": " \u0026\u0026 vec): _vec(std::move(vec())) { std::cout \u003c\u003c “move ctor called.”; };"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400036,
        "id": "3050df33-36d9-42bb-b634-8a35a2763c3c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400036,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Vector"
            ],
            [
              " \u0026 operator=(const Vector"
            ],
            [
              " \u0026) = default; Vector"
            ],
            [
              " \u0026 operator=(Vector"
            ],
            [
              " \u0026\u0026) = default;"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Vector"
          },
          {
            "Text": " \u0026 operator=(const Vector"
          },
          {
            "Text": " \u0026) = default; Vector"
          },
          {
            "Text": " \u0026 operator=(Vector"
          },
          {
            "Text": " \u0026\u0026) = default;"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400036,
        "id": "a0b88c41-d17e-4920-82b3-7d09dbc8a986",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400036,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "decltype(auto) operator"
            ],
            [
              " { return _vec[indx]; } decltype(auto) operator"
            ],
            [
              " const { return _vec[indx]; }"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "decltype(auto) operator"
          },
          {
            "Text": " { return _vec[indx]; } decltype(auto) operator"
          },
          {
            "Text": " const { return _vec[indx]; }"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400036,
        "id": "8f4b2ae0-aac1-4be3-9a6e-12c86e982b7b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400036,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "decltype(auto) operator()() \u0026 { return (_vec); };\ndecltype(auto) operator()() const \u0026 { return (_vec); };\nVector"
            ],
            [
              " \u0026\u0026 operator()() \u0026\u0026 { return std::move(*this); }"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "decltype(auto) operator()() \u0026 { return (_vec); };\ndecltype(auto) operator()() const \u0026 { return (_vec); };\nVector"
          },
          {
            "Text": " \u0026\u0026 operator()() \u0026\u0026 { return std::move(*this); }"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400036,
        "id": "5743b78e-c26e-425f-bcbe-035a07f85ede",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400036,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "int size() const { return _vec.size(); }"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "int size() const { return _vec.size(); }"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400037,
        "id": "ad995799-7163-4231-8645-f9c70476b753",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400037,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "private: std::vector"
            ],
            [
              " _vec; };"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "private: std::vector"
          },
          {
            "Text": " _vec; };"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400037,
        "id": "3cde7375-7523-4cc5-ab66-9e228622edce",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400037,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "/// /// These are conventional overloads of operator + (the vector plus operation) /// and operator * (the vector inner product operation) without using the expression /// templates. They are later used for bench-marking purpose. ///"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "/// /// These are conventional overloads of operator + (the vector plus operation) /// and operator * (the vector inner product operation) without using the expression /// templates. They are later used for bench-marking purpose. ///"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400037,
        "id": "f993bcc7-9988-4338-aad2-e71f00b59629",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400037,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "// + (vector plus) operator. template"
            ],
            [
              " auto operator+(const Vector"
            ],
            [
              " \u0026lhs, const Vector"
            ],
            [
              " \u0026rhs) { assert(lhs().size() == rhs().size() \u0026\u0026 “error: ops plus -\u003e lhs and rhs size mismatch.”);"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "// + (vector plus) operator. template"
          },
          {
            "Text": " auto operator+(const Vector"
          },
          {
            "Text": " \u0026lhs, const Vector"
          },
          {
            "Text": " \u0026rhs) { assert(lhs().size() == rhs().size() \u0026\u0026 “error: ops plus -\u003e lhs and rhs size mismatch.”);"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400037,
        "id": "89e3567a-acda-4d8b-94dd-e018910f62f5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400037,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "std::vector"
            ],
            [
              " _vec; _vec.resize(lhs().size()); std::transform(std::cbegin(lhs()), std::cend(lhs()), std::cbegin(rhs()), std::begin(_vec), std::plus\u003c\u003e()); return Vector"
            ],
            [
              "(std::move(_vec)); }"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "std::vector"
          },
          {
            "Text": " _vec; _vec.resize(lhs().size()); std::transform(std::cbegin(lhs()), std::cend(lhs()), std::cbegin(rhs()), std::begin(_vec), std::plus\u003c\u003e()); return Vector"
          },
          {
            "Text": "(std::move(_vec)); }"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400037,
        "id": "db8fcc01-d350-403f-9f10-a8ccabac7cec",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400037,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "// * (vector inner product) operator. template"
            ],
            [
              " auto operator*(const Vector"
            ],
            [
              " \u0026lhs, const Vector"
            ],
            [
              " \u0026rhs) { assert(lhs().size() == rhs().size() \u0026\u0026 “error: ops multiplies -\u003e lhs and rhs size mismatch.”);"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "// * (vector inner product) operator. template"
          },
          {
            "Text": " auto operator*(const Vector"
          },
          {
            "Text": " \u0026lhs, const Vector"
          },
          {
            "Text": " \u0026rhs) { assert(lhs().size() == rhs().size() \u0026\u0026 “error: ops multiplies -\u003e lhs and rhs size mismatch.”);"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400037,
        "id": "2766b617-de24-45a6-a85b-03f3b40127db",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400037,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "std::vector"
            ],
            [
              " _vec; _vec.resize(lhs().size()); std::transform(std::cbegin(lhs()), std::cend(lhs()), std::cbegin(rhs()), std::begin(_vec), std::multiplies\u003c\u003e()); return Vector"
            ],
            [
              "(std::move(_vec)); }"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "std::vector"
          },
          {
            "Text": " _vec; _vec.resize(lhs().size()); std::transform(std::cbegin(lhs()), std::cend(lhs()), std::cbegin(rhs()), std::begin(_vec), std::multiplies\u003c\u003e()); return Vector"
          },
          {
            "Text": "(std::move(_vec)); }"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400037,
        "id": "c4ef4174-03a6-4f6c-9c4b-14b3351713e3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400037,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "#endif //!EXPR_VEC"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "#endif //!EXPR_VEC"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400037,
        "id": "34d78a5a-9daa-40fd-986a-5455db651242",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400037,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "---\n\n## File expr.hh : implementation of expression templates for element-wise operations (vector plus and vector inner product)\n\n---\n\nLet’s break it down to sections.\n\n1. Section 1 implements a base class for all expressions. It employs the **Curiously Recurring Template Pattern** ([CRTP](http://stackoverflow.com/documentation/c%2B%2B/709/curiously-recurring-template-pattern-crtp#t=201607241604559383674)).\n\n2. Section 2 implements the first **PAE**: a **terminal**, which is just a wrapper (const reference) of an input data structure containing real input value for computation.\n\n3. Section 3 implements the second **PAE**: **binary\\_operation**, which is a class template later used for vector\\_plus and vector\\_innerprod. It’s parametrized by the **type of operation**, **the left-hand-side PAE** and **the right-hand-side PAE**. The actual computation is encoded in the indexed-access operator.\n\n4. Section 4 defines vector\\_plus and vector\\_innerprod operations as **element-wise operation**. It also overload operator + and \\* for **PAE**s: such that these two operations also return **PAE**."
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "---\n\n## File expr.hh : implementation of expression templates for element-wise operations (vector plus and vector inner product)\n\n---\n\nLet’s break it down to sections.\n\n1. Section 1 implements a base class for all expressions. It employs the **Curiously Recurring Template Pattern** ([CRTP](http://stackoverflow.com/documentation/c%2B%2B/709/curiously-recurring-template-pattern-crtp#t=201607241604559383674)).\n\n2. Section 2 implements the first **PAE**: a **terminal**, which is just a wrapper (const reference) of an input data structure containing real input value for computation.\n\n3. Section 3 implements the second **PAE**: **binary\\_operation**, which is a class template later used for vector\\_plus and vector\\_innerprod. It’s parametrized by the **type of operation**, **the left-hand-side PAE** and **the right-hand-side PAE**. The actual computation is encoded in the indexed-access operator.\n\n4. Section 4 defines vector\\_plus and vector\\_innerprod operations as **element-wise operation**. It also overload operator + and \\* for **PAE**s: such that these two operations also return **PAE**.",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400038,
        "id": "f015406e-49d7-4627-be51-7eec9e681912",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400038,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "#ifndef EXPR_EXPR # define EXPR_EXPR"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "#ifndef EXPR_EXPR # define EXPR_EXPR"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400038,
        "id": "2aad1736-43d2-4a21-ac9e-379c229f7ca6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400038,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "/// Fwd declaration. template"
            ],
            [
              " class Vector;"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "/// Fwd declaration. template"
          },
          {
            "Text": " class Vector;"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400038,
        "id": "e132c6a7-0bc9-4a52-a553-93b9f3cf3411",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400038,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "namespace expr {"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "namespace expr {"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400038,
        "id": "6cad4374-c142-4477-b9d6-2bca85e72b92",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400038,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400038,
        "id": "c7e63e16-c375-44c6-af4b-eb809d1fef11",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400038,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "/// —————————————– /// /// Section 1. /// /// The first section is a base class template for all kinds of expression. It\n/// employs the Curiously Recurring Template Pattern, which enables its instantiation /// to any kind of expression structure inheriting from it. /// /// —————————————–"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "/// —————————————– /// /// Section 1. /// /// The first section is a base class template for all kinds of expression. It\n/// employs the Curiously Recurring Template Pattern, which enables its instantiation /// to any kind of expression structure inheriting from it. /// /// —————————————–"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400038,
        "id": "f62403f2-1b92-4373-a588-459fed8e2903",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400038,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400038,
        "id": "dbd9e0a2-93a2-45b3-9a50-fde3b3355153",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400038,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "/// Base class for all expressions. template"
            ],
            [
              " class expr_base { public: const Expr\u0026 self() const { return static_cast\u003cconst Expr\u0026\u003e("
            ],
            [
              "this); } Expr\u0026 self() { return static_cast\u003cExpr\u0026\u003e(",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              "this); }"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "/// Base class for all expressions. template"
          },
          {
            "Text": " class expr_base { public: const Expr\u0026 self() const { return static_cast\u003cconst Expr\u0026\u003e("
          },
          {
            "Text": "this); } Expr\u0026 self() { return static_cast\u003cExpr\u0026\u003e(",
            "AttrFlags": 4
          },
          {
            "Text": "this); }"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400038,
        "id": "0e46259a-abbd-42c7-9406-7e3149335f9a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400038,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "protected: explicit expr_base() {}; int size() const { return self().size_impl(); } auto operator"
            ],
            [
              " const { return self().at_impl(indx); } auto operator()() const { return self()(); }; };"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "protected: explicit expr_base() {}; int size() const { return self().size_impl(); } auto operator"
          },
          {
            "Text": " const { return self().at_impl(indx); } auto operator()() const { return self()(); }; };"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400038,
        "id": "ac3405dd-b030-44b5-b083-5b6fdf3420c4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400038,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "/// —————————————– /// /// The following section 2 \u0026 3 are abstractions of pure algebraic expressions (PAE). /// Any PAE can be converted to a real object instance using operator(): it is in /// this conversion process, where the real computations are done."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "/// —————————————– /// /// The following section 2 \u0026 3 are abstractions of pure algebraic expressions (PAE). /// Any PAE can be converted to a real object instance using operator(): it is in /// this conversion process, where the real computations are done."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400039,
        "id": "0c90a122-af0e-46f1-9093-c06e87dc2db0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400039,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "/// /// Section 2. Terminal /// /// A terminal is an abstraction wrapping a const reference to the Vector data /// structure. It inherits from expr_base, therefore providing a unified interface /// wrapping a Vector into a PAE. /// /// It provides the size() method, indexed access through at_impl() and a conversion /// to referenced object through () operator. /// /// It might no be necessary for user defined data structures to have a terminal /// wrapper, since user defined structure can inherit expr_base, therefore eliminates /// the need to provide such terminal wrapper. /// /// —————————————–"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "/// /// Section 2. Terminal /// /// A terminal is an abstraction wrapping a const reference to the Vector data /// structure. It inherits from expr_base, therefore providing a unified interface /// wrapping a Vector into a PAE. /// /// It provides the size() method, indexed access through at_impl() and a conversion /// to referenced object through () operator. /// /// It might no be necessary for user defined data structures to have a terminal /// wrapper, since user defined structure can inherit expr_base, therefore eliminates /// the need to provide such terminal wrapper. /// /// —————————————–"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400039,
        "id": "4be80bcd-9ff0-4f20-aa90-f5b938542404",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400039,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400039,
        "id": "80c8e896-f65a-40fb-9f77-3e01e3e2d8b6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400039,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "/// Generic wrapper for underlying data structure. template"
            ],
            [
              " class terminal: expr_base\u003cterminal"
            ],
            [
              "\u003e { public: using base_type = expr_base\u003cterminal"
            ],
            [
              "\u003e; using base_type::size; using base_type::operator[]; friend base_type;"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "/// Generic wrapper for underlying data structure. template"
          },
          {
            "Text": " class terminal: expr_base\u003cterminal"
          },
          {
            "Text": "\u003e { public: using base_type = expr_base\u003cterminal"
          },
          {
            "Text": "\u003e; using base_type::size; using base_type::operator[]; friend base_type;"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400039,
        "id": "ce41c34b-8531-4893-9114-cfece4f8f5dd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400039,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "explicit terminal(const DataType \u0026val): _val(val) {} int size_impl() const { return _val.size(); }; auto at_impl(int indx) const { return _val[indx]; }; decltype(auto) operator()() const { return (_val); }"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "explicit terminal(const DataType \u0026val): _val(val) {} int size_impl() const { return _val.size(); }; auto at_impl(int indx) const { return _val[indx]; }; decltype(auto) operator()() const { return (_val); }"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400039,
        "id": "37905913-6b56-4acb-8863-ee6712a168c5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400039,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "private: const DataType \u0026_val; };"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "private: const DataType \u0026_val; };"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400039,
        "id": "b97fd879-9c8f-4c0f-885d-9f04bac50af6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400039,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400039,
        "id": "9ac1cbb9-9625-4fb7-92d1-c33ddfcb4a17",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400039,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "/// —————————————– /// /// Section 3. Binary operation expression. /// /// This is a PAE abstraction of any binary expression. Similarly it inherits from /// expr_base. /// /// It provides the size() method, indexed access through at_impl() and a conversion /// to referenced object through () operator. Each call to the at_impl() method is /// a element wise computation. /// /// —————————————–"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "/// —————————————– /// /// Section 3. Binary operation expression. /// /// This is a PAE abstraction of any binary expression. Similarly it inherits from /// expr_base. /// /// It provides the size() method, indexed access through at_impl() and a conversion /// to referenced object through () operator. Each call to the at_impl() method is /// a element wise computation. /// /// —————————————–"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400039,
        "id": "e6ecf8d1-4d20-43fe-9ca1-20ffa122f767",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400039,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400039,
        "id": "5946b2a0-05a3-4ec5-8ab8-96ee97ebe0ba",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400039,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "/// Generic wrapper for binary operations (that are element-wise). template\u003ctypename Ops, typename lExpr, typename rExpr\u003e class binary_ops: public expr_base\u003cbinary_ops\u003cOps,lExpr,rExpr\u003e\u003e { public: using base_type = expr_base\u003cbinary_ops\u003cOps,lExpr,rExpr\u003e\u003e; using base_type::size; using base_type::operator[]; friend base_type;"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "/// Generic wrapper for binary operations (that are element-wise). template\u003ctypename Ops, typename lExpr, typename rExpr\u003e class binary_ops: public expr_base\u003cbinary_ops\u003cOps,lExpr,rExpr\u003e\u003e { public: using base_type = expr_base\u003cbinary_ops\u003cOps,lExpr,rExpr\u003e\u003e; using base_type::size; using base_type::operator[]; friend base_type;"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400040,
        "id": "3a73c102-0ea9-474f-8811-4a4675328eaf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400040,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "explicit binary_ops(const Ops \u0026ops, const lExpr \u0026lxpr, const rExpr \u0026rxpr) : _ops(ops), _lxpr(lxpr), _rxpr(rxpr) {}; int size_impl() const { return _lxpr.size(); };"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "explicit binary_ops(const Ops \u0026ops, const lExpr \u0026lxpr, const rExpr \u0026rxpr) : _ops(ops), _lxpr(lxpr), _rxpr(rxpr) {}; int size_impl() const { return _lxpr.size(); };"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400040,
        "id": "8d7d7d2f-acc1-4499-85a6-3ad34ad7b9c6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400040,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "/// This does the element-wise computation for index indx. auto at_impl(int indx) const { return _ops(_lxpr[indx], _rxpr[indx]); };"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "/// This does the element-wise computation for index indx. auto at_impl(int indx) const { return _ops(_lxpr[indx], _rxpr[indx]); };"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400040,
        "id": "822285cf-8142-4356-8473-69d588234ab3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400040,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "/// Conversion from arbitrary expr to concrete data type. It evaluates /// element-wise computations for all indices. template"
            ],
            [
              " operator DataType() { DataType _vec(size()); for(int _ind = 0; _ind \u003c _vec.size(); ++_ind) _vec[_ind] = (*this)[_ind]; return _vec; }"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "/// Conversion from arbitrary expr to concrete data type. It evaluates /// element-wise computations for all indices. template"
          },
          {
            "Text": " operator DataType() { DataType _vec(size()); for(int _ind = 0; _ind \u003c _vec.size(); ++_ind) _vec[_ind] = (*this)[_ind]; return _vec; }"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400040,
        "id": "da75df98-a88d-402d-be9d-b06842de7602",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400040,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "private: /// Ops and expr are assumed cheap to copy. Ops _ops; lExpr _lxpr; rExpr _rxpr; };"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "private: /// Ops and expr are assumed cheap to copy. Ops _ops; lExpr _lxpr; rExpr _rxpr; };"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400040,
        "id": "adad90cc-7d98-48e7-9265-fd40912149a3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400040,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400040,
        "id": "dd353b48-78cd-42b6-a8c3-bb8563962e2e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400040,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "/// —————————————– /// Section 4. /// /// The following two structs defines algebraic operations on PAEs: here only vector /// plus and vector inner product are implemented. /// /// First, some element-wise operations are defined : in other words, vec_plus and /// vec_prod acts on elements in Vectors, but not whole Vectors. /// /// Then, operator + \u0026 * are overloaded on PAEs, such that: + \u0026 * operations on PAEs\n/// also return PAEs. /// /// —————————————–"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "/// —————————————– /// Section 4. /// /// The following two structs defines algebraic operations on PAEs: here only vector /// plus and vector inner product are implemented. /// /// First, some element-wise operations are defined : in other words, vec_plus and /// vec_prod acts on elements in Vectors, but not whole Vectors. /// /// Then, operator + \u0026 * are overloaded on PAEs, such that: + \u0026 * operations on PAEs\n/// also return PAEs. /// /// —————————————–"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400040,
        "id": "10381cc9-276f-4675-87cf-de9a02be0e29",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400040,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400040,
        "id": "8aa57987-4c98-445d-95f8-5a753d98d3bb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400040,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "/// Element-wise plus operation. struct vec_plus_t { constexpr explicit vec_plus_t() = default; template\u003ctypename LType, typename RType\u003e auto operator()(const LType \u0026lhs, const RType \u0026rhs) const { return lhs+rhs; } };"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "/// Element-wise plus operation. struct vec_plus_t { constexpr explicit vec_plus_t() = default; template\u003ctypename LType, typename RType\u003e auto operator()(const LType \u0026lhs, const RType \u0026rhs) const { return lhs+rhs; } };"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400040,
        "id": "4cd02d2b-a56f-41a5-bf35-0a2a759d5490",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400040,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "/// Element-wise inner product operation. struct vec_prod_t { constexpr explicit vec_prod_t() = default; template\u003ctypename LType, typename RType\u003e auto operator()(const LType \u0026lhs, const RType \u0026rhs) const { return lhs*rhs; } };"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "/// Element-wise inner product operation. struct vec_prod_t { constexpr explicit vec_prod_t() = default; template\u003ctypename LType, typename RType\u003e auto operator()(const LType \u0026lhs, const RType \u0026rhs) const { return lhs*rhs; } };"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400040,
        "id": "0a498a39-75d9-42a1-9dda-e77fd282b35e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400040,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "/// Constant plus and inner product operator objects. constexpr vec_plus_t vec_plus{}; constexpr vec_prod_t vec_prod{};"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "/// Constant plus and inner product operator objects. constexpr vec_plus_t vec_plus{}; constexpr vec_prod_t vec_prod{};"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400041,
        "id": "67fc5da1-1768-42fd-9ae0-22a52f1b2719",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400041,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "/// Plus operator overload on expressions: return binary expression. template\u003ctypename lExpr, typename rExpr\u003e auto operator+(const lExpr \u0026lhs, const rExpr \u0026rhs) { return binary_ops\u003cvec_plus_t,lExpr,rExpr\u003e(vec_plus,lhs,rhs); }"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "/// Plus operator overload on expressions: return binary expression. template\u003ctypename lExpr, typename rExpr\u003e auto operator+(const lExpr \u0026lhs, const rExpr \u0026rhs) { return binary_ops\u003cvec_plus_t,lExpr,rExpr\u003e(vec_plus,lhs,rhs); }"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400041,
        "id": "90889ba2-7d8f-4a80-9762-c95a3da8d733",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400041,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "/// Inner prod operator overload on expressions: return binary expression. template\u003ctypename lExpr, typename rExpr\u003e auto operator*(const lExpr \u0026lhs, const rExpr \u0026rhs) { return binary_ops\u003cvec_prod_t,lExpr,rExpr\u003e(vec_prod,lhs,rhs); }"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "/// Inner prod operator overload on expressions: return binary expression. template\u003ctypename lExpr, typename rExpr\u003e auto operator*(const lExpr \u0026lhs, const rExpr \u0026rhs) { return binary_ops\u003cvec_prod_t,lExpr,rExpr\u003e(vec_prod,lhs,rhs); }"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400041,
        "id": "718135bf-fafd-49df-8237-706127bb3b26",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400041,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "} //!expr"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "} //!expr"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400041,
        "id": "10469b8d-2e2c-4b98-b8a2-c10ffdbf9d87",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400041,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "#endif //!EXPR_EXPR"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "#endif //!EXPR_EXPR"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400041,
        "id": "4d10b4c6-4576-4e25-9e52-0d93cc47ca36",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400041,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "---\n\n## File main.cc : test src file\n\n---```\n# include \u003cchrono\u003e\n# include \u003ciomanip\u003e\n# include \u003ciostream\u003e\n# include \"vec.hh\"\n# include \"expr.hh\"\n# include \"boost/core/demangle.hpp\"\n\n\nint main()\n{\n  using dtype = float;\n  constexpr int size = 5e7;\n  \n  std::vector\u003cdtype\u003e _vec1(size);\n  std::vector\u003cdtype\u003e _vec2(size);\n  std::vector\u003cdtype\u003e _vec3(size);\n\n  // ... Initialize vectors' contents.\n\n  Vector\u003cdtype\u003e vec1(std::move(_vec1));\n  Vector\u003cdtype\u003e vec2(std::move(_vec2));\n  Vector\u003cdtype\u003e vec3(std::move(_vec3));\n\n  unsigned long start_ms_no_ets =\n    std::chrono::duration_cast\u003cstd::chrono::milliseconds\u003e\n    (std::chrono::system_clock::now().time_since_epoch()).count();\n  std::cout \u003c\u003c \"\\nNo-ETs evaluation starts.\\n\";\n  \n  Vector\u003cdtype\u003e result_no_ets = vec1 + (vec2*vec3);\n  \n  unsigned long stop_ms_no_ets =\n    std::chrono::duration_cast\u003cstd::chrono::milliseconds\u003e\n    (std::chrono::system_clock::now().time_since_epoch()).count();\n  std::cout \u003c\u003c std::setprecision(6) \u003c\u003c std::fixed\n            \u003c\u003c \"No-ETs. Time eclapses: \" \u003c\u003c (stop_ms_no_ets-start_ms_no_ets)/1000.0\n            \u003c\u003c \" s.\\n\" \u003c\u003c std::endl;\n  \n  unsigned long start_ms_ets =\n    std::chrono::duration_cast\u003cstd::chrono::milliseconds\u003e\n    (std::chrono::system_clock::now().time_since_epoch()).count();\n  std::cout \u003c\u003c \"Evaluation using ETs starts.\\n\";\n  \n  expr::terminal\u003cVector\u003cdtype\u003e\u003e vec4(vec1);\n  expr::terminal\u003cVector\u003cdtype\u003e\u003e vec5(vec2);\n  expr::terminal\u003cVector\u003cdtype\u003e\u003e vec6(vec3);\n  \n  Vector\u003cdtype\u003e result_ets = (vec4 + vec5*vec6);\n  \n  unsigned long stop_ms_ets =\n    std::chrono::duration_cast\u003cstd::chrono::milliseconds\u003e\n    (std::chrono::system_clock::now().time_since_epoch()).count();\n  std::cout \u003c\u003c std::setprecision(6) \u003c\u003c std::fixed\n            \u003c\u003c \"With ETs. Time eclapses: \" \u003c\u003c (stop_ms_ets-start_ms_ets)/1000.0\n            \u003c\u003c \" s.\\n\" \u003c\u003c std::endl;\n  \n  auto ets_ret_type = (vec4 + vec5*vec6);\n  std::cout \u003c\u003c \"\\nETs result's type:\\n\";\n  std::cout \u003c\u003c boost::core::demangle( typeid(decltype(ets_ret_type)).name() ) \u003c\u003c '\\n'; \n\n  return 0;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "---\n\n## File main.cc : test src file\n\n---```\n# include \u003cchrono\u003e\n# include \u003ciomanip\u003e\n# include \u003ciostream\u003e\n# include \"vec.hh\"\n# include \"expr.hh\"\n# include \"boost/core/demangle.hpp\"\n\n\nint main()\n{\n  using dtype = float;\n  constexpr int size = 5e7;\n  \n  std::vector\u003cdtype\u003e _vec1(size);\n  std::vector\u003cdtype\u003e _vec2(size);\n  std::vector\u003cdtype\u003e _vec3(size);\n\n  // ... Initialize vectors' contents.\n\n  Vector\u003cdtype\u003e vec1(std::move(_vec1));\n  Vector\u003cdtype\u003e vec2(std::move(_vec2));\n  Vector\u003cdtype\u003e vec3(std::move(_vec3));\n\n  unsigned long start_ms_no_ets =\n    std::chrono::duration_cast\u003cstd::chrono::milliseconds\u003e\n    (std::chrono::system_clock::now().time_since_epoch()).count();\n  std::cout \u003c\u003c \"\\nNo-ETs evaluation starts.\\n\";\n  \n  Vector\u003cdtype\u003e result_no_ets = vec1 + (vec2*vec3);\n  \n  unsigned long stop_ms_no_ets =\n    std::chrono::duration_cast\u003cstd::chrono::milliseconds\u003e\n    (std::chrono::system_clock::now().time_since_epoch()).count();\n  std::cout \u003c\u003c std::setprecision(6) \u003c\u003c std::fixed\n            \u003c\u003c \"No-ETs. Time eclapses: \" \u003c\u003c (stop_ms_no_ets-start_ms_no_ets)/1000.0\n            \u003c\u003c \" s.\\n\" \u003c\u003c std::endl;\n  \n  unsigned long start_ms_ets =\n    std::chrono::duration_cast\u003cstd::chrono::milliseconds\u003e\n    (std::chrono::system_clock::now().time_since_epoch()).count();\n  std::cout \u003c\u003c \"Evaluation using ETs starts.\\n\";\n  \n  expr::terminal\u003cVector\u003cdtype\u003e\u003e vec4(vec1);\n  expr::terminal\u003cVector\u003cdtype\u003e\u003e vec5(vec2);\n  expr::terminal\u003cVector\u003cdtype\u003e\u003e vec6(vec3);\n  \n  Vector\u003cdtype\u003e result_ets = (vec4 + vec5*vec6);\n  \n  unsigned long stop_ms_ets =\n    std::chrono::duration_cast\u003cstd::chrono::milliseconds\u003e\n    (std::chrono::system_clock::now().time_since_epoch()).count();\n  std::cout \u003c\u003c std::setprecision(6) \u003c\u003c std::fixed\n            \u003c\u003c \"With ETs. Time eclapses: \" \u003c\u003c (stop_ms_ets-start_ms_ets)/1000.0\n            \u003c\u003c \" s.\\n\" \u003c\u003c std::endl;\n  \n  auto ets_ret_type = (vec4 + vec5*vec6);\n  std::cout \u003c\u003c \"\\nETs result's type:\\n\";\n  std::cout \u003c\u003c boost::core::demangle( typeid(decltype(ets_ret_type)).name() ) \u003c\u003c '\\n'; \n\n  return 0;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400041,
        "id": "9c5a2c96-d56d-45f0-ac7a-bebaba705608",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400041,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Here’s one possible output when compiled with "
            ],
            [
              "-O3 -std=c++14",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " using GCC 5.3:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Here’s one possible output when compiled with "
          },
          {
            "Text": "-O3 -std=c++14",
            "AttrFlags": 2
          },
          {
            "Text": " using GCC 5.3:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400041,
        "id": "cc8ca6b4-2251-41f4-880a-2e73b7eb55e9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400041,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "ctor called.\nctor called.\nctor called.\n\nNo-ETs evaluation starts.\nctor called.\nctor called.\nNo-ETs. Time eclapses: 0.571000 s.\n\nEvaluation using ETs starts.\nctor called.\nWith ETs. Time eclapses: 0.164000 s.\n\n\nETs result's type:\nexpr::binary_ops\u003cexpr::vec_plus_t, expr::terminal\u003cVector\u003cfloat\u003e \u003e, expr::binary_ops\u003cexpr::vec_prod_t, expr::terminal\u003cVector\u003cfloat\u003e \u003e, expr::terminal\u003cVector\u003cfloat\u003e \u003e \u003e \u003e"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "ctor called.\nctor called.\nctor called.\n\nNo-ETs evaluation starts.\nctor called.\nctor called.\nNo-ETs. Time eclapses: 0.571000 s.\n\nEvaluation using ETs starts.\nctor called.\nWith ETs. Time eclapses: 0.164000 s.\n\n\nETs result's type:\nexpr::binary_ops\u003cexpr::vec_plus_t, expr::terminal\u003cVector\u003cfloat\u003e \u003e, expr::binary_ops\u003cexpr::vec_prod_t, expr::terminal\u003cVector\u003cfloat\u003e \u003e, expr::terminal\u003cVector\u003cfloat\u003e \u003e \u003e \u003e",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400041,
        "id": "05febbb9-4c51-4432-840d-60b93763f9f5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400041,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The observations are:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The observations are:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400042,
        "id": "21f1c40b-a8e2-464d-99a9-e7e6241051c4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400042,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Using "
            ],
            [
              "ETs",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " achieves rather significant performance boost "
            ],
            [
              "in this case",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " ( \u003e 3x)."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Using "
          },
          {
            "Text": "ETs",
            "AttrFlags": 1
          },
          {
            "Text": " achieves rather significant performance boost "
          },
          {
            "Text": "in this case",
            "AttrFlags": 1
          },
          {
            "Text": " ( \u003e 3x)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400042,
        "id": "fa1ce894-5531-4806-9397-381e89687862",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400042,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Creation of temporary Vector object is eliminated. As in the "
            ],
            [
              "ETs",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " case, ctor is called only once."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Creation of temporary Vector object is eliminated. As in the "
          },
          {
            "Text": "ETs",
            "AttrFlags": 1
          },
          {
            "Text": " case, ctor is called only once."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400042,
        "id": "66d443e1-aa2e-4d45-8d8e-2a64af4b60be",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400042,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Boost::demangle was used to visualize the type of ETs return before conversion: it clearly constructed exactly the same expression graph demonstrated above."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Boost::demangle was used to visualize the type of ETs return before conversion: it clearly constructed exactly the same expression graph demonstrated above."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400042,
        "id": "895fa31c-acbd-4ae9-bf7a-ab75959b2c6d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400042,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400042,
        "id": "3d6fbd26-82c7-4db7-a152-11122079d2ab",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400042,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Draw-backs and caveats",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Draw-backs and caveats",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400042,
        "id": "6c46e49d-8573-4a33-842b-63c7f663dcd8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400042,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400042,
        "id": "76229fdd-008f-44a2-8ba3-f28cd1eb8e47",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400042,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "An obvious disadvantage of "
            ],
            [
              "ETs",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " is the learning curve, the complexity of implementation and code-maintenance difficulty. In the above example where only element-wise operations are considered, the implementation contains already enormous amount of boilerplates, let alone in real world, where more complex algebraic expressions occur in every computation and element-wise independence no longer hold (for example matrix multiplication), the difficulty will be exponential."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "An obvious disadvantage of "
          },
          {
            "Text": "ETs",
            "AttrFlags": 1
          },
          {
            "Text": " is the learning curve, the complexity of implementation and code-maintenance difficulty. In the above example where only element-wise operations are considered, the implementation contains already enormous amount of boilerplates, let alone in real world, where more complex algebraic expressions occur in every computation and element-wise independence no longer hold (for example matrix multiplication), the difficulty will be exponential."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400043,
        "id": "4a79a3c1-b5ee-42ea-8b2d-8b20aa33e75a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400043,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Another caveat of using "
            ],
            [
              "ETs",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " is that they do play well with the "
            ],
            [
              "auto",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " keyword. As mentioned above, "
            ],
            [
              "PAE",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "s are essentially proxies: and proxies basically do not play well with "
            ],
            [
              "auto",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Consider the following example:"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Another caveat of using "
          },
          {
            "Text": "ETs",
            "AttrFlags": 1
          },
          {
            "Text": " is that they do play well with the "
          },
          {
            "Text": "auto",
            "AttrFlags": 2
          },
          {
            "Text": " keyword. As mentioned above, "
          },
          {
            "Text": "PAE",
            "AttrFlags": 1
          },
          {
            "Text": "s are essentially proxies: and proxies basically do not play well with "
          },
          {
            "Text": "auto",
            "AttrFlags": 2
          },
          {
            "Text": ". Consider the following example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400043,
        "id": "f5baa875-8ecb-4213-aa5f-aca7ebd2da94",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400043,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "auto result = ...;                // Some expensive expression: \n                                  // auto returns the expr graph, \n                                  // NOT the computed value.\nfor(auto i = 0; i \u003c 100; ++i)\n    ScalrType value = result* ... // Some other expensive computations using result."
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "auto result = ...;                // Some expensive expression: \n                                  // auto returns the expr graph, \n                                  // NOT the computed value.\nfor(auto i = 0; i \u003c 100; ++i)\n    ScalrType value = result* ... // Some other expensive computations using result.",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400043,
        "id": "e353c549-9bd0-466b-9114-32b475db5e9d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400043,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Here "
            ],
            [
              "in each iteration of the for loop, result will be re-evaluated",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", since the expression graph instead of the computed value is passed to the for loop."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Here "
          },
          {
            "Text": "in each iteration of the for loop, result will be re-evaluated",
            "AttrFlags": 1
          },
          {
            "Text": ", since the expression graph instead of the computed value is passed to the for loop."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400043,
        "id": "12045428-e1bc-4c1e-bc42-0336cf226226",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400043,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400043,
        "id": "da77f371-968a-4888-8985-ece08dec1501",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400043,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Existing libraries implementing "
            ],
            [
              "ETs",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Existing libraries implementing "
          },
          {
            "Text": "ETs",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400043,
        "id": "aacb61b6-87a6-4bde-b87e-2dc56db490bc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400043,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400045,
        "id": "ef7cfba2-acd0-4a7f-bf7e-ec6552dccb23",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400045,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "boost::proto",
              [
                [
                  "b"
                ],
                [
                  "a",
                  "http://www.boost.org/doc/libs/1_61_0/doc/html/proto.html"
                ]
              ]
            ],
            [
              " is a powerful library letting you define your own rules \u0026 grammars for your own expressions and execute using "
            ],
            [
              "ETs",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "boost::proto",
            "AttrFlags": 1,
            "Link": "http://www.boost.org/doc/libs/1_61_0/doc/html/proto.html"
          },
          {
            "Text": " is a powerful library letting you define your own rules \u0026 grammars for your own expressions and execute using "
          },
          {
            "Text": "ETs",
            "AttrFlags": 1
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523400046,
        "id": "057297c1-a8d4-4080-9949-8d737a4fad52",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523400046,
        "parent_id": "7d8ae5fe-eaee-4ed8-a02b-ff7ae0d2525c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Eigen",
              [
                [
                  "b"
                ],
                [
                  "a",
                  "http://eigen.tuxfamily.org/index.php?title=Main_Page"
                ]
              ]
            ],
            [
              " is a library for linear algebra that implements various algebraic computations efficiently using "
            ],
            [
              "ETs",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Eigen",
            "AttrFlags": 1,
            "Link": "http://eigen.tuxfamily.org/index.php?title=Main_Page"
          },
          {
            "Text": " is a library for linear algebra that implements various algebraic computations efficiently using "
          },
          {
            "Text": "ETs",
            "AttrFlags": 1
          },
          {
            "Text": "."
          }
        ]
      }
    ],
    "title": "020 Basic expression templates on element-wise algebraic expressions"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}