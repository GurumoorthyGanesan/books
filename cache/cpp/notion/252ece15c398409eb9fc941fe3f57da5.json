{
  "ID": "252ece15-c398-409e-b9fc-941fe3f57da5",
  "Root": {
    "alive": true,
    "content": [
      "e2948f94-d6d1-44d6-a032-e25377542890",
      "602f0613-7e29-4bce-9b07-41554bee9e93",
      "99d822ae-8db3-4a0a-944e-681bdc8d230e",
      "dc7cc21c-60d4-4537-b1da-52baec0a8c4e",
      "acd2d281-d9df-4b7d-8b6f-b20c7b074d2a",
      "f87e7dcc-1b70-411b-8a71-d27798a10bcc",
      "9daaad42-b627-4fcb-9f9b-2856b62f4ea8",
      "db33ac65-c73f-44b7-aac5-7fccf1a49c76",
      "5bc4a295-6d0f-4771-906e-a8cbe0c86b1e",
      "9ce71bef-322a-46df-9015-d5ceb99d8e6c",
      "c3f3297b-0d7c-4022-aad2-1c4c114806f6",
      "f507e691-4d6c-4318-94e1-a4983ca2971f",
      "7e66fc19-81e7-4f8f-b208-0201e3eae1f5",
      "85bfac12-75f6-4ceb-adaa-f9760422e8c0",
      "cb64a186-64b4-4648-a618-9af1ca38b31f",
      "37f31a86-9ea6-4a97-9f03-569c8c8c3e25",
      "83b5b347-4afe-4bae-805d-98b70929d048",
      "abd7bf35-48fb-4813-9b7f-50fb59ceef90",
      "909a60f5-1fac-452a-8406-3131386d3a5a",
      "3365085b-4b9f-42d0-ad51-44ec6eb8fa48",
      "7c555476-c5ff-46d2-af20-426a1da08cef",
      "327bbec0-62a9-44f4-9185-eaf4d870ae48",
      "afafe1a3-df8e-4e73-a509-3ce3e3dd5e9c",
      "56502631-144a-490f-a177-d300c01fda87",
      "21378d34-70c3-4c15-909b-33f15c18c976",
      "81758ee0-8e28-45c6-9b42-d4cab798f3d3",
      "185fd080-8dbb-482d-8130-550060eb864a",
      "abeece70-e65e-4069-8452-a0314e4a64d7",
      "59922d31-8118-409c-bba8-4c7acda61160",
      "8e99d1dc-138f-464c-83d6-aa3390142e8c",
      "4a840d48-9047-4ed3-ab08-4ab09cc1c80f",
      "294849ff-6bf3-430d-a67d-61ac164f800a",
      "9de50ab2-eab3-400a-a276-3695507e261d",
      "a3191653-6e45-4490-ae9d-ed39633d02e2",
      "7bf54296-2d66-4be0-bb28-809a18c1b56f"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550523044799,
    "id": "252ece15-c398-409e-b9fc-941fe3f57da5",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550523044799,
    "parent_id": "5dbd715a-2e96-4062-9cda-4e181e63af5e",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "050 Type erasing type erasure with std any"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523044790,
        "id": "e2948f94-d6d1-44d6-a032-e25377542890",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523044790,
        "parent_id": "252ece15-c398-409e-b9fc-941fe3f57da5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This example uses C++14 and "
            ],
            [
              "boost::any",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". In C++17 you can swap in "
            ],
            [
              "std::any",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " instead."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This example uses C++14 and "
          },
          {
            "Text": "boost::any",
            "AttrFlags": 2
          },
          {
            "Text": ". In C++17 you can swap in "
          },
          {
            "Text": "std::any",
            "AttrFlags": 2
          },
          {
            "Text": " instead."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523044793,
        "id": "602f0613-7e29-4bce-9b07-41554bee9e93",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523044793,
        "parent_id": "252ece15-c398-409e-b9fc-941fe3f57da5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The syntax we end up with is:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The syntax we end up with is:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523044793,
        "id": "99d822ae-8db3-4a0a-944e-681bdc8d230e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523044793,
        "parent_id": "252ece15-c398-409e-b9fc-941fe3f57da5",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "const auto print =\n  make_any_method\u003cvoid(std::ostream\u0026)\u003e([](auto\u0026\u0026 p, std::ostream\u0026 t){ t \u003c\u003c p \u003c\u003c \"\\n\"; });\n\nsuper_any\u003cdecltype(print)\u003e a = 7;\n\n(a-\u003e*print)(std::cout);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "const auto print =\n  make_any_method\u003cvoid(std::ostream\u0026)\u003e([](auto\u0026\u0026 p, std::ostream\u0026 t){ t \u003c\u003c p \u003c\u003c \"\\n\"; });\n\nsuper_any\u003cdecltype(print)\u003e a = 7;\n\n(a-\u003e*print)(std::cout);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523044793,
        "id": "dc7cc21c-60d4-4537-b1da-52baec0a8c4e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523044793,
        "parent_id": "252ece15-c398-409e-b9fc-941fe3f57da5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "which is almost optimal."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "which is almost optimal."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523044793,
        "id": "acd2d281-d9df-4b7d-8b6f-b20c7b074d2a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523044793,
        "parent_id": "252ece15-c398-409e-b9fc-941fe3f57da5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This example is based off of work by [@dyp](http://coliru.stacked-crooked.com/a/2ab8d7e41d24e616) and [@cpplearner](http://stackoverflow.com/a/38865269/1774667) as well as my own."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This example is based off of work by [@dyp](http://coliru.stacked-crooked.com/a/2ab8d7e41d24e616) and [@cpplearner](http://stackoverflow.com/a/38865269/1774667) as well as my own."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523044793,
        "id": "f87e7dcc-1b70-411b-8a71-d27798a10bcc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523044793,
        "parent_id": "252ece15-c398-409e-b9fc-941fe3f57da5",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523044793,
        "id": "9daaad42-b627-4fcb-9f9b-2856b62f4ea8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523044793,
        "parent_id": "252ece15-c398-409e-b9fc-941fe3f57da5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "First we use a tag to pass around types:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "First we use a tag to pass around types:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523044793,
        "id": "db33ac65-c73f-44b7-aac5-7fccf1a49c76",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523044793,
        "parent_id": "252ece15-c398-409e-b9fc-941fe3f57da5",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "template\u003cclass T\u003estruct tag_t{constexpr tag_t(){};};\ntemplate\u003cclass T\u003econstexpr tag_t\u003cT\u003e tag{};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "template\u003cclass T\u003estruct tag_t{constexpr tag_t(){};};\ntemplate\u003cclass T\u003econstexpr tag_t\u003cT\u003e tag{};",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523044793,
        "id": "5bc4a295-6d0f-4771-906e-a8cbe0c86b1e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523044793,
        "parent_id": "252ece15-c398-409e-b9fc-941fe3f57da5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This trait class gets the signature stored with an "
            ],
            [
              "any_method",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This trait class gets the signature stored with an "
          },
          {
            "Text": "any_method",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523044794,
        "id": "9ce71bef-322a-46df-9015-d5ceb99d8e6c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523044794,
        "parent_id": "252ece15-c398-409e-b9fc-941fe3f57da5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This creates a function pointer type, and a factory for said function pointers, given an "
            ],
            [
              "any_method",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This creates a function pointer type, and a factory for said function pointers, given an "
          },
          {
            "Text": "any_method",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523044794,
        "id": "c3f3297b-0d7c-4022-aad2-1c4c114806f6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523044794,
        "parent_id": "252ece15-c398-409e-b9fc-941fe3f57da5",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "template\u003cclass any_method\u003e\nusing any_sig_from_method = typename any_method::signature;\n\ntemplate\u003cclass any_method, class Sig=any_sig_from_method\u003cany_method\u003e\u003e\nstruct any_method_function;\n\ntemplate\u003cclass any_method, class R, class...Args\u003e\nstruct any_method_function\u003cany_method, R(Args...)\u003e\n{\n  template\u003cclass T\u003e\n  using decorate = std::conditional_t\u003c any_method::is_const, T const, T \u003e;\n  \n  using any = decorate\u003cboost::any\u003e;\n  \n  using type = R(*)(any\u0026, any_method const*, Args\u0026\u0026...);\n  template\u003cclass T\u003e\n  type operator()( tag_t\u003cT\u003e )const{\n    return +[](any\u0026 self, any_method const* method, Args\u0026\u0026...args) {\n      return (*method)( boost::any_cast\u003cdecorate\u003cT\u003e\u0026\u003e(self), decltype(args)(args)... );\n    };\n  }\n};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "template\u003cclass any_method\u003e\nusing any_sig_from_method = typename any_method::signature;\n\ntemplate\u003cclass any_method, class Sig=any_sig_from_method\u003cany_method\u003e\u003e\nstruct any_method_function;\n\ntemplate\u003cclass any_method, class R, class...Args\u003e\nstruct any_method_function\u003cany_method, R(Args...)\u003e\n{\n  template\u003cclass T\u003e\n  using decorate = std::conditional_t\u003c any_method::is_const, T const, T \u003e;\n  \n  using any = decorate\u003cboost::any\u003e;\n  \n  using type = R(*)(any\u0026, any_method const*, Args\u0026\u0026...);\n  template\u003cclass T\u003e\n  type operator()( tag_t\u003cT\u003e )const{\n    return +[](any\u0026 self, any_method const* method, Args\u0026\u0026...args) {\n      return (*method)( boost::any_cast\u003cdecorate\u003cT\u003e\u0026\u003e(self), decltype(args)(args)... );\n    };\n  }\n};",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523044794,
        "id": "f507e691-4d6c-4318-94e1-a4983ca2971f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523044794,
        "parent_id": "252ece15-c398-409e-b9fc-941fe3f57da5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "any_method_function::type",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is the type of a function pointer we will store alongside the instance. "
            ],
            [
              "any_method_function::operator()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " takes a "
            ],
            [
              "tag_t\u003cT\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and writes a custom instance of the "
            ],
            [
              "any_method_function::type",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " that assumes the "
            ],
            [
              "any\u0026",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is going to be a "
            ],
            [
              "T",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "any_method_function::type",
            "AttrFlags": 2
          },
          {
            "Text": " is the type of a function pointer we will store alongside the instance. "
          },
          {
            "Text": "any_method_function::operator()",
            "AttrFlags": 2
          },
          {
            "Text": " takes a "
          },
          {
            "Text": "tag_t\u003cT\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " and writes a custom instance of the "
          },
          {
            "Text": "any_method_function::type",
            "AttrFlags": 2
          },
          {
            "Text": " that assumes the "
          },
          {
            "Text": "any\u0026",
            "AttrFlags": 2
          },
          {
            "Text": " is going to be a "
          },
          {
            "Text": "T",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523044794,
        "id": "7e66fc19-81e7-4f8f-b208-0201e3eae1f5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523044794,
        "parent_id": "252ece15-c398-409e-b9fc-941fe3f57da5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We want to be able to type-erase more than one method at a time. So we bundle them up in a tuple, and write a helper wrapper to stick the tuple into static storage on a per-type basis and maintain a pointer to them."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "We want to be able to type-erase more than one method at a time. So we bundle them up in a tuple, and write a helper wrapper to stick the tuple into static storage on a per-type basis and maintain a pointer to them."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523044794,
        "id": "85bfac12-75f6-4ceb-adaa-f9760422e8c0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523044794,
        "parent_id": "252ece15-c398-409e-b9fc-941fe3f57da5",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "template\u003cclass...any_methods\u003e\nusing any_method_tuple = std::tuple\u003c typename any_method_function\u003cany_methods\u003e::type... \u003e;\n\ntemplate\u003cclass...any_methods, class T\u003e\nany_method_tuple\u003cany_methods...\u003e make_vtable( tag_t\u003cT\u003e ) {\n  return std::make_tuple(\n    any_method_function\u003cany_methods\u003e{}(tag\u003cT\u003e)...\n  );\n}\n\ntemplate\u003cclass...methods\u003e\nstruct any_methods {\nprivate:\n  any_method_tuple\u003cmethods...\u003e const* vtable = 0;\n  template\u003cclass T\u003e\n  static any_method_tuple\u003cmethods...\u003e const* get_vtable( tag_t\u003cT\u003e ) {\n    static const auto table = make_vtable\u003cmethods...\u003e(tag\u003cT\u003e);\n    return \u0026table;\n  }\npublic:\n  any_methods() = default;\n  template\u003cclass T\u003e\n  any_methods( tag_t\u003cT\u003e ): vtable(get_vtable(tag\u003cT\u003e)) {}\n  any_methods\u0026 operator=(any_methods const\u0026)=default;\n  template\u003cclass T\u003e\n  void change_type( tag_t\u003cT\u003e ={} ) { vtable = get_vtable(tag\u003cT\u003e); }\n    \n  template\u003cclass any_method\u003e\n  auto get_invoker( tag_t\u003cany_method\u003e ={} ) const {\n    return std::get\u003ctypename any_method_function\u003cany_method\u003e::type\u003e( *vtable );\n  }\n};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "template\u003cclass...any_methods\u003e\nusing any_method_tuple = std::tuple\u003c typename any_method_function\u003cany_methods\u003e::type... \u003e;\n\ntemplate\u003cclass...any_methods, class T\u003e\nany_method_tuple\u003cany_methods...\u003e make_vtable( tag_t\u003cT\u003e ) {\n  return std::make_tuple(\n    any_method_function\u003cany_methods\u003e{}(tag\u003cT\u003e)...\n  );\n}\n\ntemplate\u003cclass...methods\u003e\nstruct any_methods {\nprivate:\n  any_method_tuple\u003cmethods...\u003e const* vtable = 0;\n  template\u003cclass T\u003e\n  static any_method_tuple\u003cmethods...\u003e const* get_vtable( tag_t\u003cT\u003e ) {\n    static const auto table = make_vtable\u003cmethods...\u003e(tag\u003cT\u003e);\n    return \u0026table;\n  }\npublic:\n  any_methods() = default;\n  template\u003cclass T\u003e\n  any_methods( tag_t\u003cT\u003e ): vtable(get_vtable(tag\u003cT\u003e)) {}\n  any_methods\u0026 operator=(any_methods const\u0026)=default;\n  template\u003cclass T\u003e\n  void change_type( tag_t\u003cT\u003e ={} ) { vtable = get_vtable(tag\u003cT\u003e); }\n    \n  template\u003cclass any_method\u003e\n  auto get_invoker( tag_t\u003cany_method\u003e ={} ) const {\n    return std::get\u003ctypename any_method_function\u003cany_method\u003e::type\u003e( *vtable );\n  }\n};",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523044795,
        "id": "cb64a186-64b4-4648-a618-9af1ca38b31f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523044795,
        "parent_id": "252ece15-c398-409e-b9fc-941fe3f57da5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We could specialize this for a cases where the vtable is small (for example, 1 item), and use direct pointers stored in-class in those cases for efficiency."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "We could specialize this for a cases where the vtable is small (for example, 1 item), and use direct pointers stored in-class in those cases for efficiency."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523044795,
        "id": "37f31a86-9ea6-4a97-9f03-569c8c8c3e25",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523044795,
        "parent_id": "252ece15-c398-409e-b9fc-941fe3f57da5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Now we start the "
            ],
            [
              "super_any",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". I use "
            ],
            [
              "super_any_t",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to make the declaration of "
            ],
            [
              "super_any",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " a bit easier."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Now we start the "
          },
          {
            "Text": "super_any",
            "AttrFlags": 2
          },
          {
            "Text": ". I use "
          },
          {
            "Text": "super_any_t",
            "AttrFlags": 2
          },
          {
            "Text": " to make the declaration of "
          },
          {
            "Text": "super_any",
            "AttrFlags": 2
          },
          {
            "Text": " a bit easier."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523044795,
        "id": "83b5b347-4afe-4bae-805d-98b70929d048",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523044795,
        "parent_id": "252ece15-c398-409e-b9fc-941fe3f57da5",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "template\u003cclass...methods\u003e\nstruct super_any_t;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "template\u003cclass...methods\u003e\nstruct super_any_t;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523044795,
        "id": "abd7bf35-48fb-4813-9b7f-50fb59ceef90",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523044795,
        "parent_id": "252ece15-c398-409e-b9fc-941fe3f57da5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This searches the methods that the super any supports for SFINAE and better error messages:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This searches the methods that the super any supports for SFINAE and better error messages:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523044795,
        "id": "909a60f5-1fac-452a-8406-3131386d3a5a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523044795,
        "parent_id": "252ece15-c398-409e-b9fc-941fe3f57da5",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "template\u003cclass super_any, class method\u003e\nstruct super_method_applies_helper : std::false_type {};\n\ntemplate\u003cclass M0, class...Methods, class method\u003e\nstruct super_method_applies_helper\u003csuper_any_t\u003cM0, Methods...\u003e, method\u003e :\n    std::integral_constant\u003cbool, std::is_same\u003cM0, method\u003e{}  || super_method_applies_helper\u003csuper_any_t\u003cMethods...\u003e, method\u003e{}\u003e\n{};\n\ntemplate\u003cclass...methods, class method\u003e\nauto super_method_test( super_any_t\u003cmethods...\u003e const\u0026, tag_t\u003cmethod\u003e )\n{\n  return std::integral_constant\u003cbool, super_method_applies_helper\u003c super_any_t\u003cmethods...\u003e, method \u003e{} \u0026\u0026 method::is_const \u003e{};\n}\ntemplate\u003cclass...methods, class method\u003e\nauto super_method_test( super_any_t\u003cmethods...\u003e\u0026, tag_t\u003cmethod\u003e )\n{\n  return std::integral_constant\u003cbool, super_method_applies_helper\u003c super_any_t\u003cmethods...\u003e, method \u003e{} \u003e{};\n}\n\ntemplate\u003cclass super_any, class method\u003e\nstruct super_method_applies:\n    decltype( super_method_test( std::declval\u003csuper_any\u003e(), tag\u003cmethod\u003e ) )\n{};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "template\u003cclass super_any, class method\u003e\nstruct super_method_applies_helper : std::false_type {};\n\ntemplate\u003cclass M0, class...Methods, class method\u003e\nstruct super_method_applies_helper\u003csuper_any_t\u003cM0, Methods...\u003e, method\u003e :\n    std::integral_constant\u003cbool, std::is_same\u003cM0, method\u003e{}  || super_method_applies_helper\u003csuper_any_t\u003cMethods...\u003e, method\u003e{}\u003e\n{};\n\ntemplate\u003cclass...methods, class method\u003e\nauto super_method_test( super_any_t\u003cmethods...\u003e const\u0026, tag_t\u003cmethod\u003e )\n{\n  return std::integral_constant\u003cbool, super_method_applies_helper\u003c super_any_t\u003cmethods...\u003e, method \u003e{} \u0026\u0026 method::is_const \u003e{};\n}\ntemplate\u003cclass...methods, class method\u003e\nauto super_method_test( super_any_t\u003cmethods...\u003e\u0026, tag_t\u003cmethod\u003e )\n{\n  return std::integral_constant\u003cbool, super_method_applies_helper\u003c super_any_t\u003cmethods...\u003e, method \u003e{} \u003e{};\n}\n\ntemplate\u003cclass super_any, class method\u003e\nstruct super_method_applies:\n    decltype( super_method_test( std::declval\u003csuper_any\u003e(), tag\u003cmethod\u003e ) )\n{};",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523044795,
        "id": "3365085b-4b9f-42d0-ad51-44ec6eb8fa48",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523044795,
        "parent_id": "252ece15-c398-409e-b9fc-941fe3f57da5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Next we create the "
            ],
            [
              "any_method",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " type. An "
            ],
            [
              "any_method",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is a pseudo-method-pointer. We create it globally and "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "ly using syntax like:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Next we create the "
          },
          {
            "Text": "any_method",
            "AttrFlags": 2
          },
          {
            "Text": " type. An "
          },
          {
            "Text": "any_method",
            "AttrFlags": 2
          },
          {
            "Text": " is a pseudo-method-pointer. We create it globally and "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": "ly using syntax like:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523044795,
        "id": "7c555476-c5ff-46d2-af20-426a1da08cef",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523044795,
        "parent_id": "252ece15-c398-409e-b9fc-941fe3f57da5",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "const auto print=make_any_method( [](auto\u0026\u0026self, auto\u0026\u0026os){ os \u003c\u003c self; } );"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "const auto print=make_any_method( [](auto\u0026\u0026self, auto\u0026\u0026os){ os \u003c\u003c self; } );",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523044796,
        "id": "327bbec0-62a9-44f4-9185-eaf4d870ae48",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523044796,
        "parent_id": "252ece15-c398-409e-b9fc-941fe3f57da5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "or in C++17:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "or in C++17:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523044796,
        "id": "afafe1a3-df8e-4e73-a509-3ce3e3dd5e9c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523044796,
        "parent_id": "252ece15-c398-409e-b9fc-941fe3f57da5",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "const any_method print=[](auto\u0026\u0026self, auto\u0026\u0026os){ os \u003c\u003c self; };"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "const any_method print=[](auto\u0026\u0026self, auto\u0026\u0026os){ os \u003c\u003c self; };",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523044796,
        "id": "56502631-144a-490f-a177-d300c01fda87",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523044796,
        "parent_id": "252ece15-c398-409e-b9fc-941fe3f57da5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note that using a non-lambda can make things hairy, as we use the type for a lookup step. This can be fixed, but would make this example longer than it already is. So always initialize an any method from a lambda, or from a type parametarized on a lambda."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note that using a non-lambda can make things hairy, as we use the type for a lookup step. This can be fixed, but would make this example longer than it already is. So always initialize an any method from a lambda, or from a type parametarized on a lambda."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523044796,
        "id": "21378d34-70c3-4c15-909b-33f15c18c976",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523044796,
        "parent_id": "252ece15-c398-409e-b9fc-941fe3f57da5",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "template\u003cclass Sig, bool const_method, class F\u003e\nstruct any_method {\n  using signature=Sig;\n  enum{is_const=const_method};\nprivate:\n  F f;\npublic:\n\n  template\u003cclass Any,\n    // SFINAE testing that one of the Anys's matches this type:\n    std::enable_if_t\u003c super_method_applies\u003c Any\u0026\u0026, any_method \u003e{}, int\u003e* =nullptr\n  \u003e\n  friend auto operator-\u003e*( Any\u0026\u0026 self, any_method const\u0026 m ) {\n    // we don't use the value of the any_method, because each any_method has\n    // a unique type (!) and we check that one of the auto*'s in the super_any\n    // already has a pointer to us.  We then dispatch to the corresponding\n    // any_method_data...\n\n    return [\u0026self, invoke = self.get_invoker(tag\u003cany_method\u003e), m](auto\u0026\u0026...args)-\u003edecltype(auto)\n    {\n      return invoke( decltype(self)(self), \u0026m, decltype(args)(args)... );\n    };\n  }\n  any_method( F fin ):f(std::move(fin)) {}\n  \n  template\u003cclass...Args\u003e\n  decltype(auto) operator()(Args\u0026\u0026...args)const {\n    return f(std::forward\u003cArgs\u003e(args)...);\n  }\n};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "template\u003cclass Sig, bool const_method, class F\u003e\nstruct any_method {\n  using signature=Sig;\n  enum{is_const=const_method};\nprivate:\n  F f;\npublic:\n\n  template\u003cclass Any,\n    // SFINAE testing that one of the Anys's matches this type:\n    std::enable_if_t\u003c super_method_applies\u003c Any\u0026\u0026, any_method \u003e{}, int\u003e* =nullptr\n  \u003e\n  friend auto operator-\u003e*( Any\u0026\u0026 self, any_method const\u0026 m ) {\n    // we don't use the value of the any_method, because each any_method has\n    // a unique type (!) and we check that one of the auto*'s in the super_any\n    // already has a pointer to us.  We then dispatch to the corresponding\n    // any_method_data...\n\n    return [\u0026self, invoke = self.get_invoker(tag\u003cany_method\u003e), m](auto\u0026\u0026...args)-\u003edecltype(auto)\n    {\n      return invoke( decltype(self)(self), \u0026m, decltype(args)(args)... );\n    };\n  }\n  any_method( F fin ):f(std::move(fin)) {}\n  \n  template\u003cclass...Args\u003e\n  decltype(auto) operator()(Args\u0026\u0026...args)const {\n    return f(std::forward\u003cArgs\u003e(args)...);\n  }\n};",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523044796,
        "id": "81758ee0-8e28-45c6-9b42-d4cab798f3d3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523044796,
        "parent_id": "252ece15-c398-409e-b9fc-941fe3f57da5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A factory method, not needed in C++17 I believe:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A factory method, not needed in C++17 I believe:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523044796,
        "id": "185fd080-8dbb-482d-8130-550060eb864a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523044796,
        "parent_id": "252ece15-c398-409e-b9fc-941fe3f57da5",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "template\u003cclass Sig, bool is_const=false, class F\u003e\nany_method\u003cSig, is_const, std::decay_t\u003cF\u003e\u003e\nmake_any_method( F\u0026\u0026 f ) {\n  return {std::forward\u003cF\u003e(f)};\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "template\u003cclass Sig, bool is_const=false, class F\u003e\nany_method\u003cSig, is_const, std::decay_t\u003cF\u003e\u003e\nmake_any_method( F\u0026\u0026 f ) {\n  return {std::forward\u003cF\u003e(f)};\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523044796,
        "id": "abeece70-e65e-4069-8452-a0314e4a64d7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523044796,
        "parent_id": "252ece15-c398-409e-b9fc-941fe3f57da5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This is the augmented "
            ],
            [
              "any",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". It is both an "
            ],
            [
              "any",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", and it carries around a bundle of type-erasure function pointers that change whenever the contained "
            ],
            [
              "any",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " does:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This is the augmented "
          },
          {
            "Text": "any",
            "AttrFlags": 2
          },
          {
            "Text": ". It is both an "
          },
          {
            "Text": "any",
            "AttrFlags": 2
          },
          {
            "Text": ", and it carries around a bundle of type-erasure function pointers that change whenever the contained "
          },
          {
            "Text": "any",
            "AttrFlags": 2
          },
          {
            "Text": " does:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523044796,
        "id": "59922d31-8118-409c-bba8-4c7acda61160",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523044796,
        "parent_id": "252ece15-c398-409e-b9fc-941fe3f57da5",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "template\u003cclass... methods\u003e\nstruct super_any_t:boost::any, any_methods\u003cmethods...\u003e {\n  using vtable=any_methods\u003cmethods...\u003e;\npublic:\n  template\u003cclass T,\n    std::enable_if_t\u003c !std::is_base_of\u003csuper_any_t, std::decay_t\u003cT\u003e\u003e{}, int\u003e =0\n  \u003e\n  super_any_t( T\u0026\u0026 t ):\n    boost::any( std::forward\u003cT\u003e(t) )\n  {\n    using dT=std::decay_t\u003cT\u003e;\n    this-\u003echange_type( tag\u003cdT\u003e );\n  }\n  \n  boost::any\u0026 as_any()\u0026{return *this;}\n  boost::any\u0026\u0026 as_any()\u0026\u0026{return std::move(*this);}\n  boost::any const\u0026 as_any()const\u0026{return *this;}\n  super_any_t()=default;\n  super_any_t(super_any_t\u0026\u0026 o):\n    boost::any( std::move( o.as_any() ) ),\n    vtable(o)\n  {}\n  super_any_t(super_any_t const\u0026 o):\n    boost::any( o.as_any() ),\n    vtable(o)\n  {}\n  template\u003cclass S,\n    std::enable_if_t\u003c std::is_same\u003cstd::decay_t\u003cS\u003e, super_any_t\u003e{}, int\u003e =0\n  \u003e\n  super_any_t( S\u0026\u0026 o ):\n    boost::any( std::forward\u003cS\u003e(o).as_any() ),\n    vtable(o)\n  {}\n  super_any_t\u0026 operator=(super_any_t\u0026\u0026)=default;\n  super_any_t\u0026 operator=(super_any_t const\u0026)=default;\n  \n  template\u003cclass T,\n    std::enable_if_t\u003c !std::is_same\u003cstd::decay_t\u003cT\u003e, super_any_t\u003e{}, int\u003e* =nullptr\n  \u003e\n  super_any_t\u0026 operator=( T\u0026\u0026 t ) {\n    ((boost::any\u0026)*this) = std::forward\u003cT\u003e(t);\n    using dT=std::decay_t\u003cT\u003e;\n    this-\u003echange_type( tag\u003cdT\u003e );\n    return *this;\n  }  \n};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "template\u003cclass... methods\u003e\nstruct super_any_t:boost::any, any_methods\u003cmethods...\u003e {\n  using vtable=any_methods\u003cmethods...\u003e;\npublic:\n  template\u003cclass T,\n    std::enable_if_t\u003c !std::is_base_of\u003csuper_any_t, std::decay_t\u003cT\u003e\u003e{}, int\u003e =0\n  \u003e\n  super_any_t( T\u0026\u0026 t ):\n    boost::any( std::forward\u003cT\u003e(t) )\n  {\n    using dT=std::decay_t\u003cT\u003e;\n    this-\u003echange_type( tag\u003cdT\u003e );\n  }\n  \n  boost::any\u0026 as_any()\u0026{return *this;}\n  boost::any\u0026\u0026 as_any()\u0026\u0026{return std::move(*this);}\n  boost::any const\u0026 as_any()const\u0026{return *this;}\n  super_any_t()=default;\n  super_any_t(super_any_t\u0026\u0026 o):\n    boost::any( std::move( o.as_any() ) ),\n    vtable(o)\n  {}\n  super_any_t(super_any_t const\u0026 o):\n    boost::any( o.as_any() ),\n    vtable(o)\n  {}\n  template\u003cclass S,\n    std::enable_if_t\u003c std::is_same\u003cstd::decay_t\u003cS\u003e, super_any_t\u003e{}, int\u003e =0\n  \u003e\n  super_any_t( S\u0026\u0026 o ):\n    boost::any( std::forward\u003cS\u003e(o).as_any() ),\n    vtable(o)\n  {}\n  super_any_t\u0026 operator=(super_any_t\u0026\u0026)=default;\n  super_any_t\u0026 operator=(super_any_t const\u0026)=default;\n  \n  template\u003cclass T,\n    std::enable_if_t\u003c !std::is_same\u003cstd::decay_t\u003cT\u003e, super_any_t\u003e{}, int\u003e* =nullptr\n  \u003e\n  super_any_t\u0026 operator=( T\u0026\u0026 t ) {\n    ((boost::any\u0026)*this) = std::forward\u003cT\u003e(t);\n    using dT=std::decay_t\u003cT\u003e;\n    this-\u003echange_type( tag\u003cdT\u003e );\n    return *this;\n  }  \n};",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523044797,
        "id": "8e99d1dc-138f-464c-83d6-aa3390142e8c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523044797,
        "parent_id": "252ece15-c398-409e-b9fc-941fe3f57da5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Because we store the "
            ],
            [
              "any_method",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "s as "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " objects, this makes making a "
            ],
            [
              "super_any",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " a bit easier:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Because we store the "
          },
          {
            "Text": "any_method",
            "AttrFlags": 2
          },
          {
            "Text": "s as "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": " objects, this makes making a "
          },
          {
            "Text": "super_any",
            "AttrFlags": 2
          },
          {
            "Text": " a bit easier:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523044797,
        "id": "4a840d48-9047-4ed3-ab08-4ab09cc1c80f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523044797,
        "parent_id": "252ece15-c398-409e-b9fc-941fe3f57da5",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "template\u003cclass...Ts\u003e\nusing super_any = super_any_t\u003c std::remove_cv_t\u003cTs\u003e... \u003e;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "template\u003cclass...Ts\u003e\nusing super_any = super_any_t\u003c std::remove_cv_t\u003cTs\u003e... \u003e;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523044797,
        "id": "294849ff-6bf3-430d-a67d-61ac164f800a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523044797,
        "parent_id": "252ece15-c398-409e-b9fc-941fe3f57da5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Test code:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Test code:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523044797,
        "id": "9de50ab2-eab3-400a-a276-3695507e261d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523044797,
        "parent_id": "252ece15-c398-409e-b9fc-941fe3f57da5",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "const auto print = make_any_method\u003cvoid(std::ostream\u0026)\u003e([](auto\u0026\u0026 p, std::ostream\u0026 t){ t \u003c\u003c p \u003c\u003c \"\\n\"; });\nconst auto wprint = make_any_method\u003cvoid(std::wostream\u0026)\u003e([](auto\u0026\u0026 p, std::wostream\u0026 os ){ os \u003c\u003c p \u003c\u003c L\"\\n\"; });\n\nint main()\n{\n  super_any\u003cdecltype(print), decltype(wprint)\u003e a = 7;\n  super_any\u003cdecltype(print), decltype(wprint)\u003e a2 = 7;\n\n  (a-\u003e*print)(std::cout);\n  (a-\u003e*wprint)(std::wcout);\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "const auto print = make_any_method\u003cvoid(std::ostream\u0026)\u003e([](auto\u0026\u0026 p, std::ostream\u0026 t){ t \u003c\u003c p \u003c\u003c \"\\n\"; });\nconst auto wprint = make_any_method\u003cvoid(std::wostream\u0026)\u003e([](auto\u0026\u0026 p, std::wostream\u0026 os ){ os \u003c\u003c p \u003c\u003c L\"\\n\"; });\n\nint main()\n{\n  super_any\u003cdecltype(print), decltype(wprint)\u003e a = 7;\n  super_any\u003cdecltype(print), decltype(wprint)\u003e a2 = 7;\n\n  (a-\u003e*print)(std::cout);\n  (a-\u003e*wprint)(std::wcout);\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523044799,
        "id": "a3191653-6e45-4490-ae9d-ed39633d02e2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523044799,
        "parent_id": "252ece15-c398-409e-b9fc-941fe3f57da5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "live example",
              [
                [
                  "a",
                  "http://coliru.stacked-crooked.com/a/fbd10edb3336cce1"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "live example",
            "Link": "http://coliru.stacked-crooked.com/a/fbd10edb3336cce1"
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523044799,
        "id": "7bf54296-2d66-4be0-bb28-809a18c1b56f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523044799,
        "parent_id": "252ece15-c398-409e-b9fc-941fe3f57da5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Originally posted "
            ],
            [
              "here",
              [
                [
                  "a",
                  "http://stackoverflow.com/a/38837687/1774667"
                ]
              ]
            ],
            [
              " in a SO self question \u0026 answer (and people noted above helped with the implementation)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Originally posted "
          },
          {
            "Text": "here",
            "Link": "http://stackoverflow.com/a/38837687/1774667"
          },
          {
            "Text": " in a SO self question \u0026 answer (and people noted above helped with the implementation)."
          }
        ]
      }
    ],
    "title": "050 Type erasing type erasure with std any"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}