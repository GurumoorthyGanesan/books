{
  "ID": "46be35c4-7be1-4128-a261-13e90425608b",
  "Root": {
    "alive": true,
    "content": [
      "4cbbdbc1-dca2-4fea-a237-4ee5a95c434a",
      "32684b9f-5196-4c1b-a290-4ccaa4583bb0",
      "08a741b5-58d6-498f-a1c6-a31b4290aeb7",
      "ce2a645e-3323-4dd8-b17b-a49c48188cae",
      "93115879-52d5-4390-a169-4ef44cc14412",
      "06f17563-17da-4808-a36d-d2d454d99fb9",
      "d9ac8741-e25b-4f2b-bd8b-8e6c2e4af834",
      "2203cff8-73ed-47f1-9143-7f09a08d5a3b",
      "84ab847e-006b-42c3-ac96-ba1eb77d09be",
      "5a4b42c7-2f0a-4c59-8ee8-161c4d6be07f",
      "730f662a-7b00-4731-b080-775d719e684a",
      "9c7441e1-6bb9-4584-adc8-ac4d30fd46da",
      "2319908e-87e0-444b-9ba5-8447df3786e1",
      "5725cf78-043f-41dc-8c97-e45f5d97d63f",
      "8e79a15e-79ba-4938-a8cf-7ac5370d69c8",
      "47c1a1f9-643e-478b-bab1-238f3c8e6a17",
      "cfa7ee21-fba5-4049-8b93-273bbf3f0974",
      "aec2a842-a4eb-4306-bd9e-78576c3c4f2b",
      "0fd9f1ff-21cf-440f-9f7a-3d533f6c89cd",
      "2d5f38de-b717-4d4b-a4ec-63b53ccfbd3c"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522033479,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "46be35c4-7be1-4128-a261-13e90425608b",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550655960000,
    "parent_id": "3b14aac5-20b3-4de0-9a04-adc1cc273aec",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "What is Function Overloading"
        ]
      ]
    },
    "type": "page",
    "version": 10,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522033474,
        "id": "4cbbdbc1-dca2-4fea-a237-4ee5a95c434a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522033474,
        "parent_id": "46be35c4-7be1-4128-a261-13e90425608b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Function overloading is having multiple functions declared in the same scope with the exact same name exist in the same place (known as "
            ],
            [
              "scope",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ") differing only in their "
            ],
            [
              "signature",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ", meaning the arguments they accept."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Function overloading is having multiple functions declared in the same scope with the exact same name exist in the same place (known as "
          },
          {
            "Text": "scope",
            "AttrFlags": 4
          },
          {
            "Text": ") differing only in their "
          },
          {
            "Text": "signature",
            "AttrFlags": 4
          },
          {
            "Text": ", meaning the arguments they accept."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522033477,
        "id": "32684b9f-5196-4c1b-a290-4ccaa4583bb0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522033477,
        "parent_id": "46be35c4-7be1-4128-a261-13e90425608b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Suppose you are writing a series of functions for generalized printing capabilities, beginning with "
            ],
            [
              "std::string",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Suppose you are writing a series of functions for generalized printing capabilities, beginning with "
          },
          {
            "Text": "std::string",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522033477,
        "id": "08a741b5-58d6-498f-a1c6-a31b4290aeb7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522033477,
        "parent_id": "46be35c4-7be1-4128-a261-13e90425608b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "void print(const std::string \u0026str)\n{\n    std::cout \u003c\u003c \"This is a string: \" \u003c\u003c str \u003c\u003c std::endl;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "void print(const std::string \u0026str)\n{\n    std::cout \u003c\u003c \"This is a string: \" \u003c\u003c str \u003c\u003c std::endl;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522033477,
        "id": "ce2a645e-3323-4dd8-b17b-a49c48188cae",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522033477,
        "parent_id": "46be35c4-7be1-4128-a261-13e90425608b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This works fine, but suppose you want a function that also accepts an "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and prints that too. You could write:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This works fine, but suppose you want a function that also accepts an "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": " and prints that too. You could write:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522033477,
        "id": "93115879-52d5-4390-a169-4ef44cc14412",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522033477,
        "parent_id": "46be35c4-7be1-4128-a261-13e90425608b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "void print_int(int num)\n{\n    std::cout \u003c\u003c \"This is an int:  \" \u003c\u003c num \u003c\u003c std::endl;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "void print_int(int num)\n{\n    std::cout \u003c\u003c \"This is an int:  \" \u003c\u003c num \u003c\u003c std::endl;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522033478,
        "id": "06f17563-17da-4808-a36d-d2d454d99fb9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522033478,
        "parent_id": "46be35c4-7be1-4128-a261-13e90425608b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "But because the two functions accept different parameters, you can simply write:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "But because the two functions accept different parameters, you can simply write:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522033478,
        "id": "d9ac8741-e25b-4f2b-bd8b-8e6c2e4af834",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522033478,
        "parent_id": "46be35c4-7be1-4128-a261-13e90425608b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "void print(int num)\n{\n    std::cout \u003c\u003c \"This is an int: \" \u003c\u003c num \u003c\u003c std::endl;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "void print(int num)\n{\n    std::cout \u003c\u003c \"This is an int: \" \u003c\u003c num \u003c\u003c std::endl;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522033478,
        "id": "2203cff8-73ed-47f1-9143-7f09a08d5a3b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522033478,
        "parent_id": "46be35c4-7be1-4128-a261-13e90425608b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Now you have 2 functions, both named "
            ],
            [
              "print",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", but with different signatures. One accepts "
            ],
            [
              "std::string",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", the other one an "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Now you can call them without worrying about different names:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Now you have 2 functions, both named "
          },
          {
            "Text": "print",
            "AttrFlags": 2
          },
          {
            "Text": ", but with different signatures. One accepts "
          },
          {
            "Text": "std::string",
            "AttrFlags": 2
          },
          {
            "Text": ", the other one an "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": ". Now you can call them without worrying about different names:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522033478,
        "id": "84ab847e-006b-42c3-ac96-ba1eb77d09be",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522033478,
        "parent_id": "46be35c4-7be1-4128-a261-13e90425608b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "print(\"Hello world!\"); //prints \"This is a string: Hello world!\"\nprint(1337);           //prints \"This is an int: 1337\""
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "print(\"Hello world!\"); //prints \"This is a string: Hello world!\"\nprint(1337);           //prints \"This is an int: 1337\"",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522033478,
        "id": "5a4b42c7-2f0a-4c59-8ee8-161c4d6be07f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522033478,
        "parent_id": "46be35c4-7be1-4128-a261-13e90425608b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Instead of:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Instead of:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522033478,
        "id": "730f662a-7b00-4731-b080-775d719e684a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522033478,
        "parent_id": "46be35c4-7be1-4128-a261-13e90425608b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "print(\"Hello world!\");\nprint_int(1337);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "print(\"Hello world!\");\nprint_int(1337);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522033478,
        "id": "9c7441e1-6bb9-4584-adc8-ac4d30fd46da",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522033478,
        "parent_id": "46be35c4-7be1-4128-a261-13e90425608b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When you have overloaded functions, the compiler infers which of the functions to call from the parameters you provide it. Care must be taken when writing function overloads. For example, with implicit type conversions:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When you have overloaded functions, the compiler infers which of the functions to call from the parameters you provide it. Care must be taken when writing function overloads. For example, with implicit type conversions:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522033478,
        "id": "2319908e-87e0-444b-9ba5-8447df3786e1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522033478,
        "parent_id": "46be35c4-7be1-4128-a261-13e90425608b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "void print(int num)\n{\n    std::cout \u003c\u003c \"This is an int: \" \u003c\u003c num \u003c\u003c std::endl;\n}\nvoid print(double num)\n{\n    std::cout \u003c\u003c \"This is a double: \" \u003c\u003c num \u003c\u003c std::endl;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "void print(int num)\n{\n    std::cout \u003c\u003c \"This is an int: \" \u003c\u003c num \u003c\u003c std::endl;\n}\nvoid print(double num)\n{\n    std::cout \u003c\u003c \"This is a double: \" \u003c\u003c num \u003c\u003c std::endl;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522033479,
        "id": "5725cf78-043f-41dc-8c97-e45f5d97d63f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522033479,
        "parent_id": "46be35c4-7be1-4128-a261-13e90425608b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Now it’s not immediately clear which overload of "
            ],
            [
              "print",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is called when you write:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Now it’s not immediately clear which overload of "
          },
          {
            "Text": "print",
            "AttrFlags": 2
          },
          {
            "Text": " is called when you write:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522033479,
        "id": "8e79a15e-79ba-4938-a8cf-7ac5370d69c8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522033479,
        "parent_id": "46be35c4-7be1-4128-a261-13e90425608b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "print(5);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "print(5);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522033479,
        "id": "47c1a1f9-643e-478b-bab1-238f3c8e6a17",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522033479,
        "parent_id": "46be35c4-7be1-4128-a261-13e90425608b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "And you might need to give your compiler some clues, like:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "And you might need to give your compiler some clues, like:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522033479,
        "id": "cfa7ee21-fba5-4049-8b93-273bbf3f0974",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522033479,
        "parent_id": "46be35c4-7be1-4128-a261-13e90425608b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "print(static_cast\u003cdouble\u003e(5));\nprint(static_cast\u003cint\u003e(5));\nprint(5.0);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "print(static_cast\u003cdouble\u003e(5));\nprint(static_cast\u003cint\u003e(5));\nprint(5.0);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522033479,
        "id": "aec2a842-a4eb-4306-bd9e-78576c3c4f2b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522033479,
        "parent_id": "46be35c4-7be1-4128-a261-13e90425608b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Some care also needs to be taken when writing overloads that accept optional parameters:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Some care also needs to be taken when writing overloads that accept optional parameters:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522033479,
        "id": "0fd9f1ff-21cf-440f-9f7a-3d533f6c89cd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522033479,
        "parent_id": "46be35c4-7be1-4128-a261-13e90425608b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// WRONG CODE\nvoid print(int num1, int num2 = 0)    //num2 defaults to 0 if not included\n{ \n    std::cout \u003c\u003c \"These are ints: \u003c\u003c num1 \u003c\u003c \" and \" \u003c\u003c num2 \u003c\u003c std::endl;\n}\nvoid print(int num)\n{\n    std::cout \u003c\u003c \"This is an int: \" \u003c\u003c num \u003c\u003c std::endl;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// WRONG CODE\nvoid print(int num1, int num2 = 0)    //num2 defaults to 0 if not included\n{ \n    std::cout \u003c\u003c \"These are ints: \u003c\u003c num1 \u003c\u003c \" and \" \u003c\u003c num2 \u003c\u003c std::endl;\n}\nvoid print(int num)\n{\n    std::cout \u003c\u003c \"This is an int: \" \u003c\u003c num \u003c\u003c std::endl;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522033479,
        "id": "2d5f38de-b717-4d4b-a4ec-63b53ccfbd3c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522033479,
        "parent_id": "46be35c4-7be1-4128-a261-13e90425608b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Because there’s no way for the compiler to tell if a call like "
            ],
            [
              "print(17)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is meant for the first or second function because of the optional second parameter, this will fail to compile."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Because there’s no way for the compiler to tell if a call like "
          },
          {
            "Text": "print(17)",
            "AttrFlags": 2
          },
          {
            "Text": " is meant for the first or second function because of the optional second parameter, this will fail to compile."
          }
        ]
      }
    ],
    "title": "What is Function Overloading",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}