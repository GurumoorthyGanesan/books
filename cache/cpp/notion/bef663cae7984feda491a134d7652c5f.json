{
  "ID": "bef663ca-e798-4fed-a491-a134d7652c5f",
  "Root": {
    "alive": true,
    "content": [
      "4323f95f-5662-4a29-a7c2-da3d769d0f20",
      "8a1b6eb5-bffb-4c2b-8a7b-96f3d21aae8a",
      "6be0a89d-76db-4ffa-9b42-2bc64cd873ad",
      "967b3f7d-916b-46a3-aff9-5848a4018360"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550524683568,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "bef663ca-e798-4fed-a491-a134d7652c5f",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550797740000,
    "parent_id": "7b3003e0-5331-46e9-a216-03a87845d9e4",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "decltype"
        ]
      ]
    },
    "type": "page",
    "version": 16,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524683564,
        "id": "4323f95f-5662-4a29-a7c2-da3d769d0f20",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524683564,
        "parent_id": "bef663ca-e798-4fed-a491-a134d7652c5f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Yields the type of its operand, which is not evaluated."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Yields the type of its operand, which is not evaluated."
          }
        ]
      },
      {
        "alive": true,
        "content": [
          "e604555b-6fac-4765-b3d0-8f4dbaa9a171"
        ],
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524683566,
        "id": "8a1b6eb5-bffb-4c2b-8a7b-96f3d21aae8a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550797680000,
        "parent_id": "bef663ca-e798-4fed-a491-a134d7652c5f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If the operand "
            ],
            [
              "e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is a name without any additional parentheses, then "
            ],
            [
              "decltype(e)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is the "
            ],
            [
              "declared type",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " of "
            ],
            [
              "e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 3,
        "content_resolved": [
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1550524683566,
            "id": "e604555b-6fac-4765-b3d0-8f4dbaa9a171",
            "ignore_block_count": true,
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1550797680000,
            "parent_id": "8a1b6eb5-bffb-4c2b-8a7b-96f3d21aae8a",
            "parent_table": "block",
            "properties": {
              "language": [
                [
                  "Plain Text"
                ]
              ],
              "title": [
                [
                  "int x = 42;\nstd::vector\u003cdecltype(x)\u003e v(100, x); // v is a vector\u003cint\u003e"
                ]
              ]
            },
            "type": "code",
            "version": 4,
            "code": "int x = 42;\nstd::vector\u003cdecltype(x)\u003e v(100, x); // v is a vector\u003cint\u003e",
            "code_language": "Plain Text"
          }
        ],
        "inline_content": [
          {
            "Text": "If the operand "
          },
          {
            "Text": "e",
            "AttrFlags": 2
          },
          {
            "Text": " is a name without any additional parentheses, then "
          },
          {
            "Text": "decltype(e)",
            "AttrFlags": 2
          },
          {
            "Text": " is the "
          },
          {
            "Text": "declared type",
            "AttrFlags": 4
          },
          {
            "Text": " of "
          },
          {
            "Text": "e",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "content": [
          "ea65ed65-c88e-427b-bf63-9d59b21bc31e"
        ],
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524683566,
        "id": "6be0a89d-76db-4ffa-9b42-2bc64cd873ad",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550797680000,
        "parent_id": "bef663ca-e798-4fed-a491-a134d7652c5f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If the operand "
            ],
            [
              "e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is a class member access without any additional parentheses, then "
            ],
            [
              "decltype(e)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is the "
            ],
            [
              "declared type",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " of the member accessed."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 3,
        "content_resolved": [
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1550524683566,
            "id": "ea65ed65-c88e-427b-bf63-9d59b21bc31e",
            "ignore_block_count": true,
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1550797680000,
            "parent_id": "6be0a89d-76db-4ffa-9b42-2bc64cd873ad",
            "parent_table": "block",
            "properties": {
              "language": [
                [
                  "Plain Text"
                ]
              ],
              "title": [
                [
                  "struct S {\n    int x = 42;\n};\nconst S s;\ndecltype(s.x) y; // y has type int, even though s.x is const"
                ]
              ]
            },
            "type": "code",
            "version": 4,
            "code": "struct S {\n    int x = 42;\n};\nconst S s;\ndecltype(s.x) y; // y has type int, even though s.x is const",
            "code_language": "Plain Text"
          }
        ],
        "inline_content": [
          {
            "Text": "If the operand "
          },
          {
            "Text": "e",
            "AttrFlags": 2
          },
          {
            "Text": " is a class member access without any additional parentheses, then "
          },
          {
            "Text": "decltype(e)",
            "AttrFlags": 2
          },
          {
            "Text": " is the "
          },
          {
            "Text": "declared type",
            "AttrFlags": 4
          },
          {
            "Text": " of the member accessed."
          }
        ]
      },
      {
        "alive": true,
        "content": [
          "5dfe8852-b10d-4b0a-90c6-7dee4b6007f1",
          "ae3def0b-835f-496e-980f-c90f3b40b67a",
          "6cff67c9-83ae-49fc-94ab-ea5bd9b29629",
          "8ed6093d-7f69-47c6-8484-7c4966a925ae",
          "c27b8a49-30e3-481d-a14a-d106a7495264"
        ],
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524683567,
        "id": "967b3f7d-916b-46a3-aff9-5848a4018360",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550797740000,
        "parent_id": "bef663ca-e798-4fed-a491-a134d7652c5f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In all other cases, "
            ],
            [
              "decltype(e)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " yields both the type and the "
            ],
            [
              "value category",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%2B%2B/763/value-categories"
                ]
              ]
            ],
            [
              " of the expression "
            ],
            [
              "e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", as follows:"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 7,
        "content_resolved": [
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1550524683568,
            "id": "5dfe8852-b10d-4b0a-90c6-7dee4b6007f1",
            "ignore_block_count": true,
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1550797740000,
            "parent_id": "967b3f7d-916b-46a3-aff9-5848a4018360",
            "parent_table": "block",
            "properties": {
              "language": [
                [
                  "Plain Text"
                ]
              ],
              "title": [
                [
                  "* If `e` is an lvalue of type `T`, then `decltype(e)` is `T\u0026`.\n* If `e` is an xvalue of type `T`, then `decltype(e)` is `T\u0026\u0026`.\n* If `e` is a prvalue of type `T`, then `decltype(e)` is `T`."
                ]
              ]
            },
            "type": "code",
            "version": 4,
            "code": "* If `e` is an lvalue of type `T`, then `decltype(e)` is `T\u0026`.\n* If `e` is an xvalue of type `T`, then `decltype(e)` is `T\u0026\u0026`.\n* If `e` is a prvalue of type `T`, then `decltype(e)` is `T`.",
            "code_language": "Plain Text"
          },
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1550524683568,
            "id": "ae3def0b-835f-496e-980f-c90f3b40b67a",
            "ignore_block_count": true,
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1550797740000,
            "parent_id": "967b3f7d-916b-46a3-aff9-5848a4018360",
            "parent_table": "block",
            "properties": {
              "title": [
                [
                  "This includes the case with extraneous parentheses."
                ]
              ]
            },
            "type": "text",
            "version": 4,
            "inline_content": [
              {
                "Text": "This includes the case with extraneous parentheses."
              }
            ]
          },
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1550524683568,
            "id": "6cff67c9-83ae-49fc-94ab-ea5bd9b29629",
            "ignore_block_count": true,
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1550797740000,
            "parent_id": "967b3f7d-916b-46a3-aff9-5848a4018360",
            "parent_table": "block",
            "properties": {
              "language": [
                [
                  "Plain Text"
                ]
              ],
              "title": [
                [
                  "int f() { return 42; }\nint\u0026 g() { static int x = 42; return x; }\nint x = 42;\ndecltype(f()) a = f(); // a has type int\ndecltype(g()) b = g(); // b has type int\u0026\ndecltype((x)) c = x;   // c has type int\u0026, since x is an lvalue"
                ]
              ]
            },
            "type": "code",
            "version": 4,
            "code": "int f() { return 42; }\nint\u0026 g() { static int x = 42; return x; }\nint x = 42;\ndecltype(f()) a = f(); // a has type int\ndecltype(g()) b = g(); // b has type int\u0026\ndecltype((x)) c = x;   // c has type int\u0026, since x is an lvalue",
            "code_language": "Plain Text"
          },
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1550524683568,
            "id": "8ed6093d-7f69-47c6-8484-7c4966a925ae",
            "ignore_block_count": true,
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1550797740000,
            "parent_id": "967b3f7d-916b-46a3-aff9-5848a4018360",
            "parent_table": "block",
            "properties": {
              "title": [
                [
                  "The special form "
                ],
                [
                  "decltype(auto)",
                  [
                    [
                      "c"
                    ]
                  ]
                ],
                [
                  " deduces the type of a variable from its initializer or the return type of a function from the "
                ],
                [
                  "return",
                  [
                    [
                      "c"
                    ]
                  ]
                ],
                [
                  " statements in its definition, using the type deduction rules of "
                ],
                [
                  "decltype",
                  [
                    [
                      "c"
                    ]
                  ]
                ],
                [
                  " rather than those of "
                ],
                [
                  "auto",
                  [
                    [
                      "c"
                    ]
                  ]
                ],
                [
                  "."
                ]
              ]
            },
            "type": "text",
            "version": 4,
            "inline_content": [
              {
                "Text": "The special form "
              },
              {
                "Text": "decltype(auto)",
                "AttrFlags": 2
              },
              {
                "Text": " deduces the type of a variable from its initializer or the return type of a function from the "
              },
              {
                "Text": "return",
                "AttrFlags": 2
              },
              {
                "Text": " statements in its definition, using the type deduction rules of "
              },
              {
                "Text": "decltype",
                "AttrFlags": 2
              },
              {
                "Text": " rather than those of "
              },
              {
                "Text": "auto",
                "AttrFlags": 2
              },
              {
                "Text": "."
              }
            ]
          },
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1550524683568,
            "id": "c27b8a49-30e3-481d-a14a-d106a7495264",
            "ignore_block_count": true,
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1550797740000,
            "parent_id": "967b3f7d-916b-46a3-aff9-5848a4018360",
            "parent_table": "block",
            "properties": {
              "language": [
                [
                  "Plain Text"
                ]
              ],
              "title": [
                [
                  "const int x = 123;\nauto y = x;           // y has type int\ndecltype(auto) z = x; // z has type const int, the declared type of x"
                ]
              ]
            },
            "type": "code",
            "version": 4,
            "code": "const int x = 123;\nauto y = x;           // y has type int\ndecltype(auto) z = x; // z has type const int, the declared type of x",
            "code_language": "Plain Text"
          }
        ],
        "inline_content": [
          {
            "Text": "In all other cases, "
          },
          {
            "Text": "decltype(e)",
            "AttrFlags": 2
          },
          {
            "Text": " yields both the type and the "
          },
          {
            "Text": "value category",
            "Link": "http://stackoverflow.com/documentation/c%2B%2B/763/value-categories"
          },
          {
            "Text": " of the expression "
          },
          {
            "Text": "e",
            "AttrFlags": 2
          },
          {
            "Text": ", as follows:"
          }
        ]
      }
    ],
    "title": "decltype",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}