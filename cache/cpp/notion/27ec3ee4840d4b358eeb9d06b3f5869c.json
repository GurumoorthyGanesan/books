{
  "ID": "27ec3ee4-840d-4b35-8eeb-9d06b3f5869c",
  "Root": {
    "alive": true,
    "content": [
      "58c9f9cc-3bb7-4349-af5c-b00235756fbd",
      "4317f7dc-798f-4642-9dc2-3d43b6fa0eb0",
      "0cca58a7-d240-454f-bc8f-9a292c9091e8",
      "22e8bde4-ea43-405c-9d03-dc0a02ddc243",
      "20789a6a-fa0c-4c65-a119-3f36ab11f353",
      "d64ebe71-a056-4600-88c2-6c3ef9208575",
      "d783764e-9244-45fb-ad24-c477a0d9425d",
      "1fed1094-4759-4c5a-a427-4ceb7d74ff5e",
      "b5ee4128-6ad4-4394-b3ec-23d7816f2286"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522056711,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "27ec3ee4-840d-4b35-8eeb-9d06b3f5869c",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552344060000,
    "parent_id": "8655f492-9c51-4f68-ad52-8b6c1e02a277",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Vector size and capacity"
        ]
      ]
    },
    "type": "page",
    "version": 22,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522056703,
        "id": "58c9f9cc-3bb7-4349-af5c-b00235756fbd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522056703,
        "parent_id": "27ec3ee4-840d-4b35-8eeb-9d06b3f5869c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Vector size",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " is simply the number of elements in the vector:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Vector size",
            "AttrFlags": 1
          },
          {
            "Text": " is simply the number of elements in the vector:"
          }
        ]
      },
      {
        "alive": true,
        "content": [
          "d0065550-f45a-404e-8c80-e836d7de5ab3"
        ],
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522056705,
        "id": "4317f7dc-798f-4642-9dc2-3d43b6fa0eb0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552344000000,
        "parent_id": "27ec3ee4-840d-4b35-8eeb-9d06b3f5869c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Current vector "
            ],
            [
              "size",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " is queried by "
            ],
            [
              "size()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " member function. Convenience "
            ],
            [
              "empty()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " function returns "
            ],
            [
              "true",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " if size is 0:"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 3,
        "content_resolved": [
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1550522056705,
            "id": "d0065550-f45a-404e-8c80-e836d7de5ab3",
            "ignore_block_count": true,
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1552344000000,
            "parent_id": "4317f7dc-798f-4642-9dc2-3d43b6fa0eb0",
            "parent_table": "block",
            "properties": {
              "language": [
                [
                  "C++"
                ]
              ],
              "title": [
                [
                  "vector\u003cint\u003e v = { 1, 2, 3 }; // size is 3\nconst vector\u003cint\u003e::size_type size = v.size();\ncout \u003c\u003c size \u003c\u003c endl; // prints 3\ncout \u003c\u003c boolalpha \u003c\u003c v.empty() \u003c\u003c endl; // prints false"
                ]
              ]
            },
            "type": "code",
            "version": 6,
            "code": "vector\u003cint\u003e v = { 1, 2, 3 }; // size is 3\nconst vector\u003cint\u003e::size_type size = v.size();\ncout \u003c\u003c size \u003c\u003c endl; // prints 3\ncout \u003c\u003c boolalpha \u003c\u003c v.empty() \u003c\u003c endl; // prints false",
            "code_language": "C++"
          }
        ],
        "inline_content": [
          {
            "Text": "Current vector "
          },
          {
            "Text": "size",
            "AttrFlags": 1
          },
          {
            "Text": " is queried by "
          },
          {
            "Text": "size()",
            "AttrFlags": 2
          },
          {
            "Text": " member function. Convenience "
          },
          {
            "Text": "empty()",
            "AttrFlags": 2
          },
          {
            "Text": " function returns "
          },
          {
            "Text": "true",
            "AttrFlags": 2
          },
          {
            "Text": " if size is 0:"
          }
        ]
      },
      {
        "alive": true,
        "content": [
          "2c04c277-70b8-46a9-beba-d8abe8eced26"
        ],
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522056705,
        "id": "0cca58a7-d240-454f-bc8f-9a292c9091e8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552344000000,
        "parent_id": "27ec3ee4-840d-4b35-8eeb-9d06b3f5869c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Default constructed vector starts with a size of 0:"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 3,
        "content_resolved": [
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1550522056705,
            "id": "2c04c277-70b8-46a9-beba-d8abe8eced26",
            "ignore_block_count": true,
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1552344000000,
            "parent_id": "0cca58a7-d240-454f-bc8f-9a292c9091e8",
            "parent_table": "block",
            "properties": {
              "language": [
                [
                  "C++"
                ]
              ],
              "title": [
                [
                  "vector\u003cint\u003e v; // size is 0\ncout \u003c\u003c v.size() \u003c\u003c endl; // prints 0"
                ]
              ]
            },
            "type": "code",
            "version": 5,
            "code": "vector\u003cint\u003e v; // size is 0\ncout \u003c\u003c v.size() \u003c\u003c endl; // prints 0",
            "code_language": "C++"
          }
        ],
        "inline_content": [
          {
            "Text": "Default constructed vector starts with a size of 0:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522056706,
        "id": "22e8bde4-ea43-405c-9d03-dc0a02ddc243",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522056706,
        "parent_id": "27ec3ee4-840d-4b35-8eeb-9d06b3f5869c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Adding "
            ],
            [
              "N",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " elements to vector increases "
            ],
            [
              "size",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " by "
            ],
            [
              "N",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (e.g. by "
            ],
            [
              "push_back()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "insert()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "resize()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " functions)."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Adding "
          },
          {
            "Text": "N",
            "AttrFlags": 2
          },
          {
            "Text": " elements to vector increases "
          },
          {
            "Text": "size",
            "AttrFlags": 1
          },
          {
            "Text": " by "
          },
          {
            "Text": "N",
            "AttrFlags": 2
          },
          {
            "Text": " (e.g. by "
          },
          {
            "Text": "push_back()",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "insert()",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "resize()",
            "AttrFlags": 2
          },
          {
            "Text": " functions)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522056706,
        "id": "20789a6a-fa0c-4c65-a119-3f36ab11f353",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522056706,
        "parent_id": "27ec3ee4-840d-4b35-8eeb-9d06b3f5869c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Removing "
            ],
            [
              "N",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " elements from vector decreases "
            ],
            [
              "size",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " by "
            ],
            [
              "N",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (e.g. by "
            ],
            [
              "pop_back()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "erase()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "clear()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " functions)."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Removing "
          },
          {
            "Text": "N",
            "AttrFlags": 2
          },
          {
            "Text": " elements from vector decreases "
          },
          {
            "Text": "size",
            "AttrFlags": 1
          },
          {
            "Text": " by "
          },
          {
            "Text": "N",
            "AttrFlags": 2
          },
          {
            "Text": " (e.g. by "
          },
          {
            "Text": "pop_back()",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "erase()",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "clear()",
            "AttrFlags": 2
          },
          {
            "Text": " functions)."
          }
        ]
      },
      {
        "alive": true,
        "content": [
          "51f5e586-a944-48ee-be55-e0cca83f28c2",
          "afc75355-ae5d-42f6-8675-0f017791b000",
          "16d64d10-e0cb-4861-affb-89b6ddaffd47",
          "e3384c6b-ed27-4947-bddb-c639dc7b49a6"
        ],
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522056707,
        "id": "d64ebe71-a056-4600-88c2-6c3ef9208575",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552344000000,
        "parent_id": "27ec3ee4-840d-4b35-8eeb-9d06b3f5869c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Vector has an implementation-specific upper limit on its size, but you are likely to run out of RAM before reaching it:"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 6,
        "content_resolved": [
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1550522056707,
            "id": "51f5e586-a944-48ee-be55-e0cca83f28c2",
            "ignore_block_count": true,
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1552344000000,
            "parent_id": "d64ebe71-a056-4600-88c2-6c3ef9208575",
            "parent_table": "block",
            "properties": {
              "language": [
                [
                  "C++"
                ]
              ],
              "title": [
                [
                  "vector\u003cint\u003e v;\nconst vector\u003cint\u003e::size_type max_size = v.max_size();\ncout \u003c\u003c max_size \u003c\u003c endl; // prints some large number\nv.resize( max_size ); // probably won't work\nv.push_back( 1 ); // definitely won't work"
                ]
              ]
            },
            "type": "code",
            "version": 5,
            "code": "vector\u003cint\u003e v;\nconst vector\u003cint\u003e::size_type max_size = v.max_size();\ncout \u003c\u003c max_size \u003c\u003c endl; // prints some large number\nv.resize( max_size ); // probably won't work\nv.push_back( 1 ); // definitely won't work",
            "code_language": "C++"
          },
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1550522056707,
            "id": "afc75355-ae5d-42f6-8675-0f017791b000",
            "ignore_block_count": true,
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1552344000000,
            "parent_id": "d64ebe71-a056-4600-88c2-6c3ef9208575",
            "parent_table": "block",
            "properties": {
              "title": [
                [
                  "Common mistake: "
                ],
                [
                  "size",
                  [
                    [
                      "b"
                    ]
                  ]
                ],
                [
                  " is not necessarily (or even usually) "
                ],
                [
                  "int",
                  [
                    [
                      "c"
                    ]
                  ]
                ],
                [
                  ":"
                ]
              ]
            },
            "type": "text",
            "version": 4,
            "inline_content": [
              {
                "Text": "Common mistake: "
              },
              {
                "Text": "size",
                "AttrFlags": 1
              },
              {
                "Text": " is not necessarily (or even usually) "
              },
              {
                "Text": "int",
                "AttrFlags": 2
              },
              {
                "Text": ":"
              }
            ]
          },
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1550522056707,
            "id": "16d64d10-e0cb-4861-affb-89b6ddaffd47",
            "ignore_block_count": true,
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1552344000000,
            "parent_id": "d64ebe71-a056-4600-88c2-6c3ef9208575",
            "parent_table": "block",
            "properties": {
              "language": [
                [
                  "C++"
                ]
              ],
              "title": [
                [
                  "vector\u003cint\u003e v_bad( N, 1 ); // constructs large N size vector\nfor (int i = 0; i \u003c v_bad.size(); ++i) { // size is not supposed to be int!\n    do_something( v_bad[i] );\n}"
                ]
              ]
            },
            "type": "code",
            "version": 28,
            "code": "vector\u003cint\u003e v_bad( N, 1 ); // constructs large N size vector\nfor (int i = 0; i \u003c v_bad.size(); ++i) { // size is not supposed to be int!\n    do_something( v_bad[i] );\n}",
            "code_language": "C++"
          },
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1550522056707,
            "id": "e3384c6b-ed27-4947-bddb-c639dc7b49a6",
            "ignore_block_count": true,
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1552344000000,
            "parent_id": "d64ebe71-a056-4600-88c2-6c3ef9208575",
            "parent_table": "block",
            "properties": {
              "title": [
                [
                  "Vector capacity",
                  [
                    [
                      "b"
                    ]
                  ]
                ],
                [
                  " differs from "
                ],
                [
                  "size",
                  [
                    [
                      "b"
                    ]
                  ]
                ],
                [
                  ". While "
                ],
                [
                  "size",
                  [
                    [
                      "b"
                    ]
                  ]
                ],
                [
                  " is simply how many elements the vector currently has, "
                ],
                [
                  "capacity",
                  [
                    [
                      "b"
                    ]
                  ]
                ],
                [
                  " is for how many elements it allocated/reserved memory for. That is useful, because too frequent (re)allocations of too large sizes can be expensive."
                ]
              ]
            },
            "type": "text",
            "version": 4,
            "inline_content": [
              {
                "Text": "Vector capacity",
                "AttrFlags": 1
              },
              {
                "Text": " differs from "
              },
              {
                "Text": "size",
                "AttrFlags": 1
              },
              {
                "Text": ". While "
              },
              {
                "Text": "size",
                "AttrFlags": 1
              },
              {
                "Text": " is simply how many elements the vector currently has, "
              },
              {
                "Text": "capacity",
                "AttrFlags": 1
              },
              {
                "Text": " is for how many elements it allocated/reserved memory for. That is useful, because too frequent (re)allocations of too large sizes can be expensive."
              }
            ]
          }
        ],
        "inline_content": [
          {
            "Text": "Vector has an implementation-specific upper limit on its size, but you are likely to run out of RAM before reaching it:"
          }
        ]
      },
      {
        "alive": true,
        "content": [
          "a2796821-96a4-4230-b710-e524af6be669"
        ],
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522056709,
        "id": "d783764e-9244-45fb-ad24-c477a0d9425d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552344000000,
        "parent_id": "27ec3ee4-840d-4b35-8eeb-9d06b3f5869c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Current vector "
            ],
            [
              "capacity",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " is queried by "
            ],
            [
              "capacity()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " member function. "
            ],
            [
              "Capacity",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " is always greater or equal to "
            ],
            [
              "size",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 3,
        "content_resolved": [
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1550522056709,
            "id": "a2796821-96a4-4230-b710-e524af6be669",
            "ignore_block_count": true,
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1552344000000,
            "parent_id": "d783764e-9244-45fb-ad24-c477a0d9425d",
            "parent_table": "block",
            "properties": {
              "language": [
                [
                  "C++"
                ]
              ],
              "title": [
                [
                  "vector\u003cint\u003e v = { 1, 2, 3 }; // size is 3, capacity is \u003e= 3\nconst vector\u003cint\u003e::size_type capacity = v.capacity();\ncout \u003c\u003c capacity \u003c\u003c endl; // prints number \u003e= 3"
                ]
              ]
            },
            "type": "code",
            "version": 5,
            "code": "vector\u003cint\u003e v = { 1, 2, 3 }; // size is 3, capacity is \u003e= 3\nconst vector\u003cint\u003e::size_type capacity = v.capacity();\ncout \u003c\u003c capacity \u003c\u003c endl; // prints number \u003e= 3",
            "code_language": "C++"
          }
        ],
        "inline_content": [
          {
            "Text": "Current vector "
          },
          {
            "Text": "capacity",
            "AttrFlags": 1
          },
          {
            "Text": " is queried by "
          },
          {
            "Text": "capacity()",
            "AttrFlags": 2
          },
          {
            "Text": " member function. "
          },
          {
            "Text": "Capacity",
            "AttrFlags": 1
          },
          {
            "Text": " is always greater or equal to "
          },
          {
            "Text": "size",
            "AttrFlags": 1
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "content": [
          "7e2f2b0c-8c76-4f6f-9081-9b94e6ba2702"
        ],
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522056710,
        "id": "1fed1094-4759-4c5a-a427-4ceb7d74ff5e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552344000000,
        "parent_id": "27ec3ee4-840d-4b35-8eeb-9d06b3f5869c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You can manually reserve capacity by "
            ],
            [
              "reserve( N )",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " function (it changes vector capacity to "
            ],
            [
              "N",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "):"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 3,
        "content_resolved": [
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1550522056710,
            "id": "7e2f2b0c-8c76-4f6f-9081-9b94e6ba2702",
            "ignore_block_count": true,
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1552344060000,
            "parent_id": "1fed1094-4759-4c5a-a427-4ceb7d74ff5e",
            "parent_table": "block",
            "properties": {
              "language": [
                [
                  "C++"
                ]
              ],
              "title": [
                [
                  "// !!!bad!!!evil!!!\nvector\u003cint\u003e v_bad;\nfor( int i = 0; i \u003c 10000; ++i ) {\n    v_bad.push_back( i ); // possibly lot of reallocations\n}\n\n// good\nvector\u003cint\u003e v_good;\nv_good.reserve( 10000 ); // good! only one allocation\nfor( int i = 0; i \u003c 10000; ++i ) {\n    v_good.push_back( i ); // no allocations needed anymore\n}"
                ]
              ]
            },
            "type": "code",
            "version": 6,
            "code": "// !!!bad!!!evil!!!\nvector\u003cint\u003e v_bad;\nfor( int i = 0; i \u003c 10000; ++i ) {\n    v_bad.push_back( i ); // possibly lot of reallocations\n}\n\n// good\nvector\u003cint\u003e v_good;\nv_good.reserve( 10000 ); // good! only one allocation\nfor( int i = 0; i \u003c 10000; ++i ) {\n    v_good.push_back( i ); // no allocations needed anymore\n}",
            "code_language": "C++"
          }
        ],
        "inline_content": [
          {
            "Text": "You can manually reserve capacity by "
          },
          {
            "Text": "reserve( N )",
            "AttrFlags": 2
          },
          {
            "Text": " function (it changes vector capacity to "
          },
          {
            "Text": "N",
            "AttrFlags": 2
          },
          {
            "Text": "):"
          }
        ]
      },
      {
        "alive": true,
        "content": [
          "b4665232-c342-469d-bde1-85b468d572c5",
          "f568d7e2-844d-4642-b8c4-6f7906989b4c",
          "6569e665-25b7-4b16-9e8b-503ee0d07f09"
        ],
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522056710,
        "id": "b5ee4128-6ad4-4394-b3ec-23d7816f2286",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552344060000,
        "parent_id": "27ec3ee4-840d-4b35-8eeb-9d06b3f5869c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You can request for the excess capacity to be released by "
            ],
            [
              "shrink_to_fit()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (but the implementation doesn’t have to obey you). This is useful to conserve used memory:"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 5,
        "content_resolved": [
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1550522056710,
            "id": "b4665232-c342-469d-bde1-85b468d572c5",
            "ignore_block_count": true,
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1552344060000,
            "parent_id": "b5ee4128-6ad4-4394-b3ec-23d7816f2286",
            "parent_table": "block",
            "properties": {
              "language": [
                [
                  "C++"
                ]
              ],
              "title": [
                [
                  "vector\u003cint\u003e v = { 1, 2, 3, 4, 5 }; // size is 5, assume capacity is 6\nv.shrink_to_fit(); // capacity is 5 (or possibly still 6)\ncout \u003c\u003c boolalpha \u003c\u003c v.capacity() == v.size() \u003c\u003c endl; // prints likely true (but possibly false)"
                ]
              ]
            },
            "type": "code",
            "version": 5,
            "code": "vector\u003cint\u003e v = { 1, 2, 3, 4, 5 }; // size is 5, assume capacity is 6\nv.shrink_to_fit(); // capacity is 5 (or possibly still 6)\ncout \u003c\u003c boolalpha \u003c\u003c v.capacity() == v.size() \u003c\u003c endl; // prints likely true (but possibly false)",
            "code_language": "C++"
          },
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1550522056710,
            "id": "f568d7e2-844d-4642-b8c4-6f7906989b4c",
            "ignore_block_count": true,
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1552344060000,
            "parent_id": "b5ee4128-6ad4-4394-b3ec-23d7816f2286",
            "parent_table": "block",
            "properties": {
              "title": [
                [
                  "Vector partly manages capacity automatically, when you add elements it may decide to grow. Implementers like to use 2 or 1.5 for the grow factor (golden ratio would be the ideal value - but is impractical due to being rational number). On the other hand vector usually do not automatically shrink. For example:"
                ]
              ]
            },
            "type": "text",
            "version": 4,
            "inline_content": [
              {
                "Text": "Vector partly manages capacity automatically, when you add elements it may decide to grow. Implementers like to use 2 or 1.5 for the grow factor (golden ratio would be the ideal value - but is impractical due to being rational number). On the other hand vector usually do not automatically shrink. For example:"
              }
            ]
          },
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1550522056711,
            "id": "6569e665-25b7-4b16-9e8b-503ee0d07f09",
            "ignore_block_count": true,
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1552344060000,
            "parent_id": "b5ee4128-6ad4-4394-b3ec-23d7816f2286",
            "parent_table": "block",
            "properties": {
              "language": [
                [
                  "C++"
                ]
              ],
              "title": [
                [
                  "vector\u003cint\u003e v; // capacity is possibly (but not guaranteed) to be 0\nv.push_back( 1 ); // capacity is some starter value, likely 1\nv.clear(); // size is 0 but capacity is still same as before!\n\nv = { 1, 2, 3, 4 }; // size is 4, and lets assume capacity is 4.\nv.push_back( 5 ); // capacity grows - let's assume it grows to 6 (1.5 factor)\nv.push_back( 6 ); // no change in capacity\nv.push_back( 7 ); // capacity grows - let's assume it grows to 9 (1.5 factor)\n// and so on\nv.pop_back(); v.pop_back(); v.pop_back(); v.pop_back(); // capacity stays the same"
                ]
              ]
            },
            "type": "code",
            "version": 5,
            "code": "vector\u003cint\u003e v; // capacity is possibly (but not guaranteed) to be 0\nv.push_back( 1 ); // capacity is some starter value, likely 1\nv.clear(); // size is 0 but capacity is still same as before!\n\nv = { 1, 2, 3, 4 }; // size is 4, and lets assume capacity is 4.\nv.push_back( 5 ); // capacity grows - let's assume it grows to 6 (1.5 factor)\nv.push_back( 6 ); // no change in capacity\nv.push_back( 7 ); // capacity grows - let's assume it grows to 9 (1.5 factor)\n// and so on\nv.pop_back(); v.pop_back(); v.pop_back(); v.pop_back(); // capacity stays the same",
            "code_language": "C++"
          }
        ],
        "inline_content": [
          {
            "Text": "You can request for the excess capacity to be released by "
          },
          {
            "Text": "shrink_to_fit()",
            "AttrFlags": 2
          },
          {
            "Text": " (but the implementation doesn’t have to obey you). This is useful to conserve used memory:"
          }
        ]
      }
    ],
    "title": "Vector size and capacity",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}