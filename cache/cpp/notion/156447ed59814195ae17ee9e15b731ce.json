{
  "ID": "156447ed-5981-4195-ae17-ee9e15b731ce",
  "Root": {
    "alive": true,
    "content": [
      "93b93630-1042-486e-b1ce-5e520e4070bd",
      "f3dd46e4-cb6b-425e-b3ec-f8e88fa91ac0",
      "5a29ac05-6b0f-4adf-99d6-7631906badda",
      "ade18d2c-5c83-4e8b-9fa5-91c728a5a429",
      "8ab4e811-3428-4f11-918d-c03d0b545d5e",
      "97282938-e188-434e-becc-c75cce434bbf",
      "48fd8981-af4f-49c0-b8a1-21ada5bd440e",
      "8233c986-6675-4265-aafa-73194bb5a8c3",
      "f1631b58-0067-4344-8b54-c7b72309f6d3",
      "920fc8f3-440e-4913-87c7-03ba377d9aa3",
      "2c28d81c-4560-474f-a5f6-afeeace5d7c2"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550523817484,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "156447ed-5981-4195-ae17-ee9e15b731ce",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551687887144,
    "parent_id": "b7131d5c-8602-4af3-82a7-7c00e59ad384",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Type relations with std is sameT T"
        ]
      ]
    },
    "type": "page",
    "version": 4,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523817480,
        "id": "93b93630-1042-486e-b1ce-5e520e4070bd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523817480,
        "parent_id": "156447ed-5981-4195-ae17-ee9e15b731ce",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "std::is_same\u003cT, T\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " type relation is used to compare two types. It will evaluate as boolean, true if the types are the same and false if otherwise."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "std::is_same\u003cT, T\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " type relation is used to compare two types. It will evaluate as boolean, true if the types are the same and false if otherwise."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523817482,
        "id": "f3dd46e4-cb6b-425e-b3ec-f8e88fa91ac0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523817482,
        "parent_id": "156447ed-5981-4195-ae17-ee9e15b731ce",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "e.g."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "e.g."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523817483,
        "id": "5a29ac05-6b0f-4adf-99d6-7631906badda",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523817483,
        "parent_id": "156447ed-5981-4195-ae17-ee9e15b731ce",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// Prints true on most x86 and x86_64 compilers.\nstd::cout \u003c\u003c std::is_same\u003cint, int32_t\u003e::value \u003c\u003c \"\\n\";\n// Prints false on all compilers.\nstd::cout \u003c\u003c std::is_same\u003cfloat, int\u003e::value \u003c\u003c \"\\n\";\n// Prints false on all compilers.\nstd::cout  \u003c\u003c std::is_same\u003cunsigned int, int\u003e::value \u003c\u003c \"\\n\";"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// Prints true on most x86 and x86_64 compilers.\nstd::cout \u003c\u003c std::is_same\u003cint, int32_t\u003e::value \u003c\u003c \"\\n\";\n// Prints false on all compilers.\nstd::cout \u003c\u003c std::is_same\u003cfloat, int\u003e::value \u003c\u003c \"\\n\";\n// Prints false on all compilers.\nstd::cout  \u003c\u003c std::is_same\u003cunsigned int, int\u003e::value \u003c\u003c \"\\n\";",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523817483,
        "id": "ade18d2c-5c83-4e8b-9fa5-91c728a5a429",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523817483,
        "parent_id": "156447ed-5981-4195-ae17-ee9e15b731ce",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "std::is_same",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " type relation will also work regardless of typedefs. This is actually demonstrated in the first example when comparing "
            ],
            [
              "int == int32_t",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " however this is not entirely clear."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "std::is_same",
            "AttrFlags": 2
          },
          {
            "Text": " type relation will also work regardless of typedefs. This is actually demonstrated in the first example when comparing "
          },
          {
            "Text": "int == int32_t",
            "AttrFlags": 2
          },
          {
            "Text": " however this is not entirely clear."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523817483,
        "id": "8ab4e811-3428-4f11-918d-c03d0b545d5e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523817483,
        "parent_id": "156447ed-5981-4195-ae17-ee9e15b731ce",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "e.g."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "e.g."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523817483,
        "id": "97282938-e188-434e-becc-c75cce434bbf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523817483,
        "parent_id": "156447ed-5981-4195-ae17-ee9e15b731ce",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// Prints true on all compilers.\ntypedef int MyType\nstd::cout \u003c\u003c std::is_same\u003cint, MyType\u003e::value \u003c\u003c  \"\\n\";"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// Prints true on all compilers.\ntypedef int MyType\nstd::cout \u003c\u003c std::is_same\u003cint, MyType\u003e::value \u003c\u003c  \"\\n\";",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523817483,
        "id": "48fd8981-af4f-49c0-b8a1-21ada5bd440e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523817483,
        "parent_id": "156447ed-5981-4195-ae17-ee9e15b731ce",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523817483,
        "id": "8233c986-6675-4265-aafa-73194bb5a8c3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523817483,
        "parent_id": "156447ed-5981-4195-ae17-ee9e15b731ce",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Using ",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "std::is_same",
              [
                [
                  "b"
                ],
                [
                  "c"
                ]
              ]
            ],
            [
              " to warn when improperly using a templated class or function.",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Using ",
            "AttrFlags": 1
          },
          {
            "Text": "std::is_same",
            "AttrFlags": 3
          },
          {
            "Text": " to warn when improperly using a templated class or function.",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523817484,
        "id": "f1631b58-0067-4344-8b54-c7b72309f6d3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523817484,
        "parent_id": "156447ed-5981-4195-ae17-ee9e15b731ce",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When combined with a static assert the "
            ],
            [
              "std::is_same",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " template can be valuable tool in enforcing proper usage of templated classes and functions."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When combined with a static assert the "
          },
          {
            "Text": "std::is_same",
            "AttrFlags": 2
          },
          {
            "Text": " template can be valuable tool in enforcing proper usage of templated classes and functions."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523817484,
        "id": "920fc8f3-440e-4913-87c7-03ba377d9aa3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523817484,
        "parent_id": "156447ed-5981-4195-ae17-ee9e15b731ce",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "e.g. A function that only allows input from an "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and a choice of two structs."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "e.g. A function that only allows input from an "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": " and a choice of two structs."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523817484,
        "id": "2c28d81c-4560-474f-a5f6-afeeace5d7c2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523817484,
        "parent_id": "156447ed-5981-4195-ae17-ee9e15b731ce",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003ctype_traits\u003e\nstruct foo {\n  int member;\n  // Other variables\n};\n\nstruct bar {\n  char member;\n};\n\ntemplate\u003ctypename T\u003e\nint AddStructMember(T var1, int var2) {\n  // If type T != foo || T != bar then show error message.\n  static_assert(std::is_same\u003cT, foo\u003e::value || \n    std::is_same\u003cT, bar\u003e::value,\n    \"This function does not support the specified type.\");\n  return var1.member + var2;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003ctype_traits\u003e\nstruct foo {\n  int member;\n  // Other variables\n};\n\nstruct bar {\n  char member;\n};\n\ntemplate\u003ctypename T\u003e\nint AddStructMember(T var1, int var2) {\n  // If type T != foo || T != bar then show error message.\n  static_assert(std::is_same\u003cT, foo\u003e::value || \n    std::is_same\u003cT, bar\u003e::value,\n    \"This function does not support the specified type.\");\n  return var1.member + var2;\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "Type relations with std is sameT T",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}