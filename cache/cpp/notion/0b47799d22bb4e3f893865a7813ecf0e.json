{
  "ID": "0b47799d-22bb-4e3f-8938-65a7813ecf0e",
  "Root": {
    "alive": true,
    "content": [
      "4d9c28a5-7465-4c52-9448-aea4a696d464",
      "8530bf6f-d5ba-4052-8063-38c72ac170ab",
      "3fe6fd0f-7efc-48b1-97a6-b30bd0fb7f6b",
      "1edfe6c3-f00b-4a20-a844-c1a7050ce7bb",
      "aadd3031-1361-4c80-90eb-5bafd243e6ec"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550523436435,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "0b47799d-22bb-4e3f-8938-65a7813ecf0e",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550736060000,
    "parent_id": "9582f39a-18d4-4387-a429-d2d9d9c1c0a3",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Logical \u0026\u0026 and || operators: short-circuit"
        ]
      ]
    },
    "type": "page",
    "version": 33,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523436432,
        "id": "4d9c28a5-7465-4c52-9448-aea4a696d464",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550736000000,
        "parent_id": "0b47799d-22bb-4e3f-8938-65a7813ecf0e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "\u0026\u0026",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " has precedence over "
            ],
            [
              "||",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", this means that parentheses are placed to evaluate what would be evaluated together."
            ]
          ]
        },
        "type": "text",
        "version": 4,
        "inline_content": [
          {
            "Text": "\u0026\u0026",
            "AttrFlags": 2
          },
          {
            "Text": " has precedence over "
          },
          {
            "Text": "||",
            "AttrFlags": 2
          },
          {
            "Text": ", this means that parentheses are placed to evaluate what would be evaluated together."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523436435,
        "id": "8530bf6f-d5ba-4052-8063-38c72ac170ab",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550736000000,
        "parent_id": "0b47799d-22bb-4e3f-8938-65a7813ecf0e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "C++ uses short-circuit evaluation in "
            ],
            [
              "\u0026\u0026",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "||",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to not do unnecessary executions."
            ]
          ]
        },
        "type": "text",
        "version": 6,
        "inline_content": [
          {
            "Text": "C++ uses short-circuit evaluation in "
          },
          {
            "Text": "\u0026\u0026",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "||",
            "AttrFlags": 2
          },
          {
            "Text": " to not do unnecessary executions."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523436435,
        "id": "3fe6fd0f-7efc-48b1-97a6-b30bd0fb7f6b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550736000000,
        "parent_id": "0b47799d-22bb-4e3f-8938-65a7813ecf0e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If the left hand side of "
            ],
            [
              "||",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " returns true the right hand side does not need to be evaluated anymore."
            ]
          ]
        },
        "type": "text",
        "version": 3,
        "inline_content": [
          {
            "Text": "If the left hand side of "
          },
          {
            "Text": "||",
            "AttrFlags": 2
          },
          {
            "Text": " returns true the right hand side does not need to be evaluated anymore."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523436435,
        "id": "1edfe6c3-f00b-4a20-a844-c1a7050ce7bb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550736060000,
        "parent_id": "0b47799d-22bb-4e3f-8938-65a7813ecf0e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "#include \u003ciostream\u003e\n#include \u003cstring\u003e\n\nusing namespace std;\n\nbool True(string id){\n    cout \u003c\u003c \"True\" \u003c\u003c id \u003c\u003c endl;\n    return true;\n}\n\nbool False(string id){\n    cout \u003c\u003c \"False\" \u003c\u003c id \u003c\u003c endl;\n    return false;\n}\n\nint main(){\n    bool result;\n    //let's evaluate 3 booleans with || and \u0026\u0026 to illustrate operator precedence\n    //precedence does not mean that \u0026\u0026 will be evaluated first but rather where    \n    //parentheses would be added\n    //example 1\n    result =\n        False(\"A\") || False(\"B\") \u0026\u0026 False(\"C\"); \n                // eq. False(\"A\") || (False(\"B\") \u0026\u0026 False(\"C\"))\n    //FalseA\n    //FalseB\n    //\"Short-circuit evaluation skip of C\"\n    //A is false so we have to evaluate the right of ||,\n    //B being false we do not have to evaluate C to know that the result is false\n    \n\n    \n    result =\n        True(\"A\") || False(\"B\") \u0026\u0026 False(\"C\"); \n                // eq. True(\"A\") || (False(\"B\") \u0026\u0026 False(\"C\"))\n    cout \u003c\u003c result \u003c\u003c \" :=====================\" \u003c\u003c endl;\n    //TrueA\n    //\"Short-circuit evaluation skip of B\"\n    //\"Short-circuit evaluation skip of C\"\n    //A is true so we do not have to evaluate \n    //        the right of || to know that the result is true\n    //If || had precedence over \u0026\u0026 the equivalent evaluation would be:\n    // (True(\"A\") || False(\"B\")) \u0026\u0026 False(\"C\")\n    //What would print\n    //TrueA\n    //\"Short-circuit evaluation skip of B\"\n    //FalseC\n    //Because the parentheses are placed differently \n    //the parts that get evaluated are differently\n    //which makes that the end result in this case would be False because C is false\n}"
            ]
          ]
        },
        "type": "code",
        "version": 7,
        "code": "#include \u003ciostream\u003e\n#include \u003cstring\u003e\n\nusing namespace std;\n\nbool True(string id){\n    cout \u003c\u003c \"True\" \u003c\u003c id \u003c\u003c endl;\n    return true;\n}\n\nbool False(string id){\n    cout \u003c\u003c \"False\" \u003c\u003c id \u003c\u003c endl;\n    return false;\n}\n\nint main(){\n    bool result;\n    //let's evaluate 3 booleans with || and \u0026\u0026 to illustrate operator precedence\n    //precedence does not mean that \u0026\u0026 will be evaluated first but rather where    \n    //parentheses would be added\n    //example 1\n    result =\n        False(\"A\") || False(\"B\") \u0026\u0026 False(\"C\"); \n                // eq. False(\"A\") || (False(\"B\") \u0026\u0026 False(\"C\"))\n    //FalseA\n    //FalseB\n    //\"Short-circuit evaluation skip of C\"\n    //A is false so we have to evaluate the right of ||,\n    //B being false we do not have to evaluate C to know that the result is false\n    \n\n    \n    result =\n        True(\"A\") || False(\"B\") \u0026\u0026 False(\"C\"); \n                // eq. True(\"A\") || (False(\"B\") \u0026\u0026 False(\"C\"))\n    cout \u003c\u003c result \u003c\u003c \" :=====================\" \u003c\u003c endl;\n    //TrueA\n    //\"Short-circuit evaluation skip of B\"\n    //\"Short-circuit evaluation skip of C\"\n    //A is true so we do not have to evaluate \n    //        the right of || to know that the result is true\n    //If || had precedence over \u0026\u0026 the equivalent evaluation would be:\n    // (True(\"A\") || False(\"B\")) \u0026\u0026 False(\"C\")\n    //What would print\n    //TrueA\n    //\"Short-circuit evaluation skip of B\"\n    //FalseC\n    //Because the parentheses are placed differently \n    //the parts that get evaluated are differently\n    //which makes that the end result in this case would be False because C is false\n}",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550736060000,
        "id": "aadd3031-1361-4c80-90eb-5bafd243e6ec",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550736060000,
        "parent_id": "0b47799d-22bb-4e3f-8938-65a7813ecf0e",
        "parent_table": "block",
        "type": "text",
        "version": 3
      }
    ],
    "title": "Logical \u0026\u0026 and || operators: short-circuit",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}