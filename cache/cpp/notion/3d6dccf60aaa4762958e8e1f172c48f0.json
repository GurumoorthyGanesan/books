{
  "ID": "3d6dccf6-0aaa-4762-958e-8e1f172c48f0",
  "Root": {
    "alive": true,
    "content": [
      "ac92303e-762d-4907-ab1f-d0bb122cfaa8",
      "cc3d69de-da49-48fe-894a-196b340e8b16",
      "be3207d6-bd0c-44e6-a124-c37a949c0f85",
      "3f47a114-2bce-4002-add9-5e693f101e93",
      "900c679c-90d0-4b68-a390-776ad705e07f",
      "53f641b3-5ca7-4fcd-acd3-566b90c74280"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550524682547,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "3d6dccf6-0aaa-4762-958e-8e1f172c48f0",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550797560000,
    "parent_id": "cad79b8f-8e22-4786-b522-3ce3f7989dfb",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "void"
        ]
      ]
    },
    "type": "page",
    "version": 12,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524682543,
        "id": "ac92303e-762d-4907-ab1f-d0bb122cfaa8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524682543,
        "parent_id": "3d6dccf6-0aaa-4762-958e-8e1f172c48f0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "An incomplete type; it is not possible for an object to have type "
            ],
            [
              "void",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", nor are there arrays of "
            ],
            [
              "void",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or references to "
            ],
            [
              "void",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". It is used as the return type of functions that do not return anything."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "An incomplete type; it is not possible for an object to have type "
          },
          {
            "Text": "void",
            "AttrFlags": 2
          },
          {
            "Text": ", nor are there arrays of "
          },
          {
            "Text": "void",
            "AttrFlags": 2
          },
          {
            "Text": " or references to "
          },
          {
            "Text": "void",
            "AttrFlags": 2
          },
          {
            "Text": ". It is used as the return type of functions that do not return anything."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524682546,
        "id": "cc3d69de-da49-48fe-894a-196b340e8b16",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524682546,
        "parent_id": "3d6dccf6-0aaa-4762-958e-8e1f172c48f0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Moreover, a function may redundantly be declared with a single parameter of type "
            ],
            [
              "void",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "; this is equivalent to declaring a function with no parameters (e.g. "
            ],
            [
              "int main()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "int main(void)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " declare the same function). This syntax is allowed for compatibility with C (where function declarations have a different meaning than in C++)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Moreover, a function may redundantly be declared with a single parameter of type "
          },
          {
            "Text": "void",
            "AttrFlags": 2
          },
          {
            "Text": "; this is equivalent to declaring a function with no parameters (e.g. "
          },
          {
            "Text": "int main()",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "int main(void)",
            "AttrFlags": 2
          },
          {
            "Text": " declare the same function). This syntax is allowed for compatibility with C (where function declarations have a different meaning than in C++)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524682547,
        "id": "be3207d6-bd0c-44e6-a124-c37a949c0f85",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524682547,
        "parent_id": "3d6dccf6-0aaa-4762-958e-8e1f172c48f0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The type "
            ],
            [
              "void*",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (“pointer to "
            ],
            [
              "void",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "”) has the property that any object pointer can be converted to it and back and result in the same pointer. This feature makes the type "
            ],
            [
              "void*",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " suitable for certain kinds of (type-unsafe) type-erasing interfaces, for example for generic contexts in C-style APIs (e.g. "
            ],
            [
              "qsort",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "pthread_create",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ")."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The type "
          },
          {
            "Text": "void*",
            "AttrFlags": 2
          },
          {
            "Text": " (“pointer to "
          },
          {
            "Text": "void",
            "AttrFlags": 2
          },
          {
            "Text": "”) has the property that any object pointer can be converted to it and back and result in the same pointer. This feature makes the type "
          },
          {
            "Text": "void*",
            "AttrFlags": 2
          },
          {
            "Text": " suitable for certain kinds of (type-unsafe) type-erasing interfaces, for example for generic contexts in C-style APIs (e.g. "
          },
          {
            "Text": "qsort",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "pthread_create",
            "AttrFlags": 2
          },
          {
            "Text": ")."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524682547,
        "id": "3f47a114-2bce-4002-add9-5e693f101e93",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524682547,
        "parent_id": "3d6dccf6-0aaa-4762-958e-8e1f172c48f0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Any expression may be converted to an expression of type "
            ],
            [
              "void",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "; this is called a "
            ],
            [
              "discarded-value expression",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Any expression may be converted to an expression of type "
          },
          {
            "Text": "void",
            "AttrFlags": 2
          },
          {
            "Text": "; this is called a "
          },
          {
            "Text": "discarded-value expression",
            "AttrFlags": 4
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524682547,
        "id": "900c679c-90d0-4b68-a390-776ad705e07f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550797560000,
        "parent_id": "3d6dccf6-0aaa-4762-958e-8e1f172c48f0",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "static_cast\u003cvoid\u003e(std::printf(\"Hello, %s!\\n\", name));  // discard return value"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "static_cast\u003cvoid\u003e(std::printf(\"Hello, %s!\\n\", name));  // discard return value",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524682547,
        "id": "53f641b3-5ca7-4fcd-acd3-566b90c74280",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524682547,
        "parent_id": "3d6dccf6-0aaa-4762-958e-8e1f172c48f0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This may be useful to signal explicitly that the value of an expression is not of interest and that the expression is to be evaluated for its side effects only."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This may be useful to signal explicitly that the value of an expression is not of interest and that the expression is to be evaluated for its side effects only."
          }
        ]
      }
    ],
    "title": "void",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}