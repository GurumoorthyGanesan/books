{
  "ID": "7400efc1-119e-41ef-bf35-3cf78050746d",
  "Root": {
    "alive": true,
    "content": [
      "d02a440a-a78c-4692-8d77-a1c15cb4fb38",
      "4305dbd8-8940-4d3f-b529-753eae213ff9",
      "444d2501-ea09-4504-96de-39b6b53a4a9c",
      "873f52be-2078-491a-ac88-ea4270ef20cb",
      "837e93d2-9734-48fb-b9b2-7d285fe627a9",
      "367a20e5-3662-4d24-9673-bcb3b7c64719",
      "b128b66d-09e3-4261-ba0d-2cad7a8dc4d0",
      "b68c3f72-5962-4a38-a3b8-b5c1d12448ee",
      "f3b4661a-e9de-48ab-beb1-9f16fa029033",
      "0e5ff4cb-ab60-457f-b08f-9ccc392b3668",
      "e015a0ed-4c26-45c4-9105-43730c7c1d14"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550523495764,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "7400efc1-119e-41ef-bf35-3cf78050746d",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551687673575,
    "parent_id": "4a738092-15a0-42a9-8178-c62e1f86c80c",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Builder Pattern with Fluent API"
        ]
      ]
    },
    "type": "page",
    "version": 4,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523495758,
        "id": "d02a440a-a78c-4692-8d77-a1c15cb4fb38",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523495758,
        "parent_id": "7400efc1-119e-41ef-bf35-3cf78050746d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The Builder Pattern decouples the creation of the object from the object itself. The main idea behind is that "
            ],
            [
              "an object does not have to be responsible for its own creation",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". The correct and valid assembly of a complex object may be a complicated task in itself, so this task can be delegated to another class."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The Builder Pattern decouples the creation of the object from the object itself. The main idea behind is that "
          },
          {
            "Text": "an object does not have to be responsible for its own creation",
            "AttrFlags": 1
          },
          {
            "Text": ". The correct and valid assembly of a complex object may be a complicated task in itself, so this task can be delegated to another class."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523495763,
        "id": "4305dbd8-8940-4d3f-b529-753eae213ff9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523495763,
        "parent_id": "7400efc1-119e-41ef-bf35-3cf78050746d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Inspired by the "
            ],
            [
              "Email Builder in C#",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/design-patterns/1811/builder-pattern/5912/builder-pattern-c-sharp-fluent-interrface#t=201704231441269920397"
                ]
              ]
            ],
            [
              ", I’ve decided to make a C++ version here. An Email object is not necessarily a "
            ],
            [
              "very complex object",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ", but it can demonstrate the pattern."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Inspired by the "
          },
          {
            "Text": "Email Builder in C#",
            "Link": "http://stackoverflow.com/documentation/design-patterns/1811/builder-pattern/5912/builder-pattern-c-sharp-fluent-interrface#t=201704231441269920397"
          },
          {
            "Text": ", I’ve decided to make a C++ version here. An Email object is not necessarily a "
          },
          {
            "Text": "very complex object",
            "AttrFlags": 4
          },
          {
            "Text": ", but it can demonstrate the pattern."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523495763,
        "id": "444d2501-ea09-4504-96de-39b6b53a4a9c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523495763,
        "parent_id": "7400efc1-119e-41ef-bf35-3cf78050746d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003ciostream\u003e\n#include \u003csstream\u003e\n#include \u003cstring\u003e\n\nusing namespace std;\n\n// Forward declaring the builder\nclass EmailBuilder;\n\nclass Email\n{\n  public:\n    friend class EmailBuilder;  // the builder can access Email's privates\n    \n    static EmailBuilder make();\n    \n    string to_string() const {\n        stringstream stream;\n        stream \u003c\u003c \"from: \" \u003c\u003c m_from\n               \u003c\u003c \"\\nto: \" \u003c\u003c m_to\n               \u003c\u003c \"\\nsubject: \" \u003c\u003c m_subject\n               \u003c\u003c \"\\nbody: \" \u003c\u003c m_body;\n        return stream.str();\n    }\n    \n  private:\n    Email() = default; // restrict construction to builder\n    \n    string m_from;\n    string m_to;\n    string m_subject;\n    string m_body;\n};\n\nclass EmailBuilder\n{\n  public:\n    EmailBuilder\u0026 from(const string \u0026from) {\n        m_email.m_from = from;\n        return *this;\n    }\n    \n    EmailBuilder\u0026 to(const string \u0026to) {\n        m_email.m_to = to;\n        return *this;\n    }\n    \n    EmailBuilder\u0026 subject(const string \u0026subject) {\n        m_email.m_subject = subject;\n        return *this;\n    }\n    \n    EmailBuilder\u0026 body(const string \u0026body) {\n        m_email.m_body = body;\n        return *this;\n    }\n    \n    operator Email\u0026\u0026() {\n        return std::move(m_email); // notice the move\n    }\n    \n  private:\n    Email m_email;\n};\n\nEmailBuilder Email::make()\n{\n    return EmailBuilder();\n}\n\n// Bonus example!\nstd::ostream\u0026 operator \u003c\u003c(std::ostream\u0026 stream, const Email\u0026 email)\n{\n    stream \u003c\u003c email.to_string();\n    return stream;\n}\n\n\nint main()\n{\n    Email mail = Email::make().from(\"me@mail.com\")\n                              .to(\"you@mail.com\")\n                              .subject(\"C++ builders\")\n                              .body(\"I like this API, don't you?\");\n                              \n    cout \u003c\u003c mail \u003c\u003c endl;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003ciostream\u003e\n#include \u003csstream\u003e\n#include \u003cstring\u003e\n\nusing namespace std;\n\n// Forward declaring the builder\nclass EmailBuilder;\n\nclass Email\n{\n  public:\n    friend class EmailBuilder;  // the builder can access Email's privates\n    \n    static EmailBuilder make();\n    \n    string to_string() const {\n        stringstream stream;\n        stream \u003c\u003c \"from: \" \u003c\u003c m_from\n               \u003c\u003c \"\\nto: \" \u003c\u003c m_to\n               \u003c\u003c \"\\nsubject: \" \u003c\u003c m_subject\n               \u003c\u003c \"\\nbody: \" \u003c\u003c m_body;\n        return stream.str();\n    }\n    \n  private:\n    Email() = default; // restrict construction to builder\n    \n    string m_from;\n    string m_to;\n    string m_subject;\n    string m_body;\n};\n\nclass EmailBuilder\n{\n  public:\n    EmailBuilder\u0026 from(const string \u0026from) {\n        m_email.m_from = from;\n        return *this;\n    }\n    \n    EmailBuilder\u0026 to(const string \u0026to) {\n        m_email.m_to = to;\n        return *this;\n    }\n    \n    EmailBuilder\u0026 subject(const string \u0026subject) {\n        m_email.m_subject = subject;\n        return *this;\n    }\n    \n    EmailBuilder\u0026 body(const string \u0026body) {\n        m_email.m_body = body;\n        return *this;\n    }\n    \n    operator Email\u0026\u0026() {\n        return std::move(m_email); // notice the move\n    }\n    \n  private:\n    Email m_email;\n};\n\nEmailBuilder Email::make()\n{\n    return EmailBuilder();\n}\n\n// Bonus example!\nstd::ostream\u0026 operator \u003c\u003c(std::ostream\u0026 stream, const Email\u0026 email)\n{\n    stream \u003c\u003c email.to_string();\n    return stream;\n}\n\n\nint main()\n{\n    Email mail = Email::make().from(\"me@mail.com\")\n                              .to(\"you@mail.com\")\n                              .subject(\"C++ builders\")\n                              .body(\"I like this API, don't you?\");\n                              \n    cout \u003c\u003c mail \u003c\u003c endl;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523495763,
        "id": "873f52be-2078-491a-ac88-ea4270ef20cb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523495763,
        "parent_id": "7400efc1-119e-41ef-bf35-3cf78050746d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For older versions of C++, one may just ignore the "
            ],
            [
              "std::move",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " operation and remove the \u0026\u0026 from the conversion operator (although this will create a temporary copy)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For older versions of C++, one may just ignore the "
          },
          {
            "Text": "std::move",
            "AttrFlags": 2
          },
          {
            "Text": " operation and remove the \u0026\u0026 from the conversion operator (although this will create a temporary copy)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523495763,
        "id": "837e93d2-9734-48fb-b9b2-7d285fe627a9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523495763,
        "parent_id": "7400efc1-119e-41ef-bf35-3cf78050746d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The builder finishes its work when it releases the built email by the "
            ],
            [
              "operator Email\u0026\u0026()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". In this example, the builder is a temporary object and returns the email before being destroyed. You could also use an explicit operation like "
            ],
            [
              "Email EmailBuilder::build() {...}",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " instead of the conversion operator."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The builder finishes its work when it releases the built email by the "
          },
          {
            "Text": "operator Email\u0026\u0026()",
            "AttrFlags": 2
          },
          {
            "Text": ". In this example, the builder is a temporary object and returns the email before being destroyed. You could also use an explicit operation like "
          },
          {
            "Text": "Email EmailBuilder::build() {...}",
            "AttrFlags": 2
          },
          {
            "Text": " instead of the conversion operator."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523495763,
        "id": "367a20e5-3662-4d24-9673-bcb3b7c64719",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523495763,
        "parent_id": "7400efc1-119e-41ef-bf35-3cf78050746d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Pass the builder around"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Pass the builder around"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523495764,
        "id": "b128b66d-09e3-4261-ba0d-2cad7a8dc4d0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523495764,
        "parent_id": "7400efc1-119e-41ef-bf35-3cf78050746d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A great feature the Builder Pattern provides is the ability to "
            ],
            [
              "use several actors to build an object together.",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " This is done by passing the builder to the other actors that will each one give some more information to the built object. This is specially powerful when you are building some sort of query, adding filters and other specifications."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A great feature the Builder Pattern provides is the ability to "
          },
          {
            "Text": "use several actors to build an object together.",
            "AttrFlags": 1
          },
          {
            "Text": " This is done by passing the builder to the other actors that will each one give some more information to the built object. This is specially powerful when you are building some sort of query, adding filters and other specifications."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523495764,
        "id": "b68c3f72-5962-4a38-a3b8-b5c1d12448ee",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523495764,
        "parent_id": "7400efc1-119e-41ef-bf35-3cf78050746d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "void add_addresses(EmailBuilder\u0026 builder)\n{\n    builder.from(\"me@mail.com\")\n           .to(\"you@mail.com\");\n}\n\nvoid compose_mail(EmailBuilder\u0026 builder)\n{\n    builder.subject(\"I know the subject\")\n           .body(\"And the body. Someone else knows the addresses.\");\n}\n\nint main()\n{\n    EmailBuilder builder;\n    add_addresses(builder);\n    compose_mail(builder);\n    \n    Email mail = builder;\n    cout \u003c\u003c mail \u003c\u003c endl;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "void add_addresses(EmailBuilder\u0026 builder)\n{\n    builder.from(\"me@mail.com\")\n           .to(\"you@mail.com\");\n}\n\nvoid compose_mail(EmailBuilder\u0026 builder)\n{\n    builder.subject(\"I know the subject\")\n           .body(\"And the body. Someone else knows the addresses.\");\n}\n\nint main()\n{\n    EmailBuilder builder;\n    add_addresses(builder);\n    compose_mail(builder);\n    \n    Email mail = builder;\n    cout \u003c\u003c mail \u003c\u003c endl;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523495764,
        "id": "f3b4661a-e9de-48ab-beb1-9f16fa029033",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523495764,
        "parent_id": "7400efc1-119e-41ef-bf35-3cf78050746d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Design variant : Mutable object"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Design variant : Mutable object"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523495764,
        "id": "0e5ff4cb-ab60-457f-b08f-9ccc392b3668",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523495764,
        "parent_id": "7400efc1-119e-41ef-bf35-3cf78050746d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You can change the design of this pattern to fit your needs. I’ll give one variant."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You can change the design of this pattern to fit your needs. I’ll give one variant."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523495764,
        "id": "e015a0ed-4c26-45c4-9105-43730c7c1d14",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523495764,
        "parent_id": "7400efc1-119e-41ef-bf35-3cf78050746d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In the given example the Email object is immutable, i.e., it’s properties can’t be modified because there is no access to them. This was a desired feature. If you need to modify the object after its creation you have to provide some setters to it. Since those setters would be duplicated in the builder, you may consider to do it all in one class (no builder class needed anymore). Nevertheless, I would consider the need to make the built object mutable in the first place."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In the given example the Email object is immutable, i.e., it’s properties can’t be modified because there is no access to them. This was a desired feature. If you need to modify the object after its creation you have to provide some setters to it. Since those setters would be duplicated in the builder, you may consider to do it all in one class (no builder class needed anymore). Nevertheless, I would consider the need to make the built object mutable in the first place."
          }
        ]
      }
    ],
    "title": "Builder Pattern with Fluent API",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}