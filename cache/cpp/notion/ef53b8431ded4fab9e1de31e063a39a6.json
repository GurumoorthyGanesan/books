{
  "ID": "ef53b843-1ded-4fab-9e1d-e31e063a39a6",
  "Root": {
    "alive": true,
    "content": [
      "4ca3ee87-9a48-4b06-a837-24623aa84ec2",
      "65b7b003-e7ae-450a-96c7-b2db8a8b14a1",
      "bdc28ee5-2bf7-4f87-a853-829383df7f5f"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522735500,
    "id": "ef53b843-1ded-4fab-9e1d-e31e063a39a6",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550522735500,
    "parent_id": "de2aa703-c2f6-4f94-bc50-eb5201c26ac3",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "010 Using optionals to represent the absence of a value"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522735499,
        "id": "4ca3ee87-9a48-4b06-a837-24623aa84ec2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522735499,
        "parent_id": "ef53b843-1ded-4fab-9e1d-e31e063a39a6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Before C++17, having pointers with a value of "
            ],
            [
              "nullptr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " commonly represented the absence of a value. This is a good solution for large objects that have been dynamically allocated and are already managed by pointers. However, this solution does not work well for small or primitive types such as "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", which are rarely ever dynamically allocated or managed by pointers. "
            ],
            [
              "std::optional",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " provides a viable solution to this common problem."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Before C++17, having pointers with a value of "
          },
          {
            "Text": "nullptr",
            "AttrFlags": 2
          },
          {
            "Text": " commonly represented the absence of a value. This is a good solution for large objects that have been dynamically allocated and are already managed by pointers. However, this solution does not work well for small or primitive types such as "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": ", which are rarely ever dynamically allocated or managed by pointers. "
          },
          {
            "Text": "std::optional",
            "AttrFlags": 2
          },
          {
            "Text": " provides a viable solution to this common problem."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522735499,
        "id": "65b7b003-e7ae-450a-96c7-b2db8a8b14a1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522735499,
        "parent_id": "ef53b843-1ded-4fab-9e1d-e31e063a39a6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In this example, "
            ],
            [
              "struct Person",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is defined. It is possible for a person to have a pet, but not necessary. Therefore, the "
            ],
            [
              "pet",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " member of "
            ],
            [
              "Person",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is declared with an "
            ],
            [
              "std::optional",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " wrapper."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In this example, "
          },
          {
            "Text": "struct Person",
            "AttrFlags": 2
          },
          {
            "Text": " is defined. It is possible for a person to have a pet, but not necessary. Therefore, the "
          },
          {
            "Text": "pet",
            "AttrFlags": 2
          },
          {
            "Text": " member of "
          },
          {
            "Text": "Person",
            "AttrFlags": 2
          },
          {
            "Text": " is declared with an "
          },
          {
            "Text": "std::optional",
            "AttrFlags": 2
          },
          {
            "Text": " wrapper."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522735499,
        "id": "bdc28ee5-2bf7-4f87-a853-829383df7f5f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522735499,
        "parent_id": "ef53b843-1ded-4fab-9e1d-e31e063a39a6",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003ciostream\u003e\n#include \u003coptional\u003e\n#include \u003cstring\u003e\n\nstruct Animal {\n    std::string name;\n};\n\nstruct Person {\n    std::string name;\n    std::optional\u003cAnimal\u003e pet;\n};\n\nint main() {\n    Person person;\n    person.name = \"John\";\n\n    if (person.pet) {\n        std::cout \u003c\u003c person.name \u003c\u003c \"'s pet's name is \" \u003c\u003c\n            person.pet-\u003ename \u003c\u003c std::endl;\n    }\n    else {\n        std::cout \u003c\u003c person.name \u003c\u003c \" is alone.\" \u003c\u003c std::endl;\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003ciostream\u003e\n#include \u003coptional\u003e\n#include \u003cstring\u003e\n\nstruct Animal {\n    std::string name;\n};\n\nstruct Person {\n    std::string name;\n    std::optional\u003cAnimal\u003e pet;\n};\n\nint main() {\n    Person person;\n    person.name = \"John\";\n\n    if (person.pet) {\n        std::cout \u003c\u003c person.name \u003c\u003c \"'s pet's name is \" \u003c\u003c\n            person.pet-\u003ename \u003c\u003c std::endl;\n    }\n    else {\n        std::cout \u003c\u003c person.name \u003c\u003c \" is alone.\" \u003c\u003c std::endl;\n    }\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "010 Using optionals to represent the absence of a value"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}