{
  "ID": "69b0eda6-138b-4f7a-9b0e-e8824d415039",
  "Root": {
    "alive": true,
    "content": [
      "fb2d3862-3dc8-443e-bf5b-6b88ddb429d7",
      "03bdf63a-b84f-4a90-91fb-81bf64823a97",
      "1fad63bd-a664-4501-b196-5eb3d159c97d",
      "f8517467-f2fd-4d07-a737-402cba953886",
      "db951e66-5cee-4be6-8784-e4b45834467e",
      "e5b846fc-1b6a-4f25-a618-a1ecd68de26c",
      "0a744d71-07dc-4e5a-9580-ab5dc52da6e1",
      "bfe4e807-bb34-4869-bfbb-cfee97f14679",
      "7d67edaf-319e-41e8-ba25-17d68e772ce4",
      "312f5fc7-bc89-4f70-9577-09fcbfc9fad9",
      "2e078138-d28a-4e49-8d33-5e5236eff2dc"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550523050645,
    "id": "69b0eda6-138b-4f7a-9b0e-e8824d415039",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550523050645,
    "parent_id": "1e5df2e7-ee0b-4037-ab62-15139a784f28",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "010 Free Storage Heap Dynamic Allocation ..."
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523050637,
        "id": "fb2d3862-3dc8-443e-bf5b-6b88ddb429d7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523050637,
        "parent_id": "69b0eda6-138b-4f7a-9b0e-e8824d415039",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The term "
            ],
            [
              "‘heap’",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " is a general computing term meaning an area of memory from which portions can be allocated and deallocated independently of the memory provided by the "
            ],
            [
              "stack",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The term "
          },
          {
            "Text": "‘heap’",
            "AttrFlags": 1
          },
          {
            "Text": " is a general computing term meaning an area of memory from which portions can be allocated and deallocated independently of the memory provided by the "
          },
          {
            "Text": "stack",
            "AttrFlags": 1
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523050640,
        "id": "03bdf63a-b84f-4a90-91fb-81bf64823a97",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523050640,
        "parent_id": "69b0eda6-138b-4f7a-9b0e-e8824d415039",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In "
            ],
            [
              "C++",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " the "
            ],
            [
              "Standard",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " refers to this area as the "
            ],
            [
              "Free Store",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " which is considered a more accurate term."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In "
          },
          {
            "Text": "C++",
            "AttrFlags": 2
          },
          {
            "Text": " the "
          },
          {
            "Text": "Standard",
            "AttrFlags": 4
          },
          {
            "Text": " refers to this area as the "
          },
          {
            "Text": "Free Store",
            "AttrFlags": 1
          },
          {
            "Text": " which is considered a more accurate term."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523050640,
        "id": "1fad63bd-a664-4501-b196-5eb3d159c97d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523050640,
        "parent_id": "69b0eda6-138b-4f7a-9b0e-e8824d415039",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Areas of memory allocated from the "
            ],
            [
              "Free Store",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " may live longer than the original scope in which it was allocated. Data too large to be stored on the stack may also be allocated from the "
            ],
            [
              "Free Store",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Areas of memory allocated from the "
          },
          {
            "Text": "Free Store",
            "AttrFlags": 1
          },
          {
            "Text": " may live longer than the original scope in which it was allocated. Data too large to be stored on the stack may also be allocated from the "
          },
          {
            "Text": "Free Store",
            "AttrFlags": 1
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523050640,
        "id": "f8517467-f2fd-4d07-a737-402cba953886",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523050640,
        "parent_id": "69b0eda6-138b-4f7a-9b0e-e8824d415039",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Raw memory can be allocated and deallocated by the "
            ],
            [
              "new",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "delete",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " keywords."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Raw memory can be allocated and deallocated by the "
          },
          {
            "Text": "new",
            "AttrFlags": 4
          },
          {
            "Text": " and "
          },
          {
            "Text": "delete",
            "AttrFlags": 4
          },
          {
            "Text": " keywords."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523050640,
        "id": "db951e66-5cee-4be6-8784-e4b45834467e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523050640,
        "parent_id": "69b0eda6-138b-4f7a-9b0e-e8824d415039",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "float *foo = nullptr;\n{\n    *foo = new float; // Allocates memory for a float\n    float bar;              // Stack allocated \n} // End lifetime of bar, while foo still alive\n\ndelete foo;          // Deletes the memory for the float at pF, invalidating the pointer\nfoo = nullptr;       // Setting the pointer to nullptr after delete is often considered good practice"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "float *foo = nullptr;\n{\n    *foo = new float; // Allocates memory for a float\n    float bar;              // Stack allocated \n} // End lifetime of bar, while foo still alive\n\ndelete foo;          // Deletes the memory for the float at pF, invalidating the pointer\nfoo = nullptr;       // Setting the pointer to nullptr after delete is often considered good practice",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523050640,
        "id": "e5b846fc-1b6a-4f25-a618-a1ecd68de26c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523050640,
        "parent_id": "69b0eda6-138b-4f7a-9b0e-e8824d415039",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It’s also possible to allocate fixed size arrays with "
            ],
            [
              "new",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "delete",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ", with a slightly different syntax. Array allocation is not compatible with non-array allocation, and mixing the two will lead to heap corruption. Allocating an array also allocates memory to track the size of the array for later deletion in an implementation-defined way."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It’s also possible to allocate fixed size arrays with "
          },
          {
            "Text": "new",
            "AttrFlags": 4
          },
          {
            "Text": " and "
          },
          {
            "Text": "delete",
            "AttrFlags": 4
          },
          {
            "Text": ", with a slightly different syntax. Array allocation is not compatible with non-array allocation, and mixing the two will lead to heap corruption. Allocating an array also allocates memory to track the size of the array for later deletion in an implementation-defined way."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523050641,
        "id": "0a744d71-07dc-4e5a-9580-ab5dc52da6e1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523050641,
        "parent_id": "69b0eda6-138b-4f7a-9b0e-e8824d415039",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// Allocates memory for an array of 256 ints\nint *foo = new int[256];\n// Deletes an array of 256 ints at foo\ndelete[] foo;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// Allocates memory for an array of 256 ints\nint *foo = new int[256];\n// Deletes an array of 256 ints at foo\ndelete[] foo;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523050643,
        "id": "bfe4e807-bb34-4869-bfbb-cfee97f14679",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523050643,
        "parent_id": "69b0eda6-138b-4f7a-9b0e-e8824d415039",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When using "
            ],
            [
              "new",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "delete",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " instead "
            ],
            [
              "malloc",
              [
                [
                  "i"
                ],
                [
                  "a",
                  "http://stackoverflow.com/documentation/c/4726/memory-management"
                ]
              ]
            ],
            [
              " and ",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c/4726/memory-management"
                ]
              ]
            ],
            [
              "free",
              [
                [
                  "i"
                ],
                [
                  "a",
                  "http://stackoverflow.com/documentation/c/4726/memory-management"
                ]
              ]
            ],
            [
              ", the constructor and destructor will get executed (Similar to stack based objects). This is why "
            ],
            [
              "new",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "delete",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " are prefered over "
            ],
            [
              "malloc",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "free",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When using "
          },
          {
            "Text": "new",
            "AttrFlags": 4
          },
          {
            "Text": " and "
          },
          {
            "Text": "delete",
            "AttrFlags": 4
          },
          {
            "Text": " instead "
          },
          {
            "Text": "malloc",
            "AttrFlags": 4,
            "Link": "http://stackoverflow.com/documentation/c/4726/memory-management"
          },
          {
            "Text": " and ",
            "Link": "http://stackoverflow.com/documentation/c/4726/memory-management"
          },
          {
            "Text": "free",
            "AttrFlags": 4,
            "Link": "http://stackoverflow.com/documentation/c/4726/memory-management"
          },
          {
            "Text": ", the constructor and destructor will get executed (Similar to stack based objects). This is why "
          },
          {
            "Text": "new",
            "AttrFlags": 4
          },
          {
            "Text": " and "
          },
          {
            "Text": "delete",
            "AttrFlags": 4
          },
          {
            "Text": " are prefered over "
          },
          {
            "Text": "malloc",
            "AttrFlags": 4
          },
          {
            "Text": " and "
          },
          {
            "Text": "free",
            "AttrFlags": 4
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523050643,
        "id": "7d67edaf-319e-41e8-ba25-17d68e772ce4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523050643,
        "parent_id": "69b0eda6-138b-4f7a-9b0e-e8824d415039",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "struct ComplexType {\n    int a = 0;\n\n    ComplexType() { std::cout \u003c\u003c \"Ctor\" \u003c\u003c std::endl; }\n    ~ComplexType() { std::cout \u003c\u003c \"Dtor\" \u003c\u003c std::endl; }\n};\n\n// Allocates memory for a ComplexType, and calls its constructor\nComplexType *foo = new ComplexType();\n//Calls the destructor for ComplexType() and deletes memory for a Complextype at pC\ndelete foo;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "struct ComplexType {\n    int a = 0;\n\n    ComplexType() { std::cout \u003c\u003c \"Ctor\" \u003c\u003c std::endl; }\n    ~ComplexType() { std::cout \u003c\u003c \"Dtor\" \u003c\u003c std::endl; }\n};\n\n// Allocates memory for a ComplexType, and calls its constructor\nComplexType *foo = new ComplexType();\n//Calls the destructor for ComplexType() and deletes memory for a Complextype at pC\ndelete foo;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523050644,
        "id": "312f5fc7-bc89-4f70-9577-09fcbfc9fad9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523050644,
        "parent_id": "69b0eda6-138b-4f7a-9b0e-e8824d415039",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "From C++11 on, the use of "
            ],
            [
              "smart pointers",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%2B%2B/509/smart-pointers"
                ]
              ]
            ],
            [
              " is recommended for indicating ownership."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "From C++11 on, the use of "
          },
          {
            "Text": "smart pointers",
            "Link": "http://stackoverflow.com/documentation/c%2B%2B/509/smart-pointers"
          },
          {
            "Text": " is recommended for indicating ownership."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523050644,
        "id": "2e078138-d28a-4e49-8d33-5e5236eff2dc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523050644,
        "parent_id": "69b0eda6-138b-4f7a-9b0e-e8824d415039",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "C++14 added "
            ],
            [
              "std::make_unique",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to the STL, changing the recommendation to favor "
            ],
            [
              "std::make_unique",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "std::make_shared",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " instead of using naked "
            ],
            [
              "new",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "delete",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "C++14 added "
          },
          {
            "Text": "std::make_unique",
            "AttrFlags": 2
          },
          {
            "Text": " to the STL, changing the recommendation to favor "
          },
          {
            "Text": "std::make_unique",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "std::make_shared",
            "AttrFlags": 2
          },
          {
            "Text": " instead of using naked "
          },
          {
            "Text": "new",
            "AttrFlags": 4
          },
          {
            "Text": " and "
          },
          {
            "Text": "delete",
            "AttrFlags": 4
          },
          {
            "Text": "."
          }
        ]
      }
    ],
    "title": "010 Free Storage Heap Dynamic Allocation ..."
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}