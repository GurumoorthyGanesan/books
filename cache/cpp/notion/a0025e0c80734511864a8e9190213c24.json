{
  "ID": "a0025e0c-8073-4511-864a-8e9190213c24",
  "Root": {
    "alive": true,
    "content": [
      "2f94c5cd-aff8-4f0a-843f-28930eb11bb7",
      "4d16f56c-2057-4c1f-aa7f-39d55265f075",
      "a9e0dde0-b55e-4b37-bb56-302a61e308f9",
      "36723c7c-7f43-481c-bbbc-1c366182eaa8",
      "049efa82-c833-449b-a029-d5c6657a0b0d",
      "302ece2c-5bd1-470a-97da-cac9df9e153f",
      "7d9a27e3-51a0-4c8f-80c3-1e7419304d04",
      "a67b0ae9-8733-4b02-be17-04b3d5551c53",
      "6adb910c-2dd6-4e45-9469-795b5ed2f547",
      "509241f6-b277-4ce2-b780-b69e6f9271c7",
      "b64c6ffc-032b-4d86-b1c7-1b5a88fb4b08",
      "6f72c445-97a8-434e-9f60-1db7df4c7899",
      "a8a01dbb-149b-49c0-b0a3-9736572abff6",
      "f88e86aa-c4f2-44c2-9d52-76b896cdbf5d",
      "b881e90b-bd7b-4d39-89d1-28425104566c",
      "3a7ce42b-390e-4e86-8871-85ca89ec6882",
      "3e35964f-b54d-4f47-812c-d4838c152e1e",
      "24204579-5f4c-4b8f-ab4c-aa5c980aa20b",
      "ad958ceb-c3e5-4ad1-a2fa-4601a9d855e1"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522407460,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "a0025e0c-8073-4511-864a-8e9190213c24",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550799540000,
    "parent_id": "efdc4616-d5e4-4dce-b49c-941c07a9ac4b",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Safe downcasting"
        ]
      ]
    },
    "type": "page",
    "version": 10,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522407454,
        "id": "2f94c5cd-aff8-4f0a-843f-28930eb11bb7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522407454,
        "parent_id": "a0025e0c-8073-4511-864a-8e9190213c24",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Suppose that you have a pointer to an object of a polymorphic class:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Suppose that you have a pointer to an object of a polymorphic class:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522407457,
        "id": "4d16f56c-2057-4c1f-aa7f-39d55265f075",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550799480000,
        "parent_id": "a0025e0c-8073-4511-864a-8e9190213c24",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "Shape *ps;                       // see example on defining a polymorphic class\nps =  get_a_new_random_shape();  // if you don't have such a function yet, you \n                                 // could just write ps = new Square(0.0,0.0, 5);"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "Shape *ps;                       // see example on defining a polymorphic class\nps =  get_a_new_random_shape();  // if you don't have such a function yet, you \n                                 // could just write ps = new Square(0.0,0.0, 5);",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522407458,
        "id": "a9e0dde0-b55e-4b37-bb56-302a61e308f9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522407458,
        "parent_id": "a0025e0c-8073-4511-864a-8e9190213c24",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "a downcast would be to cast from a general polymorphic "
            ],
            [
              "Shape",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " down to one of its derived and more specific shape like "
            ],
            [
              "Square",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "Circle",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "a downcast would be to cast from a general polymorphic "
          },
          {
            "Text": "Shape",
            "AttrFlags": 2
          },
          {
            "Text": " down to one of its derived and more specific shape like "
          },
          {
            "Text": "Square",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "Circle",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522407458,
        "id": "36723c7c-7f43-481c-bbbc-1c366182eaa8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522407458,
        "parent_id": "a0025e0c-8073-4511-864a-8e9190213c24",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Why to downcast ?",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Why to downcast ?",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522407458,
        "id": "049efa82-c833-449b-a029-d5c6657a0b0d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522407458,
        "parent_id": "a0025e0c-8073-4511-864a-8e9190213c24",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Most of the time, you would not need to know which is the real type of the object, as the virtual functions allow you to manipulate your object independently of its type:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Most of the time, you would not need to know which is the real type of the object, as the virtual functions allow you to manipulate your object independently of its type:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522407458,
        "id": "302ece2c-5bd1-470a-97da-cac9df9e153f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550799480000,
        "parent_id": "a0025e0c-8073-4511-864a-8e9190213c24",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "std::cout \u003c\u003c \"Surface: \" \u003c\u003c ps-\u003eget_surface() \u003c\u003c std::endl;"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "std::cout \u003c\u003c \"Surface: \" \u003c\u003c ps-\u003eget_surface() \u003c\u003c std::endl;",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522407458,
        "id": "7d9a27e3-51a0-4c8f-80c3-1e7419304d04",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522407458,
        "parent_id": "a0025e0c-8073-4511-864a-8e9190213c24",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If you don’t need any downcast, your design would be perfect."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If you don’t need any downcast, your design would be perfect."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522407458,
        "id": "a67b0ae9-8733-4b02-be17-04b3d5551c53",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522407458,
        "parent_id": "a0025e0c-8073-4511-864a-8e9190213c24",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "However, you may need sometimes to downcast. A typical example is when you want to invoke a non virtual function that exist only for the child class."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "However, you may need sometimes to downcast. A typical example is when you want to invoke a non virtual function that exist only for the child class."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522407458,
        "id": "6adb910c-2dd6-4e45-9469-795b5ed2f547",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522407458,
        "parent_id": "a0025e0c-8073-4511-864a-8e9190213c24",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Consider for example circles. Only circles have a diameter. So the class would be defined as :"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Consider for example circles. Only circles have a diameter. So the class would be defined as :"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522407458,
        "id": "509241f6-b277-4ce2-b780-b69e6f9271c7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550799480000,
        "parent_id": "a0025e0c-8073-4511-864a-8e9190213c24",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class Circle: public Shape { // for Shape, see example on defining a polymorphic class\n    Point center;\n    double radius;\npublic: \n    Circle (const Point\u0026 center, double radius)\n       : center(center), radius(radius) {}\n\n    double get_surface() const override { return r * r * M_PI; }   \n\n    // this is only for circles. Makes no sense for other shapes \n    double get_diameter() const { return 2 * r; }\n};"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "class Circle: public Shape { // for Shape, see example on defining a polymorphic class\n    Point center;\n    double radius;\npublic: \n    Circle (const Point\u0026 center, double radius)\n       : center(center), radius(radius) {}\n\n    double get_surface() const override { return r * r * M_PI; }   \n\n    // this is only for circles. Makes no sense for other shapes \n    double get_diameter() const { return 2 * r; }\n};",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522407459,
        "id": "b64c6ffc-032b-4d86-b1c7-1b5a88fb4b08",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522407459,
        "parent_id": "a0025e0c-8073-4511-864a-8e9190213c24",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "get_diameter()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " member function only exist for circles. It was not defined for a "
            ],
            [
              "Shape",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " object:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "get_diameter()",
            "AttrFlags": 2
          },
          {
            "Text": " member function only exist for circles. It was not defined for a "
          },
          {
            "Text": "Shape",
            "AttrFlags": 2
          },
          {
            "Text": " object:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522407459,
        "id": "6f72c445-97a8-434e-9f60-1db7df4c7899",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550799540000,
        "parent_id": "a0025e0c-8073-4511-864a-8e9190213c24",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "Shape* ps = get_any_shape();\nps-\u003eget_diameter(); // OUCH !!! Compilation error"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "Shape* ps = get_any_shape();\nps-\u003eget_diameter(); // OUCH !!! Compilation error",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522407459,
        "id": "a8a01dbb-149b-49c0-b0a3-9736572abff6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522407459,
        "parent_id": "a0025e0c-8073-4511-864a-8e9190213c24",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "How to downcast ?",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "How to downcast ?",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522407459,
        "id": "f88e86aa-c4f2-44c2-9d52-76b896cdbf5d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522407459,
        "parent_id": "a0025e0c-8073-4511-864a-8e9190213c24",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If you’d know for sure that "
            ],
            [
              "ps",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " points to a circle you could opt for a "
            ],
            [
              "static_cast",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If you’d know for sure that "
          },
          {
            "Text": "ps",
            "AttrFlags": 2
          },
          {
            "Text": " points to a circle you could opt for a "
          },
          {
            "Text": "static_cast",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522407459,
        "id": "b881e90b-bd7b-4d39-89d1-28425104566c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550799540000,
        "parent_id": "a0025e0c-8073-4511-864a-8e9190213c24",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "std::cout \u003c\u003c \"Diameter: \" \u003c\u003c static_cast\u003cCircle*\u003e(ps)-\u003eget_diameter() \u003c\u003c std::endl;"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "std::cout \u003c\u003c \"Diameter: \" \u003c\u003c static_cast\u003cCircle*\u003e(ps)-\u003eget_diameter() \u003c\u003c std::endl;",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522407459,
        "id": "3a7ce42b-390e-4e86-8871-85ca89ec6882",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522407459,
        "parent_id": "a0025e0c-8073-4511-864a-8e9190213c24",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This will do the trick. But it’s very risky: if "
            ],
            [
              "ps",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " appears to by anything else than a "
            ],
            [
              "Circle",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " the behavior of your code will be undefined."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This will do the trick. But it’s very risky: if "
          },
          {
            "Text": "ps",
            "AttrFlags": 2
          },
          {
            "Text": " appears to by anything else than a "
          },
          {
            "Text": "Circle",
            "AttrFlags": 2
          },
          {
            "Text": " the behavior of your code will be undefined."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522407460,
        "id": "3e35964f-b54d-4f47-812c-d4838c152e1e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522407460,
        "parent_id": "a0025e0c-8073-4511-864a-8e9190213c24",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "So rather than playing Russian roulette, you should safely use a "
            ],
            [
              "dynamic_cast",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". This is specifically for polymorphic classes :"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "So rather than playing Russian roulette, you should safely use a "
          },
          {
            "Text": "dynamic_cast",
            "AttrFlags": 2
          },
          {
            "Text": ". This is specifically for polymorphic classes :"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522407460,
        "id": "24204579-5f4c-4b8f-ab4c-aa5c980aa20b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550799540000,
        "parent_id": "a0025e0c-8073-4511-864a-8e9190213c24",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "int main() {\n    Circle circle(Point(0.0, 0.0), 10);\n    Shape \u0026shape = circle;\n\n    std::cout \u003c\u003c \"The shape has a surface of \" \u003c\u003c shape.get_surface() \u003c\u003c std::endl;\n\n    //shape.get_diameter();   // OUCH !!! Compilation error \n\n    Circle *pc = dynamic_cast\u003cCircle*\u003e(\u0026shape); // will be nullptr if ps wasn't a circle \n    if (pc) \n        std::cout \u003c\u003c \"The shape is a circle of diameter \" \u003c\u003c pc-\u003eget_diameter() \u003c\u003c std::endl;\n    else\n        std::cout \u003c\u003c \"The shape isn't a circle !\" \u003c\u003c std::endl; \n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "int main() {\n    Circle circle(Point(0.0, 0.0), 10);\n    Shape \u0026shape = circle;\n\n    std::cout \u003c\u003c \"The shape has a surface of \" \u003c\u003c shape.get_surface() \u003c\u003c std::endl;\n\n    //shape.get_diameter();   // OUCH !!! Compilation error \n\n    Circle *pc = dynamic_cast\u003cCircle*\u003e(\u0026shape); // will be nullptr if ps wasn't a circle \n    if (pc) \n        std::cout \u003c\u003c \"The shape is a circle of diameter \" \u003c\u003c pc-\u003eget_diameter() \u003c\u003c std::endl;\n    else\n        std::cout \u003c\u003c \"The shape isn't a circle !\" \u003c\u003c std::endl; \n}",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522407460,
        "id": "ad958ceb-c3e5-4ad1-a2fa-4601a9d855e1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522407460,
        "parent_id": "a0025e0c-8073-4511-864a-8e9190213c24",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note that "
            ],
            [
              "dynamic_cast",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is not possible on a class that is not polymorphic. You’d need at least one virtual function in the class or its parents to be able to use it."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note that "
          },
          {
            "Text": "dynamic_cast",
            "AttrFlags": 2
          },
          {
            "Text": " is not possible on a class that is not polymorphic. You’d need at least one virtual function in the class or its parents to be able to use it."
          }
        ]
      }
    ],
    "title": "Safe downcasting",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}