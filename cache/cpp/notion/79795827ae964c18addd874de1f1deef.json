{
  "ID": "79795827-ae96-4c18-addd-874de1f1deef",
  "Root": {
    "alive": true,
    "content": [
      "f56dcbee-e053-4bf7-990e-0992ca7711c4",
      "57362220-904f-4aef-83c1-6cbd987f3daf",
      "d370453d-46d5-489b-96f7-e5825c70a900",
      "07f7eca8-6fc4-45df-9f80-1ce559582244",
      "98e67f5e-fba7-4ae7-adae-dc6b6c5fae64",
      "a536efc0-b03d-43bb-b299-bee0ba1144ca",
      "ae130b21-e9cb-4bc4-baf9-179f260e9abc"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522012515,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "79795827-ae96-4c18-addd-874de1f1deef",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550656260000,
    "parent_id": "b96c747c-3d87-49a0-b2bb-264f7c11b216",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Reading a file into a container"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522012511,
        "id": "f56dcbee-e053-4bf7-990e-0992ca7711c4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522012511,
        "parent_id": "79795827-ae96-4c18-addd-874de1f1deef",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In the example below we use "
            ],
            [
              "std::string",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "operator\u003e\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to read items from the file."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In the example below we use "
          },
          {
            "Text": "std::string",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "operator\u003e\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " to read items from the file."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522012514,
        "id": "57362220-904f-4aef-83c1-6cbd987f3daf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522012514,
        "parent_id": "79795827-ae96-4c18-addd-874de1f1deef",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "std::ifstream file(\"file3.txt\");\n\nstd::vector\u003cstd::string\u003e  v;\n\nstd::string s;\nwhile(file \u003e\u003e s) // keep reading until we run out\n{\n    v.push_back(s);\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "std::ifstream file(\"file3.txt\");\n\nstd::vector\u003cstd::string\u003e  v;\n\nstd::string s;\nwhile(file \u003e\u003e s) // keep reading until we run out\n{\n    v.push_back(s);\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522012514,
        "id": "d370453d-46d5-489b-96f7-e5825c70a900",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522012514,
        "parent_id": "79795827-ae96-4c18-addd-874de1f1deef",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In the above example we are simply iterating through the file reading one “item” at a time using "
            ],
            [
              "operator\u003e\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". This same affect can be achieved using the "
            ],
            [
              "std::istream_iterator",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " which is an input iterator that reads one “item” at a time from the stream. Also most containers can be constructed using two iterators so we can simplify the above code to:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In the above example we are simply iterating through the file reading one “item” at a time using "
          },
          {
            "Text": "operator\u003e\u003e",
            "AttrFlags": 2
          },
          {
            "Text": ". This same affect can be achieved using the "
          },
          {
            "Text": "std::istream_iterator",
            "AttrFlags": 2
          },
          {
            "Text": " which is an input iterator that reads one “item” at a time from the stream. Also most containers can be constructed using two iterators so we can simplify the above code to:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522012514,
        "id": "07f7eca8-6fc4-45df-9f80-1ce559582244",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522012514,
        "parent_id": "79795827-ae96-4c18-addd-874de1f1deef",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "std::ifstream file(\"file3.txt\");\n\nstd::vector\u003cstd::string\u003e  v(std::istream_iterator\u003cstd::string\u003e{file},\n                            std::istream_iterator\u003cstd::string\u003e{});"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "std::ifstream file(\"file3.txt\");\n\nstd::vector\u003cstd::string\u003e  v(std::istream_iterator\u003cstd::string\u003e{file},\n                            std::istream_iterator\u003cstd::string\u003e{});",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522012514,
        "id": "98e67f5e-fba7-4ae7-adae-dc6b6c5fae64",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522012514,
        "parent_id": "79795827-ae96-4c18-addd-874de1f1deef",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We can extend this to read any object types we like by simply specifying the object we want to read as the template parameter to the "
            ],
            [
              "std::istream_iterator",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Thus we can simply extend the above to read lines (rather than words) like this:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "We can extend this to read any object types we like by simply specifying the object we want to read as the template parameter to the "
          },
          {
            "Text": "std::istream_iterator",
            "AttrFlags": 2
          },
          {
            "Text": ". Thus we can simply extend the above to read lines (rather than words) like this:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522012514,
        "id": "a536efc0-b03d-43bb-b299-bee0ba1144ca",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522012514,
        "parent_id": "79795827-ae96-4c18-addd-874de1f1deef",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// Unfortunately there is  no built in type that reads line using \u003e\u003e\n// So here we build a simple helper class to do it. That will convert\n// back to a string when used in string context.\nstruct Line\n{\n    // Store data here\n    std::string data;\n    // Convert object to string\n    operator std::string const\u0026() const {return data;}\n    // Read a line from a stream.\n    friend std::istream\u0026 operator\u003e\u003e(std::istream\u0026 stream, Line\u0026 line)\n    {\n        return std::getline(stream, line.data);\n    }\n};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// Unfortunately there is  no built in type that reads line using \u003e\u003e\n// So here we build a simple helper class to do it. That will convert\n// back to a string when used in string context.\nstruct Line\n{\n    // Store data here\n    std::string data;\n    // Convert object to string\n    operator std::string const\u0026() const {return data;}\n    // Read a line from a stream.\n    friend std::istream\u0026 operator\u003e\u003e(std::istream\u0026 stream, Line\u0026 line)\n    {\n        return std::getline(stream, line.data);\n    }\n};",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522012515,
        "id": "ae130b21-e9cb-4bc4-baf9-179f260e9abc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522012515,
        "parent_id": "79795827-ae96-4c18-addd-874de1f1deef",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "std::ifstream file(\"file3.txt\");\n\n// Read the lines of a file into a container.\nstd::vector\u003cstd::string\u003e  v(std::istream_iterator\u003cLine\u003e{file},\n                            std::istream_iterator\u003cLine\u003e{});"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "std::ifstream file(\"file3.txt\");\n\n// Read the lines of a file into a container.\nstd::vector\u003cstd::string\u003e  v(std::istream_iterator\u003cLine\u003e{file},\n                            std::istream_iterator\u003cLine\u003e{});",
        "code_language": "Plain Text"
      }
    ],
    "title": "Reading a file into a container",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}