{
  "ID": "2b51ca48-12e4-4a81-88d7-1040c4242934",
  "Root": {
    "alive": true,
    "content": [
      "ccaf2e66-cf55-4b82-bfb8-94dc4a78eaee",
      "92f59b8f-1dd7-41ff-bb42-1d1d5cc344b6",
      "0d60a217-9bbb-4947-b384-32999dc15a24",
      "f6f209af-669a-43b8-b9d0-ecb4244f4aa4",
      "50c155aa-6bfc-48a2-8c4a-5f6b35f99188",
      "641d5179-177a-421f-ba1b-510e27ef5b54",
      "63d2b6d0-3a54-4be0-b77c-45bc1a5e881e",
      "def33004-36eb-4c47-a7d0-5917d11887c4",
      "d8a6ed15-d34c-4c25-b512-153fbe8e4ddb"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522064663,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "2b51ca48-12e4-4a81-88d7-1040c4242934",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550655660000,
    "parent_id": "2be9c7d5-be12-439a-8968-ad057c67187a",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Bit shift operators for IO"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522064661,
        "id": "ccaf2e66-cf55-4b82-bfb8-94dc4a78eaee",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522064661,
        "parent_id": "2b51ca48-12e4-4a81-88d7-1040c4242934",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The operators "
            ],
            [
              "\u003c\u003c",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "\u003e\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " are commonly used as “write” and “read” operators:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The operators "
          },
          {
            "Text": "\u003c\u003c",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "\u003e\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " are commonly used as “write” and “read” operators:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522064662,
        "id": "92f59b8f-1dd7-41ff-bb42-1d1d5cc344b6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522064662,
        "parent_id": "2b51ca48-12e4-4a81-88d7-1040c4242934",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "std::ostream",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " overloads "
            ],
            [
              "\u003c\u003c",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to write variables to the underlying stream (example: "
            ],
            [
              "std::cout",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ")"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "std::ostream",
            "AttrFlags": 2
          },
          {
            "Text": " overloads "
          },
          {
            "Text": "\u003c\u003c",
            "AttrFlags": 2
          },
          {
            "Text": " to write variables to the underlying stream (example: "
          },
          {
            "Text": "std::cout",
            "AttrFlags": 2
          },
          {
            "Text": ")"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522064662,
        "id": "0d60a217-9bbb-4947-b384-32999dc15a24",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522064662,
        "parent_id": "2b51ca48-12e4-4a81-88d7-1040c4242934",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "std::istream",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " overloads "
            ],
            [
              "\u003e\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to read from the underlying stream to a variable (example: "
            ],
            [
              "std::cin",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ")"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "std::istream",
            "AttrFlags": 2
          },
          {
            "Text": " overloads "
          },
          {
            "Text": "\u003e\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " to read from the underlying stream to a variable (example: "
          },
          {
            "Text": "std::cin",
            "AttrFlags": 2
          },
          {
            "Text": ")"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522064662,
        "id": "f6f209af-669a-43b8-b9d0-ecb4244f4aa4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522064662,
        "parent_id": "2b51ca48-12e4-4a81-88d7-1040c4242934",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The way they do this is similar if you wanted to overload them “normally” outside of the "
            ],
            [
              "class",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "/"
            ],
            [
              "struct",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", except that specifying the arguments are not of the same type:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The way they do this is similar if you wanted to overload them “normally” outside of the "
          },
          {
            "Text": "class",
            "AttrFlags": 2
          },
          {
            "Text": "/"
          },
          {
            "Text": "struct",
            "AttrFlags": 2
          },
          {
            "Text": ", except that specifying the arguments are not of the same type:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522064663,
        "id": "50c155aa-6bfc-48a2-8c4a-5f6b35f99188",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522064663,
        "parent_id": "2b51ca48-12e4-4a81-88d7-1040c4242934",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Return type is the stream you want to overload from (for example, "
            ],
            [
              "std::ostream",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") passed by reference, to allow chaining (Chaining: "
            ],
            [
              "std::cout \u003c\u003c a \u003c\u003c b;",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "). Example: "
            ],
            [
              "std::ostream\u0026",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Return type is the stream you want to overload from (for example, "
          },
          {
            "Text": "std::ostream",
            "AttrFlags": 2
          },
          {
            "Text": ") passed by reference, to allow chaining (Chaining: "
          },
          {
            "Text": "std::cout \u003c\u003c a \u003c\u003c b;",
            "AttrFlags": 2
          },
          {
            "Text": "). Example: "
          },
          {
            "Text": "std::ostream\u0026",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522064663,
        "id": "641d5179-177a-421f-ba1b-510e27ef5b54",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522064663,
        "parent_id": "2b51ca48-12e4-4a81-88d7-1040c4242934",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "lhs",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " would be the same as the return type"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "lhs",
            "AttrFlags": 2
          },
          {
            "Text": " would be the same as the return type"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522064663,
        "id": "63d2b6d0-3a54-4be0-b77c-45bc1a5e881e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522064663,
        "parent_id": "2b51ca48-12e4-4a81-88d7-1040c4242934",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "rhs",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is the type you want to allow overloading from (i.e. "
            ],
            [
              "T",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "), passed by "
            ],
            [
              "const\u0026",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " instead of value for performance reason ("
            ],
            [
              "rhs",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " shouldn’t be changed anyway). Example: "
            ],
            [
              "const Vector\u0026",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "rhs",
            "AttrFlags": 2
          },
          {
            "Text": " is the type you want to allow overloading from (i.e. "
          },
          {
            "Text": "T",
            "AttrFlags": 2
          },
          {
            "Text": "), passed by "
          },
          {
            "Text": "const\u0026",
            "AttrFlags": 2
          },
          {
            "Text": " instead of value for performance reason ("
          },
          {
            "Text": "rhs",
            "AttrFlags": 2
          },
          {
            "Text": " shouldn’t be changed anyway). Example: "
          },
          {
            "Text": "const Vector\u0026",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522064663,
        "id": "def33004-36eb-4c47-a7d0-5917d11887c4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522064663,
        "parent_id": "2b51ca48-12e4-4a81-88d7-1040c4242934",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522064663,
        "id": "d8a6ed15-d34c-4c25-b512-153fbe8e4ddb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522064663,
        "parent_id": "2b51ca48-12e4-4a81-88d7-1040c4242934",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "//Overload std::ostream operator\u003c\u003c to allow output from Vector's\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 lhs, const Vector\u0026 rhs)\n{\n    lhs \u003c\u003c \"x: \" \u003c\u003c rhs.x \u003c\u003c \" y: \" \u003c\u003c rhs.y \u003c\u003c \" z: \" \u003c\u003c rhs.z \u003c\u003c '\\n';\n    return lhs;\n}\n\nVector v = { 1, 2, 3};\n\n//Now you can do\nstd::cout \u003c\u003c v;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "//Overload std::ostream operator\u003c\u003c to allow output from Vector's\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 lhs, const Vector\u0026 rhs)\n{\n    lhs \u003c\u003c \"x: \" \u003c\u003c rhs.x \u003c\u003c \" y: \" \u003c\u003c rhs.y \u003c\u003c \" z: \" \u003c\u003c rhs.z \u003c\u003c '\\n';\n    return lhs;\n}\n\nVector v = { 1, 2, 3};\n\n//Now you can do\nstd::cout \u003c\u003c v;",
        "code_language": "Plain Text"
      }
    ],
    "title": "Bit shift operators for IO",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}