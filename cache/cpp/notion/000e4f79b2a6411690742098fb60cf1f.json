{
  "ID": "000e4f79-b2a6-4116-9074-2098fb60cf1f",
  "Root": {
    "alive": true,
    "content": [
      "edee6673-e48c-4746-ada0-026d0bd5f419",
      "a33a6958-b8b2-43a1-a408-eb5e2a358805",
      "4ce0109e-a31d-4610-b4ab-5ece87644fc7",
      "f37eb958-4093-4bc2-8e25-9b3b0506765d",
      "023307ea-7b71-48d5-a325-e51750368869",
      "3acb1dc3-12fb-4be1-8d9a-c24f7cf6295f",
      "80a95023-05af-4244-97af-c951a1fe8b24",
      "64d0d467-475d-481e-8557-d38b3065232d",
      "0992bb1e-34a5-449e-b402-3593a377f5f2",
      "495738df-1446-424d-acaf-9340a2ec1417",
      "3e1add2d-0f2d-4b4a-a8c9-6b2a97675222",
      "77e54300-eced-4e39-acc7-b76f58bc6d28",
      "1b296948-5dff-4b2b-bfbe-72a24bcd53d3"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522059793,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "000e4f79-b2a6-4116-9074-2098fb60cf1f",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550655720000,
    "parent_id": "2be9c7d5-be12-439a-8968-ad057c67187a",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Comparison operators"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522059788,
        "id": "edee6673-e48c-4746-ada0-026d0bd5f419",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522059788,
        "parent_id": "000e4f79-b2a6-4116-9074-2098fb60cf1f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You can overload all comparison operators:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You can overload all comparison operators:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522059791,
        "id": "a33a6958-b8b2-43a1-a408-eb5e2a358805",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522059791,
        "parent_id": "000e4f79-b2a6-4116-9074-2098fb60cf1f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "==",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "!=",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "==",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "!=",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522059791,
        "id": "4ce0109e-a31d-4610-b4ab-5ece87644fc7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522059791,
        "parent_id": "000e4f79-b2a6-4116-9074-2098fb60cf1f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "\\\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "\\\u003c",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "\\\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "\\\u003c",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522059791,
        "id": "f37eb958-4093-4bc2-8e25-9b3b0506765d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522059791,
        "parent_id": "000e4f79-b2a6-4116-9074-2098fb60cf1f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "\u003e=",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "\u003c=",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "\u003e=",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "\u003c=",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522059792,
        "id": "023307ea-7b71-48d5-a325-e51750368869",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522059792,
        "parent_id": "000e4f79-b2a6-4116-9074-2098fb60cf1f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The recommended way to overload all those operators is by implementing only 2 operators ("
            ],
            [
              "==",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "\\\u003c",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") and then using those to define the rest. Scroll down for explanation"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The recommended way to overload all those operators is by implementing only 2 operators ("
          },
          {
            "Text": "==",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "\\\u003c",
            "AttrFlags": 2
          },
          {
            "Text": ") and then using those to define the rest. Scroll down for explanation"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522059792,
        "id": "3acb1dc3-12fb-4be1-8d9a-c24f7cf6295f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522059792,
        "parent_id": "000e4f79-b2a6-4116-9074-2098fb60cf1f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Overloading outside of "
            ],
            [
              "class",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "/"
            ],
            [
              "struct",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Overloading outside of "
          },
          {
            "Text": "class",
            "AttrFlags": 2
          },
          {
            "Text": "/"
          },
          {
            "Text": "struct",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522059792,
        "id": "80a95023-05af-4244-97af-c951a1fe8b24",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522059792,
        "parent_id": "000e4f79-b2a6-4116-9074-2098fb60cf1f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "//Only implement those 2\nbool operator==(const T\u0026 lhs, const T\u0026 rhs) { /* Compare */ }\nbool operator\u003c(const T\u0026 lhs, const T\u0026 rhs) { /* Compare */ }\n\n//Now you can define the rest\nbool operator!=(const T\u0026 lhs, const T\u0026 rhs) { return !(lhs == rhs); }\nbool operator\u003e(const T\u0026 lhs, const T\u0026 rhs) { return rhs \u003c lhs; }\nbool operator\u003c=(const T\u0026 lhs, const T\u0026 rhs) { return !(lhs \u003e rhs); }\nbool operator\u003e=(const T\u0026 lhs, const T\u0026 rhs) { return !(lhs \u003c rhs); }"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "//Only implement those 2\nbool operator==(const T\u0026 lhs, const T\u0026 rhs) { /* Compare */ }\nbool operator\u003c(const T\u0026 lhs, const T\u0026 rhs) { /* Compare */ }\n\n//Now you can define the rest\nbool operator!=(const T\u0026 lhs, const T\u0026 rhs) { return !(lhs == rhs); }\nbool operator\u003e(const T\u0026 lhs, const T\u0026 rhs) { return rhs \u003c lhs; }\nbool operator\u003c=(const T\u0026 lhs, const T\u0026 rhs) { return !(lhs \u003e rhs); }\nbool operator\u003e=(const T\u0026 lhs, const T\u0026 rhs) { return !(lhs \u003c rhs); }",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522059792,
        "id": "64d0d467-475d-481e-8557-d38b3065232d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522059792,
        "parent_id": "000e4f79-b2a6-4116-9074-2098fb60cf1f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Overloading inside of "
            ],
            [
              "class",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "/"
            ],
            [
              "struct",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Overloading inside of "
          },
          {
            "Text": "class",
            "AttrFlags": 2
          },
          {
            "Text": "/"
          },
          {
            "Text": "struct",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522059792,
        "id": "0992bb1e-34a5-449e-b402-3593a377f5f2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522059792,
        "parent_id": "000e4f79-b2a6-4116-9074-2098fb60cf1f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "//Note that the functions are const, because if they are not const, you wouldn't be able\n//to call them if the object is const\n\n//Only implement those 2\nbool operator==(const T\u0026 rhs) const { /* Compare */ }\nbool operator\u003c(const T\u0026 rhs) const { /* Compare */ }\n\n//Now you can define the rest\nbool operator!=(const T\u0026 rhs) const { return !(*this == rhs); }\nbool operator\u003e(const T\u0026 rhs) const { return rhs \u003c *this; }\nbool operator\u003c=(const T\u0026 rhs) const { return !(*this \u003e rhs); }\nbool operator\u003e=(const T\u0026 rhs) const { return !(*this \u003c rhs); }"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "//Note that the functions are const, because if they are not const, you wouldn't be able\n//to call them if the object is const\n\n//Only implement those 2\nbool operator==(const T\u0026 rhs) const { /* Compare */ }\nbool operator\u003c(const T\u0026 rhs) const { /* Compare */ }\n\n//Now you can define the rest\nbool operator!=(const T\u0026 rhs) const { return !(*this == rhs); }\nbool operator\u003e(const T\u0026 rhs) const { return rhs \u003c *this; }\nbool operator\u003c=(const T\u0026 rhs) const { return !(*this \u003e rhs); }\nbool operator\u003e=(const T\u0026 rhs) const { return !(*this \u003c rhs); }",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522059793,
        "id": "495738df-1446-424d-acaf-9340a2ec1417",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522059793,
        "parent_id": "000e4f79-b2a6-4116-9074-2098fb60cf1f",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522059793,
        "id": "3e1add2d-0f2d-4b4a-a8c9-6b2a97675222",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522059793,
        "parent_id": "000e4f79-b2a6-4116-9074-2098fb60cf1f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The operators obviously return a "
            ],
            [
              "bool",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", indicating "
            ],
            [
              "true",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "false",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " for the corresponding operation."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The operators obviously return a "
          },
          {
            "Text": "bool",
            "AttrFlags": 2
          },
          {
            "Text": ", indicating "
          },
          {
            "Text": "true",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "false",
            "AttrFlags": 2
          },
          {
            "Text": " for the corresponding operation."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522059793,
        "id": "77e54300-eced-4e39-acc7-b76f58bc6d28",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522059793,
        "parent_id": "000e4f79-b2a6-4116-9074-2098fb60cf1f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "All of the operators take their arguments by "
            ],
            [
              "const\u0026",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", because the only thing that does operators do is compare, so they shouldn’t modify the objects. Passing by "
            ],
            [
              "\u0026",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (reference) is faster than by value, and to make sure that the operators don’t modify it, it is a "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "-reference."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "All of the operators take their arguments by "
          },
          {
            "Text": "const\u0026",
            "AttrFlags": 2
          },
          {
            "Text": ", because the only thing that does operators do is compare, so they shouldn’t modify the objects. Passing by "
          },
          {
            "Text": "\u0026",
            "AttrFlags": 2
          },
          {
            "Text": " (reference) is faster than by value, and to make sure that the operators don’t modify it, it is a "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": "-reference."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522059793,
        "id": "1b296948-5dff-4b2b-bfbe-72a24bcd53d3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522059793,
        "parent_id": "000e4f79-b2a6-4116-9074-2098fb60cf1f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note that the operators inside the "
            ],
            [
              "class",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "/"
            ],
            [
              "struct",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " are defined as "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", the reason for this is that without the functions being "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", comparing "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " objects would not be possible, as the compiler doesn’t know that the operators don’t modify anything."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note that the operators inside the "
          },
          {
            "Text": "class",
            "AttrFlags": 2
          },
          {
            "Text": "/"
          },
          {
            "Text": "struct",
            "AttrFlags": 2
          },
          {
            "Text": " are defined as "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": ", the reason for this is that without the functions being "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": ", comparing "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": " objects would not be possible, as the compiler doesn’t know that the operators don’t modify anything."
          }
        ]
      }
    ],
    "title": "Comparison operators",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}