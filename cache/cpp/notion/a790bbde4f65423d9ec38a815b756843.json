{
  "ID": "a790bbde-4f65-423d-9ec3-8a815b756843",
  "Root": {
    "alive": true,
    "content": [
      "4ae4519c-892b-46b5-a339-40c978c85f14",
      "5a04dea9-3eaf-4a31-accc-228364ce14d5"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550521964480,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "a790bbde-4f65-423d-9ec3-8a815b756843",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550796900000,
    "parent_id": "cbd900b3-1684-4f0d-977a-5a5b2a20aff3",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Generic min/max with variable argument count"
        ]
      ]
    },
    "type": "page",
    "version": 15,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521964478,
        "id": "4ae4519c-892b-46b5-a339-40c978c85f14",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521964478,
        "parent_id": "a790bbde-4f65-423d-9ec3-8a815b756843",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It’s possible to write a generic function (for example "
            ],
            [
              "min",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") which accepts various numerical types and arbitrary argument count by template meta-programming. This function declares a "
            ],
            [
              "min",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " for two arguments and recursively for more."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It’s possible to write a generic function (for example "
          },
          {
            "Text": "min",
            "AttrFlags": 2
          },
          {
            "Text": ") which accepts various numerical types and arbitrary argument count by template meta-programming. This function declares a "
          },
          {
            "Text": "min",
            "AttrFlags": 2
          },
          {
            "Text": " for two arguments and recursively for more."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521964480,
        "id": "5a04dea9-3eaf-4a31-accc-228364ce14d5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550796900000,
        "parent_id": "a790bbde-4f65-423d-9ec3-8a815b756843",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "template \u003ctypename T1, typename T2\u003e\nauto min(const T1 \u0026a, const T2 \u0026b) \n-\u003e typename std::common_type\u003cconst T1\u0026, const T2\u0026\u003e::type\n{\n    return a \u003c b ? a : b;\n}\n\ntemplate \u003ctypename T1, typename T2, typename ... Args\u003e\nauto min(const T1 \u0026a, const T2 \u0026b, const Args\u0026 ... args)\n-\u003e typename std::common_type\u003cconst T1\u0026, const T2\u0026, const Args\u0026 ...\u003e::type\n{\n    return min(min(a, b), args...);\n}\n\nauto minimum = min(4, 5.8f, 3, 1.8, 3, 1.1, 9);"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "template \u003ctypename T1, typename T2\u003e\nauto min(const T1 \u0026a, const T2 \u0026b) \n-\u003e typename std::common_type\u003cconst T1\u0026, const T2\u0026\u003e::type\n{\n    return a \u003c b ? a : b;\n}\n\ntemplate \u003ctypename T1, typename T2, typename ... Args\u003e\nauto min(const T1 \u0026a, const T2 \u0026b, const Args\u0026 ... args)\n-\u003e typename std::common_type\u003cconst T1\u0026, const T2\u0026, const Args\u0026 ...\u003e::type\n{\n    return min(min(a, b), args...);\n}\n\nauto minimum = min(4, 5.8f, 3, 1.8, 3, 1.1, 9);",
        "code_language": "C++"
      }
    ],
    "title": "Generic min/max with variable argument count",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}