{
  "ID": "f54d3517-6548-4f0a-8437-292a08a4fc3e",
  "Root": {
    "alive": true,
    "content": [
      "959566cf-ef42-4b3f-8a53-d4f2e2e27f33",
      "dc1b7ccf-ce15-4eb2-b306-02d84f91eb3e",
      "cddb12cd-636a-448a-93b3-e07c79cbcec5",
      "5052a21f-d235-401d-a225-f17819cd720b",
      "5cbb6e94-0391-4eaf-b35a-cd90cb24d237",
      "9f1f8702-448c-4e38-b771-e98e392cea67",
      "7c52dd43-759a-43df-8c73-2f8027623f4c",
      "31aa1d68-f9ab-4b4e-95be-7d23095a16bb",
      "63732c5e-37dd-4a49-84e6-b0550ca8a16d",
      "0e90fe7f-f0b4-479f-b181-b91b3bfa8225",
      "170a6b3d-0402-4b3e-b60a-3e4db38f8324",
      "afc70b21-bd92-4bdc-9ef2-edfa48043702",
      "e5f0483c-c540-4e12-bbe1-6ad2631b8b56"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550525134633,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "f54d3517-6548-4f0a-8437-292a08a4fc3e",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551688943888,
    "parent_id": "c793f95d-c3c9-4e23-a753-d7b7871c3bbf",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "The Curiously Recurring Template Pattern CRTP"
        ]
      ]
    },
    "type": "page",
    "version": 4,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525134626,
        "id": "959566cf-ef42-4b3f-8a53-d4f2e2e27f33",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525134626,
        "parent_id": "f54d3517-6548-4f0a-8437-292a08a4fc3e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "CRTP is a powerful, static alternative to virtual functions and traditional inheritance that can be used to give types properties at compile time. It works by having a base class template which takes, as one of its template parameters, the derived class. This permits it to legally perform a "
            ],
            [
              "static_cast",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " of its "
            ],
            [
              "this",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " pointer to the derived class."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "CRTP is a powerful, static alternative to virtual functions and traditional inheritance that can be used to give types properties at compile time. It works by having a base class template which takes, as one of its template parameters, the derived class. This permits it to legally perform a "
          },
          {
            "Text": "static_cast",
            "AttrFlags": 2
          },
          {
            "Text": " of its "
          },
          {
            "Text": "this",
            "AttrFlags": 2
          },
          {
            "Text": " pointer to the derived class."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525134629,
        "id": "dc1b7ccf-ce15-4eb2-b306-02d84f91eb3e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525134629,
        "parent_id": "f54d3517-6548-4f0a-8437-292a08a4fc3e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Of course, this also means that a CRTP class must "
            ],
            [
              "always",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " be used as the base class of some other class. And the derived class must pass itself to the base class."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Of course, this also means that a CRTP class must "
          },
          {
            "Text": "always",
            "AttrFlags": 4
          },
          {
            "Text": " be used as the base class of some other class. And the derived class must pass itself to the base class."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525134629,
        "id": "cddb12cd-636a-448a-93b3-e07c79cbcec5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525134629,
        "parent_id": "f54d3517-6548-4f0a-8437-292a08a4fc3e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Let’s say you have a set of containers that all support the functions "
            ],
            [
              "begin()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "end()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". The standard library’s requirements for containers require more functionality. We can design a CRTP base class that provides that functionality, based solely on "
            ],
            [
              "begin()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "end()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Let’s say you have a set of containers that all support the functions "
          },
          {
            "Text": "begin()",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "end()",
            "AttrFlags": 2
          },
          {
            "Text": ". The standard library’s requirements for containers require more functionality. We can design a CRTP base class that provides that functionality, based solely on "
          },
          {
            "Text": "begin()",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "end()",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525134630,
        "id": "5052a21f-d235-401d-a225-f17819cd720b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525134630,
        "parent_id": "f54d3517-6548-4f0a-8437-292a08a4fc3e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003citerator\u003e\ntemplate \u003ctypename Sub\u003e\nclass Container {\n  private:\n    // self() yields a reference to the derived type\n    Sub\u0026 self() { return *static_cast\u003cSub*\u003e(this); }\n    Sub const\u0026 self() const { return *static_cast\u003cSub const*\u003e(this); }\n\n  public:\n    decltype(auto) front() {\n      return *self().begin();\n    }\n\n    decltype(auto) back() {\n      return *std::prev(self().end());\n    }\n\n    decltype(auto) size() const {\n      return std::distance(self().begin(), self().end());\n    }\n\n    decltype(auto) operator[](std::size_t i) {\n      return *std::next(self().begin(), i);\n    }\n};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003citerator\u003e\ntemplate \u003ctypename Sub\u003e\nclass Container {\n  private:\n    // self() yields a reference to the derived type\n    Sub\u0026 self() { return *static_cast\u003cSub*\u003e(this); }\n    Sub const\u0026 self() const { return *static_cast\u003cSub const*\u003e(this); }\n\n  public:\n    decltype(auto) front() {\n      return *self().begin();\n    }\n\n    decltype(auto) back() {\n      return *std::prev(self().end());\n    }\n\n    decltype(auto) size() const {\n      return std::distance(self().begin(), self().end());\n    }\n\n    decltype(auto) operator[](std::size_t i) {\n      return *std::next(self().begin(), i);\n    }\n};",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525134630,
        "id": "5cbb6e94-0391-4eaf-b35a-cd90cb24d237",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525134630,
        "parent_id": "f54d3517-6548-4f0a-8437-292a08a4fc3e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The above class provides the functions "
            ],
            [
              "front()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "back()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "size()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", and "
            ],
            [
              "operator[]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " for any subclass which provides "
            ],
            [
              "begin()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "end()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". An example subclass is a simple dynamically allocated array:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The above class provides the functions "
          },
          {
            "Text": "front()",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "back()",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "size()",
            "AttrFlags": 2
          },
          {
            "Text": ", and "
          },
          {
            "Text": "operator[]",
            "AttrFlags": 2
          },
          {
            "Text": " for any subclass which provides "
          },
          {
            "Text": "begin()",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "end()",
            "AttrFlags": 2
          },
          {
            "Text": ". An example subclass is a simple dynamically allocated array:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525134630,
        "id": "9f1f8702-448c-4e38-b771-e98e392cea67",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525134630,
        "parent_id": "f54d3517-6548-4f0a-8437-292a08a4fc3e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cmemory\u003e\n// A dynamically allocated array\ntemplate \u003ctypename T\u003e\nclass DynArray : public Container\u003cDynArray\u003cT\u003e\u003e {\n  public:\n    using Base = Container\u003cDynArray\u003cT\u003e\u003e;\n\n    DynArray(std::size_t size)\n      : size_{size},\n      data_{std::make_unique\u003cT[]\u003e(size_)}\n    { }\n\n    T* begin() { return data_.get(); }\n    const T* begin() const { return data_.get(); }\n    T* end() { return data_.get() + size_; }\n    const T* end() const { return data_.get() + size_; }\n\n  private:\n    std::size_t size_;\n    std::unique_ptr\u003cT[]\u003e data_;\n};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cmemory\u003e\n// A dynamically allocated array\ntemplate \u003ctypename T\u003e\nclass DynArray : public Container\u003cDynArray\u003cT\u003e\u003e {\n  public:\n    using Base = Container\u003cDynArray\u003cT\u003e\u003e;\n\n    DynArray(std::size_t size)\n      : size_{size},\n      data_{std::make_unique\u003cT[]\u003e(size_)}\n    { }\n\n    T* begin() { return data_.get(); }\n    const T* begin() const { return data_.get(); }\n    T* end() { return data_.get() + size_; }\n    const T* end() const { return data_.get() + size_; }\n\n  private:\n    std::size_t size_;\n    std::unique_ptr\u003cT[]\u003e data_;\n};",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525134630,
        "id": "7c52dd43-759a-43df-8c73-2f8027623f4c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525134630,
        "parent_id": "f54d3517-6548-4f0a-8437-292a08a4fc3e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Users of the "
            ],
            [
              "DynArray",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " class can use the interfaces provided by the CRTP base class easily as follows:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Users of the "
          },
          {
            "Text": "DynArray",
            "AttrFlags": 2
          },
          {
            "Text": " class can use the interfaces provided by the CRTP base class easily as follows:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525134631,
        "id": "31aa1d68-f9ab-4b4e-95be-7d23095a16bb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525134631,
        "parent_id": "f54d3517-6548-4f0a-8437-292a08a4fc3e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "DynArray\u003cint\u003e arr(10);\narr.front() = 2;\narr[2] = 5;\nassert(arr.size() == 10);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "DynArray\u003cint\u003e arr(10);\narr.front() = 2;\narr[2] = 5;\nassert(arr.size() == 10);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525134631,
        "id": "63732c5e-37dd-4a49-84e6-b0550ca8a16d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525134631,
        "parent_id": "f54d3517-6548-4f0a-8437-292a08a4fc3e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Usefulness:",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " This pattern particularly avoids virtual function calls at run-time which occur to traverse down the inheritance hierarchy and simply relies on static casts:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Usefulness:",
            "AttrFlags": 1
          },
          {
            "Text": " This pattern particularly avoids virtual function calls at run-time which occur to traverse down the inheritance hierarchy and simply relies on static casts:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525134631,
        "id": "0e90fe7f-f0b4-479f-b181-b91b3bfa8225",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525134631,
        "parent_id": "f54d3517-6548-4f0a-8437-292a08a4fc3e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "DynArray\u003cint\u003e arr(10);\nDynArray\u003cint\u003e::Base \u0026 base = arr;\nbase.begin(); // no virtual calls"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "DynArray\u003cint\u003e arr(10);\nDynArray\u003cint\u003e::Base \u0026 base = arr;\nbase.begin(); // no virtual calls",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525134631,
        "id": "170a6b3d-0402-4b3e-b60a-3e4db38f8324",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525134631,
        "parent_id": "f54d3517-6548-4f0a-8437-292a08a4fc3e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The only static cast inside the function "
            ],
            [
              "begin()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in the base class "
            ],
            [
              "Container\u003cDynArray\u003cint\u003e\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " allows the compiler to drastically optimize the code and no virtual table look up happens at runtime."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The only static cast inside the function "
          },
          {
            "Text": "begin()",
            "AttrFlags": 2
          },
          {
            "Text": " in the base class "
          },
          {
            "Text": "Container\u003cDynArray\u003cint\u003e\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " allows the compiler to drastically optimize the code and no virtual table look up happens at runtime."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525134633,
        "id": "afc70b21-bd92-4bdc-9ef2-edfa48043702",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525134633,
        "parent_id": "f54d3517-6548-4f0a-8437-292a08a4fc3e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Limitations:",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " Because the base class is templated and different for two different "
            ],
            [
              "DynArray",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "s it is not possible to store pointers to their base classes in an type-homogenous array as one could generally do with normal inheritance where the base class is not dependent on the derived type:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Limitations:",
            "AttrFlags": 1
          },
          {
            "Text": " Because the base class is templated and different for two different "
          },
          {
            "Text": "DynArray",
            "AttrFlags": 2
          },
          {
            "Text": "s it is not possible to store pointers to their base classes in an type-homogenous array as one could generally do with normal inheritance where the base class is not dependent on the derived type:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525134633,
        "id": "e5f0483c-c540-4e12-bbe1-6ad2631b8b56",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525134633,
        "parent_id": "f54d3517-6548-4f0a-8437-292a08a4fc3e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class A {};\nclass B: public A{};\n\nA* a = new B;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class A {};\nclass B: public A{};\n\nA* a = new B;",
        "code_language": "Plain Text"
      }
    ],
    "title": "The Curiously Recurring Template Pattern CRTP",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}