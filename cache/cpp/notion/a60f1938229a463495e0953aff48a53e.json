{
  "ID": "a60f1938-229a-4634-95e0-953aff48a53e",
  "Root": {
    "alive": true,
    "content": [
      "ff15539f-8544-47f6-aba3-aaf1e963bd40",
      "884eebed-1662-499e-8578-eec432542026",
      "c70d123a-1513-4eea-b345-7b7993a9d765",
      "f0d7ee0b-4173-4c74-a273-33ad44d8f910",
      "e4882207-fcc1-4856-805d-ef7ad54ed39e",
      "ce61998e-c610-47cb-8ffb-c863b9a613ba"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550521997505,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "a60f1938-229a-4634-95e0-953aff48a53e",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550656320000,
    "parent_id": "8a295383-3e95-42dc-b126-f5d5d4d9927a",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Argument Dependent Lookup"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521997502,
        "id": "ff15539f-8544-47f6-aba3-aaf1e963bd40",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521997502,
        "parent_id": "a60f1938-229a-4634-95e0-953aff48a53e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When calling a function without an explicit namespace qualifier, the compiler can choose to call a function within a namespace if one of the parameter types to that function is also in that namespace. This is called “Argument Dependent Lookup”, or ADL:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When calling a function without an explicit namespace qualifier, the compiler can choose to call a function within a namespace if one of the parameter types to that function is also in that namespace. This is called “Argument Dependent Lookup”, or ADL:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521997504,
        "id": "884eebed-1662-499e-8578-eec432542026",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521997504,
        "parent_id": "a60f1938-229a-4634-95e0-953aff48a53e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "namespace Test\n{\n  int call(int i);\n\n  class SomeClass {...};\n\n  int call_too(const SomeClass \u0026data);\n}\n\ncall(5); //Fails. Not a qualified function name.\n\nTest::SomeClass data;\n\ncall_too(data); //Succeeds"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "namespace Test\n{\n  int call(int i);\n\n  class SomeClass {...};\n\n  int call_too(const SomeClass \u0026data);\n}\n\ncall(5); //Fails. Not a qualified function name.\n\nTest::SomeClass data;\n\ncall_too(data); //Succeeds",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521997505,
        "id": "c70d123a-1513-4eea-b345-7b7993a9d765",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521997505,
        "parent_id": "a60f1938-229a-4634-95e0-953aff48a53e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "call",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " fails because none of its parameter types come from the "
            ],
            [
              "Test",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " namespace. "
            ],
            [
              "call_too",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " works because "
            ],
            [
              "SomeClass",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is a member of "
            ],
            [
              "Test",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and therefore it qualifies for ADL rules."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "call",
            "AttrFlags": 2
          },
          {
            "Text": " fails because none of its parameter types come from the "
          },
          {
            "Text": "Test",
            "AttrFlags": 2
          },
          {
            "Text": " namespace. "
          },
          {
            "Text": "call_too",
            "AttrFlags": 2
          },
          {
            "Text": " works because "
          },
          {
            "Text": "SomeClass",
            "AttrFlags": 2
          },
          {
            "Text": " is a member of "
          },
          {
            "Text": "Test",
            "AttrFlags": 2
          },
          {
            "Text": " and therefore it qualifies for ADL rules."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521997505,
        "id": "f0d7ee0b-4173-4c74-a273-33ad44d8f910",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521997505,
        "parent_id": "a60f1938-229a-4634-95e0-953aff48a53e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When does ADL not occur"
            ]
          ]
        },
        "type": "sub_sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "When does ADL not occur"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521997505,
        "id": "e4882207-fcc1-4856-805d-ef7ad54ed39e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521997505,
        "parent_id": "a60f1938-229a-4634-95e0-953aff48a53e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "ADL does not occur if normal unqualified lookup finds a class member, a function that has been declared at block scope, or something that is not of function type. For example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "ADL does not occur if normal unqualified lookup finds a class member, a function that has been declared at block scope, or something that is not of function type. For example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521997505,
        "id": "ce61998e-c610-47cb-8ffb-c863b9a613ba",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521997505,
        "parent_id": "a60f1938-229a-4634-95e0-953aff48a53e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "void foo();\nnamespace N {\n    struct X {};\n    void foo(X ) { std::cout \u003c\u003c '1'; }\n    void qux(X ) { std::cout \u003c\u003c '2'; }\n}\n\nstruct C {\n    void foo() {}\n    void bar() {\n        foo(N::X{}); // error: ADL is disabled and C::foo() takes no arguments\n    }\n};\n\nvoid bar() {\n    extern void foo(); // redeclares ::foo\n    foo(N::X{});       // error: ADL is disabled and ::foo() doesn't take any arguments\n}\n\nint qux;\n\nvoid baz() {\n    qux(N::X{}); // error: variable declaration disables ADL for \"qux\"\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "void foo();\nnamespace N {\n    struct X {};\n    void foo(X ) { std::cout \u003c\u003c '1'; }\n    void qux(X ) { std::cout \u003c\u003c '2'; }\n}\n\nstruct C {\n    void foo() {}\n    void bar() {\n        foo(N::X{}); // error: ADL is disabled and C::foo() takes no arguments\n    }\n};\n\nvoid bar() {\n    extern void foo(); // redeclares ::foo\n    foo(N::X{});       // error: ADL is disabled and ::foo() doesn't take any arguments\n}\n\nint qux;\n\nvoid baz() {\n    qux(N::X{}); // error: variable declaration disables ADL for \"qux\"\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "Argument Dependent Lookup",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}