{
  "ID": "e9025524-d1bc-4e76-a789-c77eb305a3ae",
  "Root": {
    "alive": true,
    "content": [
      "1f8b352e-4544-45ba-9ace-3493cf5bf1eb",
      "f7f0ad8c-eff3-4194-84c1-7bb8ed14f424",
      "5ee847de-50fb-4c72-bad5-6f432909913d",
      "0f8ea91a-42ee-42af-bb5b-dfb7e918afb5",
      "5c6d30ca-ed2c-4227-b757-6dbcff776543",
      "1fe848cf-0e00-44de-8237-9b54d7d8a102",
      "92170393-86f1-42cd-9d4d-f0585ebc0d10",
      "a4baa8cd-9d52-437b-b0bd-9bdef3e5f848",
      "343bb3bb-0566-4e45-a6a6-f26cd8e1b2ae",
      "0294db1a-35d3-455e-94b9-1711a48659ac",
      "28a5250b-3ff0-40bd-8213-21080eb27e5b"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550523838520,
    "id": "e9025524-d1bc-4e76-a789-c77eb305a3ae",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550523838520,
    "parent_id": "193b149e-733b-4344-8898-29dc4a2ef0b0",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "020 decltype"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523838513,
        "id": "1f8b352e-4544-45ba-9ace-3493cf5bf1eb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523838513,
        "parent_id": "e9025524-d1bc-4e76-a789-c77eb305a3ae",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Yields the type of its operand, which is not evaluated."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Yields the type of its operand, which is not evaluated."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523838517,
        "id": "f7f0ad8c-eff3-4194-84c1-7bb8ed14f424",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523838517,
        "parent_id": "e9025524-d1bc-4e76-a789-c77eb305a3ae",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If the operand "
            ],
            [
              "e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is a name without any additional parentheses, then "
            ],
            [
              "decltype(e)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is the "
            ],
            [
              "declared type",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " of "
            ],
            [
              "e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "If the operand "
          },
          {
            "Text": "e",
            "AttrFlags": 2
          },
          {
            "Text": " is a name without any additional parentheses, then "
          },
          {
            "Text": "decltype(e)",
            "AttrFlags": 2
          },
          {
            "Text": " is the "
          },
          {
            "Text": "declared type",
            "AttrFlags": 4
          },
          {
            "Text": " of "
          },
          {
            "Text": "e",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523838517,
        "id": "5ee847de-50fb-4c72-bad5-6f432909913d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523838517,
        "parent_id": "e9025524-d1bc-4e76-a789-c77eb305a3ae",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int x = 42;\nstd::vector\u003cdecltype(x)\u003e v(100, x); // v is a vector\u003cint\u003e"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int x = 42;\nstd::vector\u003cdecltype(x)\u003e v(100, x); // v is a vector\u003cint\u003e",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523838517,
        "id": "0f8ea91a-42ee-42af-bb5b-dfb7e918afb5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523838517,
        "parent_id": "e9025524-d1bc-4e76-a789-c77eb305a3ae",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If the operand "
            ],
            [
              "e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is a class member access without any additional parentheses, then "
            ],
            [
              "decltype(e)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is the "
            ],
            [
              "declared type",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " of the member accessed."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "If the operand "
          },
          {
            "Text": "e",
            "AttrFlags": 2
          },
          {
            "Text": " is a class member access without any additional parentheses, then "
          },
          {
            "Text": "decltype(e)",
            "AttrFlags": 2
          },
          {
            "Text": " is the "
          },
          {
            "Text": "declared type",
            "AttrFlags": 4
          },
          {
            "Text": " of the member accessed."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523838517,
        "id": "5c6d30ca-ed2c-4227-b757-6dbcff776543",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523838517,
        "parent_id": "e9025524-d1bc-4e76-a789-c77eb305a3ae",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "struct S {\n    int x = 42;\n};\nconst S s;\ndecltype(s.x) y; // y has type int, even though s.x is const"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "struct S {\n    int x = 42;\n};\nconst S s;\ndecltype(s.x) y; // y has type int, even though s.x is const",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523838519,
        "id": "1fe848cf-0e00-44de-8237-9b54d7d8a102",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523838519,
        "parent_id": "e9025524-d1bc-4e76-a789-c77eb305a3ae",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In all other cases, "
            ],
            [
              "decltype(e)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " yields both the type and the "
            ],
            [
              "value category",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%2B%2B/763/value-categories"
                ]
              ]
            ],
            [
              " of the expression "
            ],
            [
              "e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", as follows:"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "In all other cases, "
          },
          {
            "Text": "decltype(e)",
            "AttrFlags": 2
          },
          {
            "Text": " yields both the type and the "
          },
          {
            "Text": "value category",
            "Link": "http://stackoverflow.com/documentation/c%2B%2B/763/value-categories"
          },
          {
            "Text": " of the expression "
          },
          {
            "Text": "e",
            "AttrFlags": 2
          },
          {
            "Text": ", as follows:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523838519,
        "id": "92170393-86f1-42cd-9d4d-f0585ebc0d10",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523838519,
        "parent_id": "e9025524-d1bc-4e76-a789-c77eb305a3ae",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "* If `e` is an lvalue of type `T`, then `decltype(e)` is `T\u0026`.\n* If `e` is an xvalue of type `T`, then `decltype(e)` is `T\u0026\u0026`.\n* If `e` is a prvalue of type `T`, then `decltype(e)` is `T`."
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "* If `e` is an lvalue of type `T`, then `decltype(e)` is `T\u0026`.\n* If `e` is an xvalue of type `T`, then `decltype(e)` is `T\u0026\u0026`.\n* If `e` is a prvalue of type `T`, then `decltype(e)` is `T`.",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523838519,
        "id": "a4baa8cd-9d52-437b-b0bd-9bdef3e5f848",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523838519,
        "parent_id": "e9025524-d1bc-4e76-a789-c77eb305a3ae",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This includes the case with extraneous parentheses."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This includes the case with extraneous parentheses."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523838519,
        "id": "343bb3bb-0566-4e45-a6a6-f26cd8e1b2ae",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523838519,
        "parent_id": "e9025524-d1bc-4e76-a789-c77eb305a3ae",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int f() { return 42; }\nint\u0026 g() { static int x = 42; return x; }\nint x = 42;\ndecltype(f()) a = f(); // a has type int\ndecltype(g()) b = g(); // b has type int\u0026\ndecltype((x)) c = x;   // c has type int\u0026, since x is an lvalue"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int f() { return 42; }\nint\u0026 g() { static int x = 42; return x; }\nint x = 42;\ndecltype(f()) a = f(); // a has type int\ndecltype(g()) b = g(); // b has type int\u0026\ndecltype((x)) c = x;   // c has type int\u0026, since x is an lvalue",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523838520,
        "id": "0294db1a-35d3-455e-94b9-1711a48659ac",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523838520,
        "parent_id": "e9025524-d1bc-4e76-a789-c77eb305a3ae",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The special form "
            ],
            [
              "decltype(auto)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " deduces the type of a variable from its initializer or the return type of a function from the "
            ],
            [
              "return",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " statements in its definition, using the type deduction rules of "
            ],
            [
              "decltype",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " rather than those of "
            ],
            [
              "auto",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The special form "
          },
          {
            "Text": "decltype(auto)",
            "AttrFlags": 2
          },
          {
            "Text": " deduces the type of a variable from its initializer or the return type of a function from the "
          },
          {
            "Text": "return",
            "AttrFlags": 2
          },
          {
            "Text": " statements in its definition, using the type deduction rules of "
          },
          {
            "Text": "decltype",
            "AttrFlags": 2
          },
          {
            "Text": " rather than those of "
          },
          {
            "Text": "auto",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523838520,
        "id": "28a5250b-3ff0-40bd-8213-21080eb27e5b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523838520,
        "parent_id": "e9025524-d1bc-4e76-a789-c77eb305a3ae",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "const int x = 123;\nauto y = x;           // y has type int\ndecltype(auto) z = x; // z has type const int, the declared type of x"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "const int x = 123;\nauto y = x;           // y has type int\ndecltype(auto) z = x; // z has type const int, the declared type of x",
        "code_language": "Plain Text"
      }
    ],
    "title": "020 decltype"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}