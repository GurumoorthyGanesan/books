{
  "ID": "a105e93e-ea1b-4be4-b4a4-b97abc4b5de2",
  "Root": {
    "alive": true,
    "content": [
      "13ab7694-ee66-4de7-8cc5-c8a656b43a8b",
      "dc3ef6bc-8d97-46e9-a5e0-cc8cd59d608f",
      "0124b30c-8275-441f-bca2-97c2b9c809cb",
      "2c923ee3-5e71-4b68-b208-f80fa8ed6da0",
      "5cd21312-d124-42dc-a38b-6ea6c8a33867",
      "01eda164-52f5-464a-8fa4-089e7e4fa3c1",
      "3e18cdc8-b483-4b1c-a6d7-b0d280c8536d",
      "0f66dfd7-7680-4107-bf6e-25ca8cbab2da",
      "8b3187f9-1abb-4d8a-9f06-228d4b866ae0",
      "1441d127-626e-45dd-a6a0-ee7c5aaa5120",
      "081ec7df-42c8-4078-8ebe-2877fb77550e",
      "d2c09533-a6d9-45bb-b2ae-65c5f11d9d87",
      "168300d6-df5e-482a-9b2a-db073ea75482",
      "ee6507fc-0144-4341-9bda-9286d435875a",
      "9461fd30-e816-4b9f-aa72-d9c7a124f3f5",
      "5d8ad108-1efc-4d30-8747-09531321f45d",
      "68a64447-e4fc-482a-a017-a7e4c631fcb9",
      "a6dc04ac-32ed-439b-adb7-15a0fade1c21",
      "8751eec4-0948-4f77-a839-e5cd6c25bb86",
      "4704ee96-6a62-4fac-88f8-cf254adadee7",
      "d372bb25-f7da-46ab-8b03-ef9b9c4eaa2a",
      "5e6a37b6-ab5d-4998-9f38-c3c92be48f0b",
      "6920f14b-4c7b-4ff7-b3f2-f9773bde50bb",
      "7c58be1c-fb3b-440b-8080-83ad20bc9946",
      "1c50606e-fba7-43bc-84d7-3c73bc92285a",
      "de15f846-c2a8-4901-9465-560c609672a3",
      "606d728a-c867-4d17-9520-dd2f03b3888d",
      "41f7ce42-00ca-4f81-ae5a-6cdfba941b52"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550524379283,
    "id": "a105e93e-ea1b-4be4-b4a4-b97abc4b5de2",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550524379283,
    "parent_id": "2457e2b5-2a2a-4489-9eac-adb5cebfd9b8",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "030 Reading a file till the end"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524379277,
        "id": "13ab7694-ee66-4de7-8cc5-c8a656b43a8b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524379277,
        "parent_id": "a105e93e-ea1b-4be4-b4a4-b97abc4b5de2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Reading a text file line-by-line"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Reading a text file line-by-line"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524379279,
        "id": "dc3ef6bc-8d97-46e9-a5e0-cc8cd59d608f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524379279,
        "parent_id": "a105e93e-ea1b-4be4-b4a4-b97abc4b5de2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A proper way to read a text file line-by-line till the end is usually not clear from "
            ],
            [
              "ifstream",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " documentation. Let’s consider some common mistakes done by beginner C++ programmers, and a proper way to read the file."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A proper way to read a text file line-by-line till the end is usually not clear from "
          },
          {
            "Text": "ifstream",
            "AttrFlags": 2
          },
          {
            "Text": " documentation. Let’s consider some common mistakes done by beginner C++ programmers, and a proper way to read the file."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524379279,
        "id": "0124b30c-8275-441f-bca2-97c2b9c809cb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524379279,
        "parent_id": "a105e93e-ea1b-4be4-b4a4-b97abc4b5de2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Lines without whitespace characters"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Lines without whitespace characters"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524379279,
        "id": "2c923ee3-5e71-4b68-b208-f80fa8ed6da0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524379279,
        "parent_id": "a105e93e-ea1b-4be4-b4a4-b97abc4b5de2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For the sake of simplicity, let’s assume that each line in the file contains no whitespace symbols."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For the sake of simplicity, let’s assume that each line in the file contains no whitespace symbols."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524379280,
        "id": "5cd21312-d124-42dc-a38b-6ea6c8a33867",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524379280,
        "parent_id": "a105e93e-ea1b-4be4-b4a4-b97abc4b5de2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "ifstream",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " has "
            ],
            [
              "operator bool()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", which returns true when a stream has no errors and is ready to read. Moreover, "
            ],
            [
              "ifstream::operator \u003e\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " returns a reference to the stream itself, so we can read and check for EOF (as well as for errors) in one line with very elegant syntax:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "ifstream",
            "AttrFlags": 2
          },
          {
            "Text": " has "
          },
          {
            "Text": "operator bool()",
            "AttrFlags": 2
          },
          {
            "Text": ", which returns true when a stream has no errors and is ready to read. Moreover, "
          },
          {
            "Text": "ifstream::operator \u003e\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " returns a reference to the stream itself, so we can read and check for EOF (as well as for errors) in one line with very elegant syntax:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524379280,
        "id": "01eda164-52f5-464a-8fa4-089e7e4fa3c1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524379280,
        "parent_id": "a105e93e-ea1b-4be4-b4a4-b97abc4b5de2",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "std::ifstream ifs(\"1.txt\");\nstd::string s;\nwhile(ifs \u003e\u003e s) {\n    std::cout \u003c\u003c s \u003c\u003c std::endl;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "std::ifstream ifs(\"1.txt\");\nstd::string s;\nwhile(ifs \u003e\u003e s) {\n    std::cout \u003c\u003c s \u003c\u003c std::endl;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524379280,
        "id": "3e18cdc8-b483-4b1c-a6d7-b0d280c8536d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524379280,
        "parent_id": "a105e93e-ea1b-4be4-b4a4-b97abc4b5de2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Lines with whitespace characters"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Lines with whitespace characters"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524379280,
        "id": "0f66dfd7-7680-4107-bf6e-25ca8cbab2da",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524379280,
        "parent_id": "a105e93e-ea1b-4be4-b4a4-b97abc4b5de2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "ifstream::operator \u003e\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " reads the stream until any whitespace character occurs, so the above code will print the words from a line on separate lines. To read everything till the end of line, use "
            ],
            [
              "std::getline",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " instead of "
            ],
            [
              "ifstream::operator \u003e\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". "
            ],
            [
              "getline",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " returns reference to the thread it worked with, so the same syntax is available:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "ifstream::operator \u003e\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " reads the stream until any whitespace character occurs, so the above code will print the words from a line on separate lines. To read everything till the end of line, use "
          },
          {
            "Text": "std::getline",
            "AttrFlags": 2
          },
          {
            "Text": " instead of "
          },
          {
            "Text": "ifstream::operator \u003e\u003e",
            "AttrFlags": 2
          },
          {
            "Text": ". "
          },
          {
            "Text": "getline",
            "AttrFlags": 2
          },
          {
            "Text": " returns reference to the thread it worked with, so the same syntax is available:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524379280,
        "id": "8b3187f9-1abb-4d8a-9f06-228d4b866ae0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524379280,
        "parent_id": "a105e93e-ea1b-4be4-b4a4-b97abc4b5de2",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "while(std::getline(ifs, s)) {\n    std::cout \u003c\u003c s \u003c\u003c std::endl;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "while(std::getline(ifs, s)) {\n    std::cout \u003c\u003c s \u003c\u003c std::endl;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524379281,
        "id": "1441d127-626e-45dd-a6a0-ee7c5aaa5120",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524379281,
        "parent_id": "a105e93e-ea1b-4be4-b4a4-b97abc4b5de2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Obviously, "
            ],
            [
              "std::getline",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " should also be used for reading a single-line file till the end."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Obviously, "
          },
          {
            "Text": "std::getline",
            "AttrFlags": 2
          },
          {
            "Text": " should also be used for reading a single-line file till the end."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524379281,
        "id": "081ec7df-42c8-4078-8ebe-2877fb77550e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524379281,
        "parent_id": "a105e93e-ea1b-4be4-b4a4-b97abc4b5de2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Reading a file into a buffer at once"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Reading a file into a buffer at once"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524379281,
        "id": "d2c09533-a6d9-45bb-b2ae-65c5f11d9d87",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524379281,
        "parent_id": "a105e93e-ea1b-4be4-b4a4-b97abc4b5de2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Finally, let’s read the file from the beginning till the end without stopping at any character, including whitespaces and newlines. If we know the exact file size or upper bound of the length is acceptable, we can resize the string and then read:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Finally, let’s read the file from the beginning till the end without stopping at any character, including whitespaces and newlines. If we know the exact file size or upper bound of the length is acceptable, we can resize the string and then read:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524379281,
        "id": "168300d6-df5e-482a-9b2a-db073ea75482",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524379281,
        "parent_id": "a105e93e-ea1b-4be4-b4a4-b97abc4b5de2",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "s.resize(100);\nstd::copy(std::istreambuf_iterator\u003cchar\u003e(ifs), std::istreambuf_iterator\u003cchar\u003e(),\n    s.begin());"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "s.resize(100);\nstd::copy(std::istreambuf_iterator\u003cchar\u003e(ifs), std::istreambuf_iterator\u003cchar\u003e(),\n    s.begin());",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524379281,
        "id": "ee6507fc-0144-4341-9bda-9286d435875a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524379281,
        "parent_id": "a105e93e-ea1b-4be4-b4a4-b97abc4b5de2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Otherwise, we need to insert each character to the end of the string, so "
            ],
            [
              "std::back_inserter",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is what we need:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Otherwise, we need to insert each character to the end of the string, so "
          },
          {
            "Text": "std::back_inserter",
            "AttrFlags": 2
          },
          {
            "Text": " is what we need:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524379281,
        "id": "9461fd30-e816-4b9f-aa72-d9c7a124f3f5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524379281,
        "parent_id": "a105e93e-ea1b-4be4-b4a4-b97abc4b5de2",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "std::copy(std::istreambuf_iterator\u003cchar\u003e(ifs), std::istreambuf_iterator\u003cchar\u003e(),\n    std::back_inserter(s));"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "std::copy(std::istreambuf_iterator\u003cchar\u003e(ifs), std::istreambuf_iterator\u003cchar\u003e(),\n    std::back_inserter(s));",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524379281,
        "id": "5d8ad108-1efc-4d30-8747-09531321f45d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524379281,
        "parent_id": "a105e93e-ea1b-4be4-b4a4-b97abc4b5de2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Alternatively, it is possible to initialize a collection with stream data, using a constructor with iterator range arguments:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Alternatively, it is possible to initialize a collection with stream data, using a constructor with iterator range arguments:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524379281,
        "id": "68a64447-e4fc-482a-a017-a7e4c631fcb9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524379281,
        "parent_id": "a105e93e-ea1b-4be4-b4a4-b97abc4b5de2",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "std::vector v(std::istreambuf_iterator\u003cchar\u003e(ifs),\n    std::istreambuf_iterator\u003cchar\u003e());"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "std::vector v(std::istreambuf_iterator\u003cchar\u003e(ifs),\n    std::istreambuf_iterator\u003cchar\u003e());",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524379282,
        "id": "a6dc04ac-32ed-439b-adb7-15a0fade1c21",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524379282,
        "parent_id": "a105e93e-ea1b-4be4-b4a4-b97abc4b5de2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note that these examples are also applicable if "
            ],
            [
              "ifs",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is opened as binary file:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note that these examples are also applicable if "
          },
          {
            "Text": "ifs",
            "AttrFlags": 2
          },
          {
            "Text": " is opened as binary file:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524379282,
        "id": "8751eec4-0948-4f77-a839-e5cd6c25bb86",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524379282,
        "parent_id": "a105e93e-ea1b-4be4-b4a4-b97abc4b5de2",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "std::ifstream ifs(\"1.txt\", std::ios::binary);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "std::ifstream ifs(\"1.txt\", std::ios::binary);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524379282,
        "id": "4704ee96-6a62-4fac-88f8-cf254adadee7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524379282,
        "parent_id": "a105e93e-ea1b-4be4-b4a4-b97abc4b5de2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Copying streams"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Copying streams"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524379282,
        "id": "d372bb25-f7da-46ab-8b03-ef9b9c4eaa2a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524379282,
        "parent_id": "a105e93e-ea1b-4be4-b4a4-b97abc4b5de2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A file may be copied to another file with streams and iterators:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A file may be copied to another file with streams and iterators:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524379282,
        "id": "5e6a37b6-ab5d-4998-9f38-c3c92be48f0b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524379282,
        "parent_id": "a105e93e-ea1b-4be4-b4a4-b97abc4b5de2",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "std::ofstream ofs(\"out.file\");\nstd::copy(std::istreambuf_iterator\u003cchar\u003e(ifs), std::istreambuf_iterator\u003cchar\u003e(),\n    std::ostream_iterator\u003cchar\u003e(ofs));\nofs.close();"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "std::ofstream ofs(\"out.file\");\nstd::copy(std::istreambuf_iterator\u003cchar\u003e(ifs), std::istreambuf_iterator\u003cchar\u003e(),\n    std::ostream_iterator\u003cchar\u003e(ofs));\nofs.close();",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524379282,
        "id": "6920f14b-4c7b-4ff7-b3f2-f9773bde50bb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524379282,
        "parent_id": "a105e93e-ea1b-4be4-b4a4-b97abc4b5de2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "or redirected to any other type of stream with a compatible interface. For example Boost.Asio network stream:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "or redirected to any other type of stream with a compatible interface. For example Boost.Asio network stream:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524379282,
        "id": "7c58be1c-fb3b-440b-8080-83ad20bc9946",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524379282,
        "parent_id": "a105e93e-ea1b-4be4-b4a4-b97abc4b5de2",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "boost::asio::ip::tcp::iostream stream;\nstream.connect(\"example.com\", \"http\");\nstd::copy(std::istreambuf_iterator\u003cchar\u003e(ifs), std::istreambuf_iterator\u003cchar\u003e(),\n    std::ostream_iterator\u003cchar\u003e(stream));\nstream.close();"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "boost::asio::ip::tcp::iostream stream;\nstream.connect(\"example.com\", \"http\");\nstd::copy(std::istreambuf_iterator\u003cchar\u003e(ifs), std::istreambuf_iterator\u003cchar\u003e(),\n    std::ostream_iterator\u003cchar\u003e(stream));\nstream.close();",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524379282,
        "id": "1c50606e-fba7-43bc-84d7-3c73bc92285a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524379282,
        "parent_id": "a105e93e-ea1b-4be4-b4a4-b97abc4b5de2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Arrays"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Arrays"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524379283,
        "id": "de15f846-c2a8-4901-9465-560c609672a3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524379283,
        "parent_id": "a105e93e-ea1b-4be4-b4a4-b97abc4b5de2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As iterators might be thought of as a generalization of pointers, STL containers in the examples above may be replaced with native arrays. Here is how to parse numbers into array:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "As iterators might be thought of as a generalization of pointers, STL containers in the examples above may be replaced with native arrays. Here is how to parse numbers into array:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524379283,
        "id": "606d728a-c867-4d17-9520-dd2f03b3888d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524379283,
        "parent_id": "a105e93e-ea1b-4be4-b4a4-b97abc4b5de2",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int arr[100];\nstd::copy(std::istream_iterator\u003cchar\u003e(ifs), std::istream_iterator\u003cchar\u003e(), arr);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int arr[100];\nstd::copy(std::istream_iterator\u003cchar\u003e(ifs), std::istream_iterator\u003cchar\u003e(), arr);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524379283,
        "id": "41f7ce42-00ca-4f81-ae5a-6cdfba941b52",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524379283,
        "parent_id": "a105e93e-ea1b-4be4-b4a4-b97abc4b5de2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Beware of buffer overflow, as arrays cannot be resized on-the-fly after they were allocated. For example, if the code above will be fed with a file that contains more than 100 integer numbers, it will attempt to write outside the array and run into undefined behavior."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Beware of buffer overflow, as arrays cannot be resized on-the-fly after they were allocated. For example, if the code above will be fed with a file that contains more than 100 integer numbers, it will attempt to write outside the array and run into undefined behavior."
          }
        ]
      }
    ],
    "title": "030 Reading a file till the end"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}