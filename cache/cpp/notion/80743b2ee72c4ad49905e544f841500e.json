{
  "ID": "80743b2e-e72c-4ad4-9905-e544f841500e",
  "Root": {
    "alive": true,
    "content": [
      "115393a3-70e8-4ed4-b15f-909941b6b9ca",
      "5c9d7fe9-8285-4aa6-9078-1d7de70dc81f",
      "9a3b580e-0e78-4825-8b42-fe7937dad984"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550524662485,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "80743b2e-e72c-4ad4-9905-e544f841500e",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550781780000,
    "parent_id": "52470773-ddd6-4b1b-ad39-7b26f7b28f00",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "throw"
        ]
      ]
    },
    "type": "page",
    "version": 22,
    "content_resolved": [
      {
        "alive": true,
        "content": [
          "02f5504c-8495-4e06-a16e-c05533b742b0"
        ],
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524662483,
        "id": "115393a3-70e8-4ed4-b15f-909941b6b9ca",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550781780000,
        "parent_id": "80743b2e-e72c-4ad4-9905-e544f841500e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When "
            ],
            [
              "throw",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " occurs in an expression with an operand, its effect is to throw an "
            ],
            [
              "exception",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%2B%2B/1354/exceptions"
                ]
              ]
            ],
            [
              ", which is a copy of the operand."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 8,
        "content_resolved": [
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1550524662483,
            "id": "02f5504c-8495-4e06-a16e-c05533b742b0",
            "ignore_block_count": true,
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1550781780000,
            "parent_id": "115393a3-70e8-4ed4-b15f-909941b6b9ca",
            "parent_table": "block",
            "properties": {
              "language": [
                [
                  "C++"
                ]
              ],
              "title": [
                [
                  "void print_asterisks(int count) {\n    if (count \u003c 0) {\n        throw std::invalid_argument(\"count cannot be negative!\");\n    }\n    while (count--) { putchar('*'); }\n}"
                ]
              ]
            },
            "type": "code",
            "version": 6,
            "code": "void print_asterisks(int count) {\n    if (count \u003c 0) {\n        throw std::invalid_argument(\"count cannot be negative!\");\n    }\n    while (count--) { putchar('*'); }\n}",
            "code_language": "C++"
          }
        ],
        "inline_content": [
          {
            "Text": "When "
          },
          {
            "Text": "throw",
            "AttrFlags": 2
          },
          {
            "Text": " occurs in an expression with an operand, its effect is to throw an "
          },
          {
            "Text": "exception",
            "Link": "http://stackoverflow.com/documentation/c%2B%2B/1354/exceptions"
          },
          {
            "Text": ", which is a copy of the operand."
          }
        ]
      },
      {
        "alive": true,
        "content": [
          "df2245b5-593d-4c4a-a741-78ba199dee17"
        ],
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524662484,
        "id": "5c9d7fe9-8285-4aa6-9078-1d7de70dc81f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550781780000,
        "parent_id": "80743b2e-e72c-4ad4-9905-e544f841500e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When "
            ],
            [
              "throw",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " occurs in an expression without an operand, its effect is to "
            ],
            [
              "rethrow the current exception",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%2B%2B/1354/exceptions/5574/rethrow-propagate-exception"
                ]
              ]
            ],
            [
              ". If there is no current exception, "
            ],
            [
              "std::terminate",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is called."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 3,
        "content_resolved": [
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1550524662484,
            "id": "df2245b5-593d-4c4a-a741-78ba199dee17",
            "ignore_block_count": true,
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1550781780000,
            "parent_id": "5c9d7fe9-8285-4aa6-9078-1d7de70dc81f",
            "parent_table": "block",
            "properties": {
              "language": [
                [
                  "C++"
                ]
              ],
              "title": [
                [
                  "try {\n    // something risky\n} catch (const std::bad_alloc\u0026) {\n    std::cerr \u003c\u003c \"out of memory\" \u003c\u003c std::endl;\n} catch (...) {\n    std::cerr \u003c\u003c \"unexpected exception\" \u003c\u003c std::endl;\n    // hope the caller knows how to handle this exception\n    throw;\n}"
                ]
              ]
            },
            "type": "code",
            "version": 5,
            "code": "try {\n    // something risky\n} catch (const std::bad_alloc\u0026) {\n    std::cerr \u003c\u003c \"out of memory\" \u003c\u003c std::endl;\n} catch (...) {\n    std::cerr \u003c\u003c \"unexpected exception\" \u003c\u003c std::endl;\n    // hope the caller knows how to handle this exception\n    throw;\n}",
            "code_language": "C++"
          }
        ],
        "inline_content": [
          {
            "Text": "When "
          },
          {
            "Text": "throw",
            "AttrFlags": 2
          },
          {
            "Text": " occurs in an expression without an operand, its effect is to "
          },
          {
            "Text": "rethrow the current exception",
            "Link": "http://stackoverflow.com/documentation/c%2B%2B/1354/exceptions/5574/rethrow-propagate-exception"
          },
          {
            "Text": ". If there is no current exception, "
          },
          {
            "Text": "std::terminate",
            "AttrFlags": 2
          },
          {
            "Text": " is called."
          }
        ]
      },
      {
        "alive": true,
        "content": [
          "3c2dabc4-47d2-47ed-a179-f918979153b0",
          "a5d5079a-aeaf-4111-9ead-c15dbbe679be",
          "780d298e-fc2b-471d-9597-f140eaed2150",
          "95476f02-f639-41a9-a7d5-5eb57b0bb30a"
        ],
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524662484,
        "id": "9a3b580e-0e78-4825-8b42-fe7937dad984",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550781780000,
        "parent_id": "80743b2e-e72c-4ad4-9905-e544f841500e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When "
            ],
            [
              "throw",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " occurs in a function declarator, it introduces a dynamic exception specification, which lists the types of exceptions that the function is allowed to propagate."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 8,
        "content_resolved": [
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1550524662484,
            "id": "3c2dabc4-47d2-47ed-a179-f918979153b0",
            "ignore_block_count": true,
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1550781780000,
            "parent_id": "9a3b580e-0e78-4825-8b42-fe7937dad984",
            "parent_table": "block",
            "properties": {
              "language": [
                [
                  "C++"
                ]
              ],
              "title": [
                [
                  "// this function might propagate a std::runtime_error,\n// but not, say, a std::logic_error\nvoid risky() throw(std::runtime_error);\n// this function can't propagate any exceptions\nvoid safe() throw();"
                ]
              ]
            },
            "type": "code",
            "version": 5,
            "code": "// this function might propagate a std::runtime_error,\n// but not, say, a std::logic_error\nvoid risky() throw(std::runtime_error);\n// this function can't propagate any exceptions\nvoid safe() throw();",
            "code_language": "C++"
          },
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1550524662485,
            "id": "a5d5079a-aeaf-4111-9ead-c15dbbe679be",
            "ignore_block_count": true,
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1550781780000,
            "parent_id": "9a3b580e-0e78-4825-8b42-fe7937dad984",
            "parent_table": "block",
            "properties": {
              "title": [
                [
                  "Dynamic exception specifications are deprecated as of C++11."
                ]
              ]
            },
            "type": "text",
            "version": 4,
            "inline_content": [
              {
                "Text": "Dynamic exception specifications are deprecated as of C++11."
              }
            ]
          },
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1550524662485,
            "id": "780d298e-fc2b-471d-9597-f140eaed2150",
            "ignore_block_count": true,
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1550781780000,
            "parent_id": "9a3b580e-0e78-4825-8b42-fe7937dad984",
            "parent_table": "block",
            "properties": {
              "title": [
                [
                  "Note that the first two uses of "
                ],
                [
                  "throw",
                  [
                    [
                      "c"
                    ]
                  ]
                ],
                [
                  " listed above constitute expressions rather than statements. (The type of a throw expression is "
                ],
                [
                  "void",
                  [
                    [
                      "c"
                    ]
                  ]
                ],
                [
                  ".) This makes it possible to nest them within expressions, like so:"
                ]
              ]
            },
            "type": "text",
            "version": 4,
            "inline_content": [
              {
                "Text": "Note that the first two uses of "
              },
              {
                "Text": "throw",
                "AttrFlags": 2
              },
              {
                "Text": " listed above constitute expressions rather than statements. (The type of a throw expression is "
              },
              {
                "Text": "void",
                "AttrFlags": 2
              },
              {
                "Text": ".) This makes it possible to nest them within expressions, like so:"
              }
            ]
          },
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1550524662485,
            "id": "95476f02-f639-41a9-a7d5-5eb57b0bb30a",
            "ignore_block_count": true,
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1550781780000,
            "parent_id": "9a3b580e-0e78-4825-8b42-fe7937dad984",
            "parent_table": "block",
            "properties": {
              "language": [
                [
                  "C++"
                ]
              ],
              "title": [
                [
                  "unsigned int predecessor(unsigned int x) {\n    return (x \u003e 0) ? (x - 1) : (throw std::invalid_argument(\"0 has no predecessor\"));\n}"
                ]
              ]
            },
            "type": "code",
            "version": 5,
            "code": "unsigned int predecessor(unsigned int x) {\n    return (x \u003e 0) ? (x - 1) : (throw std::invalid_argument(\"0 has no predecessor\"));\n}",
            "code_language": "C++"
          }
        ],
        "inline_content": [
          {
            "Text": "When "
          },
          {
            "Text": "throw",
            "AttrFlags": 2
          },
          {
            "Text": " occurs in a function declarator, it introduces a dynamic exception specification, which lists the types of exceptions that the function is allowed to propagate."
          }
        ]
      }
    ],
    "title": "throw",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}