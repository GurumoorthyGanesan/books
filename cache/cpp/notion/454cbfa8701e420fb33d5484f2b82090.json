{
  "ID": "454cbfa8-701e-420f-b33d-5484f2b82090",
  "Root": {
    "alive": true,
    "content": [
      "bcaa7456-4161-4750-ac93-ae8768650a7e",
      "da358581-cb28-4315-a94a-2f603c398847",
      "6f522f92-2234-457b-b764-adbac9dfa295",
      "644c608c-af68-474c-a822-2dd2bdb3ad3c",
      "2e110ce1-bbcb-45b1-912b-0cad34e8fa26",
      "72467dcf-5c14-48ee-ba77-a3068754905a",
      "1cb2af0e-ac4e-4d22-b47f-cd995717daad",
      "59c55fb6-3ff2-46dc-8be3-715f12f6eed0",
      "6aeb59cb-6a07-4ea2-b3bf-e3cb05be2933",
      "b046f3b6-bf19-458d-a1a7-9cc627f6fcff",
      "755659cb-905a-43c0-9b47-3ca7ad20e170",
      "1bcc8d68-2d39-42b0-8355-49061e488149",
      "02c000b7-b468-4c4b-8076-ec72786cf94c",
      "f9909055-1b8f-4739-b61c-61271600d9e1",
      "cb75aa6a-5f59-47bf-ad10-04fbd417f955",
      "e4c66eb1-814c-4195-a5aa-ef093932190e",
      "1c4b2883-b3a4-4292-bc75-340d4c16268d",
      "90a8243e-214f-486a-a466-4e3db2227afb",
      "3a6d8007-bd76-40fc-b45b-30fe336bee82",
      "a118fcf3-7150-4305-90b5-0862b0212419",
      "85907d57-b1af-4c90-bd32-5226adf0c9d4",
      "81be6760-b857-41a3-8243-8c6102542cf1"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522674599,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "454cbfa8-701e-420f-b33d-5484f2b82090",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550710620000,
    "parent_id": "44b9891c-fe65-4aa6-8ac6-b623709b7c02",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Using std::move to reduce complexity from O(n) to O(1)"
        ]
      ]
    },
    "type": "page",
    "version": 18,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522674593,
        "id": "bcaa7456-4161-4750-ac93-ae8768650a7e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522674593,
        "parent_id": "454cbfa8-701e-420f-b33d-5484f2b82090",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "C++11 introduced core language and standard library support for "
            ],
            [
              "moving",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " an object. The idea is that when an object "
            ],
            [
              "o",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " is a temporary and one wants a logical copy, then its safe to just pilfer "
            ],
            [
              "o",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              "’s resources, such as a dynamically allocated buffer, leaving "
            ],
            [
              "o",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " logically empty but still destructible and copyable."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "C++11 introduced core language and standard library support for "
          },
          {
            "Text": "moving",
            "AttrFlags": 1
          },
          {
            "Text": " an object. The idea is that when an object "
          },
          {
            "Text": "o",
            "AttrFlags": 4
          },
          {
            "Text": " is a temporary and one wants a logical copy, then its safe to just pilfer "
          },
          {
            "Text": "o",
            "AttrFlags": 4
          },
          {
            "Text": "’s resources, such as a dynamically allocated buffer, leaving "
          },
          {
            "Text": "o",
            "AttrFlags": 4
          },
          {
            "Text": " logically empty but still destructible and copyable."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522674594,
        "id": "da358581-cb28-4315-a94a-2f603c398847",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522674594,
        "parent_id": "454cbfa8-701e-420f-b33d-5484f2b82090",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The core language support is mainly"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The core language support is mainly"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522674594,
        "id": "6f522f92-2234-457b-b764-adbac9dfa295",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522674594,
        "parent_id": "454cbfa8-701e-420f-b33d-5484f2b82090",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "the "
            ],
            [
              "rvalue reference",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " type builder "
            ],
            [
              "\u0026\u0026",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", e.g., "
            ],
            [
              "std::string\u0026\u0026",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is an rvalue reference to a "
            ],
            [
              "std::string",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", indicating that that referred to object is a temporary whose resources can just be pilfered (i.e. moved)"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "the "
          },
          {
            "Text": "rvalue reference",
            "AttrFlags": 1
          },
          {
            "Text": " type builder "
          },
          {
            "Text": "\u0026\u0026",
            "AttrFlags": 2
          },
          {
            "Text": ", e.g., "
          },
          {
            "Text": "std::string\u0026\u0026",
            "AttrFlags": 2
          },
          {
            "Text": " is an rvalue reference to a "
          },
          {
            "Text": "std::string",
            "AttrFlags": 2
          },
          {
            "Text": ", indicating that that referred to object is a temporary whose resources can just be pilfered (i.e. moved)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522674594,
        "id": "644c608c-af68-474c-a822-2dd2bdb3ad3c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522674594,
        "parent_id": "454cbfa8-701e-420f-b33d-5484f2b82090",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "special support for a "
            ],
            [
              "move constructor",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "T( T\u0026\u0026 )",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", which is supposed to efficiently move resources from the specified other object, instead of actually copying those resources, and"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "special support for a "
          },
          {
            "Text": "move constructor",
            "AttrFlags": 1
          },
          {
            "Text": " "
          },
          {
            "Text": "T( T\u0026\u0026 )",
            "AttrFlags": 2
          },
          {
            "Text": ", which is supposed to efficiently move resources from the specified other object, instead of actually copying those resources, and"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522674595,
        "id": "2e110ce1-bbcb-45b1-912b-0cad34e8fa26",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522674595,
        "parent_id": "454cbfa8-701e-420f-b33d-5484f2b82090",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "special support for a "
            ],
            [
              "move assignment operator",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "auto operator=(T\u0026\u0026) -\u003e T\u0026",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", which also is supposed to move from the source."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "special support for a "
          },
          {
            "Text": "move assignment operator",
            "AttrFlags": 1
          },
          {
            "Text": " "
          },
          {
            "Text": "auto operator=(T\u0026\u0026) -\u003e T\u0026",
            "AttrFlags": 2
          },
          {
            "Text": ", which also is supposed to move from the source."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522674595,
        "id": "72467dcf-5c14-48ee-ba77-a3068754905a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522674595,
        "parent_id": "454cbfa8-701e-420f-b33d-5484f2b82090",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The standard library support is mainly the "
            ],
            [
              "std::move",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " function template from the "
            ],
            [
              "\u003cutility\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " header. This function produces an rvalue reference to the specified object, indicating that it can be moved from, just as if it were a temporary."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The standard library support is mainly the "
          },
          {
            "Text": "std::move",
            "AttrFlags": 2
          },
          {
            "Text": " function template from the "
          },
          {
            "Text": "\u003cutility\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " header. This function produces an rvalue reference to the specified object, indicating that it can be moved from, just as if it were a temporary."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522674595,
        "id": "1cb2af0e-ac4e-4d22-b47f-cd995717daad",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522674595,
        "parent_id": "454cbfa8-701e-420f-b33d-5484f2b82090",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For a container actual copying is typically of O("
            ],
            [
              "n",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ") complexity, where "
            ],
            [
              "n",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " is the number of items in the container, while moving is O(1), constant time. And for an algorithm that logically copies that container "
            ],
            [
              "n",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " times, this can reduce the complexity from the usually impractical O("
            ],
            [
              "n",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              "²) to just linear O("
            ],
            [
              "n",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ")."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For a container actual copying is typically of O("
          },
          {
            "Text": "n",
            "AttrFlags": 4
          },
          {
            "Text": ") complexity, where "
          },
          {
            "Text": "n",
            "AttrFlags": 4
          },
          {
            "Text": " is the number of items in the container, while moving is O(1), constant time. And for an algorithm that logically copies that container "
          },
          {
            "Text": "n",
            "AttrFlags": 4
          },
          {
            "Text": " times, this can reduce the complexity from the usually impractical O("
          },
          {
            "Text": "n",
            "AttrFlags": 4
          },
          {
            "Text": "²) to just linear O("
          },
          {
            "Text": "n",
            "AttrFlags": 4
          },
          {
            "Text": ")."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522674596,
        "id": "59c55fb6-3ff2-46dc-8be3-715f12f6eed0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522674596,
        "parent_id": "454cbfa8-701e-420f-b33d-5484f2b82090",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In his article "
            ],
            [
              "“Containers That Never Change” in Dr. Dobbs Journal in September 19 2013",
              [
                [
                  "a",
                  "http://www.drdobbs.com/cpp/containters-that-never-change/240161543"
                ]
              ]
            ],
            [
              ", Andrew Koenig presented an interesting example of algorithmic inefficiency when using a style of programming where variables are immutable after initialization. With this style loops are generally expressed using recursion. And for some algorithms such as generating a Collatz sequence, the recursion requires logically copying a container:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In his article "
          },
          {
            "Text": "“Containers That Never Change” in Dr. Dobbs Journal in September 19 2013",
            "Link": "http://www.drdobbs.com/cpp/containters-that-never-change/240161543"
          },
          {
            "Text": ", Andrew Koenig presented an interesting example of algorithmic inefficiency when using a style of programming where variables are immutable after initialization. With this style loops are generally expressed using recursion. And for some algorithms such as generating a Collatz sequence, the recursion requires logically copying a container:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522674596,
        "id": "6aeb59cb-6a07-4ea2-b3bf-e3cb05be2933",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522674596,
        "parent_id": "454cbfa8-701e-420f-b33d-5484f2b82090",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// Based on an example by Andrew Koenig in his Dr. Dobbs Journal article\n// “Containers That Never Change” September 19, 2013, available at\n// \u003curl: http://www.drdobbs.com/cpp/containters-that-never-change/240161543\u003e\n\n// Includes here, e.g. \u003cvector\u003e\n\nnamespace my {\n    template\u003c class Item \u003e\n    using Vector_ = /* E.g. std::vector\u003cItem\u003e */;\n\n    auto concat( Vector_\u003cint\u003e const\u0026 v, int const x )\n        -\u003e Vector_\u003cint\u003e\n    {\n        auto result{ v };\n        result.push_back( x );\n        return result;\n    }\n\n    auto collatz_aux( int const n, Vector_\u003cint\u003e const\u0026 result )\n        -\u003e Vector_\u003cint\u003e\n    {\n        if( n == 1 )\n        {\n            return result;\n        }\n        auto const new_result = concat( result, n );\n        if( n % 2 == 0 )\n        {\n            return collatz_aux( n/2, new_result );\n        }\n        else\n        {\n            return collatz_aux( 3*n + 1, new_result );\n        }\n    }\n\n    auto collatz( int const n )\n        -\u003e Vector_\u003cint\u003e\n    {\n        assert( n != 0 );\n        return collatz_aux( n, Vector_\u003cint\u003e() );\n    }\n}  // namespace my\n\n#include \u003ciostream\u003e\nusing namespace std;\nauto main() -\u003e int\n{\n    for( int const x : my::collatz( 42 ) )\n    {\n        cout \u003c\u003c x \u003c\u003c ' ';\n    }\n    cout \u003c\u003c '\\n';\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// Based on an example by Andrew Koenig in his Dr. Dobbs Journal article\n// “Containers That Never Change” September 19, 2013, available at\n// \u003curl: http://www.drdobbs.com/cpp/containters-that-never-change/240161543\u003e\n\n// Includes here, e.g. \u003cvector\u003e\n\nnamespace my {\n    template\u003c class Item \u003e\n    using Vector_ = /* E.g. std::vector\u003cItem\u003e */;\n\n    auto concat( Vector_\u003cint\u003e const\u0026 v, int const x )\n        -\u003e Vector_\u003cint\u003e\n    {\n        auto result{ v };\n        result.push_back( x );\n        return result;\n    }\n\n    auto collatz_aux( int const n, Vector_\u003cint\u003e const\u0026 result )\n        -\u003e Vector_\u003cint\u003e\n    {\n        if( n == 1 )\n        {\n            return result;\n        }\n        auto const new_result = concat( result, n );\n        if( n % 2 == 0 )\n        {\n            return collatz_aux( n/2, new_result );\n        }\n        else\n        {\n            return collatz_aux( 3*n + 1, new_result );\n        }\n    }\n\n    auto collatz( int const n )\n        -\u003e Vector_\u003cint\u003e\n    {\n        assert( n != 0 );\n        return collatz_aux( n, Vector_\u003cint\u003e() );\n    }\n}  // namespace my\n\n#include \u003ciostream\u003e\nusing namespace std;\nauto main() -\u003e int\n{\n    for( int const x : my::collatz( 42 ) )\n    {\n        cout \u003c\u003c x \u003c\u003c ' ';\n    }\n    cout \u003c\u003c '\\n';\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522674596,
        "id": "b046f3b6-bf19-458d-a1a7-9cc627f6fcff",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522674596,
        "parent_id": "454cbfa8-701e-420f-b33d-5484f2b82090",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Output:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Output:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522674596,
        "id": "755659cb-905a-43c0-9b47-3ca7ad20e170",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522674596,
        "parent_id": "454cbfa8-701e-420f-b33d-5484f2b82090",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "42 21 64 32 16 8 4 2"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "42 21 64 32 16 8 4 2",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522674597,
        "id": "1bcc8d68-2d39-42b0-8355-49061e488149",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522674597,
        "parent_id": "454cbfa8-701e-420f-b33d-5484f2b82090",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The number of item copy operations due to copying of the vectors is here roughly O("
            ],
            [
              "n²",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              "), since it’s the sum 1 + 2 + 3 + … "
            ],
            [
              "n",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The number of item copy operations due to copying of the vectors is here roughly O("
          },
          {
            "Text": "n²",
            "AttrFlags": 4
          },
          {
            "Text": "), since it’s the sum 1 + 2 + 3 + … "
          },
          {
            "Text": "n",
            "AttrFlags": 4
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522674597,
        "id": "02c000b7-b468-4c4b-8076-ec72786cf94c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522674597,
        "parent_id": "454cbfa8-701e-420f-b33d-5484f2b82090",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In concrete numbers, with g++ and Visual C++ compilers the above invocation of "
            ],
            [
              "collatz(42)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " resulted in a Collatz sequence of 8 items and 36 item copy operations (8*7/2 = 28, plus some) in vector copy constructor calls."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In concrete numbers, with g++ and Visual C++ compilers the above invocation of "
          },
          {
            "Text": "collatz(42)",
            "AttrFlags": 2
          },
          {
            "Text": " resulted in a Collatz sequence of 8 items and 36 item copy operations (8*7/2 = 28, plus some) in vector copy constructor calls."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522674597,
        "id": "f9909055-1b8f-4739-b61c-61271600d9e1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522674597,
        "parent_id": "454cbfa8-701e-420f-b33d-5484f2b82090",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "All",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " of these item copy operations can be removed by simply moving vectors whose values are not needed anymore. To do this it’s necessary to remove "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and reference for the vector type arguments, passing the vectors "
            ],
            [
              "by value",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ". The function returns are already automatically optimized. For the calls where vectors are passed, and not used again further on in the function, just apply "
            ],
            [
              "std::move",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to "
            ],
            [
              "move",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " those buffers rather than actually copying them:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "All",
            "AttrFlags": 4
          },
          {
            "Text": " of these item copy operations can be removed by simply moving vectors whose values are not needed anymore. To do this it’s necessary to remove "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": " and reference for the vector type arguments, passing the vectors "
          },
          {
            "Text": "by value",
            "AttrFlags": 4
          },
          {
            "Text": ". The function returns are already automatically optimized. For the calls where vectors are passed, and not used again further on in the function, just apply "
          },
          {
            "Text": "std::move",
            "AttrFlags": 2
          },
          {
            "Text": " to "
          },
          {
            "Text": "move",
            "AttrFlags": 4
          },
          {
            "Text": " those buffers rather than actually copying them:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522674597,
        "id": "cb75aa6a-5f59-47bf-ad10-04fbd417f955",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522674597,
        "parent_id": "454cbfa8-701e-420f-b33d-5484f2b82090",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "using std::move;\n\nauto concat( Vector_\u003cint\u003e v, int const x )\n    -\u003e Vector_\u003cint\u003e\n{\n    v.push_back( x );\n    // warning: moving a local object in a return statement prevents copy elision [-Wpessimizing-move]\n    // See https://stackoverflow.com/documentation/c%2b%2b/2489/copy-elision\n    // return move( v );\n    return v;\n}\n\nauto collatz_aux( int const n, Vector_\u003cint\u003e result )\n    -\u003e Vector_\u003cint\u003e\n{\n    if( n == 1 )\n    {\n        return result;\n    }\n    auto new_result = concat( move( result ), n );\n    struct result;      // Make absolutely sure no use of `result` after this.\n    if( n % 2 == 0 )\n    {\n        return collatz_aux( n/2, move( new_result ) );\n    }\n    else\n    {\n        return collatz_aux( 3*n + 1, move( new_result ) );\n    }\n}\n\nauto collatz( int const n )\n    -\u003e Vector_\u003cint\u003e\n{\n    assert( n != 0 );\n    return collatz_aux( n, Vector_\u003cint\u003e() );\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "using std::move;\n\nauto concat( Vector_\u003cint\u003e v, int const x )\n    -\u003e Vector_\u003cint\u003e\n{\n    v.push_back( x );\n    // warning: moving a local object in a return statement prevents copy elision [-Wpessimizing-move]\n    // See https://stackoverflow.com/documentation/c%2b%2b/2489/copy-elision\n    // return move( v );\n    return v;\n}\n\nauto collatz_aux( int const n, Vector_\u003cint\u003e result )\n    -\u003e Vector_\u003cint\u003e\n{\n    if( n == 1 )\n    {\n        return result;\n    }\n    auto new_result = concat( move( result ), n );\n    struct result;      // Make absolutely sure no use of `result` after this.\n    if( n % 2 == 0 )\n    {\n        return collatz_aux( n/2, move( new_result ) );\n    }\n    else\n    {\n        return collatz_aux( 3*n + 1, move( new_result ) );\n    }\n}\n\nauto collatz( int const n )\n    -\u003e Vector_\u003cint\u003e\n{\n    assert( n != 0 );\n    return collatz_aux( n, Vector_\u003cint\u003e() );\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522674597,
        "id": "e4c66eb1-814c-4195-a5aa-ef093932190e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522674597,
        "parent_id": "454cbfa8-701e-420f-b33d-5484f2b82090",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Here, with g++ and Visual C++ compilers, the number of item copy operations due to vector copy constructor invocations, was exactly 0."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Here, with g++ and Visual C++ compilers, the number of item copy operations due to vector copy constructor invocations, was exactly 0."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522674598,
        "id": "1c4b2883-b3a4-4292-bc75-340d4c16268d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522674598,
        "parent_id": "454cbfa8-701e-420f-b33d-5484f2b82090",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The algorithm is necessarily still O("
            ],
            [
              "n",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ") in the length of the Collatz sequence produced, but this is a quite dramatic improvement: O("
            ],
            [
              "n",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              "²) → O("
            ],
            [
              "n",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ")."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The algorithm is necessarily still O("
          },
          {
            "Text": "n",
            "AttrFlags": 4
          },
          {
            "Text": ") in the length of the Collatz sequence produced, but this is a quite dramatic improvement: O("
          },
          {
            "Text": "n",
            "AttrFlags": 4
          },
          {
            "Text": "²) → O("
          },
          {
            "Text": "n",
            "AttrFlags": 4
          },
          {
            "Text": ")."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522674598,
        "id": "90a8243e-214f-486a-a466-4e3db2227afb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522674598,
        "parent_id": "454cbfa8-701e-420f-b33d-5484f2b82090",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522674598,
        "id": "3a6d8007-bd76-40fc-b45b-30fe336bee82",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522674598,
        "parent_id": "454cbfa8-701e-420f-b33d-5484f2b82090",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "With some language support one could perhaps use moving and still express and enforce the immutability of a variable "
            ],
            [
              "between its initialization and final move",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ", after which any use of that variable should be an error. Alas, as of C++14 C++ does not support that. For loop-free code the no use after move can be enforced via a re-declaration of the relevant name as an incomplete "
            ],
            [
              "struct",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", as with "
            ],
            [
              "struct result;",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " above, but this is ugly and not likely to be understood by other programmers; also the diagnostics can be quite misleading."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "With some language support one could perhaps use moving and still express and enforce the immutability of a variable "
          },
          {
            "Text": "between its initialization and final move",
            "AttrFlags": 4
          },
          {
            "Text": ", after which any use of that variable should be an error. Alas, as of C++14 C++ does not support that. For loop-free code the no use after move can be enforced via a re-declaration of the relevant name as an incomplete "
          },
          {
            "Text": "struct",
            "AttrFlags": 2
          },
          {
            "Text": ", as with "
          },
          {
            "Text": "struct result;",
            "AttrFlags": 2
          },
          {
            "Text": " above, but this is ugly and not likely to be understood by other programmers; also the diagnostics can be quite misleading."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522674598,
        "id": "a118fcf3-7150-4305-90b5-0862b0212419",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522674598,
        "parent_id": "454cbfa8-701e-420f-b33d-5484f2b82090",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Summing up, the C++ language and library support for moving allows drastic improvements in algorithm complexity, but due the support’s incompleteness, at the cost of forsaking the code correctness guarantees and code clarity that "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can provide."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Summing up, the C++ language and library support for moving allows drastic improvements in algorithm complexity, but due the support’s incompleteness, at the cost of forsaking the code correctness guarantees and code clarity that "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": " can provide."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522674598,
        "id": "85907d57-b1af-4c90-bd32-5226adf0c9d4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522674598,
        "parent_id": "454cbfa8-701e-420f-b33d-5484f2b82090",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "—"
            ],
            [
              " "
            ],
            [
              "For completeness, the instrumented vector class used to measure the number of item copy operations due to copy constructor invocations:"
            ],
            [
              " "
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "—"
          },
          {
            "Text": " "
          },
          {
            "Text": "For completeness, the instrumented vector class used to measure the number of item copy operations due to copy constructor invocations:"
          },
          {
            "Text": " "
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522674599,
        "id": "81be6760-b857-41a3-8243-8c6102542cf1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522674599,
        "parent_id": "454cbfa8-701e-420f-b33d-5484f2b82090",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "template\u003c class Item \u003e\nclass Copy_tracking_vector\n{\nprivate:\n    static auto n_copy_ops()\n        -\u003e int\u0026\n    {\n        static int value;\n        return value;\n    }\n    \n    vector\u003cItem\u003e    items_;\n    \npublic:\n    static auto n() -\u003e int { return n_copy_ops(); }\n\n    void push_back( Item const\u0026 o ) { items_.push_back( o ); }\n    auto begin() const { return items_.begin(); }\n    auto end() const { return items_.end(); }\n\n    Copy_tracking_vector(){}\n    \n    Copy_tracking_vector( Copy_tracking_vector const\u0026 other )\n        : items_( other.items_ )\n    { n_copy_ops() += items_.size(); }\n\n    Copy_tracking_vector( Copy_tracking_vector\u0026\u0026 other )\n        : items_( move( other.items_ ) )\n    {}\n};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "template\u003c class Item \u003e\nclass Copy_tracking_vector\n{\nprivate:\n    static auto n_copy_ops()\n        -\u003e int\u0026\n    {\n        static int value;\n        return value;\n    }\n    \n    vector\u003cItem\u003e    items_;\n    \npublic:\n    static auto n() -\u003e int { return n_copy_ops(); }\n\n    void push_back( Item const\u0026 o ) { items_.push_back( o ); }\n    auto begin() const { return items_.begin(); }\n    auto end() const { return items_.end(); }\n\n    Copy_tracking_vector(){}\n    \n    Copy_tracking_vector( Copy_tracking_vector const\u0026 other )\n        : items_( other.items_ )\n    { n_copy_ops() += items_.size(); }\n\n    Copy_tracking_vector( Copy_tracking_vector\u0026\u0026 other )\n        : items_( move( other.items_ ) )\n    {}\n};",
        "code_language": "Plain Text"
      }
    ],
    "title": "Using std::move to reduce complexity from O(n) to O(1)",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}