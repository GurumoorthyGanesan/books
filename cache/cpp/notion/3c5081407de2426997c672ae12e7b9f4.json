{
  "ID": "3c508140-7de2-4269-97c6-72ae12e7b9f4",
  "Root": {
    "alive": true,
    "content": [
      "c44852df-e611-4a24-aa0b-acc39891e547",
      "4b4007e6-6471-4a4f-9f9e-8a78cd7be42b",
      "6a027217-55c6-4356-82f5-eca48128ac12",
      "0fcdea5b-6279-491f-94f6-279013c21c53",
      "7d90fed8-203a-4f74-ae7a-1cdfff193007",
      "80cd1c00-9d3d-45db-968b-80f3efb94ce8",
      "791594f0-50e4-456a-86ae-c490230bca22",
      "f9fc9489-4a91-472b-b8b7-a28432cd15dc",
      "9301e109-ba80-405f-a6f9-adff2ea0af96",
      "64b63566-829f-4eec-8f48-0760ad29a674",
      "a265218a-54bb-4207-8b29-cfb22a7f8692",
      "d7e1e99d-5b43-422e-9554-c91dcb962d81",
      "4b99a250-0996-4330-9c9f-4534af783b95",
      "5381fe48-abd3-443e-89d5-f9b996b2b665",
      "9e827a37-d45e-439a-a9c4-f54f8cd0ba4b",
      "93745375-4b9f-4403-bcf7-248277f5e2c2",
      "c795714a-dc75-44a0-bd8d-3a9ee33f66a7",
      "92468515-e4d1-468d-9100-a1a44da658de",
      "95ec8b0d-a3c2-4fa2-8254-14127857f085",
      "3950a6ee-c5be-4164-ad97-cd1ae9f0e119",
      "299e6d3e-2768-4f1e-949b-db25980333c8"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522313439,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "3c508140-7de2-4269-97c6-72ae12e7b9f4",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550655000000,
    "parent_id": "0b17f7b9-11d1-4229-931e-966fb51d1ba9",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "enable if all enable if any"
        ]
      ]
    },
    "type": "page",
    "version": 11,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522313433,
        "id": "c44852df-e611-4a24-aa0b-acc39891e547",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522313433,
        "parent_id": "3c508140-7de2-4269-97c6-72ae12e7b9f4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Motivational example",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Motivational example",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522313434,
        "id": "4b4007e6-6471-4a4f-9f9e-8a78cd7be42b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522313434,
        "parent_id": "3c508140-7de2-4269-97c6-72ae12e7b9f4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When you have a variadic template pack in the template parameters list, like in the following code snippet:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When you have a variadic template pack in the template parameters list, like in the following code snippet:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522313434,
        "id": "6a027217-55c6-4356-82f5-eca48128ac12",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522313434,
        "parent_id": "3c508140-7de2-4269-97c6-72ae12e7b9f4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "template\u003ctypename ...Args\u003e void func(Args \u0026\u0026...args) { //... };"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "template\u003ctypename ...Args\u003e void func(Args \u0026\u0026...args) { //... };",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522313436,
        "id": "0fcdea5b-6279-491f-94f6-279013c21c53",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522313436,
        "parent_id": "3c508140-7de2-4269-97c6-72ae12e7b9f4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The standard library (prior to C++17) offers no direct way to write "
            ],
            [
              "enable_if",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " to impose SFINAE constraints on "
            ],
            [
              "all of the parameters",
              [
                [
                  "b"
                ],
                [
                  "i"
                ]
              ]
            ],
            [
              " in "
            ],
            [
              "Args",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "any of the parameters",
              [
                [
                  "b"
                ],
                [
                  "i"
                ]
              ]
            ],
            [
              " in "
            ],
            [
              "Args",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". C++17 offers "
            ],
            [
              "std::conjunction",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://en.cppreference.com/w/cpp/types/conjunction"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "std::disjunction",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://en.cppreference.com/w/cpp/types/disjunction"
                ]
              ]
            ],
            [
              " which solve this problem. For example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The standard library (prior to C++17) offers no direct way to write "
          },
          {
            "Text": "enable_if",
            "AttrFlags": 1
          },
          {
            "Text": " to impose SFINAE constraints on "
          },
          {
            "Text": "all of the parameters",
            "AttrFlags": 5
          },
          {
            "Text": " in "
          },
          {
            "Text": "Args",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "any of the parameters",
            "AttrFlags": 5
          },
          {
            "Text": " in "
          },
          {
            "Text": "Args",
            "AttrFlags": 2
          },
          {
            "Text": ". C++17 offers "
          },
          {
            "Text": "std::conjunction",
            "AttrFlags": 2,
            "Link": "http://en.cppreference.com/w/cpp/types/conjunction"
          },
          {
            "Text": " and "
          },
          {
            "Text": "std::disjunction",
            "AttrFlags": 2,
            "Link": "http://en.cppreference.com/w/cpp/types/disjunction"
          },
          {
            "Text": " which solve this problem. For example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522313436,
        "id": "7d90fed8-203a-4f74-ae7a-1cdfff193007",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522313436,
        "parent_id": "3c508140-7de2-4269-97c6-72ae12e7b9f4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "/// C++17: SFINAE constraints on all of the parameters in Args.\ntemplate\u003ctypename ...Args,\n         std::enable_if_t\u003cstd::conjunction_v\u003ccustom_conditions_v\u003cArgs\u003e...\u003e\u003e* = nullptr\u003e\nvoid func(Args \u0026\u0026...args) { //... };\n\n/// C++17: SFINAE constraints on any of the parameters in Args.\ntemplate\u003ctypename ...Args,\n         std::enable_if_t\u003cstd::disjunction_v\u003ccustom_conditions_v\u003cArgs\u003e...\u003e\u003e* = nullptr\u003e\nvoid func(Args \u0026\u0026...args) { //... };"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "/// C++17: SFINAE constraints on all of the parameters in Args.\ntemplate\u003ctypename ...Args,\n         std::enable_if_t\u003cstd::conjunction_v\u003ccustom_conditions_v\u003cArgs\u003e...\u003e\u003e* = nullptr\u003e\nvoid func(Args \u0026\u0026...args) { //... };\n\n/// C++17: SFINAE constraints on any of the parameters in Args.\ntemplate\u003ctypename ...Args,\n         std::enable_if_t\u003cstd::disjunction_v\u003ccustom_conditions_v\u003cArgs\u003e...\u003e\u003e* = nullptr\u003e\nvoid func(Args \u0026\u0026...args) { //... };",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522313437,
        "id": "80cd1c00-9d3d-45db-968b-80f3efb94ce8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522313437,
        "parent_id": "3c508140-7de2-4269-97c6-72ae12e7b9f4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If you do not have C++17 available, there are several solutions to achieve these. One of them is to use a base-case class and "
            ],
            [
              "partial specializations",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", as demonstrated in answers of this "
            ],
            [
              "question",
              [
                [
                  "a",
                  "http://stackoverflow.com/questions/26421104/how-do-i-enable-if-a-class-with-variadic-template-arguments"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If you do not have C++17 available, there are several solutions to achieve these. One of them is to use a base-case class and "
          },
          {
            "Text": "partial specializations",
            "AttrFlags": 1
          },
          {
            "Text": ", as demonstrated in answers of this "
          },
          {
            "Text": "question",
            "Link": "http://stackoverflow.com/questions/26421104/how-do-i-enable-if-a-class-with-variadic-template-arguments"
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522313437,
        "id": "791594f0-50e4-456a-86ae-c490230bca22",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522313437,
        "parent_id": "3c508140-7de2-4269-97c6-72ae12e7b9f4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Alternatively, one may also implement by hand the behavior of "
            ],
            [
              "std::conjunction",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "std::disjunction",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in a rather straight-forward way. In the following example I’ll demonstrate the implementations and combine them with "
            ],
            [
              "std::enable_if",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to produce two alias: "
            ],
            [
              "enable_if_all",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "enable_if_any",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", which do exactly what they are supposed to semantically. This may provide a more scalable solution."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Alternatively, one may also implement by hand the behavior of "
          },
          {
            "Text": "std::conjunction",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "std::disjunction",
            "AttrFlags": 2
          },
          {
            "Text": " in a rather straight-forward way. In the following example I’ll demonstrate the implementations and combine them with "
          },
          {
            "Text": "std::enable_if",
            "AttrFlags": 2
          },
          {
            "Text": " to produce two alias: "
          },
          {
            "Text": "enable_if_all",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "enable_if_any",
            "AttrFlags": 2
          },
          {
            "Text": ", which do exactly what they are supposed to semantically. This may provide a more scalable solution."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522313437,
        "id": "f9fc9489-4a91-472b-b8b7-a28432cd15dc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522313437,
        "parent_id": "3c508140-7de2-4269-97c6-72ae12e7b9f4",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522313438,
        "id": "9301e109-ba80-405f-a6f9-adff2ea0af96",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522313438,
        "parent_id": "3c508140-7de2-4269-97c6-72ae12e7b9f4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Implementation of",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "enable_if_all",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "and",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "enable_if_any",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Implementation of",
            "AttrFlags": 1
          },
          {
            "Text": " "
          },
          {
            "Text": "enable_if_all",
            "AttrFlags": 2
          },
          {
            "Text": " "
          },
          {
            "Text": "and",
            "AttrFlags": 1
          },
          {
            "Text": " "
          },
          {
            "Text": "enable_if_any",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522313438,
        "id": "64b63566-829f-4eec-8f48-0760ad29a674",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522313438,
        "parent_id": "3c508140-7de2-4269-97c6-72ae12e7b9f4",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522313438,
        "id": "a265218a-54bb-4207-8b29-cfb22a7f8692",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522313438,
        "parent_id": "3c508140-7de2-4269-97c6-72ae12e7b9f4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "First let’s emulate "
            ],
            [
              "std::conjunction",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "std::disjunction",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " using customized "
            ],
            [
              "seq_and",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "seq_or",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " respectively:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "First let’s emulate "
          },
          {
            "Text": "std::conjunction",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "std::disjunction",
            "AttrFlags": 2
          },
          {
            "Text": " using customized "
          },
          {
            "Text": "seq_and",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "seq_or",
            "AttrFlags": 2
          },
          {
            "Text": " respectively:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522313438,
        "id": "d7e1e99d-5b43-422e-9554-c91dcb962d81",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522313438,
        "parent_id": "3c508140-7de2-4269-97c6-72ae12e7b9f4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "/// Helper for prior to C++14.\ntemplate\u003cbool B, class T, class F \u003e\nusing conditional_t = typename std::conditional\u003cB,T,F\u003e::type;\n\n/// Emulate C++17 std::conjunction.\ntemplate\u003cbool...\u003e struct seq_or: std::false_type {};\ntemplate\u003cbool...\u003e struct seq_and: std::true_type {};\n\ntemplate\u003cbool B1, bool... Bs\u003e\nstruct seq_or\u003cB1,Bs...\u003e: \n  conditional_t\u003cB1,std::true_type,seq_or\u003cBs...\u003e\u003e {};\n\ntemplate\u003cbool B1, bool... Bs\u003e\nstruct seq_and\u003cB1,Bs...\u003e:\n  conditional_t\u003cB1,seq_and\u003cBs...\u003e,std::false_type\u003e {};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "/// Helper for prior to C++14.\ntemplate\u003cbool B, class T, class F \u003e\nusing conditional_t = typename std::conditional\u003cB,T,F\u003e::type;\n\n/// Emulate C++17 std::conjunction.\ntemplate\u003cbool...\u003e struct seq_or: std::false_type {};\ntemplate\u003cbool...\u003e struct seq_and: std::true_type {};\n\ntemplate\u003cbool B1, bool... Bs\u003e\nstruct seq_or\u003cB1,Bs...\u003e: \n  conditional_t\u003cB1,std::true_type,seq_or\u003cBs...\u003e\u003e {};\n\ntemplate\u003cbool B1, bool... Bs\u003e\nstruct seq_and\u003cB1,Bs...\u003e:\n  conditional_t\u003cB1,seq_and\u003cBs...\u003e,std::false_type\u003e {};",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522313438,
        "id": "4b99a250-0996-4330-9c9f-4534af783b95",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522313438,
        "parent_id": "3c508140-7de2-4269-97c6-72ae12e7b9f4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Then the implementation is quite straight-forward:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Then the implementation is quite straight-forward:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522313438,
        "id": "5381fe48-abd3-443e-89d5-f9b996b2b665",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522313438,
        "parent_id": "3c508140-7de2-4269-97c6-72ae12e7b9f4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "template\u003cbool... Bs\u003e\nusing enable_if_any = std::enable_if\u003cseq_or\u003cBs...\u003e::value\u003e;\n\ntemplate\u003cbool... Bs\u003e\nusing enable_if_all = std::enable_if\u003cseq_and\u003cBs...\u003e::value\u003e;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "template\u003cbool... Bs\u003e\nusing enable_if_any = std::enable_if\u003cseq_or\u003cBs...\u003e::value\u003e;\n\ntemplate\u003cbool... Bs\u003e\nusing enable_if_all = std::enable_if\u003cseq_and\u003cBs...\u003e::value\u003e;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522313439,
        "id": "9e827a37-d45e-439a-a9c4-f54f8cd0ba4b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522313439,
        "parent_id": "3c508140-7de2-4269-97c6-72ae12e7b9f4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Eventually some helpers:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Eventually some helpers:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522313439,
        "id": "93745375-4b9f-4403-bcf7-248277f5e2c2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522313439,
        "parent_id": "3c508140-7de2-4269-97c6-72ae12e7b9f4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "template\u003cbool... Bs\u003e\nusing enable_if_any_t = typename enable_if_any\u003cBs...\u003e::type;\n\ntemplate\u003cbool... Bs\u003e\nusing enable_if_all_t = typename enable_if_all\u003cBs...\u003e::type;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "template\u003cbool... Bs\u003e\nusing enable_if_any_t = typename enable_if_any\u003cBs...\u003e::type;\n\ntemplate\u003cbool... Bs\u003e\nusing enable_if_all_t = typename enable_if_all\u003cBs...\u003e::type;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522313439,
        "id": "c795714a-dc75-44a0-bd8d-3a9ee33f66a7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522313439,
        "parent_id": "3c508140-7de2-4269-97c6-72ae12e7b9f4",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522313439,
        "id": "92468515-e4d1-468d-9100-a1a44da658de",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522313439,
        "parent_id": "3c508140-7de2-4269-97c6-72ae12e7b9f4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Usage",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Usage",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522313439,
        "id": "95ec8b0d-a3c2-4fa2-8254-14127857f085",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522313439,
        "parent_id": "3c508140-7de2-4269-97c6-72ae12e7b9f4",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522313439,
        "id": "3950a6ee-c5be-4164-ad97-cd1ae9f0e119",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522313439,
        "parent_id": "3c508140-7de2-4269-97c6-72ae12e7b9f4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The usage is also straight-forward:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The usage is also straight-forward:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522313439,
        "id": "299e6d3e-2768-4f1e-949b-db25980333c8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522313439,
        "parent_id": "3c508140-7de2-4269-97c6-72ae12e7b9f4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "/// SFINAE constraints on all of the parameters in Args.\ntemplate\u003ctypename ...Args,\n         enable_if_all_t\u003ccustom_conditions_v\u003cArgs\u003e...\u003e* = nullptr\u003e\nvoid func(Args \u0026\u0026...args) { //... };\n\n/// SFINAE constraints on any of the parameters in Args.\ntemplate\u003ctypename ...Args,\n         enable_if_any_t\u003ccustom_conditions_v\u003cArgs\u003e...\u003e* = nullptr\u003e\nvoid func(Args \u0026\u0026...args) { //... };"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "/// SFINAE constraints on all of the parameters in Args.\ntemplate\u003ctypename ...Args,\n         enable_if_all_t\u003ccustom_conditions_v\u003cArgs\u003e...\u003e* = nullptr\u003e\nvoid func(Args \u0026\u0026...args) { //... };\n\n/// SFINAE constraints on any of the parameters in Args.\ntemplate\u003ctypename ...Args,\n         enable_if_any_t\u003ccustom_conditions_v\u003cArgs\u003e...\u003e* = nullptr\u003e\nvoid func(Args \u0026\u0026...args) { //... };",
        "code_language": "Plain Text"
      }
    ],
    "title": "enable if all enable if any",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}