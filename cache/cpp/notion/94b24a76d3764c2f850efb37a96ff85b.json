{
  "ID": "94b24a76-d376-4c2f-850e-fb37a96ff85b",
  "Root": {
    "alive": true,
    "content": [
      "67e2ad49-d170-48d7-9d82-e9399cbd8a74",
      "95423d1b-e07f-422f-aed5-aff320857592",
      "d1b83f89-3b4b-48f6-8db3-475a934610df",
      "983c8267-bcb3-4aaa-ba3a-17c7ef577cc1",
      "db026a5d-e379-4795-a692-de12b9e884d8",
      "c48dc399-0545-43cd-b265-da390dbbb439",
      "beaaea0c-8f73-4ea6-8a68-2921de793199",
      "b762d3e9-a0f5-4910-8484-16d30abc2674",
      "2d985894-cafb-4756-9683-fbbc25950117",
      "6db9b47a-911f-495c-8ac6-2ca031762be8",
      "a722d905-f157-4975-b87c-b166b58e77f8",
      "a2e407b7-6413-4a0c-a4b6-de622751b422",
      "64f2ae63-5d1f-4bb0-9e04-53b942c2ebcf",
      "ebaf995d-94ed-400d-b165-2f813d6e3ade",
      "4a79f699-181f-4472-8b90-eab42ccb1de8",
      "881ebbf9-87f6-4c91-9631-f02cc62d5117",
      "30470d95-49ea-40d2-93e3-4286c55409c6",
      "121a104d-a765-4217-ab2c-d43e2ff4c785",
      "cc808a67-8a50-4bcb-808d-c01d8fb1fcf5",
      "9dda801d-0086-4985-bbe2-a67a9687a206",
      "64e18be1-4c22-46b3-84c4-874f62b38908",
      "e6051480-7e82-4708-96c2-89eaf3874453",
      "79dd9a4a-d90d-463e-91f1-95109d495318"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522054449,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "94b24a76-d376-4c2f-850e-fb37a96ff85b",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550655660000,
    "parent_id": "2be9c7d5-be12-439a-8968-ad057c67187a",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Arithmetic operators"
        ]
      ]
    },
    "type": "page",
    "version": 10,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522054442,
        "id": "67e2ad49-d170-48d7-9d82-e9399cbd8a74",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522054442,
        "parent_id": "94b24a76-d376-4c2f-850e-fb37a96ff85b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You can overload all basic arithmetic operators:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You can overload all basic arithmetic operators:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522054443,
        "id": "95423d1b-e07f-422f-aed5-aff320857592",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522054443,
        "parent_id": "94b24a76-d376-4c2f-850e-fb37a96ff85b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "\\+",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "+=",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "\\+",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "+=",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522054444,
        "id": "d1b83f89-3b4b-48f6-8db3-475a934610df",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522054444,
        "parent_id": "94b24a76-d376-4c2f-850e-fb37a96ff85b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "\\-",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "-=",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "\\-",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "-=",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522054444,
        "id": "983c8267-bcb3-4aaa-ba3a-17c7ef577cc1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522054444,
        "parent_id": "94b24a76-d376-4c2f-850e-fb37a96ff85b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "\\*",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "*=",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "\\*",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "*=",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522054445,
        "id": "db026a5d-e379-4795-a692-de12b9e884d8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522054445,
        "parent_id": "94b24a76-d376-4c2f-850e-fb37a96ff85b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "/",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "/=",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "/",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "/=",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522054445,
        "id": "c48dc399-0545-43cd-b265-da390dbbb439",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522054445,
        "parent_id": "94b24a76-d376-4c2f-850e-fb37a96ff85b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "\u0026",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "\u0026=",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "\u0026",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "\u0026=",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522054445,
        "id": "beaaea0c-8f73-4ea6-8a68-2921de793199",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522054445,
        "parent_id": "94b24a76-d376-4c2f-850e-fb37a96ff85b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "|",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "|=",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "|",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "|=",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522054446,
        "id": "b762d3e9-a0f5-4910-8484-16d30abc2674",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522054446,
        "parent_id": "94b24a76-d376-4c2f-850e-fb37a96ff85b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "^",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "^=",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "^",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "^=",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522054446,
        "id": "2d985894-cafb-4756-9683-fbbc25950117",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522054446,
        "parent_id": "94b24a76-d376-4c2f-850e-fb37a96ff85b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "\u003e\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "\u003e\u003e=",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "\u003e\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "\u003e\u003e=",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522054446,
        "id": "6db9b47a-911f-495c-8ac6-2ca031762be8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522054446,
        "parent_id": "94b24a76-d376-4c2f-850e-fb37a96ff85b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "\u003c\u003c",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "\u003c\u003c=",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "\u003c\u003c",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "\u003c\u003c=",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522054446,
        "id": "a722d905-f157-4975-b87c-b166b58e77f8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522054446,
        "parent_id": "94b24a76-d376-4c2f-850e-fb37a96ff85b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Overloading for all operators is the same. Scroll down for explanation"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Overloading for all operators is the same. Scroll down for explanation"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522054447,
        "id": "a2e407b7-6413-4a0c-a4b6-de622751b422",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522054447,
        "parent_id": "94b24a76-d376-4c2f-850e-fb37a96ff85b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Overloading outside of "
            ],
            [
              "class",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "/"
            ],
            [
              "struct",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Overloading outside of "
          },
          {
            "Text": "class",
            "AttrFlags": 2
          },
          {
            "Text": "/"
          },
          {
            "Text": "struct",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522054447,
        "id": "64f2ae63-5d1f-4bb0-9e04-53b942c2ebcf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522054447,
        "parent_id": "94b24a76-d376-4c2f-850e-fb37a96ff85b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "//operator+ should be implemented in terms of operator+=\nT operator+(T lhs, const T\u0026 rhs)\n{\n    lhs += rhs;\n    return lhs;\n}\n\nT\u0026 operator+=(T\u0026 lhs, const T\u0026 rhs)\n{\n    //Perform addition\n    return lhs;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "//operator+ should be implemented in terms of operator+=\nT operator+(T lhs, const T\u0026 rhs)\n{\n    lhs += rhs;\n    return lhs;\n}\n\nT\u0026 operator+=(T\u0026 lhs, const T\u0026 rhs)\n{\n    //Perform addition\n    return lhs;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522054447,
        "id": "ebaf995d-94ed-400d-b165-2f813d6e3ade",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522054447,
        "parent_id": "94b24a76-d376-4c2f-850e-fb37a96ff85b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Overloading inside of "
            ],
            [
              "class",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "/"
            ],
            [
              "struct",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Overloading inside of "
          },
          {
            "Text": "class",
            "AttrFlags": 2
          },
          {
            "Text": "/"
          },
          {
            "Text": "struct",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522054447,
        "id": "4a79f699-181f-4472-8b90-eab42ccb1de8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522054447,
        "parent_id": "94b24a76-d376-4c2f-850e-fb37a96ff85b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "//operator+ should be implemented in terms of operator+=\nT operator+(const T\u0026 rhs)\n{\n    *this += rhs;\n    return *this;\n}\n\nT\u0026 operator+=(const T\u0026 rhs)\n{\n    //Perform addition\n    return *this;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "//operator+ should be implemented in terms of operator+=\nT operator+(const T\u0026 rhs)\n{\n    *this += rhs;\n    return *this;\n}\n\nT\u0026 operator+=(const T\u0026 rhs)\n{\n    //Perform addition\n    return *this;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522054447,
        "id": "881ebbf9-87f6-4c91-9631-f02cc62d5117",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522054447,
        "parent_id": "94b24a76-d376-4c2f-850e-fb37a96ff85b",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522054448,
        "id": "30470d95-49ea-40d2-93e3-4286c55409c6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522054448,
        "parent_id": "94b24a76-d376-4c2f-850e-fb37a96ff85b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note: "
            ],
            [
              "operator+",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " should return by non-const value, as returning a reference wouldn’t make sense (it returns a new object) nor would returning a "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " value (you should generally not return by "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "). The first argument is passed by value, why? Because"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note: "
          },
          {
            "Text": "operator+",
            "AttrFlags": 2
          },
          {
            "Text": " should return by non-const value, as returning a reference wouldn’t make sense (it returns a new object) nor would returning a "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": " value (you should generally not return by "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": "). The first argument is passed by value, why? Because"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522054448,
        "id": "121a104d-a765-4217-ab2c-d43e2ff4c785",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522054448,
        "parent_id": "94b24a76-d376-4c2f-850e-fb37a96ff85b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You can’t modify the original object ("
            ],
            [
              "Object foobar = foo + bar;",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " shouldn’t modify "
            ],
            [
              "foo",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " after all, it wouldn’t make sense)"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "You can’t modify the original object ("
          },
          {
            "Text": "Object foobar = foo + bar;",
            "AttrFlags": 2
          },
          {
            "Text": " shouldn’t modify "
          },
          {
            "Text": "foo",
            "AttrFlags": 2
          },
          {
            "Text": " after all, it wouldn’t make sense)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522054448,
        "id": "cc808a67-8a50-4bcb-808d-c01d8fb1fcf5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522054448,
        "parent_id": "94b24a76-d376-4c2f-850e-fb37a96ff85b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You can’t make it "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", because you will have to be able to modify the object (because "
            ],
            [
              "operator+",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is implemented in terms of "
            ],
            [
              "operator+=",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", which modifies the object)"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "You can’t make it "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": ", because you will have to be able to modify the object (because "
          },
          {
            "Text": "operator+",
            "AttrFlags": 2
          },
          {
            "Text": " is implemented in terms of "
          },
          {
            "Text": "operator+=",
            "AttrFlags": 2
          },
          {
            "Text": ", which modifies the object)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522054449,
        "id": "9dda801d-0086-4985-bbe2-a67a9687a206",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522054449,
        "parent_id": "94b24a76-d376-4c2f-850e-fb37a96ff85b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Passing by "
            ],
            [
              "const\u0026",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " would be an option, but then you will have to make a temporary copy of the passed object. By passing by value, the compiler does it for you."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Passing by "
          },
          {
            "Text": "const\u0026",
            "AttrFlags": 2
          },
          {
            "Text": " would be an option, but then you will have to make a temporary copy of the passed object. By passing by value, the compiler does it for you."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522054449,
        "id": "64e18be1-4c22-46b3-84c4-874f62b38908",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522054449,
        "parent_id": "94b24a76-d376-4c2f-850e-fb37a96ff85b",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522054449,
        "id": "e6051480-7e82-4708-96c2-89eaf3874453",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522054449,
        "parent_id": "94b24a76-d376-4c2f-850e-fb37a96ff85b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "operator+=",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " returns a reference to the itself, because it is then possible to chain them (don’t use the same variable though, that would be undefined behavior due to sequence points)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "operator+=",
            "AttrFlags": 2
          },
          {
            "Text": " returns a reference to the itself, because it is then possible to chain them (don’t use the same variable though, that would be undefined behavior due to sequence points)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522054449,
        "id": "79dd9a4a-d90d-463e-91f1-95109d495318",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522054449,
        "parent_id": "94b24a76-d376-4c2f-850e-fb37a96ff85b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The first argument is a reference (we want to modify it), but not "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", because then you wouldn’t be able to modify it. The second argument should not be modified, and so for performance reason is passed by "
            ],
            [
              "const\u0026",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (passing by const reference is faster than by value)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The first argument is a reference (we want to modify it), but not "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": ", because then you wouldn’t be able to modify it. The second argument should not be modified, and so for performance reason is passed by "
          },
          {
            "Text": "const\u0026",
            "AttrFlags": 2
          },
          {
            "Text": " (passing by const reference is faster than by value)."
          }
        ]
      }
    ],
    "title": "Arithmetic operators",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}