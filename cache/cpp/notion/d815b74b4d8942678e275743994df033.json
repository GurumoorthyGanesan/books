{
  "ID": "d815b74b-4d89-4267-8e27-5743994df033",
  "Root": {
    "alive": true,
    "content": [
      "badfea89-629d-4555-83c3-0601411d1d9e",
      "af1208bf-44c0-4ab5-a612-1388a06eb761",
      "e9785728-6724-4ba9-a432-d02020ff3a1a",
      "ae10d144-b1a9-445b-a417-cb5725ea3301"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522269717,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "d815b74b-4d89-4267-8e27-5743994df033",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552344840000,
    "parent_id": "50a27510-120b-4da0-9ecb-cf15396a0108",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Initializing a std::map or std::multimap"
        ]
      ]
    },
    "type": "page",
    "version": 17,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522269716,
        "id": "badfea89-629d-4555-83c3-0601411d1d9e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522269716,
        "parent_id": "d815b74b-4d89-4267-8e27-5743994df033",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "std::map",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "std::multimap",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " both can be initialized by providing key-value pairs separated by comma. Key-value pairs could be provided by either "
            ],
            [
              "{key, value}",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or can be explicitly created by "
            ],
            [
              "std::make_pair(key, value)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". As "
            ],
            [
              "std::map",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " does not allow duplicate keys and comma operator performs right to left, the pair on right would be overwritten with the pair with same key on the left."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "std::map",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "std::multimap",
            "AttrFlags": 2
          },
          {
            "Text": " both can be initialized by providing key-value pairs separated by comma. Key-value pairs could be provided by either "
          },
          {
            "Text": "{key, value}",
            "AttrFlags": 2
          },
          {
            "Text": " or can be explicitly created by "
          },
          {
            "Text": "std::make_pair(key, value)",
            "AttrFlags": 2
          },
          {
            "Text": ". As "
          },
          {
            "Text": "std::map",
            "AttrFlags": 2
          },
          {
            "Text": " does not allow duplicate keys and comma operator performs right to left, the pair on right would be overwritten with the pair with same key on the left."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522269716,
        "id": "af1208bf-44c0-4ab5-a612-1388a06eb761",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552344840000,
        "parent_id": "d815b74b-4d89-4267-8e27-5743994df033",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "std::multimap \u003c int, std::string \u003e mmp { std::make_pair(2, \"stackoverflow\"),\n                                     std::make_pair(1, \"docs-beta\"),\n                                     std::make_pair(2, \"stackexchange\")  };\n// 1 docs-beta\n// 2 stackoverflow\n// 2 stackexchange\n\nstd::map \u003c int, std::string \u003e mp {  std::make_pair(2, \"stackoverflow\"),\n                                std::make_pair(1, \"docs-beta\"),\n                                std::make_pair(2, \"stackexchange\")  }; \n// 1 docs-beta\n// 2 stackoverflow"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "std::multimap \u003c int, std::string \u003e mmp { std::make_pair(2, \"stackoverflow\"),\n                                     std::make_pair(1, \"docs-beta\"),\n                                     std::make_pair(2, \"stackexchange\")  };\n// 1 docs-beta\n// 2 stackoverflow\n// 2 stackexchange\n\nstd::map \u003c int, std::string \u003e mp {  std::make_pair(2, \"stackoverflow\"),\n                                std::make_pair(1, \"docs-beta\"),\n                                std::make_pair(2, \"stackexchange\")  }; \n// 1 docs-beta\n// 2 stackoverflow",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522269716,
        "id": "e9785728-6724-4ba9-a432-d02020ff3a1a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522269716,
        "parent_id": "d815b74b-4d89-4267-8e27-5743994df033",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Both could be initialized with iterator."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Both could be initialized with iterator."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522269716,
        "id": "ae10d144-b1a9-445b-a417-cb5725ea3301",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552344840000,
        "parent_id": "d815b74b-4d89-4267-8e27-5743994df033",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "// from std::map or std::multimap iterator\nstd::multimap\u003c int , int \u003e mmp{ {1, 2}, {3, 4}, {6, 5}, {8, 9}, {6, 8}, {3, 4}, \n                               {6, 7} };\n                       // {1, 2}, {3, 4}, {3, 4}, {6, 5}, {6, 8}, {6, 7}, {8, 9}\nauto it = mmp.begin();\nstd::advance(it,3); //moved cursor on first {6, 5}\nstd::map\u003c int, int \u003e mp(it, mmp.end()); // {6, 5}, {8, 9}\n\n//From std::pair array\nstd::pair\u003c int, int \u003e arr[10];\narr[0] = {1, 3};\narr[1] = {1, 5};\narr[2] = {2, 5};\narr[3] = {0, 1};\nstd::map\u003c int, int \u003e mp(arr,arr+4); //{0 , 1}, {1, 3}, {2, 5}\n\n//From std::vector of std::pair\nstd::vector\u003c std::pair\u003cint, int\u003e \u003e v{ {1, 5}, {5, 1}, {3, 6}, {3, 2} };\nstd::multimap\u003c int, int \u003e mp(v.begin(), v.end()); \n                        // {1, 5}, {3, 6}, {3, 2}, {5, 1}"
            ]
          ]
        },
        "type": "code",
        "version": 5,
        "code": "// from std::map or std::multimap iterator\nstd::multimap\u003c int , int \u003e mmp{ {1, 2}, {3, 4}, {6, 5}, {8, 9}, {6, 8}, {3, 4}, \n                               {6, 7} };\n                       // {1, 2}, {3, 4}, {3, 4}, {6, 5}, {6, 8}, {6, 7}, {8, 9}\nauto it = mmp.begin();\nstd::advance(it,3); //moved cursor on first {6, 5}\nstd::map\u003c int, int \u003e mp(it, mmp.end()); // {6, 5}, {8, 9}\n\n//From std::pair array\nstd::pair\u003c int, int \u003e arr[10];\narr[0] = {1, 3};\narr[1] = {1, 5};\narr[2] = {2, 5};\narr[3] = {0, 1};\nstd::map\u003c int, int \u003e mp(arr,arr+4); //{0 , 1}, {1, 3}, {2, 5}\n\n//From std::vector of std::pair\nstd::vector\u003c std::pair\u003cint, int\u003e \u003e v{ {1, 5}, {5, 1}, {3, 6}, {3, 2} };\nstd::multimap\u003c int, int \u003e mp(v.begin(), v.end()); \n                        // {1, 5}, {3, 6}, {3, 2}, {5, 1}",
        "code_language": "C++"
      }
    ],
    "title": "Initializing a std::map or std::multimap",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}