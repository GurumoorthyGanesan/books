{
  "ID": "13900b6f-95f4-43c8-bb6c-1aeb2f4bc2ce",
  "Root": {
    "alive": true,
    "content": [
      "454f4ab8-46d2-4316-a48f-c0ea1c3cc4fd",
      "135dada4-22d7-41b3-82df-a1721c87ae42",
      "77d918f6-382e-4a22-b483-48f5ac8fa51e",
      "97f5ef56-81e2-4c26-ad66-5d686300c89f",
      "c28670f2-1b4d-460d-b365-44b12ad2bd8e"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550525190477,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "13900b6f-95f4-43c8-bb6c-1aeb2f4bc2ce",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551689053509,
    "parent_id": "4e04587c-419b-4bb3-bcb4-efe6a43e35e9",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Empty base optimization"
        ]
      ]
    },
    "type": "page",
    "version": 4,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525190472,
        "id": "454f4ab8-46d2-4316-a48f-c0ea1c3cc4fd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525190472,
        "parent_id": "13900b6f-95f4-43c8-bb6c-1aeb2f4bc2ce",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The size of any object or member subobject is required to be at least 1 even if the type is an empty "
            ],
            [
              "class",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " type (that is, a "
            ],
            [
              "class",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "struct",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " that has no non-static data members), in order to be able to guarantee that the addresses of distinct objects of the same type are always distinct."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The size of any object or member subobject is required to be at least 1 even if the type is an empty "
          },
          {
            "Text": "class",
            "AttrFlags": 2
          },
          {
            "Text": " type (that is, a "
          },
          {
            "Text": "class",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "struct",
            "AttrFlags": 2
          },
          {
            "Text": " that has no non-static data members), in order to be able to guarantee that the addresses of distinct objects of the same type are always distinct."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525190475,
        "id": "135dada4-22d7-41b3-82df-a1721c87ae42",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525190475,
        "parent_id": "13900b6f-95f4-43c8-bb6c-1aeb2f4bc2ce",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "However, base "
            ],
            [
              "class",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " subobjects are not so constrained, and can be completely optimized out from the object layout:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "However, base "
          },
          {
            "Text": "class",
            "AttrFlags": 2
          },
          {
            "Text": " subobjects are not so constrained, and can be completely optimized out from the object layout:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525190475,
        "id": "77d918f6-382e-4a22-b483-48f5ac8fa51e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525190475,
        "parent_id": "13900b6f-95f4-43c8-bb6c-1aeb2f4bc2ce",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003ccassert\u003e\n\nstruct Base {}; // empty class\n\nstruct Derived1 : Base {\n    int i;\n};\n\nint main() {\n    // the size of any object of empty class type is at least 1\n    assert(sizeof(Base) == 1);\n\n    // empty base optimization applies\n    assert(sizeof(Derived1) == sizeof(int));\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003ccassert\u003e\n\nstruct Base {}; // empty class\n\nstruct Derived1 : Base {\n    int i;\n};\n\nint main() {\n    // the size of any object of empty class type is at least 1\n    assert(sizeof(Base) == 1);\n\n    // empty base optimization applies\n    assert(sizeof(Derived1) == sizeof(int));\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525190476,
        "id": "97f5ef56-81e2-4c26-ad66-5d686300c89f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525190476,
        "parent_id": "13900b6f-95f4-43c8-bb6c-1aeb2f4bc2ce",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Empty base optimization is commonly used by allocator-aware standard library classes ("
            ],
            [
              "std::vector",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "std::function",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "std::shared_ptr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", etc) to avoid occupying any additional storage for its allocator member if the allocator is stateless. This is achieved by storing one of the required data members (e.g., "
            ],
            [
              "begin",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "end",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", or "
            ],
            [
              "capacity",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " pointer for the "
            ],
            [
              "vector",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ")."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Empty base optimization is commonly used by allocator-aware standard library classes ("
          },
          {
            "Text": "std::vector",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "std::function",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "std::shared_ptr",
            "AttrFlags": 2
          },
          {
            "Text": ", etc) to avoid occupying any additional storage for its allocator member if the allocator is stateless. This is achieved by storing one of the required data members (e.g., "
          },
          {
            "Text": "begin",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "end",
            "AttrFlags": 2
          },
          {
            "Text": ", or "
          },
          {
            "Text": "capacity",
            "AttrFlags": 2
          },
          {
            "Text": " pointer for the "
          },
          {
            "Text": "vector",
            "AttrFlags": 2
          },
          {
            "Text": ")."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525190477,
        "id": "c28670f2-1b4d-460d-b365-44b12ad2bd8e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525190477,
        "parent_id": "13900b6f-95f4-43c8-bb6c-1aeb2f4bc2ce",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Reference: "
            ],
            [
              "cppreference",
              [
                [
                  "a",
                  "http://en.cppreference.com/w/cpp/language/ebo"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Reference: "
          },
          {
            "Text": "cppreference",
            "Link": "http://en.cppreference.com/w/cpp/language/ebo"
          }
        ]
      }
    ],
    "title": "Empty base optimization",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}