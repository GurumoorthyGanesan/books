{
  "ID": "4e7523ec-807e-469b-846d-6f0e98a9f133",
  "Root": {
    "alive": true,
    "content": [
      "c09b6015-43d8-4fd9-813e-888c13dc0fef",
      "adbaabf4-f0ae-473a-8e1e-7b0e441ab5e6",
      "705d8493-ef3d-4662-8492-aa29ae47b5e5",
      "347505fc-0ce3-4357-b29b-8cafd453b8b1",
      "31ccae39-f5c1-40ac-be6c-7008ff31064d",
      "85938624-5532-45df-b5af-d405a89d1314",
      "a6f31505-c1e6-40a6-8509-5f506e699bf2",
      "c45a7e49-dee4-4471-b0c6-ee4de1b69f5f",
      "503f49be-7c5a-4784-a791-416ccd32972c",
      "cb5074bd-7770-4664-9a94-45b2ab23e41e",
      "82be22a2-a869-4f60-837f-013a06210476",
      "ed7fe34e-b0c7-4c5f-be6b-3a3c12f24376"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550523840000,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "4e7523ec-807e-469b-846d-6f0e98a9f133",
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552295880000,
    "parent_id": "ad527dc6-d4a7-420b-9234-94d0b9bfb560",
    "parent_table": "block",
    "permissions": [
      {
        "role": "editor",
        "type": "user_permission",
        "user_id": "bb760e2d-d679-4b64-b2a9-03005b21870a"
      }
    ],
    "properties": {
      "title": [
        [
          "Floating point arithmetic"
        ]
      ]
    },
    "type": "page",
    "version": 65,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550736240000,
        "id": "c09b6015-43d8-4fd9-813e-888c13dc0fef",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550736240000,
        "parent_id": "4e7523ec-807e-469b-846d-6f0e98a9f133",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Floating point numbers are weird."
            ]
          ]
        },
        "type": "text",
        "version": 41,
        "inline_content": [
          {
            "Text": "Floating point numbers are weird."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523866581,
        "id": "adbaabf4-f0ae-473a-8e1e-7b0e441ab5e6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550736240000,
        "parent_id": "4e7523ec-807e-469b-846d-6f0e98a9f133",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The first mistake that nearly every single programmer makes is presuming that this code will work as intended:"
            ]
          ]
        },
        "type": "text",
        "version": 3,
        "inline_content": [
          {
            "Text": "The first mistake that nearly every single programmer makes is presuming that this code will work as intended:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523866583,
        "id": "705d8493-ef3d-4662-8492-aa29ae47b5e5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550738880000,
        "parent_id": "4e7523ec-807e-469b-846d-6f0e98a9f133",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "float total = 0;\nfor (float a = 0; a != 2; a += 0.01f) {\n    total += a;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 6,
        "code": "float total = 0;\nfor (float a = 0; a != 2; a += 0.01f) {\n    total += a;\n}",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523866584,
        "id": "347505fc-0ce3-4357-b29b-8cafd453b8b1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550736240000,
        "parent_id": "4e7523ec-807e-469b-846d-6f0e98a9f133",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The novice programmer assumes that this will sum up every single number in the range "
            ],
            [
              "0, 0.01, 0.02, 0.03, ..., 1.97, 1.98, 1.99",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", to yield the result "
            ],
            [
              "199",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "—the mathematically correct answer."
            ]
          ]
        },
        "type": "text",
        "version": 3,
        "inline_content": [
          {
            "Text": "The novice programmer assumes that this will sum up every single number in the range "
          },
          {
            "Text": "0, 0.01, 0.02, 0.03, ..., 1.97, 1.98, 1.99",
            "AttrFlags": 2
          },
          {
            "Text": ", to yield the result "
          },
          {
            "Text": "199",
            "AttrFlags": 2
          },
          {
            "Text": "—the mathematically correct answer."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523866584,
        "id": "31ccae39-f5c1-40ac-be6c-7008ff31064d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550736240000,
        "parent_id": "4e7523ec-807e-469b-846d-6f0e98a9f133",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Two things happen that make this untrue:"
            ]
          ]
        },
        "type": "text",
        "version": 3,
        "inline_content": [
          {
            "Text": "Two things happen that make this untrue:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523866585,
        "id": "85938624-5532-45df-b5af-d405a89d1314",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550736240000,
        "parent_id": "4e7523ec-807e-469b-846d-6f0e98a9f133",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The program as written never concludes. "
            ],
            [
              "a",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " never becomes equal to "
            ],
            [
              "2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", and the loop never terminates."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 3,
        "inline_content": [
          {
            "Text": "The program as written never concludes. "
          },
          {
            "Text": "a",
            "AttrFlags": 2
          },
          {
            "Text": " never becomes equal to "
          },
          {
            "Text": "2",
            "AttrFlags": 2
          },
          {
            "Text": ", and the loop never terminates."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523866585,
        "id": "a6f31505-c1e6-40a6-8509-5f506e699bf2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550736240000,
        "parent_id": "4e7523ec-807e-469b-846d-6f0e98a9f133",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If we rewrite the loop logic to check "
            ],
            [
              "a \u003c 2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " instead, the loop terminates, but the total ends up being something different from "
            ],
            [
              "199",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". On IEEE754-compliant machines, it will often sum up to about "
            ],
            [
              "201",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " instead."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 3,
        "inline_content": [
          {
            "Text": "If we rewrite the loop logic to check "
          },
          {
            "Text": "a \u003c 2",
            "AttrFlags": 2
          },
          {
            "Text": " instead, the loop terminates, but the total ends up being something different from "
          },
          {
            "Text": "199",
            "AttrFlags": 2
          },
          {
            "Text": ". On IEEE754-compliant machines, it will often sum up to about "
          },
          {
            "Text": "201",
            "AttrFlags": 2
          },
          {
            "Text": " instead."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523866585,
        "id": "c45a7e49-dee4-4471-b0c6-ee4de1b69f5f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550738940000,
        "parent_id": "4e7523ec-807e-469b-846d-6f0e98a9f133",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The reason that this happens is that "
            ],
            [
              "Floating Point Numbers represent approximations of their assigned values",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 6,
        "inline_content": [
          {
            "Text": "The reason that this happens is that "
          },
          {
            "Text": "Floating Point Numbers represent approximations of their assigned values",
            "AttrFlags": 1
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523866585,
        "id": "503f49be-7c5a-4784-a791-416ccd32972c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550736240000,
        "parent_id": "4e7523ec-807e-469b-846d-6f0e98a9f133",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The classical example is the following computation:"
            ]
          ]
        },
        "type": "text",
        "version": 3,
        "inline_content": [
          {
            "Text": "The classical example is the following computation:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523866586,
        "id": "cb5074bd-7770-4664-9a94-45b2ab23e41e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552295760000,
        "parent_id": "4e7523ec-807e-469b-846d-6f0e98a9f133",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "// :glot\n#include \u003ciostream\u003e\n#include \u003cstring\u003e\n\nint main(int argc, char **argv) {\n    double a = 0.1;\n    double b = 0.2;\n    double c = 0.3;\n    if (a + b == c) {\n        // This never prints on IEEE754-compliant machines\n        std::cout \u003c\u003c \"This Computer is Magic!\" \u003c\u003c std::endl; \n    } else {\n        std::cout \u003c\u003c \"This Computer is pretty normal, all things considered.\" \u003c\u003c std::endl;\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 28,
        "code": "// :glot\n#include \u003ciostream\u003e\n#include \u003cstring\u003e\n\nint main(int argc, char **argv) {\n    double a = 0.1;\n    double b = 0.2;\n    double c = 0.3;\n    if (a + b == c) {\n        // This never prints on IEEE754-compliant machines\n        std::cout \u003c\u003c \"This Computer is Magic!\" \u003c\u003c std::endl; \n    } else {\n        std::cout \u003c\u003c \"This Computer is pretty normal, all things considered.\" \u003c\u003c std::endl;\n    }\n}",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523866586,
        "id": "82be22a2-a869-4f60-837f-013a06210476",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550736240000,
        "parent_id": "4e7523ec-807e-469b-846d-6f0e98a9f133",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Though what we the programmer see is three numbers written in base10, what the compiler (and the underlying hardware) see are binary numbers. Because "
            ],
            [
              "0.1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "0.2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", and "
            ],
            [
              "0.3",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " require perfect division by "
            ],
            [
              "10",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "—which is quite easy in a base-10 system, but impossible in a base-2 system—these numbers have to be stored in imprecise formats, similar to how the number "
            ],
            [
              "1/3",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " has to be stored in the imprecise form "
            ],
            [
              "0.333333333333333...",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in base-10."
            ]
          ]
        },
        "type": "text",
        "version": 3,
        "inline_content": [
          {
            "Text": "Though what we the programmer see is three numbers written in base10, what the compiler (and the underlying hardware) see are binary numbers. Because "
          },
          {
            "Text": "0.1",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "0.2",
            "AttrFlags": 2
          },
          {
            "Text": ", and "
          },
          {
            "Text": "0.3",
            "AttrFlags": 2
          },
          {
            "Text": " require perfect division by "
          },
          {
            "Text": "10",
            "AttrFlags": 2
          },
          {
            "Text": "—which is quite easy in a base-10 system, but impossible in a base-2 system—these numbers have to be stored in imprecise formats, similar to how the number "
          },
          {
            "Text": "1/3",
            "AttrFlags": 2
          },
          {
            "Text": " has to be stored in the imprecise form "
          },
          {
            "Text": "0.333333333333333...",
            "AttrFlags": 2
          },
          {
            "Text": " in base-10."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523866586,
        "id": "ed7fe34e-b0c7-4c5f-be6b-3a3c12f24376",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552295820000,
        "parent_id": "4e7523ec-807e-469b-846d-6f0e98a9f133",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "// 64-bit floats have 53 digits of precision, including the whole-number-part.\ndouble a =     0011111110111001100110011001100110011001100110011001100110011010; // imperfect representation of 0.1\ndouble b =     0011111111001001100110011001100110011001100110011001100110011010; // imperfect representation of 0.2\ndouble c =     0011111111010011001100110011001100110011001100110011001100110011; // imperfect representation of 0.3\ndouble a + b = 0011111111010011001100110011001100110011001100110011001100110100; // Note that this is not quite equal to the \"canonical\" 0.3!"
            ]
          ]
        },
        "type": "code",
        "version": 11,
        "code": "// 64-bit floats have 53 digits of precision, including the whole-number-part.\ndouble a =     0011111110111001100110011001100110011001100110011001100110011010; // imperfect representation of 0.1\ndouble b =     0011111111001001100110011001100110011001100110011001100110011010; // imperfect representation of 0.2\ndouble c =     0011111111010011001100110011001100110011001100110011001100110011; // imperfect representation of 0.3\ndouble a + b = 0011111111010011001100110011001100110011001100110011001100110100; // Note that this is not quite equal to the \"canonical\" 0.3!",
        "code_language": "C++"
      }
    ],
    "title": "Floating point arithmetic",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}