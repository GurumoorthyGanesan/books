{
  "ID": "0722586a-e1ce-43ca-9493-a0d14f413776",
  "Root": {
    "alive": true,
    "content": [
      "c32a09e6-7ded-492d-a8cc-63c0a989212e",
      "3f521013-457e-4803-88a0-e330cf6ed77e",
      "432f7412-571e-4766-9cca-859af53b1106",
      "89be72e3-4a83-4ed8-8c19-52a0426a592d",
      "8530c59d-ee07-4c9d-81d6-640168a3f81e",
      "e58fbe15-6d63-4fae-b7a4-2ef2cfb6bae3",
      "236264ad-6182-4b45-af2b-6d7ec2e12232"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550524774159,
    "id": "0722586a-e1ce-43ca-9493-a0d14f413776",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550524774159,
    "parent_id": "cbbee582-eb1d-4f69-a297-e10ba2cd83ab",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "020 Mutexes Thread Safety"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524774156,
        "id": "c32a09e6-7ded-492d-a8cc-63c0a989212e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524774156,
        "parent_id": "0722586a-e1ce-43ca-9493-a0d14f413776",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Problems may happen when multiple threads try to access a resource. For a simple example, suppose we have a thread that adds one to a variable. It does this by first reading the variable, adding one to it, then storing it back. Suppose we initialize this variable to 1, then create two instances of this thread. After both threads finish, intuition suggests that this variable should have a value of 3. However, the below table illustrates what might go wrong:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Problems may happen when multiple threads try to access a resource. For a simple example, suppose we have a thread that adds one to a variable. It does this by first reading the variable, adding one to it, then storing it back. Suppose we initialize this variable to 1, then create two instances of this thread. After both threads finish, intuition suggests that this variable should have a value of 3. However, the below table illustrates what might go wrong:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524774158,
        "id": "3f521013-457e-4803-88a0-e330cf6ed77e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524774158,
        "parent_id": "0722586a-e1ce-43ca-9493-a0d14f413776",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "| Thread 1 | Thread 2 |"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "| Thread 1 | Thread 2 |"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524774159,
        "id": "432f7412-571e-4766-9cca-859af53b1106",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524774159,
        "parent_id": "0722586a-e1ce-43ca-9493-a0d14f413776",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "|———––|———————–|———————–| | Time Step 1 | Read 1 from variable | | | Time Step 2 | | Read 1 from variable | | Time Step 3 | Add 1 plus 1 to get 2 | | | Time Step 4 | | Add 1 plus 1 to get 2 | | Time Step 5 | Store 2 into variable | | | Time Step 6 | | Store 2 into variable |"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "|———––|———————–|———————–| | Time Step 1 | Read 1 from variable | | | Time Step 2 | | Read 1 from variable | | Time Step 3 | Add 1 plus 1 to get 2 | | | Time Step 4 | | Add 1 plus 1 to get 2 | | Time Step 5 | Store 2 into variable | | | Time Step 6 | | Store 2 into variable |"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524774159,
        "id": "89be72e3-4a83-4ed8-8c19-52a0426a592d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524774159,
        "parent_id": "0722586a-e1ce-43ca-9493-a0d14f413776",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As you can see, at the end of the operation, 2 is in the variable, instead of 3. The reason is that Thread 2 read the variable before Thread 1 was done updating it. The solution? Mutexes."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "As you can see, at the end of the operation, 2 is in the variable, instead of 3. The reason is that Thread 2 read the variable before Thread 1 was done updating it. The solution? Mutexes."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524774159,
        "id": "8530c59d-ee07-4c9d-81d6-640168a3f81e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524774159,
        "parent_id": "0722586a-e1ce-43ca-9493-a0d14f413776",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A mutex (portmanteau of "
            ],
            [
              "mut",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "ual "
            ],
            [
              "ex",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "clusion) is a resource management object designed to solve this type of problem. When a thread wants to access a resource, it “acquires” the resource’s mutex. Once it is done accessing the resource, the thread “releases” the mutex. While the mutex is acquired, all calls to acquire the mutex will not return until the mutex is released. To better understand this, think of a mutex as a waiting line at the supermarket: the threads go into line by trying to acquire the mutex and then waiting for the threads ahead of them to finish up, then using the resource, then stepping out of line by releasing the mutex. There would be complete pandemonium if everybody tried to access the resource at once."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A mutex (portmanteau of "
          },
          {
            "Text": "mut",
            "AttrFlags": 1
          },
          {
            "Text": "ual "
          },
          {
            "Text": "ex",
            "AttrFlags": 1
          },
          {
            "Text": "clusion) is a resource management object designed to solve this type of problem. When a thread wants to access a resource, it “acquires” the resource’s mutex. Once it is done accessing the resource, the thread “releases” the mutex. While the mutex is acquired, all calls to acquire the mutex will not return until the mutex is released. To better understand this, think of a mutex as a waiting line at the supermarket: the threads go into line by trying to acquire the mutex and then waiting for the threads ahead of them to finish up, then using the resource, then stepping out of line by releasing the mutex. There would be complete pandemonium if everybody tried to access the resource at once."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524774159,
        "id": "e58fbe15-6d63-4fae-b7a4-2ef2cfb6bae3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524774159,
        "parent_id": "0722586a-e1ce-43ca-9493-a0d14f413776",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "std::mutex",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is C++11’s implementation of a mutex."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "std::mutex",
            "AttrFlags": 2
          },
          {
            "Text": " is C++11’s implementation of a mutex."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524774159,
        "id": "236264ad-6182-4b45-af2b-6d7ec2e12232",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524774159,
        "parent_id": "0722586a-e1ce-43ca-9493-a0d14f413776",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003cthread\u003e\n#include \u003cmutex\u003e\n#include \u003ciostream\u003e\nusing namespace std;\n\nvoid add_1(int\u0026 i, const mutex\u0026 m) { // function to be run in thread\n    m.lock();\n    i += 1;\n    m.unlock();\n}\n\nint main() {\n    int var = 1;\n    mutex m;\n\n    cout \u003c\u003c var \u003c\u003c endl; // prints 1\n    \n    thread t1(add_1, var, m); // create thread with arguments\n    thread t2(add_1, var, m); // create another thread\n    t1.join(); t2.join(); // wait for both threads to finish\n    \n    cout \u003c\u003c var \u003c\u003c endl; // prints 3\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003cthread\u003e\n#include \u003cmutex\u003e\n#include \u003ciostream\u003e\nusing namespace std;\n\nvoid add_1(int\u0026 i, const mutex\u0026 m) { // function to be run in thread\n    m.lock();\n    i += 1;\n    m.unlock();\n}\n\nint main() {\n    int var = 1;\n    mutex m;\n\n    cout \u003c\u003c var \u003c\u003c endl; // prints 1\n    \n    thread t1(add_1, var, m); // create thread with arguments\n    thread t2(add_1, var, m); // create another thread\n    t1.join(); t2.join(); // wait for both threads to finish\n    \n    cout \u003c\u003c var \u003c\u003c endl; // prints 3\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "020 Mutexes Thread Safety"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}