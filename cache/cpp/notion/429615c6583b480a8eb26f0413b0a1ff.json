{
  "ID": "429615c6-583b-480a-8eb2-6f0413b0a1ff",
  "Root": {
    "alive": true,
    "content": [
      "4803e227-0080-48b5-8077-bd55a16e1fb8",
      "b9ad9f50-fe13-4256-b9da-ae2146795d5b",
      "6c14f120-2adb-4db5-856a-03a223e64465",
      "430dda7e-df59-462a-9dca-dc5eeec8d9fe",
      "ff71f8c4-5963-44a6-8038-f3818bda70d4",
      "f7ee62d7-87e4-48af-8168-f5f024eaaf34",
      "03921ab4-8aff-4afc-a6c8-9a81dafcc834",
      "0f1be38f-fbb7-420e-aac2-9dfa38dccd82",
      "3727c8a4-bb3c-43b6-a78a-cb261dda073c",
      "bcf15693-648d-44c3-b16b-b0afaf0668b1",
      "9d8d2282-2a14-402e-9105-978b68f42b1c"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550521953604,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "429615c6-583b-480a-8eb2-6f0413b0a1ff",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552347780000,
    "parent_id": "94bfa868-4e02-4b90-841b-817c34132524",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Partial template specialization"
        ]
      ]
    },
    "type": "page",
    "version": 9,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521953600,
        "id": "4803e227-0080-48b5-8077-bd55a16e1fb8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521953600,
        "parent_id": "429615c6-583b-480a-8eb2-6f0413b0a1ff",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In contrast of a full template specialization partial template specialization allows to introduce template with some of the arguments of existing template fixed. Partial template specialization is only available for template class/structs:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In contrast of a full template specialization partial template specialization allows to introduce template with some of the arguments of existing template fixed. Partial template specialization is only available for template class/structs:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521953603,
        "id": "b9ad9f50-fe13-4256-b9da-ae2146795d5b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552347780000,
        "parent_id": "429615c6-583b-480a-8eb2-6f0413b0a1ff",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "// Common case:\ntemplate\u003ctypename T, typename U\u003e\nstruct S {\n    T t_val;\n    U u_val;\n};\n\n// Special case when the first template argument is fixed to int\ntemplate\u003ctypename V\u003e\nstruct S\u003cint, V\u003e {\n    double another_value;\n    int foo(double arg) {// Do something}\n};"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "// Common case:\ntemplate\u003ctypename T, typename U\u003e\nstruct S {\n    T t_val;\n    U u_val;\n};\n\n// Special case when the first template argument is fixed to int\ntemplate\u003ctypename V\u003e\nstruct S\u003cint, V\u003e {\n    double another_value;\n    int foo(double arg) {// Do something}\n};",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521953603,
        "id": "6c14f120-2adb-4db5-856a-03a223e64465",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521953603,
        "parent_id": "429615c6-583b-480a-8eb2-6f0413b0a1ff",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As shown above, partial template specializations may introduce completely different sets of data and function members."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "As shown above, partial template specializations may introduce completely different sets of data and function members."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521953603,
        "id": "430dda7e-df59-462a-9dca-dc5eeec8d9fe",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521953603,
        "parent_id": "429615c6-583b-480a-8eb2-6f0413b0a1ff",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When a partially specialized template is instantiated, the most suitable specialization is selected. For example, let’s define a template and two partial specializations:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When a partially specialized template is instantiated, the most suitable specialization is selected. For example, let’s define a template and two partial specializations:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521953603,
        "id": "ff71f8c4-5963-44a6-8038-f3818bda70d4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552347780000,
        "parent_id": "429615c6-583b-480a-8eb2-6f0413b0a1ff",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "template\u003ctypename T, typename U, typename V\u003e\nstruct S {\n    static void foo() {\n        std::cout \u003c\u003c \"General case\\n\";\n    }\n};\n\ntemplate\u003ctypename U, typename V\u003e\nstruct S\u003cint, U, V\u003e {\n    static void foo() {\n        std::cout \u003c\u003c \"T = int\\n\";\n    }\n};\n\ntemplate\u003ctypename V\u003e\nstruct S\u003cint, double, V\u003e {\n    static void foo() {\n        std::cout \u003c\u003c \"T = int, U = double\\n\";\n    }\n};"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "template\u003ctypename T, typename U, typename V\u003e\nstruct S {\n    static void foo() {\n        std::cout \u003c\u003c \"General case\\n\";\n    }\n};\n\ntemplate\u003ctypename U, typename V\u003e\nstruct S\u003cint, U, V\u003e {\n    static void foo() {\n        std::cout \u003c\u003c \"T = int\\n\";\n    }\n};\n\ntemplate\u003ctypename V\u003e\nstruct S\u003cint, double, V\u003e {\n    static void foo() {\n        std::cout \u003c\u003c \"T = int, U = double\\n\";\n    }\n};",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521953603,
        "id": "f7ee62d7-87e4-48af-8168-f5f024eaaf34",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521953603,
        "parent_id": "429615c6-583b-480a-8eb2-6f0413b0a1ff",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Now the following calls:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Now the following calls:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521953603,
        "id": "03921ab4-8aff-4afc-a6c8-9a81dafcc834",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552347780000,
        "parent_id": "429615c6-583b-480a-8eb2-6f0413b0a1ff",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "S\u003cstd::string, int, double\u003e::foo();\nS\u003cint, float, std::string\u003e::foo();\nS\u003cint, double, std::string\u003e::foo();"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "S\u003cstd::string, int, double\u003e::foo();\nS\u003cint, float, std::string\u003e::foo();\nS\u003cint, double, std::string\u003e::foo();",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521953604,
        "id": "0f1be38f-fbb7-420e-aac2-9dfa38dccd82",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521953604,
        "parent_id": "429615c6-583b-480a-8eb2-6f0413b0a1ff",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "will print"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "will print"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521953604,
        "id": "3727c8a4-bb3c-43b6-a78a-cb261dda073c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521953604,
        "parent_id": "429615c6-583b-480a-8eb2-6f0413b0a1ff",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "General case\nT = int\nT = int, U = double"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "General case\nT = int\nT = int, U = double",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521953604,
        "id": "bcf15693-648d-44c3-b16b-b0afaf0668b1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521953604,
        "parent_id": "429615c6-583b-480a-8eb2-6f0413b0a1ff",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Function templates may only be fully specialized:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Function templates may only be fully specialized:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521953604,
        "id": "9d8d2282-2a14-402e-9105-978b68f42b1c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552347780000,
        "parent_id": "429615c6-583b-480a-8eb2-6f0413b0a1ff",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "template\u003ctypename T, typename U\u003e\nvoid foo(T t, U u) {\n    std::cout \u003c\u003c \"General case: \" \u003c\u003c t \u003c\u003c \" \" \u003c\u003c u \u003c\u003c std::endl;\n}\n\n// OK.\ntemplate\u003c\u003e\nvoid foo\u003cint, int\u003e(int a1, int a2) {\n    std::cout \u003c\u003c \"Two ints: \" \u003c\u003c a1 \u003c\u003c \" \" \u003c\u003c a2 \u003c\u003c std::endl;\n}\n\nvoid invoke_foo() {\n    foo(1, 2.1); // Prints \"General case: 1 2.1\"\n    foo(1,2);    // Prints \"Two ints: 1 2\"\n}\n\n// Compilation error: partial function specialization is not allowed.\ntemplate\u003ctypename U\u003e\nvoid foo\u003cstd::string, U\u003e(std::string t, U u) {\n    std::cout \u003c\u003c \"General case: \" \u003c\u003c t \u003c\u003c \" \" \u003c\u003c u \u003c\u003c std::endl;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "template\u003ctypename T, typename U\u003e\nvoid foo(T t, U u) {\n    std::cout \u003c\u003c \"General case: \" \u003c\u003c t \u003c\u003c \" \" \u003c\u003c u \u003c\u003c std::endl;\n}\n\n// OK.\ntemplate\u003c\u003e\nvoid foo\u003cint, int\u003e(int a1, int a2) {\n    std::cout \u003c\u003c \"Two ints: \" \u003c\u003c a1 \u003c\u003c \" \" \u003c\u003c a2 \u003c\u003c std::endl;\n}\n\nvoid invoke_foo() {\n    foo(1, 2.1); // Prints \"General case: 1 2.1\"\n    foo(1,2);    // Prints \"Two ints: 1 2\"\n}\n\n// Compilation error: partial function specialization is not allowed.\ntemplate\u003ctypename U\u003e\nvoid foo\u003cstd::string, U\u003e(std::string t, U u) {\n    std::cout \u003c\u003c \"General case: \" \u003c\u003c t \u003c\u003c \" \" \u003c\u003c u \u003c\u003c std::endl;\n}",
        "code_language": "C++"
      }
    ],
    "title": "Partial template specialization",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}