{
  "ID": "e90da86e-1a2f-4f0b-9c7d-4bffb66a28c8",
  "Root": {
    "alive": true,
    "content": [
      "5263c2c2-2bb2-44cd-bd55-7773685e5d53",
      "6c7d461c-b940-400a-99b7-31cfcf060ea6",
      "89658694-5e61-4672-8e3d-39887d17ccea",
      "6ca9c233-9283-4d11-9204-514e39f1a133",
      "73cbd6c6-bc1b-4aab-ad1b-fd82e1db9430",
      "92a3a82a-81d7-4bab-a069-f881fbcabf2c",
      "4ea28b50-f6fb-4622-8e85-cb1810f497b5",
      "745bb623-aa49-4e49-93ab-c651c4af3b93",
      "4088bbea-c50a-432f-9812-6681686811ce"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522310802,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "e90da86e-1a2f-4f0b-9c7d-4bffb66a28c8",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550655060000,
    "parent_id": "0b17f7b9-11d1-4229-931e-966fb51d1ba9",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "is_detected"
        ]
      ]
    },
    "type": "page",
    "version": 10,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522310797,
        "id": "5263c2c2-2bb2-44cd-bd55-7773685e5d53",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522310797,
        "parent_id": "e90da86e-1a2f-4f0b-9c7d-4bffb66a28c8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To generalize type_trait creation:based on SFINAE there are experimental traits "
            ],
            [
              "detected_or",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "detected_t",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "is_detected",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To generalize type_trait creation:based on SFINAE there are experimental traits "
          },
          {
            "Text": "detected_or",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "detected_t",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "is_detected",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522310799,
        "id": "6c7d461c-b940-400a-99b7-31cfcf060ea6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522310799,
        "parent_id": "e90da86e-1a2f-4f0b-9c7d-4bffb66a28c8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "With template parameters "
            ],
            [
              "typename Default",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "template \u003ctypename...\u003e Op",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "typename ... Args",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "With template parameters "
          },
          {
            "Text": "typename Default",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "template \u003ctypename...\u003e Op",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "typename ... Args",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522310800,
        "id": "89658694-5e61-4672-8e3d-39887d17ccea",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522310800,
        "parent_id": "e90da86e-1a2f-4f0b-9c7d-4bffb66a28c8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "is_detected",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ": alias of "
            ],
            [
              "std::true_type",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "std::false_type",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " depending of the validity of "
            ],
            [
              "Op\u003cArgs...\u003e",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "is_detected",
            "AttrFlags": 2
          },
          {
            "Text": ": alias of "
          },
          {
            "Text": "std::true_type",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "std::false_type",
            "AttrFlags": 2
          },
          {
            "Text": " depending of the validity of "
          },
          {
            "Text": "Op\u003cArgs...\u003e",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522310800,
        "id": "6ca9c233-9283-4d11-9204-514e39f1a133",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522310800,
        "parent_id": "e90da86e-1a2f-4f0b-9c7d-4bffb66a28c8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "detected_t",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ": alias of "
            ],
            [
              "Op\u003cArgs...\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "nonesuch",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " depending of validity of "
            ],
            [
              "Op\u003cArgs...\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "detected_t",
            "AttrFlags": 2
          },
          {
            "Text": ": alias of "
          },
          {
            "Text": "Op\u003cArgs...\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "nonesuch",
            "AttrFlags": 2
          },
          {
            "Text": " depending of validity of "
          },
          {
            "Text": "Op\u003cArgs...\u003e",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522310801,
        "id": "73cbd6c6-bc1b-4aab-ad1b-fd82e1db9430",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522310801,
        "parent_id": "e90da86e-1a2f-4f0b-9c7d-4bffb66a28c8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "detected_or",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ": alias of a struct with "
            ],
            [
              "value_t",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " which is "
            ],
            [
              "is_detected",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", and "
            ],
            [
              "type",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " which is "
            ],
            [
              "Op\u003cArgs...\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "Default",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " depending of validity of "
            ],
            [
              "Op\u003cArgs...\u003e",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "detected_or",
            "AttrFlags": 2
          },
          {
            "Text": ": alias of a struct with "
          },
          {
            "Text": "value_t",
            "AttrFlags": 2
          },
          {
            "Text": " which is "
          },
          {
            "Text": "is_detected",
            "AttrFlags": 2
          },
          {
            "Text": ", and "
          },
          {
            "Text": "type",
            "AttrFlags": 2
          },
          {
            "Text": " which is "
          },
          {
            "Text": "Op\u003cArgs...\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "Default",
            "AttrFlags": 2
          },
          {
            "Text": " depending of validity of "
          },
          {
            "Text": "Op\u003cArgs...\u003e",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522310801,
        "id": "92a3a82a-81d7-4bab-a069-f881fbcabf2c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522310801,
        "parent_id": "e90da86e-1a2f-4f0b-9c7d-4bffb66a28c8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "which can be implemented using "
            ],
            [
              "std::void_t",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " for SFINAE as following:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "which can be implemented using "
          },
          {
            "Text": "std::void_t",
            "AttrFlags": 2
          },
          {
            "Text": " for SFINAE as following:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522310801,
        "id": "4ea28b50-f6fb-4622-8e85-cb1810f497b5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522310801,
        "parent_id": "e90da86e-1a2f-4f0b-9c7d-4bffb66a28c8",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "namespace detail {\n    template \u003cclass Default, class AlwaysVoid,\n              template\u003cclass...\u003e class Op, class... Args\u003e\n    struct detector\n    {\n        using value_t = std::false_type;\n        using type = Default;\n    };\n\n    template \u003cclass Default, template\u003cclass...\u003e class Op, class... Args\u003e\n    struct detector\u003cDefault, std::void_t\u003cOp\u003cArgs...\u003e\u003e, Op, Args...\u003e\n    {\n        using value_t = std::true_type;\n        using type = Op\u003cArgs...\u003e;\n    };\n\n} // namespace detail\n\n// special type to indicate detection failure\nstruct nonesuch {\n    nonesuch() = delete;\n    ~nonesuch() = delete;\n    nonesuch(nonesuch const\u0026) = delete;\n    void operator=(nonesuch const\u0026) = delete;\n};\n\ntemplate \u003ctemplate\u003cclass...\u003e class Op, class... Args\u003e\nusing is_detected =\n    typename detail::detector\u003cnonesuch, void, Op, Args...\u003e::value_t;\n\ntemplate \u003ctemplate\u003cclass...\u003e class Op, class... Args\u003e\nusing detected_t = typename detail::detector\u003cnonesuch, void, Op, Args...\u003e::type;\n\ntemplate \u003cclass Default, template\u003cclass...\u003e class Op, class... Args\u003e\nusing detected_or = detail::detector\u003cDefault, void, Op, Args...\u003e;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "namespace detail {\n    template \u003cclass Default, class AlwaysVoid,\n              template\u003cclass...\u003e class Op, class... Args\u003e\n    struct detector\n    {\n        using value_t = std::false_type;\n        using type = Default;\n    };\n\n    template \u003cclass Default, template\u003cclass...\u003e class Op, class... Args\u003e\n    struct detector\u003cDefault, std::void_t\u003cOp\u003cArgs...\u003e\u003e, Op, Args...\u003e\n    {\n        using value_t = std::true_type;\n        using type = Op\u003cArgs...\u003e;\n    };\n\n} // namespace detail\n\n// special type to indicate detection failure\nstruct nonesuch {\n    nonesuch() = delete;\n    ~nonesuch() = delete;\n    nonesuch(nonesuch const\u0026) = delete;\n    void operator=(nonesuch const\u0026) = delete;\n};\n\ntemplate \u003ctemplate\u003cclass...\u003e class Op, class... Args\u003e\nusing is_detected =\n    typename detail::detector\u003cnonesuch, void, Op, Args...\u003e::value_t;\n\ntemplate \u003ctemplate\u003cclass...\u003e class Op, class... Args\u003e\nusing detected_t = typename detail::detector\u003cnonesuch, void, Op, Args...\u003e::type;\n\ntemplate \u003cclass Default, template\u003cclass...\u003e class Op, class... Args\u003e\nusing detected_or = detail::detector\u003cDefault, void, Op, Args...\u003e;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522310801,
        "id": "745bb623-aa49-4e49-93ab-c651c4af3b93",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522310801,
        "parent_id": "e90da86e-1a2f-4f0b-9c7d-4bffb66a28c8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Traits to detect presence of method can then be simply implemented:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Traits to detect presence of method can then be simply implemented:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522310802,
        "id": "4088bbea-c50a-432f-9812-6681686811ce",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522310802,
        "parent_id": "e90da86e-1a2f-4f0b-9c7d-4bffb66a28c8",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "typename \u003ctypename T, typename ...Ts\u003e\nusing foo_type = decltype(std::declval\u003cT\u003e().foo(std::declval\u003cTs\u003e()...));\n\nstruct C1 {};\n\nstruct C2 {\n    int foo(char) const;\n};\n\ntemplate \u003ctypename T\u003e\nusing has_foo_char = is_detected\u003cfoo_type, T, char\u003e;\n\nstatic_assert(!has_foo_char\u003cC1\u003e::value, \"Unexpected\");\nstatic_assert(has_foo_char\u003cC2\u003e::value, \"Unexpected\");\n\nstatic_assert(std::is_same\u003cint, detected_t\u003cfoo_type, C2, char\u003e\u003e::value,\n              \"Unexpected\");\n\nstatic_assert(std::is_same\u003cvoid, // Default\n                           detected_or\u003cvoid, foo_type, C1, char\u003e\u003e::value,\n              \"Unexpected\");\nstatic_assert(std::is_same\u003cint, detected_or\u003cvoid, foo_type, C2, char\u003e\u003e::value,\n              \"Unexpected\");"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "typename \u003ctypename T, typename ...Ts\u003e\nusing foo_type = decltype(std::declval\u003cT\u003e().foo(std::declval\u003cTs\u003e()...));\n\nstruct C1 {};\n\nstruct C2 {\n    int foo(char) const;\n};\n\ntemplate \u003ctypename T\u003e\nusing has_foo_char = is_detected\u003cfoo_type, T, char\u003e;\n\nstatic_assert(!has_foo_char\u003cC1\u003e::value, \"Unexpected\");\nstatic_assert(has_foo_char\u003cC2\u003e::value, \"Unexpected\");\n\nstatic_assert(std::is_same\u003cint, detected_t\u003cfoo_type, C2, char\u003e\u003e::value,\n              \"Unexpected\");\n\nstatic_assert(std::is_same\u003cvoid, // Default\n                           detected_or\u003cvoid, foo_type, C1, char\u003e\u003e::value,\n              \"Unexpected\");\nstatic_assert(std::is_same\u003cint, detected_or\u003cvoid, foo_type, C2, char\u003e\u003e::value,\n              \"Unexpected\");",
        "code_language": "Plain Text"
      }
    ],
    "title": "is_detected",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}