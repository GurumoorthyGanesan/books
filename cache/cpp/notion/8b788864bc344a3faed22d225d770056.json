{
  "ID": "8b788864-bc34-4a3f-aed2-2d225d770056",
  "Root": {
    "alive": true,
    "content": [
      "62cb88c2-aa43-480f-b0d7-557cde33bbf1",
      "026388ba-1dd8-41b4-bc80-68f600980144",
      "e6bf6cd0-3063-45b4-b879-b3779b50f556",
      "4d266220-fdb3-40af-98d7-04c3dd9a5a86",
      "4a5eaa14-733b-4e66-832e-dd836e0eedd0",
      "d101ed30-160d-4fff-a552-1656f2054ee8",
      "925d7546-640d-4d34-b7bb-cc481b324629",
      "1643d5d4-9ef0-4732-b2ba-580d83b6c9d3",
      "a2b67293-fc3c-4ab8-b6d6-b8c7717168de",
      "a1f4e263-733c-4460-9c18-48d1564d6455",
      "64acb0aa-4803-481d-b744-39522e9fe310",
      "0f1081c1-2590-4ecf-899f-7f11caf7a100",
      "c97b9807-da3d-4a2a-8b64-d3f17aa3bdcb",
      "2d6d8a81-beca-46a0-a7b2-c20c54c00ef2",
      "0dfb6785-c4df-4096-9123-4df4abd413c4",
      "fa64c27d-eb95-402e-9185-bbb81a6dc432",
      "9c84202c-e806-4ca7-b434-d572ac515bfe",
      "2321018e-3692-4cd5-9664-3237ec3a1574",
      "e0762f03-3384-4be6-8a76-7938e8329aa1"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550523493500,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "8b788864-bc34-4a3f-aed2-2d225d770056",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551687658353,
    "parent_id": "4a738092-15a0-42a9-8178-c62e1f86c80c",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Observer pattern"
        ]
      ]
    },
    "type": "page",
    "version": 4,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523493494,
        "id": "62cb88c2-aa43-480f-b0d7-557cde33bbf1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523493494,
        "parent_id": "8b788864-bc34-4a3f-aed2-2d225d770056",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Observer Pattern’s intent is to define a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Observer Pattern’s intent is to define a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523493496,
        "id": "026388ba-1dd8-41b4-bc80-68f600980144",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523493496,
        "parent_id": "8b788864-bc34-4a3f-aed2-2d225d770056",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The subject and observers define the one-to-many relationship. The observers are dependent on the subject such that when the subject’s state changes, the observers get notified. Depending on the notification, the observers may also be updated with new values."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The subject and observers define the one-to-many relationship. The observers are dependent on the subject such that when the subject’s state changes, the observers get notified. Depending on the notification, the observers may also be updated with new values."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523493497,
        "id": "e6bf6cd0-3063-45b4-b879-b3779b50f556",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523493497,
        "parent_id": "8b788864-bc34-4a3f-aed2-2d225d770056",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Here is the example from the book “Design Patterns” by Gamma."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Here is the example from the book “Design Patterns” by Gamma."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523493497,
        "id": "4d266220-fdb3-40af-98d7-04c3dd9a5a86",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523493497,
        "parent_id": "8b788864-bc34-4a3f-aed2-2d225d770056",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003ciostream\u003e\n#include \u003cvector\u003e\n\nclass Subject; \n\nclass Observer \n{ \npublic:\n    virtual ~Observer() = default;\n    virtual void Update(Subject\u0026) = 0;\n};\n\nclass Subject \n{ \npublic: \n     virtual ~Subject() = default;\n     void Attach(Observer\u0026 o) { observers.push_back(\u0026o); }\n     void Detach(Observer\u0026 o)\n     {\n         observers.erase(std::remove(observers.begin(), observers.end(), \u0026o));\n     }\n     void Notify()\n     {\n         for (auto* o : observers) {\n             o-\u003eUpdate(*this);\n         }\n     }\nprivate:\n     std::vector\u003cObserver*\u003e observers; \n};\n\nclass ClockTimer : public Subject \n{ \npublic:\n\n    void SetTime(int hour, int minute, int second)\n    {\n        this-\u003ehour = hour; \n        this-\u003eminute = minute;\n        this-\u003esecond = second;\n\n        Notify(); \n    }\n\n    int GetHour() const { return hour; }\n    int GetMinute() const { return minute; }\n    int GetSecond() const { return second; }\n\nprivate: \n    int hour;\n    int minute;\n    int second;\n}; \n\nclass DigitalClock: public Observer \n{ \npublic: \n     explicit DigitalClock(ClockTimer\u0026 s) : subject(s) { subject.Attach(*this); }\n     ~DigitalClock() { subject.Detach(*this); }\n     void Update(Subject\u0026 theChangedSubject) override\n     {\n         if (\u0026theChangedSubject == \u0026subject) {\n             Draw();\n         }\n     }\n\n     void Draw()\n     {\n         int hour = subject.GetHour(); \n         int minute = subject.GetMinute(); \n         int second = subject.GetSecond(); \n\n         std::cout \u003c\u003c \"Digital time is \" \u003c\u003c hour \u003c\u003c \":\" \n                   \u003c\u003c minute \u003c\u003c \":\" \n                   \u003c\u003c second \u003c\u003c std::endl;           \n     }\n\nprivate:\n     ClockTimer\u0026 subject;\n};\n\nclass AnalogClock: public Observer \n{ \npublic: \n     explicit AnalogClock(ClockTimer\u0026 s) : subject(s) { subject.Attach(*this); }\n     ~AnalogClock() { subject.Detach(*this); }\n     void Update(Subject\u0026 theChangedSubject) override\n     {\n         if (\u0026theChangedSubject == \u0026subject) {\n             Draw();\n         }\n     }\n     void Draw()\n     {\n         int hour = subject.GetHour(); \n         int minute = subject.GetMinute(); \n         int second = subject.GetSecond(); \n\n         std::cout \u003c\u003c \"Analog time is \" \u003c\u003c hour \u003c\u003c \":\" \n                   \u003c\u003c minute \u003c\u003c \":\" \n                   \u003c\u003c second \u003c\u003c std::endl; \n     }\nprivate:\n     ClockTimer\u0026 subject;\n};\n\nint main()\n{ \n    ClockTimer timer; \n\n    DigitalClock digitalClock(timer); \n    AnalogClock analogClock(timer);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003ciostream\u003e\n#include \u003cvector\u003e\n\nclass Subject; \n\nclass Observer \n{ \npublic:\n    virtual ~Observer() = default;\n    virtual void Update(Subject\u0026) = 0;\n};\n\nclass Subject \n{ \npublic: \n     virtual ~Subject() = default;\n     void Attach(Observer\u0026 o) { observers.push_back(\u0026o); }\n     void Detach(Observer\u0026 o)\n     {\n         observers.erase(std::remove(observers.begin(), observers.end(), \u0026o));\n     }\n     void Notify()\n     {\n         for (auto* o : observers) {\n             o-\u003eUpdate(*this);\n         }\n     }\nprivate:\n     std::vector\u003cObserver*\u003e observers; \n};\n\nclass ClockTimer : public Subject \n{ \npublic:\n\n    void SetTime(int hour, int minute, int second)\n    {\n        this-\u003ehour = hour; \n        this-\u003eminute = minute;\n        this-\u003esecond = second;\n\n        Notify(); \n    }\n\n    int GetHour() const { return hour; }\n    int GetMinute() const { return minute; }\n    int GetSecond() const { return second; }\n\nprivate: \n    int hour;\n    int minute;\n    int second;\n}; \n\nclass DigitalClock: public Observer \n{ \npublic: \n     explicit DigitalClock(ClockTimer\u0026 s) : subject(s) { subject.Attach(*this); }\n     ~DigitalClock() { subject.Detach(*this); }\n     void Update(Subject\u0026 theChangedSubject) override\n     {\n         if (\u0026theChangedSubject == \u0026subject) {\n             Draw();\n         }\n     }\n\n     void Draw()\n     {\n         int hour = subject.GetHour(); \n         int minute = subject.GetMinute(); \n         int second = subject.GetSecond(); \n\n         std::cout \u003c\u003c \"Digital time is \" \u003c\u003c hour \u003c\u003c \":\" \n                   \u003c\u003c minute \u003c\u003c \":\" \n                   \u003c\u003c second \u003c\u003c std::endl;           \n     }\n\nprivate:\n     ClockTimer\u0026 subject;\n};\n\nclass AnalogClock: public Observer \n{ \npublic: \n     explicit AnalogClock(ClockTimer\u0026 s) : subject(s) { subject.Attach(*this); }\n     ~AnalogClock() { subject.Detach(*this); }\n     void Update(Subject\u0026 theChangedSubject) override\n     {\n         if (\u0026theChangedSubject == \u0026subject) {\n             Draw();\n         }\n     }\n     void Draw()\n     {\n         int hour = subject.GetHour(); \n         int minute = subject.GetMinute(); \n         int second = subject.GetSecond(); \n\n         std::cout \u003c\u003c \"Analog time is \" \u003c\u003c hour \u003c\u003c \":\" \n                   \u003c\u003c minute \u003c\u003c \":\" \n                   \u003c\u003c second \u003c\u003c std::endl; \n     }\nprivate:\n     ClockTimer\u0026 subject;\n};\n\nint main()\n{ \n    ClockTimer timer; \n\n    DigitalClock digitalClock(timer); \n    AnalogClock analogClock(timer);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523493497,
        "id": "4a5eaa14-733b-4e66-832e-dd836e0eedd0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523493497,
        "parent_id": "8b788864-bc34-4a3f-aed2-2d225d770056",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "timer.SetTime(14, 41, 36);\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "timer.SetTime(14, 41, 36);\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523493497,
        "id": "d101ed30-160d-4fff-a552-1656f2054ee8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523493497,
        "parent_id": "8b788864-bc34-4a3f-aed2-2d225d770056",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Output:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Output:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523493497,
        "id": "925d7546-640d-4d34-b7bb-cc481b324629",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523493497,
        "parent_id": "8b788864-bc34-4a3f-aed2-2d225d770056",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Digital time is 14:41:36\nAnalog time is 14:41:36"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Digital time is 14:41:36\nAnalog time is 14:41:36",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523493497,
        "id": "1643d5d4-9ef0-4732-b2ba-580d83b6c9d3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523493497,
        "parent_id": "8b788864-bc34-4a3f-aed2-2d225d770056",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Here are the summary of the pattern:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Here are the summary of the pattern:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523493498,
        "id": "a2b67293-fc3c-4ab8-b6d6-b8c7717168de",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523493498,
        "parent_id": "8b788864-bc34-4a3f-aed2-2d225d770056",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Objects ("
            ],
            [
              "DigitalClock",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "AnalogClock",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " object) use the Subject interfaces ("
            ],
            [
              "Attach()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "Detach()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") either to subscribe (register) as observers or unsubscribe (remove) themselves from being observers ("
            ],
            [
              "subject.Attach(*this);",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " , "
            ],
            [
              "subject.Detach(*this);",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Objects ("
          },
          {
            "Text": "DigitalClock",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "AnalogClock",
            "AttrFlags": 2
          },
          {
            "Text": " object) use the Subject interfaces ("
          },
          {
            "Text": "Attach()",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "Detach()",
            "AttrFlags": 2
          },
          {
            "Text": ") either to subscribe (register) as observers or unsubscribe (remove) themselves from being observers ("
          },
          {
            "Text": "subject.Attach(*this);",
            "AttrFlags": 2
          },
          {
            "Text": " , "
          },
          {
            "Text": "subject.Detach(*this);",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523493498,
        "id": "a1f4e263-733c-4460-9c18-48d1564d6455",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523493498,
        "parent_id": "8b788864-bc34-4a3f-aed2-2d225d770056",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Each subject can have many observers( "
            ],
            [
              "vector\u003cObserver*\u003e observers;",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ")."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Each subject can have many observers( "
          },
          {
            "Text": "vector\u003cObserver*\u003e observers;",
            "AttrFlags": 2
          },
          {
            "Text": ")."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523493498,
        "id": "64acb0aa-4803-481d-b744-39522e9fe310",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523493498,
        "parent_id": "8b788864-bc34-4a3f-aed2-2d225d770056",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "All observers need to implement the Observer interface. This interface just has one method, "
            ],
            [
              "Update()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", that gets called when the Subject’s state changes ("
            ],
            [
              "Update(Subject \u0026)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ")"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "All observers need to implement the Observer interface. This interface just has one method, "
          },
          {
            "Text": "Update()",
            "AttrFlags": 2
          },
          {
            "Text": ", that gets called when the Subject’s state changes ("
          },
          {
            "Text": "Update(Subject \u0026)",
            "AttrFlags": 2
          },
          {
            "Text": ")"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523493499,
        "id": "0f1081c1-2590-4ecf-899f-7f11caf7a100",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523493499,
        "parent_id": "8b788864-bc34-4a3f-aed2-2d225d770056",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In addition to the "
            ],
            [
              "Attach()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "Detach()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " methods, the concrete subject implements a "
            ],
            [
              "Notify()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method that is used to update all the current observers whenever state changes. But in this case, all of them are done in the parent class, "
            ],
            [
              "Subject",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " ("
            ],
            [
              "Subject::Attach (Observer\u0026)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "void Subject::Detach(Observer\u0026)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "void Subject::Notify()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " ."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "In addition to the "
          },
          {
            "Text": "Attach()",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "Detach()",
            "AttrFlags": 2
          },
          {
            "Text": " methods, the concrete subject implements a "
          },
          {
            "Text": "Notify()",
            "AttrFlags": 2
          },
          {
            "Text": " method that is used to update all the current observers whenever state changes. But in this case, all of them are done in the parent class, "
          },
          {
            "Text": "Subject",
            "AttrFlags": 2
          },
          {
            "Text": " ("
          },
          {
            "Text": "Subject::Attach (Observer\u0026)",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "void Subject::Detach(Observer\u0026)",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "void Subject::Notify()",
            "AttrFlags": 2
          },
          {
            "Text": " ."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523493499,
        "id": "c97b9807-da3d-4a2a-8b64-d3f17aa3bdcb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523493499,
        "parent_id": "8b788864-bc34-4a3f-aed2-2d225d770056",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The Concrete object may also have methods for setting and getting its state."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "The Concrete object may also have methods for setting and getting its state."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523493499,
        "id": "2d6d8a81-beca-46a0-a7b2-c20c54c00ef2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523493499,
        "parent_id": "8b788864-bc34-4a3f-aed2-2d225d770056",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Concrete observers can be any class that implements the Observer interface. Each observer subscribe (register) with a concrete subject to receive update ("
            ],
            [
              "subject.Attach(*this);",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " )."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Concrete observers can be any class that implements the Observer interface. Each observer subscribe (register) with a concrete subject to receive update ("
          },
          {
            "Text": "subject.Attach(*this);",
            "AttrFlags": 2
          },
          {
            "Text": " )."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523493499,
        "id": "0dfb6785-c4df-4096-9123-4df4abd413c4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523493499,
        "parent_id": "8b788864-bc34-4a3f-aed2-2d225d770056",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The two objects of Observer Pattern are "
            ],
            [
              "loosely coupled",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", they can interact but with little knowledge of each other."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "The two objects of Observer Pattern are "
          },
          {
            "Text": "loosely coupled",
            "AttrFlags": 1
          },
          {
            "Text": ", they can interact but with little knowledge of each other."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523493499,
        "id": "fa64c27d-eb95-402e-9185-bbb81a6dc432",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523493499,
        "parent_id": "8b788864-bc34-4a3f-aed2-2d225d770056",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Variation:",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Variation:",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523493500,
        "id": "9c84202c-e806-4ca7-b434-d572ac515bfe",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523493500,
        "parent_id": "8b788864-bc34-4a3f-aed2-2d225d770056",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Signal and Slots"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Signal and Slots"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523493500,
        "id": "2321018e-3692-4cd5-9664-3237ec3a1574",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523493500,
        "parent_id": "8b788864-bc34-4a3f-aed2-2d225d770056",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Signals and slots is a language construct introduced in Qt, which makes it easy to implement the Observer pattern while avoiding boilerplate code. The concept is that controls (also known as widgets) can send signals containing event information which can be received by other controls using special functions known as slots. The slot in Qt must be a class member declared as such. The signal/slot system fits well with the way Graphical User Interfaces are designed. Similarly, the signal/slot system can be used for asynchronous I/O (including sockets, pipes, serial devices, etc.) event notification or to associate timeout events with appropriate object instances and methods or functions. No registration/deregistration/invocation code need be written, because Qt’s Meta Object Compiler (MOC) automatically generates the needed infrastructure."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Signals and slots is a language construct introduced in Qt, which makes it easy to implement the Observer pattern while avoiding boilerplate code. The concept is that controls (also known as widgets) can send signals containing event information which can be received by other controls using special functions known as slots. The slot in Qt must be a class member declared as such. The signal/slot system fits well with the way Graphical User Interfaces are designed. Similarly, the signal/slot system can be used for asynchronous I/O (including sockets, pipes, serial devices, etc.) event notification or to associate timeout events with appropriate object instances and methods or functions. No registration/deregistration/invocation code need be written, because Qt’s Meta Object Compiler (MOC) automatically generates the needed infrastructure."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523493500,
        "id": "e0762f03-3384-4be6-8a76-7938e8329aa1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523493500,
        "parent_id": "8b788864-bc34-4a3f-aed2-2d225d770056",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The C# language also supports a similar construct although with a different terminology and syntax: events play the role of signals, and delegates are the slots. Additionally, a delegate can be a local variable, much like a function pointer, while a slot in Qt must be a class member declared as such."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The C# language also supports a similar construct although with a different terminology and syntax: events play the role of signals, and delegates are the slots. Additionally, a delegate can be a local variable, much like a function pointer, while a slot in Qt must be a class member declared as such."
          }
        ]
      }
    ],
    "title": "Observer pattern",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}