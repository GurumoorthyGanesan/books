{
  "ID": "fe58813a-c527-456f-b1d9-0719805c295b",
  "Root": {
    "alive": true,
    "content": [
      "06db4552-cfbd-4025-b588-e92f15835bb7",
      "0e3e177e-85b2-4af6-90b0-348f4b3bf9ec",
      "867330df-24ff-4266-b2f1-19aa6d7e4d3d",
      "2747041c-2935-4cf1-a587-985cb82fb9d7",
      "203bc0ef-b49c-4765-85e7-8fb1520bfcec",
      "e5a09c13-2f51-4029-aa91-8a591581993a",
      "7ce43733-5dd8-4ddb-aac4-1e1f459d7943",
      "a83ff6b8-0514-4e05-bfbf-adfb5e33f8e5",
      "8beea9fe-910e-4034-9581-192919d287a2",
      "ad587d92-7dbe-4930-9838-f15cfb680544",
      "08ac98f8-b1aa-4285-8962-3a67da416c3b",
      "40802f56-8bba-4568-afbc-04f98ee35983",
      "107acdf5-8fa9-4ebd-807a-39f30f00c368",
      "0f559ed3-1820-4c41-a8c2-594625843963",
      "05e2dcf6-70a9-47fa-b08d-4d12137e8075",
      "6c4d0d22-0e2e-4007-b0c4-445d550fd86d",
      "cff4457d-5c69-4081-bf5d-6bd86156b024",
      "887ff137-bfb6-4b15-be41-03cfd32db209",
      "bde95e52-a50f-485a-8afa-e7dcf694cd03",
      "465e76d0-815a-4da4-a899-2fbbf10bab25",
      "d7f2b5ca-2ed7-4158-a320-92b5c6c46cff",
      "6bc33d8f-6d0b-4604-801a-d5c92df6ac27",
      "c3609ff0-4be3-421a-8d9e-0887f18fc8cd",
      "65397476-595d-4be7-93db-9314ea7ac02b",
      "42a2506e-495c-42c0-adc6-8133335a6e3b",
      "1d09475c-dd76-46e1-9553-dd4c9675575c",
      "3404f2fa-2339-4f5e-8c3c-b681e69098d7"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550523078464,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "fe58813a-c527-456f-b1d9-0719805c295b",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552302420000,
    "parent_id": "a47adf4d-f2bb-4f72-84ee-798641440dfd",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Pointer basics"
        ]
      ]
    },
    "type": "page",
    "version": 10,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523078456,
        "id": "06db4552-cfbd-4025-b588-e92f15835bb7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523078456,
        "parent_id": "fe58813a-c527-456f-b1d9-0719805c295b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note:",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " in all the following, the existence of the C++11 constant "
            ],
            [
              "nullptr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is assumed. For earlier versions, replace "
            ],
            [
              "nullptr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " with "
            ],
            [
              "NULL",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", the constant that used to play a similar role."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note:",
            "AttrFlags": 1
          },
          {
            "Text": " in all the following, the existence of the C++11 constant "
          },
          {
            "Text": "nullptr",
            "AttrFlags": 2
          },
          {
            "Text": " is assumed. For earlier versions, replace "
          },
          {
            "Text": "nullptr",
            "AttrFlags": 2
          },
          {
            "Text": " with "
          },
          {
            "Text": "NULL",
            "AttrFlags": 2
          },
          {
            "Text": ", the constant that used to play a similar role."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523078459,
        "id": "0e3e177e-85b2-4af6-90b0-348f4b3bf9ec",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523078459,
        "parent_id": "fe58813a-c527-456f-b1d9-0719805c295b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Creating a pointer variable"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Creating a pointer variable"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523078459,
        "id": "867330df-24ff-4266-b2f1-19aa6d7e4d3d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550800320000,
        "parent_id": "fe58813a-c527-456f-b1d9-0719805c295b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A pointer variable can be created using the specific "
            ],
            [
              "*",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " syntax, e.g. "
            ],
            [
              "int *pointer_to_int;",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 3,
        "inline_content": [
          {
            "Text": "A pointer variable can be created using the specific "
          },
          {
            "Text": "*",
            "AttrFlags": 2
          },
          {
            "Text": " syntax, e.g. "
          },
          {
            "Text": "int *pointer_to_int;",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523078460,
        "id": "2747041c-2935-4cf1-a587-985cb82fb9d7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523078460,
        "parent_id": "fe58813a-c527-456f-b1d9-0719805c295b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When a variable is of a "
            ],
            [
              "pointer type",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " ("
            ],
            [
              "int *",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "), it just contains a memory address. The memory address is the location at which data of the "
            ],
            [
              "underlying type",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " ("
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") is stored."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When a variable is of a "
          },
          {
            "Text": "pointer type",
            "AttrFlags": 4
          },
          {
            "Text": " ("
          },
          {
            "Text": "int *",
            "AttrFlags": 2
          },
          {
            "Text": "), it just contains a memory address. The memory address is the location at which data of the "
          },
          {
            "Text": "underlying type",
            "AttrFlags": 4
          },
          {
            "Text": " ("
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": ") is stored."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523078460,
        "id": "203bc0ef-b49c-4765-85e7-8fb1520bfcec",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523078460,
        "parent_id": "fe58813a-c527-456f-b1d9-0719805c295b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The difference is clear when comparing the size of a variable with the size of a pointer to the same type:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The difference is clear when comparing the size of a variable with the size of a pointer to the same type:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523078460,
        "id": "e5a09c13-2f51-4029-aa91-8a591581993a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550800320000,
        "parent_id": "fe58813a-c527-456f-b1d9-0719805c295b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "// Declare a struct type `big_struct` that contains\n// three long long ints.\ntypedef struct {\n    long long int foo1;\n    long long int foo2;\n    long long int foo3;\n} big_struct;\n\n// Create a variable `bar` of type `big_struct`\nbig_struct bar;\n// Create a variable `p_bar` of type `pointer to big_struct`.\n// Initialize it to `nullptr` (a null pointer).\nbig_struct *p_bar0 = nullptr;\n\n// Print the size of `bar`\nstd::cout \u003c\u003c \"sizeof(bar) = \" \u003c\u003c sizeof(bar) \u003c\u003c std::endl;\n// Print the size of `p_bar`.\nstd::cout \u003c\u003c \"sizeof(p_bar0) = \" \u003c\u003c sizeof(p_bar0) \u003c\u003c std::endl;\n\n/* Produces:\n    sizeof(bar) = 24\n    sizeof(p_bar0) = 8\n*/"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "// Declare a struct type `big_struct` that contains\n// three long long ints.\ntypedef struct {\n    long long int foo1;\n    long long int foo2;\n    long long int foo3;\n} big_struct;\n\n// Create a variable `bar` of type `big_struct`\nbig_struct bar;\n// Create a variable `p_bar` of type `pointer to big_struct`.\n// Initialize it to `nullptr` (a null pointer).\nbig_struct *p_bar0 = nullptr;\n\n// Print the size of `bar`\nstd::cout \u003c\u003c \"sizeof(bar) = \" \u003c\u003c sizeof(bar) \u003c\u003c std::endl;\n// Print the size of `p_bar`.\nstd::cout \u003c\u003c \"sizeof(p_bar0) = \" \u003c\u003c sizeof(p_bar0) \u003c\u003c std::endl;\n\n/* Produces:\n    sizeof(bar) = 24\n    sizeof(p_bar0) = 8\n*/",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523078460,
        "id": "7ce43733-5dd8-4ddb-aac4-1e1f459d7943",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523078460,
        "parent_id": "fe58813a-c527-456f-b1d9-0719805c295b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Taking the address of another variable"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Taking the address of another variable"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523078460,
        "id": "a83ff6b8-0514-4e05-bfbf-adfb5e33f8e5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523078460,
        "parent_id": "fe58813a-c527-456f-b1d9-0719805c295b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Pointers can be assigned between each other just as normal variables; in this case, it is the "
            ],
            [
              "memory address",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " that is copied from one pointer to another, "
            ],
            [
              "not the actual data",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " that a pointer points to."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Pointers can be assigned between each other just as normal variables; in this case, it is the "
          },
          {
            "Text": "memory address",
            "AttrFlags": 1
          },
          {
            "Text": " that is copied from one pointer to another, "
          },
          {
            "Text": "not the actual data",
            "AttrFlags": 1
          },
          {
            "Text": " that a pointer points to."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523078460,
        "id": "8beea9fe-910e-4034-9581-192919d287a2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523078460,
        "parent_id": "fe58813a-c527-456f-b1d9-0719805c295b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Moreover, they can take the value "
            ],
            [
              "nullptr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " which represents a null memory location. A pointer equal to "
            ],
            [
              "nullptr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " contains an invalid memory location and hence it does not refer to valid data."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Moreover, they can take the value "
          },
          {
            "Text": "nullptr",
            "AttrFlags": 2
          },
          {
            "Text": " which represents a null memory location. A pointer equal to "
          },
          {
            "Text": "nullptr",
            "AttrFlags": 2
          },
          {
            "Text": " contains an invalid memory location and hence it does not refer to valid data."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523078461,
        "id": "ad587d92-7dbe-4930-9838-f15cfb680544",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523078461,
        "parent_id": "fe58813a-c527-456f-b1d9-0719805c295b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You can get the memory address of a variable of a given type by prefixing the variable with the "
            ],
            [
              "address of",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " operator "
            ],
            [
              "\u0026",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". The value returned by "
            ],
            [
              "\u0026",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is a pointer to the underlying type which contains the memory address of the variable (which is valid data "
            ],
            [
              "as long as the variable does not go out of scope",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ")."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You can get the memory address of a variable of a given type by prefixing the variable with the "
          },
          {
            "Text": "address of",
            "AttrFlags": 4
          },
          {
            "Text": " operator "
          },
          {
            "Text": "\u0026",
            "AttrFlags": 2
          },
          {
            "Text": ". The value returned by "
          },
          {
            "Text": "\u0026",
            "AttrFlags": 2
          },
          {
            "Text": " is a pointer to the underlying type which contains the memory address of the variable (which is valid data "
          },
          {
            "Text": "as long as the variable does not go out of scope",
            "AttrFlags": 1
          },
          {
            "Text": ")."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523078461,
        "id": "08ac98f8-b1aa-4285-8962-3a67da416c3b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550800320000,
        "parent_id": "fe58813a-c527-456f-b1d9-0719805c295b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "// Copy `p_bar0` into `p_bar_1`.\nbig_struct *p_bar1 = p_bar0;\n\n// Take the address of `bar` into `p_bar_2`\nbig_struct *p_bar2 = \u0026bar;\n\n// p_bar1 is now nullptr, p_bar2 is \u0026bar.\n\np_bar0 = p_bar2;\n\n// p_bar0 is now \u0026bar.\n\np_bar2 = nullptr;\n\n// p_bar0 == \u0026bar\n// p_bar1 == nullptr\n// p_bar2 == nullptr"
            ]
          ]
        },
        "type": "code",
        "version": 4,
        "code": "// Copy `p_bar0` into `p_bar_1`.\nbig_struct *p_bar1 = p_bar0;\n\n// Take the address of `bar` into `p_bar_2`\nbig_struct *p_bar2 = \u0026bar;\n\n// p_bar1 is now nullptr, p_bar2 is \u0026bar.\n\np_bar0 = p_bar2;\n\n// p_bar0 is now \u0026bar.\n\np_bar2 = nullptr;\n\n// p_bar0 == \u0026bar\n// p_bar1 == nullptr\n// p_bar2 == nullptr",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523078461,
        "id": "40802f56-8bba-4568-afbc-04f98ee35983",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523078461,
        "parent_id": "fe58813a-c527-456f-b1d9-0719805c295b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In contrast with references:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In contrast with references:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523078462,
        "id": "107acdf5-8fa9-4ebd-807a-39f30f00c368",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523078462,
        "parent_id": "fe58813a-c527-456f-b1d9-0719805c295b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "assigning two pointers does not overwrite the memory that the assigned pointer refers to;"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "assigning two pointers does not overwrite the memory that the assigned pointer refers to;"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523078462,
        "id": "0f559ed3-1820-4c41-a8c2-594625843963",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523078462,
        "parent_id": "fe58813a-c527-456f-b1d9-0719805c295b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "pointers can be null."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "pointers can be null."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523078462,
        "id": "05e2dcf6-70a9-47fa-b08d-4d12137e8075",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523078462,
        "parent_id": "fe58813a-c527-456f-b1d9-0719805c295b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "the "
            ],
            [
              "address of",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " operator is required explicitly."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "the "
          },
          {
            "Text": "address of",
            "AttrFlags": 4
          },
          {
            "Text": " operator is required explicitly."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523078462,
        "id": "6c4d0d22-0e2e-4007-b0c4-445d550fd86d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523078462,
        "parent_id": "fe58813a-c527-456f-b1d9-0719805c295b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Accessing the content of a pointer"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Accessing the content of a pointer"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523078462,
        "id": "cff4457d-5c69-4081-bf5d-6bd86156b024",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550800320000,
        "parent_id": "fe58813a-c527-456f-b1d9-0719805c295b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As taking an address requires "
            ],
            [
              "\u0026",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", as well accessing the content requires the usage of the "
            ],
            [
              "dereference operator",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "*",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", as a prefix. When a pointer is dereferenced, it becomes a variable of the underlying type (actually, a reference to it). It can then be read and modified, if not "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 3,
        "inline_content": [
          {
            "Text": "As taking an address requires "
          },
          {
            "Text": "\u0026",
            "AttrFlags": 2
          },
          {
            "Text": ", as well accessing the content requires the usage of the "
          },
          {
            "Text": "dereference operator",
            "AttrFlags": 4
          },
          {
            "Text": " "
          },
          {
            "Text": "*",
            "AttrFlags": 2
          },
          {
            "Text": ", as a prefix. When a pointer is dereferenced, it becomes a variable of the underlying type (actually, a reference to it). It can then be read and modified, if not "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523078463,
        "id": "887ff137-bfb6-4b15-be41-03cfd32db209",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550800320000,
        "parent_id": "fe58813a-c527-456f-b1d9-0719805c295b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "(*p_bar0).foo1 = 5;\n\n// `p_bar0` points to `bar`. This prints 5.\nstd::cout \u003c\u003c \"bar.foo1 = \" \u003c\u003c bar.foo1 \u003c\u003c std::endl;\n\n// Assign the value pointed to by `p_bar0` to `baz`.\nbig_struct baz;\nbaz = *p_bar0;\n\n// Now `baz` contains a copy of the data pointed to by `p_bar0`.\n// Indeed, it contains a copy of `bar`.\n\n// Prints 5 as well\nstd::cout \u003c\u003c \"baz.foo1 = \" \u003c\u003c baz.foo1 \u003c\u003c std::endl;"
            ]
          ]
        },
        "type": "code",
        "version": 4,
        "code": "(*p_bar0).foo1 = 5;\n\n// `p_bar0` points to `bar`. This prints 5.\nstd::cout \u003c\u003c \"bar.foo1 = \" \u003c\u003c bar.foo1 \u003c\u003c std::endl;\n\n// Assign the value pointed to by `p_bar0` to `baz`.\nbig_struct baz;\nbaz = *p_bar0;\n\n// Now `baz` contains a copy of the data pointed to by `p_bar0`.\n// Indeed, it contains a copy of `bar`.\n\n// Prints 5 as well\nstd::cout \u003c\u003c \"baz.foo1 = \" \u003c\u003c baz.foo1 \u003c\u003c std::endl;",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523078463,
        "id": "bde95e52-a50f-485a-8afa-e7dcf694cd03",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550800320000,
        "parent_id": "fe58813a-c527-456f-b1d9-0719805c295b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The combination of "
            ],
            [
              "*",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and the operator "
            ],
            [
              ".",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is abbreviated by "
            ],
            [
              "-\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 3,
        "inline_content": [
          {
            "Text": "The combination of "
          },
          {
            "Text": "*",
            "AttrFlags": 2
          },
          {
            "Text": " and the operator "
          },
          {
            "Text": ".",
            "AttrFlags": 2
          },
          {
            "Text": " is abbreviated by "
          },
          {
            "Text": "-\u003e",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523078463,
        "id": "465e76d0-815a-4da4-a899-2fbbf10bab25",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550800320000,
        "parent_id": "fe58813a-c527-456f-b1d9-0719805c295b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "std::cout \u003c\u003c \"bar.foo1 = \" \u003c\u003c (*p_bar0).foo1 \u003c\u003c std::endl; // Prints 5\nstd::cout \u003c\u003c \"bar.foo1 = \" \u003c\u003c  p_bar0-\u003efoo1  \u003c\u003c std::endl; // Prints 5"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "std::cout \u003c\u003c \"bar.foo1 = \" \u003c\u003c (*p_bar0).foo1 \u003c\u003c std::endl; // Prints 5\nstd::cout \u003c\u003c \"bar.foo1 = \" \u003c\u003c  p_bar0-\u003efoo1  \u003c\u003c std::endl; // Prints 5",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523078463,
        "id": "d7f2b5ca-2ed7-4158-a320-92b5c6c46cff",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523078463,
        "parent_id": "fe58813a-c527-456f-b1d9-0719805c295b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Dereferencing invalid pointers"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Dereferencing invalid pointers"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523078463,
        "id": "6bc33d8f-6d0b-4604-801a-d5c92df6ac27",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523078463,
        "parent_id": "fe58813a-c527-456f-b1d9-0719805c295b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When dereferencing a pointer, you should make sure it points to valid data. Dereferencing an invalid pointer (or a null pointer) can lead to memory access violation, or to read or write garbage data."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When dereferencing a pointer, you should make sure it points to valid data. Dereferencing an invalid pointer (or a null pointer) can lead to memory access violation, or to read or write garbage data."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523078463,
        "id": "c3609ff0-4be3-421a-8d9e-0887f18fc8cd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550800320000,
        "parent_id": "fe58813a-c527-456f-b1d9-0719805c295b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "big_struct *never_do_this() {\n   // This is a local variable. Outside `never_do_this` it doesn't exist.\n   big_struct retval;\n   retval.foo1 = 11;\n   // This returns the address of `retval`.\n   return \u0026retval;\n   // `retval` is destroyed and any code using the value returned\n   // by `never_do_this` has a pointer to a memory location that\n   // contains garbage data (or is inaccessible).\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "big_struct *never_do_this() {\n   // This is a local variable. Outside `never_do_this` it doesn't exist.\n   big_struct retval;\n   retval.foo1 = 11;\n   // This returns the address of `retval`.\n   return \u0026retval;\n   // `retval` is destroyed and any code using the value returned\n   // by `never_do_this` has a pointer to a memory location that\n   // contains garbage data (or is inaccessible).\n}",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523078463,
        "id": "65397476-595d-4be7-93db-9314ea7ac02b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523078463,
        "parent_id": "fe58813a-c527-456f-b1d9-0719805c295b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In such scenario, "
            ],
            [
              "g++",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "clang++",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " correctly issue the warnings:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In such scenario, "
          },
          {
            "Text": "g++",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "clang++",
            "AttrFlags": 2
          },
          {
            "Text": " correctly issue the warnings:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523078464,
        "id": "42a2506e-495c-42c0-adc6-8133335a6e3b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552302420000,
        "parent_id": "fe58813a-c527-456f-b1d9-0719805c295b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "(Clang) warning: address of stack memory associated with local variable 'retval' returned [-Wreturn-stack-address]\n(Gcc)   warning: address of local variable ‘retval’ returned [-Wreturn-local-addr]"
            ]
          ]
        },
        "type": "code",
        "version": 5,
        "code": "(Clang) warning: address of stack memory associated with local variable 'retval' returned [-Wreturn-stack-address]\n(Gcc)   warning: address of local variable ‘retval’ returned [-Wreturn-local-addr]",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523078464,
        "id": "1d09475c-dd76-46e1-9553-dd4c9675575c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523078464,
        "parent_id": "fe58813a-c527-456f-b1d9-0719805c295b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Hence, care must be taken when pointers are arguments of functions, as they could be null:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Hence, care must be taken when pointers are arguments of functions, as they could be null:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523078464,
        "id": "3404f2fa-2339-4f5e-8c3c-b681e69098d7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550800380000,
        "parent_id": "fe58813a-c527-456f-b1d9-0719805c295b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "void naive_code(big_struct *ptr_big_struct) {\n    // ... some code which doesn't check if `ptr_big_struct` is valid.\n    ptr_big_struct-\u003efoo1 = 12;\n}\n\n// Segmentation fault.\nnaive_code(nullptr);"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "void naive_code(big_struct *ptr_big_struct) {\n    // ... some code which doesn't check if `ptr_big_struct` is valid.\n    ptr_big_struct-\u003efoo1 = 12;\n}\n\n// Segmentation fault.\nnaive_code(nullptr);",
        "code_language": "C++"
      }
    ],
    "title": "Pointer basics",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}