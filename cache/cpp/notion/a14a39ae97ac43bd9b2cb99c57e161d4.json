{
  "ID": "a14a39ae-97ac-43bd-9b2c-b99c57e161d4",
  "Root": {
    "alive": true,
    "content": [
      "af4f582b-656a-4be5-b528-c9b60762564b",
      "182e7a02-0a98-42fb-932f-adf1ed7885bd",
      "eeaeb5af-1aaf-4ed4-8ef8-44411b44e69a",
      "e6a515af-cc42-4d00-8d4f-e0f89acfd0a9",
      "64201eca-4580-43cf-90eb-3834a9660913"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550521988420,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "a14a39ae-97ac-43bd-9b2c-b99c57e161d4",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550656380000,
    "parent_id": "b886ff5d-614b-4aa9-9e99-851b7998439b",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Conversion to const char"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521988419,
        "id": "af4f582b-656a-4be5-b528-c9b60762564b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521988419,
        "parent_id": "a14a39ae-97ac-43bd-9b2c-b99c57e161d4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In order to get "
            ],
            [
              "const char*",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " access to the data of a "
            ],
            [
              "std::string",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " you can use the string’s "
            ],
            [
              "c_str()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " member function. Keep in mind that the pointer is only valid as long as the "
            ],
            [
              "std::string",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " object is within scope and remains unchanged, that means that only "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " methods may be called on the object."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In order to get "
          },
          {
            "Text": "const char*",
            "AttrFlags": 2
          },
          {
            "Text": " access to the data of a "
          },
          {
            "Text": "std::string",
            "AttrFlags": 2
          },
          {
            "Text": " you can use the string’s "
          },
          {
            "Text": "c_str()",
            "AttrFlags": 2
          },
          {
            "Text": " member function. Keep in mind that the pointer is only valid as long as the "
          },
          {
            "Text": "std::string",
            "AttrFlags": 2
          },
          {
            "Text": " object is within scope and remains unchanged, that means that only "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": " methods may be called on the object."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521988420,
        "id": "182e7a02-0a98-42fb-932f-adf1ed7885bd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521988420,
        "parent_id": "a14a39ae-97ac-43bd-9b2c-b99c57e161d4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "data()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " member function can be used to obtain a modifiable "
            ],
            [
              "char*",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", which can be used to manipulate the "
            ],
            [
              "std::string",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " object’s data."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "data()",
            "AttrFlags": 2
          },
          {
            "Text": " member function can be used to obtain a modifiable "
          },
          {
            "Text": "char*",
            "AttrFlags": 2
          },
          {
            "Text": ", which can be used to manipulate the "
          },
          {
            "Text": "std::string",
            "AttrFlags": 2
          },
          {
            "Text": " object’s data."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521988420,
        "id": "eeaeb5af-1aaf-4ed4-8ef8-44411b44e69a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521988420,
        "parent_id": "a14a39ae-97ac-43bd-9b2c-b99c57e161d4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A modifiable "
            ],
            [
              "char*",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can also be obtained by taking the address of the first character: "
            ],
            [
              "\u0026s[0]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Within C++11, this is guaranteed to yield a well-formed, null-terminated string. Note that "
            ],
            [
              "\u0026s[0]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is well-formed even if "
            ],
            [
              "s",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is empty, whereas "
            ],
            [
              "\u0026s.front()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is undefined if "
            ],
            [
              "s",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is empty."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A modifiable "
          },
          {
            "Text": "char*",
            "AttrFlags": 2
          },
          {
            "Text": " can also be obtained by taking the address of the first character: "
          },
          {
            "Text": "\u0026s[0]",
            "AttrFlags": 2
          },
          {
            "Text": ". Within C++11, this is guaranteed to yield a well-formed, null-terminated string. Note that "
          },
          {
            "Text": "\u0026s[0]",
            "AttrFlags": 2
          },
          {
            "Text": " is well-formed even if "
          },
          {
            "Text": "s",
            "AttrFlags": 2
          },
          {
            "Text": " is empty, whereas "
          },
          {
            "Text": "\u0026s.front()",
            "AttrFlags": 2
          },
          {
            "Text": " is undefined if "
          },
          {
            "Text": "s",
            "AttrFlags": 2
          },
          {
            "Text": " is empty."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521988420,
        "id": "e6a515af-cc42-4d00-8d4f-e0f89acfd0a9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521988420,
        "parent_id": "a14a39ae-97ac-43bd-9b2c-b99c57e161d4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "std::string str(\"This is a string.\");\nconst char* cstr = str.c_str(); // cstr points to: \"This is a string.\\0\"\nconst char* data = str.data();  // data points to: \"This is a string.\\0\""
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "std::string str(\"This is a string.\");\nconst char* cstr = str.c_str(); // cstr points to: \"This is a string.\\0\"\nconst char* data = str.data();  // data points to: \"This is a string.\\0\"",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521988420,
        "id": "64201eca-4580-43cf-90eb-3834a9660913",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521988420,
        "parent_id": "a14a39ae-97ac-43bd-9b2c-b99c57e161d4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "std::string str(\"This is a string.\");\n\n// Copy the contents of str to untie lifetime from the std::string object\nstd::unique_ptr\u003cchar []\u003e cstr = std::make_unique\u003cchar[]\u003e(str.size() + 1);\n\n// Alternative to the line above (no exception safety):\n// char* cstr_unsafe = new char[str.size() + 1];\n\nstd::copy(str.data(), str.data() + str.size(), cstr);\ncstr[str.size()] = '\\0'; // A null-terminator needs to be added\n\n// delete[] cstr_unsafe;\nstd::cout \u003c\u003c cstr.get();"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "std::string str(\"This is a string.\");\n\n// Copy the contents of str to untie lifetime from the std::string object\nstd::unique_ptr\u003cchar []\u003e cstr = std::make_unique\u003cchar[]\u003e(str.size() + 1);\n\n// Alternative to the line above (no exception safety):\n// char* cstr_unsafe = new char[str.size() + 1];\n\nstd::copy(str.data(), str.data() + str.size(), cstr);\ncstr[str.size()] = '\\0'; // A null-terminator needs to be added\n\n// delete[] cstr_unsafe;\nstd::cout \u003c\u003c cstr.get();",
        "code_language": "Plain Text"
      }
    ],
    "title": "Conversion to const char",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}