{
  "ID": "44d3b79e-76e2-4345-b151-7edfa8954b03",
  "Root": {
    "alive": true,
    "content": [
      "0b24e403-8f3f-4bde-bc4e-fa937ef339a7",
      "4f188531-4337-490b-a793-0b0a4d1953c2",
      "f828bc3d-16cf-437a-90dc-47f228030144",
      "f8ed2c64-3784-4c27-b889-47deef87b781",
      "af347e99-5771-4bba-aa0d-432c033b2d3c",
      "1cbc8d9c-3a4d-470d-9cbf-f7e4e19ab09e",
      "c20c3b97-54ac-403d-9d6a-6ac51568f727",
      "6985611c-aa5c-4c1d-a4d9-c7fbc7f86d54",
      "2eebf523-0ad6-48ab-a512-43e55fb2bb1f",
      "911e75a1-d781-48bc-9f38-38c1255a2481",
      "8c3790a5-5f37-40ea-9cc4-a7fa7997ffdb",
      "e1dec85b-f736-4e0b-a46e-e9c2fecb69b4",
      "fe8de56d-c3a6-40e7-9f76-402a12ac5833",
      "5340a406-b248-43d8-96f3-62736a8c5c9a"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550524282527,
    "id": "44d3b79e-76e2-4345-b151-7edfa8954b03",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550524282527,
    "parent_id": "4f68e8c3-ce07-490a-ad1e-1605c992a0ab",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "010 Looping through a container"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524282522,
        "id": "0b24e403-8f3f-4bde-bc4e-fa937ef339a7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524282522,
        "parent_id": "44d3b79e-76e2-4345-b151-7edfa8954b03",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In C++, looping through a sequence container "
            ],
            [
              "c",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can be done using indexes as follows:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In C++, looping through a sequence container "
          },
          {
            "Text": "c",
            "AttrFlags": 2
          },
          {
            "Text": " can be done using indexes as follows:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524282525,
        "id": "4f188531-4337-490b-a793-0b0a4d1953c2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524282525,
        "parent_id": "44d3b79e-76e2-4345-b151-7edfa8954b03",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "for(size_t i = 0; i \u003c c.size(); ++i) c[i] = 0;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "for(size_t i = 0; i \u003c c.size(); ++i) c[i] = 0;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524282525,
        "id": "f828bc3d-16cf-437a-90dc-47f228030144",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524282525,
        "parent_id": "44d3b79e-76e2-4345-b151-7edfa8954b03",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "While simple, such writings are subject to common semantic errors, like wrong comparison operator, or wrong indexing variable:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "While simple, such writings are subject to common semantic errors, like wrong comparison operator, or wrong indexing variable:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524282525,
        "id": "f8ed2c64-3784-4c27-b889-47deef87b781",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524282525,
        "parent_id": "44d3b79e-76e2-4345-b151-7edfa8954b03",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "for(size_t i = 0; i \u003c= c.size(); ++j) c[i] = 0;\n                     ^~~~~~~~~~~~~~^"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "for(size_t i = 0; i \u003c= c.size(); ++j) c[i] = 0;\n                     ^~~~~~~~~~~~~~^",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524282525,
        "id": "af347e99-5771-4bba-aa0d-432c033b2d3c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524282525,
        "parent_id": "44d3b79e-76e2-4345-b151-7edfa8954b03",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Looping can also be achieved for all containers using iterators, with similar drawbacks:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Looping can also be achieved for all containers using iterators, with similar drawbacks:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524282525,
        "id": "1cbc8d9c-3a4d-470d-9cbf-f7e4e19ab09e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524282525,
        "parent_id": "44d3b79e-76e2-4345-b151-7edfa8954b03",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "for(iterator it = c.begin(); it != c.end(); ++it) (*it) = 0;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "for(iterator it = c.begin(); it != c.end(); ++it) (*it) = 0;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524282526,
        "id": "c20c3b97-54ac-403d-9d6a-6ac51568f727",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524282526,
        "parent_id": "44d3b79e-76e2-4345-b151-7edfa8954b03",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "C++11 introduced range-based for loops and "
            ],
            [
              "auto",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " keyword, allowing the code to become:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "C++11 introduced range-based for loops and "
          },
          {
            "Text": "auto",
            "AttrFlags": 2
          },
          {
            "Text": " keyword, allowing the code to become:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524282526,
        "id": "6985611c-aa5c-4c1d-a4d9-c7fbc7f86d54",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524282526,
        "parent_id": "44d3b79e-76e2-4345-b151-7edfa8954b03",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "for(auto\u0026 x : c) x = 0;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "for(auto\u0026 x : c) x = 0;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524282526,
        "id": "2eebf523-0ad6-48ab-a512-43e55fb2bb1f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524282526,
        "parent_id": "44d3b79e-76e2-4345-b151-7edfa8954b03",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Here the only parameters are the container "
            ],
            [
              "c",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", and a variable "
            ],
            [
              "x",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to hold the current value. This prevents the semantics errors previously pointed."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Here the only parameters are the container "
          },
          {
            "Text": "c",
            "AttrFlags": 2
          },
          {
            "Text": ", and a variable "
          },
          {
            "Text": "x",
            "AttrFlags": 2
          },
          {
            "Text": " to hold the current value. This prevents the semantics errors previously pointed."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524282526,
        "id": "911e75a1-d781-48bc-9f38-38c1255a2481",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524282526,
        "parent_id": "44d3b79e-76e2-4345-b151-7edfa8954b03",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "According to the C++11 standard, the underlying implementation is equivalent to:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "According to the C++11 standard, the underlying implementation is equivalent to:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524282526,
        "id": "8c3790a5-5f37-40ea-9cc4-a7fa7997ffdb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524282526,
        "parent_id": "44d3b79e-76e2-4345-b151-7edfa8954b03",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "for(auto begin = c.begin(), end = c.end(); begin != end; ++begin)\n{\n    // ...\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "for(auto begin = c.begin(), end = c.end(); begin != end; ++begin)\n{\n    // ...\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524282526,
        "id": "e1dec85b-f736-4e0b-a46e-e9c2fecb69b4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524282526,
        "parent_id": "44d3b79e-76e2-4345-b151-7edfa8954b03",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In such implementation, the expression "
            ],
            [
              "auto begin = c.begin(), end = c.end();",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " forces "
            ],
            [
              "begin",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "end",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to be of the same type, while "
            ],
            [
              "end",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is never incremented, nor dereferenced. So the range-based for loop only works for containers defined by a pair iterator/iterator. The C++17 standard relaxes this constraint by changing the implementation to:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In such implementation, the expression "
          },
          {
            "Text": "auto begin = c.begin(), end = c.end();",
            "AttrFlags": 2
          },
          {
            "Text": " forces "
          },
          {
            "Text": "begin",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "end",
            "AttrFlags": 2
          },
          {
            "Text": " to be of the same type, while "
          },
          {
            "Text": "end",
            "AttrFlags": 2
          },
          {
            "Text": " is never incremented, nor dereferenced. So the range-based for loop only works for containers defined by a pair iterator/iterator. The C++17 standard relaxes this constraint by changing the implementation to:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524282526,
        "id": "fe8de56d-c3a6-40e7-9f76-402a12ac5833",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524282526,
        "parent_id": "44d3b79e-76e2-4345-b151-7edfa8954b03",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "auto begin = c.begin();\nauto end = c.end();\nfor(; begin != end; ++begin)\n{\n    // ...\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "auto begin = c.begin();\nauto end = c.end();\nfor(; begin != end; ++begin)\n{\n    // ...\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524282527,
        "id": "5340a406-b248-43d8-96f3-62736a8c5c9a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524282527,
        "parent_id": "44d3b79e-76e2-4345-b151-7edfa8954b03",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Here "
            ],
            [
              "begin",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "end",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " are allowed to be of different types, as long as they can be compared for inequality. This allows to loop through more containers, e.g. a container defined by a pair iterator/sentinel."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Here "
          },
          {
            "Text": "begin",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "end",
            "AttrFlags": 2
          },
          {
            "Text": " are allowed to be of different types, as long as they can be compared for inequality. This allows to loop through more containers, e.g. a container defined by a pair iterator/sentinel."
          }
        ]
      }
    ],
    "title": "010 Looping through a container"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}