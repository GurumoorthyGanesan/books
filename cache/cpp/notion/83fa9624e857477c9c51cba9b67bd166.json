{
  "ID": "83fa9624-e857-477c-9c51-cba9b67bd166",
  "Root": {
    "alive": true,
    "content": [
      "13a716cc-ea0b-4f83-b344-b7a42d74d54f",
      "56ef68c4-ad10-4ad6-b132-1a934766ceaf",
      "c32fa4eb-7675-4ba1-8e37-8faba50c778a",
      "a49f3ad6-93ef-4524-bea7-893eeabadfda",
      "0cda6e5d-0e07-4341-9f04-423d96aff92d",
      "c92e64a8-17d1-4a61-af44-334893ceeeb9",
      "b3ea9f2e-a987-4a00-b4a6-dec72591aca3",
      "dd0500e3-2413-42c6-8fbd-3a0aeb4d1acd",
      "9bd68fc7-9141-46d9-942d-44950647dff6",
      "f2297723-3b1a-4cb9-8bff-fa35d09d2ab0"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550521960524,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "83fa9624-e857-477c-9c51-cba9b67bd166",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550796660000,
    "parent_id": "cbd900b3-1684-4f0d-977a-5a5b2a20aff3",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Detect if expression is valid"
        ]
      ]
    },
    "type": "page",
    "version": 19,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521960523,
        "id": "13a716cc-ea0b-4f83-b344-b7a42d74d54f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521960523,
        "parent_id": "83fa9624-e857-477c-9c51-cba9b67bd166",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It is possible to detect whether an operator or function can be called on a type. To test if a class has an overload of "
            ],
            [
              "std::hash",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", one can do this:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It is possible to detect whether an operator or function can be called on a type. To test if a class has an overload of "
          },
          {
            "Text": "std::hash",
            "AttrFlags": 2
          },
          {
            "Text": ", one can do this:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521960523,
        "id": "56ef68c4-ad10-4ad6-b132-1a934766ceaf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550796660000,
        "parent_id": "83fa9624-e857-477c-9c51-cba9b67bd166",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "#include \u003cfunctional\u003e // for std::hash\n#include \u003ctype_traits\u003e // for std::false_type and std::true_type\n#include \u003cutility\u003e // for std::declval\n\ntemplate\u003cclass, class = void\u003e\nstruct has_hash\n    : std::false_type\n{};\n\ntemplate\u003cclass T\u003e\nstruct has_hash\u003cT, decltype(std::hash\u003cT\u003e()(std::declval\u003cT\u003e()), void())\u003e\n    : std::true_type\n{};"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "#include \u003cfunctional\u003e // for std::hash\n#include \u003ctype_traits\u003e // for std::false_type and std::true_type\n#include \u003cutility\u003e // for std::declval\n\ntemplate\u003cclass, class = void\u003e\nstruct has_hash\n    : std::false_type\n{};\n\ntemplate\u003cclass T\u003e\nstruct has_hash\u003cT, decltype(std::hash\u003cT\u003e()(std::declval\u003cT\u003e()), void())\u003e\n    : std::true_type\n{};",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521960523,
        "id": "c32fa4eb-7675-4ba1-8e37-8faba50c778a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521960523,
        "parent_id": "83fa9624-e857-477c-9c51-cba9b67bd166",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Since C++17, "
            ],
            [
              "std::void_t",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can be used to simplify this type of construct"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Since C++17, "
          },
          {
            "Text": "std::void_t",
            "AttrFlags": 2
          },
          {
            "Text": " can be used to simplify this type of construct"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521960523,
        "id": "a49f3ad6-93ef-4524-bea7-893eeabadfda",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550796660000,
        "parent_id": "83fa9624-e857-477c-9c51-cba9b67bd166",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "#include \u003cfunctional\u003e // for std::hash\n#include \u003ctype_traits\u003e // for std::false_type, std::true_type, std::void_t\n#include \u003cutility\u003e // for std::declval\n\ntemplate\u003cclass, class = std::void_t\u003c\u003e \u003e\nstruct has_hash\n    : std::false_type\n{};\n\ntemplate\u003cclass T\u003e\nstruct has_hash\u003cT, std::void_t\u003c decltype(std::hash\u003cT\u003e()(std::declval\u003cT\u003e())) \u003e \u003e\n    : std::true_type\n{};"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "#include \u003cfunctional\u003e // for std::hash\n#include \u003ctype_traits\u003e // for std::false_type, std::true_type, std::void_t\n#include \u003cutility\u003e // for std::declval\n\ntemplate\u003cclass, class = std::void_t\u003c\u003e \u003e\nstruct has_hash\n    : std::false_type\n{};\n\ntemplate\u003cclass T\u003e\nstruct has_hash\u003cT, std::void_t\u003c decltype(std::hash\u003cT\u003e()(std::declval\u003cT\u003e())) \u003e \u003e\n    : std::true_type\n{};",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521960524,
        "id": "0cda6e5d-0e07-4341-9f04-423d96aff92d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521960524,
        "parent_id": "83fa9624-e857-477c-9c51-cba9b67bd166",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "where "
            ],
            [
              "std::void_t",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is defined as:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "where "
          },
          {
            "Text": "std::void_t",
            "AttrFlags": 2
          },
          {
            "Text": " is defined as:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521960524,
        "id": "c92e64a8-17d1-4a61-af44-334893ceeeb9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550796660000,
        "parent_id": "83fa9624-e857-477c-9c51-cba9b67bd166",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "template\u003c class... \u003e using void_t = void;"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "template\u003c class... \u003e using void_t = void;",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521960524,
        "id": "b3ea9f2e-a987-4a00-b4a6-dec72591aca3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521960524,
        "parent_id": "83fa9624-e857-477c-9c51-cba9b67bd166",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For detecting if an operator, such as "
            ],
            [
              "operator\u003c",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is defined, the syntax is almost the same:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For detecting if an operator, such as "
          },
          {
            "Text": "operator\u003c",
            "AttrFlags": 2
          },
          {
            "Text": " is defined, the syntax is almost the same:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521960524,
        "id": "dd0500e3-2413-42c6-8fbd-3a0aeb4d1acd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550796660000,
        "parent_id": "83fa9624-e857-477c-9c51-cba9b67bd166",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "template\u003cclass, class = void\u003e\nstruct has_less_than\n    : std::false_type\n{};\n\ntemplate\u003cclass T\u003e\nstruct has_less_than\u003cT, decltype(std::declval\u003cT\u003e() \u003c std::declval\u003cT\u003e(), void())\u003e\n    : std::true_type\n{};"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "template\u003cclass, class = void\u003e\nstruct has_less_than\n    : std::false_type\n{};\n\ntemplate\u003cclass T\u003e\nstruct has_less_than\u003cT, decltype(std::declval\u003cT\u003e() \u003c std::declval\u003cT\u003e(), void())\u003e\n    : std::true_type\n{};",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521960524,
        "id": "9bd68fc7-9141-46d9-942d-44950647dff6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550521960524,
        "parent_id": "83fa9624-e857-477c-9c51-cba9b67bd166",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "These can be used to use a "
            ],
            [
              "std::unordered_map\u003cT\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " if "
            ],
            [
              "T",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " has an overload for "
            ],
            [
              "std::hash",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", but otherwise attempt to use a "
            ],
            [
              "std::map\u003cT\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "These can be used to use a "
          },
          {
            "Text": "std::unordered_map\u003cT\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " if "
          },
          {
            "Text": "T",
            "AttrFlags": 2
          },
          {
            "Text": " has an overload for "
          },
          {
            "Text": "std::hash",
            "AttrFlags": 2
          },
          {
            "Text": ", but otherwise attempt to use a "
          },
          {
            "Text": "std::map\u003cT\u003e",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550521960524,
        "id": "f2297723-3b1a-4cb9-8bff-fa35d09d2ab0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550796660000,
        "parent_id": "83fa9624-e857-477c-9c51-cba9b67bd166",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "template \u003cclass K, class V\u003e\nusing hash_invariant_map = std::conditional_t\u003c\n    has_hash\u003cK\u003e::value,\n    std::unordered_map\u003cK, V\u003e,\n    std::map\u003cK,V\u003e\u003e;"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "template \u003cclass K, class V\u003e\nusing hash_invariant_map = std::conditional_t\u003c\n    has_hash\u003cK\u003e::value,\n    std::unordered_map\u003cK, V\u003e,\n    std::map\u003cK,V\u003e\u003e;",
        "code_language": "C++"
      }
    ],
    "title": "Detect if expression is valid",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}