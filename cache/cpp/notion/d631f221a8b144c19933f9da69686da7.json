{
  "ID": "d631f221-a8b1-44c1-9933-f9da69686da7",
  "Root": {
    "alive": true,
    "content": [
      "9953a9c3-8e0a-4414-885e-d03c830d9f3e",
      "96eb903f-8c95-4226-9713-0363d5f5c6da",
      "af16eef0-9e05-4d36-9aea-8633e74a868f",
      "5e4716c8-962b-4eb4-834c-1017e14796de",
      "e3dcd7f4-28f8-4a05-9760-9a766d955e49",
      "513c745e-829d-4881-bd5e-2f7355a06398",
      "a9e36ffa-1c64-44cc-a479-965863eddce5",
      "8a9e2d46-837a-42f0-8e60-208d95f2ecb5",
      "525c5ebc-40f8-4dab-8fc6-9dd447ea09cf",
      "4907c37a-f8c3-4d5b-b61d-16f6ecd03dfd",
      "fd286224-8ac9-498b-83e6-92ad891c227e",
      "0dbc4986-d7bc-4ad6-b9b7-a790fd98788c",
      "db6070a0-7a5b-4f41-b8a0-96c3099ce1d0",
      "28a9245d-3157-478a-87b1-4f0f82e98138",
      "b377d47b-87e3-495a-b7f1-660e9c082070"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522058858,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "d631f221-a8b1-44c1-9933-f9da69686da7",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550655720000,
    "parent_id": "2be9c7d5-be12-439a-8968-ad057c67187a",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Unary operators"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522058855,
        "id": "9953a9c3-8e0a-4414-885e-d03c830d9f3e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522058855,
        "parent_id": "d631f221-a8b1-44c1-9933-f9da69686da7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You can overload the 2 unary operators:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You can overload the 2 unary operators:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522058856,
        "id": "96eb903f-8c95-4226-9713-0363d5f5c6da",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522058856,
        "parent_id": "d631f221-a8b1-44c1-9933-f9da69686da7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "++foo",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "foo++",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "++foo",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "foo++",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522058856,
        "id": "af16eef0-9e05-4d36-9aea-8633e74a868f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522058856,
        "parent_id": "d631f221-a8b1-44c1-9933-f9da69686da7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "--foo",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "foo--",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "--foo",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "foo--",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522058856,
        "id": "5e4716c8-962b-4eb4-834c-1017e14796de",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522058856,
        "parent_id": "d631f221-a8b1-44c1-9933-f9da69686da7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Overloading is the same for both types ("
            ],
            [
              "++",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "--",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "). Scroll down for explanation"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Overloading is the same for both types ("
          },
          {
            "Text": "++",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "--",
            "AttrFlags": 2
          },
          {
            "Text": "). Scroll down for explanation"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522058856,
        "id": "e3dcd7f4-28f8-4a05-9760-9a766d955e49",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522058856,
        "parent_id": "d631f221-a8b1-44c1-9933-f9da69686da7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Overloading outside of "
            ],
            [
              "class",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "/"
            ],
            [
              "struct",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Overloading outside of "
          },
          {
            "Text": "class",
            "AttrFlags": 2
          },
          {
            "Text": "/"
          },
          {
            "Text": "struct",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522058857,
        "id": "513c745e-829d-4881-bd5e-2f7355a06398",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522058857,
        "parent_id": "d631f221-a8b1-44c1-9933-f9da69686da7",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "//Prefix operator ++foo\nT\u0026 operator++(T\u0026 lhs)\n{\n    //Perform addition\n    return lhs;\n}\n\n//Postfix operator foo++ (int argument is used to separate pre- and postfix) \n//Should be implemented in terms of ++foo (prefix operator)\nT operator++(T\u0026 lhs, int)\n{\n    T t(lhs);\n    ++lhs;\n    return t;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "//Prefix operator ++foo\nT\u0026 operator++(T\u0026 lhs)\n{\n    //Perform addition\n    return lhs;\n}\n\n//Postfix operator foo++ (int argument is used to separate pre- and postfix) \n//Should be implemented in terms of ++foo (prefix operator)\nT operator++(T\u0026 lhs, int)\n{\n    T t(lhs);\n    ++lhs;\n    return t;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522058857,
        "id": "a9e36ffa-1c64-44cc-a479-965863eddce5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522058857,
        "parent_id": "d631f221-a8b1-44c1-9933-f9da69686da7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Overloading inside of "
            ],
            [
              "class",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "/"
            ],
            [
              "struct",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Overloading inside of "
          },
          {
            "Text": "class",
            "AttrFlags": 2
          },
          {
            "Text": "/"
          },
          {
            "Text": "struct",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522058857,
        "id": "8a9e2d46-837a-42f0-8e60-208d95f2ecb5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522058857,
        "parent_id": "d631f221-a8b1-44c1-9933-f9da69686da7",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "//Prefix operator ++foo\nT\u0026 operator++()\n{\n    //Perform addition\n    return *this;\n}\n\n//Postfix operator foo++ (int argument is used to separate pre- and postfix) \n//Should be implemented in terms of ++foo (prefix operator)\nT operator++(int)\n{\n    T t(*this);\n    ++(*this);\n    return t;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "//Prefix operator ++foo\nT\u0026 operator++()\n{\n    //Perform addition\n    return *this;\n}\n\n//Postfix operator foo++ (int argument is used to separate pre- and postfix) \n//Should be implemented in terms of ++foo (prefix operator)\nT operator++(int)\n{\n    T t(*this);\n    ++(*this);\n    return t;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522058857,
        "id": "525c5ebc-40f8-4dab-8fc6-9dd447ea09cf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522058857,
        "parent_id": "d631f221-a8b1-44c1-9933-f9da69686da7",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522058857,
        "id": "4907c37a-f8c3-4d5b-b61d-16f6ecd03dfd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522058857,
        "parent_id": "d631f221-a8b1-44c1-9933-f9da69686da7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note: The prefix operator returns a reference to itself, so that you can continue operations on it. The first argument is a reference, as the prefix operator changes the object, that’s also the reason why it isn’t "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (you wouldn’t be able to modify it otherwise)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note: The prefix operator returns a reference to itself, so that you can continue operations on it. The first argument is a reference, as the prefix operator changes the object, that’s also the reason why it isn’t "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": " (you wouldn’t be able to modify it otherwise)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522058857,
        "id": "fd286224-8ac9-498b-83e6-92ad891c227e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522058857,
        "parent_id": "d631f221-a8b1-44c1-9933-f9da69686da7",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522058857,
        "id": "0dbc4986-d7bc-4ad6-b9b7-a790fd98788c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522058857,
        "parent_id": "d631f221-a8b1-44c1-9933-f9da69686da7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The postfix operator returns by value a temporary (the previous value), and so it cannot be a reference, as it would be a reference to a temporary, which would be garbage value at the end of the function, because the temporary variable goes out of scope). It also cannot be "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", because you should be able to modify it directly."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The postfix operator returns by value a temporary (the previous value), and so it cannot be a reference, as it would be a reference to a temporary, which would be garbage value at the end of the function, because the temporary variable goes out of scope). It also cannot be "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": ", because you should be able to modify it directly."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522058858,
        "id": "db6070a0-7a5b-4f41-b8a0-96c3099ce1d0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522058858,
        "parent_id": "d631f221-a8b1-44c1-9933-f9da69686da7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The first argument is a non-"
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " reference to the “calling” object, because if it were "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", you wouldn’t be able to modify it, and if it weren’t a reference, you wouldn’t change the original value."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The first argument is a non-"
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": " reference to the “calling” object, because if it were "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": ", you wouldn’t be able to modify it, and if it weren’t a reference, you wouldn’t change the original value."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522058858,
        "id": "28a9245d-3157-478a-87b1-4f0f82e98138",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522058858,
        "parent_id": "d631f221-a8b1-44c1-9933-f9da69686da7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It is because of the copying needed in postfix operator overloads that it’s better to make it a habit to use prefix ++ instead of postfix ++ in "
            ],
            [
              "for",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " loops. From the "
            ],
            [
              "for",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " loop perspective, they’re usually functionally equivalent, but there might be a slight performance advantage to using prefix ++, especially with “fat” classes with a lot of members to copy. Example of using prefix ++ in a for loop:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It is because of the copying needed in postfix operator overloads that it’s better to make it a habit to use prefix ++ instead of postfix ++ in "
          },
          {
            "Text": "for",
            "AttrFlags": 2
          },
          {
            "Text": " loops. From the "
          },
          {
            "Text": "for",
            "AttrFlags": 2
          },
          {
            "Text": " loop perspective, they’re usually functionally equivalent, but there might be a slight performance advantage to using prefix ++, especially with “fat” classes with a lot of members to copy. Example of using prefix ++ in a for loop:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522058858,
        "id": "b377d47b-87e3-495a-b7f1-660e9c082070",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522058858,
        "parent_id": "d631f221-a8b1-44c1-9933-f9da69686da7",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "for (list\u003cstring\u003e::const_iterator it = tokens.begin();\n     it != tokens.end();\n     ++it) { // Don't use it++\n    ...\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "for (list\u003cstring\u003e::const_iterator it = tokens.begin();\n     it != tokens.end();\n     ++it) { // Don't use it++\n    ...\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "Unary operators",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}