{
  "ID": "7c8c7715-28bf-418a-92af-0f455add0ba6",
  "Root": {
    "alive": true,
    "content": [
      "0990985a-1630-46e2-b848-2c4f408c4153",
      "c41fba12-4a73-4ac6-b5ed-8380d528b9ed",
      "369e0cd1-ea86-4d87-9610-7635ec2f2d5e",
      "c2cfdba1-2862-4869-a270-2e23edb2f602",
      "86aa3133-ebd3-499b-ad98-189200cde1e0",
      "3bb955aa-d935-4540-a763-bb6e2e895f24",
      "1e6cf0bf-0718-42c7-b790-3ba4cd47a432",
      "0383d3bd-888a-46aa-9ba7-224a97cca3f0",
      "0c00a605-bcb9-4613-a3f7-6f1e95ab6180",
      "7444d560-6236-439d-8772-ee033b6820be",
      "1d49babf-4209-493a-8edd-b93fa78e3814",
      "464cf590-d4a7-42bb-a957-a58e9f4258ab",
      "2688d90d-2c1d-4cbe-a036-8d3edec0b256",
      "893a570d-231d-44ba-ade1-c350b0e9a052",
      "2a6603d3-c328-47f1-a4ab-df0ed63c3ac5"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550524722665,
    "id": "7c8c7715-28bf-418a-92af-0f455add0ba6",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550524722665,
    "parent_id": "5731e795-bc6e-4f67-a20f-e1ea328ebb4e",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "010 Need for Memory Model"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524722660,
        "id": "0990985a-1630-46e2-b848-2c4f408c4153",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524722660,
        "parent_id": "7c8c7715-28bf-418a-92af-0f455add0ba6",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int x, y;\nbool ready = false;\n\nvoid init()\n{\n  x = 2;\n  y = 3;\n  ready = true;\n}\nvoid use()\n{\n  if (ready)\n    std::cout \u003c\u003c x + y;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int x, y;\nbool ready = false;\n\nvoid init()\n{\n  x = 2;\n  y = 3;\n  ready = true;\n}\nvoid use()\n{\n  if (ready)\n    std::cout \u003c\u003c x + y;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524722661,
        "id": "c41fba12-4a73-4ac6-b5ed-8380d528b9ed",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524722661,
        "parent_id": "7c8c7715-28bf-418a-92af-0f455add0ba6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "One thread calls the "
            ],
            [
              "init()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " function while another thread (or signal handler) calls the "
            ],
            [
              "use()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " function. One might expect that the "
            ],
            [
              "use()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " function will either print "
            ],
            [
              "5",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or do nothing. This may not always be the case for several reasons:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "One thread calls the "
          },
          {
            "Text": "init()",
            "AttrFlags": 2
          },
          {
            "Text": " function while another thread (or signal handler) calls the "
          },
          {
            "Text": "use()",
            "AttrFlags": 2
          },
          {
            "Text": " function. One might expect that the "
          },
          {
            "Text": "use()",
            "AttrFlags": 2
          },
          {
            "Text": " function will either print "
          },
          {
            "Text": "5",
            "AttrFlags": 2
          },
          {
            "Text": " or do nothing. This may not always be the case for several reasons:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524722661,
        "id": "369e0cd1-ea86-4d87-9610-7635ec2f2d5e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524722661,
        "parent_id": "7c8c7715-28bf-418a-92af-0f455add0ba6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The CPU may reorder the writes that happen in "
            ],
            [
              "init()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " so that the code that actually executes might look like:"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "The CPU may reorder the writes that happen in "
          },
          {
            "Text": "init()",
            "AttrFlags": 2
          },
          {
            "Text": " so that the code that actually executes might look like:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524722661,
        "id": "c2cfdba1-2862-4869-a270-2e23edb2f602",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524722661,
        "parent_id": "7c8c7715-28bf-418a-92af-0f455add0ba6",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "void init()\n{\n  ready = true;\n  x = 2;\n  y = 3;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "void init()\n{\n  ready = true;\n  x = 2;\n  y = 3;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524722662,
        "id": "86aa3133-ebd3-499b-ad98-189200cde1e0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524722662,
        "parent_id": "7c8c7715-28bf-418a-92af-0f455add0ba6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The CPU may reorder the reads that happen in "
            ],
            [
              "use()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " so that the actually executed code might become:"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "The CPU may reorder the reads that happen in "
          },
          {
            "Text": "use()",
            "AttrFlags": 2
          },
          {
            "Text": " so that the actually executed code might become:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524722662,
        "id": "3bb955aa-d935-4540-a763-bb6e2e895f24",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524722662,
        "parent_id": "7c8c7715-28bf-418a-92af-0f455add0ba6",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "void use()\n{\n  int local_x = x;\n  int local_y = y;\n  if (ready)\n    std::cout \u003c\u003c local_x + local_y;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "void use()\n{\n  int local_x = x;\n  int local_y = y;\n  if (ready)\n    std::cout \u003c\u003c local_x + local_y;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524722662,
        "id": "1e6cf0bf-0718-42c7-b790-3ba4cd47a432",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524722662,
        "parent_id": "7c8c7715-28bf-418a-92af-0f455add0ba6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "An optimizing C++ compiler may decide to reorder the program in similar way."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "An optimizing C++ compiler may decide to reorder the program in similar way."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524722663,
        "id": "0383d3bd-888a-46aa-9ba7-224a97cca3f0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524722663,
        "parent_id": "7c8c7715-28bf-418a-92af-0f455add0ba6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Such reordering cannot change the behavior of a program running in single thread because a thread cannot interleave the calls to "
            ],
            [
              "init()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "use()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". On the other hand in a multi-threaded setting one thread may see part of the writes performed by the other thread where it may happen that "
            ],
            [
              "use()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " may see "
            ],
            [
              "ready==true",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and garbage in "
            ],
            [
              "x",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "y",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or both."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Such reordering cannot change the behavior of a program running in single thread because a thread cannot interleave the calls to "
          },
          {
            "Text": "init()",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "use()",
            "AttrFlags": 2
          },
          {
            "Text": ". On the other hand in a multi-threaded setting one thread may see part of the writes performed by the other thread where it may happen that "
          },
          {
            "Text": "use()",
            "AttrFlags": 2
          },
          {
            "Text": " may see "
          },
          {
            "Text": "ready==true",
            "AttrFlags": 2
          },
          {
            "Text": " and garbage in "
          },
          {
            "Text": "x",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "y",
            "AttrFlags": 2
          },
          {
            "Text": " or both."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524722663,
        "id": "0c00a605-bcb9-4613-a3f7-6f1e95ab6180",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524722663,
        "parent_id": "7c8c7715-28bf-418a-92af-0f455add0ba6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The C++ Memory Model allows the programmer to specify which reordering operations are permitted and which are not, so that a multi-threaded program would also be able to behave as expected. The example above can be rewritten in thread-safe way like this:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The C++ Memory Model allows the programmer to specify which reordering operations are permitted and which are not, so that a multi-threaded program would also be able to behave as expected. The example above can be rewritten in thread-safe way like this:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524722663,
        "id": "7444d560-6236-439d-8772-ee033b6820be",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524722663,
        "parent_id": "7c8c7715-28bf-418a-92af-0f455add0ba6",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int x, y;\nstd::atomic\u003cbool\u003e ready{false};\n\nvoid init()\n{\n  x = 2;\n  y = 3;\n  ready.store(true, std::memory_order_release);\n}\nvoid use()\n{\n  if (ready.load(std::memory_order_acquire))\n    std::cout \u003c\u003c x + y;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int x, y;\nstd::atomic\u003cbool\u003e ready{false};\n\nvoid init()\n{\n  x = 2;\n  y = 3;\n  ready.store(true, std::memory_order_release);\n}\nvoid use()\n{\n  if (ready.load(std::memory_order_acquire))\n    std::cout \u003c\u003c x + y;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524722663,
        "id": "1d49babf-4209-493a-8edd-b93fa78e3814",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524722663,
        "parent_id": "7c8c7715-28bf-418a-92af-0f455add0ba6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Here "
            ],
            [
              "init()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " performs "
            ],
            [
              "atomic store-release",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " operation. This not only stores the value "
            ],
            [
              "true",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " into "
            ],
            [
              "ready",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", but also tells the compiler that it cannot move this operation before write operations that are "
            ],
            [
              "sequenced before",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " it."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Here "
          },
          {
            "Text": "init()",
            "AttrFlags": 2
          },
          {
            "Text": " performs "
          },
          {
            "Text": "atomic store-release",
            "AttrFlags": 4
          },
          {
            "Text": " operation. This not only stores the value "
          },
          {
            "Text": "true",
            "AttrFlags": 2
          },
          {
            "Text": " into "
          },
          {
            "Text": "ready",
            "AttrFlags": 2
          },
          {
            "Text": ", but also tells the compiler that it cannot move this operation before write operations that are "
          },
          {
            "Text": "sequenced before",
            "AttrFlags": 4
          },
          {
            "Text": " it."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524722664,
        "id": "464cf590-d4a7-42bb-a957-a58e9f4258ab",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524722664,
        "parent_id": "7c8c7715-28bf-418a-92af-0f455add0ba6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "use()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " function does an "
            ],
            [
              "atomic load-acquire",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " operation. It reads the current value of "
            ],
            [
              "ready",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and also forbids the compiler from placing read operations that are "
            ],
            [
              "sequenced after",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " it to "
            ],
            [
              "happen before",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " the "
            ],
            [
              "atomic load-acquire",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "use()",
            "AttrFlags": 2
          },
          {
            "Text": " function does an "
          },
          {
            "Text": "atomic load-acquire",
            "AttrFlags": 4
          },
          {
            "Text": " operation. It reads the current value of "
          },
          {
            "Text": "ready",
            "AttrFlags": 2
          },
          {
            "Text": " and also forbids the compiler from placing read operations that are "
          },
          {
            "Text": "sequenced after",
            "AttrFlags": 4
          },
          {
            "Text": " it to "
          },
          {
            "Text": "happen before",
            "AttrFlags": 4
          },
          {
            "Text": " the "
          },
          {
            "Text": "atomic load-acquire",
            "AttrFlags": 4
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524722664,
        "id": "2688d90d-2c1d-4cbe-a036-8d3edec0b256",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524722664,
        "parent_id": "7c8c7715-28bf-418a-92af-0f455add0ba6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "These atomic operations also cause the compiler to put whatever hardware instructions are needed to inform the CPU to refrain from the unwanted reorderings."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "These atomic operations also cause the compiler to put whatever hardware instructions are needed to inform the CPU to refrain from the unwanted reorderings."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524722665,
        "id": "893a570d-231d-44ba-ade1-c350b0e9a052",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524722665,
        "parent_id": "7c8c7715-28bf-418a-92af-0f455add0ba6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Because the "
            ],
            [
              "atomic store-release",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " is to the same memory location as the "
            ],
            [
              "atomic load-acquire",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ", the memory model stipulates that if the "
            ],
            [
              "load-acquire",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " operation sees the value written by the "
            ],
            [
              "store-release",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " operation, then all writes performed by "
            ],
            [
              "init()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "’s thread prior to that "
            ],
            [
              "store-release",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " will be visible to loads that "
            ],
            [
              "use()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "’s thread executes after its "
            ],
            [
              "load-acquire",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ". That is if "
            ],
            [
              "use()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " sees "
            ],
            [
              "ready==true",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", then it is guaranteed to see "
            ],
            [
              "x==2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "y==3",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Because the "
          },
          {
            "Text": "atomic store-release",
            "AttrFlags": 4
          },
          {
            "Text": " is to the same memory location as the "
          },
          {
            "Text": "atomic load-acquire",
            "AttrFlags": 4
          },
          {
            "Text": ", the memory model stipulates that if the "
          },
          {
            "Text": "load-acquire",
            "AttrFlags": 4
          },
          {
            "Text": " operation sees the value written by the "
          },
          {
            "Text": "store-release",
            "AttrFlags": 4
          },
          {
            "Text": " operation, then all writes performed by "
          },
          {
            "Text": "init()",
            "AttrFlags": 2
          },
          {
            "Text": "’s thread prior to that "
          },
          {
            "Text": "store-release",
            "AttrFlags": 4
          },
          {
            "Text": " will be visible to loads that "
          },
          {
            "Text": "use()",
            "AttrFlags": 2
          },
          {
            "Text": "’s thread executes after its "
          },
          {
            "Text": "load-acquire",
            "AttrFlags": 4
          },
          {
            "Text": ". That is if "
          },
          {
            "Text": "use()",
            "AttrFlags": 2
          },
          {
            "Text": " sees "
          },
          {
            "Text": "ready==true",
            "AttrFlags": 2
          },
          {
            "Text": ", then it is guaranteed to see "
          },
          {
            "Text": "x==2",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "y==3",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524722665,
        "id": "2a6603d3-c328-47f1-a4ab-df0ed63c3ac5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524722665,
        "parent_id": "7c8c7715-28bf-418a-92af-0f455add0ba6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note that the compiler and the CPU are still allowed to write to "
            ],
            [
              "y",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " before writing to "
            ],
            [
              "x",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", and similarly the reads from these variables in "
            ],
            [
              "use()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can happen in any order."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note that the compiler and the CPU are still allowed to write to "
          },
          {
            "Text": "y",
            "AttrFlags": 2
          },
          {
            "Text": " before writing to "
          },
          {
            "Text": "x",
            "AttrFlags": 2
          },
          {
            "Text": ", and similarly the reads from these variables in "
          },
          {
            "Text": "use()",
            "AttrFlags": 2
          },
          {
            "Text": " can happen in any order."
          }
        ]
      }
    ],
    "title": "010 Need for Memory Model"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}