{
  "ID": "06536f19-9a4c-40be-9011-1e2c5593af2e",
  "Root": {
    "alive": true,
    "content": [
      "991fc62e-c65d-4926-a645-9b047ce24ae0",
      "0a1d2812-117f-41c3-b8cc-454a5a8f0758",
      "b038c164-5803-428f-b2d3-7ad57bcbd60c",
      "6e1d6924-a999-458b-a976-067de765dacc",
      "a1b05224-bf7a-48a6-a449-67bdb1f467fe",
      "76fdcc21-fb13-4243-b585-c50c006883e4",
      "c715586c-9cac-4543-b9b6-2260494ad130",
      "8913e5b5-ef0e-43a4-bae4-bb56fa0e0a44",
      "5d4d025a-3883-4b92-9c82-83e8d949e452",
      "320b4acb-5189-4754-9b63-b37529d53bb8",
      "fd4719e0-5686-4e87-a6ea-34762a792c1d",
      "0d4792a3-6330-4135-817e-215f4b6c5bea",
      "0f9ec45b-d771-4b57-b033-41bf73d255b6",
      "8b0f458c-c035-4952-8be2-7718ceafa8ff",
      "f6fd366b-353c-46cd-8b3c-f670adddadb6",
      "5d8cfe27-5660-41e9-aef8-52bc1a6fb759",
      "3296ad60-9cee-4c90-9ad2-69205750ba15",
      "e62b4b93-066c-4383-ae06-263aaca82b6b",
      "08f63303-53b4-4378-b585-2cf94ef0e861"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522069568,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "06536f19-9a4c-40be-9011-1e2c5593af2e",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550655600000,
    "parent_id": "71517390-0244-456d-87c4-82c582ca8abf",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Generic lambdas"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522069560,
        "id": "991fc62e-c65d-4926-a645-9b047ce24ae0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522069560,
        "parent_id": "06536f19-9a4c-40be-9011-1e2c5593af2e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Lambda functions can take arguments of arbitrary types. This allows a lambda to be more generic:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Lambda functions can take arguments of arbitrary types. This allows a lambda to be more generic:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522069563,
        "id": "0a1d2812-117f-41c3-b8cc-454a5a8f0758",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522069563,
        "parent_id": "06536f19-9a4c-40be-9011-1e2c5593af2e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "auto twice = [](auto x){ return x+x; };\n\nint i = twice(2); // i == 4\nstd::string s = twice(\"hello\"); // s == \"hellohello\""
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "auto twice = [](auto x){ return x+x; };\n\nint i = twice(2); // i == 4\nstd::string s = twice(\"hello\"); // s == \"hellohello\"",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522069563,
        "id": "b038c164-5803-428f-b2d3-7ad57bcbd60c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522069563,
        "parent_id": "06536f19-9a4c-40be-9011-1e2c5593af2e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This is implemented in C++ by making the closure type’s "
            ],
            [
              "operator()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " overload a template function. The following type has equivalent behavior to the above lambda closure:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This is implemented in C++ by making the closure type’s "
          },
          {
            "Text": "operator()",
            "AttrFlags": 2
          },
          {
            "Text": " overload a template function. The following type has equivalent behavior to the above lambda closure:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522069563,
        "id": "6e1d6924-a999-458b-a976-067de765dacc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522069563,
        "parent_id": "06536f19-9a4c-40be-9011-1e2c5593af2e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "struct _unique_lambda_type\n{\n  template\u003ctypename T\u003e\n  auto operator() (T x) const {return x + x;}\n};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "struct _unique_lambda_type\n{\n  template\u003ctypename T\u003e\n  auto operator() (T x) const {return x + x;}\n};",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522069563,
        "id": "a1b05224-bf7a-48a6-a449-67bdb1f467fe",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522069563,
        "parent_id": "06536f19-9a4c-40be-9011-1e2c5593af2e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Not all parameters in a generic lambda need be generic:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Not all parameters in a generic lambda need be generic:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522069563,
        "id": "76fdcc21-fb13-4243-b585-c50c006883e4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522069563,
        "parent_id": "06536f19-9a4c-40be-9011-1e2c5593af2e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "[](auto x, int y) {return x + y;}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "[](auto x, int y) {return x + y;}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522069564,
        "id": "c715586c-9cac-4543-b9b6-2260494ad130",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522069564,
        "parent_id": "06536f19-9a4c-40be-9011-1e2c5593af2e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Here, "
            ],
            [
              "x",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is deduced based on the first function argument, while "
            ],
            [
              "y",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will always be "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Here, "
          },
          {
            "Text": "x",
            "AttrFlags": 2
          },
          {
            "Text": " is deduced based on the first function argument, while "
          },
          {
            "Text": "y",
            "AttrFlags": 2
          },
          {
            "Text": " will always be "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522069566,
        "id": "8913e5b5-ef0e-43a4-bae4-bb56fa0e0a44",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522069566,
        "parent_id": "06536f19-9a4c-40be-9011-1e2c5593af2e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Generic lambdas can take arguments by reference as well, using the usual rules for "
            ],
            [
              "auto",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "\u0026",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". If a generic parameter is taken as "
            ],
            [
              "auto\u0026\u0026",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", this is a "
            ],
            [
              "forwarding",
              [
                [
                  "i"
                ],
                [
                  "a",
                  "http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4164.pdf"
                ]
              ]
            ],
            [
              " reference",
              [
                [
                  "a",
                  "http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4164.pdf"
                ]
              ]
            ],
            [
              " to the passed in argument and not an "
            ],
            [
              "rvalue",
              [
                [
                  "i"
                ],
                [
                  "a",
                  "http://en.cppreference.com/w/cpp/language/reference"
                ]
              ]
            ],
            [
              " reference",
              [
                [
                  "a",
                  "http://en.cppreference.com/w/cpp/language/reference"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Generic lambdas can take arguments by reference as well, using the usual rules for "
          },
          {
            "Text": "auto",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "\u0026",
            "AttrFlags": 2
          },
          {
            "Text": ". If a generic parameter is taken as "
          },
          {
            "Text": "auto\u0026\u0026",
            "AttrFlags": 2
          },
          {
            "Text": ", this is a "
          },
          {
            "Text": "forwarding",
            "AttrFlags": 4,
            "Link": "http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4164.pdf"
          },
          {
            "Text": " reference",
            "Link": "http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4164.pdf"
          },
          {
            "Text": " to the passed in argument and not an "
          },
          {
            "Text": "rvalue",
            "AttrFlags": 4,
            "Link": "http://en.cppreference.com/w/cpp/language/reference"
          },
          {
            "Text": " reference",
            "Link": "http://en.cppreference.com/w/cpp/language/reference"
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522069567,
        "id": "5d4d025a-3883-4b92-9c82-83e8d949e452",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522069567,
        "parent_id": "06536f19-9a4c-40be-9011-1e2c5593af2e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "auto lamb1 = [](int \u0026\u0026x) {return x + 5;};\nauto lamb2 = [](auto \u0026\u0026x) {return x + 5;};\nint x = 10;\nlamb1(x); // Illegal; must use `std::move(x)` for `int\u0026\u0026` parameters.\nlamb2(x); // Legal; the type of `x` is deduced as `int\u0026`."
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "auto lamb1 = [](int \u0026\u0026x) {return x + 5;};\nauto lamb2 = [](auto \u0026\u0026x) {return x + 5;};\nint x = 10;\nlamb1(x); // Illegal; must use `std::move(x)` for `int\u0026\u0026` parameters.\nlamb2(x); // Legal; the type of `x` is deduced as `int\u0026`.",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522069567,
        "id": "320b4acb-5189-4754-9b63-b37529d53bb8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522069567,
        "parent_id": "06536f19-9a4c-40be-9011-1e2c5593af2e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Lambda functions can be variadic and perfectly forward their arguments:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Lambda functions can be variadic and perfectly forward their arguments:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522069567,
        "id": "fd4719e0-5686-4e87-a6ea-34762a792c1d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522069567,
        "parent_id": "06536f19-9a4c-40be-9011-1e2c5593af2e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "auto lam = [](auto\u0026\u0026... args){return f(std::forward\u003cdecltype(args)\u003e(args)...);};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "auto lam = [](auto\u0026\u0026... args){return f(std::forward\u003cdecltype(args)\u003e(args)...);};",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522069567,
        "id": "0d4792a3-6330-4135-817e-215f4b6c5bea",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522069567,
        "parent_id": "06536f19-9a4c-40be-9011-1e2c5593af2e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "or:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "or:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522069567,
        "id": "0f9ec45b-d771-4b57-b033-41bf73d255b6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522069567,
        "parent_id": "06536f19-9a4c-40be-9011-1e2c5593af2e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "auto lam = [](auto\u0026\u0026... args){return f(decltype(args)(args)...);};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "auto lam = [](auto\u0026\u0026... args){return f(decltype(args)(args)...);};",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522069567,
        "id": "8b0f458c-c035-4952-8be2-7718ceafa8ff",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522069567,
        "parent_id": "06536f19-9a4c-40be-9011-1e2c5593af2e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "which only works “properly” with variables of type "
            ],
            [
              "auto\u0026\u0026",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "which only works “properly” with variables of type "
          },
          {
            "Text": "auto\u0026\u0026",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522069567,
        "id": "f6fd366b-353c-46cd-8b3c-f670adddadb6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522069567,
        "parent_id": "06536f19-9a4c-40be-9011-1e2c5593af2e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A strong reason to use generic lambdas is for visiting syntax."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A strong reason to use generic lambdas is for visiting syntax."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522069567,
        "id": "5d8cfe27-5660-41e9-aef8-52bc1a6fb759",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522069567,
        "parent_id": "06536f19-9a4c-40be-9011-1e2c5593af2e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "boost::variant\u003cint, double\u003e value;\napply_visitor(value, [\u0026](auto\u0026\u0026 e){\n  std::cout \u003c\u003c e;\n});"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "boost::variant\u003cint, double\u003e value;\napply_visitor(value, [\u0026](auto\u0026\u0026 e){\n  std::cout \u003c\u003c e;\n});",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522069568,
        "id": "3296ad60-9cee-4c90-9ad2-69205750ba15",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522069568,
        "parent_id": "06536f19-9a4c-40be-9011-1e2c5593af2e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Here we are visiting in a polymorphic manner; but in other contexts, the names of the type we are passing isn’t interesting:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Here we are visiting in a polymorphic manner; but in other contexts, the names of the type we are passing isn’t interesting:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522069568,
        "id": "e62b4b93-066c-4383-ae06-263aaca82b6b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522069568,
        "parent_id": "06536f19-9a4c-40be-9011-1e2c5593af2e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "mutex_wrapped\u003cstd::ostream\u0026\u003e os = std::cout;\nos.write([\u0026](auto\u0026\u0026 os){\n  os \u003c\u003c \"hello world\\n\";\n});"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "mutex_wrapped\u003cstd::ostream\u0026\u003e os = std::cout;\nos.write([\u0026](auto\u0026\u0026 os){\n  os \u003c\u003c \"hello world\\n\";\n});",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522069568,
        "id": "08f63303-53b4-4378-b585-2cf94ef0e861",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522069568,
        "parent_id": "06536f19-9a4c-40be-9011-1e2c5593af2e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Repeating the type of "
            ],
            [
              "std::ostream\u0026",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is noise here; it would be like having to mention the type of a variable every time you use it. Here we are creating a visitor, but no a polymorphic one; "
            ],
            [
              "auto",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is used for the same reason you might use "
            ],
            [
              "auto",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in a "
            ],
            [
              "for(:)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " loop."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Repeating the type of "
          },
          {
            "Text": "std::ostream\u0026",
            "AttrFlags": 2
          },
          {
            "Text": " is noise here; it would be like having to mention the type of a variable every time you use it. Here we are creating a visitor, but no a polymorphic one; "
          },
          {
            "Text": "auto",
            "AttrFlags": 2
          },
          {
            "Text": " is used for the same reason you might use "
          },
          {
            "Text": "auto",
            "AttrFlags": 2
          },
          {
            "Text": " in a "
          },
          {
            "Text": "for(:)",
            "AttrFlags": 2
          },
          {
            "Text": " loop."
          }
        ]
      }
    ],
    "title": "Generic lambdas",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}