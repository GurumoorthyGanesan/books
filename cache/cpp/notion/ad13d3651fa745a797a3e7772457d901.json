{
  "ID": "ad13d365-1fa7-45a7-97a3-e7772457d901",
  "Root": {
    "alive": true,
    "content": [
      "d8f76fa7-b25b-4938-b4bc-715dae5b3d65",
      "5c995cf8-d789-41ee-8ae0-744e82675f56",
      "60690b88-7209-4e82-87b7-4db6bc1a8cc1",
      "5081bbd4-da6d-4dbb-9a66-6a2c1c5456d6",
      "62114cd3-df43-4de8-ae61-72da2798405b",
      "5c81183a-9336-4667-a910-f8764f7fedd1",
      "e25cab26-2b1c-4419-923a-7cf21b9a3c46",
      "51bcbcf3-3b4c-4cf2-8da2-7cc3a4182a5d",
      "2c1de327-7aa6-470e-9cf0-438dccf20a9b",
      "83cec49e-ac60-406e-917c-36d3112b7a49",
      "5a4ed127-75f1-436e-92df-8182762dfe4f",
      "e56b3428-0ba6-4703-9b47-a88725278fa0",
      "8a0dbfd7-5052-4ec7-abcd-0468c20d1994",
      "9eebbce8-1a95-492a-808a-9f2353c7236a",
      "fbdd0119-5799-4052-af59-0fd28e9e5d92",
      "5e54e923-9135-4145-a483-2316acdd7de3"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522347532,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "ad13d365-1fa7-45a7-97a3-e7772457d901",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550709720000,
    "parent_id": "48a240ac-2fc8-4208-bd39-82f2c3d27cb4",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Numeric value of a pointer"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522347528,
        "id": "d8f76fa7-b25b-4938-b4bc-715dae5b3d65",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522347528,
        "parent_id": "ad13d365-1fa7-45a7-97a3-e7772457d901",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The result of casting a pointer to an integer using "
            ],
            [
              "reinterpret_cast",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is implementation-defined, but “… is intended to be unsurprising to those who know the addressing structure of the underlying machine.”"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The result of casting a pointer to an integer using "
          },
          {
            "Text": "reinterpret_cast",
            "AttrFlags": 2
          },
          {
            "Text": " is implementation-defined, but “… is intended to be unsurprising to those who know the addressing structure of the underlying machine.”"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522347529,
        "id": "5c995cf8-d789-41ee-8ae0-744e82675f56",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522347529,
        "parent_id": "ad13d365-1fa7-45a7-97a3-e7772457d901",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int x = 42;\nint* p = \u0026x;\nlong addr = reinterpret_cast\u003clong\u003e(p);\nstd::cout \u003c\u003c addr \u003c\u003c \"\\n\"; // prints some numeric address,\n                           // probably in the architecture's native address format"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int x = 42;\nint* p = \u0026x;\nlong addr = reinterpret_cast\u003clong\u003e(p);\nstd::cout \u003c\u003c addr \u003c\u003c \"\\n\"; // prints some numeric address,\n                           // probably in the architecture's native address format",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522347529,
        "id": "60690b88-7209-4e82-87b7-4db6bc1a8cc1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522347529,
        "parent_id": "ad13d365-1fa7-45a7-97a3-e7772457d901",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Likewise, the pointer obtained by conversion from an integer is also implementation-defined."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Likewise, the pointer obtained by conversion from an integer is also implementation-defined."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522347529,
        "id": "5081bbd4-da6d-4dbb-9a66-6a2c1c5456d6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522347529,
        "parent_id": "ad13d365-1fa7-45a7-97a3-e7772457d901",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The right way to store a pointer as an integer is using the "
            ],
            [
              "uintptr_t",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "intptr_t",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " types:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The right way to store a pointer as an integer is using the "
          },
          {
            "Text": "uintptr_t",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "intptr_t",
            "AttrFlags": 2
          },
          {
            "Text": " types:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522347529,
        "id": "62114cd3-df43-4de8-ae61-72da2798405b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522347529,
        "parent_id": "ad13d365-1fa7-45a7-97a3-e7772457d901",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// `uintptr_t` was not in C++03. It's in C99, in \u003cstdint.h\u003e, as an optional type\n#include \u003cstdint.h\u003e\n\nuintptr_t uip;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// `uintptr_t` was not in C++03. It's in C99, in \u003cstdint.h\u003e, as an optional type\n#include \u003cstdint.h\u003e\n\nuintptr_t uip;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522347529,
        "id": "5c81183a-9336-4667-a910-f8764f7fedd1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522347529,
        "parent_id": "ad13d365-1fa7-45a7-97a3-e7772457d901",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// There is an optional `std::uintptr_t` in C++11\n#include \u003ccstdint\u003e\n\nstd::uintptr_t uip;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// There is an optional `std::uintptr_t` in C++11\n#include \u003ccstdint\u003e\n\nstd::uintptr_t uip;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522347529,
        "id": "e25cab26-2b1c-4419-923a-7cf21b9a3c46",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522347529,
        "parent_id": "ad13d365-1fa7-45a7-97a3-e7772457d901",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "C++11 refers to C99 for the definition "
            ],
            [
              "uintptr_t",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (C99 standard, 6.3.2.3):"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "C++11 refers to C99 for the definition "
          },
          {
            "Text": "uintptr_t",
            "AttrFlags": 2
          },
          {
            "Text": " (C99 standard, 6.3.2.3):"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522347530,
        "id": "51bcbcf3-3b4c-4cf2-8da2-7cc3a4182a5d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522347530,
        "parent_id": "ad13d365-1fa7-45a7-97a3-e7772457d901",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "an unsigned integer type with the property that any valid pointer to void can be converted to this type, then converted back to pointer to void, and the result will compare equal to the original pointer."
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "an unsigned integer type with the property that any valid pointer to void can be converted to this type, then converted back to pointer to void, and the result will compare equal to the original pointer."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522347530,
        "id": "2c1de327-7aa6-470e-9cf0-438dccf20a9b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522347530,
        "parent_id": "ad13d365-1fa7-45a7-97a3-e7772457d901",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "While, for the majority of modern platforms, you can assume a flat address space and that arithmetic on "
            ],
            [
              "uintptr_t",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is equivalent to arithmetic on "
            ],
            [
              "char *",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", it’s entirely possible for an implementation to perform any transformation when casting "
            ],
            [
              "void *",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to "
            ],
            [
              "uintptr_t",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " as long the transformation can be reversed when casting back from "
            ],
            [
              "uintptr_t",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to "
            ],
            [
              "void *",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "While, for the majority of modern platforms, you can assume a flat address space and that arithmetic on "
          },
          {
            "Text": "uintptr_t",
            "AttrFlags": 2
          },
          {
            "Text": " is equivalent to arithmetic on "
          },
          {
            "Text": "char *",
            "AttrFlags": 2
          },
          {
            "Text": ", it’s entirely possible for an implementation to perform any transformation when casting "
          },
          {
            "Text": "void *",
            "AttrFlags": 2
          },
          {
            "Text": " to "
          },
          {
            "Text": "uintptr_t",
            "AttrFlags": 2
          },
          {
            "Text": " as long the transformation can be reversed when casting back from "
          },
          {
            "Text": "uintptr_t",
            "AttrFlags": 2
          },
          {
            "Text": " to "
          },
          {
            "Text": "void *",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522347531,
        "id": "83cec49e-ac60-406e-917c-36d3112b7a49",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522347531,
        "parent_id": "ad13d365-1fa7-45a7-97a3-e7772457d901",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Technicalities",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Technicalities",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522347532,
        "id": "5a4ed127-75f1-436e-92df-8182762dfe4f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522347532,
        "parent_id": "ad13d365-1fa7-45a7-97a3-e7772457d901",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "On XSI-conformant (X/Open System Interfaces) systems, "
            ],
            [
              "intptr_t",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "uintptr_t",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " types are required, otherwise they are "
            ],
            [
              "optional",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "On XSI-conformant (X/Open System Interfaces) systems, "
          },
          {
            "Text": "intptr_t",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "uintptr_t",
            "AttrFlags": 2
          },
          {
            "Text": " types are required, otherwise they are "
          },
          {
            "Text": "optional",
            "AttrFlags": 1
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522347532,
        "id": "e56b3428-0ba6-4703-9b47-a88725278fa0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522347532,
        "parent_id": "ad13d365-1fa7-45a7-97a3-e7772457d901",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Within the meaning of the C standard, functions aren’t objects; it isn’t guaranteed by the C standard that "
            ],
            [
              "uintptr_t",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can hold a function pointer. Anyway POSIX (2.12.3) conformance requires that:"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Within the meaning of the C standard, functions aren’t objects; it isn’t guaranteed by the C standard that "
          },
          {
            "Text": "uintptr_t",
            "AttrFlags": 2
          },
          {
            "Text": " can hold a function pointer. Anyway POSIX (2.12.3) conformance requires that:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522347532,
        "id": "8a0dbfd7-5052-4ec7-abcd-0468c20d1994",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522347532,
        "parent_id": "ad13d365-1fa7-45a7-97a3-e7772457d901",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "All function pointer types shall have the same representation as the type pointer to void. Conversion of a function pointer to void * shall not alter the representation. A void * value resulting from such a conversion can be converted back to the original function pointer type, using an explicit cast, without loss of information."
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "All function pointer types shall have the same representation as the type pointer to void. Conversion of a function pointer to void * shall not alter the representation. A void * value resulting from such a conversion can be converted back to the original function pointer type, using an explicit cast, without loss of information."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522347532,
        "id": "9eebbce8-1a95-492a-808a-9f2353c7236a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522347532,
        "parent_id": "ad13d365-1fa7-45a7-97a3-e7772457d901",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "C99 §7.18.1:"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "C99 §7.18.1:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522347532,
        "id": "fbdd0119-5799-4052-af59-0fd28e9e5d92",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522347532,
        "parent_id": "ad13d365-1fa7-45a7-97a3-e7772457d901",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When typedef names differing only in the absence or presence of the initial u are defined, they shall denote corresponding signed and unsigned types as described in 6.2.5; an implementation providing one of these corresponding types shall also provide the other."
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "When typedef names differing only in the absence or presence of the initial u are defined, they shall denote corresponding signed and unsigned types as described in 6.2.5; an implementation providing one of these corresponding types shall also provide the other."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522347532,
        "id": "5e54e923-9135-4145-a483-2316acdd7de3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522347532,
        "parent_id": "ad13d365-1fa7-45a7-97a3-e7772457d901",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "uintptr_t",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " might make sense if you want to do things to the bits of the pointer that you can’t do as sensibly with a signed integer."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "uintptr_t",
            "AttrFlags": 2
          },
          {
            "Text": " might make sense if you want to do things to the bits of the pointer that you can’t do as sensibly with a signed integer."
          }
        ]
      }
    ],
    "title": "Numeric value of a pointer",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}