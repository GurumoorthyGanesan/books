{
  "ID": "65133362-c4a8-4dfa-9822-ab34d89c8c6e",
  "Root": {
    "alive": true,
    "content": [
      "8df05016-cf03-4166-8a43-a71b37b97c86",
      "b0c8b61c-e968-4a20-9254-e6f0b1d30d60",
      "4c4ddb8e-4d8f-436a-b405-96fce52f328e",
      "a4e9617b-c4bb-47d9-91ac-60a2de346ced",
      "c5bffe45-fad2-4a1c-a97d-69c55b6700b8",
      "4f1bd1db-d155-48d7-9b40-bc4daf9437b8",
      "3269619b-4af0-467f-927b-92f49e695761",
      "22f335e3-2736-4078-bdce-cccf4cc4a52d",
      "f38ebd65-bb44-4434-96c8-dea191ad395a",
      "c2106a5f-9abc-4fb4-b6e9-aaa038a3f55a",
      "be8ee2a3-80de-4617-865c-545f5b7bb97d"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522063446,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "65133362-c4a8-4dfa-9822-ab34d89c8c6e",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550655540000,
    "parent_id": "71517390-0244-456d-87c4-82c582ca8abf",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Lambdas"
        ]
      ]
    },
    "type": "page",
    "version": 10,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522063440,
        "id": "8df05016-cf03-4166-8a43-a71b37b97c86",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522063440,
        "parent_id": "65133362-c4a8-4dfa-9822-ab34d89c8c6e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Syntax"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Syntax"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522063442,
        "id": "b0c8b61c-e968-4a20-9254-e6f0b1d30d60",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522063442,
        "parent_id": "65133362-c4a8-4dfa-9822-ab34d89c8c6e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "["
            ],
            [
              "default-capture",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "capture-list",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              "] ("
            ],
            [
              "argument-list",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ") mutable "
            ],
            [
              "throw-specification",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "attributes",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " -\u003e "
            ],
            [
              "return-type",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " { "
            ],
            [
              "lambda-body",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " } // Order of lambda specifiers and attributes."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "["
          },
          {
            "Text": "default-capture",
            "AttrFlags": 4
          },
          {
            "Text": ", "
          },
          {
            "Text": "capture-list",
            "AttrFlags": 4
          },
          {
            "Text": "] ("
          },
          {
            "Text": "argument-list",
            "AttrFlags": 4
          },
          {
            "Text": ") mutable "
          },
          {
            "Text": "throw-specification",
            "AttrFlags": 4
          },
          {
            "Text": " "
          },
          {
            "Text": "attributes",
            "AttrFlags": 4
          },
          {
            "Text": " -\u003e "
          },
          {
            "Text": "return-type",
            "AttrFlags": 4
          },
          {
            "Text": " { "
          },
          {
            "Text": "lambda-body",
            "AttrFlags": 4
          },
          {
            "Text": " } // Order of lambda specifiers and attributes."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522063442,
        "id": "4c4ddb8e-4d8f-436a-b405-96fce52f328e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522063442,
        "parent_id": "65133362-c4a8-4dfa-9822-ab34d89c8c6e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "["
            ],
            [
              "capture-list",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              "] ("
            ],
            [
              "argument-list",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ") { "
            ],
            [
              "lambda-body",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " } // Common lambda definition."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "["
          },
          {
            "Text": "capture-list",
            "AttrFlags": 4
          },
          {
            "Text": "] ("
          },
          {
            "Text": "argument-list",
            "AttrFlags": 4
          },
          {
            "Text": ") { "
          },
          {
            "Text": "lambda-body",
            "AttrFlags": 4
          },
          {
            "Text": " } // Common lambda definition."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522063442,
        "id": "a4e9617b-c4bb-47d9-91ac-60a2de346ced",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522063442,
        "parent_id": "65133362-c4a8-4dfa-9822-ab34d89c8c6e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "[=] ("
            ],
            [
              "argument-list",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ") { "
            ],
            [
              "lambda-body",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " } // Captures all needed local variables by value."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "[=] ("
          },
          {
            "Text": "argument-list",
            "AttrFlags": 4
          },
          {
            "Text": ") { "
          },
          {
            "Text": "lambda-body",
            "AttrFlags": 4
          },
          {
            "Text": " } // Captures all needed local variables by value."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522063443,
        "id": "c5bffe45-fad2-4a1c-a97d-69c55b6700b8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522063443,
        "parent_id": "65133362-c4a8-4dfa-9822-ab34d89c8c6e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "[\u0026] ("
            ],
            [
              "argument-list",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ") { "
            ],
            [
              "lambda-body",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " } // Captures all needed local variables by reference."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "[\u0026] ("
          },
          {
            "Text": "argument-list",
            "AttrFlags": 4
          },
          {
            "Text": ") { "
          },
          {
            "Text": "lambda-body",
            "AttrFlags": 4
          },
          {
            "Text": " } // Captures all needed local variables by reference."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522063443,
        "id": "4f1bd1db-d155-48d7-9b40-bc4daf9437b8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522063443,
        "parent_id": "65133362-c4a8-4dfa-9822-ab34d89c8c6e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "["
            ],
            [
              "capture-list",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              "] { "
            ],
            [
              "lambda-body",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " } // Argument list and specifiers can be omitted."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "["
          },
          {
            "Text": "capture-list",
            "AttrFlags": 4
          },
          {
            "Text": "] { "
          },
          {
            "Text": "lambda-body",
            "AttrFlags": 4
          },
          {
            "Text": " } // Argument list and specifiers can be omitted."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522063443,
        "id": "3269619b-4af0-467f-927b-92f49e695761",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522063443,
        "parent_id": "65133362-c4a8-4dfa-9822-ab34d89c8c6e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Parameters"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Parameters"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522063445,
        "id": "22f335e3-2736-4078-bdce-cccf4cc4a52d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522063445,
        "parent_id": "65133362-c4a8-4dfa-9822-ab34d89c8c6e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Parameter | Details |\n——— | —–– |"
            ],
            [
              "default-capture",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " | Specifies how all non-listed variables are captured. Can be "
            ],
            [
              "=",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (capture by value) or "
            ],
            [
              "\u0026",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (capture by reference). If omitted, non-listed variables are inaccessible within the "
            ],
            [
              "lambda-body",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ". The "
            ],
            [
              "default-capture",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " must precede the "
            ],
            [
              "capture-list",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ". |"
            ],
            [
              "capture-list",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " | Specifies how local variables are made accessible within the "
            ],
            [
              "lambda-body",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ". Variables without prefix are captured by value. Variables prefixed with "
            ],
            [
              "\u0026",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " are captured by reference. Within a class method, "
            ],
            [
              "this",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can be used to make all its members accessible by reference. Non-listed variables are inaccessible, unless the list is preceded by a "
            ],
            [
              "default-capture",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ". |"
            ],
            [
              "argument-list",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " | Specifies the arguments of the lambda function. |\nmutable | "
            ],
            [
              "(optional)",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " Normally variables captured by value are "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Specifying "
            ],
            [
              "mutable",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " makes them non-const. Changes to those variables are retained between calls."
            ],
            [
              "throw-specification",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " | "
            ],
            [
              "(optional)",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " Specifies the exception throwing behavior of the lambda function. For example: "
            ],
            [
              "noexcept",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "throw(std::exception)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ".|"
            ],
            [
              "attributes",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " | "
            ],
            [
              "(optional)",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " Any attributes for the lambda function. For example, if the "
            ],
            [
              "lambda-body",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " always throws an exception then "
            ],
            [
              "[[noreturn]]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can be used.\n-\u003e "
            ],
            [
              "return-type",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " | "
            ],
            [
              "(optional)",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " Specifies the return type of the lambda function. Required when the return type cannot be determined by the compiler. |"
            ],
            [
              "lambda-body",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " | A code block containing the implementation of the lambda function. |"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Parameter | Details |\n——— | —–– |"
          },
          {
            "Text": "default-capture",
            "AttrFlags": 4
          },
          {
            "Text": " | Specifies how all non-listed variables are captured. Can be "
          },
          {
            "Text": "=",
            "AttrFlags": 2
          },
          {
            "Text": " (capture by value) or "
          },
          {
            "Text": "\u0026",
            "AttrFlags": 2
          },
          {
            "Text": " (capture by reference). If omitted, non-listed variables are inaccessible within the "
          },
          {
            "Text": "lambda-body",
            "AttrFlags": 4
          },
          {
            "Text": ". The "
          },
          {
            "Text": "default-capture",
            "AttrFlags": 4
          },
          {
            "Text": " must precede the "
          },
          {
            "Text": "capture-list",
            "AttrFlags": 4
          },
          {
            "Text": ". |"
          },
          {
            "Text": "capture-list",
            "AttrFlags": 4
          },
          {
            "Text": " | Specifies how local variables are made accessible within the "
          },
          {
            "Text": "lambda-body",
            "AttrFlags": 4
          },
          {
            "Text": ". Variables without prefix are captured by value. Variables prefixed with "
          },
          {
            "Text": "\u0026",
            "AttrFlags": 2
          },
          {
            "Text": " are captured by reference. Within a class method, "
          },
          {
            "Text": "this",
            "AttrFlags": 2
          },
          {
            "Text": " can be used to make all its members accessible by reference. Non-listed variables are inaccessible, unless the list is preceded by a "
          },
          {
            "Text": "default-capture",
            "AttrFlags": 4
          },
          {
            "Text": ". |"
          },
          {
            "Text": "argument-list",
            "AttrFlags": 4
          },
          {
            "Text": " | Specifies the arguments of the lambda function. |\nmutable | "
          },
          {
            "Text": "(optional)",
            "AttrFlags": 4
          },
          {
            "Text": " Normally variables captured by value are "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": ". Specifying "
          },
          {
            "Text": "mutable",
            "AttrFlags": 2
          },
          {
            "Text": " makes them non-const. Changes to those variables are retained between calls."
          },
          {
            "Text": "throw-specification",
            "AttrFlags": 4
          },
          {
            "Text": " | "
          },
          {
            "Text": "(optional)",
            "AttrFlags": 4
          },
          {
            "Text": " Specifies the exception throwing behavior of the lambda function. For example: "
          },
          {
            "Text": "noexcept",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "throw(std::exception)",
            "AttrFlags": 2
          },
          {
            "Text": ".|"
          },
          {
            "Text": "attributes",
            "AttrFlags": 4
          },
          {
            "Text": " | "
          },
          {
            "Text": "(optional)",
            "AttrFlags": 4
          },
          {
            "Text": " Any attributes for the lambda function. For example, if the "
          },
          {
            "Text": "lambda-body",
            "AttrFlags": 4
          },
          {
            "Text": " always throws an exception then "
          },
          {
            "Text": "[[noreturn]]",
            "AttrFlags": 2
          },
          {
            "Text": " can be used.\n-\u003e "
          },
          {
            "Text": "return-type",
            "AttrFlags": 4
          },
          {
            "Text": " | "
          },
          {
            "Text": "(optional)",
            "AttrFlags": 4
          },
          {
            "Text": " Specifies the return type of the lambda function. Required when the return type cannot be determined by the compiler. |"
          },
          {
            "Text": "lambda-body",
            "AttrFlags": 4
          },
          {
            "Text": " | A code block containing the implementation of the lambda function. |"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522063445,
        "id": "f38ebd65-bb44-4434-96c8-dea191ad395a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522063445,
        "parent_id": "65133362-c4a8-4dfa-9822-ab34d89c8c6e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Remarks"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Remarks"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522063445,
        "id": "c2106a5f-9abc-4fb4-b6e9-aaa038a3f55a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522063445,
        "parent_id": "65133362-c4a8-4dfa-9822-ab34d89c8c6e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "C++17 (the current draft) introduces "
            ],
            [
              "constexpr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " lambdas, basically lambdas that can be evaluated at compile time. A lambda is automatically "
            ],
            [
              "constexpr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " if it satisfies "
            ],
            [
              "constexpr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " requirements, but you can also specify it using the "
            ],
            [
              "constexpr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " keyword:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "C++17 (the current draft) introduces "
          },
          {
            "Text": "constexpr",
            "AttrFlags": 2
          },
          {
            "Text": " lambdas, basically lambdas that can be evaluated at compile time. A lambda is automatically "
          },
          {
            "Text": "constexpr",
            "AttrFlags": 2
          },
          {
            "Text": " if it satisfies "
          },
          {
            "Text": "constexpr",
            "AttrFlags": 2
          },
          {
            "Text": " requirements, but you can also specify it using the "
          },
          {
            "Text": "constexpr",
            "AttrFlags": 2
          },
          {
            "Text": " keyword:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522063445,
        "id": "be8ee2a3-80de-4617-865c-545f5b7bb97d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522063445,
        "parent_id": "65133362-c4a8-4dfa-9822-ab34d89c8c6e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "//Explicitly define this lambdas as constexpr\n[]() constexpr {\n    //Do stuff\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "//Explicitly define this lambdas as constexpr\n[]() constexpr {\n    //Do stuff\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "Lambdas",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}