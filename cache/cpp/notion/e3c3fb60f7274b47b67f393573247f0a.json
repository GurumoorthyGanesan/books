{
  "ID": "e3c3fb60-f727-4b47-b67f-393573247f0a",
  "Root": {
    "alive": true,
    "content": [
      "a7ae0eff-b37c-41f5-ac1d-f54766d0194b",
      "df3b6557-abb8-4aca-81ec-d52b16dd0e6d",
      "aba6298f-87d2-4fd1-b42c-709de5c6a8b8",
      "59af52f0-8cb4-472c-b47c-9d1c3172d677",
      "b44856e4-726e-4722-a241-c88054af5f34",
      "8fbcf037-e20c-46d8-9ceb-36c0cbd36c1c",
      "7e32f994-51de-492f-8fca-ab5200cad364",
      "d75a4b24-75c1-43e8-b0ed-338d67217f22",
      "8a9275e9-9fc0-4681-a762-2a5b60208237",
      "becf7b76-2275-4741-ad42-8c9b29315754",
      "c4d3d967-1cd8-443c-af32-bef826afab65",
      "d1da3ec0-65e2-4339-84c6-72bfa5a99fce",
      "b5a97fb8-bd9c-4184-8e6f-b7f7060a0acc",
      "7928fcc1-9a3d-4952-87ec-fbdf9de0a8e3",
      "a937eb6c-1839-4070-b170-b70b896eed36",
      "dbc6e2d7-b29d-44a5-bf9c-5fdde3bd0917",
      "46310702-e23d-4752-8459-64e4c78dc20a",
      "a51b371a-5481-4d8f-b261-548a6ad6cae4",
      "16bd96a0-5a09-4919-ac72-db0bd5590a3a"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522403483,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "e3c3fb60-f727-4b47-b67f-393573247f0a",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550709960000,
    "parent_id": "e1dd94ae-aa5a-4f89-b959-f2ec61771796",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Quantifiers"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522403474,
        "id": "a7ae0eff-b37c-41f5-ac1d-f54766d0194b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522403474,
        "parent_id": "e3c3fb60-f727-4b47-b67f-393573247f0a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Let’s say that we’re given "
            ],
            [
              "const string input",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " as a phone number to be validated. We could start by requiring a numeric input with a "
            ],
            [
              "zero or more quantifier",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ": "
            ],
            [
              "regex_match(input, regex(\"\\\\d*\"))",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or a "
            ],
            [
              "one or more quantifier",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ": "
            ],
            [
              "regex_match(input, regex(\"\\\\d+\"))",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " But both of those really fall short if "
            ],
            [
              "input",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " contains an invalid numeric string like: “123” Let’s use a "
            ],
            [
              "n or more quantifier",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " to ensure that we’re getting at least 7 digits:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Let’s say that we’re given "
          },
          {
            "Text": "const string input",
            "AttrFlags": 2
          },
          {
            "Text": " as a phone number to be validated. We could start by requiring a numeric input with a "
          },
          {
            "Text": "zero or more quantifier",
            "AttrFlags": 1
          },
          {
            "Text": ": "
          },
          {
            "Text": "regex_match(input, regex(\"\\\\d*\"))",
            "AttrFlags": 2
          },
          {
            "Text": " or a "
          },
          {
            "Text": "one or more quantifier",
            "AttrFlags": 1
          },
          {
            "Text": ": "
          },
          {
            "Text": "regex_match(input, regex(\"\\\\d+\"))",
            "AttrFlags": 2
          },
          {
            "Text": " But both of those really fall short if "
          },
          {
            "Text": "input",
            "AttrFlags": 2
          },
          {
            "Text": " contains an invalid numeric string like: “123” Let’s use a "
          },
          {
            "Text": "n or more quantifier",
            "AttrFlags": 1
          },
          {
            "Text": " to ensure that we’re getting at least 7 digits:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522403477,
        "id": "df3b6557-abb8-4aca-81ec-d52b16dd0e6d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522403477,
        "parent_id": "e3c3fb60-f727-4b47-b67f-393573247f0a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "regex_match(input, regex(\"\\\\d{7,}\"))"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "regex_match(input, regex(\"\\\\d{7,}\"))",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522403477,
        "id": "aba6298f-87d2-4fd1-b42c-709de5c6a8b8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522403477,
        "parent_id": "e3c3fb60-f727-4b47-b67f-393573247f0a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This will guarantee that we will get at least a phone number of digits, but "
            ],
            [
              "input",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " could also contain a numeric string that’s too long like: “123456789012”. So lets go with a "
            ],
            [
              "between n and m quantifier",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " so the "
            ],
            [
              "input",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is at least 7 digits but not more than 11:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This will guarantee that we will get at least a phone number of digits, but "
          },
          {
            "Text": "input",
            "AttrFlags": 2
          },
          {
            "Text": " could also contain a numeric string that’s too long like: “123456789012”. So lets go with a "
          },
          {
            "Text": "between n and m quantifier",
            "AttrFlags": 1
          },
          {
            "Text": " so the "
          },
          {
            "Text": "input",
            "AttrFlags": 2
          },
          {
            "Text": " is at least 7 digits but not more than 11:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522403477,
        "id": "59af52f0-8cb4-472c-b47c-9d1c3172d677",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522403477,
        "parent_id": "e3c3fb60-f727-4b47-b67f-393573247f0a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "regex_match(input, regex(\"\\\\d{7,11}\"));"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "regex_match(input, regex(\"\\\\d{7,11}\"));",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522403477,
        "id": "b44856e4-726e-4722-a241-c88054af5f34",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522403477,
        "parent_id": "e3c3fb60-f727-4b47-b67f-393573247f0a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This gets us closer, but illegal numeric strings that are in the range of [7, 11] are still accepted, like: “123456789” So let’s make the country code optional with a "
            ],
            [
              "lazy quantifier",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This gets us closer, but illegal numeric strings that are in the range of [7, 11] are still accepted, like: “123456789” So let’s make the country code optional with a "
          },
          {
            "Text": "lazy quantifier",
            "AttrFlags": 1
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522403477,
        "id": "8fbcf037-e20c-46d8-9ceb-36c0cbd36c1c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522403477,
        "parent_id": "e3c3fb60-f727-4b47-b67f-393573247f0a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "regex_match(input, regex(\"\\\\d?\\\\d{7,10}\"))"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "regex_match(input, regex(\"\\\\d?\\\\d{7,10}\"))",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522403480,
        "id": "7e32f994-51de-492f-8fca-ab5200cad364",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522403480,
        "parent_id": "e3c3fb60-f727-4b47-b67f-393573247f0a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It’s important to note that the "
            ],
            [
              "lazy quantifier",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " matches "
            ],
            [
              "as few characters as possible",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ", so the only way this character will be matched is if there are already 10 characters that have been matched by "
            ],
            [
              "\\d{7,10}",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". (To match the first character greedily we would have had to do: "
            ],
            [
              "\\d{0,1}",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ".) The "
            ],
            [
              "lazy quantifier",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " can be appended to any other quantifier."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It’s important to note that the "
          },
          {
            "Text": "lazy quantifier",
            "AttrFlags": 1
          },
          {
            "Text": " matches "
          },
          {
            "Text": "as few characters as possible",
            "AttrFlags": 4
          },
          {
            "Text": ", so the only way this character will be matched is if there are already 10 characters that have been matched by "
          },
          {
            "Text": "\\d{7,10}",
            "AttrFlags": 2
          },
          {
            "Text": ". (To match the first character greedily we would have had to do: "
          },
          {
            "Text": "\\d{0,1}",
            "AttrFlags": 2
          },
          {
            "Text": ".) The "
          },
          {
            "Text": "lazy quantifier",
            "AttrFlags": 1
          },
          {
            "Text": " can be appended to any other quantifier."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522403480,
        "id": "d75a4b24-75c1-43e8-b0ed-338d67217f22",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522403480,
        "parent_id": "e3c3fb60-f727-4b47-b67f-393573247f0a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Now, how would we make the area code optional "
            ],
            [
              "and",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " only accept a country code if the area code was present?"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Now, how would we make the area code optional "
          },
          {
            "Text": "and",
            "AttrFlags": 4
          },
          {
            "Text": " only accept a country code if the area code was present?"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522403480,
        "id": "8a9275e9-9fc0-4681-a762-2a5b60208237",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522403480,
        "parent_id": "e3c3fb60-f727-4b47-b67f-393573247f0a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "regex_match(input, regex(\"(?:\\\\d{3,4})?\\\\d{7}\"))"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "regex_match(input, regex(\"(?:\\\\d{3,4})?\\\\d{7}\"))",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522403480,
        "id": "becf7b76-2275-4741-ad42-8c9b29315754",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522403480,
        "parent_id": "e3c3fb60-f727-4b47-b67f-393573247f0a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In this final regex, the "
            ],
            [
              "\\d{7}",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "requires",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " 7 digits. These 7 digits are optionally preceded by either 3 or 4 digits."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In this final regex, the "
          },
          {
            "Text": "\\d{7}",
            "AttrFlags": 2
          },
          {
            "Text": " "
          },
          {
            "Text": "requires",
            "AttrFlags": 4
          },
          {
            "Text": " 7 digits. These 7 digits are optionally preceded by either 3 or 4 digits."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522403481,
        "id": "c4d3d967-1cd8-443c-af32-bef826afab65",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522403481,
        "parent_id": "e3c3fb60-f727-4b47-b67f-393573247f0a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note that we did not append the "
            ],
            [
              "lazy quantifier",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ": "
            ],
            [
              "\\d{3,4}?\\d{7}",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", the "
            ],
            [
              "\\d{3,4}?",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " would have matched either 3 or 4 characters, preferring 3. Instead we’re making the non-capturing group match at most once, preferring not to match. Causing a mismatch if "
            ],
            [
              "input",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " didn’t include the area code like: “1234567”."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note that we did not append the "
          },
          {
            "Text": "lazy quantifier",
            "AttrFlags": 1
          },
          {
            "Text": ": "
          },
          {
            "Text": "\\d{3,4}?\\d{7}",
            "AttrFlags": 2
          },
          {
            "Text": ", the "
          },
          {
            "Text": "\\d{3,4}?",
            "AttrFlags": 2
          },
          {
            "Text": " would have matched either 3 or 4 characters, preferring 3. Instead we’re making the non-capturing group match at most once, preferring not to match. Causing a mismatch if "
          },
          {
            "Text": "input",
            "AttrFlags": 2
          },
          {
            "Text": " didn’t include the area code like: “1234567”."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522403481,
        "id": "d1da3ec0-65e2-4339-84c6-72bfa5a99fce",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522403481,
        "parent_id": "e3c3fb60-f727-4b47-b67f-393573247f0a",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522403481,
        "id": "b5a97fb8-bd9c-4184-8e6f-b7f7060a0acc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522403481,
        "parent_id": "e3c3fb60-f727-4b47-b67f-393573247f0a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In conclusion of the quantifier topic, I’d like to mention the other appending quantifier that you can use, the "
            ],
            [
              "possessive quantifier",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". "
            ],
            [
              "Either",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " the "
            ],
            [
              "lazy quantifier",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " or the "
            ],
            [
              "possessive quantifier",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " can be appended to any quantifier. The "
            ],
            [
              "possessive quantifier",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "‘s only function is to assist the regex engine by telling it, greedily take these characters "
            ],
            [
              "and don’t ever give them up even if it causes the regex to fail",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ". This for example doesn’t make much sense: "
            ],
            [
              "regex_match(input, regex(\"\\\\d{3,4}+\\\\d{7}))",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " Because an "
            ],
            [
              "input",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " like: “1234567890” wouldn’t be matched as "
            ],
            [
              "\\d{3,4}+",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will always match 4 characters even if matching 3 would have allowed the regex to succeed. The "
            ],
            [
              "possessive quantifier",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " is best used "
            ],
            [
              "when the quantified token limits the number of matchable characters",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ". For example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In conclusion of the quantifier topic, I’d like to mention the other appending quantifier that you can use, the "
          },
          {
            "Text": "possessive quantifier",
            "AttrFlags": 1
          },
          {
            "Text": ". "
          },
          {
            "Text": "Either",
            "AttrFlags": 4
          },
          {
            "Text": " the "
          },
          {
            "Text": "lazy quantifier",
            "AttrFlags": 1
          },
          {
            "Text": " or the "
          },
          {
            "Text": "possessive quantifier",
            "AttrFlags": 1
          },
          {
            "Text": " can be appended to any quantifier. The "
          },
          {
            "Text": "possessive quantifier",
            "AttrFlags": 1
          },
          {
            "Text": "‘s only function is to assist the regex engine by telling it, greedily take these characters "
          },
          {
            "Text": "and don’t ever give them up even if it causes the regex to fail",
            "AttrFlags": 4
          },
          {
            "Text": ". This for example doesn’t make much sense: "
          },
          {
            "Text": "regex_match(input, regex(\"\\\\d{3,4}+\\\\d{7}))",
            "AttrFlags": 2
          },
          {
            "Text": " Because an "
          },
          {
            "Text": "input",
            "AttrFlags": 2
          },
          {
            "Text": " like: “1234567890” wouldn’t be matched as "
          },
          {
            "Text": "\\d{3,4}+",
            "AttrFlags": 2
          },
          {
            "Text": " will always match 4 characters even if matching 3 would have allowed the regex to succeed. The "
          },
          {
            "Text": "possessive quantifier",
            "AttrFlags": 1
          },
          {
            "Text": " is best used "
          },
          {
            "Text": "when the quantified token limits the number of matchable characters",
            "AttrFlags": 4
          },
          {
            "Text": ". For example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522403481,
        "id": "7928fcc1-9a3d-4952-87ec-fbdf9de0a8e3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522403481,
        "parent_id": "e3c3fb60-f727-4b47-b67f-393573247f0a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "regex_match(input, regex(\"(?:.*\\\\d{3,4}+){3}\"))"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "regex_match(input, regex(\"(?:.*\\\\d{3,4}+){3}\"))",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522403482,
        "id": "a937eb6c-1839-4070-b170-b70b896eed36",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522403482,
        "parent_id": "e3c3fb60-f727-4b47-b67f-393573247f0a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Can be used to match if "
            ],
            [
              "input",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " contained any of the following:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Can be used to match if "
          },
          {
            "Text": "input",
            "AttrFlags": 2
          },
          {
            "Text": " contained any of the following:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522403482,
        "id": "dbc6e2d7-b29d-44a5-bf9c-5fdde3bd0917",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522403482,
        "parent_id": "e3c3fb60-f727-4b47-b67f-393573247f0a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "123 456 7890 123-456-7890 (123)456-7890 (123) 456 - 7890"
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "123 456 7890 123-456-7890 (123)456-7890 (123) 456 - 7890"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522403482,
        "id": "46310702-e23d-4752-8459-64e4c78dc20a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522403482,
        "parent_id": "e3c3fb60-f727-4b47-b67f-393573247f0a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "But when this regex really shines is when "
            ],
            [
              "input",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " contains an "
            ],
            [
              "illegal",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " input:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "But when this regex really shines is when "
          },
          {
            "Text": "input",
            "AttrFlags": 2
          },
          {
            "Text": " contains an "
          },
          {
            "Text": "illegal",
            "AttrFlags": 4
          },
          {
            "Text": " input:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522403482,
        "id": "a51b371a-5481-4d8f-b261-548a6ad6cae4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522403482,
        "parent_id": "e3c3fb60-f727-4b47-b67f-393573247f0a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "12345 - 67890"
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "12345 - 67890"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522403483,
        "id": "16bd96a0-5a09-4919-ac72-db0bd5590a3a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522403483,
        "parent_id": "e3c3fb60-f727-4b47-b67f-393573247f0a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Without the "
            ],
            [
              "possessive quantifier",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " the regex engine has to go back and test "
            ],
            [
              "every combination of ",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ".*",
              [
                [
                  "i"
                ],
                [
                  "c"
                ]
              ]
            ],
            [
              " and either 3 or 4 characters",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " to see if it can find a matchable combination. With the "
            ],
            [
              "possessive quantifier",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " the regex starts where the 2nd "
            ],
            [
              "possessive quantifier",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " left off, the ‘0’ character, and the regex engine tries to adjust the "
            ],
            [
              ".*",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to allow "
            ],
            [
              "\\d{3,4}",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to match; when it can’t the regex just fails, no back tracking is done to see if earlier "
            ],
            [
              ".*",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " adjustment could have allowed a match."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Without the "
          },
          {
            "Text": "possessive quantifier",
            "AttrFlags": 1
          },
          {
            "Text": " the regex engine has to go back and test "
          },
          {
            "Text": "every combination of ",
            "AttrFlags": 4
          },
          {
            "Text": ".*",
            "AttrFlags": 6
          },
          {
            "Text": " and either 3 or 4 characters",
            "AttrFlags": 4
          },
          {
            "Text": " to see if it can find a matchable combination. With the "
          },
          {
            "Text": "possessive quantifier",
            "AttrFlags": 1
          },
          {
            "Text": " the regex starts where the 2nd "
          },
          {
            "Text": "possessive quantifier",
            "AttrFlags": 1
          },
          {
            "Text": " left off, the ‘0’ character, and the regex engine tries to adjust the "
          },
          {
            "Text": ".*",
            "AttrFlags": 2
          },
          {
            "Text": " to allow "
          },
          {
            "Text": "\\d{3,4}",
            "AttrFlags": 2
          },
          {
            "Text": " to match; when it can’t the regex just fails, no back tracking is done to see if earlier "
          },
          {
            "Text": ".*",
            "AttrFlags": 2
          },
          {
            "Text": " adjustment could have allowed a match."
          }
        ]
      }
    ],
    "title": "Quantifiers",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}