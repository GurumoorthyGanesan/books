{
  "ID": "5eb9353c-8fc5-4eef-991f-284157883997",
  "Root": {
    "alive": true,
    "content": [
      "61b800e6-7948-422f-9360-7534b3622a08",
      "8d56008b-a58c-49e1-bb8c-56fe22a22bf3"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550523025623,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "5eb9353c-8fc5-4eef-991f-284157883997",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551687106563,
    "parent_id": "d3696e4f-8789-4401-af6c-2f073d356228",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Standard user-defined literals for complex"
        ]
      ]
    },
    "type": "page",
    "version": 4,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523025622,
        "id": "61b800e6-7948-422f-9360-7534b3622a08",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523025622,
        "parent_id": "5eb9353c-8fc5-4eef-991f-284157883997",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Those following complex user literals are declared in the "
            ],
            [
              "namespace",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "std::literals::complex_literals",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", where both "
            ],
            [
              "literals",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "complex_literals",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " are "
            ],
            [
              "inline namespaces",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%2B%2B/495/namespaces/4556/inline-namespace#t=20160725201733952379"
                ]
              ]
            ],
            [
              ". Access to these operators can be gained with "
            ],
            [
              "using namespace std::literals",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "using namespace std::complex_literals",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", and "
            ],
            [
              "using namespace std::literals::complex_literals",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Those following complex user literals are declared in the "
          },
          {
            "Text": "namespace",
            "AttrFlags": 2
          },
          {
            "Text": " "
          },
          {
            "Text": "std::literals::complex_literals",
            "AttrFlags": 2
          },
          {
            "Text": ", where both "
          },
          {
            "Text": "literals",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "complex_literals",
            "AttrFlags": 2
          },
          {
            "Text": " are "
          },
          {
            "Text": "inline namespaces",
            "Link": "http://stackoverflow.com/documentation/c%2B%2B/495/namespaces/4556/inline-namespace#t=20160725201733952379"
          },
          {
            "Text": ". Access to these operators can be gained with "
          },
          {
            "Text": "using namespace std::literals",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "using namespace std::complex_literals",
            "AttrFlags": 2
          },
          {
            "Text": ", and "
          },
          {
            "Text": "using namespace std::literals::complex_literals",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523025623,
        "id": "8d56008b-a58c-49e1-bb8c-56fe22a22bf3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523025623,
        "parent_id": "5eb9353c-8fc5-4eef-991f-284157883997",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003ccomplex\u003e\n#include \u003ciostream\u003e\n\nint main()\n{\n    using namespace std::literals::complex_literals;\n    \n    std::complex\u003cdouble\u003e c = 2.0 + 1i;        // {2.0, 1.}\n    std::complex\u003cfloat\u003e cf = 2.0f + 1if;      // {2.0f, 1.f}\n    std::complex\u003clong double\u003e cl = 2.0L + 1il; // {2.0L, 1.L}\n    \n    std::cout \u003c\u003c \"abs\" \u003c\u003c c \u003c\u003c \" = \" \u003c\u003c abs(c) \u003c\u003c std::endl;   // abs(2,1) = 2.23607\n    std::cout \u003c\u003c \"abs\" \u003c\u003c cf \u003c\u003c \" = \" \u003c\u003c abs(cf) \u003c\u003c std::endl; // abs(2,1) = 2.23607\n    std::cout \u003c\u003c \"abs\" \u003c\u003c cl \u003c\u003c \" = \" \u003c\u003c abs(cl) \u003c\u003c std::endl; // abs(2,1) = 2.23607\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003ccomplex\u003e\n#include \u003ciostream\u003e\n\nint main()\n{\n    using namespace std::literals::complex_literals;\n    \n    std::complex\u003cdouble\u003e c = 2.0 + 1i;        // {2.0, 1.}\n    std::complex\u003cfloat\u003e cf = 2.0f + 1if;      // {2.0f, 1.f}\n    std::complex\u003clong double\u003e cl = 2.0L + 1il; // {2.0L, 1.L}\n    \n    std::cout \u003c\u003c \"abs\" \u003c\u003c c \u003c\u003c \" = \" \u003c\u003c abs(c) \u003c\u003c std::endl;   // abs(2,1) = 2.23607\n    std::cout \u003c\u003c \"abs\" \u003c\u003c cf \u003c\u003c \" = \" \u003c\u003c abs(cf) \u003c\u003c std::endl; // abs(2,1) = 2.23607\n    std::cout \u003c\u003c \"abs\" \u003c\u003c cl \u003c\u003c \" = \" \u003c\u003c abs(cl) \u003c\u003c std::endl; // abs(2,1) = 2.23607\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "Standard user-defined literals for complex",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}