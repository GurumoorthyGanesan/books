{
  "ID": "5dc16f63-792b-4bd0-9a8c-27627732b278",
  "Root": {
    "alive": true,
    "content": [
      "40e221b1-40e2-4f0e-8701-c6e980ed023c",
      "b28555a8-eac9-4ae8-9b92-6c0a195b4716",
      "70c7c5b2-1675-4ffd-92c2-4846dfdb42e3",
      "3622d17f-d348-456b-aed3-6e65c3359ebc",
      "cfbcf129-64f0-4f23-9a2f-cd967e364a6f",
      "96fab4fa-5f77-43c9-845c-9800f948130c",
      "f15f57ca-1f63-4f73-bf2c-348540d4a59c",
      "c2fba03d-eceb-4ae2-b398-5dad1b24ebb1",
      "4b24ab63-55eb-4519-bc8b-c8a1be2296c1",
      "c5b47b94-25d0-4593-82b3-9ace06094d8b",
      "16871cd6-a086-402a-89d1-d5262c1f0a78",
      "ba0f4e7d-7fa8-4525-b8e7-e05d7c294d05",
      "b65903f5-40b8-4128-9f0f-811471260bba",
      "a9950dc2-e0dc-40d5-bb7a-a42771a0cc53",
      "2ad4bf92-3378-4736-a023-a4f655f0ef71",
      "aaceccc8-288c-4c48-b460-c65bf4c0ed76",
      "cf84197a-b355-473e-9374-1b4b36146430",
      "6b64f339-dbe8-4254-8767-337fdf459149",
      "a7a554d5-d05c-4147-bf93-dea7022c8608",
      "0fab03b5-928a-4bac-a3b9-4d985e260240",
      "4ce94345-fa41-485c-8604-aeca112c8697"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522067460,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "5dc16f63-792b-4bd0-9a8c-27627732b278",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550655600000,
    "parent_id": "71517390-0244-456d-87c4-82c582ca8abf",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Recursive lambdas"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522067454,
        "id": "40e221b1-40e2-4f0e-8701-c6e980ed023c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522067454,
        "parent_id": "5dc16f63-792b-4bd0-9a8c-27627732b278",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Let’s say we wish to write Euclid’s "
            ],
            [
              "gcd()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " as a lambda. As a function, it is:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Let’s say we wish to write Euclid’s "
          },
          {
            "Text": "gcd()",
            "AttrFlags": 2
          },
          {
            "Text": " as a lambda. As a function, it is:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522067457,
        "id": "b28555a8-eac9-4ae8-9b92-6c0a195b4716",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522067457,
        "parent_id": "5dc16f63-792b-4bd0-9a8c-27627732b278",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int gcd(int a, int b) {\n    return b == 0 ? a : gcd(b, a%b);\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int gcd(int a, int b) {\n    return b == 0 ? a : gcd(b, a%b);\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522067457,
        "id": "70c7c5b2-1675-4ffd-92c2-4846dfdb42e3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522067457,
        "parent_id": "5dc16f63-792b-4bd0-9a8c-27627732b278",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "But a lambda cannot be recursive, it has no way to invoke itself. A lambda has no name and using "
            ],
            [
              "this",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " within the body of a lambda refers to a captured "
            ],
            [
              "this",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (assuming the lambda is created in the body of a member function, otherwise it is an error). So how do we solve this problem?"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "But a lambda cannot be recursive, it has no way to invoke itself. A lambda has no name and using "
          },
          {
            "Text": "this",
            "AttrFlags": 2
          },
          {
            "Text": " within the body of a lambda refers to a captured "
          },
          {
            "Text": "this",
            "AttrFlags": 2
          },
          {
            "Text": " (assuming the lambda is created in the body of a member function, otherwise it is an error). So how do we solve this problem?"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522067457,
        "id": "3622d17f-d348-456b-aed3-6e65c3359ebc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522067457,
        "parent_id": "5dc16f63-792b-4bd0-9a8c-27627732b278",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Use "
            ],
            [
              "std::function",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "sub_sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Use "
          },
          {
            "Text": "std::function",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522067457,
        "id": "cfbcf129-64f0-4f23-9a2f-cd967e364a6f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522067457,
        "parent_id": "5dc16f63-792b-4bd0-9a8c-27627732b278",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We can have a lambda capture a reference to a not-yet constructed "
            ],
            [
              "std::function",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "We can have a lambda capture a reference to a not-yet constructed "
          },
          {
            "Text": "std::function",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522067458,
        "id": "96fab4fa-5f77-43c9-845c-9800f948130c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522067458,
        "parent_id": "5dc16f63-792b-4bd0-9a8c-27627732b278",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "std::function\u003cint(int, int)\u003e gcd = [\u0026](int a, int b){\n    return b == 0 ? a : gcd(b, a%b);\n};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "std::function\u003cint(int, int)\u003e gcd = [\u0026](int a, int b){\n    return b == 0 ? a : gcd(b, a%b);\n};",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522067458,
        "id": "f15f57ca-1f63-4f73-bf2c-348540d4a59c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522067458,
        "parent_id": "5dc16f63-792b-4bd0-9a8c-27627732b278",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This works, but should be used sparingly. It’s slow (we’re using type erasure now instead of a direct function call), it’s fragile (copying "
            ],
            [
              "gcd",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or returning "
            ],
            [
              "gcd",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will break since the lambda refers to the original object), and it won’t work with generic lambdas."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This works, but should be used sparingly. It’s slow (we’re using type erasure now instead of a direct function call), it’s fragile (copying "
          },
          {
            "Text": "gcd",
            "AttrFlags": 2
          },
          {
            "Text": " or returning "
          },
          {
            "Text": "gcd",
            "AttrFlags": 2
          },
          {
            "Text": " will break since the lambda refers to the original object), and it won’t work with generic lambdas."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522067458,
        "id": "c2fba03d-eceb-4ae2-b398-5dad1b24ebb1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522067458,
        "parent_id": "5dc16f63-792b-4bd0-9a8c-27627732b278",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Using two smart pointers:"
            ]
          ]
        },
        "type": "sub_sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Using two smart pointers:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522067458,
        "id": "4b24ab63-55eb-4519-bc8b-c8a1be2296c1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522067458,
        "parent_id": "5dc16f63-792b-4bd0-9a8c-27627732b278",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "auto gcd_self = std::make_shared\u003cstd::unique_ptr\u003c std::function\u003cint(int, int)\u003e \u003e\u003e();\n*gcd_self = std::make_unique\u003cstd::function\u003cint(int, int)\u003e\u003e(\n  [gcd_self](int a, int b){\n    return b == 0 ? a : (**gcd_self)(b, a%b);\n  };\n};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "auto gcd_self = std::make_shared\u003cstd::unique_ptr\u003c std::function\u003cint(int, int)\u003e \u003e\u003e();\n*gcd_self = std::make_unique\u003cstd::function\u003cint(int, int)\u003e\u003e(\n  [gcd_self](int a, int b){\n    return b == 0 ? a : (**gcd_self)(b, a%b);\n  };\n};",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522067458,
        "id": "c5b47b94-25d0-4593-82b3-9ace06094d8b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522067458,
        "parent_id": "5dc16f63-792b-4bd0-9a8c-27627732b278",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This adds a lot of indirection (which is overhead), but it can be copied/returned, and all copies share state. It does let you return the lambda, and is otherwise less fragile than the above solution."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This adds a lot of indirection (which is overhead), but it can be copied/returned, and all copies share state. It does let you return the lambda, and is otherwise less fragile than the above solution."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522067458,
        "id": "16871cd6-a086-402a-89d1-d5262c1f0a78",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522067458,
        "parent_id": "5dc16f63-792b-4bd0-9a8c-27627732b278",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Use a Y-combinator"
            ]
          ]
        },
        "type": "sub_sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Use a Y-combinator"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522067458,
        "id": "ba0f4e7d-7fa8-4525-b8e7-e05d7c294d05",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522067458,
        "parent_id": "5dc16f63-792b-4bd0-9a8c-27627732b278",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "With the help of a short utility struct, we can solve all of these problems:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "With the help of a short utility struct, we can solve all of these problems:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522067458,
        "id": "b65903f5-40b8-4128-9f0f-811471260bba",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522067458,
        "parent_id": "5dc16f63-792b-4bd0-9a8c-27627732b278",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "template \u003cclass F\u003e\nstruct y_combinator {\n    F f; // the lambda will be stored here\n\n    // a forwarding operator():\n    template \u003cclass... Args\u003e\n    decltype(auto) operator()(Args\u0026\u0026... args) const {\n        // we pass ourselves to f, then the arguments.\n        // the lambda should take the first argument as `auto\u0026\u0026 recurse` or similar.\n        return f(*this, std::forward\u003cArgs\u003e(args)...);\n    }\n};\n// helper function that deduces the type of the lambda:\ntemplate \u003cclass F\u003e\ny_combinator\u003cstd::decay_t\u003cF\u003e\u003e make_y_combinator(F\u0026\u0026 f) {\n    return {std::forward\u003cF\u003e(f)};\n}\n// (Be aware that in C++17 we can do better than a `make_` function)"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "template \u003cclass F\u003e\nstruct y_combinator {\n    F f; // the lambda will be stored here\n\n    // a forwarding operator():\n    template \u003cclass... Args\u003e\n    decltype(auto) operator()(Args\u0026\u0026... args) const {\n        // we pass ourselves to f, then the arguments.\n        // the lambda should take the first argument as `auto\u0026\u0026 recurse` or similar.\n        return f(*this, std::forward\u003cArgs\u003e(args)...);\n    }\n};\n// helper function that deduces the type of the lambda:\ntemplate \u003cclass F\u003e\ny_combinator\u003cstd::decay_t\u003cF\u003e\u003e make_y_combinator(F\u0026\u0026 f) {\n    return {std::forward\u003cF\u003e(f)};\n}\n// (Be aware that in C++17 we can do better than a `make_` function)",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522067459,
        "id": "a9950dc2-e0dc-40d5-bb7a-a42771a0cc53",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522067459,
        "parent_id": "5dc16f63-792b-4bd0-9a8c-27627732b278",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "we can implement our "
            ],
            [
              "gcd",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " as:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "we can implement our "
          },
          {
            "Text": "gcd",
            "AttrFlags": 2
          },
          {
            "Text": " as:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522067459,
        "id": "2ad4bf92-3378-4736-a023-a4f655f0ef71",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522067459,
        "parent_id": "5dc16f63-792b-4bd0-9a8c-27627732b278",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "auto gcd = make_y_combinator(\n  [](auto\u0026\u0026 gcd, int a, int b){\n    return b == 0 ? a : gcd(b, a%b);\n  }\n);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "auto gcd = make_y_combinator(\n  [](auto\u0026\u0026 gcd, int a, int b){\n    return b == 0 ? a : gcd(b, a%b);\n  }\n);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522067459,
        "id": "aaceccc8-288c-4c48-b460-c65bf4c0ed76",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522067459,
        "parent_id": "5dc16f63-792b-4bd0-9a8c-27627732b278",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "y_combinator",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is a concept from the lambda calculus that lets you have recursion without being able to name yourself until you are defined. This is exactly the problem lambdas have."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "y_combinator",
            "AttrFlags": 2
          },
          {
            "Text": " is a concept from the lambda calculus that lets you have recursion without being able to name yourself until you are defined. This is exactly the problem lambdas have."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522067459,
        "id": "cf84197a-b355-473e-9374-1b4b36146430",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522067459,
        "parent_id": "5dc16f63-792b-4bd0-9a8c-27627732b278",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You create a lambda that takes “recurse” as its first argument. When you want to recurse, you pass the arguments to recurse."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You create a lambda that takes “recurse” as its first argument. When you want to recurse, you pass the arguments to recurse."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522067459,
        "id": "6b64f339-dbe8-4254-8767-337fdf459149",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522067459,
        "parent_id": "5dc16f63-792b-4bd0-9a8c-27627732b278",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "y_combinator",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " then returns a function object that calls that function with its arguments, but with a suitable “recurse” object (namely the "
            ],
            [
              "y_combinator",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " itself) as its first argument. It forwards the rest of the arguments you call the "
            ],
            [
              "y_combinator",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " with to the lambda as well."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "y_combinator",
            "AttrFlags": 2
          },
          {
            "Text": " then returns a function object that calls that function with its arguments, but with a suitable “recurse” object (namely the "
          },
          {
            "Text": "y_combinator",
            "AttrFlags": 2
          },
          {
            "Text": " itself) as its first argument. It forwards the rest of the arguments you call the "
          },
          {
            "Text": "y_combinator",
            "AttrFlags": 2
          },
          {
            "Text": " with to the lambda as well."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522067459,
        "id": "a7a554d5-d05c-4147-bf93-dea7022c8608",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522067459,
        "parent_id": "5dc16f63-792b-4bd0-9a8c-27627732b278",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In short:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In short:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522067460,
        "id": "0fab03b5-928a-4bac-a3b9-4d985e260240",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522067460,
        "parent_id": "5dc16f63-792b-4bd0-9a8c-27627732b278",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "auto foo = make_y_combinator( [\u0026](auto\u0026\u0026 recurse, some arguments) {\n  // write body that processes some arguments\n  // when you want to recurse, call recurse(some other arguments)\n});"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "auto foo = make_y_combinator( [\u0026](auto\u0026\u0026 recurse, some arguments) {\n  // write body that processes some arguments\n  // when you want to recurse, call recurse(some other arguments)\n});",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522067460,
        "id": "4ce94345-fa41-485c-8604-aeca112c8697",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522067460,
        "parent_id": "5dc16f63-792b-4bd0-9a8c-27627732b278",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "and you have recursion in a lambda with no serious restrictions or significant overhead."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "and you have recursion in a lambda with no serious restrictions or significant overhead."
          }
        ]
      }
    ],
    "title": "Recursive lambdas",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}