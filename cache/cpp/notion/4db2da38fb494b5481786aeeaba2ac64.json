{
  "ID": "4db2da38-fb49-4b54-8178-6aeeaba2ac64",
  "Root": {
    "alive": true,
    "content": [
      "610a70d8-b342-4e42-9c54-4dd645d6f785",
      "78d2eab9-9ffd-4f95-a55f-f9d96d8cf83a",
      "a435ed30-23a4-4ff5-a337-04a3940abbf8",
      "7a4ed986-3df0-46aa-95c5-283846cc7f10",
      "4e06a02f-602a-4ce6-a236-d01b7e614502",
      "0eb6445b-f912-4576-bbe0-44e634d0f18a",
      "f7512754-7cb5-4e45-a0f1-c627283285c4",
      "a5bbf893-4220-459a-93ca-22f88be9bc21",
      "5aacbcf8-70ce-4caa-a733-f442b4e6a321",
      "525cb910-29d8-47d7-b244-d4eee5bdd52d",
      "07e805a8-f705-423a-9737-f907deef46b8",
      "49df7085-f1b5-4095-be2c-9643f302c290"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550525221628,
    "id": "4db2da38-fb49-4b54-8178-6aeeaba2ac64",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550525221628,
    "parent_id": "e819fb9f-77e3-490d-9b3b-288189045e39",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "040 Safe-stack Stack corruptions"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525221620,
        "id": "610a70d8-b342-4e42-9c54-4dd645d6f785",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525221620,
        "parent_id": "4db2da38-fb49-4b54-8178-6aeeaba2ac64",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Stack corruptions are annoying bugs to look at. As the stack is corrupted, the debugger often can’t give you a good stack trace of where you are and how you got there."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Stack corruptions are annoying bugs to look at. As the stack is corrupted, the debugger often can’t give you a good stack trace of where you are and how you got there."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525221624,
        "id": "78d2eab9-9ffd-4f95-a55f-f9d96d8cf83a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525221624,
        "parent_id": "4db2da38-fb49-4b54-8178-6aeeaba2ac64",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This is where safe-stack comes into play. Instead of using a single stack for your threads, it will use two: A safe stack and a dangerous stack. The safe stack works exactly like it did before, except that some parts are moved to the dangerous stack."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This is where safe-stack comes into play. Instead of using a single stack for your threads, it will use two: A safe stack and a dangerous stack. The safe stack works exactly like it did before, except that some parts are moved to the dangerous stack."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525221624,
        "id": "a435ed30-23a4-4ff5-a337-04a3940abbf8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525221624,
        "parent_id": "4db2da38-fb49-4b54-8178-6aeeaba2ac64",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Which parts of the stack get moved?"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Which parts of the stack get moved?"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525221624,
        "id": "7a4ed986-3df0-46aa-95c5-283846cc7f10",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525221624,
        "parent_id": "4db2da38-fb49-4b54-8178-6aeeaba2ac64",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Every part which has the potential of corrupting the stack will get moved out of the safe stack. As soon as a variable on the stack gets passed by reference or one takes the address of this variable, the compiler will decide to allocate this on the second stack instead of the safe one."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Every part which has the potential of corrupting the stack will get moved out of the safe stack. As soon as a variable on the stack gets passed by reference or one takes the address of this variable, the compiler will decide to allocate this on the second stack instead of the safe one."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525221624,
        "id": "4e06a02f-602a-4ce6-a236-d01b7e614502",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525221624,
        "parent_id": "4db2da38-fb49-4b54-8178-6aeeaba2ac64",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As a result, any operation you do with those pointers, any modification you make on the memory (based on those pointers/references) can only effect the memory in the second stack. As one never gets a pointer which is close to the safe stack, the stack cannot corrupt the stack and the debugger can still read all functions on the stack to give a nice trace."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "As a result, any operation you do with those pointers, any modification you make on the memory (based on those pointers/references) can only effect the memory in the second stack. As one never gets a pointer which is close to the safe stack, the stack cannot corrupt the stack and the debugger can still read all functions on the stack to give a nice trace."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525221624,
        "id": "0eb6445b-f912-4576-bbe0-44e634d0f18a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525221624,
        "parent_id": "4db2da38-fb49-4b54-8178-6aeeaba2ac64",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "What is it actually used for?"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "What is it actually used for?"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525221626,
        "id": "f7512754-7cb5-4e45-a0f1-c627283285c4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525221626,
        "parent_id": "4db2da38-fb49-4b54-8178-6aeeaba2ac64",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The safe stack was not invented to give you better debugging experience, however, it is a nice side effect for nasty bugs. It’s original purpose is as part of the "
            ],
            [
              "Code-Pointer Integrity (CPI) Project",
              [
                [
                  "a",
                  "http://dslab.epfl.ch/proj/cpi/"
                ]
              ]
            ],
            [
              ", in which they try to prevent overriding the return addresses to prevent code injection. In other words, they try to prevent executing a hackers code."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The safe stack was not invented to give you better debugging experience, however, it is a nice side effect for nasty bugs. It’s original purpose is as part of the "
          },
          {
            "Text": "Code-Pointer Integrity (CPI) Project",
            "Link": "http://dslab.epfl.ch/proj/cpi/"
          },
          {
            "Text": ", in which they try to prevent overriding the return addresses to prevent code injection. In other words, they try to prevent executing a hackers code."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525221626,
        "id": "a5bbf893-4220-459a-93ca-22f88be9bc21",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525221626,
        "parent_id": "4db2da38-fb49-4b54-8178-6aeeaba2ac64",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For this reason, the feature has been activated on chromium and has been "
            ],
            [
              "reported",
              [
                [
                  "a",
                  "http://linuxplumbersconf.org/2015/ocw//system/presentations/3261/original/Beyond%20Traditional%20Compilation.pdf"
                ]
              ]
            ],
            [
              " to have a \u003c1% CPU overhead."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For this reason, the feature has been activated on chromium and has been "
          },
          {
            "Text": "reported",
            "Link": "http://linuxplumbersconf.org/2015/ocw//system/presentations/3261/original/Beyond%20Traditional%20Compilation.pdf"
          },
          {
            "Text": " to have a \u003c1% CPU overhead."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525221626,
        "id": "5aacbcf8-70ce-4caa-a733-f442b4e6a321",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525221626,
        "parent_id": "4db2da38-fb49-4b54-8178-6aeeaba2ac64",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "How to enable it?"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "How to enable it?"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525221627,
        "id": "525cb910-29d8-47d7-b244-d4eee5bdd52d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525221627,
        "parent_id": "4db2da38-fb49-4b54-8178-6aeeaba2ac64",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Right now, the option is only available in the "
            ],
            [
              "clang compiler",
              [
                [
                  "a",
                  "https://clang.llvm.org/docs/SafeStack.html"
                ]
              ]
            ],
            [
              ", where one can pass "
            ],
            [
              "-fsanitize=safe-stack",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to the compiler. A "
            ],
            [
              "proposal",
              [
                [
                  "a",
                  "https://gcc.gnu.org/ml/gcc/2016-04/msg00083.html"
                ]
              ]
            ],
            [
              " was made to implement the same feature in GCC."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Right now, the option is only available in the "
          },
          {
            "Text": "clang compiler",
            "Link": "https://clang.llvm.org/docs/SafeStack.html"
          },
          {
            "Text": ", where one can pass "
          },
          {
            "Text": "-fsanitize=safe-stack",
            "AttrFlags": 2
          },
          {
            "Text": " to the compiler. A "
          },
          {
            "Text": "proposal",
            "Link": "https://gcc.gnu.org/ml/gcc/2016-04/msg00083.html"
          },
          {
            "Text": " was made to implement the same feature in GCC."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525221627,
        "id": "07e805a8-f705-423a-9737-f907deef46b8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525221627,
        "parent_id": "4db2da38-fb49-4b54-8178-6aeeaba2ac64",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Conclusion"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Conclusion"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525221628,
        "id": "49df7085-f1b5-4095-be2c-9643f302c290",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525221628,
        "parent_id": "4db2da38-fb49-4b54-8178-6aeeaba2ac64",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Stack corruptions can become easier to debug when safe stack is enabled. Due to a low performance overhead, you can even activated by default in your build configuration."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Stack corruptions can become easier to debug when safe stack is enabled. Due to a low performance overhead, you can even activated by default in your build configuration."
          }
        ]
      }
    ],
    "title": "040 Safe-stack Stack corruptions"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}