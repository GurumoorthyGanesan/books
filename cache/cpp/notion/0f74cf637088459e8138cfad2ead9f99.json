{
  "ID": "0f74cf63-7088-459e-8138-cfad2ead9f99",
  "Root": {
    "alive": true,
    "content": [
      "b0635a97-bbaa-4565-a516-1a60a599bf0d",
      "5d58cf85-f7d0-4c67-9b0d-7b3cc463a4f0",
      "96d1d180-e15b-4af5-996a-2b55e76ffc31",
      "9bb77c91-350c-466c-8a11-a45c68c8c071",
      "1fbeed73-d6a4-4e23-94ad-47d3144571f1",
      "4d414adb-ed43-4435-b8d8-5d9db1ef7c1b",
      "8336b135-6640-4cd4-a838-272df8fb5a2e",
      "892ac737-04dc-44f9-849a-0f568b2bc8c6",
      "2a2e378c-37ce-4ea3-8717-fc87a92d2297",
      "c0f31568-0528-4eb6-b71b-212391ecd204",
      "a8b895c3-b7fd-459c-9f97-59b33466cd85",
      "ecf93c8e-6113-4818-9240-2c9d2720ca89",
      "ebcaede1-35ec-46e3-81d2-4c0f5924fcfd",
      "15455115-b952-4938-b13a-6e3807287a80",
      "bb8e8409-24b6-494f-8146-8c0b38cc9414",
      "32c6b6bc-bfae-4730-9e2e-34827ac07f06",
      "46bf9e38-9f01-45a9-9e3e-7e606829a9a5",
      "11cadbe7-b0ab-4669-b3b3-4bda22a5e848",
      "e218cbef-e460-4b6b-9c8d-63891216a14e",
      "f20426dc-977a-4f2c-b112-4ddf33a1370a",
      "ec781440-ba20-4a82-870d-6f3973d0c452",
      "36c18785-32f0-4a62-9090-40f3f0dfff49",
      "0929d28f-88ee-4a3e-af32-44a92ea88067"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522075444,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "0f74cf63-7088-459e-8138-cfad2ead9f99",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550779200000,
    "parent_id": "ee10cf45-84c7-467c-8068-ea9076a2401a",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Range-Based For"
        ]
      ]
    },
    "type": "page",
    "version": 14,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522075439,
        "id": "b0635a97-bbaa-4565-a516-1a60a599bf0d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522075439,
        "parent_id": "0f74cf63-7088-459e-8138-cfad2ead9f99",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "for",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " loops can be used to iterate over the elements of a iterator-based range, without using a numeric index or directly accessing the iterators:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "for",
            "AttrFlags": 2
          },
          {
            "Text": " loops can be used to iterate over the elements of a iterator-based range, without using a numeric index or directly accessing the iterators:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522075439,
        "id": "5d58cf85-f7d0-4c67-9b0d-7b3cc463a4f0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550779140000,
        "parent_id": "0f74cf63-7088-459e-8138-cfad2ead9f99",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "vector\u003cfloat\u003e v = {0.4f, 12.5f, 16.234f};\n\nfor(auto val: v)\n{\n    std::cout \u003c\u003c val \u003c\u003c \" \";\n}\n\nstd::cout \u003c\u003c std::endl;"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "vector\u003cfloat\u003e v = {0.4f, 12.5f, 16.234f};\n\nfor(auto val: v)\n{\n    std::cout \u003c\u003c val \u003c\u003c \" \";\n}\n\nstd::cout \u003c\u003c std::endl;",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522075439,
        "id": "96d1d180-e15b-4af5-996a-2b55e76ffc31",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522075439,
        "parent_id": "0f74cf63-7088-459e-8138-cfad2ead9f99",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This will iterate over every element in "
            ],
            [
              "v",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", with "
            ],
            [
              "val",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " getting the value of the current element. The following statement:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This will iterate over every element in "
          },
          {
            "Text": "v",
            "AttrFlags": 2
          },
          {
            "Text": ", with "
          },
          {
            "Text": "val",
            "AttrFlags": 2
          },
          {
            "Text": " getting the value of the current element. The following statement:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522075439,
        "id": "9bb77c91-350c-466c-8a11-a45c68c8c071",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550779140000,
        "parent_id": "0f74cf63-7088-459e-8138-cfad2ead9f99",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "for (for-range-declaration : for-range-initializer ) statement"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "for (for-range-declaration : for-range-initializer ) statement",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522075440,
        "id": "1fbeed73-d6a4-4e23-94ad-47d3144571f1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522075440,
        "parent_id": "0f74cf63-7088-459e-8138-cfad2ead9f99",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "is equivalent to:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "is equivalent to:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522075440,
        "id": "4d414adb-ed43-4435-b8d8-5d9db1ef7c1b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550779140000,
        "parent_id": "0f74cf63-7088-459e-8138-cfad2ead9f99",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "{\n    auto\u0026\u0026 __range = for-range-initializer;\n    auto __begin = begin-expr, __end = end-expr;\n    for (; __begin != __end; ++__begin) {\n        for-range-declaration = *__begin;\n        statement\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 4,
        "code": "{\n    auto\u0026\u0026 __range = for-range-initializer;\n    auto __begin = begin-expr, __end = end-expr;\n    for (; __begin != __end; ++__begin) {\n        for-range-declaration = *__begin;\n        statement\n    }\n}",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550779170376,
        "id": "8336b135-6640-4cd4-a838-272df8fb5a2e",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550779140000,
        "parent_id": "0f74cf63-7088-459e-8138-cfad2ead9f99",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In C++ 17:"
            ]
          ]
        },
        "type": "text",
        "version": 21,
        "inline_content": [
          {
            "Text": "In C++ 17:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522075440,
        "id": "892ac737-04dc-44f9-849a-0f568b2bc8c6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550779140000,
        "parent_id": "0f74cf63-7088-459e-8138-cfad2ead9f99",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "{\n    auto\u0026\u0026 __range = for-range-initializer;\n    auto __begin = begin-expr;\n    auto __end = end-expr; // end is allowed to be a different type than begin in C++17\n    for (; __begin != __end; ++__begin) {\n        for-range-declaration = *__begin;\n        statement\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "{\n    auto\u0026\u0026 __range = for-range-initializer;\n    auto __begin = begin-expr;\n    auto __end = end-expr; // end is allowed to be a different type than begin in C++17\n    for (; __begin != __end; ++__begin) {\n        for-range-declaration = *__begin;\n        statement\n    }\n}",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522075440,
        "id": "2a2e378c-37ce-4ea3-8717-fc87a92d2297",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522075440,
        "parent_id": "0f74cf63-7088-459e-8138-cfad2ead9f99",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This change was introduced for the planned support of Ranges TS in C++20."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This change was introduced for the planned support of Ranges TS in C++20."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522075440,
        "id": "c0f31568-0528-4eb6-b71b-212391ecd204",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522075440,
        "parent_id": "0f74cf63-7088-459e-8138-cfad2ead9f99",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In this case, our loop is equivalent to:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In this case, our loop is equivalent to:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522075440,
        "id": "a8b895c3-b7fd-459c-9f97-59b33466cd85",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550779140000,
        "parent_id": "0f74cf63-7088-459e-8138-cfad2ead9f99",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "{\n    auto\u0026\u0026 __range = v;\n    auto __begin = v.begin(), __end = v.end();\n    for (; __begin != __end; ++__begin) {\n        auto val = *__begin;\n        std::cout \u003c\u003c val \u003c\u003c \" \";\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "{\n    auto\u0026\u0026 __range = v;\n    auto __begin = v.begin(), __end = v.end();\n    for (; __begin != __end; ++__begin) {\n        auto val = *__begin;\n        std::cout \u003c\u003c val \u003c\u003c \" \";\n    }\n}",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522075440,
        "id": "ecf93c8e-6113-4818-9240-2c9d2720ca89",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522075440,
        "parent_id": "0f74cf63-7088-459e-8138-cfad2ead9f99",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note that "
            ],
            [
              "auto val",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " declares a value type, which will be a copy of a value stored in the range (we are copy-initializing it from the iterator as we go). If the values stored in the range are expensive to copy, you may want to use "
            ],
            [
              "const auto \u0026val",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". You are also not required to use "
            ],
            [
              "auto",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "; you can use an appropriate typename, so long as it is implicitly convertible from the range’s value type."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note that "
          },
          {
            "Text": "auto val",
            "AttrFlags": 2
          },
          {
            "Text": " declares a value type, which will be a copy of a value stored in the range (we are copy-initializing it from the iterator as we go). If the values stored in the range are expensive to copy, you may want to use "
          },
          {
            "Text": "const auto \u0026val",
            "AttrFlags": 2
          },
          {
            "Text": ". You are also not required to use "
          },
          {
            "Text": "auto",
            "AttrFlags": 2
          },
          {
            "Text": "; you can use an appropriate typename, so long as it is implicitly convertible from the range’s value type."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522075440,
        "id": "ebcaede1-35ec-46e3-81d2-4c0f5924fcfd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522075440,
        "parent_id": "0f74cf63-7088-459e-8138-cfad2ead9f99",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If you need access to the iterator, range-based for cannot help you (not without some effort, at least)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If you need access to the iterator, range-based for cannot help you (not without some effort, at least)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522075441,
        "id": "15455115-b952-4938-b13a-6e3807287a80",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522075441,
        "parent_id": "0f74cf63-7088-459e-8138-cfad2ead9f99",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If you wish to reference it, you may do so:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If you wish to reference it, you may do so:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522075441,
        "id": "bb8e8409-24b6-494f-8146-8c0b38cc9414",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550779200000,
        "parent_id": "0f74cf63-7088-459e-8138-cfad2ead9f99",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "vector\u003cfloat\u003e v = {0.4f, 12.5f, 16.234f};\n\nfor(float \u0026val: v)\n{\n    std::cout \u003c\u003c val \u003c\u003c \" \";\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "vector\u003cfloat\u003e v = {0.4f, 12.5f, 16.234f};\n\nfor(float \u0026val: v)\n{\n    std::cout \u003c\u003c val \u003c\u003c \" \";\n}",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522075441,
        "id": "32c6b6bc-bfae-4730-9e2e-34827ac07f06",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522075441,
        "parent_id": "0f74cf63-7088-459e-8138-cfad2ead9f99",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You could iterate on "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " reference if you have "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " container:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You could iterate on "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": " reference if you have "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": " container:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522075441,
        "id": "46bf9e38-9f01-45a9-9e3e-7e606829a9a5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550779200000,
        "parent_id": "0f74cf63-7088-459e-8138-cfad2ead9f99",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "const vector\u003cfloat\u003e v = {0.4f, 12.5f, 16.234f};\n\nfor(const float \u0026val: v)\n{\n    std::cout \u003c\u003c val \u003c\u003c \" \";\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "const vector\u003cfloat\u003e v = {0.4f, 12.5f, 16.234f};\n\nfor(const float \u0026val: v)\n{\n    std::cout \u003c\u003c val \u003c\u003c \" \";\n}",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522075441,
        "id": "11cadbe7-b0ab-4669-b3b3-4bda22a5e848",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522075441,
        "parent_id": "0f74cf63-7088-459e-8138-cfad2ead9f99",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "One would use forwarding references when the sequence iterator returns a proxy object and you need to operate on that object in a non-"
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " way. Note: it will most likely confuse readers of your code."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "One would use forwarding references when the sequence iterator returns a proxy object and you need to operate on that object in a non-"
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": " way. Note: it will most likely confuse readers of your code."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522075441,
        "id": "e218cbef-e460-4b6b-9c8d-63891216a14e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550779200000,
        "parent_id": "0f74cf63-7088-459e-8138-cfad2ead9f99",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "vector\u003cbool\u003e v(10);\n\nfor(auto\u0026\u0026 val: v)\n{\n    val = true;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "vector\u003cbool\u003e v(10);\n\nfor(auto\u0026\u0026 val: v)\n{\n    val = true;\n}",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522075442,
        "id": "f20426dc-977a-4f2c-b112-4ddf33a1370a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522075442,
        "parent_id": "0f74cf63-7088-459e-8138-cfad2ead9f99",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The “range” type provided to range-based "
            ],
            [
              "for",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can be one of the following:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The “range” type provided to range-based "
          },
          {
            "Text": "for",
            "AttrFlags": 2
          },
          {
            "Text": " can be one of the following:"
          }
        ]
      },
      {
        "alive": true,
        "content": [
          "07148259-4448-4869-a7a4-ef04416e3c83"
        ],
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522075442,
        "id": "ec781440-ba20-4a82-870d-6f3973d0c452",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550779200000,
        "parent_id": "0f74cf63-7088-459e-8138-cfad2ead9f99",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Language arrays:"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 3,
        "content_resolved": [
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1550522075442,
            "id": "07148259-4448-4869-a7a4-ef04416e3c83",
            "ignore_block_count": true,
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1550779200000,
            "parent_id": "ec781440-ba20-4a82-870d-6f3973d0c452",
            "parent_table": "block",
            "properties": {
              "language": [
                [
                  "C++"
                ]
              ],
              "title": [
                [
                  "float arr[] = {0.4f, 12.5f, 16.234f};\n\nfor(auto val: arr)\n{\n    std::cout \u003c\u003c val \u003c\u003c \" \";\n}\n\nNote that allocating a dynamic array does not count:\n\nfloat *arr = new float[3]{0.4f, 12.5f, 16.234f};\n\nfor(auto val: arr) //Compile error.\n{\n    std::cout \u003c\u003c val \u003c\u003c \" \";\n}"
                ]
              ]
            },
            "type": "code",
            "version": 5,
            "code": "float arr[] = {0.4f, 12.5f, 16.234f};\n\nfor(auto val: arr)\n{\n    std::cout \u003c\u003c val \u003c\u003c \" \";\n}\n\nNote that allocating a dynamic array does not count:\n\nfloat *arr = new float[3]{0.4f, 12.5f, 16.234f};\n\nfor(auto val: arr) //Compile error.\n{\n    std::cout \u003c\u003c val \u003c\u003c \" \";\n}",
            "code_language": "C++"
          }
        ],
        "inline_content": [
          {
            "Text": "Language arrays:"
          }
        ]
      },
      {
        "alive": true,
        "content": [
          "5fb928a4-bd1e-42d6-a96a-433ef44a6782"
        ],
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522075443,
        "id": "36c18785-32f0-4a62-9090-40f3f0dfff49",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550779200000,
        "parent_id": "0f74cf63-7088-459e-8138-cfad2ead9f99",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Any type which has member functions "
            ],
            [
              "begin()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "end()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", which return iterators to the elements of the type. The standard library containers qualify, but user-defined types can be used as well:"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 3,
        "content_resolved": [
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1550522075443,
            "id": "5fb928a4-bd1e-42d6-a96a-433ef44a6782",
            "ignore_block_count": true,
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1550779200000,
            "parent_id": "36c18785-32f0-4a62-9090-40f3f0dfff49",
            "parent_table": "block",
            "properties": {
              "language": [
                [
                  "C++"
                ]
              ],
              "title": [
                [
                  "struct Rng\n{\n    float arr[3];\n\n    // pointers are iterators\n    const float* begin() const {return \u0026arr[0];}\n    const float* end() const   {return \u0026arr[3];}\n    float* begin() {return \u0026arr[0];}\n    float* end()   {return \u0026arr[3];}\n};\n\nint main()\n{\n    Rng rng = {{0.4f, 12.5f, 16.234f}};\n\n    for(auto val: rng)\n    {\n        std::cout \u003c\u003c val \u003c\u003c \" \";\n    }\n}"
                ]
              ]
            },
            "type": "code",
            "version": 5,
            "code": "struct Rng\n{\n    float arr[3];\n\n    // pointers are iterators\n    const float* begin() const {return \u0026arr[0];}\n    const float* end() const   {return \u0026arr[3];}\n    float* begin() {return \u0026arr[0];}\n    float* end()   {return \u0026arr[3];}\n};\n\nint main()\n{\n    Rng rng = {{0.4f, 12.5f, 16.234f}};\n\n    for(auto val: rng)\n    {\n        std::cout \u003c\u003c val \u003c\u003c \" \";\n    }\n}",
            "code_language": "C++"
          }
        ],
        "inline_content": [
          {
            "Text": "Any type which has member functions "
          },
          {
            "Text": "begin()",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "end()",
            "AttrFlags": 2
          },
          {
            "Text": ", which return iterators to the elements of the type. The standard library containers qualify, but user-defined types can be used as well:"
          }
        ]
      },
      {
        "alive": true,
        "content": [
          "c60b3904-a319-4910-ac8f-b0c6e7335cd0",
          "3aafd4f4-05d3-41d3-b12b-cd24f5cfa989"
        ],
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522075444,
        "id": "0929d28f-88ee-4a3e-af32-44a92ea88067",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550779200000,
        "parent_id": "0f74cf63-7088-459e-8138-cfad2ead9f99",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Any type which has non-member "
            ],
            [
              "begin(type)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "end(type)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " functions which can found via argument dependent lookup, based on "
            ],
            [
              "type",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". This is useful for creating a range type without having to modify class type itself:"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 4,
        "content_resolved": [
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1550522075444,
            "id": "c60b3904-a319-4910-ac8f-b0c6e7335cd0",
            "ignore_block_count": true,
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1550779200000,
            "parent_id": "0929d28f-88ee-4a3e-af32-44a92ea88067",
            "parent_table": "block",
            "properties": {
              "language": [
                [
                  "C++"
                ]
              ],
              "title": [
                [
                  "namespace Mine\n{\n    struct Rng {float arr[3];};\n\n    // pointers are iterators\n    const float* begin(const Rng \u0026rng) {return \u0026rng.arr[0];}\n    const float* end(const Rng \u0026rng) {return \u0026rng.arr[3];}\n    float* begin(Rng \u0026rng) {return \u0026rng.arr[0];}\n    float* end(Rng \u0026rng) {return \u0026rng.arr[3];}\n}\n\nint main()\n{\n    Mine::Rng rng = {{0.4f, 12.5f, 16.234f}};\n\n    for(auto val: rng)\n    {\n        std::cout \u003c\u003c val \u003c\u003c \" \";\n    }\n}"
                ]
              ]
            },
            "type": "code",
            "version": 5,
            "code": "namespace Mine\n{\n    struct Rng {float arr[3];};\n\n    // pointers are iterators\n    const float* begin(const Rng \u0026rng) {return \u0026rng.arr[0];}\n    const float* end(const Rng \u0026rng) {return \u0026rng.arr[3];}\n    float* begin(Rng \u0026rng) {return \u0026rng.arr[0];}\n    float* end(Rng \u0026rng) {return \u0026rng.arr[3];}\n}\n\nint main()\n{\n    Mine::Rng rng = {{0.4f, 12.5f, 16.234f}};\n\n    for(auto val: rng)\n    {\n        std::cout \u003c\u003c val \u003c\u003c \" \";\n    }\n}",
            "code_language": "C++"
          },
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1550779200000,
            "id": "3aafd4f4-05d3-41d3-b12b-cd24f5cfa989",
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1550779200000,
            "parent_id": "0929d28f-88ee-4a3e-af32-44a92ea88067",
            "parent_table": "block",
            "type": "text",
            "version": 3
          }
        ],
        "inline_content": [
          {
            "Text": "Any type which has non-member "
          },
          {
            "Text": "begin(type)",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "end(type)",
            "AttrFlags": 2
          },
          {
            "Text": " functions which can found via argument dependent lookup, based on "
          },
          {
            "Text": "type",
            "AttrFlags": 2
          },
          {
            "Text": ". This is useful for creating a range type without having to modify class type itself:"
          }
        ]
      }
    ],
    "title": "Range-Based For",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}