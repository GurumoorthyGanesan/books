{
  "ID": "162d3c8a-4398-4e0c-ba3d-942f17f47d2f",
  "Root": {
    "alive": true,
    "content": [
      "ad5d26c9-7779-446b-a47b-6e88456ecf4c",
      "ffacdb30-0290-4f88-b4a9-d8f140aa3d2e",
      "bc7b05a8-678b-4c12-8792-44cd6e7d413d",
      "a01726c3-b805-43c9-bb60-04e47aa0aae2",
      "4115ecbd-df76-45fb-93da-ede5c2636dcf",
      "c050e563-a2fc-494f-8983-dd98cdc1eafd",
      "b56a6e67-5a53-443e-b669-e4d1f8392db0",
      "959a1072-34ef-487e-bf75-5740d6e2b12b",
      "138bd44a-37d7-450f-b6fe-7c8afe66ec0b",
      "59770ca5-d84a-4b98-bd97-47517078c376",
      "09b6d457-06b0-415d-8a8e-537bdd0d8540",
      "17fc82b1-49b4-438a-bace-bc71cea6e11a",
      "50cc694a-ac43-4f88-accb-c592f73aa253",
      "a1842a85-1b1a-43e0-bc13-b2521276be3a",
      "a305bab0-31fb-423e-98c4-31f3a481e612"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550523098143,
    "id": "162d3c8a-4398-4e0c-ba3d-942f17f47d2f",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550523098143,
    "parent_id": "10c1e1fe-bf0e-4f71-b1f2-173539570a03",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "080 Enum conversions"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523098140,
        "id": "ad5d26c9-7779-446b-a47b-6e88456ecf4c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523098140,
        "parent_id": "162d3c8a-4398-4e0c-ba3d-942f17f47d2f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "static_cast",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can convert from an integer or floating point type to an enumeration type (whether scoped or unscoped), and "
            ],
            [
              "vice versa.",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " It can also convert between enumeration types."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "static_cast",
            "AttrFlags": 2
          },
          {
            "Text": " can convert from an integer or floating point type to an enumeration type (whether scoped or unscoped), and "
          },
          {
            "Text": "vice versa.",
            "AttrFlags": 4
          },
          {
            "Text": " It can also convert between enumeration types."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523098141,
        "id": "ffacdb30-0290-4f88-b4a9-d8f140aa3d2e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523098141,
        "parent_id": "162d3c8a-4398-4e0c-ba3d-942f17f47d2f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The conversion from an unscoped enumeration type to an arithmetic type is an implicit conversion; it is possible, but not necessary, to use "
            ],
            [
              "static_cast",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "The conversion from an unscoped enumeration type to an arithmetic type is an implicit conversion; it is possible, but not necessary, to use "
          },
          {
            "Text": "static_cast",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523098141,
        "id": "bc7b05a8-678b-4c12-8792-44cd6e7d413d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523098141,
        "parent_id": "162d3c8a-4398-4e0c-ba3d-942f17f47d2f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When a scoped enumeration type is converted to an arithmetic type:"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "When a scoped enumeration type is converted to an arithmetic type:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523098141,
        "id": "a01726c3-b805-43c9-bb60-04e47aa0aae2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523098141,
        "parent_id": "162d3c8a-4398-4e0c-ba3d-942f17f47d2f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If the enum’s value can be represented exactly in the destination type, the result is that value."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "If the enum’s value can be represented exactly in the destination type, the result is that value."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523098142,
        "id": "4115ecbd-df76-45fb-93da-ede5c2636dcf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523098142,
        "parent_id": "162d3c8a-4398-4e0c-ba3d-942f17f47d2f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Otherwise, if the destination type is an integer type, the result is unspecified."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Otherwise, if the destination type is an integer type, the result is unspecified."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523098142,
        "id": "c050e563-a2fc-494f-8983-dd98cdc1eafd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523098142,
        "parent_id": "162d3c8a-4398-4e0c-ba3d-942f17f47d2f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Otherwise, if the destination type is a floating point type, the result is the same as that of converting to the underlying type and then to the floating point type."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Otherwise, if the destination type is a floating point type, the result is the same as that of converting to the underlying type and then to the floating point type."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523098142,
        "id": "b56a6e67-5a53-443e-b669-e4d1f8392db0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523098142,
        "parent_id": "162d3c8a-4398-4e0c-ba3d-942f17f47d2f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523098142,
        "id": "959a1072-34ef-487e-bf75-5740d6e2b12b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523098142,
        "parent_id": "162d3c8a-4398-4e0c-ba3d-942f17f47d2f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "enum class Format {\n    TEXT = 0,\n    PDF = 1000,\n    OTHER = 2000,\n};\nFormat f = Format::PDF;\nint a = f;                         // error\nint b = static_cast\u003cint\u003e(f);       // ok; b is 1000\nchar c = static_cast\u003cchar\u003e(f);     // unspecified, if 1000 doesn't fit into char\ndouble d = static_cast\u003cdouble\u003e(f); // d is 1000.0... probably"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "enum class Format {\n    TEXT = 0,\n    PDF = 1000,\n    OTHER = 2000,\n};\nFormat f = Format::PDF;\nint a = f;                         // error\nint b = static_cast\u003cint\u003e(f);       // ok; b is 1000\nchar c = static_cast\u003cchar\u003e(f);     // unspecified, if 1000 doesn't fit into char\ndouble d = static_cast\u003cdouble\u003e(f); // d is 1000.0... probably",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523098142,
        "id": "138bd44a-37d7-450f-b6fe-7c8afe66ec0b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523098142,
        "parent_id": "162d3c8a-4398-4e0c-ba3d-942f17f47d2f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When an integer or enumeration type is converted to an enumeration type:"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "When an integer or enumeration type is converted to an enumeration type:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523098143,
        "id": "59770ca5-d84a-4b98-bd97-47517078c376",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523098143,
        "parent_id": "162d3c8a-4398-4e0c-ba3d-942f17f47d2f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If the original value is within the destination enum’s range, the result is that value. Note that this value might be unequal to all enumerators."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "If the original value is within the destination enum’s range, the result is that value. Note that this value might be unequal to all enumerators."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523098143,
        "id": "09b6d457-06b0-415d-8a8e-537bdd0d8540",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523098143,
        "parent_id": "162d3c8a-4398-4e0c-ba3d-942f17f47d2f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Otherwise, the result is unspecified (\u003c= C++14) or undefined (\u003e= C++17)."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Otherwise, the result is unspecified (\u003c= C++14) or undefined (\u003e= C++17)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523098143,
        "id": "17fc82b1-49b4-438a-bace-bc71cea6e11a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523098143,
        "parent_id": "162d3c8a-4398-4e0c-ba3d-942f17f47d2f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523098143,
        "id": "50cc694a-ac43-4f88-accb-c592f73aa253",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523098143,
        "parent_id": "162d3c8a-4398-4e0c-ba3d-942f17f47d2f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "enum Scale {\n    SINGLE = 1,\n    DOUBLE = 2,\n    QUAD = 4\n};\nScale s1 = 1;                     // error\nScale s2 = static_cast\u003cScale\u003e(2); // s2 is DOUBLE\nScale s3 = static_cast\u003cScale\u003e(3); // s3 has value 3, and is not equal to any enumerator\nScale s9 = static_cast\u003cScale\u003e(9); // unspecified value in C++14; UB in C++17"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "enum Scale {\n    SINGLE = 1,\n    DOUBLE = 2,\n    QUAD = 4\n};\nScale s1 = 1;                     // error\nScale s2 = static_cast\u003cScale\u003e(2); // s2 is DOUBLE\nScale s3 = static_cast\u003cScale\u003e(3); // s3 has value 3, and is not equal to any enumerator\nScale s9 = static_cast\u003cScale\u003e(9); // unspecified value in C++14; UB in C++17",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523098143,
        "id": "a1842a85-1b1a-43e0-bc13-b2521276be3a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523098143,
        "parent_id": "162d3c8a-4398-4e0c-ba3d-942f17f47d2f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When a floating point type is converted to an enumeration type, the result is the same as converting to the enum’s underlying type and then to the enum type."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "When a floating point type is converted to an enumeration type, the result is the same as converting to the enum’s underlying type and then to the enum type."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523098143,
        "id": "a305bab0-31fb-423e-98c4-31f3a481e612",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523098143,
        "parent_id": "162d3c8a-4398-4e0c-ba3d-942f17f47d2f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "enum Direction {\n    UP = 0,\n    LEFT = 1,\n    DOWN = 2,\n    RIGHT = 3,\n};\nDirection d = static_cast\u003cDirection\u003e(3.14); // d is RIGHT"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "enum Direction {\n    UP = 0,\n    LEFT = 1,\n    DOWN = 2,\n    RIGHT = 3,\n};\nDirection d = static_cast\u003cDirection\u003e(3.14); // d is RIGHT",
        "code_language": "Plain Text"
      }
    ],
    "title": "080 Enum conversions"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}