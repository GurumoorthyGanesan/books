{
  "ID": "6b4b3b9c-705f-4693-99cb-dcaa0d86c8ff",
  "Root": {
    "alive": true,
    "content": [
      "6e5be94b-7d37-4e2d-b8b5-183fd5d49c37",
      "05e50e29-7f2b-4aca-bb84-aa5c8b2b0fd8",
      "d090780f-a4a7-438c-8107-985ebd396c15",
      "72d1d894-0038-4981-bcfe-a5e236878f5c",
      "6d8c32e3-2815-4dbc-a27e-8fee52c192ca",
      "f65cf6bb-5908-4621-92f5-954dc2de370c"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550524723570,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "6b4b3b9c-705f-4693-99cb-dcaa0d86c8ff",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551688703563,
    "parent_id": "5731e795-bc6e-4f67-a20f-e1ea328ebb4e",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Fence example"
        ]
      ]
    },
    "type": "page",
    "version": 4,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524723569,
        "id": "6e5be94b-7d37-4e2d-b8b5-183fd5d49c37",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524723569,
        "parent_id": "6b4b3b9c-705f-4693-99cb-dcaa0d86c8ff",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The example above can also be implemented with fences and relaxed atomic operations:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The example above can also be implemented with fences and relaxed atomic operations:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524723570,
        "id": "05e50e29-7f2b-4aca-bb84-aa5c8b2b0fd8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524723570,
        "parent_id": "6b4b3b9c-705f-4693-99cb-dcaa0d86c8ff",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int x, y;\nstd::atomic\u003cbool\u003e ready{false};\n\nvoid init()\n{\n  x = 2;\n  y = 3;\n  atomic_thread_fence(std::memory_order_release);\n  ready.store(true, std::memory_order_relaxed);\n}\nvoid use()\n{\n  if (ready.load(std::memory_order_relaxed))\n  {\n    atomic_thread_fence(std::memory_order_acquire);\n    std::cout \u003c\u003c x + y;\n  }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int x, y;\nstd::atomic\u003cbool\u003e ready{false};\n\nvoid init()\n{\n  x = 2;\n  y = 3;\n  atomic_thread_fence(std::memory_order_release);\n  ready.store(true, std::memory_order_relaxed);\n}\nvoid use()\n{\n  if (ready.load(std::memory_order_relaxed))\n  {\n    atomic_thread_fence(std::memory_order_acquire);\n    std::cout \u003c\u003c x + y;\n  }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524723570,
        "id": "d090780f-a4a7-438c-8107-985ebd396c15",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524723570,
        "parent_id": "6b4b3b9c-705f-4693-99cb-dcaa0d86c8ff",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If the atomic load operation sees the value written by the atomic store then the store happens before the load, and so do the fences: the release fence happens before the acquire fence making the writes to "
            ],
            [
              "x",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "y",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " that precede the release fence to become visible to the "
            ],
            [
              "std::cout",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " statement that follows the acquire fence."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If the atomic load operation sees the value written by the atomic store then the store happens before the load, and so do the fences: the release fence happens before the acquire fence making the writes to "
          },
          {
            "Text": "x",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "y",
            "AttrFlags": 2
          },
          {
            "Text": " that precede the release fence to become visible to the "
          },
          {
            "Text": "std::cout",
            "AttrFlags": 2
          },
          {
            "Text": " statement that follows the acquire fence."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524723570,
        "id": "72d1d894-0038-4981-bcfe-a5e236878f5c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524723570,
        "parent_id": "6b4b3b9c-705f-4693-99cb-dcaa0d86c8ff",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A fence might be beneficial if it can reduce the overall number of acquire, release or other synchronization operations. For example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A fence might be beneficial if it can reduce the overall number of acquire, release or other synchronization operations. For example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524723570,
        "id": "6d8c32e3-2815-4dbc-a27e-8fee52c192ca",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524723570,
        "parent_id": "6b4b3b9c-705f-4693-99cb-dcaa0d86c8ff",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "void block_and_use()\n{\n  while (!ready.load(std::memory_order_relaxed))\n    ;\n  atomic_thread_fence(std::memory_order_acquire);\n  std::cout \u003c\u003c x + y;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "void block_and_use()\n{\n  while (!ready.load(std::memory_order_relaxed))\n    ;\n  atomic_thread_fence(std::memory_order_acquire);\n  std::cout \u003c\u003c x + y;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550524723570,
        "id": "f65cf6bb-5908-4621-92f5-954dc2de370c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550524723570,
        "parent_id": "6b4b3b9c-705f-4693-99cb-dcaa0d86c8ff",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "block_and_use()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " function spins until the "
            ],
            [
              "ready",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " flag is set with the help of relaxed atomic load. Then a single acquire fence is used to provide the needed memory ordering."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "block_and_use()",
            "AttrFlags": 2
          },
          {
            "Text": " function spins until the "
          },
          {
            "Text": "ready",
            "AttrFlags": 2
          },
          {
            "Text": " flag is set with the help of relaxed atomic load. Then a single acquire fence is used to provide the needed memory ordering."
          }
        ]
      }
    ],
    "title": "Fence example",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}