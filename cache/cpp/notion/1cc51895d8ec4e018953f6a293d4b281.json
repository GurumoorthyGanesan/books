{
  "ID": "1cc51895-d8ec-4e01-8953-f6a293d4b281",
  "Root": {
    "alive": true,
    "content": [
      "a2db70ed-44e6-4cee-b239-98f2b5cd8b5f",
      "776ab748-80aa-4e4b-9d9d-4457b3d483ac",
      "c02a6c88-0c2c-4e2d-9d21-b671ff1dbfff",
      "90f7d782-3c0c-46db-8a49-66bcae8101f0",
      "28964cf7-8be0-48ad-a927-3bab976df2dc",
      "2e964d02-e7c7-4a54-acf7-96e97f31c292",
      "7e46b7ff-0a3b-4698-b845-89d189af49c9",
      "4df24a3a-3112-4d06-a21a-2ac17277c1e5",
      "78cc8ccd-07b5-4366-834a-cc6668a96983",
      "a9ff6355-843c-448f-8f3a-5526ef268bb5",
      "806c3f48-f097-4a7e-ba15-c22ed9493c33",
      "2de6fb10-eb70-4ffe-a66c-e5435ff128e9",
      "15003123-4beb-4660-bb63-2516f7f92558",
      "2b6433c5-01b1-4473-a4a6-504cc1fb3302",
      "a1a29352-cc58-4818-92c0-899488f3d3c8",
      "29bdcac8-755b-4f5e-8caf-f6fd1363cb58"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522074452,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "1cc51895-d8ec-4e01-8953-f6a293d4b281",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550655660000,
    "parent_id": "71517390-0244-456d-87c4-82c582ca8abf",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Using lambdas for inline parameter pack unpacking"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522074445,
        "id": "a2db70ed-44e6-4cee-b239-98f2b5cd8b5f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522074445,
        "parent_id": "1cc51895-d8ec-4e01-8953-f6a293d4b281",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Parameter pack unpacking traditionally requires writing a helper function for each time you want to do it."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Parameter pack unpacking traditionally requires writing a helper function for each time you want to do it."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522074448,
        "id": "776ab748-80aa-4e4b-9d9d-4457b3d483ac",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522074448,
        "parent_id": "1cc51895-d8ec-4e01-8953-f6a293d4b281",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In this toy example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In this toy example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522074448,
        "id": "c02a6c88-0c2c-4e2d-9d21-b671ff1dbfff",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522074448,
        "parent_id": "1cc51895-d8ec-4e01-8953-f6a293d4b281",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "template\u003cstd::size_t...Is\u003e\nvoid print_indexes( std::index_sequence\u003cIs...\u003e ) {\n  using discard=int[];\n  (void)discard{0,((void)(\n    std::cout \u003c\u003c Is \u003c\u003c '\\n' // here Is is a compile-time constant.\n  ),0)...};\n}\ntemplate\u003cstd::size_t I\u003e\nvoid print_indexes_upto() {\n  return print_indexes( std::make_index_sequence\u003cI\u003e{} );\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "template\u003cstd::size_t...Is\u003e\nvoid print_indexes( std::index_sequence\u003cIs...\u003e ) {\n  using discard=int[];\n  (void)discard{0,((void)(\n    std::cout \u003c\u003c Is \u003c\u003c '\\n' // here Is is a compile-time constant.\n  ),0)...};\n}\ntemplate\u003cstd::size_t I\u003e\nvoid print_indexes_upto() {\n  return print_indexes( std::make_index_sequence\u003cI\u003e{} );\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522074448,
        "id": "90f7d782-3c0c-46db-8a49-66bcae8101f0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522074448,
        "parent_id": "1cc51895-d8ec-4e01-8953-f6a293d4b281",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "print_indexes_upto",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " wants to create and unpack a parameter pack of indexes. In order to do so, it must call a helper function. Every time you want to unpack a parameter pack you created, you end up having to create a custom helper function to do it."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "print_indexes_upto",
            "AttrFlags": 2
          },
          {
            "Text": " wants to create and unpack a parameter pack of indexes. In order to do so, it must call a helper function. Every time you want to unpack a parameter pack you created, you end up having to create a custom helper function to do it."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522074449,
        "id": "28964cf7-8be0-48ad-a927-3bab976df2dc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522074449,
        "parent_id": "1cc51895-d8ec-4e01-8953-f6a293d4b281",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This can be avoided with lambdas."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This can be avoided with lambdas."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522074449,
        "id": "2e964d02-e7c7-4a54-acf7-96e97f31c292",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522074449,
        "parent_id": "1cc51895-d8ec-4e01-8953-f6a293d4b281",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You can unpack parameter packs into a set of invocations of a lambda, like this:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You can unpack parameter packs into a set of invocations of a lambda, like this:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522074449,
        "id": "7e46b7ff-0a3b-4698-b845-89d189af49c9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522074449,
        "parent_id": "1cc51895-d8ec-4e01-8953-f6a293d4b281",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "template\u003cstd::size_t I\u003e\nusing index_t = std::integral_constant\u003cstd::size_t, I\u003e;\ntemplate\u003cstd::size_t I\u003e\nconstexpr index_t\u003cI\u003e index{};\n\ntemplate\u003cclass=void, std::size_t...Is\u003e\nauto index_over( std::index_sequence\u003cIs...\u003e ) {\n  return [](auto\u0026\u0026 f){\n    using discard=int[];\n    (void)discard{0,(void(\n      f( index\u003cIs\u003e )\n    ),0)...};\n  };\n}\n\ntemplate\u003cstd::size_t N\u003e\nauto index_over(index_t\u003cN\u003e = {}) {\n  return index_over( std::make_index_sequence\u003cN\u003e{} );\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "template\u003cstd::size_t I\u003e\nusing index_t = std::integral_constant\u003cstd::size_t, I\u003e;\ntemplate\u003cstd::size_t I\u003e\nconstexpr index_t\u003cI\u003e index{};\n\ntemplate\u003cclass=void, std::size_t...Is\u003e\nauto index_over( std::index_sequence\u003cIs...\u003e ) {\n  return [](auto\u0026\u0026 f){\n    using discard=int[];\n    (void)discard{0,(void(\n      f( index\u003cIs\u003e )\n    ),0)...};\n  };\n}\n\ntemplate\u003cstd::size_t N\u003e\nauto index_over(index_t\u003cN\u003e = {}) {\n  return index_over( std::make_index_sequence\u003cN\u003e{} );\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522074449,
        "id": "4df24a3a-3112-4d06-a21a-2ac17277c1e5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522074449,
        "parent_id": "1cc51895-d8ec-4e01-8953-f6a293d4b281",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "With fold expressions, "
            ],
            [
              "index_over()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can be simplified to:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "With fold expressions, "
          },
          {
            "Text": "index_over()",
            "AttrFlags": 2
          },
          {
            "Text": " can be simplified to:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522074449,
        "id": "78cc8ccd-07b5-4366-834a-cc6668a96983",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522074449,
        "parent_id": "1cc51895-d8ec-4e01-8953-f6a293d4b281",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "template\u003cclass=void, std::size_t...Is\u003e\nauto index_over( std::index_sequence\u003cIs...\u003e ) {\n  return [](auto\u0026\u0026 f){\n    ((void)(f(index\u003cIs\u003e)), ...);\n  };\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "template\u003cclass=void, std::size_t...Is\u003e\nauto index_over( std::index_sequence\u003cIs...\u003e ) {\n  return [](auto\u0026\u0026 f){\n    ((void)(f(index\u003cIs\u003e)), ...);\n  };\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522074449,
        "id": "a9ff6355-843c-448f-8f3a-5526ef268bb5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522074449,
        "parent_id": "1cc51895-d8ec-4e01-8953-f6a293d4b281",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Once you have done that, you can use this to replace having to manually unpack parameter packs with a second overload in other code, letting you unpack parameter packs “inline”:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Once you have done that, you can use this to replace having to manually unpack parameter packs with a second overload in other code, letting you unpack parameter packs “inline”:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522074449,
        "id": "806c3f48-f097-4a7e-ba15-c22ed9493c33",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522074449,
        "parent_id": "1cc51895-d8ec-4e01-8953-f6a293d4b281",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "template\u003cclass Tup, class F\u003e\nvoid for_each_tuple_element(Tup\u0026\u0026 tup, F\u0026\u0026 f) {\n  using T = std::remove_reference_t\u003cTup\u003e;\n  using std::tuple_size;\n  auto from_zero_to_N = index_over\u003c tuple_size\u003cT\u003e{} \u003e();\n\n  from_zero_to_N(\n    [\u0026](auto i){\n      using std::get;\n      f( get\u003ci\u003e( std::forward\u003cTup\u003e(tup) ) );\n    }\n  );\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "template\u003cclass Tup, class F\u003e\nvoid for_each_tuple_element(Tup\u0026\u0026 tup, F\u0026\u0026 f) {\n  using T = std::remove_reference_t\u003cTup\u003e;\n  using std::tuple_size;\n  auto from_zero_to_N = index_over\u003c tuple_size\u003cT\u003e{} \u003e();\n\n  from_zero_to_N(\n    [\u0026](auto i){\n      using std::get;\n      f( get\u003ci\u003e( std::forward\u003cTup\u003e(tup) ) );\n    }\n  );\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522074450,
        "id": "2de6fb10-eb70-4ffe-a66c-e5435ff128e9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522074450,
        "parent_id": "1cc51895-d8ec-4e01-8953-f6a293d4b281",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "auto i",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " passed to the lambda by the "
            ],
            [
              "index_over",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is a "
            ],
            [
              "std::integral_constant\u003cstd::size_t, ???\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". This has a "
            ],
            [
              "constexpr",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " conversion to "
            ],
            [
              "std::size_t",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " that does not depend on the state of "
            ],
            [
              "this",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", so we can use it as a compile-time constant, such as when we pass it to "
            ],
            [
              "std::get\u003ci\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " above."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "auto i",
            "AttrFlags": 2
          },
          {
            "Text": " passed to the lambda by the "
          },
          {
            "Text": "index_over",
            "AttrFlags": 2
          },
          {
            "Text": " is a "
          },
          {
            "Text": "std::integral_constant\u003cstd::size_t, ???\u003e",
            "AttrFlags": 2
          },
          {
            "Text": ". This has a "
          },
          {
            "Text": "constexpr",
            "AttrFlags": 2
          },
          {
            "Text": " conversion to "
          },
          {
            "Text": "std::size_t",
            "AttrFlags": 2
          },
          {
            "Text": " that does not depend on the state of "
          },
          {
            "Text": "this",
            "AttrFlags": 2
          },
          {
            "Text": ", so we can use it as a compile-time constant, such as when we pass it to "
          },
          {
            "Text": "std::get\u003ci\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " above."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522074450,
        "id": "15003123-4beb-4660-bb63-2516f7f92558",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522074450,
        "parent_id": "1cc51895-d8ec-4e01-8953-f6a293d4b281",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To go back to the toy example at the top, rewrite it as:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To go back to the toy example at the top, rewrite it as:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522074450,
        "id": "2b6433c5-01b1-4473-a4a6-504cc1fb3302",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522074450,
        "parent_id": "1cc51895-d8ec-4e01-8953-f6a293d4b281",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "template\u003cstd::size_t I\u003e\nvoid print_indexes_upto() {\n  index_over(index\u003cI\u003e)([](auto i){\n    std::cout \u003c\u003c i \u003c\u003c '\\n'; // here i is a compile-time constant\n  });\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "template\u003cstd::size_t I\u003e\nvoid print_indexes_upto() {\n  index_over(index\u003cI\u003e)([](auto i){\n    std::cout \u003c\u003c i \u003c\u003c '\\n'; // here i is a compile-time constant\n  });\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522074450,
        "id": "a1a29352-cc58-4818-92c0-899488f3d3c8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522074450,
        "parent_id": "1cc51895-d8ec-4e01-8953-f6a293d4b281",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "which is much shorter, and keeps logic in the code that uses it."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "which is much shorter, and keeps logic in the code that uses it."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522074452,
        "id": "29bdcac8-755b-4f5e-8caf-f6fd1363cb58",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522074452,
        "parent_id": "1cc51895-d8ec-4e01-8953-f6a293d4b281",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Live example",
              [
                [
                  "a",
                  "http://coliru.stacked-crooked.com/a/32c204301f7163c9"
                ]
              ]
            ],
            [
              " to play with."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Live example",
            "Link": "http://coliru.stacked-crooked.com/a/32c204301f7163c9"
          },
          {
            "Text": " to play with."
          }
        ]
      }
    ],
    "title": "Using lambdas for inline parameter pack unpacking",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}