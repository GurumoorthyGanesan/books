{
  "ID": "ae724b31-37c9-49f5-98fa-027555f8387e",
  "Root": {
    "alive": true,
    "content": [
      "0e8be57b-d7b8-41ff-81eb-2d2b4bfc0cce",
      "5c5f858f-663b-4122-b6c9-18b9529e7fdb",
      "b5cb032e-27ec-46ea-b433-15acaf164b28"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550525144509,
    "id": "ae724b31-37c9-49f5-98fa-027555f8387e",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550525144509,
    "parent_id": "f0479f5d-620b-453a-b476-4c9e9418b846",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "020 Redeclaring members from a base class to avoid name hiding"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525144505,
        "id": "0e8be57b-d7b8-41ff-81eb-2d2b4bfc0cce",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525144505,
        "parent_id": "ae724b31-37c9-49f5-98fa-027555f8387e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If a "
            ],
            [
              "using-declaration",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " occurs at class scope, it is only allowed to redeclare a member of a base class. For example, "
            ],
            [
              "using std::cout",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is not allowed at class scope."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If a "
          },
          {
            "Text": "using-declaration",
            "AttrFlags": 4
          },
          {
            "Text": " occurs at class scope, it is only allowed to redeclare a member of a base class. For example, "
          },
          {
            "Text": "using std::cout",
            "AttrFlags": 2
          },
          {
            "Text": " is not allowed at class scope."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525144508,
        "id": "5c5f858f-663b-4122-b6c9-18b9529e7fdb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525144508,
        "parent_id": "ae724b31-37c9-49f5-98fa-027555f8387e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Often, the name redeclared is one that would otherwise be hidden. For example, in the below code, "
            ],
            [
              "d1.foo",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " only refers to "
            ],
            [
              "Derived1::foo(const char*)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and a compilation error will occur. The function "
            ],
            [
              "Base::foo(int)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is hidden not considered at all. However, "
            ],
            [
              "d2.foo(42)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is fine because the "
            ],
            [
              "using-declaration",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " brings "
            ],
            [
              "Base::foo(int)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " into the set of entities named "
            ],
            [
              "foo",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in "
            ],
            [
              "Derived2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Name lookup then finds both "
            ],
            [
              "foo",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "s and overload resolution selects "
            ],
            [
              "Base::foo",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Often, the name redeclared is one that would otherwise be hidden. For example, in the below code, "
          },
          {
            "Text": "d1.foo",
            "AttrFlags": 2
          },
          {
            "Text": " only refers to "
          },
          {
            "Text": "Derived1::foo(const char*)",
            "AttrFlags": 2
          },
          {
            "Text": " and a compilation error will occur. The function "
          },
          {
            "Text": "Base::foo(int)",
            "AttrFlags": 2
          },
          {
            "Text": " is hidden not considered at all. However, "
          },
          {
            "Text": "d2.foo(42)",
            "AttrFlags": 2
          },
          {
            "Text": " is fine because the "
          },
          {
            "Text": "using-declaration",
            "AttrFlags": 4
          },
          {
            "Text": " brings "
          },
          {
            "Text": "Base::foo(int)",
            "AttrFlags": 2
          },
          {
            "Text": " into the set of entities named "
          },
          {
            "Text": "foo",
            "AttrFlags": 2
          },
          {
            "Text": " in "
          },
          {
            "Text": "Derived2",
            "AttrFlags": 2
          },
          {
            "Text": ". Name lookup then finds both "
          },
          {
            "Text": "foo",
            "AttrFlags": 2
          },
          {
            "Text": "s and overload resolution selects "
          },
          {
            "Text": "Base::foo",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550525144509,
        "id": "b5cb032e-27ec-46ea-b433-15acaf164b28",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550525144509,
        "parent_id": "ae724b31-37c9-49f5-98fa-027555f8387e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "struct Base {\n    void foo(int);\n};\nstruct Derived1 : Base {\n    void foo(const char*);\n};\nstruct Derived2 : Base {\n    using Base::foo;\n    void foo(const char*);\n};\nint main() {\n    Derived1 d1;\n    d1.foo(42);  // error\n    Derived2 d2;\n    d2.foo(42);  // OK\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "struct Base {\n    void foo(int);\n};\nstruct Derived1 : Base {\n    void foo(const char*);\n};\nstruct Derived2 : Base {\n    using Base::foo;\n    void foo(const char*);\n};\nint main() {\n    Derived1 d1;\n    d1.foo(42);  // error\n    Derived2 d2;\n    d2.foo(42);  // OK\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "020 Redeclaring members from a base class to avoid name hiding"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}