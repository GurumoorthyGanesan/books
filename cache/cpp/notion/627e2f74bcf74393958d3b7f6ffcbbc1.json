{
  "ID": "627e2f74-bcf7-4393-958d-3b7f6ffcbbc1",
  "Root": {
    "alive": true,
    "content": [
      "8276ab5e-5963-441d-89a2-2922a893d427",
      "7070a6d2-d9f2-4a94-ac62-ea696840d156",
      "4ba9e623-c36c-405d-84e8-0839184f12a0",
      "0ef8df9b-409d-4f60-89d0-156c4ce012dc",
      "4d0407f5-4128-42f2-bfd0-816232a61040",
      "a41f8ee3-24b7-4b66-a583-c0125ee45425",
      "54bdf5ad-3fce-4bdc-aa10-20d925d92b38",
      "2d398ec6-e15f-4020-97c8-bd3f5fe9f2aa",
      "b8d7e3f3-b6fa-4cf2-89b7-f7d2f25a7d02",
      "c0dd4311-a7e9-438a-b38c-4ceb07eaaaeb",
      "60e05a76-00a2-490d-81f4-0f75435e1fb3",
      "b3c50be4-7cf2-4547-b9f6-303037d0c385",
      "24e1bc9c-8ca4-4f62-ab51-9ef98ff5c6e8"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522060710,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "627e2f74-bcf7-4393-958d-3b7f6ffcbbc1",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550655720000,
    "parent_id": "2be9c7d5-be12-439a-8968-ad057c67187a",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Assignment operator"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522060703,
        "id": "8276ab5e-5963-441d-89a2-2922a893d427",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522060703,
        "parent_id": "627e2f74-bcf7-4393-958d-3b7f6ffcbbc1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The assignment operator is one of the most important operators because it allows you to change the status of a variable."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The assignment operator is one of the most important operators because it allows you to change the status of a variable."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522060706,
        "id": "7070a6d2-d9f2-4a94-ac62-ea696840d156",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522060706,
        "parent_id": "627e2f74-bcf7-4393-958d-3b7f6ffcbbc1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If you do not overload the assigment operator for your "
            ],
            [
              "class",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "/"
            ],
            [
              "struct",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", it is automatically generated by the compiler: the automatically-generated assignment operator performs a “memberwise assignment”, ie by invoking assignment operators on all members, so that one object is copied to the other, a member at time. The assignment operator should be overloaded when the simple memberwise assignment is not suitable for your "
            ],
            [
              "class",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "/"
            ],
            [
              "struct",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", for example if you need to perform a "
            ],
            [
              "deep copy",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " of an object."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If you do not overload the assigment operator for your "
          },
          {
            "Text": "class",
            "AttrFlags": 2
          },
          {
            "Text": "/"
          },
          {
            "Text": "struct",
            "AttrFlags": 2
          },
          {
            "Text": ", it is automatically generated by the compiler: the automatically-generated assignment operator performs a “memberwise assignment”, ie by invoking assignment operators on all members, so that one object is copied to the other, a member at time. The assignment operator should be overloaded when the simple memberwise assignment is not suitable for your "
          },
          {
            "Text": "class",
            "AttrFlags": 2
          },
          {
            "Text": "/"
          },
          {
            "Text": "struct",
            "AttrFlags": 2
          },
          {
            "Text": ", for example if you need to perform a "
          },
          {
            "Text": "deep copy",
            "AttrFlags": 1
          },
          {
            "Text": " of an object."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522060706,
        "id": "4ba9e623-c36c-405d-84e8-0839184f12a0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522060706,
        "parent_id": "627e2f74-bcf7-4393-958d-3b7f6ffcbbc1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Overloading the assignment operator "
            ],
            [
              "=",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is easy, but you should follow some simple steps."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Overloading the assignment operator "
          },
          {
            "Text": "=",
            "AttrFlags": 2
          },
          {
            "Text": " is easy, but you should follow some simple steps."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522060707,
        "id": "0ef8df9b-409d-4f60-89d0-156c4ce012dc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522060707,
        "parent_id": "627e2f74-bcf7-4393-958d-3b7f6ffcbbc1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Test for self-assignment.",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " This check is important for two reasons:"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Test for self-assignment.",
            "AttrFlags": 1
          },
          {
            "Text": " This check is important for two reasons:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522060707,
        "id": "4d0407f5-4128-42f2-bfd0-816232a61040",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522060707,
        "parent_id": "627e2f74-bcf7-4393-958d-3b7f6ffcbbc1",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "- a self-assignment is a needless copy, so it does not make sense to perform it;\n- the next step will not work in the case of a self-assignment."
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "- a self-assignment is a needless copy, so it does not make sense to perform it;\n- the next step will not work in the case of a self-assignment.",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522060707,
        "id": "a41f8ee3-24b7-4b66-a583-c0125ee45425",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522060707,
        "parent_id": "627e2f74-bcf7-4393-958d-3b7f6ffcbbc1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Clean the old data.",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " The old data must be replaced with new ones. Now, you can understand the second reason of the previous step: if the content of the object was destroyed, a self-assignment will fail to perform the copy."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Clean the old data.",
            "AttrFlags": 1
          },
          {
            "Text": " The old data must be replaced with new ones. Now, you can understand the second reason of the previous step: if the content of the object was destroyed, a self-assignment will fail to perform the copy."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522060708,
        "id": "54bdf5ad-3fce-4bdc-aa10-20d925d92b38",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522060708,
        "parent_id": "627e2f74-bcf7-4393-958d-3b7f6ffcbbc1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Copy all members.",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " If you overload the assigment operator for your "
            ],
            [
              "class",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or your "
            ],
            [
              "struct",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", it is not automatically generated by the compiler, so you will need to take charge of copying all members from the other object."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Copy all members.",
            "AttrFlags": 1
          },
          {
            "Text": " If you overload the assigment operator for your "
          },
          {
            "Text": "class",
            "AttrFlags": 2
          },
          {
            "Text": " or your "
          },
          {
            "Text": "struct",
            "AttrFlags": 2
          },
          {
            "Text": ", it is not automatically generated by the compiler, so you will need to take charge of copying all members from the other object."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522060708,
        "id": "2d398ec6-e15f-4020-97c8-bd3f5fe9f2aa",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522060708,
        "parent_id": "627e2f74-bcf7-4393-958d-3b7f6ffcbbc1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Return",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "*this",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". The operator returns by itself by reference, because it allows chaining (i.e. "
            ],
            [
              "int b = (a = 6) + 4; //b == 10",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ")."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Return",
            "AttrFlags": 1
          },
          {
            "Text": " "
          },
          {
            "Text": "*this",
            "AttrFlags": 2
          },
          {
            "Text": ". The operator returns by itself by reference, because it allows chaining (i.e. "
          },
          {
            "Text": "int b = (a = 6) + 4; //b == 10",
            "AttrFlags": 2
          },
          {
            "Text": ")."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522060708,
        "id": "b8d7e3f3-b6fa-4cf2-89b7-f7d2f25a7d02",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522060708,
        "parent_id": "627e2f74-bcf7-4393-958d-3b7f6ffcbbc1",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "//T is some type\nT\u0026 operator=(const T\u0026 other)\n{\n    //Do something (like copying values)\n    return *this;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "//T is some type\nT\u0026 operator=(const T\u0026 other)\n{\n    //Do something (like copying values)\n    return *this;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522060708,
        "id": "c0dd4311-a7e9-438a-b38c-4ceb07eaaaeb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522060708,
        "parent_id": "627e2f74-bcf7-4393-958d-3b7f6ffcbbc1",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522060709,
        "id": "60e05a76-00a2-490d-81f4-0f75435e1fb3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522060709,
        "parent_id": "627e2f74-bcf7-4393-958d-3b7f6ffcbbc1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note:",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "other",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is passed by "
            ],
            [
              "const\u0026",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", because the object being assigned should not be changed, and passing by reference is faster than by value, and to make sure than "
            ],
            [
              "operator=",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " doesn’t modify it accidentally, it is "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note:",
            "AttrFlags": 1
          },
          {
            "Text": " "
          },
          {
            "Text": "other",
            "AttrFlags": 2
          },
          {
            "Text": " is passed by "
          },
          {
            "Text": "const\u0026",
            "AttrFlags": 2
          },
          {
            "Text": ", because the object being assigned should not be changed, and passing by reference is faster than by value, and to make sure than "
          },
          {
            "Text": "operator=",
            "AttrFlags": 2
          },
          {
            "Text": " doesn’t modify it accidentally, it is "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522060709,
        "id": "b3c50be4-7cf2-4547-b9f6-303037d0c385",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522060709,
        "parent_id": "627e2f74-bcf7-4393-958d-3b7f6ffcbbc1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The assignment operator can only to be overloaded in the "
            ],
            [
              "class",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "/"
            ],
            [
              "struct",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", because the left value of "
            ],
            [
              "=",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is "
            ],
            [
              "always",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " the "
            ],
            [
              "class",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "/"
            ],
            [
              "struct",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " itself. Defining it as a free function doesn’t have this guarantee, and is disallowed because of that."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The assignment operator can only to be overloaded in the "
          },
          {
            "Text": "class",
            "AttrFlags": 2
          },
          {
            "Text": "/"
          },
          {
            "Text": "struct",
            "AttrFlags": 2
          },
          {
            "Text": ", because the left value of "
          },
          {
            "Text": "=",
            "AttrFlags": 2
          },
          {
            "Text": " is "
          },
          {
            "Text": "always",
            "AttrFlags": 1
          },
          {
            "Text": " the "
          },
          {
            "Text": "class",
            "AttrFlags": 2
          },
          {
            "Text": "/"
          },
          {
            "Text": "struct",
            "AttrFlags": 2
          },
          {
            "Text": " itself. Defining it as a free function doesn’t have this guarantee, and is disallowed because of that."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522060710,
        "id": "24e1bc9c-8ca4-4f62-ab51-9ef98ff5c6e8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522060710,
        "parent_id": "627e2f74-bcf7-4393-958d-3b7f6ffcbbc1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When you declare it in the "
            ],
            [
              "class",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "/"
            ],
            [
              "struct",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", the left value is implicitly the "
            ],
            [
              "class",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "/"
            ],
            [
              "struct",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " itself, so there is no problem with that."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When you declare it in the "
          },
          {
            "Text": "class",
            "AttrFlags": 2
          },
          {
            "Text": "/"
          },
          {
            "Text": "struct",
            "AttrFlags": 2
          },
          {
            "Text": ", the left value is implicitly the "
          },
          {
            "Text": "class",
            "AttrFlags": 2
          },
          {
            "Text": "/"
          },
          {
            "Text": "struct",
            "AttrFlags": 2
          },
          {
            "Text": " itself, so there is no problem with that."
          }
        ]
      }
    ],
    "title": "Assignment operator",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}