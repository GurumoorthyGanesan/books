{
  "ID": "9af857fb-e32f-4431-839d-801d6d04561d",
  "Root": {
    "alive": true,
    "content": [
      "6519e42b-8fc7-4c5e-a2d5-7e864ba5d608",
      "58395cf3-a147-49bd-8989-ccdc12e28946",
      "28a2d9a5-7c21-45ea-88e0-44961c684539",
      "6eb72d16-4c2a-4da0-890f-3e6d36168699",
      "0750657b-14e8-43e3-8af1-0de541b7dd34",
      "48867a56-1e85-4d63-a43d-57ed7da671a9",
      "81e9a67f-579c-4ee5-9606-828706890970",
      "87219620-e774-48d6-87b8-1f9b6baa4ad8",
      "b4a6d38b-6ca2-4f86-bafb-f7c325bd5d11",
      "4569ea5b-f4ea-4c12-addc-2415cdf65993"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522759502,
    "id": "9af857fb-e32f-4431-839d-801d6d04561d",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550522759502,
    "parent_id": "c48a63c8-822c-4a23-a960-60de4face6ae",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "060  - bitwise NOT unary complement"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522759498,
        "id": "6519e42b-8fc7-4c5e-a2d5-7e864ba5d608",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522759498,
        "parent_id": "9af857fb-e32f-4431-839d-801d6d04561d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "unsigned char a = 234;  // 1110 1010b  (0xEA)\nunsigned char b = ~a;   // 0001 0101b  (0x15)\n\nstd::cout \u003c\u003c \"a = \" \u003c\u003c static_cast\u003cint\u003e(a) \u003c\u003c\n             \", b = \" \u003c\u003c static_cast\u003cint\u003e(b) \u003c\u003c std::endl;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "unsigned char a = 234;  // 1110 1010b  (0xEA)\nunsigned char b = ~a;   // 0001 0101b  (0x15)\n\nstd::cout \u003c\u003c \"a = \" \u003c\u003c static_cast\u003cint\u003e(a) \u003c\u003c\n             \", b = \" \u003c\u003c static_cast\u003cint\u003e(b) \u003c\u003c std::endl;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522759501,
        "id": "58395cf3-a147-49bd-8989-ccdc12e28946",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522759501,
        "parent_id": "9af857fb-e32f-4431-839d-801d6d04561d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Output"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Output"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522759501,
        "id": "28a2d9a5-7c21-45ea-88e0-44961c684539",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522759501,
        "parent_id": "9af857fb-e32f-4431-839d-801d6d04561d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "a = 234, b = 21",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "a = 234, b = 21",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522759501,
        "id": "6eb72d16-4c2a-4da0-890f-3e6d36168699",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522759501,
        "parent_id": "9af857fb-e32f-4431-839d-801d6d04561d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Why"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Why"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522759501,
        "id": "0750657b-14e8-43e3-8af1-0de541b7dd34",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522759501,
        "parent_id": "9af857fb-e32f-4431-839d-801d6d04561d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A bit wise "
            ],
            [
              "NOT",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (unary complement) operates on the bit level and simply flips each bit. If it’s a "
            ],
            [
              "1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", it’s changed to a "
            ],
            [
              "0",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", if it’s a "
            ],
            [
              "0",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", it’s changed to a "
            ],
            [
              "1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". The bit wise NOT has the same effect as XOR’ing a value against the max value for a specific type:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A bit wise "
          },
          {
            "Text": "NOT",
            "AttrFlags": 2
          },
          {
            "Text": " (unary complement) operates on the bit level and simply flips each bit. If it’s a "
          },
          {
            "Text": "1",
            "AttrFlags": 2
          },
          {
            "Text": ", it’s changed to a "
          },
          {
            "Text": "0",
            "AttrFlags": 2
          },
          {
            "Text": ", if it’s a "
          },
          {
            "Text": "0",
            "AttrFlags": 2
          },
          {
            "Text": ", it’s changed to a "
          },
          {
            "Text": "1",
            "AttrFlags": 2
          },
          {
            "Text": ". The bit wise NOT has the same effect as XOR’ing a value against the max value for a specific type:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522759501,
        "id": "48867a56-1e85-4d63-a43d-57ed7da671a9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522759501,
        "parent_id": "9af857fb-e32f-4431-839d-801d6d04561d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "unsigned char a = 234;  // 1110 1010b  (0xEA)\nunsigned char b = ~a;   // 0001 0101b  (0x15)\nunsigned char c = a ^ ~0;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "unsigned char a = 234;  // 1110 1010b  (0xEA)\nunsigned char b = ~a;   // 0001 0101b  (0x15)\nunsigned char c = a ^ ~0;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522759502,
        "id": "81e9a67f-579c-4ee5-9606-828706890970",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522759502,
        "parent_id": "9af857fb-e32f-4431-839d-801d6d04561d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The bit wise NOT can also be a convenient way to check the maximum value for a specific integral type:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The bit wise NOT can also be a convenient way to check the maximum value for a specific integral type:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522759502,
        "id": "87219620-e774-48d6-87b8-1f9b6baa4ad8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522759502,
        "parent_id": "9af857fb-e32f-4431-839d-801d6d04561d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "unsigned int i = ~0;\nunsigned char c = ~0;\n\nstd::cout \u003c\u003c \"max uint = \" \u003c\u003c i \u003c\u003c std::endl \u003c\u003c\n             \"max uchar = \" \u003c\u003c static_cast\u003cshort\u003e(c) \u003c\u003c std::endl;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "unsigned int i = ~0;\nunsigned char c = ~0;\n\nstd::cout \u003c\u003c \"max uint = \" \u003c\u003c i \u003c\u003c std::endl \u003c\u003c\n             \"max uchar = \" \u003c\u003c static_cast\u003cshort\u003e(c) \u003c\u003c std::endl;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522759502,
        "id": "b4a6d38b-6ca2-4f86-bafb-f7c325bd5d11",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522759502,
        "parent_id": "9af857fb-e32f-4431-839d-801d6d04561d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The bit wise NOT does not change the value of the original value and does not have a compound assignment operator, so you can not do "
            ],
            [
              "a ~= 10",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " for example."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The bit wise NOT does not change the value of the original value and does not have a compound assignment operator, so you can not do "
          },
          {
            "Text": "a ~= 10",
            "AttrFlags": 2
          },
          {
            "Text": " for example."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522759502,
        "id": "4569ea5b-f4ea-4c12-addc-2415cdf65993",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522759502,
        "parent_id": "9af857fb-e32f-4431-839d-801d6d04561d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The bit wise NOT ("
            ],
            [
              "~",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") should not be confused with the logical NOT ("
            ],
            [
              "\\!",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "); where a bit wise NOT will flip each bit, a logical NOT will use the whole value to do its operation on, in other words "
            ],
            [
              "(!1) != (~1)",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The bit wise NOT ("
          },
          {
            "Text": "~",
            "AttrFlags": 2
          },
          {
            "Text": ") should not be confused with the logical NOT ("
          },
          {
            "Text": "\\!",
            "AttrFlags": 2
          },
          {
            "Text": "); where a bit wise NOT will flip each bit, a logical NOT will use the whole value to do its operation on, in other words "
          },
          {
            "Text": "(!1) != (~1)",
            "AttrFlags": 2
          }
        ]
      }
    ],
    "title": "060  - bitwise NOT unary complement"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}