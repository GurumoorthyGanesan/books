{
  "ID": "5f8251d1-27e6-4780-afa5-816b8818502d",
  "Root": {
    "alive": true,
    "content": [
      "8127249f-1ed7-4813-9226-6abd96611ada",
      "5190f0a2-a3eb-4d3a-9380-a70626027c0c",
      "aad6323c-5e87-4ecb-902f-de7759801f4d",
      "5251e6dc-02b6-473a-b155-c639ea513cd4",
      "176b6cab-3173-49c9-baad-1ceb6ce76898",
      "116f5272-9deb-4d4f-b41e-b02ed797e69c",
      "197363b3-dc40-401b-ba30-74b96b45be8d",
      "168e27f8-89da-4d97-8eb8-42e96bc05b57",
      "916aea15-f707-4158-8766-d7a9ba42c614"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550523061461,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "5f8251d1-27e6-4780-afa5-816b8818502d",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550736960000,
    "parent_id": "99e19430-5cdd-423f-8fa9-0e2f0bf264ab",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Checking a bit"
        ]
      ]
    },
    "type": "page",
    "version": 13,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523061457,
        "id": "8127249f-1ed7-4813-9226-6abd96611ada",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523061457,
        "parent_id": "5f8251d1-27e6-4780-afa5-816b8818502d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "C-style bit-manipulation"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "C-style bit-manipulation"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523061459,
        "id": "5190f0a2-a3eb-4d3a-9380-a70626027c0c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523061459,
        "parent_id": "5f8251d1-27e6-4780-afa5-816b8818502d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The value of the bit can be obtained by shifting the number to the right "
            ],
            [
              "x",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " times and then performing bitwise AND ("
            ],
            [
              "\u0026",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") on it:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The value of the bit can be obtained by shifting the number to the right "
          },
          {
            "Text": "x",
            "AttrFlags": 2
          },
          {
            "Text": " times and then performing bitwise AND ("
          },
          {
            "Text": "\u0026",
            "AttrFlags": 2
          },
          {
            "Text": ") on it:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523061460,
        "id": "aad6323c-5e87-4ecb-902f-de7759801f4d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550736960000,
        "parent_id": "5f8251d1-27e6-4780-afa5-816b8818502d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "(number \u003e\u003e x) \u0026 1LL;  // 1 if the 'x'th bit of 'number' is set, 0 otherwise"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "(number \u003e\u003e x) \u0026 1LL;  // 1 if the 'x'th bit of 'number' is set, 0 otherwise",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523061460,
        "id": "5251e6dc-02b6-473a-b155-c639ea513cd4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523061460,
        "parent_id": "5f8251d1-27e6-4780-afa5-816b8818502d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The right-shift operation may be implemented as either an arithmetic (signed) shift or a logical (unsigned) shift. If "
            ],
            [
              "number",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in the expression "
            ],
            [
              "number \u003e\u003e x",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " has a signed type and a negative value, the resulting value is implementation-defined."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The right-shift operation may be implemented as either an arithmetic (signed) shift or a logical (unsigned) shift. If "
          },
          {
            "Text": "number",
            "AttrFlags": 2
          },
          {
            "Text": " in the expression "
          },
          {
            "Text": "number \u003e\u003e x",
            "AttrFlags": 2
          },
          {
            "Text": " has a signed type and a negative value, the resulting value is implementation-defined."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523061460,
        "id": "176b6cab-3173-49c9-baad-1ceb6ce76898",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523061460,
        "parent_id": "5f8251d1-27e6-4780-afa5-816b8818502d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If we need the value of that bit directly in-place, we could instead left shift the mask:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If we need the value of that bit directly in-place, we could instead left shift the mask:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523061460,
        "id": "116f5272-9deb-4d4f-b41e-b02ed797e69c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550736960000,
        "parent_id": "5f8251d1-27e6-4780-afa5-816b8818502d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "(number \u0026 (1LL \u003c\u003c x));  // (1 \u003c\u003c x) if the 'x'th bit of 'number' is set, 0 otherwise"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "(number \u0026 (1LL \u003c\u003c x));  // (1 \u003c\u003c x) if the 'x'th bit of 'number' is set, 0 otherwise",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523061460,
        "id": "197363b3-dc40-401b-ba30-74b96b45be8d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523061460,
        "parent_id": "5f8251d1-27e6-4780-afa5-816b8818502d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Either can be used as a conditional, since all non-zero values are considered true."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Either can be used as a conditional, since all non-zero values are considered true."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523061461,
        "id": "168e27f8-89da-4d97-8eb8-42e96bc05b57",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523061461,
        "parent_id": "5f8251d1-27e6-4780-afa5-816b8818502d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Using std::bitset"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Using std::bitset"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523061461,
        "id": "916aea15-f707-4158-8766-d7a9ba42c614",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550736960000,
        "parent_id": "5f8251d1-27e6-4780-afa5-816b8818502d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "std::bitset\u003c4\u003e num(std::string(\"0010\"));\nbool bit_val = num.test(1);  // bit_val value is set to true;"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "std::bitset\u003c4\u003e num(std::string(\"0010\"));\nbool bit_val = num.test(1);  // bit_val value is set to true;",
        "code_language": "C++"
      }
    ],
    "title": "Checking a bit",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}