{
  "ID": "b7a2fa51-e43c-4727-a42c-7f716dea4885",
  "Root": {
    "alive": true,
    "content": [
      "c973f744-7781-45f3-93c6-9f4acb594e70",
      "7bcc0abe-a56e-4fe4-88f5-cc1c4bc4d451",
      "c6627224-62f9-4297-a7b9-a83f75d3ecde",
      "475e272e-5d6f-4552-8031-cb721f88ed25",
      "0eec593c-b751-4104-8a76-e0052b747b55",
      "c894ad94-0ebc-4925-ad63-22550bde204d",
      "617f4afe-32df-407f-91e4-b443668ad69f",
      "5cd66b4e-b2bb-4440-92d6-e50969669307",
      "fbd49b94-a23a-4f04-bad4-8e7d7ca4c59b",
      "1f8ea8f6-973a-4a14-a613-b46bb21705ce",
      "d3c0d8da-48cd-448c-938c-0dc6340f27d9",
      "d6125fa5-a1c3-4ad8-9744-95d69d6d6adb",
      "e00cef2b-2f6a-4bab-b71c-bb4883af3214",
      "718a8371-f1c2-4ee9-ad85-4d8720f1a76a",
      "6f0014be-f1c3-48db-9347-3b9fdab6ef11",
      "5b182aa3-ce2d-4e0e-872c-fbc1b2e48a6b",
      "406a5a10-38ac-48eb-b673-56aa530bc4cd",
      "39335c35-89b8-45be-b2e2-31a5016006d3",
      "c15d616e-8bb7-4d01-8b0d-4f6ee182848f",
      "b3b7bf69-4006-4cd8-a6f9-3f1449fee77d",
      "7c4277cb-d8db-4b75-b9ce-9ddd7be02455",
      "3ab4c652-b11f-4af6-82e9-e30ccc87ac2f",
      "97689556-b45c-4cf9-9d9b-b5f5214b9369",
      "203f7f31-c8a7-472f-a2c7-a1c3451b0a82",
      "ef82c932-4678-4f28-809d-aa17761d801a",
      "f1cba66a-ad6a-4a55-bca7-5c228f83cf13",
      "18fbc884-68b4-4626-9a1d-ed0d5477bb9e",
      "a1efba9d-f21a-4384-8621-a145867ae51d",
      "c113d16f-13b9-4648-8e45-89a3097e3bb3",
      "3a2389f0-8692-4489-a285-ff13fa165bec",
      "944cc150-a71a-4308-9fb4-fdbc09e7fe0a",
      "67f4efef-e265-4b54-a9c2-5021ee2c7954",
      "c34d2160-fd17-4020-9812-56fdd549883c",
      "4c2b4b51-32b1-4c94-a4e5-04c798dfbee0",
      "2b4474e3-8c7f-47cb-ab5a-b2e3728f2c6a",
      "09606291-365a-40c6-aca4-68d8fa18d5b6",
      "0738f730-9001-45e7-8adc-03b14ec74341",
      "aa483bc7-2495-4701-aeae-38e9d32a965a",
      "32660981-575a-44f7-97bf-3ec106a117ba",
      "f3e6c1d2-a588-4101-86c2-3107ce45846c",
      "c4fb5293-acea-4f61-89e0-e978e9ce7100",
      "e079a264-1285-4f66-b83a-a3d75bc405ba"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550523875047,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "b7a2fa51-e43c-4727-a42c-7f716dea4885",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550799060000,
    "parent_id": "193b149e-733b-4344-8898-29dc4a2ef0b0",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Different keywords"
        ]
      ]
    },
    "type": "page",
    "version": 18,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550798880000,
        "id": "c973f744-7781-45f3-93c6-9f4acb594e70",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550799060000,
        "parent_id": "b7a2fa51-e43c-4727-a42c-7f716dea4885",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "#note needs editing, possibly redundant"
            ]
          ]
        },
        "type": "text",
        "version": 46,
        "inline_content": [
          {
            "Text": "#note needs editing, possibly redundant"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523875037,
        "id": "7bcc0abe-a56e-4fe4-88f5-cc1c4bc4d451",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523875037,
        "parent_id": "b7a2fa51-e43c-4727-a42c-7f716dea4885",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "void C++"
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "void C++"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523875040,
        "id": "c6627224-62f9-4297-a7b9-a83f75d3ecde",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523875040,
        "parent_id": "b7a2fa51-e43c-4727-a42c-7f716dea4885",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When used as a function return type, the void keyword specifies that the function does not return a value. When used for a function’s parameter list, void specifies that the function takes no parameters. When used in the declaration of a pointer, void specifies that the pointer is “universal.”"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "When used as a function return type, the void keyword specifies that the function does not return a value. When used for a function’s parameter list, void specifies that the function takes no parameters. When used in the declaration of a pointer, void specifies that the pointer is “universal.”"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523875040,
        "id": "475e272e-5d6f-4552-8031-cb721f88ed25",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523875040,
        "parent_id": "b7a2fa51-e43c-4727-a42c-7f716dea4885",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If a pointer’s type is void *, the pointer can point to any variable that is not declared with the const or volatile keyword. A void pointer cannot be dereferenced unless it is cast to another type. A void pointer can be converted into any other type of data pointer."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "If a pointer’s type is void *, the pointer can point to any variable that is not declared with the const or volatile keyword. A void pointer cannot be dereferenced unless it is cast to another type. A void pointer can be converted into any other type of data pointer."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523875041,
        "id": "0eec593c-b751-4104-8a76-e0052b747b55",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523875041,
        "parent_id": "b7a2fa51-e43c-4727-a42c-7f716dea4885",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A void pointer can point to a function, but not to a class member in C++."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "A void pointer can point to a function, but not to a class member in C++."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523875041,
        "id": "c894ad94-0ebc-4925-ad63-22550bde204d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550798880000,
        "parent_id": "b7a2fa51-e43c-4727-a42c-7f716dea4885",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "void vobject;   // C2182  \nvoid *pv;   // okay  \nint *pint; int i;  \nint main() {  \npv = \u0026i;  \n   // Cast optional in C required in C++  \npint = (int *)pv;"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "void vobject;   // C2182  \nvoid *pv;   // okay  \nint *pint; int i;  \nint main() {  \npv = \u0026i;  \n   // Cast optional in C required in C++  \npint = (int *)pv;",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523875041,
        "id": "617f4afe-32df-407f-91e4-b443668ad69f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523875041,
        "parent_id": "b7a2fa51-e43c-4727-a42c-7f716dea4885",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Volatile C++"
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "Volatile C++"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523875041,
        "id": "5cd66b4e-b2bb-4440-92d6-e50969669307",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523875041,
        "parent_id": "b7a2fa51-e43c-4727-a42c-7f716dea4885",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A type qualifier that you can use to declare that an object can be modified in the program by the hardware."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "A type qualifier that you can use to declare that an object can be modified in the program by the hardware."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523875041,
        "id": "fbd49b94-a23a-4f04-bad4-8e7d7ca4c59b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550798940000,
        "parent_id": "b7a2fa51-e43c-4727-a42c-7f716dea4885",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "volatile declarator ;"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "volatile declarator ;",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523875041,
        "id": "1f8ea8f6-973a-4a14-a613-b46bb21705ce",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523875041,
        "parent_id": "b7a2fa51-e43c-4727-a42c-7f716dea4885",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "virtual C++"
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "virtual C++"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523875041,
        "id": "d3c0d8da-48cd-448c-938c-0dc6340f27d9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523875041,
        "parent_id": "b7a2fa51-e43c-4727-a42c-7f716dea4885",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The virtual keyword declares a virtual function or a virtual base class."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "The virtual keyword declares a virtual function or a virtual base class."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523875041,
        "id": "d6125fa5-a1c3-4ad8-9744-95d69d6d6adb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550798940000,
        "parent_id": "b7a2fa51-e43c-4727-a42c-7f716dea4885",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "virtual [type-specifiers] member-function-declarator  \nvirtual [access-specifier] base-class-name"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "virtual [type-specifiers] member-function-declarator  \nvirtual [access-specifier] base-class-name",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523875042,
        "id": "e00cef2b-2f6a-4bab-b71c-bb4883af3214",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523875042,
        "parent_id": "b7a2fa51-e43c-4727-a42c-7f716dea4885",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Parameters",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Parameters",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523875042,
        "id": "718a8371-f1c2-4ee9-ad85-4d8720f1a76a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523875042,
        "parent_id": "b7a2fa51-e43c-4727-a42c-7f716dea4885",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "type-specifiers",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " Specifies the return type of the virtual member function."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "type-specifiers",
            "AttrFlags": 1
          },
          {
            "Text": " Specifies the return type of the virtual member function."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523875042,
        "id": "6f0014be-f1c3-48db-9347-3b9fdab6ef11",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523875042,
        "parent_id": "b7a2fa51-e43c-4727-a42c-7f716dea4885",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "member-function-declarator",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " Declares a member function."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "member-function-declarator",
            "AttrFlags": 1
          },
          {
            "Text": " Declares a member function."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523875043,
        "id": "5b182aa3-ce2d-4e0e-872c-fbc1b2e48a6b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523875043,
        "parent_id": "b7a2fa51-e43c-4727-a42c-7f716dea4885",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "access-specifier",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " Defines the level of access to the base class, public, protected or private. Can appear before or after the virtual keyword."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "access-specifier",
            "AttrFlags": 1
          },
          {
            "Text": " Defines the level of access to the base class, public, protected or private. Can appear before or after the virtual keyword."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523875043,
        "id": "406a5a10-38ac-48eb-b673-56aa530bc4cd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523875043,
        "parent_id": "b7a2fa51-e43c-4727-a42c-7f716dea4885",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "base-class-name",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " Identifies a previously declared class type"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "base-class-name",
            "AttrFlags": 1
          },
          {
            "Text": " Identifies a previously declared class type"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523875043,
        "id": "39335c35-89b8-45be-b2e2-31a5016006d3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523875043,
        "parent_id": "b7a2fa51-e43c-4727-a42c-7f716dea4885",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "this pointer"
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "this pointer"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523875043,
        "id": "c15d616e-8bb7-4d01-8b0d-4f6ee182848f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523875043,
        "parent_id": "b7a2fa51-e43c-4727-a42c-7f716dea4885",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The this pointer is a pointer accessible only within the nonstatic member functions of a class, struct, or union type. It points to the object for which the member function is called. Static member functions do not have a this pointer."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "The this pointer is a pointer accessible only within the nonstatic member functions of a class, struct, or union type. It points to the object for which the member function is called. Static member functions do not have a this pointer."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523875043,
        "id": "b3b7bf69-4006-4cd8-a6f9-3f1449fee77d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550798940000,
        "parent_id": "b7a2fa51-e43c-4727-a42c-7f716dea4885",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "this-\u003emember-identifier"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "this-\u003emember-identifier",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523875043,
        "id": "7c4277cb-d8db-4b75-b9ce-9ddd7be02455",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523875043,
        "parent_id": "b7a2fa51-e43c-4727-a42c-7f716dea4885",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "An object’s this pointer is not part of the object itself; it is not reflected in the result of a sizeof statement on the object. Instead, when a nonstatic member function is called for an object, the address of the object is passed by the compiler as a hidden argument to the function. For example, the following function call:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "An object’s this pointer is not part of the object itself; it is not reflected in the result of a sizeof statement on the object. Instead, when a nonstatic member function is called for an object, the address of the object is passed by the compiler as a hidden argument to the function. For example, the following function call:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523875043,
        "id": "3ab4c652-b11f-4af6-82e9-e30ccc87ac2f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550798940000,
        "parent_id": "b7a2fa51-e43c-4727-a42c-7f716dea4885",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "myDate.setMonth( 3 );  \n\ncan be interpreted this way:\n\n\nsetMonth( \u0026myDate, 3 );  \n\nThe object's address is available from within the member function as the this pointer. Most uses of this are implicit. It is legal, though unnecessary, to explicitly use this when referring to members of the class. For example:\n\n\nvoid Date::setMonth( int mn )  \n{  \n   month = mn;            // These three statements  \n   this-\u003emonth = mn;      // are equivalent  \n   (*this).month = mn;  \n}  \n\nThe expression *this is commonly used to return the current object from a member function:\n\n\nreturn *this;  \n\nThe this pointer is also used to guard against self-reference:\n\n\nif (\u0026Object != this) {  \n// do not execute in cases of self-reference"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "myDate.setMonth( 3 );  \n\ncan be interpreted this way:\n\n\nsetMonth( \u0026myDate, 3 );  \n\nThe object's address is available from within the member function as the this pointer. Most uses of this are implicit. It is legal, though unnecessary, to explicitly use this when referring to members of the class. For example:\n\n\nvoid Date::setMonth( int mn )  \n{  \n   month = mn;            // These three statements  \n   this-\u003emonth = mn;      // are equivalent  \n   (*this).month = mn;  \n}  \n\nThe expression *this is commonly used to return the current object from a member function:\n\n\nreturn *this;  \n\nThe this pointer is also used to guard against self-reference:\n\n\nif (\u0026Object != this) {  \n// do not execute in cases of self-reference",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523875043,
        "id": "97689556-b45c-4cf9-9d9b-b5f5214b9369",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523875043,
        "parent_id": "b7a2fa51-e43c-4727-a42c-7f716dea4885",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "try, throw, and catch Statements (C++)"
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "try, throw, and catch Statements (C++)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523875044,
        "id": "203f7f31-c8a7-472f-a2c7-a1c3451b0a82",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523875044,
        "parent_id": "b7a2fa51-e43c-4727-a42c-7f716dea4885",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To implement exception handling in C++, you use try, throw, and catch expressions."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "To implement exception handling in C++, you use try, throw, and catch expressions."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523875044,
        "id": "ef82c932-4678-4f28-809d-aa17761d801a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523875044,
        "parent_id": "b7a2fa51-e43c-4727-a42c-7f716dea4885",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "First, use a try block to enclose one or more statements that might throw an exception."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "First, use a try block to enclose one or more statements that might throw an exception."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523875044,
        "id": "f1cba66a-ad6a-4a55-bca7-5c228f83cf13",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523875044,
        "parent_id": "b7a2fa51-e43c-4727-a42c-7f716dea4885",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A throw expression signals that an exceptional condition—often, an error—has occurred in a try block. You can use an object of any type as the operand of a throw expression. Typically, this object is used to communicate information about the error. In most cases, we recommend that you use the std::exception class or one of the derived classes that are defined in the standard library. If one of those is not appropriate, we recommend that you derive your own exception class from std::exception."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "A throw expression signals that an exceptional condition—often, an error—has occurred in a try block. You can use an object of any type as the operand of a throw expression. Typically, this object is used to communicate information about the error. In most cases, we recommend that you use the std::exception class or one of the derived classes that are defined in the standard library. If one of those is not appropriate, we recommend that you derive your own exception class from std::exception."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523875045,
        "id": "18fbc884-68b4-4626-9a1d-ed0d5477bb9e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523875045,
        "parent_id": "b7a2fa51-e43c-4727-a42c-7f716dea4885",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To handle exceptions that may be thrown, implement one or more catch blocks immediately following a try block. Each catch block specifies the type of exception it can handle."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "To handle exceptions that may be thrown, implement one or more catch blocks immediately following a try block. Each catch block specifies the type of exception it can handle."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523875045,
        "id": "a1efba9d-f21a-4384-8621-a145867ae51d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550798940000,
        "parent_id": "b7a2fa51-e43c-4727-a42c-7f716dea4885",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "MyData md;  \ntry {  \n// Code that could throw an exception  \nmd = GetNetworkResource();  \n}  \ncatch (const networkIOException\u0026 e) {  \n// Code that executes when an exception of type  \n// networkIOException is thrown in the try block  \n// ...  \n// Log error message in the exception object  \ncerr \u003c\u003c e.what();  \n}  \ncatch (const myDataFormatException\u0026 e) {  \n// Code that handles another exception type  \n// ...  \ncerr \u003c\u003c e.what();  \n}  \n\n// The following syntax shows a throw expression  \nMyData GetNetworkResource()  \n{  \n// ...  \nif (IOSuccess == false)  \n  throw networkIOException(\"Unable to connect\");  \n// ...  \nif (readError)  \n  throw myDataFormatException(\"Format error\");   \n// ...  \n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "MyData md;  \ntry {  \n// Code that could throw an exception  \nmd = GetNetworkResource();  \n}  \ncatch (const networkIOException\u0026 e) {  \n// Code that executes when an exception of type  \n// networkIOException is thrown in the try block  \n// ...  \n// Log error message in the exception object  \ncerr \u003c\u003c e.what();  \n}  \ncatch (const myDataFormatException\u0026 e) {  \n// Code that handles another exception type  \n// ...  \ncerr \u003c\u003c e.what();  \n}  \n\n// The following syntax shows a throw expression  \nMyData GetNetworkResource()  \n{  \n// ...  \nif (IOSuccess == false)  \n  throw networkIOException(\"Unable to connect\");  \n// ...  \nif (readError)  \n  throw myDataFormatException(\"Format error\");   \n// ...  \n}",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523875045,
        "id": "c113d16f-13b9-4648-8e45-89a3097e3bb3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523875045,
        "parent_id": "b7a2fa51-e43c-4727-a42c-7f716dea4885",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The code after the try clause is the guarded section of code. The throw expression throws—that is, raises—an exception. The code block after the catch clause is the exception handler. This is the handler that catches the exception that’s thrown if the types in the throw and catch expressions are compatible."
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "The code after the try clause is the guarded section of code. The throw expression throws—that is, raises—an exception. The code block after the catch clause is the exception handler. This is the handler that catches the exception that’s thrown if the types in the throw and catch expressions are compatible."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523875045,
        "id": "3a2389f0-8692-4489-a285-ff13fa165bec",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550798940000,
        "parent_id": "b7a2fa51-e43c-4727-a42c-7f716dea4885",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "try {  \nthrow CSomeOtherException();  \n}  \ncatch(...) {  \n// Catch all exceptions – dangerous!!!  \n// Respond (perhaps only partially) to the exception, then  \n// re-throw to pass the exception to some other handler  \n// ...  \nthrow;  \n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "try {  \nthrow CSomeOtherException();  \n}  \ncatch(...) {  \n// Catch all exceptions – dangerous!!!  \n// Respond (perhaps only partially) to the exception, then  \n// re-throw to pass the exception to some other handler  \n// ...  \nthrow;  \n}",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523875045,
        "id": "944cc150-a71a-4308-9fb4-fdbc09e7fe0a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523875045,
        "parent_id": "b7a2fa51-e43c-4727-a42c-7f716dea4885",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "friend (C++)"
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "friend (C++)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523875045,
        "id": "67f4efef-e265-4b54-a9c2-5021ee2c7954",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523875045,
        "parent_id": "b7a2fa51-e43c-4727-a42c-7f716dea4885",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In some circumstances, it is more convenient to grant member-level access to functions that are not members of a class or to all members in a separate class. Only the class implementer can declare who its friends are. A function or class cannot declare itself as a friend of any class. In a class definition, use the friend keyword and the name of a non-member function or other class to grant it access to the private and protected members of your class. In a template definition, a type parameter can be declared as a friend."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "In some circumstances, it is more convenient to grant member-level access to functions that are not members of a class or to all members in a separate class. Only the class implementer can declare who its friends are. A function or class cannot declare itself as a friend of any class. In a class definition, use the friend keyword and the name of a non-member function or other class to grant it access to the private and protected members of your class. In a template definition, a type parameter can be declared as a friend."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523875045,
        "id": "c34d2160-fd17-4020-9812-56fdd549883c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523875045,
        "parent_id": "b7a2fa51-e43c-4727-a42c-7f716dea4885",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If you declare a friend function that was not previously declared, that function is exported to the enclosing nonclass scope."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "If you declare a friend function that was not previously declared, that function is exported to the enclosing nonclass scope."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523875046,
        "id": "4c2b4b51-32b1-4c94-a4e5-04c798dfbee0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550798940000,
        "parent_id": "b7a2fa51-e43c-4727-a42c-7f716dea4885",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "class friend F  \nfriend F;\nclass ForwardDeclared;// Class name is known.  \nclass HasFriends  \n{  \n   friend int ForwardDeclared::IsAFriend();// C2039 error expected  \n};"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "class friend F  \nfriend F;\nclass ForwardDeclared;// Class name is known.  \nclass HasFriends  \n{  \n   friend int ForwardDeclared::IsAFriend();// C2039 error expected  \n};",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523875046,
        "id": "2b4474e3-8c7f-47cb-ab5a-b2e3728f2c6a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523875046,
        "parent_id": "b7a2fa51-e43c-4727-a42c-7f716dea4885",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "friend functions"
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "friend functions"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523875046,
        "id": "09606291-365a-40c6-aca4-68d8fa18d5b6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523875046,
        "parent_id": "b7a2fa51-e43c-4727-a42c-7f716dea4885",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A friend function is a function that is not a member of a class but has access to the class’s private and protected members.Friend functions are not considered class members; they are normal external functions that are given special access privileges."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "A friend function is a function that is not a member of a class but has access to the class’s private and protected members.Friend functions are not considered class members; they are normal external functions that are given special access privileges."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523875046,
        "id": "0738f730-9001-45e7-8adc-03b14ec74341",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523875046,
        "parent_id": "b7a2fa51-e43c-4727-a42c-7f716dea4885",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Friends are not in the class’s scope, and they are not called using the member-selection operators (. and –\u003e) unless they are members of another class."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Friends are not in the class’s scope, and they are not called using the member-selection operators (. and –\u003e) unless they are members of another class."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523875046,
        "id": "aa483bc7-2495-4701-aeae-38e9d32a965a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523875046,
        "parent_id": "b7a2fa51-e43c-4727-a42c-7f716dea4885",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A friend function is declared by the class that is granting access. The friend declaration can be placed anywhere in the class declaration. It is not affected by the access control keywords."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "A friend function is declared by the class that is granting access. The friend declaration can be placed anywhere in the class declaration. It is not affected by the access control keywords."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523875046,
        "id": "32660981-575a-44f7-97bf-3ec106a117ba",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550798940000,
        "parent_id": "b7a2fa51-e43c-4727-a42c-7f716dea4885",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "#include \u003ciostream\u003e  \n\nusing namespace std;  \nclass Point  \n{  \n    friend void ChangePrivate( Point \u0026 );  \npublic:  \n    Point( void ) : m_i(0) {}  \n    void PrintPrivate( void ){cout \u003c\u003c m_i \u003c\u003c endl; }  \n\nprivate:  \nint m_i;  \n};  \n\nvoid ChangePrivate ( Point \u0026i ) { i.m_i++; }  \n\nint main()  \n{  \n   Point sPoint;  \n   sPoint.PrintPrivate();  \n   ChangePrivate(sPoint);  \n   sPoint.PrintPrivate();  \n    // Output: 0  \n           1  \n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "#include \u003ciostream\u003e  \n\nusing namespace std;  \nclass Point  \n{  \n    friend void ChangePrivate( Point \u0026 );  \npublic:  \n    Point( void ) : m_i(0) {}  \n    void PrintPrivate( void ){cout \u003c\u003c m_i \u003c\u003c endl; }  \n\nprivate:  \nint m_i;  \n};  \n\nvoid ChangePrivate ( Point \u0026i ) { i.m_i++; }  \n\nint main()  \n{  \n   Point sPoint;  \n   sPoint.PrintPrivate();  \n   ChangePrivate(sPoint);  \n   sPoint.PrintPrivate();  \n    // Output: 0  \n           1  \n}",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523875047,
        "id": "f3e6c1d2-a588-4101-86c2-3107ce45846c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523875047,
        "parent_id": "b7a2fa51-e43c-4727-a42c-7f716dea4885",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Class members as friends",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Class members as friends",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523875047,
        "id": "c4fb5293-acea-4f61-89e0-e978e9ce7100",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550799000000,
        "parent_id": "b7a2fa51-e43c-4727-a42c-7f716dea4885",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "class B;  \n\nclass A {  \npublic:  \n   int Func1( B\u0026 b );  \n\nprivate:  \n   int Func2( B\u0026 b );  \n};  \n\nclass B {  \nprivate:\n\tint _b;  \n\n   // A::Func1 is a friend function to class B  \n   // so A::Func1 has access to all members of B  \n   friend int A::Func1( B\u0026 );  \n};  \n\nint A::Func1( B\u0026 b ) { return b._b; }   // OK  \nint A::Func2( B\u0026 b ) { return b._b; }   // C2248"
            ]
          ]
        },
        "type": "code",
        "version": 14,
        "code": "class B;  \n\nclass A {  \npublic:  \n   int Func1( B\u0026 b );  \n\nprivate:  \n   int Func2( B\u0026 b );  \n};  \n\nclass B {  \nprivate:\n\tint _b;  \n\n   // A::Func1 is a friend function to class B  \n   // so A::Func1 has access to all members of B  \n   friend int A::Func1( B\u0026 );  \n};  \n\nint A::Func1( B\u0026 b ) { return b._b; }   // OK  \nint A::Func2( B\u0026 b ) { return b._b; }   // C2248",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550799000000,
        "id": "e079a264-1285-4f66-b83a-a3d75bc405ba",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550799000000,
        "parent_id": "b7a2fa51-e43c-4727-a42c-7f716dea4885",
        "parent_table": "block",
        "type": "text",
        "version": 3
      }
    ],
    "title": "Different keywords",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}