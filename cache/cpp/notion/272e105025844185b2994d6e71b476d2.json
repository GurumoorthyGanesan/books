{
  "ID": "272e1050-2584-4185-b299-4d6e71b476d2",
  "Root": {
    "alive": true,
    "content": [
      "000b5a77-bd91-4b30-9ee3-5b658347e24e",
      "1ac60c23-8248-45f5-9053-282045686b0c",
      "6193652b-4a4e-4dc3-b424-0ffa0e5497cd",
      "85ec29df-8af9-4e76-9daa-24acafb25d87",
      "87b7d0a1-cc41-4fad-8893-b32cdd5aab52",
      "87a75d92-d5ea-4669-8645-f9448e6e5baf",
      "b0650b91-e81c-4b9a-a14f-a33abb06e058",
      "b0e43ede-b090-46de-aeb4-b636567f2990",
      "d3ac9b52-e988-47f5-ac76-6ad021db44cd",
      "5efd084e-374a-48ed-b7f9-fd12fd905042"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522637480,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "272e1050-2584-4185-b299-4d6e71b476d2",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550710140000,
    "parent_id": "d0bc06f8-edea-49a0-bdbb-c1bef0d073bd",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Behaviour of virtual functions in constructors and destructors"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522637476,
        "id": "000b5a77-bd91-4b30-9ee3-5b658347e24e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522637476,
        "parent_id": "272e1050-2584-4185-b299-4d6e71b476d2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The behaviour of virtual functions in constructors and destructors is often confusing when first encountered."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The behaviour of virtual functions in constructors and destructors is often confusing when first encountered."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522637479,
        "id": "1ac60c23-8248-45f5-9053-282045686b0c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522637479,
        "parent_id": "272e1050-2584-4185-b299-4d6e71b476d2",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003ciostream\u003e\nusing namespace std;\n\nclass base { \npublic:\n    base() { f(\"base constructor\"); }\n    ~base() { f(\"base destructor\"); }\n\n    virtual const char* v() { return \"base::v()\"; }\n\n    void f(const char* caller) { \n        cout \u003c\u003c \"When called from \" \u003c\u003c caller \u003c\u003c \", \"  \u003c\u003c v() \u003c\u003c \" gets called.\\n\"; \n    }        \n};\n\nclass derived : public base {\npublic:\n    derived() { f(\"derived constructor\"); }\n    ~derived() { f(\"derived destructor\"); }\n\n    const char* v() override { return \"derived::v()\"; }\n\n};\n\nint main() {\n     derived d;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003ciostream\u003e\nusing namespace std;\n\nclass base { \npublic:\n    base() { f(\"base constructor\"); }\n    ~base() { f(\"base destructor\"); }\n\n    virtual const char* v() { return \"base::v()\"; }\n\n    void f(const char* caller) { \n        cout \u003c\u003c \"When called from \" \u003c\u003c caller \u003c\u003c \", \"  \u003c\u003c v() \u003c\u003c \" gets called.\\n\"; \n    }        \n};\n\nclass derived : public base {\npublic:\n    derived() { f(\"derived constructor\"); }\n    ~derived() { f(\"derived destructor\"); }\n\n    const char* v() override { return \"derived::v()\"; }\n\n};\n\nint main() {\n     derived d;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522637479,
        "id": "6193652b-4a4e-4dc3-b424-0ffa0e5497cd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522637479,
        "parent_id": "272e1050-2584-4185-b299-4d6e71b476d2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Output:",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Output:",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522637479,
        "id": "85ec29df-8af9-4e76-9daa-24acafb25d87",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522637479,
        "parent_id": "272e1050-2584-4185-b299-4d6e71b476d2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When called from base constructor, base::v() gets called."
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "When called from base constructor, base::v() gets called."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522637479,
        "id": "87b7d0a1-cc41-4fad-8893-b32cdd5aab52",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522637479,
        "parent_id": "272e1050-2584-4185-b299-4d6e71b476d2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When called from derived constructor, derived::v() gets called."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When called from derived constructor, derived::v() gets called."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522637479,
        "id": "87a75d92-d5ea-4669-8645-f9448e6e5baf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522637479,
        "parent_id": "272e1050-2584-4185-b299-4d6e71b476d2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When called from derived destructor, derived::v() gets called."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When called from derived destructor, derived::v() gets called."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522637479,
        "id": "b0650b91-e81c-4b9a-a14f-a33abb06e058",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522637479,
        "parent_id": "272e1050-2584-4185-b299-4d6e71b476d2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When called from base destructor, base::v() gets called."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When called from base destructor, base::v() gets called."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522637480,
        "id": "b0e43ede-b090-46de-aeb4-b636567f2990",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522637480,
        "parent_id": "272e1050-2584-4185-b299-4d6e71b476d2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The reasoning behind this is that the derived class may define additional members which are not yet initialized (in the constructor case) or already destroyed (in the destructor case), and calling its member functions would be unsafe. Therefore during construction and destruction of C++ objects, the "
            ],
            [
              "dynamic",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " type of "
            ],
            [
              "*this",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is considered to be the constructor’s or destructor’s class and not a more-derived class."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The reasoning behind this is that the derived class may define additional members which are not yet initialized (in the constructor case) or already destroyed (in the destructor case), and calling its member functions would be unsafe. Therefore during construction and destruction of C++ objects, the "
          },
          {
            "Text": "dynamic",
            "AttrFlags": 4
          },
          {
            "Text": " type of "
          },
          {
            "Text": "*this",
            "AttrFlags": 2
          },
          {
            "Text": " is considered to be the constructor’s or destructor’s class and not a more-derived class."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522637480,
        "id": "d3ac9b52-e988-47f5-ac76-6ad021db44cd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522637480,
        "parent_id": "272e1050-2584-4185-b299-4d6e71b476d2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Example:",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Example:",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522637480,
        "id": "5efd084e-374a-48ed-b7f9-fd12fd905042",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522637480,
        "parent_id": "272e1050-2584-4185-b299-4d6e71b476d2",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "#include \u003ciostream\u003e\n#include \u003cmemory\u003e\n\nusing namespace std;\nclass base {\npublic:\n    base()\n    {\n        std::cout \u003c\u003c \"foo is \" \u003c\u003c foo() \u003c\u003c std::endl;\n    }\n    virtual int foo() { return 42; }\n};\n\nclass derived : public base {\n    unique_ptr\u003cint\u003e ptr_;\npublic:\n    derived(int i) : ptr_(new int(i*i)) { }\n    // The following cannot be called before derived::derived due to how C++ behaves, \n    // if it was possible... Kaboom!\n    int foo() override   { return *ptr_; } \n};\n\nint main() {\n    derived d(4);\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#include \u003ciostream\u003e\n#include \u003cmemory\u003e\n\nusing namespace std;\nclass base {\npublic:\n    base()\n    {\n        std::cout \u003c\u003c \"foo is \" \u003c\u003c foo() \u003c\u003c std::endl;\n    }\n    virtual int foo() { return 42; }\n};\n\nclass derived : public base {\n    unique_ptr\u003cint\u003e ptr_;\npublic:\n    derived(int i) : ptr_(new int(i*i)) { }\n    // The following cannot be called before derived::derived due to how C++ behaves, \n    // if it was possible... Kaboom!\n    int foo() override   { return *ptr_; } \n};\n\nint main() {\n    derived d(4);\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "Behaviour of virtual functions in constructors and destructors",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}