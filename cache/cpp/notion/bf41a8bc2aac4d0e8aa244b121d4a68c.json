{
  "ID": "bf41a8bc-2aac-4d0e-8aa2-44b121d4a68c",
  "Root": {
    "alive": true,
    "content": [
      "35509f66-55a4-4052-924a-5d90a707f289",
      "f000df27-441f-4518-9bf1-af9730424280"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522019627,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "bf41a8bc-2aac-4d0e-8aa2-44b121d4a68c",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552302900000,
    "parent_id": "40e8450d-4736-4ad0-be7d-a2d9307ddf4f",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Friendship"
        ]
      ]
    },
    "type": "page",
    "version": 20,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522019626,
        "id": "35509f66-55a4-4052-924a-5d90a707f289",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552302720000,
        "parent_id": "bf41a8bc-2aac-4d0e-8aa2-44b121d4a68c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "friend",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "keyword",
              [
                [
                  "a",
                  "https://www.notion.so/kjkpublic/keywords-193b149e733b4344889829dc4a2ef0b0"
                ]
              ]
            ],
            [
              " is used to give other classes and functions access to private and protected members of the class, even through they are defined outside the class`s scope."
            ]
          ]
        },
        "type": "text",
        "version": 4,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "friend",
            "AttrFlags": 2
          },
          {
            "Text": " "
          },
          {
            "Text": "keyword",
            "Link": "https://www.notion.so/kjkpublic/keywords-193b149e733b4344889829dc4a2ef0b0"
          },
          {
            "Text": " is used to give other classes and functions access to private and protected members of the class, even through they are defined outside the class`s scope."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522019626,
        "id": "f000df27-441f-4518-9bf1-af9730424280",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552302900000,
        "parent_id": "bf41a8bc-2aac-4d0e-8aa2-44b121d4a68c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "// :glot\n#include \u003ciostream\u003e\n\nclass Animal {\nprivate:\n    double weight;\n    double height;\npublic:\n    Animal(double w, double h) : weight(w), height(h) { }\n    friend void printWeight(Animal animal);\n    friend class AnimalPrinter;\n    // A common use for a friend function is to overload the operator\u003c\u003c for streaming. \n    friend std::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, Animal animal);\n};\n\nvoid printWeight(Animal animal)\n{\n    std::cout \u003c\u003c animal.weight \u003c\u003c \"\\n\";\n}\n\nclass AnimalPrinter\n{\npublic:\n    void print(const Animal\u0026 animal)\n    {\n        // Because of the `friend class AnimalPrinter;\" declaration, we are\n        // allowed to access private members here.\n        std::cout \u003c\u003c animal.weight \u003c\u003c \", \" \u003c\u003c animal.height \u003c\u003c std::endl;\n    }\n};\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, Animal animal)\n{\n    os \u003c\u003c \"Animal height: \" \u003c\u003c animal.height \u003c\u003c \"\\n\";\n    return os;\n}\n\nint main() {\n    Animal animal = {10, 5};\n    printWeight(animal);\n\n    AnimalPrinter aPrinter;\n    aPrinter.print(animal);\n\n    std::cout \u003c\u003c animal;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 8,
        "code": "// :glot\n#include \u003ciostream\u003e\n\nclass Animal {\nprivate:\n    double weight;\n    double height;\npublic:\n    Animal(double w, double h) : weight(w), height(h) { }\n    friend void printWeight(Animal animal);\n    friend class AnimalPrinter;\n    // A common use for a friend function is to overload the operator\u003c\u003c for streaming. \n    friend std::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, Animal animal);\n};\n\nvoid printWeight(Animal animal)\n{\n    std::cout \u003c\u003c animal.weight \u003c\u003c \"\\n\";\n}\n\nclass AnimalPrinter\n{\npublic:\n    void print(const Animal\u0026 animal)\n    {\n        // Because of the `friend class AnimalPrinter;\" declaration, we are\n        // allowed to access private members here.\n        std::cout \u003c\u003c animal.weight \u003c\u003c \", \" \u003c\u003c animal.height \u003c\u003c std::endl;\n    }\n};\n\nstd::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, Animal animal)\n{\n    os \u003c\u003c \"Animal height: \" \u003c\u003c animal.height \u003c\u003c \"\\n\";\n    return os;\n}\n\nint main() {\n    Animal animal = {10, 5};\n    printWeight(animal);\n\n    AnimalPrinter aPrinter;\n    aPrinter.print(animal);\n\n    std::cout \u003c\u003c animal;\n}",
        "code_language": "C++"
      }
    ],
    "title": "Friendship",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}