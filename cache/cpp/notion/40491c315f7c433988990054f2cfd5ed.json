{
  "ID": "40491c31-5f7c-4339-8899-0054f2cfd5ed",
  "Root": {
    "alive": true,
    "content": [
      "a8485785-bacd-407c-bce0-68ecd3acedf2",
      "12e0379e-1866-46a9-b849-4d00838b84c7",
      "7d36a92d-22ec-4de3-9d8d-3c12dce95259",
      "6cae84f2-ae64-4268-8e06-f854c0cf968b",
      "639f13b3-bc0a-4f04-b6ba-b8980d0f3c74",
      "5435dc70-a7cd-4641-b589-64ae980bb3bc"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550523940699,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "40491c31-5f7c-4339-8899-0054f2cfd5ed",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551688354006,
    "parent_id": "2f06e164-6745-4c46-9402-92f51f9f9266",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Non-static Member Functions"
        ]
      ]
    },
    "type": "page",
    "version": 4,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523940693,
        "id": "a8485785-bacd-407c-bce0-68ecd3acedf2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523940693,
        "parent_id": "40491c31-5f7c-4339-8899-0054f2cfd5ed",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A "
            ],
            [
              "class",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "struct",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can have member functions as well as member variables. These functions have syntax mostly similar to standalone functions, and can be defined either inside or outside the class definition; if defined outside the class definition, the function’s name is prefixed with the class’ name and the scope ("
            ],
            [
              "::",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") operator."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A "
          },
          {
            "Text": "class",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "struct",
            "AttrFlags": 2
          },
          {
            "Text": " can have member functions as well as member variables. These functions have syntax mostly similar to standalone functions, and can be defined either inside or outside the class definition; if defined outside the class definition, the function’s name is prefixed with the class’ name and the scope ("
          },
          {
            "Text": "::",
            "AttrFlags": 2
          },
          {
            "Text": ") operator."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523940696,
        "id": "12e0379e-1866-46a9-b849-4d00838b84c7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523940696,
        "parent_id": "40491c31-5f7c-4339-8899-0054f2cfd5ed",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class CL {\n  public:\n    void  definedInside() {}\n    void definedOutside();\n};\nvoid CL::definedOutside() {}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class CL {\n  public:\n    void  definedInside() {}\n    void definedOutside();\n};\nvoid CL::definedOutside() {}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523940699,
        "id": "7d36a92d-22ec-4de3-9d8d-3c12dce95259",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523940699,
        "parent_id": "40491c31-5f7c-4339-8899-0054f2cfd5ed",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "These functions are called on an instance (or reference to an instance) of the class with the dot ("
            ],
            [
              ".",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") operator, or a pointer to an instance with the arrow ("
            ],
            [
              "-\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") operator, and each call is tied to the instance the function was called on; when a member function is called on an instance, it has access to all of that instance’s fields (through the "
            ],
            [
              "this",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%2B%2B/7146/the-this-pointer#t=201610191424041635584"
                ]
              ]
            ],
            [
              " pointer",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%2B%2B/7146/the-this-pointer#t=201610191424041635584"
                ]
              ]
            ],
            [
              "), but can only access other instances’ fields if those instances are supplied as parameters."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "These functions are called on an instance (or reference to an instance) of the class with the dot ("
          },
          {
            "Text": ".",
            "AttrFlags": 2
          },
          {
            "Text": ") operator, or a pointer to an instance with the arrow ("
          },
          {
            "Text": "-\u003e",
            "AttrFlags": 2
          },
          {
            "Text": ") operator, and each call is tied to the instance the function was called on; when a member function is called on an instance, it has access to all of that instance’s fields (through the "
          },
          {
            "Text": "this",
            "AttrFlags": 2,
            "Link": "http://stackoverflow.com/documentation/c%2B%2B/7146/the-this-pointer#t=201610191424041635584"
          },
          {
            "Text": " pointer",
            "Link": "http://stackoverflow.com/documentation/c%2B%2B/7146/the-this-pointer#t=201610191424041635584"
          },
          {
            "Text": "), but can only access other instances’ fields if those instances are supplied as parameters."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523940699,
        "id": "6cae84f2-ae64-4268-8e06-f854c0cf968b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523940699,
        "parent_id": "40491c31-5f7c-4339-8899-0054f2cfd5ed",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "struct ST {\n    ST(const std::string\u0026 ss = \"Wolf\", int ii = 359) : s(ss), i(ii) { }\n\n    int get_i() const { return i; }\n    bool compare_i(const ST\u0026 other) const { return (i == other.i); }\n\n  private:\n    std::string s;\n    int i;\n};\nST st1;\nST st2(\"Species\", 8472);\n\nint  i = st1.get_i(); // Can access st1.i, but not st2.i.\nbool b = st1.compare_i(st2); // Can access st1 \u0026 st2."
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "struct ST {\n    ST(const std::string\u0026 ss = \"Wolf\", int ii = 359) : s(ss), i(ii) { }\n\n    int get_i() const { return i; }\n    bool compare_i(const ST\u0026 other) const { return (i == other.i); }\n\n  private:\n    std::string s;\n    int i;\n};\nST st1;\nST st2(\"Species\", 8472);\n\nint  i = st1.get_i(); // Can access st1.i, but not st2.i.\nbool b = st1.compare_i(st2); // Can access st1 \u0026 st2.",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523940699,
        "id": "639f13b3-bc0a-4f04-b6ba-b8980d0f3c74",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523940699,
        "parent_id": "40491c31-5f7c-4339-8899-0054f2cfd5ed",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "These functions are allowed to access member variables and/or other member functions, regardless of either the variable or function’s access modifiers. They can also be written out-of-order, accessing member variables and/or calling member functions declared before them, as the entire class definition must be parsed before the compiler can begin to compile a class."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "These functions are allowed to access member variables and/or other member functions, regardless of either the variable or function’s access modifiers. They can also be written out-of-order, accessing member variables and/or calling member functions declared before them, as the entire class definition must be parsed before the compiler can begin to compile a class."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523940699,
        "id": "5435dc70-a7cd-4641-b589-64ae980bb3bc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523940699,
        "parent_id": "40491c31-5f7c-4339-8899-0054f2cfd5ed",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class Access {\n  public:\n    Access(int i_ = 8088, int j_ = 8086, int k_ = 6502) : i(i_), j(j_), k(k_) {}\n\n    int i;\n    int get_k() const { return k; }\n    bool private_no_more() const { return i_be_private(); }\n  protected:\n    int j;\n    int get_i() const { return i; }\n  private:\n    int k;\n    int get_j() const { return j; }\n    bool i_be_private() const { return ((i \u003e j) \u0026\u0026 (k \u003c j)); }\n};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class Access {\n  public:\n    Access(int i_ = 8088, int j_ = 8086, int k_ = 6502) : i(i_), j(j_), k(k_) {}\n\n    int i;\n    int get_k() const { return k; }\n    bool private_no_more() const { return i_be_private(); }\n  protected:\n    int j;\n    int get_i() const { return i; }\n  private:\n    int k;\n    int get_j() const { return j; }\n    bool i_be_private() const { return ((i \u003e j) \u0026\u0026 (k \u003c j)); }\n};",
        "code_language": "Plain Text"
      }
    ],
    "title": "Non-static Member Functions",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}