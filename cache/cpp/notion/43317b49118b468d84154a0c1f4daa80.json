{
  "ID": "43317b49-118b-468d-8415-4a0c1f4daa80",
  "Root": {
    "alive": true,
    "content": [
      "f9093dd1-7bd5-4aeb-8735-47fe278a50b4",
      "bb9d700e-cc39-4977-8ee0-f83403c4595c",
      "deaaeb8b-61fb-4d44-ae73-4531cfe96f58",
      "3ac3f4f1-f503-4846-9eaa-176f89ce903a",
      "a3221a31-017b-429b-a619-c7b16211e3f6",
      "ea3dd5f4-a6a3-4eea-b822-963ddc58a543",
      "5ce0f09f-f3ed-4c7e-9534-11aa02242495",
      "876c845b-668f-4a8a-9511-f04bf16dd0e0",
      "29bda842-5a22-4d4a-9b43-4621b2197de0",
      "a7e3dfb8-8eed-4b6d-885b-98a1c5f8b27b"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522057739,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "43317b49-118b-468d-8415-4a0c1f4daa80",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550655900000,
    "parent_id": "8655f492-9c51-4f68-ad52-8b6c1e02a277",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "IteratorPointer Invalidation"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522057734,
        "id": "f9093dd1-7bd5-4aeb-8735-47fe278a50b4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522057734,
        "parent_id": "43317b49-118b-468d-8415-4a0c1f4daa80",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Iterators and pointers pointing into an "
            ],
            [
              "std::vector",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can become invalid, but only when performing certain operations. Using invalid iterators/pointers will result in undefined behavior."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Iterators and pointers pointing into an "
          },
          {
            "Text": "std::vector",
            "AttrFlags": 2
          },
          {
            "Text": " can become invalid, but only when performing certain operations. Using invalid iterators/pointers will result in undefined behavior."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522057736,
        "id": "bb9d700e-cc39-4977-8ee0-f83403c4595c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522057736,
        "parent_id": "43317b49-118b-468d-8415-4a0c1f4daa80",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Operations which invalidate iterators/pointers include:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Operations which invalidate iterators/pointers include:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522057738,
        "id": "deaaeb8b-61fb-4d44-ae73-4531cfe96f58",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522057738,
        "parent_id": "43317b49-118b-468d-8415-4a0c1f4daa80",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Any insertion operation which changes the "
            ],
            [
              "capacity",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " of the "
            ],
            [
              "vector",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will invalidate "
            ],
            [
              "all",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " iterators/pointers:"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Any insertion operation which changes the "
          },
          {
            "Text": "capacity",
            "AttrFlags": 2
          },
          {
            "Text": " of the "
          },
          {
            "Text": "vector",
            "AttrFlags": 2
          },
          {
            "Text": " will invalidate "
          },
          {
            "Text": "all",
            "AttrFlags": 4
          },
          {
            "Text": " iterators/pointers:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522057738,
        "id": "3ac3f4f1-f503-4846-9eaa-176f89ce903a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522057738,
        "parent_id": "43317b49-118b-468d-8415-4a0c1f4daa80",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "vector\u003cint\u003e v(5); // Vector has a size of 5; capacity is unknown.\nint *p1 = \u0026v[0];\nv.push_back(2);   // p1 may have been invalidated, since the capacity was unknown.\n\nv.reserve(20);    // Capacity is now at least 20.\nint *p2 = \u0026v[0];\nv.push_back(4);   // p2 is *not* invalidated, since the size of `v` is now 7.\nv.insert(v.end(), 30, 9); // Inserts 30 elements at the end. The size exceeds the\n                          // requested capacity of 20, so `p2` is (probably) invalidated.\nint *p3 = \u0026v[0];\nv.reserve(v.capacity() + 20); // Capacity exceeded, thus `p3` is invalid."
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "vector\u003cint\u003e v(5); // Vector has a size of 5; capacity is unknown.\nint *p1 = \u0026v[0];\nv.push_back(2);   // p1 may have been invalidated, since the capacity was unknown.\n\nv.reserve(20);    // Capacity is now at least 20.\nint *p2 = \u0026v[0];\nv.push_back(4);   // p2 is *not* invalidated, since the size of `v` is now 7.\nv.insert(v.end(), 30, 9); // Inserts 30 elements at the end. The size exceeds the\n                          // requested capacity of 20, so `p2` is (probably) invalidated.\nint *p3 = \u0026v[0];\nv.reserve(v.capacity() + 20); // Capacity exceeded, thus `p3` is invalid.",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522057738,
        "id": "a3221a31-017b-429b-a619-c7b16211e3f6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522057738,
        "parent_id": "43317b49-118b-468d-8415-4a0c1f4daa80",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "auto old_cap = v.capacity();\nv.shrink_to_fit();\nif(old_cap != v.capacity())\n    // Iterators were invalidated."
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "auto old_cap = v.capacity();\nv.shrink_to_fit();\nif(old_cap != v.capacity())\n    // Iterators were invalidated.",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522057738,
        "id": "ea3dd5f4-a6a3-4eea-b822-963ddc58a543",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522057738,
        "parent_id": "43317b49-118b-468d-8415-4a0c1f4daa80",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Any insertion operation, which does not increase the capacity, will still invalidate iterators/pointers pointing to elements at the insertion position and past it. This includes the "
            ],
            [
              "end",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " iterator:"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Any insertion operation, which does not increase the capacity, will still invalidate iterators/pointers pointing to elements at the insertion position and past it. This includes the "
          },
          {
            "Text": "end",
            "AttrFlags": 2
          },
          {
            "Text": " iterator:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522057738,
        "id": "5ce0f09f-f3ed-4c7e-9534-11aa02242495",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522057738,
        "parent_id": "43317b49-118b-468d-8415-4a0c1f4daa80",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "vector\u003cint\u003e v(5);\nv.reserve(20);                 // Capacity is at least 20.\nint *p1 = \u0026v[0];\nint *p2 = \u0026v[3];\nv.insert(v.begin() + 2, 5, 0); // `p2` is invalidated, but since the capacity\n                               // did not change, `p1` remains valid.\nint *p3 = \u0026v[v.size() - 1];\nv.push_back(10); // The capacity did not change, so `p3` and `p1` remain valid."
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "vector\u003cint\u003e v(5);\nv.reserve(20);                 // Capacity is at least 20.\nint *p1 = \u0026v[0];\nint *p2 = \u0026v[3];\nv.insert(v.begin() + 2, 5, 0); // `p2` is invalidated, but since the capacity\n                               // did not change, `p1` remains valid.\nint *p3 = \u0026v[v.size() - 1];\nv.push_back(10); // The capacity did not change, so `p3` and `p1` remain valid.",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522057739,
        "id": "876c845b-668f-4a8a-9511-f04bf16dd0e0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522057739,
        "parent_id": "43317b49-118b-468d-8415-4a0c1f4daa80",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Any removal operation will invalidate iterators/pointers pointing to the removed elements and to any elements past the removed elements. This includes the "
            ],
            [
              "end",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " iterator:"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Any removal operation will invalidate iterators/pointers pointing to the removed elements and to any elements past the removed elements. This includes the "
          },
          {
            "Text": "end",
            "AttrFlags": 2
          },
          {
            "Text": " iterator:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522057739,
        "id": "29bda842-5a22-4d4a-9b43-4621b2197de0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522057739,
        "parent_id": "43317b49-118b-468d-8415-4a0c1f4daa80",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "vector\u003cint\u003e v(10);\nint *p1 = \u0026v[0];\nint *p2 = \u0026v[5];\nv.erase(v.begin() + 3, v.end()); // `p2` is invalid, but `p1` remains valid."
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "vector\u003cint\u003e v(10);\nint *p1 = \u0026v[0];\nint *p2 = \u0026v[5];\nv.erase(v.begin() + 3, v.end()); // `p2` is invalid, but `p1` remains valid.",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522057739,
        "id": "a7e3dfb8-8eed-4b6d-885b-98a1c5f8b27b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522057739,
        "parent_id": "43317b49-118b-468d-8415-4a0c1f4daa80",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "operator=",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (copy, move, or otherwise) and "
            ],
            [
              "clear()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will invalidate all iterators/pointers pointing into the vector."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "operator=",
            "AttrFlags": 2
          },
          {
            "Text": " (copy, move, or otherwise) and "
          },
          {
            "Text": "clear()",
            "AttrFlags": 2
          },
          {
            "Text": " will invalidate all iterators/pointers pointing into the vector."
          }
        ]
      }
    ],
    "title": "IteratorPointer Invalidation",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}