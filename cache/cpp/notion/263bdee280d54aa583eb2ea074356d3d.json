{
  "ID": "263bdee2-80d5-4aa5-83eb-2ea074356d3d",
  "Root": {
    "alive": true,
    "content": [
      "fa902ac6-7918-436b-95b2-c779e23264c4",
      "e3bd4a87-20ee-4c1d-bdd0-e87f964fc3de"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550523039332,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "263bdee2-80d5-4aa5-83eb-2ea074356d3d",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551687137131,
    "parent_id": "5dbd715a-2e96-4062-9cda-4e181e63af5e",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Type Erasure"
        ]
      ]
    },
    "type": "page",
    "version": 4,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523039331,
        "id": "fa902ac6-7918-436b-95b2-c779e23264c4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523039331,
        "parent_id": "263bdee2-80d5-4aa5-83eb-2ea074356d3d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Introduction"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Introduction"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550523039332,
        "id": "e3bd4a87-20ee-4c1d-bdd0-e87f964fc3de",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550523039332,
        "parent_id": "263bdee2-80d5-4aa5-83eb-2ea074356d3d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Type erasure is a set of techniques for creating a type that can provide a uniform interface to various underlying types, while hiding the underlying type information from the client. "
            ],
            [
              "std::function\u003cR(A...)\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", which has the ability to hold callable objects of various types, is perhaps the best known example of type erasure in C++."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Type erasure is a set of techniques for creating a type that can provide a uniform interface to various underlying types, while hiding the underlying type information from the client. "
          },
          {
            "Text": "std::function\u003cR(A...)\u003e",
            "AttrFlags": 2
          },
          {
            "Text": ", which has the ability to hold callable objects of various types, is perhaps the best known example of type erasure in C++."
          }
        ]
      }
    ],
    "title": "Type Erasure",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}