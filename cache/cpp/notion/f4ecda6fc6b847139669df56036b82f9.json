{
  "ID": "f4ecda6f-c6b8-4713-9669-df56036b82f9",
  "Root": {
    "alive": true,
    "content": [
      "d7fef255-8b54-47c9-bd38-bde24a3d1eae",
      "e7a0b5cb-2a61-4e9c-b4b1-09a59b644cf4",
      "890e008b-f141-4302-bd99-98ed2dbc84fa",
      "290c1b81-5562-4639-bd57-9fd65d0bd674"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550522016434,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "f4ecda6f-c6b8-4713-9669-df56036b82f9",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550780340000,
    "parent_id": "b96c747c-3d87-49a0-b2bb-264f7c11b216",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Closing a file"
        ]
      ]
    },
    "type": "page",
    "version": 9,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522016431,
        "id": "d7fef255-8b54-47c9-bd38-bde24a3d1eae",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522016431,
        "parent_id": "f4ecda6f-c6b8-4713-9669-df56036b82f9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Explicitly closing a file is rarely necessary in C++, as a file stream will automatically close its associated file in its destructor. However, you should try to limit the lifetime of a file stream object, so that it does not keep the file handle open longer than necessary. For example, this can be done by putting all file operations into an own scope ("
            ],
            [
              "{}",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "):"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Explicitly closing a file is rarely necessary in C++, as a file stream will automatically close its associated file in its destructor. However, you should try to limit the lifetime of a file stream object, so that it does not keep the file handle open longer than necessary. For example, this can be done by putting all file operations into an own scope ("
          },
          {
            "Text": "{}",
            "AttrFlags": 2
          },
          {
            "Text": "):"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522016434,
        "id": "e7a0b5cb-2a61-4e9c-b4b1-09a59b644cf4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550780340000,
        "parent_id": "f4ecda6f-c6b8-4713-9669-df56036b82f9",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "std::string const prepared_data = prepare_data();\n{\n    // Open a file for writing.\n    std::ofstream output(\"foo.txt\");\n\n    // Write data.\n    output \u003c\u003c prepared_data;\n}  // The ofstream will go out of scope here.\n   // Its destructor will take care of closing the file properly."
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "std::string const prepared_data = prepare_data();\n{\n    // Open a file for writing.\n    std::ofstream output(\"foo.txt\");\n\n    // Write data.\n    output \u003c\u003c prepared_data;\n}  // The ofstream will go out of scope here.\n   // Its destructor will take care of closing the file properly.",
        "code_language": "C++"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522016434,
        "id": "890e008b-f141-4302-bd99-98ed2dbc84fa",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550522016434,
        "parent_id": "f4ecda6f-c6b8-4713-9669-df56036b82f9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Calling "
            ],
            [
              "close()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " explicitly is only necessary if you want to reuse the same "
            ],
            [
              "fstream",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " object later, but don’t want to keep the file open in between:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Calling "
          },
          {
            "Text": "close()",
            "AttrFlags": 2
          },
          {
            "Text": " explicitly is only necessary if you want to reuse the same "
          },
          {
            "Text": "fstream",
            "AttrFlags": 2
          },
          {
            "Text": " object later, but don’t want to keep the file open in between:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550522016434,
        "id": "290c1b81-5562-4639-bd57-9fd65d0bd674",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550780340000,
        "parent_id": "f4ecda6f-c6b8-4713-9669-df56036b82f9",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C++"
            ]
          ],
          "title": [
            [
              "// Open the file \"foo.txt\" for the first time.\nstd::ofstream output(\"foo.txt\");\n\n// Get some data to write from somewhere.\nstd::string const prepared_data = prepare_data();\n\n// Write data to the file \"foo.txt\".\noutput \u003c\u003c prepared_data;\n\n// Close the file \"foo.txt\".\noutput.close();\n\n// Preparing data might take a long time. Therefore, we don't open the output file stream\n// before we actually can write some data to it.\nstd::string const more_prepared_data = prepare_complex_data();\n\n// Open the file \"foo.txt\" for the second time once we are ready for writing.\noutput.open(\"foo.txt\");\n\n// Write the data to the file \"foo.txt\".\noutput \u003c\u003c more_prepared_data;\n\n// Close the file \"foo.txt\" once again.\noutput.close();"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "// Open the file \"foo.txt\" for the first time.\nstd::ofstream output(\"foo.txt\");\n\n// Get some data to write from somewhere.\nstd::string const prepared_data = prepare_data();\n\n// Write data to the file \"foo.txt\".\noutput \u003c\u003c prepared_data;\n\n// Close the file \"foo.txt\".\noutput.close();\n\n// Preparing data might take a long time. Therefore, we don't open the output file stream\n// before we actually can write some data to it.\nstd::string const more_prepared_data = prepare_complex_data();\n\n// Open the file \"foo.txt\" for the second time once we are ready for writing.\noutput.open(\"foo.txt\");\n\n// Write the data to the file \"foo.txt\".\noutput \u003c\u003c more_prepared_data;\n\n// Close the file \"foo.txt\" once again.\noutput.close();",
        "code_language": "C++"
      }
    ],
    "title": "Closing a file",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}